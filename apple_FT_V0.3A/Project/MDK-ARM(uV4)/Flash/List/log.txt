; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\log.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\log.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\log.crf ..\..\User\LOG\log.c]
                          THUMB

                          AREA ||i.EM_LOG||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  EM_LOG PROC
;;;302    }
;;;303    void EM_LOG(const int level,const char* fun, const int line ,const char* fmt, ...)
000000  b40f              PUSH     {r0-r3}
;;;304    {
000002  b5f0              PUSH     {r4-r7,lr}
000004  b08f              SUB      sp,sp,#0x3c
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
;;;305    #ifdef OPEN_LOG
;;;306    	va_list arg;
;;;307    	va_start(arg, fmt);
00000c  a818              ADD      r0,sp,#0x60
00000e  900e              STR      r0,[sp,#0x38]
;;;308    	char buf[50] = { 0 };
000010  2134              MOVS     r1,#0x34
000012  a801              ADD      r0,sp,#4
000014  f7fffffe          BL       __aeabi_memclr4
;;;309    	vsnprintf(buf, sizeof(buf), fmt, arg);
000018  2132              MOVS     r1,#0x32
00001a  a801              ADD      r0,sp,#4
00001c  9b0e              LDR      r3,[sp,#0x38]
00001e  9a17              LDR      r2,[sp,#0x5c]
000020  f7fffffe          BL       vsnprintf
;;;310    	va_end(arg);
000024  2000              MOVS     r0,#0
000026  900e              STR      r0,[sp,#0x38]
;;;311    	if (level >= LOG_LEVEL)
000028  2c00              CMP      r4,#0
00002a  db0b              BLT      |L1.68|
;;;312    		
;;;313    		printf("[%-5s] [%-20s%4d] %s \r\n", EM_LOGLevelGet(level), fun, line, buf);
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       EM_LOGLevelGet
000032  4607              MOV      r7,r0
000034  a801              ADD      r0,sp,#4
000036  4633              MOV      r3,r6
000038  462a              MOV      r2,r5
00003a  4639              MOV      r1,r7
00003c  9000              STR      r0,[sp,#0]
00003e  a003              ADR      r0,|L1.76|
000040  f7fffffe          BL       __2printf
                  |L1.68|
;;;314    #endif
;;;315    }
000044  b00f              ADD      sp,sp,#0x3c
000046  bcf0              POP      {r4-r7}
000048  f85dfb14          LDR      pc,[sp],#0x14
;;;316    
                          ENDP

                  |L1.76|
00004c  5b252d35          DCB      "[%-5s] [%-20s%4d] %s \r\n",0
000050  735d205b
000054  252d3230
000058  73253464
00005c  5d202573
000060  200d0a00

                          AREA ||i.EM_LOGLevelGet||, CODE, READONLY, ALIGN=2

                  EM_LOGLevelGet PROC
;;;286    
;;;287    char* EM_LOGLevelGet(const int level)
000000  4601              MOV      r1,r0
;;;288    {
;;;289    	if (level == LOG_DEBUG) {
000002  b909              CBNZ     r1,|L2.8|
;;;290    		return "DEBUG";
000004  a007              ADR      r0,|L2.36|
                  |L2.6|
;;;291    	}
;;;292    	else if (level == LOG_INFO) {
;;;293    		return "INFO";
;;;294    	}
;;;295    	else if (level == LOG_WARN) {
;;;296    		return "WARN";
;;;297    	}
;;;298    	else if (level == LOG_ERROR) {
;;;299    		return "ERROR";
;;;300    	}
;;;301    	return "UNLNOW";
;;;302    }
000006  4770              BX       lr
                  |L2.8|
000008  2901              CMP      r1,#1                 ;292
00000a  d101              BNE      |L2.16|
00000c  a007              ADR      r0,|L2.44|
00000e  e7fa              B        |L2.6|
                  |L2.16|
000010  2902              CMP      r1,#2                 ;295
000012  d101              BNE      |L2.24|
000014  a007              ADR      r0,|L2.52|
000016  e7f6              B        |L2.6|
                  |L2.24|
000018  2903              CMP      r1,#3                 ;298
00001a  d101              BNE      |L2.32|
00001c  a007              ADR      r0,|L2.60|
00001e  e7f2              B        |L2.6|
                  |L2.32|
000020  a008              ADR      r0,|L2.68|
000022  e7f0              B        |L2.6|
;;;303    void EM_LOG(const int level,const char* fun, const int line ,const char* fmt, ...)
                          ENDP

                  |L2.36|
000024  44454255          DCB      "DEBUG",0
000028  4700    
00002a  00                DCB      0
00002b  00                DCB      0
                  |L2.44|
00002c  494e464f          DCB      "INFO",0
000030  00      
000031  00                DCB      0
000032  00                DCB      0
000033  00                DCB      0
                  |L2.52|
000034  5741524e          DCB      "WARN",0
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0
                  |L2.60|
00003c  4552524f          DCB      "ERROR",0
000040  5200    
000042  00                DCB      0
000043  00                DCB      0
                  |L2.68|
000044  554e4c4e          DCB      "UNLNOW",0
000048  4f5700  
00004b  00                DCB      0

                          AREA ||i.logger||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  logger PROC
;;;221    
;;;222    void logger(const char *fmt,...)
000000  b40f              PUSH     {r0-r3}
;;;223    {
000002  b510              PUSH     {r4,lr}
000004  b0c2              SUB      sp,sp,#0x108
;;;224        char buf[256];
;;;225        va_list args;
;;;226         
;;;227        
;;;228        va_start(args, fmt);
000006  a845              ADD      r0,sp,#0x114
000008  9001              STR      r0,[sp,#4]
;;;229        vsprintf(buf, fmt, args);
00000a  a802              ADD      r0,sp,#8
00000c  9a01              LDR      r2,[sp,#4]
00000e  9944              LDR      r1,[sp,#0x110]
000010  f7fffffe          BL       vsprintf
;;;230        va_end(args);
000014  2000              MOVS     r0,#0
000016  9001              STR      r0,[sp,#4]
;;;231        //display_show_string(buf, WHITE, BLACK);
;;;232        logger_start();                /* 开始 */
000018  f7fffffe          BL       logger_start
;;;233         /*-3- 偏移指针到末尾处*/	   
;;;234    	//printf(" file size: %d \r\n",(int)logger_file.fsize);
;;;235    	f_lseek(&logger_file,logger_file.fsize);
00001c  4811              LDR      r0,|L3.100|
00001e  68c1              LDR      r1,[r0,#0xc]  ; logger_file
000020  f7fffffe          BL       f_lseek
;;;236        /*-4- 在txt文件尾续写数据*/
;;;237         
;;;238    	retSD = f_write(&logger_file, buf, strlen(buf), (void *)&bw);	//在文件内写入wtext内的内容	
000024  a802              ADD      r0,sp,#8
000026  f7fffffe          BL       strlen
00002a  4604              MOV      r4,r0
00002c  4b0e              LDR      r3,|L3.104|
00002e  4622              MOV      r2,r4
000030  a902              ADD      r1,sp,#8
000032  480c              LDR      r0,|L3.100|
000034  f7fffffe          BL       f_write
000038  490c              LDR      r1,|L3.108|
00003a  7008              STRB     r0,[r1,#0]
;;;239    
;;;240    	if(retSD)															//返回值不为0（出现问题）
00003c  4608              MOV      r0,r1
00003e  7800              LDRB     r0,[r0,#0]  ; retSD
000040  b128              CBZ      r0,|L3.78|
;;;241        {
;;;242            debug(" write file error : %d\r\n",retSD);						//打印问题代码
000042  4608              MOV      r0,r1
000044  7801              LDRB     r1,[r0,#0]  ; retSD
000046  a00a              ADR      r0,|L3.112|
000048  f7fffffe          BL       __2printf
00004c  e003              B        |L3.86|
                  |L3.78|
;;;243        }
;;;244        else
;;;245        {
;;;246            debug("%s",buf);							//打印写入的内容
00004e  a902              ADD      r1,sp,#8
000050  a00e              ADR      r0,|L3.140|
000052  f7fffffe          BL       __2printf
                  |L3.86|
;;;247        }
;;;248        
;;;249        logger_over();
000056  f7fffffe          BL       logger_over
;;;250    }
00005a  b042              ADD      sp,sp,#0x108
00005c  bc10              POP      {r4}
00005e  f85dfb14          LDR      pc,[sp],#0x14
;;;251    #endif
                          ENDP

000062  0000              DCW      0x0000
                  |L3.100|
                          DCD      logger_file
                  |L3.104|
                          DCD      ||bw||
                  |L3.108|
                          DCD      retSD
                  |L3.112|
000070  20777269          DCB      " write file error : %d\r\n",0
000074  74652066
000078  696c6520
00007c  6572726f
000080  72203a20
000084  25640d0a
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L3.140|
00008c  257300            DCB      "%s",0
00008f  00                DCB      0

                          AREA ||i.logger_buffer_write||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  logger_buffer_write PROC
;;;320    
;;;321    int32_t logger_buffer_write(const char *fmt,...)
000000  b40f              PUSH     {r0-r3}
;;;322    {
000002  b510              PUSH     {r4,lr}
000004  b0c2              SUB      sp,sp,#0x108
;;;323        char buf[256];  /* 单次写入不要超过256 */
;;;324        va_list args;
;;;325     
;;;326        va_start(args, fmt);
000006  a845              ADD      r0,sp,#0x114
000008  9001              STR      r0,[sp,#4]
;;;327        vsprintf(buf, fmt, args);
00000a  a802              ADD      r0,sp,#8
00000c  9a01              LDR      r2,[sp,#4]
00000e  9944              LDR      r1,[sp,#0x110]
000010  f7fffffe          BL       vsprintf
;;;328        va_end(args);
000014  2000              MOVS     r0,#0
000016  9001              STR      r0,[sp,#4]
;;;329        debug("%s",buf);							//打印写入的内容
000018  a902              ADD      r1,sp,#8
00001a  a012              ADR      r0,|L4.100|
00001c  f7fffffe          BL       __2printf
;;;330        uint32_t len = strlen(buf);
000020  a802              ADD      r0,sp,#8
000022  f7fffffe          BL       strlen
000026  4604              MOV      r4,r0
;;;331        if(high_water_mark + len > LOG_BUF_SIZE) // 超过logger buffer尺寸报错
000028  480f              LDR      r0,|L4.104|
00002a  6800              LDR      r0,[r0,#0]  ; high_water_mark
00002c  4420              ADD      r0,r0,r4
00002e  f5b05f80          CMP      r0,#0x1000
000032  d908              BLS      |L4.70|
;;;332        {
;;;333            debug("ERROR logger_buf oversize!");
000034  a00d              ADR      r0,|L4.108|
000036  f7fffffe          BL       __2printf
;;;334            return -1;
00003a  f04f30ff          MOV      r0,#0xffffffff
                  |L4.62|
;;;335        }
;;;336        memcpy( &logger_buf[high_water_mark], buf, len);  //将写入的内容转存到logger_buf
;;;337        high_water_mark += len;
;;;338        
;;;339        return 0;
;;;340    }
00003e  b042              ADD      sp,sp,#0x108
000040  bc10              POP      {r4}
000042  f85dfb14          LDR      pc,[sp],#0x14
                  |L4.70|
000046  4910              LDR      r1,|L4.136|
000048  4a07              LDR      r2,|L4.104|
00004a  6812              LDR      r2,[r2,#0]            ;336  ; high_water_mark
00004c  1888              ADDS     r0,r1,r2              ;336
00004e  4622              MOV      r2,r4                 ;336
000050  a902              ADD      r1,sp,#8              ;336
000052  f7fffffe          BL       __aeabi_memcpy
000056  4804              LDR      r0,|L4.104|
000058  6800              LDR      r0,[r0,#0]            ;337  ; high_water_mark
00005a  4420              ADD      r0,r0,r4              ;337
00005c  4902              LDR      r1,|L4.104|
00005e  6008              STR      r0,[r1,#0]            ;337  ; high_water_mark
000060  2000              MOVS     r0,#0                 ;339
000062  e7ec              B        |L4.62|
;;;341    
                          ENDP

                  |L4.100|
000064  257300            DCB      "%s",0
000067  00                DCB      0
                  |L4.104|
                          DCD      high_water_mark
                  |L4.108|
00006c  4552524f          DCB      "ERROR logger_buf oversize!",0
000070  52206c6f
000074  67676572
000078  5f627566
00007c  206f7665
000080  7273697a
000084  652100  
000087  00                DCB      0
                  |L4.136|
                          DCD      logger_buf

                          AREA ||i.logger_over||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  logger_over PROC
;;;253    //chip ft 日志结束；会判断是否大于文件是否超过了 限制
;;;254    void logger_over(void)
000000  b510              PUSH     {r4,lr}
;;;255    {
;;;256        
;;;257        if(logger_file.fsize > FILE_OVER_SIZE)
000002  4819              LDR      r0,|L5.104|
000004  68c0              LDR      r0,[r0,#0xc]  ; logger_file
000006  4919              LDR      r1,|L5.108|
000008  4288              CMP      r0,r1
00000a  d92b              BLS      |L5.100|
;;;258        {
;;;259            ee_data.logger_cnt++;
00000c  4818              LDR      r0,|L5.112|
00000e  6840              LDR      r0,[r0,#4]  ; ee_data
000010  1c40              ADDS     r0,r0,#1
000012  4917              LDR      r1,|L5.112|
000014  6048              STR      r0,[r1,#4]  ; ee_data
;;;260            ee_data_save();
000016  f7fffffe          BL       ee_data_save
;;;261            /*-5- 关闭txt文件*/
;;;262            retSD = f_close(&logger_file);												//关闭该文件
00001a  4813              LDR      r0,|L5.104|
00001c  f7fffffe          BL       f_close
000020  4914              LDR      r1,|L5.116|
000022  7008              STRB     r0,[r1,#0]
;;;263            if(retSD)															//返回值不为0（出现问题）
000024  4608              MOV      r0,r1
000026  7800              LDRB     r0,[r0,#0]  ; retSD
000028  b120              CBZ      r0,|L5.52|
;;;264            {
;;;265                debug(" close error : %d\r\n",retSD);							//打印问题代码
00002a  4608              MOV      r0,r1
00002c  7801              LDRB     r1,[r0,#0]  ; retSD
00002e  a012              ADR      r0,|L5.120|
000030  f7fffffe          BL       __2printf
                  |L5.52|
;;;266            }
;;;267            bsp_DelayMS(3); 
000034  2003              MOVS     r0,#3
000036  f7fffffe          BL       bsp_DelayMS
;;;268            uint8_t retry =0;
00003a  2400              MOVS     r4,#0
;;;269            do
00003c  bf00              NOP      
                  |L5.62|
;;;270            {
;;;271                if(logger_txt_creat()) 
00003e  f7fffffe          BL       logger_txt_creat
000042  b150              CBZ      r0,|L5.90|
;;;272                {
;;;273                    retry++;
000044  1c60              ADDS     r0,r4,#1
000046  b2c4              UXTB     r4,r0
;;;274                    LCD_SHOW_WARN("try %d logger txt creat fail!\n",retry); //eeprom数据不对，被初始化的提示
000048  4622              MOV      r2,r4
00004a  a110              ADR      r1,|L5.140|
00004c  2003              MOVS     r0,#3
00004e  f7fffffe          BL       display_show_log
;;;275                    bsp_DelayMS(3); 
000052  2003              MOVS     r0,#3
000054  f7fffffe          BL       bsp_DelayMS
000058  e000              B        |L5.92|
                  |L5.90|
;;;276                }    
;;;277                else
;;;278                {
;;;279                    break;
00005a  e001              B        |L5.96|
                  |L5.92|
;;;280                }
;;;281            }while(retry < 3);
00005c  2c03              CMP      r4,#3
00005e  dbee              BLT      |L5.62|
                  |L5.96|
000060  bf00              NOP                            ;279
;;;282            
;;;283        }
000062  bf00              NOP      
                  |L5.100|
;;;284    }
000064  bd10              POP      {r4,pc}
;;;285    
                          ENDP

000066  0000              DCW      0x0000
                  |L5.104|
                          DCD      logger_file
                  |L5.108|
                          DCD      0x0007a120
                  |L5.112|
                          DCD      ee_data
                  |L5.116|
                          DCD      retSD
                  |L5.120|
000078  20636c6f          DCB      " close error : %d\r\n",0
00007c  73652065
000080  72726f72
000084  203a2025
000088  640d0a00
                  |L5.140|
00008c  74727920          DCB      "try %d logger txt creat fail!\n",0
000090  2564206c
000094  6f676765
000098  72207478
00009c  74206372
0000a0  65617420
0000a4  6661696c
0000a8  210a00  
0000ab  00                DCB      0

                          AREA ||i.logger_sd_card_write||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  logger_sd_card_write PROC
;;;341    
;;;342    int32_t logger_sd_card_write(void)
000000  b510              PUSH     {r4,lr}
;;;343    {
;;;344        int32_t ret=0;
000002  2400              MOVS     r4,#0
;;;345        logger_start();                /* 开始 */
000004  f7fffffe          BL       logger_start
;;;346         /*-3- 偏移指针到末尾处*/	
;;;347        if(is_logger_enable)
000008  4818              LDR      r0,|L6.108|
00000a  7800              LDRB     r0,[r0,#0]  ; is_logger_enable
00000c  2800              CMP      r0,#0
00000e  d01f              BEQ      |L6.80|
;;;348        {
;;;349            printf(" file size: %d \r\n",(int)logger_file.fsize);
000010  4817              LDR      r0,|L6.112|
000012  68c1              LDR      r1,[r0,#0xc]  ; logger_file
000014  a017              ADR      r0,|L6.116|
000016  f7fffffe          BL       __2printf
;;;350            f_lseek(&logger_file,logger_file.fsize);
00001a  4815              LDR      r0,|L6.112|
00001c  68c1              LDR      r1,[r0,#0xc]  ; logger_file
00001e  f7fffffe          BL       f_lseek
;;;351            /*-4- 在txt文件尾续写数据*/
;;;352            //debug("filesize=%d\r\n",(uint32_t)logger_file.fsize);  
;;;353            retSD = f_write(&logger_file, logger_buf, high_water_mark, (void *)&bw);	//在文件内写入wtext内的内容	
000022  4b19              LDR      r3,|L6.136|
000024  4819              LDR      r0,|L6.140|
000026  491a              LDR      r1,|L6.144|
000028  6802              LDR      r2,[r0,#0]  ; high_water_mark
00002a  4811              LDR      r0,|L6.112|
00002c  f7fffffe          BL       f_write
000030  4918              LDR      r1,|L6.148|
000032  7008              STRB     r0,[r1,#0]
;;;354            //debug("bw=%d\r\n",bw); //bw就是写入的数 
;;;355            if(retSD)															//返回值不为0（出现问题）
000034  4608              MOV      r0,r1
000036  7800              LDRB     r0,[r0,#0]  ; retSD
000038  b128              CBZ      r0,|L6.70|
;;;356            {
;;;357                debug(" write file error : %d\r\n",retSD);						//打印问题代码
00003a  4608              MOV      r0,r1
00003c  7801              LDRB     r1,[r0,#0]  ; retSD
00003e  a016              ADR      r0,|L6.152|
000040  f7fffffe          BL       __2printf
;;;358                ret = -1;
000044  1e64              SUBS     r4,r4,#1
                  |L6.70|
;;;359            }
;;;360            f_sync(&logger_file);
000046  480a              LDR      r0,|L6.112|
000048  f7fffffe          BL       f_sync
;;;361            logger_over();
00004c  f7fffffe          BL       logger_over
                  |L6.80|
;;;362        }        
;;;363    	
;;;364        //debug("water_mark=%d\r\n",high_water_mark);
;;;365        display_show_logger(logger_buf, BLACK);
000050  2100              MOVS     r1,#0
000052  480f              LDR      r0,|L6.144|
000054  f7fffffe          BL       display_show_logger
;;;366        memset(logger_buf,0,LOG_BUF_SIZE);
000058  f44f5180          MOV      r1,#0x1000
00005c  480c              LDR      r0,|L6.144|
00005e  f7fffffe          BL       __aeabi_memclr
;;;367        high_water_mark = 0;
000062  2000              MOVS     r0,#0
000064  4909              LDR      r1,|L6.140|
000066  6008              STR      r0,[r1,#0]  ; high_water_mark
;;;368        return ret;
000068  4620              MOV      r0,r4
;;;369    }
00006a  bd10              POP      {r4,pc}
;;;370    
                          ENDP

                  |L6.108|
                          DCD      is_logger_enable
                  |L6.112|
                          DCD      logger_file
                  |L6.116|
000074  2066696c          DCB      " file size: %d \r\n",0
000078  65207369
00007c  7a653a20
000080  2564200d
000084  0a00    
000086  00                DCB      0
000087  00                DCB      0
                  |L6.136|
                          DCD      ||bw||
                  |L6.140|
                          DCD      high_water_mark
                  |L6.144|
                          DCD      logger_buf
                  |L6.148|
                          DCD      retSD
                  |L6.152|
000098  20777269          DCB      " write file error : %d\r\n",0
00009c  74652066
0000a0  696c6520
0000a4  6572726f
0000a8  72203a20
0000ac  25640d0a
0000b0  00      
0000b1  00                DCB      0
0000b2  00                DCB      0
0000b3  00                DCB      0

                          AREA ||i.logger_start||, CODE, READONLY, ALIGN=1

                  logger_start PROC
;;;175    
;;;176    void logger_start(void)
000000  4770              BX       lr
;;;177    {
;;;178        
;;;179    //    sprintf(log_file_name,"logger/ft_logger_%04d.txt",ee_data.logger_num);  //根据eeprom保存的数据生成ft_logger_xxxx.txt文件名
;;;180    //    //debug("logger FILE:  %s\r\n",log_file_name);
;;;181    //    
;;;182    //    retSD = f_open(&logger_file, log_file_name, FA_OPEN_ALWAYS);
;;;183    //    if(retSD)  //没有文件
;;;184    //    {
;;;185    //         /*-2-创建新的文件并写入数据*/
;;;186    //        retSD = f_open(&logger_file, log_file_name, FA_OPEN_ALWAYS | FA_WRITE);		//打开文件，权限包括创建、写（如果没有该文件，会创建该文件）
;;;187    //        if(retSD)															//返回值不为0（出现问题）
;;;188    //        {
;;;189    //            debug(" open file error : %d\r\n",retSD);						//打印问题代码
;;;190    //        }
;;;191    //        else
;;;192    //        {
;;;193    //            //printf(" file size: %d \r\n",(int)logger_file.fsize);
;;;194    //        }
;;;195    //    }
;;;196        
;;;197        
;;;198        
;;;199    }
;;;200    
                          ENDP


                          AREA ||i.logger_txt_creat||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  logger_txt_creat PROC
;;;45     
;;;46     int32_t logger_txt_creat(void)
000000  b510              PUSH     {r4,lr}
;;;47     {
;;;48     //    if(ee_data_load(&ee_data))
;;;49     //    {
;;;50     //        LCD_SHOW_NG("eeprom error!");
;;;51     //        return -1;
;;;52     //    }
;;;53         sprintf(log_file_name,LOGGER_TXT_FORMAT,ee_data.logger_cnt);      //根据eeprom保存的数据生成ft_logger_xxxx.txt文件名
000002  4812              LDR      r0,|L8.76|
000004  a112              ADR      r1,|L8.80|
000006  6842              LDR      r2,[r0,#4]  ; ee_data
000008  4816              LDR      r0,|L8.100|
00000a  f7fffffe          BL       __2sprintf
;;;54         
;;;55         //retSD = f_open(&logger_file, log_file_name, FA_OPEN_ALWAYS);
;;;56         //if(retSD)
;;;57         //{
;;;58             /*-2-创建新的文件并写入数据*/
;;;59             retSD = f_open(&logger_file, log_file_name, FA_OPEN_ALWAYS | FA_WRITE);		//打开文件，权限包括创建、写（如果没有该文件，会创建该文件）
00000e  2212              MOVS     r2,#0x12
000010  4914              LDR      r1,|L8.100|
000012  4815              LDR      r0,|L8.104|
000014  f7fffffe          BL       f_open
000018  4914              LDR      r1,|L8.108|
00001a  7008              STRB     r0,[r1,#0]
;;;60             if(retSD)															    //返回值不为0（出现问题）
00001c  4608              MOV      r0,r1
00001e  7800              LDRB     r0,[r0,#0]  ; retSD
000020  b150              CBZ      r0,|L8.56|
;;;61             {
;;;62                 //debug(" creat %s file error : %d\r\n",log_file_name,retSD);	    //打印问题代码
;;;63                 LCD_SHOW_WARN("Disable SD card logger:%d\r\n",retSD);
000022  4608              MOV      r0,r1
000024  7802              LDRB     r2,[r0,#0]  ; retSD
000026  a112              ADR      r1,|L8.112|
000028  2003              MOVS     r0,#3
00002a  f7fffffe          BL       display_show_log
;;;64                 is_logger_enable = 0;
00002e  2000              MOVS     r0,#0
000030  4916              LDR      r1,|L8.140|
000032  7008              STRB     r0,[r1,#0]
;;;65                 return -1;
000034  1e40              SUBS     r0,r0,#1
                  |L8.54|
;;;66             }
;;;67             else
;;;68             {
;;;69                 //printf(" file size: %d \r\n",(int)logger_file.fsize);
;;;70                 is_logger_enable = 1;
;;;71                 LCD_SHOW_PASS(" creat %s file success!\r\n",log_file_name);
;;;72             }
;;;73         //}
;;;74         return 0;
;;;75     }
000036  bd10              POP      {r4,pc}
                  |L8.56|
000038  2001              MOVS     r0,#1                 ;70
00003a  4914              LDR      r1,|L8.140|
00003c  7008              STRB     r0,[r1,#0]            ;70
00003e  4a09              LDR      r2,|L8.100|
000040  a113              ADR      r1,|L8.144|
000042  2002              MOVS     r0,#2                 ;71
000044  f7fffffe          BL       display_show_log
000048  2000              MOVS     r0,#0                 ;74
00004a  e7f4              B        |L8.54|
;;;76     
                          ENDP

                  |L8.76|
                          DCD      ee_data
                  |L8.80|
000050  313a2f6c          DCB      "1:/logger_%04d.txt",0
000054  6f676765
000058  725f2530
00005c  34642e74
000060  787400  
000063  00                DCB      0
                  |L8.100|
                          DCD      log_file_name
                  |L8.104|
                          DCD      logger_file
                  |L8.108|
                          DCD      retSD
                  |L8.112|
000070  44697361          DCB      "Disable SD card logger:%d\r\n",0
000074  626c6520
000078  53442063
00007c  61726420
000080  6c6f6767
000084  65723a25
000088  640d0a00
                  |L8.140|
                          DCD      is_logger_enable
                  |L8.144|
000090  20637265          DCB      " creat %s file success!\r\n",0
000094  61742025
000098  73206669
00009c  6c652073
0000a0  75636365
0000a4  7373210d
0000a8  0a00    
0000aa  00                DCB      0
0000ab  00                DCB      0

                          AREA ||i.sd_file_sys_mount||, CODE, READONLY, ALIGN=2

                  sd_file_sys_mount PROC
;;;33     
;;;34     int32_t sd_file_sys_mount(void)
000000  b510              PUSH     {r4,lr}
;;;35     {
;;;36         /*-1- 挂载文件系统*/
;;;37         retSD = f_mount(&fs, SD_VOLUME, 0);
000002  2200              MOVS     r2,#0
000004  a109              ADR      r1,|L9.44|
000006  480a              LDR      r0,|L9.48|
000008  f7fffffe          BL       f_mount
00000c  4909              LDR      r1,|L9.52|
00000e  7008              STRB     r0,[r1,#0]
;;;38         if(retSD)
000010  4608              MOV      r0,r1
000012  7800              LDRB     r0,[r0,#0]  ; retSD
000014  b140              CBZ      r0,|L9.40|
;;;39         {
;;;40             LCD_SHOW_WARN(" mount error : %d \r\n",retSD);
000016  4608              MOV      r0,r1
000018  7802              LDRB     r2,[r0,#0]  ; retSD
00001a  a107              ADR      r1,|L9.56|
00001c  2003              MOVS     r0,#3
00001e  f7fffffe          BL       display_show_log
;;;41             return -1; 
000022  f04f30ff          MOV      r0,#0xffffffff
                  |L9.38|
;;;42         }
;;;43         return 0;
;;;44     }
000026  bd10              POP      {r4,pc}
                  |L9.40|
000028  2000              MOVS     r0,#0                 ;43
00002a  e7fc              B        |L9.38|
;;;45     
                          ENDP

                  |L9.44|
00002c  313a00            DCB      "1:",0
00002f  00                DCB      0
                  |L9.48|
                          DCD      ||fs||
                  |L9.52|
                          DCD      retSD
                  |L9.56|
000038  206d6f75          DCB      " mount error : %d \r\n",0
00003c  6e742065
000040  72726f72
000044  203a2025
000048  64200d0a
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0

                          AREA ||i.test_logger_clear||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  test_logger_clear PROC
;;;79     
;;;80     void test_logger_clear(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;81     {
;;;82         FRESULT res; 
;;;83         uint32_t fail_cnt=0;
000004  2700              MOVS     r7,#0
;;;84         
;;;85         chip_counter_fail   = 0;
000006  2000              MOVS     r0,#0
000008  491f              LDR      r1,|L10.136|
00000a  6008              STR      r0,[r1,#0]  ; chip_counter_fail
;;;86         chip_counter_pass   = 0;
00000c  491f              LDR      r1,|L10.140|
00000e  6008              STR      r0,[r1,#0]  ; chip_counter_pass
;;;87         chip_counter_total  = 0;
000010  491f              LDR      r1,|L10.144|
000012  6008              STR      r0,[r1,#0]  ; chip_counter_total
;;;88         ee_data.logger_cnt  = 0;
000014  491f              LDR      r1,|L10.148|
000016  6048              STR      r0,[r1,#4]  ; ee_data
;;;89         ee_data_save();
000018  f7fffffe          BL       ee_data_save
;;;90         f_close(&logger_file); //关掉当前日志文件
00001c  481e              LDR      r0,|L10.152|
00001e  f7fffffe          BL       f_close
;;;91         
;;;92         for(uint32_t i = 0; i<10000; i++)  //删除所有日志
000022  2600              MOVS     r6,#0
000024  e014              B        |L10.80|
                  |L10.38|
;;;93         {
;;;94             sprintf(log_file_name,LOGGER_TXT_FORMAT,i);
000026  4632              MOV      r2,r6
000028  a11c              ADR      r1,|L10.156|
00002a  4821              LDR      r0,|L10.176|
00002c  f7fffffe          BL       __2sprintf
;;;95             res = f_unlink(log_file_name);
000030  481f              LDR      r0,|L10.176|
000032  f7fffffe          BL       f_unlink
000036  4605              MOV      r5,r0
;;;96             if (res == FR_OK) 
000038  b92d              CBNZ     r5,|L10.70|
;;;97             {
;;;98                 fail_cnt = 0;
00003a  2700              MOVS     r7,#0
;;;99                 printf("%s 删除成功！\r\n",log_file_name);
00003c  491c              LDR      r1,|L10.176|
00003e  a01d              ADR      r0,|L10.180|
000040  f7fffffe          BL       __2printf
000044  e003              B        |L10.78|
                  |L10.70|
;;;100            } 
;;;101            else 
;;;102            {
;;;103                fail_cnt++;
000046  1c7f              ADDS     r7,r7,#1
;;;104                if(fail_cnt == 100)
000048  2f64              CMP      r7,#0x64
00004a  d100              BNE      |L10.78|
;;;105                {
;;;106                    break;  //连续100次都删除失败，后续文件认为就没有了，直接退出，否则会耗费很多时间
00004c  e004              B        |L10.88|
                  |L10.78|
00004e  1c76              ADDS     r6,r6,#1              ;92
                  |L10.80|
000050  f2427010          MOV      r0,#0x2710            ;92
000054  4286              CMP      r6,r0                 ;92
000056  d3e6              BCC      |L10.38|
                  |L10.88|
000058  bf00              NOP      
;;;107                }
;;;108                //printf("文件删除失败，错误代码：%d\r\n", res); 
;;;109            }
;;;110        }
;;;111        uint8_t retry =0;
00005a  2400              MOVS     r4,#0
;;;112        do
00005c  bf00              NOP      
                  |L10.94|
;;;113        {
;;;114            if(logger_txt_creat()) 
00005e  f7fffffe          BL       logger_txt_creat
000062  b150              CBZ      r0,|L10.122|
;;;115            {
;;;116                retry++;
000064  1c60              ADDS     r0,r4,#1
000066  b2c4              UXTB     r4,r0
;;;117                LCD_SHOW_WARN("try %d logger txt creat fail!\n",retry); //eeprom数据不对，被初始化的提示
000068  4622              MOV      r2,r4
00006a  a118              ADR      r1,|L10.204|
00006c  2003              MOVS     r0,#3
00006e  f7fffffe          BL       display_show_log
;;;118                bsp_DelayMS(3); 
000072  2003              MOVS     r0,#3
000074  f7fffffe          BL       bsp_DelayMS
000078  e000              B        |L10.124|
                  |L10.122|
;;;119            }    
;;;120            else
;;;121            {
;;;122                break;
00007a  e001              B        |L10.128|
                  |L10.124|
;;;123            }
;;;124        }while(retry < 3);
00007c  2c03              CMP      r4,#3
00007e  dbee              BLT      |L10.94|
                  |L10.128|
000080  bf00              NOP                            ;122
;;;125    }
000082  e8bd81f0          POP      {r4-r8,pc}
;;;126    
                          ENDP

000086  0000              DCW      0x0000
                  |L10.136|
                          DCD      chip_counter_fail
                  |L10.140|
                          DCD      chip_counter_pass
                  |L10.144|
                          DCD      chip_counter_total
                  |L10.148|
                          DCD      ee_data
                  |L10.152|
                          DCD      logger_file
                  |L10.156|
00009c  313a2f6c          DCB      "1:/logger_%04d.txt",0
0000a0  6f676765
0000a4  725f2530
0000a8  34642e74
0000ac  787400  
0000af  00                DCB      0
                  |L10.176|
                          DCD      log_file_name
                  |L10.180|
0000b4  257320e5          DCB      "%s ",229,136,160,233,153,164,230,136,144,229,138,159,239
0000b8  88a0e999
0000bc  a4e68890
0000c0  e58a9fef
0000c4  bc815c72          DCB      188,129,"\\r\n",0
0000c8  0a00    
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L10.204|
0000cc  74727920          DCB      "try %d logger txt creat fail!\n",0
0000d0  2564206c
0000d4  6f676765
0000d8  72207478
0000dc  74206372
0000e0  65617420
0000e4  6661696c
0000e8  210a00  
0000eb  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  logger_file
                          %        4136
                  ||fs||
                          %        4144
                  log_file_name
                          %        30
                  logger_buf
                          %        4096

                          AREA ||.data||, DATA, ALIGN=2

                  retSD
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  ||bw||
                          DCD      0x00000000
                  is_logger_enable
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  chip_counter_pass
                          DCD      0x00000000
                  chip_counter_fail
                          DCD      0x00000000
                  chip_counter_total
                          DCD      0x00000000
                  high_water_mark
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\LOG\\log.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_log_c_d6bf58db____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_log_c_d6bf58db____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_log_c_d6bf58db____REVSH|
#line 144
|__asm___5_log_c_d6bf58db____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
