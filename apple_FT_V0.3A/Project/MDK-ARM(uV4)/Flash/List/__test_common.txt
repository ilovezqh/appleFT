; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\__test_common.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\__test_common.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\__test_common.crf ..\..\User\chip_ft\__test_common.c]
                          THUMB

                          AREA ||i.board_id_file_open||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  board_id_file_open PROC
;;;98     /* 打开客户烧录文件 */
;;;99     int32_t board_id_file_open(char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;100    {
000002  f5ad5d84          SUB      sp,sp,#0x1080
000006  4604              MOV      r4,r0
;;;101        FIL     board_id_file;
;;;102        FRESULT     result;
;;;103        char temp_buf[24];
;;;104        uint32_t bw;
;;;105        
;;;106        result = f_open(&board_id_file, BOARD_ID_PATH, FA_READ);
000008  2201              MOVS     r2,#1
00000a  a117              ADR      r1,|L1.104|
00000c  a816              ADD      r0,sp,#0x58
00000e  f7fffffe          BL       f_open
000012  4605              MOV      r5,r0
;;;107        if (result !=  FR_OK)
000014  b14d              CBZ      r5,|L1.42|
;;;108    	{
;;;109            LCD_SHOW_WARN("WARN:%s\n",BOARD_ID_PATH);
000016  a214              ADR      r2,|L1.104|
000018  a119              ADR      r1,|L1.128|
00001a  2003              MOVS     r0,#3
00001c  f7fffffe          BL       display_show_log
;;;110            return -1;
000020  f04f30ff          MOV      r0,#0xffffffff
                  |L1.36|
;;;111    	}
;;;112        
;;;113        /* 读取文件 */
;;;114    	result = f_read(&board_id_file, &temp_buf, sizeof(temp_buf), &bw);
;;;115    	if (bw > 0)
;;;116    	{
;;;117    		temp_buf[bw] = 0;
;;;118    		printf("\r\n total_byte:%d 文件内容 : \n%s\n",bw ,temp_buf);
;;;119    	}
;;;120        memcpy(str,temp_buf,strlen(temp_buf)+1);
;;;121    	/* 关闭文件*/
;;;122    	f_close(&board_id_file);
;;;123     
;;;124        return 0;
;;;125    }
000024  f50d5d84          ADD      sp,sp,#0x1080
000028  bd70              POP      {r4-r6,pc}
                  |L1.42|
00002a  ab0f              ADD      r3,sp,#0x3c           ;114
00002c  2218              MOVS     r2,#0x18              ;114
00002e  a910              ADD      r1,sp,#0x40           ;114
000030  a816              ADD      r0,sp,#0x58           ;114
000032  f7fffffe          BL       f_read
000036  4605              MOV      r5,r0                 ;114
000038  980f              LDR      r0,[sp,#0x3c]         ;115
00003a  b138              CBZ      r0,|L1.76|
00003c  2100              MOVS     r1,#0                 ;117
00003e  aa10              ADD      r2,sp,#0x40           ;117
000040  980f              LDR      r0,[sp,#0x3c]         ;117
000042  5411              STRB     r1,[r2,r0]            ;117
000044  a011              ADR      r0,|L1.140|
000046  990f              LDR      r1,[sp,#0x3c]         ;118
000048  f7fffffe          BL       __2printf
                  |L1.76|
00004c  a810              ADD      r0,sp,#0x40           ;120
00004e  f7fffffe          BL       strlen
000052  1c46              ADDS     r6,r0,#1              ;120
000054  4632              MOV      r2,r6                 ;120
000056  a910              ADD      r1,sp,#0x40           ;120
000058  4620              MOV      r0,r4                 ;120
00005a  f7fffffe          BL       __aeabi_memcpy
00005e  a816              ADD      r0,sp,#0x58           ;122
000060  f7fffffe          BL       f_close
000064  2000              MOVS     r0,#0                 ;124
000066  e7dd              B        |L1.36|
;;;126    
                          ENDP

                  |L1.104|
000068  303a2f70          DCB      "0:/pattern/board_id.txt",0
00006c  61747465
000070  726e2f62
000074  6f617264
000078  5f69642e
00007c  74787400
                  |L1.128|
000080  5741524e          DCB      "WARN:%s\n",0
000084  3a25730a
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L1.140|
00008c  0d0a2074          DCB      "\r\n total_byte:%d ",230,150,135,228,187,182,229,134,133
000090  6f74616c
000094  5f627974
000098  653a2564
00009c  20e69687
0000a0  e4bbb6e5
0000a4  8685    
0000a6  e5aeb920          DCB      229,174,185," : \n%s\n",0
0000aa  3a200a25
0000ae  730a00  
0000b1  00                DCB      0
0000b2  00                DCB      0
0000b3  00                DCB      0

                          AREA ||i.config_code_get||, CODE, READONLY, ALIGN=2

                  config_code_get PROC
;;;127    
;;;128    uint32_t config_code_get(void)
000000  b570              PUSH     {r4-r6,lr}
;;;129    {
;;;130        uint32_t last_config = txt_hex_read(CONFIG_TXT_PATH);    //读两次
000002  a00f              ADR      r0,|L2.64|
000004  f7fffffe          BL       txt_hex_read
000008  4605              MOV      r5,r0
;;;131        uint32_t cur_config  = txt_hex_read(CONFIG_TXT_PATH);
00000a  a00d              ADR      r0,|L2.64|
00000c  f7fffffe          BL       txt_hex_read
000010  4604              MOV      r4,r0
;;;132        
;;;133        if(last_config != cur_config)
000012  42a5              CMP      r5,r4
000014  d007              BEQ      |L2.38|
;;;134        {
;;;135            LCD_SHOW_NG("Error Config1:%08X  Config2:%08X\r",last_config,cur_config);
000016  4623              MOV      r3,r4
000018  462a              MOV      r2,r5
00001a  a10d              ADR      r1,|L2.80|
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       display_show_log
;;;136            return 0;
000022  2000              MOVS     r0,#0
                  |L2.36|
;;;137        }
;;;138        else
;;;139        {
;;;140            if(cur_config == 0)
;;;141            {
;;;142                LCD_SHOW_WARN("Config:default\r");
;;;143            }
;;;144            else
;;;145            {
;;;146                LCD_SHOW_WARN("Config:%08X\r",cur_config);
;;;147            }
;;;148        } 
;;;149        return cur_config;
;;;150    }
000024  bd70              POP      {r4-r6,pc}
                  |L2.38|
000026  b924              CBNZ     r4,|L2.50|
000028  a112              ADR      r1,|L2.116|
00002a  2003              MOVS     r0,#3                 ;142
00002c  f7fffffe          BL       display_show_log
000030  e004              B        |L2.60|
                  |L2.50|
000032  4622              MOV      r2,r4                 ;146
000034  a113              ADR      r1,|L2.132|
000036  2003              MOVS     r0,#3                 ;146
000038  f7fffffe          BL       display_show_log
                  |L2.60|
00003c  4620              MOV      r0,r4                 ;149
00003e  e7f1              B        |L2.36|
;;;151    
                          ENDP

                  |L2.64|
000040  303a2f43          DCB      "0:/Config.txt",0
000044  6f6e6669
000048  672e7478
00004c  7400    
00004e  00                DCB      0
00004f  00                DCB      0
                  |L2.80|
000050  4572726f          DCB      "Error Config1:%08X  Config2:%08X\r",0
000054  7220436f
000058  6e666967
00005c  313a2530
000060  38582020
000064  436f6e66
000068  6967323a
00006c  25303858
000070  0d00    
000072  00                DCB      0
000073  00                DCB      0
                  |L2.116|
000074  436f6e66          DCB      "Config:default\r",0
000078  69673a64
00007c  65666175
000080  6c740d00
                  |L2.132|
000084  436f6e66          DCB      "Config:%08X\r",0
000088  69673a25
00008c  3038580d
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0

                          AREA ||i.crc_buf_size_8_mutiple||, CODE, READONLY, ALIGN=1

                  crc_buf_size_8_mutiple PROC
;;;36     //计算crc的时候，buf内的有效数据改成8的整数倍；目的：计算bin的校验码，与上位机计算结果保持一致
;;;37     void crc_buf_size_8_mutiple(uint8_t* buf, uint32_t* pBW)
000000  b570              PUSH     {r4-r6,lr}
;;;38     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;39         if((*pBW)%8 !=0)
000006  7820              LDRB     r0,[r4,#0]
000008  f0000007          AND      r0,r0,#7
00000c  b150              CBZ      r0,|L3.36|
;;;40         {
;;;41             uint32_t __bw8 = (*pBW+7)/8 * 8;
00000e  6820              LDR      r0,[r4,#0]
000010  1dc0              ADDS     r0,r0,#7
000012  08c0              LSRS     r0,r0,#3
000014  00c6              LSLS     r6,r0,#3
;;;42             memset(&buf[*pBW],0,__bw8 - *pBW);
000016  6822              LDR      r2,[r4,#0]
000018  1ab1              SUBS     r1,r6,r2
00001a  1950              ADDS     r0,r2,r5
00001c  f7fffffe          BL       __aeabi_memclr
;;;43             *pBW = __bw8;
000020  6026              STR      r6,[r4,#0]
;;;44         }
000022  bf00              NOP      
                  |L3.36|
;;;45     }
000024  bd70              POP      {r4-r6,pc}
;;;46      
                          ENDP


                          AREA ||i.customer_file_open||, CODE, READONLY, ALIGN=2

                  customer_file_open PROC
;;;75     /* 打开客户烧录文件 */
;;;76     int32_t customer_file_open(void)
000000  b510              PUSH     {r4,lr}
;;;77     {
000002  f5ad5d82          SUB      sp,sp,#0x1040
;;;78         FRESULT     result;
;;;79         FIL         config_file;
;;;80     
;;;81             /* 打开文件 */
;;;82         result = f_open(&config_file, CONFIG_TXT_PATH, FA_OPEN_EXISTING | FA_READ);
000006  2201              MOVS     r2,#1
000008  a10c              ADR      r1,|L4.60|
00000a  a806              ADD      r0,sp,#0x18
00000c  f7fffffe          BL       f_open
000010  4604              MOV      r4,r0
;;;83     	if (result !=  FR_OK)
000012  b14c              CBZ      r4,|L4.40|
;;;84     	{
;;;85             LCD_SHOW_NG("Don't Find File : %s\r",CONFIG_TXT_PATH);
000014  a209              ADR      r2,|L4.60|
000016  a10d              ADR      r1,|L4.76|
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       display_show_log
;;;86     		return -1;
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L4.34|
;;;87     	}
;;;88      
;;;89     	/* 关闭文件*/
;;;90     	result = f_close(&config_file);
;;;91         if (result !=  FR_OK)
;;;92         {
;;;93             return -1;
;;;94         }        
;;;95         return 0;
;;;96     }
000022  f50d5d82          ADD      sp,sp,#0x1040
000026  bd10              POP      {r4,pc}
                  |L4.40|
000028  a806              ADD      r0,sp,#0x18           ;90
00002a  f7fffffe          BL       f_close
00002e  4604              MOV      r4,r0                 ;90
000030  b114              CBZ      r4,|L4.56|
000032  f04f30ff          MOV      r0,#0xffffffff        ;93
000036  e7f4              B        |L4.34|
                  |L4.56|
000038  2000              MOVS     r0,#0                 ;95
00003a  e7f2              B        |L4.34|
;;;97     
                          ENDP

                  |L4.60|
00003c  303a2f43          DCB      "0:/Config.txt",0
000040  6f6e6669
000044  672e7478
000048  7400    
00004a  00                DCB      0
00004b  00                DCB      0
                  |L4.76|
00004c  446f6e27          DCB      "Don't Find File : %s\r",0
000050  74204669
000054  6e642046
000058  696c6520
00005c  3a202573
000060  0d00    
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.led_fail||, CODE, READONLY, ALIGN=1

                  led_fail PROC
;;;230    /* fail指示灯控制 */
;;;231    void led_fail(on_off_t state)
000000  b510              PUSH     {r4,lr}
;;;232    {
000002  4604              MOV      r4,r0
;;;233        if(state == ON)
000004  2c01              CMP      r4,#1
000006  d106              BNE      |L5.22|
;;;234        {
;;;235            bsp_LedOn(LED_RED_KEY);
000008  2004              MOVS     r0,#4
00000a  f7fffffe          BL       bsp_LedOn
;;;236            bsp_LedOn(LED_RED);
00000e  2002              MOVS     r0,#2
000010  f7fffffe          BL       bsp_LedOn
000014  e005              B        |L5.34|
                  |L5.22|
;;;237        }
;;;238        else
;;;239        {
;;;240            bsp_LedOff(LED_RED_KEY);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       bsp_LedOff
;;;241            bsp_LedOff(LED_RED);
00001c  2002              MOVS     r0,#2
00001e  f7fffffe          BL       bsp_LedOff
                  |L5.34|
;;;242        }
;;;243    }
000022  bd10              POP      {r4,pc}
;;;244    
                          ENDP


                          AREA ||i.led_pass||, CODE, READONLY, ALIGN=1

                  led_pass PROC
;;;215    /* pass指示灯控制 */
;;;216    void led_pass(on_off_t state)
000000  b510              PUSH     {r4,lr}
;;;217    {
000002  4604              MOV      r4,r0
;;;218        if(state == ON)
000004  2c01              CMP      r4,#1
000006  d106              BNE      |L6.22|
;;;219        {
;;;220            bsp_LedOn(LED_GREEN_KEY);
000008  2003              MOVS     r0,#3
00000a  f7fffffe          BL       bsp_LedOn
;;;221            bsp_LedOn(LED_GREEN);
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       bsp_LedOn
000014  e005              B        |L6.34|
                  |L6.22|
;;;222        }
;;;223        else
;;;224        {
;;;225            bsp_LedOff(LED_GREEN_KEY);
000016  2003              MOVS     r0,#3
000018  f7fffffe          BL       bsp_LedOff
;;;226            bsp_LedOff(LED_GREEN);
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       bsp_LedOff
                  |L6.34|
;;;227        }
;;;228    }
000022  bd10              POP      {r4,pc}
;;;229    
                          ENDP


                          AREA ||i.spi_flash_file_sys_mount||, CODE, READONLY, ALIGN=2

                  spi_flash_file_sys_mount PROC
;;;56     /* 打开存储介质为spi flash的文件系统 */
;;;57     int32_t spi_flash_file_sys_mount(void)
000000  b510              PUSH     {r4,lr}
;;;58     {
;;;59         /*-1- 挂载文件系统*/
;;;60         result = f_mount(&fs_flash, SPI_FLASH_VOLUME, 0);
000002  2200              MOVS     r2,#0
000004  a109              ADR      r1,|L7.44|
000006  480a              LDR      r0,|L7.48|
000008  f7fffffe          BL       f_mount
00000c  4909              LDR      r1,|L7.52|
00000e  7008              STRB     r0,[r1,#0]
;;;61         if(result)
000010  4608              MOV      r0,r1
000012  7800              LDRB     r0,[r0,#0]  ; result
000014  b140              CBZ      r0,|L7.40|
;;;62         {
;;;63             LCD_SHOW_NG("FLASH mount error : %d \n",result);
000016  4608              MOV      r0,r1
000018  7802              LDRB     r2,[r0,#0]  ; result
00001a  a107              ADR      r1,|L7.56|
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       display_show_log
;;;64             return -1; 
000022  f04f30ff          MOV      r0,#0xffffffff
                  |L7.38|
;;;65         }
;;;66         return 0;
;;;67     }
000026  bd10              POP      {r4,pc}
                  |L7.40|
000028  2000              MOVS     r0,#0                 ;66
00002a  e7fc              B        |L7.38|
;;;68      
                          ENDP

                  |L7.44|
00002c  303a00            DCB      "0:",0
00002f  00                DCB      0
                  |L7.48|
                          DCD      fs_flash
                  |L7.52|
                          DCD      result
                  |L7.56|
000038  464c4153          DCB      "FLASH mount error : %d \n",0
00003c  48206d6f
000040  756e7420
000044  6572726f
000048  72203a20
00004c  2564200a
000050  00      
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0

                          AREA ||i.sys_halt_process||, CODE, READONLY, ALIGN=2

                  sys_halt_process PROC
;;;20     //死机处理 ；死机狗触发看门狗复位；复位后直接报NG
;;;21     void sys_halt_process(void)
000000  b510              PUSH     {r4,lr}
;;;22     {
;;;23         sys_halt_cnt++;
000002  480b              LDR      r0,|L8.48|
000004  8800              LDRH     r0,[r0,#0]  ; sys_halt_cnt
000006  1c40              ADDS     r0,r0,#1
000008  4909              LDR      r1,|L8.48|
00000a  8008              STRH     r0,[r1,#0]
;;;24         led_fail(ON);
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       led_fail
;;;25         BEEP_FAIL();
000012  2203              MOVS     r2,#3
000014  210a              MOVS     r1,#0xa
000016  2005              MOVS     r0,#5
000018  f7fffffe          BL       BEEP_Start
;;;26         msg_to_robot(PG_NG);
00001c  2003              MOVS     r0,#3
00001e  f7fffffe          BL       msg_to_robot
;;;27         logging("sys_halt_process\r\n");
000022  4804              LDR      r0,|L8.52|
000024  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000026  a004              ADR      r0,|L8.56|
000028  f7fffffe          BL       logger_buffer_write
;;;28     }
00002c  bd10              POP      {r4,pc}
;;;29     
                          ENDP

00002e  0000              DCW      0x0000
                  |L8.48|
                          DCD      sys_halt_cnt
                  |L8.52|
                          DCD      g_iRunTime
                  |L8.56|
000038  5b253864          DCB      "[%8d]sys_halt_process\r\n",0
00003c  5d737973
000040  5f68616c
000044  745f7072
000048  6f636573
00004c  730d0a00

                          AREA ||i.test_over_info_show||, CODE, READONLY, ALIGN=2

                  test_over_info_show PROC
;;;152    
;;;153    void test_over_info_show(fsm_rt_t state)
000000  b5f8              PUSH     {r3-r7,lr}
;;;154    {
000002  4605              MOV      r5,r0
;;;155        binning_send(state);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       binning_send
;;;156        
;;;157        if(state != fsm_rt_cpl) 
00000a  2d00              CMP      r5,#0
00000c  d029              BEQ      |L9.98|
;;;158        {
;;;159            BEEP_FAIL();
00000e  2203              MOVS     r2,#3
000010  210a              MOVS     r1,#0xa
000012  2005              MOVS     r0,#5
000014  f7fffffe          BL       BEEP_Start
;;;160            led_fail(ON);
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       led_fail
;;;161            //msg_to_robot(PG_NG);
;;;162    
;;;163            uint8_t num_error = sizeof(err_info)/sizeof(err_info_t);
00001e  2657              MOVS     r6,#0x57
;;;164            for(uint8_t i=0; i<num_error; i++ )
000020  2400              MOVS     r4,#0
000022  e016              B        |L9.82|
                  |L9.36|
;;;165            {
;;;166                if(state == err_info[i].errorCode) logging("ERROR Code=%d: %s\r\n",err_info[i].errorCode, err_info[i].errorMessage); 
000024  481f              LDR      r0,|L9.164|
000026  eb0000c4          ADD      r0,r0,r4,LSL #3
00002a  f9900000          LDRSB    r0,[r0,#0]
00002e  42a8              CMP      r0,r5
000030  d10d              BNE      |L9.78|
000032  481c              LDR      r0,|L9.164|
000034  eb0000c4          ADD      r0,r0,r4,LSL #3
000038  6843              LDR      r3,[r0,#4]
00003a  481a              LDR      r0,|L9.164|
00003c  eb0000c4          ADD      r0,r0,r4,LSL #3
000040  f9902000          LDRSB    r2,[r0,#0]
000044  4818              LDR      r0,|L9.168|
000046  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000048  a018              ADR      r0,|L9.172|
00004a  f7fffffe          BL       logger_buffer_write
                  |L9.78|
00004e  1c60              ADDS     r0,r4,#1              ;164
000050  b2c4              UXTB     r4,r0                 ;164
                  |L9.82|
000052  42b4              CMP      r4,r6                 ;164
000054  dbe6              BLT      |L9.36|
;;;167            }
;;;168            chip_counter_fail++;
000056  481c              LDR      r0,|L9.200|
000058  6800              LDR      r0,[r0,#0]  ; chip_counter_fail
00005a  1c40              ADDS     r0,r0,#1
00005c  491a              LDR      r1,|L9.200|
00005e  6008              STR      r0,[r1,#0]  ; chip_counter_fail
;;;169        }
000060  e00c              B        |L9.124|
                  |L9.98|
;;;170        else
;;;171        {
;;;172            led_pass(ON);
000062  2001              MOVS     r0,#1
000064  f7fffffe          BL       led_pass
;;;173     
;;;174            BEEP_PASS();
000068  2201              MOVS     r2,#1
00006a  210a              MOVS     r1,#0xa
00006c  4608              MOV      r0,r1
00006e  f7fffffe          BL       BEEP_Start
;;;175            //msg_to_robot(PG_OK);
;;;176            chip_counter_pass++;
000072  4816              LDR      r0,|L9.204|
000074  6800              LDR      r0,[r0,#0]  ; chip_counter_pass
000076  1c40              ADDS     r0,r0,#1
000078  4914              LDR      r1,|L9.204|
00007a  6008              STR      r0,[r1,#0]  ; chip_counter_pass
                  |L9.124|
;;;177        }
;;;178        chip_counter_total++;
00007c  4814              LDR      r0,|L9.208|
00007e  6800              LDR      r0,[r0,#0]  ; chip_counter_total
000080  1c40              ADDS     r0,r0,#1
000082  4913              LDR      r1,|L9.208|
000084  6008              STR      r0,[r1,#0]  ; chip_counter_total
;;;179        logging("FINISH sum:%d pass:%d fail:%d\r\n",chip_counter_total,chip_counter_pass,chip_counter_fail);
000086  4810              LDR      r0,|L9.200|
000088  6800              LDR      r0,[r0,#0]  ; chip_counter_fail
00008a  9000              STR      r0,[sp,#0]
00008c  480f              LDR      r0,|L9.204|
00008e  6803              LDR      r3,[r0,#0]  ; chip_counter_pass
000090  4608              MOV      r0,r1
000092  6802              LDR      r2,[r0,#0]  ; chip_counter_total
000094  4804              LDR      r0,|L9.168|
000096  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000098  a00e              ADR      r0,|L9.212|
00009a  f7fffffe          BL       logger_buffer_write
;;;180        logger_sd_card_write(); //日志写入sd卡
00009e  f7fffffe          BL       logger_sd_card_write
;;;181    }
0000a2  bdf8              POP      {r3-r7,pc}
;;;182    
                          ENDP

                  |L9.164|
                          DCD      err_info
                  |L9.168|
                          DCD      g_iRunTime
                  |L9.172|
0000ac  5b253864          DCB      "[%8d]ERROR Code=%d: %s\r\n",0
0000b0  5d455252
0000b4  4f522043
0000b8  6f64653d
0000bc  25643a20
0000c0  25730d0a
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L9.200|
                          DCD      chip_counter_fail
                  |L9.204|
                          DCD      chip_counter_pass
                  |L9.208|
                          DCD      chip_counter_total
                  |L9.212|
0000d4  5b253864          DCB      "[%8d]FINISH sum:%d pass:%d fail:%d\r\n",0
0000d8  5d46494e
0000dc  49534820
0000e0  73756d3a
0000e4  25642070
0000e8  6173733a
0000ec  25642066
0000f0  61696c3a
0000f4  25640d0a
0000f8  00      
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0

                          AREA ||i.test_start_info_show||, CODE, READONLY, ALIGN=2

                  test_start_info_show PROC
;;;29     
;;;30     void test_start_info_show(void)
000000  b508              PUSH     {r3,lr}
;;;31     {
;;;32         logging("#### %s START:chip %d test (%d)####\r\n",board_id_name,chip_counter_total+1,sys_halt_cnt);  /* 不从0开始显示，显示数值与结束后总数保持一致 */    
000002  480a              LDR      r0,|L10.44|
000004  8800              LDRH     r0,[r0,#0]  ; sys_halt_cnt
000006  9000              STR      r0,[sp,#0]
000008  4809              LDR      r0,|L10.48|
00000a  6803              LDR      r3,[r0,#0]  ; chip_counter_total
00000c  1c5b              ADDS     r3,r3,#1
00000e  4a09              LDR      r2,|L10.52|
000010  4809              LDR      r0,|L10.56|
000012  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000014  a009              ADR      r0,|L10.60|
000016  f7fffffe          BL       logger_buffer_write
;;;33         display_fill(0, 0, BSP_LCD_WIDTH, BSP_LCD_HEIGHT, BLACK);     
00001a  2000              MOVS     r0,#0
00001c  f44f73a0          MOV      r3,#0x140
000020  22f0              MOVS     r2,#0xf0
000022  4601              MOV      r1,r0
000024  9000              STR      r0,[sp,#0]
000026  f7fffffe          BL       display_fill
;;;34     }
00002a  bd08              POP      {r3,pc}
;;;35     
                          ENDP

                  |L10.44|
                          DCD      sys_halt_cnt
                  |L10.48|
                          DCD      chip_counter_total
                  |L10.52|
                          DCD      board_id_name
                  |L10.56|
                          DCD      g_iRunTime
                  |L10.60|
00003c  5b253864          DCB      "[%8d]#### %s START:chip %d test (%d)####\r\n",0
000040  5d232323
000044  23202573
000048  20535441
00004c  52543a63
000050  68697020
000054  25642074
000058  65737420
00005c  28256429
000060  23232323
000064  0d0a00  
000067  00                DCB      0

                          AREA ||i.txt_hex_read||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  txt_hex_read PROC
;;;183    //读取文本内容（CRC32校验码），返回十六进制数字
;;;184    static uint32_t txt_hex_read(char* s)
000000  b570              PUSH     {r4-r6,lr}
;;;185    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;186        uint32_t ret;
;;;187        uint8_t temp_buf[16];
;;;188        uint32_t bw;
;;;189        static FIL config_file;
;;;190        /* 打开文件 */
;;;191    	FRESULT result = f_open(&config_file, s, FA_OPEN_EXISTING | FA_READ);
000006  2201              MOVS     r2,#1
000008  4621              MOV      r1,r4
00000a  4815              LDR      r0,|L11.96|
00000c  f7fffffe          BL       f_open
000010  4605              MOV      r5,r0
;;;192    	if (result !=  FR_OK)
000012  b13d              CBZ      r5,|L11.36|
;;;193    	{
;;;194            LCD_SHOW_NG("Don't Find File : %s\r",s);
000014  4622              MOV      r2,r4
000016  a113              ADR      r1,|L11.100|
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       display_show_log
;;;195    		return 0;
00001e  2000              MOVS     r0,#0
                  |L11.32|
;;;196    	}
;;;197        
;;;198    	/* 读取文件 */
;;;199    	result = f_read(&config_file, &temp_buf, sizeof(temp_buf), &bw);
;;;200    	if (bw > 0)
;;;201    	{
;;;202    		temp_buf[bw] = 0;
;;;203    		printf("\r\n%s,byte:%d 文件内容 : \r\n%s\r\n",s,bw ,temp_buf);
;;;204    	}
;;;205     
;;;206    	/* 关闭文件*/
;;;207    	f_close(&config_file);
;;;208        ret = strtoul((char*)temp_buf,NULL,16);
;;;209        
;;;210        return ret;
;;;211    }
000020  b006              ADD      sp,sp,#0x18
000022  bd70              POP      {r4-r6,pc}
                  |L11.36|
000024  ab01              ADD      r3,sp,#4              ;199
000026  2210              MOVS     r2,#0x10              ;199
000028  a902              ADD      r1,sp,#8              ;199
00002a  480d              LDR      r0,|L11.96|
00002c  f7fffffe          BL       f_read
000030  4605              MOV      r5,r0                 ;199
000032  9801              LDR      r0,[sp,#4]            ;200
000034  b148              CBZ      r0,|L11.74|
000036  2000              MOVS     r0,#0                 ;202
000038  a902              ADD      r1,sp,#8              ;202
00003a  9a01              LDR      r2,[sp,#4]            ;202
00003c  5488              STRB     r0,[r1,r2]            ;202
00003e  ab02              ADD      r3,sp,#8              ;203
000040  4621              MOV      r1,r4                 ;203
000042  a00e              ADR      r0,|L11.124|
000044  9a01              LDR      r2,[sp,#4]            ;203
000046  f7fffffe          BL       __2printf
                  |L11.74|
00004a  4805              LDR      r0,|L11.96|
00004c  f7fffffe          BL       f_close
000050  2210              MOVS     r2,#0x10              ;208
000052  2100              MOVS     r1,#0                 ;208
000054  a802              ADD      r0,sp,#8              ;208
000056  f7fffffe          BL       strtoul
00005a  4606              MOV      r6,r0                 ;208
00005c  4630              MOV      r0,r6                 ;210
00005e  e7df              B        |L11.32|
;;;212    
                          ENDP

                  |L11.96|
                          DCD      config_file
                  |L11.100|
000064  446f6e27          DCB      "Don't Find File : %s\r",0
000068  74204669
00006c  6e642046
000070  696c6520
000074  3a202573
000078  0d00    
00007a  00                DCB      0
00007b  00                DCB      0
                  |L11.124|
00007c  0d0a2573          DCB      "\r\n%s,byte:%d ",230,150,135,228,187,182,229,134,133,229
000080  2c627974
000084  653a2564
000088  20e69687
00008c  e4bbb6e5
000090  8685e5  
000093  aeb9203a          DCB      174,185," : \r\n%s\r\n",0
000097  200d0a25
00009b  730d0a00
00009f  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  bin_cpu_map
                          %        12
                  fs_flash
                          %        4144
                  trim_pattern_file
                          %        4136
                  perf_pattern_file
                          %        4136
                  customer_file
                          %        4136
                  config_file
                          %        4136

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  66736d5f          DCB      "fsm_rt_err_custommer_conflict",0
000004  72745f65
000008  72725f63
00000c  7573746f
000010  6d6d6572
000014  5f636f6e
000018  666c6963
00001c  7400    
00001e  00                DCB      0
00001f  00                DCB      0
000020  66736d5f          DCB      "fsm_rt_err_key_NoAck",0
000024  72745f65
000028  72725f6b
00002c  65795f4e
000030  6f41636b
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0
000038  66736d5f          DCB      "fsm_rt_err_asu_NoAck",0
00003c  72745f65
000040  72725f61
000044  73755f4e
000048  6f41636b
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0
000050  66736d5f          DCB      "fsm_rt_err_vmic_enable",0
000054  72745f65
000058  72725f76
00005c  6d69635f
000060  656e6162
000064  6c6500  
000067  00                DCB      0
000068  66736d5f          DCB      "fsm_rt_err_key_match",0
00006c  72745f65
000070  72725f6b
000074  65795f6d
000078  61746368
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
000080  66736d5f          DCB      "fsm_rt_err_flash_ft_area_write_timeout",0
000084  72745f65
000088  72725f66
00008c  6c617368
000090  5f66745f
000094  61726561
000098  5f777269
00009c  74655f74
0000a0  696d656f
0000a4  757400  
0000a7  00                DCB      0
0000a8  66736d5f          DCB      "fsm_rt_err_efuse_readback",0
0000ac  72745f65
0000b0  72725f65
0000b4  66757365
0000b8  5f726561
0000bc  64626163
0000c0  6b00    
0000c2  00                DCB      0
0000c3  00                DCB      0
0000c4  66736d5f          DCB      "fsm_rt_err_core_diff",0
0000c8  72745f65
0000cc  72725f63
0000d0  6f72655f
0000d4  64696666
0000d8  00      
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
0000dc  66736d5f          DCB      "fsm_rt_err_flash_id",0
0000e0  72745f65
0000e4  72725f66
0000e8  6c617368
0000ec  5f696400
0000f0  66736d5f          DCB      "fsm_rt_err_gpadc",0
0000f4  72745f65
0000f8  72725f67
0000fc  70616463
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
000104  66736d5f          DCB      "fsm_rt_err_siovcc",0
000108  72745f65
00010c  72725f73
000110  696f7663
000114  6300    
000116  00                DCB      0
000117  00                DCB      0
000118  66736d5f          DCB      "fsm_rt_err_handshark",0
00011c  72745f65
000120  72725f68
000124  616e6473
000128  6861726b
00012c  00      
00012d  00                DCB      0
00012e  00                DCB      0
00012f  00                DCB      0
000130  66736d5f          DCB      "fsm_rt_err_wait_flash_timeout",0
000134  72745f65
000138  72725f77
00013c  6169745f
000140  666c6173
000144  685f7469
000148  6d656f75
00014c  7400    
00014e  00                DCB      0
00014f  00                DCB      0
000150  66736d5f          DCB      "fsm_rt_err_ram_pattern_no_select",0
000154  72745f65
000158  72725f72
00015c  616d5f70
000160  61747465
000164  726e5f6e
000168  6f5f7365
00016c  6c656374
000170  00      
000171  00                DCB      0
000172  00                DCB      0
000173  00                DCB      0
000174  66736d5f          DCB      "fsm_rt_err_clk_shake",0
000178  72745f65
00017c  72725f63
000180  6c6b5f73
000184  68616b65
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
00018c  66736d5f          DCB      "fsm_rt_err_osc_pmu_twice_avg",0
000190  72745f65
000194  72725f6f
000198  73635f70
00019c  6d755f74
0001a0  77696365
0001a4  5f617667
0001a8  00      
0001a9  00                DCB      0
0001aa  00                DCB      0
0001ab  00                DCB      0
0001ac  66736d5f          DCB      "fsm_rt_err_tested_chip_qc",0
0001b0  72745f65
0001b4  72725f74
0001b8  65737465
0001bc  645f6368
0001c0  69705f71
0001c4  6300    
0001c6  00                DCB      0
0001c7  00                DCB      0
0001c8  66736d5f          DCB      "fsm_rt_err_bin_only_4k",0
0001cc  72745f65
0001d0  72725f62
0001d4  696e5f6f
0001d8  6e6c795f
0001dc  346b00  
0001df  00                DCB      0
0001e0  66736d5f          DCB      "fsm_rt_err_crc_flash_readback",0
0001e4  72745f65
0001e8  72725f63
0001ec  72635f66
0001f0  6c617368
0001f4  5f726561
0001f8  64626163
0001fc  6b00    
0001fe  00                DCB      0
0001ff  00                DCB      0
000200  66736d5f          DCB      "fsm_rt_err_kiwi_crc_err",0
000204  72745f65
000208  72725f6b
00020c  6977695f
000210  6372635f
000214  65727200
000218  66736d5f          DCB      "fsm_rt_err_Read_bin_crc_err",0
00021c  72745f65
000220  72725f52
000224  6561645f
000228  62696e5f
00022c  6372635f
000230  65727200
000234  66736d5f          DCB      "fsm_rt_err_QC_osc_core",0
000238  72745f65
00023c  72725f51
000240  435f6f73
000244  635f636f
000248  726500  
00024b  00                DCB      0
00024c  66736d5f          DCB      "fsm_rt_err_QC_osc_audio",0
000250  72745f65
000254  72725f51
000258  435f6f73
00025c  635f6175
000260  64696f00
000264  66736d5f          DCB      "fsm_rt_err_QC_osc_pmu",0
000268  72745f65
00026c  72725f51
000270  435f6f73
000274  635f706d
000278  7500    
00027a  00                DCB      0
00027b  00                DCB      0
00027c  66736d5f          DCB      "fsm_rt_err_QC_LPV_volt",0
000280  72745f65
000284  72725f51
000288  435f4c50
00028c  565f766f
000290  6c7400  
000293  00                DCB      0
000294  66736d5f          DCB      "fsm_rt_err_QC_BGR_volt",0
000298  72745f65
00029c  72725f51
0002a0  435f4247
0002a4  525f766f
0002a8  6c7400  
0002ab  00                DCB      0
0002ac  66736d5f          DCB      "fsm_rt_err_efuse_1_to_0",0
0002b0  72745f65
0002b4  72725f65
0002b8  66757365
0002bc  5f315f74
0002c0  6f5f3000
0002c4  66736d5f          DCB      "fsm_rt_err_load_ram_ack_timeout",0
0002c8  72745f65
0002cc  72725f6c
0002d0  6f61645f
0002d4  72616d5f
0002d8  61636b5f
0002dc  74696d65
0002e0  6f757400
0002e4  66736d5f          DCB      "fsm_rt_err_final_tested",0
0002e8  72745f65
0002ec  72725f66
0002f0  696e616c
0002f4  5f746573
0002f8  74656400
0002fc  66736d5f          DCB      "fsm_rt_err_otp_dirty_data",0
000300  72745f65
000304  72725f6f
000308  74705f64
00030c  69727479
000310  5f646174
000314  6100    
000316  00                DCB      0
000317  00                DCB      0
000318  66736d5f          DCB      "fsm_rt_err_otp_pure_data",0
00031c  72745f65
000320  72725f6f
000324  74705f70
000328  7572655f
00032c  64617461
000330  00      
000331  00                DCB      0
000332  00                DCB      0
000333  00                DCB      0
000334  66736d5f          DCB      "fsm_rt_err_efuse_otp_cmp",0
000338  72745f65
00033c  72725f65
000340  66757365
000344  5f6f7470
000348  5f636d70
00034c  00      
00034d  00                DCB      0
00034e  00                DCB      0
00034f  00                DCB      0
000350  66736d5f          DCB      "fsm_rt_err_io_s2",0
000354  72745f65
000358  72725f69
00035c  6f5f7332
000360  00      
000361  00                DCB      0
000362  00                DCB      0
000363  00                DCB      0
000364  66736d5f          DCB      "fsm_rt_err_io_test",0
000368  72745f65
00036c  72725f69
000370  6f5f7465
000374  737400  
000377  00                DCB      0
000378  66736d5f          DCB      "fsm_rt_err_bist_cache",0
00037c  72745f65
000380  72725f62
000384  6973745f
000388  63616368
00038c  6500    
00038e  00                DCB      0
00038f  00                DCB      0
000390  66736d5f          DCB      "fsm_rt_err_bist_asu",0
000394  72745f65
000398  72725f62
00039c  6973745f
0003a0  61737500
0003a4  66736d5f          DCB      "fsm_rt_err_flash_read_check",0
0003a8  72745f65
0003ac  72725f66
0003b0  6c617368
0003b4  5f726561
0003b8  645f6368
0003bc  65636b00
0003c0  66736d5f          DCB      "fsm_rt_err_flash_read_head_2k",0
0003c4  72745f65
0003c8  72725f66
0003cc  6c617368
0003d0  5f726561
0003d4  645f6865
0003d8  61645f32
0003dc  6b00    
0003de  00                DCB      0
0003df  00                DCB      0
0003e0  66736d5f          DCB      "fsm_rt_err_spl_loss_track",0
0003e4  72745f65
0003e8  72725f73
0003ec  706c5f6c
0003f0  6f73735f
0003f4  74726163
0003f8  6b00    
0003fa  00                DCB      0
0003fb  00                DCB      0
0003fc  66736d5f          DCB      "fsm_rt_err_hibernate_ack",0
000400  72745f65
000404  72725f68
000408  69626572
00040c  6e617465
000410  5f61636b
000414  00      
000415  00                DCB      0
000416  00                DCB      0
000417  00                DCB      0
000418  66736d5f          DCB      "fsm_rt_err_no_load_current",0
00041c  72745f65
000420  72725f6e
000424  6f5f6c6f
000428  61645f63
00042c  75727265
000430  6e7400  
000433  00                DCB      0
000434  66736d5f          DCB      "fsm_rt_err_lpv",0
000438  72745f65
00043c  72725f6c
000440  707600  
000443  00                DCB      0
000444  66736d5f          DCB      "fsm_rt_err_pmu_asu",0
000448  72745f65
00044c  72725f70
000450  6d755f61
000454  737500  
000457  00                DCB      0
000458  66736d5f          DCB      "fsm_rt_err_spl_flash_check",0
00045c  72745f65
000460  72725f73
000464  706c5f66
000468  6c617368
00046c  5f636865
000470  636b00  
000473  00                DCB      0
000474  66736d5f          DCB      "fsm_rt_err_spl_flash_oversize",0
000478  72745f65
00047c  72725f73
000480  706c5f66
000484  6c617368
000488  5f6f7665
00048c  7273697a
000490  6500    
000492  00                DCB      0
000493  00                DCB      0
000494  66736d5f          DCB      "fsm_rt_err_spl_head_crc32",0
000498  72745f65
00049c  72725f73
0004a0  706c5f68
0004a4  6561645f
0004a8  63726333
0004ac  3200    
0004ae  00                DCB      0
0004af  00                DCB      0
0004b0  66736d5f          DCB      "fsm_rt_err_spl_body_crc32",0
0004b4  72745f65
0004b8  72725f73
0004bc  706c5f62
0004c0  6f64795f
0004c4  63726333
0004c8  3200    
0004ca  00                DCB      0
0004cb  00                DCB      0
0004cc  66736d5f          DCB      "fsm_rt_err_spl_ack_timeout",0
0004d0  72745f65
0004d4  72725f73
0004d8  706c5f61
0004dc  636b5f74
0004e0  696d656f
0004e4  757400  
0004e7  00                DCB      0
0004e8  66736d5f          DCB      "fsm_rt_err_chip_id",0
0004ec  72745f65
0004f0  72725f63
0004f4  6869705f
0004f8  696400  
0004fb  00                DCB      0
0004fc  66736d5f          DCB      "fsm_rt_err_sum_check",0
000500  72745f65
000504  72725f73
000508  756d5f63
00050c  6865636b
000510  00      
000511  00                DCB      0
000512  00                DCB      0
000513  00                DCB      0
000514  66736d5f          DCB      "fsm_rt_err_ack_timeout",0
000518  72745f65
00051c  72725f61
000520  636b5f74
000524  696d656f
000528  757400  
00052b  00                DCB      0
00052c  66736d5f          DCB      "fsm_rt_err_brom_ack",0
000530  72745f65
000534  72725f62
000538  726f6d5f
00053c  61636b00
000540  66736d5f          DCB      "fsm_rt_err_uart",0
000544  72745f65
000548  72725f75
00054c  61727400
000550  66736d5f          DCB      "fsm_rt_err_i2c",0
000554  72745f65
000558  72725f69
00055c  326300  
00055f  00                DCB      0
000560  66736d5f          DCB      "fsm_rt_err_bist_usb_ram",0
000564  72745f65
000568  72725f62
00056c  6973745f
000570  7573625f
000574  72616d00
000578  66736d5f          DCB      "fsm_rt_err_lradc",0
00057c  72745f65
000580  72725f6c
000584  72616463
000588  00      
000589  00                DCB      0
00058a  00                DCB      0
00058b  00                DCB      0
00058c  66736d5f          DCB      "fsm_rt_err_pattern_startup_timeout",0
000590  72745f65
000594  72725f70
000598  61747465
00059c  726e5f73
0005a0  74617274
0005a4  75705f74
0005a8  696d656f
0005ac  757400  
0005af  00                DCB      0
0005b0  66736d5f          DCB      "fsm_rt_err_bist_cache_ram",0
0005b4  72745f65
0005b8  72725f62
0005bc  6973745f
0005c0  63616368
0005c4  655f7261
0005c8  6d00    
0005ca  00                DCB      0
0005cb  00                DCB      0
0005cc  66736d5f          DCB      "fsm_rt_err_global0_set",0
0005d0  72745f65
0005d4  72725f67
0005d8  6c6f6261
0005dc  6c305f73
0005e0  657400  
0005e3  00                DCB      0
0005e4  66736d5f          DCB      "fsm_rt_err_bist_udsp_ram",0
0005e8  72745f65
0005ec  72725f62
0005f0  6973745f
0005f4  75647370
0005f8  5f72616d
0005fc  00      
0005fd  00                DCB      0
0005fe  00                DCB      0
0005ff  00                DCB      0
000600  66736d5f          DCB      "fsm_rt_err_exit_standby",0
000604  72745f65
000608  72725f65
00060c  7869745f
000610  7374616e
000614  64627900
000618  66736d5f          DCB      "fsm_rt_err_standby_current",0
00061c  72745f65
000620  72725f73
000624  74616e64
000628  62795f63
00062c  75727265
000630  6e7400  
000633  00                DCB      0
000634  66736d5f          DCB      "fsm_rt_err_enter_standby",0
000638  72745f65
00063c  72725f65
000640  6e746572
000644  5f737461
000648  6e646279
00064c  00      
00064d  00                DCB      0
00064e  00                DCB      0
00064f  00                DCB      0
000650  66736d5f          DCB      "fsm_rt_err_bist_timeout",0
000654  72745f65
000658  72725f62
00065c  6973745f
000660  74696d65
000664  6f757400
000668  66736d5f          DCB      "fsm_rt_err_cali_cap_get",0
00066c  72745f65
000670  72725f63
000674  616c695f
000678  6361705f
00067c  67657400
000680  66736d5f          DCB      "fsm_rt_err_iref",0
000684  72745f65
000688  72725f69
00068c  72656600
000690  66736d5f          DCB      "fsm_rt_err_vref",0
000694  72745f65
000698  72725f76
00069c  72656600
0006a0  66736d5f          DCB      "fsm_rt_err_spu_timeout",0
0006a4  72745f65
0006a8  72725f73
0006ac  70755f74
0006b0  696d656f
0006b4  757400  
0006b7  00                DCB      0
0006b8  66736d5f          DCB      "fsm_rt_err_spu",0
0006bc  72745f65
0006c0  72725f73
0006c4  707500  
0006c7  00                DCB      0
0006c8  66736d5f          DCB      "fsm_rt_err_trim_var_load",0
0006cc  72745f65
0006d0  72725f74
0006d4  72696d5f
0006d8  7661725f
0006dc  6c6f6164
0006e0  00      
0006e1  00                DCB      0
0006e2  00                DCB      0
0006e3  00                DCB      0
0006e4  66736d5f          DCB      "fsm_rt_err_lrc",0
0006e8  72745f65
0006ec  72725f6c
0006f0  726300  
0006f3  00                DCB      0
0006f4  66736d5f          DCB      "fsm_rt_err_osc_audio",0
0006f8  72745f65
0006fc  72725f6f
000700  73635f61
000704  7564696f
000708  00      
000709  00                DCB      0
00070a  00                DCB      0
00070b  00                DCB      0
00070c  66736d5f          DCB      "fsm_rt_err_cali_cap",0
000710  72745f65
000714  72725f63
000718  616c695f
00071c  63617000
000720  66736d5f          DCB      "fsm_rt_err_pattern_run_timeout",0
000724  72745f65
000728  72725f70
00072c  61747465
000730  726e5f72
000734  756e5f74
000738  696d656f
00073c  757400  
00073f  00                DCB      0
000740  66736d5f          DCB      "fsm_rt_err_efuse_check",0
000744  72745f65
000748  72725f65
00074c  66757365
000750  5f636865
000754  636b00  
000757  00                DCB      0
000758  66736d5f          DCB      "fsm_rt_err_efuse_dump_all",0
00075c  72745f65
000760  72725f65
000764  66757365
000768  5f64756d
00076c  705f616c
000770  6c00    
000772  00                DCB      0
000773  00                DCB      0
000774  66736d5f          DCB      "fsm_rt_err_efuse_program_all",0
000778  72745f65
00077c  72725f65
000780  66757365
000784  5f70726f
000788  6772616d
00078c  5f616c6c
000790  00      
000791  00                DCB      0
000792  00                DCB      0
000793  00                DCB      0
000794  66736d5f          DCB      "fsm_rt_err_efuse_init",0
000798  72745f65
00079c  72725f65
0007a0  66757365
0007a4  5f696e69
0007a8  7400    
0007aa  00                DCB      0
0007ab  00                DCB      0
0007ac  66736d5f          DCB      "fsm_rt_err_touch_channel",0
0007b0  72745f65
0007b4  72725f74
0007b8  6f756368
0007bc  5f636861
0007c0  6e6e656c
0007c4  00      
0007c5  00                DCB      0
0007c6  00                DCB      0
0007c7  00                DCB      0
0007c8  66736d5f          DCB      "fsm_rt_err_asu",0
0007cc  72745f65
0007d0  72725f61
0007d4  737500  
0007d7  00                DCB      0
0007d8  66736d5f          DCB      "fsm_rt_err_no_bin",0
0007dc  72745f65
0007e0  72725f6e
0007e4  6f5f6269
0007e8  6e00    
0007ea  00                DCB      0
0007eb  00                DCB      0
0007ec  66736d5f          DCB      "fsm_rt_err_fatfs",0
0007f0  72745f65
0007f4  72725f66
0007f8  61746673
0007fc  00      
0007fd  00                DCB      0
0007fe  00                DCB      0
0007ff  00                DCB      0
000800  66736d5f          DCB      "fsm_rt_func_type_err",0
000804  72745f66
000808  756e635f
00080c  74797065
000810  5f657272
000814  00      
000815  00                DCB      0
000816  00                DCB      0
000817  00                DCB      0
000818  66736d5f          DCB      "fsm_rt_efuse_err",0
00081c  72745f65
000820  66757365
000824  5f657272
000828  00      
000829  00                DCB      0
00082a  00                DCB      0
00082b  00                DCB      0
00082c  66736d5f          DCB      "fsm_rt_xor_err",0
000830  72745f78
000834  6f725f65
000838  727200  
00083b  00                DCB      0
00083c  66736d5f          DCB      "fsm_rt_err",0
000840  72745f65
000844  727200  

                          AREA ||.data||, DATA, ALIGN=2

                  err_info
000000  a9000000          DCB      0xa9,0x00,0x00,0x00
                          DCD      ||.conststring||
000008  aa000000          DCB      0xaa,0x00,0x00,0x00
                          DCD      ||.conststring||+0x20
000010  ab000000          DCB      0xab,0x00,0x00,0x00
                          DCD      ||.conststring||+0x38
000018  ac000000          DCB      0xac,0x00,0x00,0x00
                          DCD      ||.conststring||+0x50
000020  ad000000          DCB      0xad,0x00,0x00,0x00
                          DCD      ||.conststring||+0x68
000028  ae000000          DCB      0xae,0x00,0x00,0x00
                          DCD      ||.conststring||+0x80
000030  af000000          DCB      0xaf,0x00,0x00,0x00
                          DCD      ||.conststring||+0xa8
000038  b0000000          DCB      0xb0,0x00,0x00,0x00
                          DCD      ||.conststring||+0xc4
000040  b1000000          DCB      0xb1,0x00,0x00,0x00
                          DCD      ||.conststring||+0xdc
000048  b2000000          DCB      0xb2,0x00,0x00,0x00
                          DCD      ||.conststring||+0xf0
000050  b3000000          DCB      0xb3,0x00,0x00,0x00
                          DCD      ||.conststring||+0x104
000058  b4000000          DCB      0xb4,0x00,0x00,0x00
                          DCD      ||.conststring||+0x118
000060  b5000000          DCB      0xb5,0x00,0x00,0x00
                          DCD      ||.conststring||+0x130
000068  b6000000          DCB      0xb6,0x00,0x00,0x00
                          DCD      ||.conststring||+0x150
000070  b8000000          DCB      0xb8,0x00,0x00,0x00
                          DCD      ||.conststring||+0x174
000078  b8000000          DCB      0xb8,0x00,0x00,0x00
                          DCD      ||.conststring||+0x174
000080  b9000000          DCB      0xb9,0x00,0x00,0x00
                          DCD      ||.conststring||+0x18c
000088  ba000000          DCB      0xba,0x00,0x00,0x00
                          DCD      ||.conststring||+0x1ac
000090  bb000000          DCB      0xbb,0x00,0x00,0x00
                          DCD      ||.conststring||+0x1c8
000098  bc000000          DCB      0xbc,0x00,0x00,0x00
                          DCD      ||.conststring||+0x1e0
0000a0  bd000000          DCB      0xbd,0x00,0x00,0x00
                          DCD      ||.conststring||+0x200
0000a8  be000000          DCB      0xbe,0x00,0x00,0x00
                          DCD      ||.conststring||+0x218
0000b0  bf000000          DCB      0xbf,0x00,0x00,0x00
                          DCD      ||.conststring||+0x234
0000b8  c0000000          DCB      0xc0,0x00,0x00,0x00
                          DCD      ||.conststring||+0x24c
0000c0  c1000000          DCB      0xc1,0x00,0x00,0x00
                          DCD      ||.conststring||+0x264
0000c8  c2000000          DCB      0xc2,0x00,0x00,0x00
                          DCD      ||.conststring||+0x27c
0000d0  c3000000          DCB      0xc3,0x00,0x00,0x00
                          DCD      ||.conststring||+0x294
0000d8  c4000000          DCB      0xc4,0x00,0x00,0x00
                          DCD      ||.conststring||+0x2ac
0000e0  c5000000          DCB      0xc5,0x00,0x00,0x00
                          DCD      ||.conststring||+0x2c4
0000e8  c6000000          DCB      0xc6,0x00,0x00,0x00
                          DCD      ||.conststring||+0x2e4
0000f0  c8000000          DCB      0xc8,0x00,0x00,0x00
                          DCD      ||.conststring||+0x2fc
0000f8  c7000000          DCB      0xc7,0x00,0x00,0x00
                          DCD      ||.conststring||+0x318
000100  c9000000          DCB      0xc9,0x00,0x00,0x00
                          DCD      ||.conststring||+0x334
000108  ca000000          DCB      0xca,0x00,0x00,0x00
                          DCD      ||.conststring||+0x350
000110  cb000000          DCB      0xcb,0x00,0x00,0x00
                          DCD      ||.conststring||+0x364
000118  cc000000          DCB      0xcc,0x00,0x00,0x00
                          DCD      ||.conststring||+0x378
000120  cd000000          DCB      0xcd,0x00,0x00,0x00
                          DCD      ||.conststring||+0x390
000128  ce000000          DCB      0xce,0x00,0x00,0x00
                          DCD      ||.conststring||+0x3a4
000130  cf000000          DCB      0xcf,0x00,0x00,0x00
                          DCD      ||.conststring||+0x3c0
000138  d0000000          DCB      0xd0,0x00,0x00,0x00
                          DCD      ||.conststring||+0x3e0
000140  d1000000          DCB      0xd1,0x00,0x00,0x00
                          DCD      ||.conststring||+0x3fc
000148  d2000000          DCB      0xd2,0x00,0x00,0x00
                          DCD      ||.conststring||+0x418
000150  d3000000          DCB      0xd3,0x00,0x00,0x00
                          DCD      ||.conststring||+0x434
000158  d4000000          DCB      0xd4,0x00,0x00,0x00
                          DCD      ||.conststring||+0x444
000160  d5000000          DCB      0xd5,0x00,0x00,0x00
                          DCD      ||.conststring||+0x458
000168  d6000000          DCB      0xd6,0x00,0x00,0x00
                          DCD      ||.conststring||+0x474
000170  d7000000          DCB      0xd7,0x00,0x00,0x00
                          DCD      ||.conststring||+0x494
000178  d8000000          DCB      0xd8,0x00,0x00,0x00
                          DCD      ||.conststring||+0x4b0
000180  d9000000          DCB      0xd9,0x00,0x00,0x00
                          DCD      ||.conststring||+0x4cc
000188  da000000          DCB      0xda,0x00,0x00,0x00
                          DCD      ||.conststring||+0x4e8
000190  db000000          DCB      0xdb,0x00,0x00,0x00
                          DCD      ||.conststring||+0x4fc
000198  dc000000          DCB      0xdc,0x00,0x00,0x00
                          DCD      ||.conststring||+0x514
0001a0  dd000000          DCB      0xdd,0x00,0x00,0x00
                          DCD      ||.conststring||+0x52c
0001a8  de000000          DCB      0xde,0x00,0x00,0x00
                          DCD      ||.conststring||+0x540
0001b0  df000000          DCB      0xdf,0x00,0x00,0x00
                          DCD      ||.conststring||+0x550
0001b8  e0000000          DCB      0xe0,0x00,0x00,0x00
                          DCD      ||.conststring||+0x560
0001c0  e1000000          DCB      0xe1,0x00,0x00,0x00
                          DCD      ||.conststring||+0x578
0001c8  e2000000          DCB      0xe2,0x00,0x00,0x00
                          DCD      ||.conststring||+0x58c
0001d0  e3000000          DCB      0xe3,0x00,0x00,0x00
                          DCD      ||.conststring||+0x5b0
0001d8  e4000000          DCB      0xe4,0x00,0x00,0x00
                          DCD      ||.conststring||+0x5cc
0001e0  e5000000          DCB      0xe5,0x00,0x00,0x00
                          DCD      ||.conststring||+0x5e4
0001e8  e6000000          DCB      0xe6,0x00,0x00,0x00
                          DCD      ||.conststring||+0x600
0001f0  e7000000          DCB      0xe7,0x00,0x00,0x00
                          DCD      ||.conststring||+0x618
0001f8  e8000000          DCB      0xe8,0x00,0x00,0x00
                          DCD      ||.conststring||+0x634
000200  e9000000          DCB      0xe9,0x00,0x00,0x00
                          DCD      ||.conststring||+0x650
000208  ea000000          DCB      0xea,0x00,0x00,0x00
                          DCD      ||.conststring||+0x668
000210  eb000000          DCB      0xeb,0x00,0x00,0x00
                          DCD      ||.conststring||+0x680
000218  ec000000          DCB      0xec,0x00,0x00,0x00
                          DCD      ||.conststring||+0x690
000220  ed000000          DCB      0xed,0x00,0x00,0x00
                          DCD      ||.conststring||+0x6a0
000228  ee000000          DCB      0xee,0x00,0x00,0x00
                          DCD      ||.conststring||+0x6b8
000230  ef000000          DCB      0xef,0x00,0x00,0x00
                          DCD      ||.conststring||+0x6c8
000238  f0000000          DCB      0xf0,0x00,0x00,0x00
                          DCD      ||.conststring||+0x6e4
000240  f1000000          DCB      0xf1,0x00,0x00,0x00
                          DCD      ||.conststring||+0x6f4
000248  f2000000          DCB      0xf2,0x00,0x00,0x00
                          DCD      ||.conststring||+0x70c
000250  f3000000          DCB      0xf3,0x00,0x00,0x00
                          DCD      ||.conststring||+0x720
000258  f4000000          DCB      0xf4,0x00,0x00,0x00
                          DCD      ||.conststring||+0x740
000260  f5000000          DCB      0xf5,0x00,0x00,0x00
                          DCD      ||.conststring||+0x758
000268  f6000000          DCB      0xf6,0x00,0x00,0x00
                          DCD      ||.conststring||+0x774
000270  f7000000          DCB      0xf7,0x00,0x00,0x00
                          DCD      ||.conststring||+0x794
000278  f8000000          DCB      0xf8,0x00,0x00,0x00
                          DCD      ||.conststring||+0x7ac
000280  f9000000          DCB      0xf9,0x00,0x00,0x00
                          DCD      ||.conststring||+0x7c8
000288  fa000000          DCB      0xfa,0x00,0x00,0x00
                          DCD      ||.conststring||+0x7d8
000290  fb000000          DCB      0xfb,0x00,0x00,0x00
                          DCD      ||.conststring||+0x7ec
000298  fc000000          DCB      0xfc,0x00,0x00,0x00
                          DCD      ||.conststring||+0x800
0002a0  fd000000          DCB      0xfd,0x00,0x00,0x00
                          DCD      ||.conststring||+0x818
0002a8  fe000000          DCB      0xfe,0x00,0x00,0x00
                          DCD      ||.conststring||+0x82c
0002b0  ff000000          DCB      0xff,0x00,0x00,0x00
                          DCD      ||.conststring||+0x83c
                  sys_halt_cnt
0002b8  0000              DCW      0x0000
0002ba  0000              DCB      0x00,0x00
                  manufacture_bin_crc
                          DCD      0x00000000
                  trim_pattern_crc
                          DCD      0x00000000
                  perf_pattern_crc
                          DCD      0x00000000
                  result
0002c8  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\chip_ft\\__test_common.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15___test_common_c_err_info____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15___test_common_c_err_info____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15___test_common_c_err_info____REVSH|
#line 144
|__asm___15___test_common_c_err_info____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
