; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\bsp_lcd_st7789.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_lcd_st7789.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\bsp_lcd_st7789.crf ..\..\User\bsp_stm32f4xx\src\bsp_lcd_st7789.c]
                          THUMB

                          AREA ||i.bsp_lcd_config_init||, CODE, READONLY, ALIGN=2

                  bsp_lcd_config_init PROC
;;;116    
;;;117    static void bsp_lcd_config_init(void)
000000  b510              PUSH     {r4,lr}
;;;118    {
;;;119        LCD_CLR_RST();
000002  bf00              NOP      
000004  2001              MOVS     r0,#1
000006  4949              LDR      r1,|L1.300|
000008  8348              STRH     r0,[r1,#0x1a]
00000a  bf00              NOP      
;;;120        os_delay_ms(10);
00000c  200a              MOVS     r0,#0xa
00000e  f7fffffe          BL       bsp_DelayMS
;;;121        LCD_SET_RST();
000012  bf00              NOP      
000014  2001              MOVS     r0,#1
000016  4945              LDR      r1,|L1.300|
000018  8308              STRH     r0,[r1,#0x18]
00001a  bf00              NOP      
;;;122        os_delay_ms(10);
00001c  200a              MOVS     r0,#0xa
00001e  f7fffffe          BL       bsp_DelayMS
;;;123    
;;;124        bsp_lcd_send_cmd((uint8_t *)lcd_config_init_cmd, 1);
000022  2101              MOVS     r1,#1
000024  4842              LDR      r0,|L1.304|
000026  f7fffffe          BL       bsp_lcd_send_cmd
;;;125        os_delay_ms(10);
00002a  200a              MOVS     r0,#0xa
00002c  f7fffffe          BL       bsp_DelayMS
;;;126        bsp_lcd_send_cmd((uint8_t *)(lcd_config_init_cmd + 1), 1);
000030  2101              MOVS     r1,#1
000032  483f              LDR      r0,|L1.304|
000034  1c40              ADDS     r0,r0,#1
000036  f7fffffe          BL       bsp_lcd_send_cmd
;;;127        bsp_lcd_send_data((uint8_t *)lcd_config_init_data, 1);
00003a  2101              MOVS     r1,#1
00003c  483d              LDR      r0,|L1.308|
00003e  f7fffffe          BL       bsp_lcd_send_data
;;;128    
;;;129        bsp_lcd_send_cmd((uint8_t *)(lcd_config_init_cmd + 2), 1);
000042  2101              MOVS     r1,#1
000044  483a              LDR      r0,|L1.304|
000046  1c80              ADDS     r0,r0,#2
000048  f7fffffe          BL       bsp_lcd_send_cmd
;;;130        bsp_lcd_send_data((uint8_t *)(lcd_config_init_data + 1), 1);
00004c  2101              MOVS     r1,#1
00004e  4839              LDR      r0,|L1.308|
000050  1c40              ADDS     r0,r0,#1
000052  f7fffffe          BL       bsp_lcd_send_data
;;;131    
;;;132        bsp_lcd_send_cmd((uint8_t *)(lcd_config_init_cmd + 3), 1);
000056  2101              MOVS     r1,#1
000058  4835              LDR      r0,|L1.304|
00005a  1cc0              ADDS     r0,r0,#3
00005c  f7fffffe          BL       bsp_lcd_send_cmd
;;;133        bsp_lcd_send_data((uint8_t *)(lcd_config_init_data + 2), 5);
000060  2105              MOVS     r1,#5
000062  4834              LDR      r0,|L1.308|
000064  1c80              ADDS     r0,r0,#2
000066  f7fffffe          BL       bsp_lcd_send_data
;;;134    
;;;135        bsp_lcd_send_cmd((uint8_t *)(lcd_config_init_cmd + 4), 1);
00006a  2101              MOVS     r1,#1
00006c  4830              LDR      r0,|L1.304|
00006e  1d00              ADDS     r0,r0,#4
000070  f7fffffe          BL       bsp_lcd_send_cmd
;;;136        bsp_lcd_send_data((uint8_t *)(lcd_config_init_data + 7), 1);
000074  2101              MOVS     r1,#1
000076  482f              LDR      r0,|L1.308|
000078  1dc0              ADDS     r0,r0,#7
00007a  f7fffffe          BL       bsp_lcd_send_data
;;;137    
;;;138        bsp_lcd_send_cmd((uint8_t *)(lcd_config_init_cmd + 5), 1);
00007e  2101              MOVS     r1,#1
000080  482b              LDR      r0,|L1.304|
000082  1d40              ADDS     r0,r0,#5
000084  f7fffffe          BL       bsp_lcd_send_cmd
;;;139        bsp_lcd_send_data((uint8_t *)(lcd_config_init_data + 8), 1);
000088  2101              MOVS     r1,#1
00008a  482a              LDR      r0,|L1.308|
00008c  3008              ADDS     r0,r0,#8
00008e  f7fffffe          BL       bsp_lcd_send_data
;;;140    
;;;141        bsp_lcd_send_cmd((uint8_t *)(lcd_config_init_cmd + 6), 1);
000092  2101              MOVS     r1,#1
000094  4826              LDR      r0,|L1.304|
000096  1d80              ADDS     r0,r0,#6
000098  f7fffffe          BL       bsp_lcd_send_cmd
;;;142        bsp_lcd_send_data((uint8_t *)(lcd_config_init_data + 9), 1);
00009c  2101              MOVS     r1,#1
00009e  4825              LDR      r0,|L1.308|
0000a0  3009              ADDS     r0,r0,#9
0000a2  f7fffffe          BL       bsp_lcd_send_data
;;;143    
;;;144        bsp_lcd_send_cmd((uint8_t *)(lcd_config_init_cmd + 7), 1);
0000a6  2101              MOVS     r1,#1
0000a8  4821              LDR      r0,|L1.304|
0000aa  1dc0              ADDS     r0,r0,#7
0000ac  f7fffffe          BL       bsp_lcd_send_cmd
;;;145        bsp_lcd_send_data((uint8_t *)(lcd_config_init_data + 10), 1);
0000b0  2101              MOVS     r1,#1
0000b2  4820              LDR      r0,|L1.308|
0000b4  300a              ADDS     r0,r0,#0xa
0000b6  f7fffffe          BL       bsp_lcd_send_data
;;;146    
;;;147        bsp_lcd_send_cmd((uint8_t *)(lcd_config_init_cmd + 8), 1);
0000ba  2101              MOVS     r1,#1
0000bc  481c              LDR      r0,|L1.304|
0000be  3008              ADDS     r0,r0,#8
0000c0  f7fffffe          BL       bsp_lcd_send_cmd
;;;148        bsp_lcd_send_data((uint8_t *)(lcd_config_init_data + 11), 1);
0000c4  2101              MOVS     r1,#1
0000c6  481b              LDR      r0,|L1.308|
0000c8  300b              ADDS     r0,r0,#0xb
0000ca  f7fffffe          BL       bsp_lcd_send_data
;;;149    
;;;150        bsp_lcd_send_cmd((uint8_t *)(lcd_config_init_cmd + 9), 1);
0000ce  2101              MOVS     r1,#1
0000d0  4817              LDR      r0,|L1.304|
0000d2  3009              ADDS     r0,r0,#9
0000d4  f7fffffe          BL       bsp_lcd_send_cmd
;;;151        bsp_lcd_send_data((uint8_t *)(lcd_config_init_data + 12), 1);
0000d8  2101              MOVS     r1,#1
0000da  4816              LDR      r0,|L1.308|
0000dc  300c              ADDS     r0,r0,#0xc
0000de  f7fffffe          BL       bsp_lcd_send_data
;;;152    
;;;153        bsp_lcd_send_cmd((uint8_t *)(lcd_config_init_cmd + 10), 1);
0000e2  2101              MOVS     r1,#1
0000e4  4812              LDR      r0,|L1.304|
0000e6  300a              ADDS     r0,r0,#0xa
0000e8  f7fffffe          BL       bsp_lcd_send_cmd
;;;154        bsp_lcd_send_data((uint8_t *)(lcd_config_init_data + 13), 2);
0000ec  2102              MOVS     r1,#2
0000ee  4811              LDR      r0,|L1.308|
0000f0  300d              ADDS     r0,r0,#0xd
0000f2  f7fffffe          BL       bsp_lcd_send_data
;;;155    
;;;156        bsp_lcd_send_cmd((uint8_t *)(lcd_config_init_cmd + 11), 1);
0000f6  2101              MOVS     r1,#1
0000f8  480d              LDR      r0,|L1.304|
0000fa  300b              ADDS     r0,r0,#0xb
0000fc  f7fffffe          BL       bsp_lcd_send_cmd
;;;157        bsp_lcd_send_data((uint8_t *)(lcd_config_init_data + 15), 14);
000100  210e              MOVS     r1,#0xe
000102  480c              LDR      r0,|L1.308|
000104  300f              ADDS     r0,r0,#0xf
000106  f7fffffe          BL       bsp_lcd_send_data
;;;158    
;;;159        bsp_lcd_send_cmd((uint8_t *)(lcd_config_init_cmd + 12), 1);
00010a  2101              MOVS     r1,#1
00010c  4808              LDR      r0,|L1.304|
00010e  300c              ADDS     r0,r0,#0xc
000110  f7fffffe          BL       bsp_lcd_send_cmd
;;;160        bsp_lcd_send_data((uint8_t *)(lcd_config_init_data + 29), 14);
000114  210e              MOVS     r1,#0xe
000116  4807              LDR      r0,|L1.308|
000118  301d              ADDS     r0,r0,#0x1d
00011a  f7fffffe          BL       bsp_lcd_send_data
;;;161    
;;;162        bsp_lcd_send_cmd((uint8_t *)(lcd_config_init_cmd + 13), 2);
00011e  2102              MOVS     r1,#2
000120  4803              LDR      r0,|L1.304|
000122  300d              ADDS     r0,r0,#0xd
000124  f7fffffe          BL       bsp_lcd_send_cmd
;;;163    }
000128  bd10              POP      {r4,pc}
;;;164    
                          ENDP

00012a  0000              DCW      0x0000
                  |L1.300|
                          DCD      0x40021000
                  |L1.304|
                          DCD      lcd_config_init_cmd
                  |L1.308|
                          DCD      lcd_config_init_data

                          AREA ||i.bsp_lcd_init||, CODE, READONLY, ALIGN=1

                  bsp_lcd_init PROC
;;;170     */
;;;171    void bsp_lcd_init(void)
000000  b510              PUSH     {r4,lr}
;;;172    {
;;;173        lcd_ConfigGPIO();
000002  f7fffffe          BL       lcd_ConfigGPIO
;;;174    
;;;175        bsp_lcd_config_init();
000006  f7fffffe          BL       bsp_lcd_config_init
;;;176        
;;;177    }
00000a  bd10              POP      {r4,pc}
;;;178    
                          ENDP


                          AREA ||i.bsp_lcd_send_cmd||, CODE, READONLY, ALIGN=2

                  bsp_lcd_send_cmd PROC
;;;238     
;;;239    bool bsp_lcd_send_cmd(uint8_t *send_cmd, uint16_t cmd_len)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;240    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;241        bool result = false;
000008  f04f0800          MOV      r8,#0
;;;242        uint32_t timeout = 1000;
00000c  f44f777a          MOV      r7,#0x3e8
;;;243        uint8_t *send_cmd_ptr = send_cmd;
000010  4625              MOV      r5,r4
;;;244    
;;;245        if(send_cmd_ptr == NULL)
000012  b915              CBNZ     r5,|L3.26|
;;;246        {
;;;247            return false;
000014  2000              MOVS     r0,#0
                  |L3.22|
;;;248        }
;;;249        lcd_SetCS(0);
;;;250        LCD_CLR_DC();
;;;251        #if 0
;;;252        while(cmd_len--)
;;;253        {
;;;254            hspi2.Instance->DR = *send_cmd_ptr;
;;;255            send_cmd_ptr++;
;;;256            timeout = 1000;
;;;257            while(timeout--)
;;;258            {
;;;259                if(__HAL_SPI_GET_FLAG(&hspi2, SPI_FLAG_TXE))
;;;260                {
;;;261                    break;
;;;262                }
;;;263            }
;;;264        }
;;;265        #else
;;;266        while(cmd_len--)
;;;267        {
;;;268            uint8_t data = *send_cmd_ptr;
;;;269            send_cmd_ptr++;
;;;270            timeout = 1000;
;;;271            while(timeout--)
;;;272            {
;;;273                //if(!bsp_SpiBusBusy()) 
;;;274                //{
;;;275                    
;;;276                    bsp_spiWrite1(data);
;;;277                    break;
;;;278                //}   
;;;279            }
;;;280        }
;;;281    
;;;282        #endif
;;;283        
;;;284        LCD_SET_DC();
;;;285    
;;;286        if(timeout > 0)
;;;287        {
;;;288            result = true;
;;;289        }
;;;290        lcd_SetCS(1);
;;;291        return result;
;;;292    }
000016  e8bd87f0          POP      {r4-r10,pc}
                  |L3.26|
00001a  2000              MOVS     r0,#0                 ;249
00001c  f7fffffe          BL       lcd_SetCS
000020  bf00              NOP                            ;250
000022  f44f7080          MOV      r0,#0x100             ;250
000026  4914              LDR      r1,|L3.120|
000028  8008              STRH     r0,[r1,#0]            ;250
00002a  bf00              NOP                            ;250
00002c  e00f              B        |L3.78|
                  |L3.46|
00002e  f8959000          LDRB     r9,[r5,#0]            ;268
000032  1c6d              ADDS     r5,r5,#1              ;269
000034  f44f777a          MOV      r7,#0x3e8             ;270
000038  e003              B        |L3.66|
                  |L3.58|
00003a  4648              MOV      r0,r9                 ;276
00003c  f7fffffe          BL       bsp_spiWrite1
000040  e003              B        |L3.74|
                  |L3.66|
000042  1e38              SUBS     r0,r7,#0              ;271
000044  f1a70701          SUB      r7,r7,#1              ;271
000048  d1f7              BNE      |L3.58|
                  |L3.74|
00004a  bf00              NOP                            ;277
00004c  bf00              NOP                            ;280
                  |L3.78|
00004e  1e30              SUBS     r0,r6,#0              ;266
000050  f1a60101          SUB      r1,r6,#1              ;266
000054  b28e              UXTH     r6,r1                 ;266
000056  d1ea              BNE      |L3.46|
000058  bf00              NOP                            ;284
00005a  f44f7080          MOV      r0,#0x100             ;284
00005e  4906              LDR      r1,|L3.120|
000060  1e89              SUBS     r1,r1,#2              ;284
000062  8008              STRH     r0,[r1,#0]            ;284
000064  bf00              NOP                            ;284
000066  b10f              CBZ      r7,|L3.108|
000068  f04f0801          MOV      r8,#1                 ;288
                  |L3.108|
00006c  2001              MOVS     r0,#1                 ;290
00006e  f7fffffe          BL       lcd_SetCS
000072  4640              MOV      r0,r8                 ;291
000074  e7cf              B        |L3.22|
;;;293    
                          ENDP

000076  0000              DCW      0x0000
                  |L3.120|
                          DCD      0x40020c1a

                          AREA ||i.bsp_lcd_send_data||, CODE, READONLY, ALIGN=1

                  bsp_lcd_send_data PROC
;;;185     */
;;;186    bool bsp_lcd_send_data(uint8_t *send_data, uint16_t data_len)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;187    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;188        bool result = false;
000008  f04f0800          MOV      r8,#0
;;;189        uint32_t timeout = 1000;
00000c  f44f767a          MOV      r6,#0x3e8
;;;190        uint8_t *send_data_ptr = send_data;
000010  4627              MOV      r7,r4
;;;191        
;;;192        #if 0
;;;193        while(data_len--)
;;;194        {
;;;195            hspi2.Instance->DR = *send_data_ptr;
;;;196            send_data_ptr++;
;;;197            timeout = 1000;
;;;198            while(timeout--)
;;;199            {
;;;200                if(__HAL_SPI_GET_FLAG(&hspi2, SPI_FLAG_TXE))
;;;201                {
;;;202                    break;
;;;203                }
;;;204            }
;;;205        }
;;;206    
;;;207        if(timeout > 0)
;;;208        {
;;;209            result = true;
;;;210        }
;;;211        #else
;;;212        lcd_SetCS(0);
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       lcd_SetCS
;;;213        while(data_len--)
000018  e00f              B        |L4.58|
                  |L4.26|
;;;214        {
;;;215            uint8_t data = *send_data_ptr;
00001a  f8979000          LDRB     r9,[r7,#0]
;;;216            send_data_ptr++;
00001e  1c7f              ADDS     r7,r7,#1
;;;217            timeout = 1000;
000020  f44f767a          MOV      r6,#0x3e8
;;;218            while(timeout--)
000024  e003              B        |L4.46|
                  |L4.38|
;;;219            {
;;;220                //if(!bsp_SpiBusBusy()) 
;;;221                //{
;;;222                    
;;;223                    bsp_spiWrite1(data);
000026  4648              MOV      r0,r9
000028  f7fffffe          BL       bsp_spiWrite1
;;;224                    break;
00002c  e003              B        |L4.54|
                  |L4.46|
00002e  1e30              SUBS     r0,r6,#0              ;218
000030  f1a60601          SUB      r6,r6,#1              ;218
000034  d1f7              BNE      |L4.38|
                  |L4.54|
000036  bf00              NOP      
;;;225                //}   
;;;226            }
;;;227        }
000038  bf00              NOP      
                  |L4.58|
00003a  1e28              SUBS     r0,r5,#0              ;213
00003c  f1a50101          SUB      r1,r5,#1              ;213
000040  b28d              UXTH     r5,r1                 ;213
000042  d1ea              BNE      |L4.26|
;;;228    
;;;229        if(timeout > 0)
000044  b10e              CBZ      r6,|L4.74|
;;;230        {
;;;231            result = true;
000046  f04f0801          MOV      r8,#1
                  |L4.74|
;;;232        }
;;;233        #endif
;;;234        lcd_SetCS(1);
00004a  2001              MOVS     r0,#1
00004c  f7fffffe          BL       lcd_SetCS
;;;235        return result;
000050  4640              MOV      r0,r8
;;;236    }
000052  e8bd87f0          POP      {r4-r10,pc}
;;;237    
                          ENDP


                          AREA ||i.lcd_ConfigGPIO||, CODE, READONLY, ALIGN=2

                  lcd_ConfigGPIO PROC
;;;82     */
;;;83     static void lcd_ConfigGPIO(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;84     {
;;;85     	/*
;;;86     		????瀵岃幈STM32-V4 寮€鍙戞澘鍙ｇ嚎鍒嗛厤锛? 涓茶Flash鍨嬪彿涓?W25Q64BVSSIG (80MHz)
;;;87     		PF8/LCD_CS
;;;88     	*/
;;;89     	GPIO_InitTypeDef GPIO_InitStructure={0};
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
000006  9001              STR      r0,[sp,#4]
;;;90     
;;;91     	/* 浣胯兘GPIO 鏃堕挓 */
;;;92     	RCC_AHB1PeriphClockCmd(LCD_RCC_CS | LCD_RCC_RST | LCD_RCC_DC | LCD_RCC_BL, ENABLE);
000008  2101              MOVS     r1,#1
00000a  201a              MOVS     r0,#0x1a
00000c  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;93     
;;;94     	/* 閰嶇疆鐗囬€夊彛绾夸负鎺ㄦ尳杈撳嚭妯″紡 */
;;;95     	lcd_SetCS(1);		/* 鐗囬€夌疆楂橈紝涓嶉€変腑 */
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       lcd_SetCS
;;;96         LCD_SET_DC();
000016  bf00              NOP      
000018  f44f7080          MOV      r0,#0x100
00001c  4917              LDR      r1,|L5.124|
00001e  8008              STRH     r0,[r1,#0]
000020  bf00              NOP      
;;;97         LCD_SET_RST();
000022  bf00              NOP      
000024  2001              MOVS     r0,#1
000026  4916              LDR      r1,|L5.128|
000028  8308              STRH     r0,[r1,#0x18]
00002a  bf00              NOP      
;;;98         LCD_SET_BL();
00002c  bf00              NOP      
00002e  2002              MOVS     r0,#2
000030  8308              STRH     r0,[r1,#0x18]
000032  bf00              NOP      
;;;99         
;;;100    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
000034  2001              MOVS     r0,#1
000036  f88d0004          STRB     r0,[sp,#4]
;;;101        GPIO_InitStructure.GPIO_PuPd =  GPIO_PuPd_UP;
00003a  f88d0007          STRB     r0,[sp,#7]
;;;102    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00003e  2002              MOVS     r0,#2
000040  f88d0005          STRB     r0,[sp,#5]
;;;103    	GPIO_InitStructure.GPIO_Pin = LCD_PIN_CS;
000044  0200              LSLS     r0,r0,#8
000046  9000              STR      r0,[sp,#0]
;;;104    	GPIO_Init(LCD_PORT_CS, &GPIO_InitStructure);
000048  4669              MOV      r1,sp
00004a  480e              LDR      r0,|L5.132|
00004c  f7fffffe          BL       GPIO_Init
;;;105        
;;;106        GPIO_InitStructure.GPIO_Pin = LCD_PIN_DC;
000050  f44f7080          MOV      r0,#0x100
000054  9000              STR      r0,[sp,#0]
;;;107    	GPIO_Init(LCD_PORT_DC, &GPIO_InitStructure);
000056  4669              MOV      r1,sp
000058  4808              LDR      r0,|L5.124|
00005a  3818              SUBS     r0,r0,#0x18
00005c  f7fffffe          BL       GPIO_Init
;;;108        
;;;109        GPIO_InitStructure.GPIO_Pin = LCD_PIN_RST;
000060  2001              MOVS     r0,#1
000062  9000              STR      r0,[sp,#0]
;;;110    	GPIO_Init(LCD_PORT_RST, &GPIO_InitStructure);
000064  4669              MOV      r1,sp
000066  4806              LDR      r0,|L5.128|
000068  f7fffffe          BL       GPIO_Init
;;;111        
;;;112        GPIO_InitStructure.GPIO_Pin = LCD_PIN_BL;
00006c  2002              MOVS     r0,#2
00006e  9000              STR      r0,[sp,#0]
;;;113    	GPIO_Init(LCD_PORT_BL, &GPIO_InitStructure);
000070  4669              MOV      r1,sp
000072  4803              LDR      r0,|L5.128|
000074  f7fffffe          BL       GPIO_Init
;;;114        
;;;115    }
000078  bd1c              POP      {r2-r4,pc}
;;;116    
                          ENDP

00007a  0000              DCW      0x0000
                  |L5.124|
                          DCD      0x40020c18
                  |L5.128|
                          DCD      0x40021000
                  |L5.132|
                          DCD      0x40020400

                          AREA ||i.lcd_SetCS||, CODE, READONLY, ALIGN=2

                  lcd_SetCS PROC
;;;48     
;;;49     static void lcd_SetCS(uint8_t _level)
000000  b510              PUSH     {r4,lr}
;;;50     {
000002  4604              MOV      r4,r0
;;;51     	if (_level == 0)
000004  b954              CBNZ     r4,|L6.28|
;;;52     	{
;;;53     		bsp_SpiBusEnter();	/* 鍗犵敤SPI鎬荤嚎锛?鐢ㄤ簬鎬荤嚎鍏变韩 */
000006  f7fffffe          BL       bsp_SpiBusEnter
;;;54     
;;;55     		#ifdef SOFT_SPI		/* 杞欢SPI */
;;;56     			bsp_SetSpiSck(1);
;;;57     			LCD_CS_0();
;;;58     		#endif
;;;59     
;;;60     		#ifdef HARD_SPI		/* 纭欢SPI */
;;;61     
;;;62     			bsp_SPI_Init(SPI_Direction_2Lines_FullDuplex | SPI_Mode_Master | SPI_DataSize_8b
00000a  f2403007          MOV      r0,#0x307
00000e  f7fffffe          BL       bsp_SPI_Init
;;;63     				| SPI_CPOL_High | SPI_CPHA_2Edge | SPI_NSS_Soft | SPI_BaudRatePrescaler_2 | SPI_FirstBit_MSB);
;;;64     
;;;65     			LCD_CS_0();
000012  f44f7000          MOV      r0,#0x200
000016  4905              LDR      r1,|L6.44|
000018  8008              STRH     r0,[r1,#0]
00001a  e006              B        |L6.42|
                  |L6.28|
;;;66     		#endif
;;;67     	}
;;;68     	else
;;;69     	{
;;;70     		LCD_CS_1();
00001c  f44f7000          MOV      r0,#0x200
000020  4902              LDR      r1,|L6.44|
000022  1e89              SUBS     r1,r1,#2
000024  8008              STRH     r0,[r1,#0]
;;;71     
;;;72     		bsp_SpiBusExit();	/* 閲婃斁SPI鎬荤嚎锛?鐢ㄤ簬鎬荤嚎鍏变韩 */
000026  f7fffffe          BL       bsp_SpiBusExit
                  |L6.42|
;;;73     	}
;;;74     }
00002a  bd10              POP      {r4,pc}
;;;75     /*
                          ENDP

                  |L6.44|
                          DCD      0x4002041a

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  lcd_config_init_cmd
000000  11363ab2          DCB      0x11,0x36,0x3a,0xb2
000004  b7bbc2c3          DCB      0xb7,0xbb,0xc2,0xc3
000008  c4c6d0e0          DCB      0xc4,0xc6,0xd0,0xe0
00000c  e12129            DCB      0xe1,0x21,0x29
                  lcd_config_init_data
00000f  00                DCB      0x00
000010  050c0c00          DCB      0x05,0x0c,0x0c,0x00
000014  33333532          DCB      0x33,0x33,0x35,0x32
000018  0115200f          DCB      0x01,0x15,0x20,0x0f
00001c  a4a1d008          DCB      0xa4,0xa1,0xd0,0x08
000020  0e090905          DCB      0x0e,0x09,0x09,0x05
000024  31334817          DCB      0x31,0x33,0x48,0x17
000028  14153134          DCB      0x14,0x15,0x31,0x34
00002c  d0080e09          DCB      0xd0,0x08,0x0e,0x09
000030  09153133          DCB      0x09,0x15,0x31,0x33
000034  48171415          DCB      0x48,0x17,0x14,0x15
000038  3134              DCB      0x31,0x34

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_lcd_st7789.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_bsp_lcd_st7789_c_6190f55a____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_bsp_lcd_st7789_c_6190f55a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_bsp_lcd_st7789_c_6190f55a____REVSH|
#line 144
|__asm___16_bsp_lcd_st7789_c_6190f55a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
