; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\usbd_ioreq.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\usbd_ioreq.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\usbd_ioreq.crf ..\..\Libraries\STM32_USB_Device_Library\Core\src\usbd_ioreq.c]
                          THUMB

                          AREA ||i.USBD_CtlContinueRx||, CODE, READONLY, ALIGN=1

                  USBD_CtlContinueRx PROC
;;;164    */
;;;165    USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;166                                              uint8_t *pbuf,                                          
;;;167                                              uint16_t len)
;;;168    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;169      USBD_Status ret = USBD_OK;
00000a  2700              MOVS     r7,#0
;;;170      
;;;171      DCD_EP_PrepareRx (pdev,
00000c  462b              MOV      r3,r5
00000e  4622              MOV      r2,r4
000010  2100              MOVS     r1,#0
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       DCD_EP_PrepareRx
;;;172                        0,                     
;;;173                        pbuf,                         
;;;174                        len);
;;;175      return ret;
000018  4638              MOV      r0,r7
;;;176    }
00001a  e8bd81f0          POP      {r4-r8,pc}
;;;177    /**
                          ENDP


                          AREA ||i.USBD_CtlContinueSendData||, CODE, READONLY, ALIGN=1

                  USBD_CtlContinueSendData PROC
;;;117    */
;;;118    USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;119                                           uint8_t *pbuf,
;;;120                                           uint16_t len)
;;;121    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;122      USBD_Status ret = USBD_OK;
00000a  2700              MOVS     r7,#0
;;;123      
;;;124      DCD_EP_Tx (pdev, 0, pbuf, len);
00000c  462b              MOV      r3,r5
00000e  4622              MOV      r2,r4
000010  2100              MOVS     r1,#0
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       DCD_EP_Tx
;;;125      
;;;126      
;;;127      return ret;
000018  4638              MOV      r0,r7
;;;128    }
00001a  e8bd81f0          POP      {r4-r8,pc}
;;;129    
                          ENDP


                          AREA ||i.USBD_CtlPrepareRx||, CODE, READONLY, ALIGN=1

                  USBD_CtlPrepareRx PROC
;;;137    */
;;;138    USBD_Status  USBD_CtlPrepareRx (USB_OTG_CORE_HANDLE  *pdev,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;139                                      uint8_t *pbuf,                                  
;;;140                                      uint16_t len)
;;;141    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;142      USBD_Status ret = USBD_OK;
00000a  2700              MOVS     r7,#0
;;;143      
;;;144      pdev->dev.out_ep[0].total_data_len = len;
00000c  f8c45394          STR      r5,[r4,#0x394]
;;;145      pdev->dev.out_ep[0].rem_data_len   = len;
000010  f8c45390          STR      r5,[r4,#0x390]
;;;146      pdev->dev.device_state = USB_OTG_EP0_DATA_OUT;
000014  2103              MOVS     r1,#3
000016  f2401011          MOV      r0,#0x111
00001a  5501              STRB     r1,[r0,r4]
;;;147      
;;;148      DCD_EP_PrepareRx (pdev,
00001c  462b              MOV      r3,r5
00001e  4632              MOV      r2,r6
000020  2100              MOVS     r1,#0
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       DCD_EP_PrepareRx
;;;149                        0,
;;;150                        pbuf,
;;;151                        len);
;;;152      
;;;153    
;;;154      return ret;
000028  4638              MOV      r0,r7
;;;155    }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;156    
                          ENDP


                          AREA ||i.USBD_CtlReceiveStatus||, CODE, READONLY, ALIGN=1

                  USBD_CtlReceiveStatus PROC
;;;202    */
;;;203    USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
000000  b570              PUSH     {r4-r6,lr}
;;;204    {
000002  4604              MOV      r4,r0
;;;205      USBD_Status ret = USBD_OK;
000004  2500              MOVS     r5,#0
;;;206      pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
000006  2105              MOVS     r1,#5
000008  f2401011          MOV      r0,#0x111
00000c  5501              STRB     r1,[r0,r4]
;;;207      DCD_EP_PrepareRx ( pdev,
00000e  2300              MOVS     r3,#0
000010  461a              MOV      r2,r3
000012  4619              MOV      r1,r3
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       DCD_EP_PrepareRx
;;;208                        0,
;;;209                        NULL,
;;;210                        0);  
;;;211    
;;;212      USB_OTG_EP0_OutStart(pdev);
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       USB_OTG_EP0_OutStart
;;;213      
;;;214      return ret;
000020  4628              MOV      r0,r5
;;;215    }
000022  bd70              POP      {r4-r6,pc}
;;;216    
                          ENDP


                          AREA ||i.USBD_CtlSendData||, CODE, READONLY, ALIGN=1

                  USBD_CtlSendData PROC
;;;94     */
;;;95     USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;96                                    uint8_t *pbuf,
;;;97                                    uint16_t len)
;;;98     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;99       USBD_Status ret = USBD_OK;
00000a  2700              MOVS     r7,#0
;;;100      
;;;101      pdev->dev.in_ep[0].total_data_len = len;
00000c  f8c4513c          STR      r5,[r4,#0x13c]
;;;102      pdev->dev.in_ep[0].rem_data_len   = len;
000010  f8c45138          STR      r5,[r4,#0x138]
;;;103      pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
000014  2102              MOVS     r1,#2
000016  f2401011          MOV      r0,#0x111
00001a  5501              STRB     r1,[r0,r4]
;;;104    
;;;105      DCD_EP_Tx (pdev, 0, pbuf, len);
00001c  462b              MOV      r3,r5
00001e  4632              MOV      r2,r6
000020  2100              MOVS     r1,#0
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       DCD_EP_Tx
;;;106     
;;;107      return ret;
000028  4638              MOV      r0,r7
;;;108    }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;109    
                          ENDP


                          AREA ||i.USBD_CtlSendStatus||, CODE, READONLY, ALIGN=1

                  USBD_CtlSendStatus PROC
;;;182    */
;;;183    USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
000000  b570              PUSH     {r4-r6,lr}
;;;184    {
000002  4604              MOV      r4,r0
;;;185      USBD_Status ret = USBD_OK;
000004  2500              MOVS     r5,#0
;;;186      pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
000006  2104              MOVS     r1,#4
000008  f2401011          MOV      r0,#0x111
00000c  5501              STRB     r1,[r0,r4]
;;;187      DCD_EP_Tx (pdev,
00000e  2300              MOVS     r3,#0
000010  461a              MOV      r2,r3
000012  4619              MOV      r1,r3
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       DCD_EP_Tx
;;;188                 0,
;;;189                 NULL, 
;;;190                 0); 
;;;191      
;;;192      USB_OTG_EP0_OutStart(pdev);  
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       USB_OTG_EP0_OutStart
;;;193      
;;;194      return ret;
000020  4628              MOV      r0,r5
;;;195    }
000022  bd70              POP      {r4-r6,pc}
;;;196    
                          ENDP


                          AREA ||i.USBD_GetRxCount||, CODE, READONLY, ALIGN=1

                  USBD_GetRxCount PROC
;;;224    */
;;;225    uint16_t  USBD_GetRxCount (USB_OTG_CORE_HANDLE  *pdev , uint8_t epnum)
000000  4602              MOV      r2,r0
;;;226    {
;;;227      return pdev->dev.out_ep[epnum].xfer_count;
000002  eb010381          ADD      r3,r1,r1,LSL #2
000006  f502705d          ADD      r0,r2,#0x374
00000a  eb0000c3          ADD      r0,r0,r3,LSL #3
00000e  8b00              LDRH     r0,[r0,#0x18]
000010  b280              UXTH     r0,r0
;;;228    }
000012  4770              BX       lr
;;;229    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\Libraries\\STM32_USB_Device_Library\\Core\\src\\usbd_ioreq.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_usbd_ioreq_c_28e25e4d____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_usbd_ioreq_c_28e25e4d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_usbd_ioreq_c_28e25e4d____REVSH|
#line 144
|__asm___12_usbd_ioreq_c_28e25e4d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
