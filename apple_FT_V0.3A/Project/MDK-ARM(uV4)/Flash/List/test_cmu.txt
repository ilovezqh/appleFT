; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\test_cmu.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\test_cmu.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\test_cmu.crf ..\..\User\chip_ft\test_cmu.c]
                          THUMB

                          AREA ||i.check_deviation||, CODE, READONLY, ALIGN=1

                  check_deviation PROC
;;;188    //range:偏差范围，超过偏差范围返回-1，否则返回0
;;;189    int check_deviation(uint8_t* numbers, uint8_t n,uint8_t  range) 
000000  b5f0              PUSH     {r4-r7,lr}
;;;190    {
000002  4603              MOV      r3,r0
000004  4614              MOV      r4,r2
;;;191        uint32_t sum = 0;
000006  2500              MOVS     r5,#0
;;;192        
;;;193        for (int i = 0; i < n; i++) 
000008  2000              MOVS     r0,#0
00000a  e002              B        |L1.18|
                  |L1.12|
;;;194        {
;;;195            sum += numbers[i];
00000c  5c1a              LDRB     r2,[r3,r0]
00000e  4415              ADD      r5,r5,r2
000010  1c40              ADDS     r0,r0,#1              ;193
                  |L1.18|
000012  4288              CMP      r0,r1                 ;193
000014  dbfa              BLT      |L1.12|
;;;196        }
;;;197        
;;;198        int average = sum / n;
000016  fbb5f6f1          UDIV     r6,r5,r1
;;;199        
;;;200        for (int i = 0; i < n; i++) 
00001a  2200              MOVS     r2,#0
00001c  e00c              B        |L1.56|
                  |L1.30|
;;;201        {
;;;202            if (abs(numbers[i] - average) > range) 
00001e  5c9f              LDRB     r7,[r3,r2]
000020  1bb8              SUBS     r0,r7,r6
000022  2800              CMP      r0,#0
000024  db01              BLT      |L1.42|
000026  4607              MOV      r7,r0
000028  e000              B        |L1.44|
                  |L1.42|
00002a  4247              RSBS     r7,r0,#0
                  |L1.44|
00002c  42a7              CMP      r7,r4
00002e  dd02              BLE      |L1.54|
;;;203            {
;;;204                return -1;
000030  f04f30ff          MOV      r0,#0xffffffff
                  |L1.52|
;;;205            }
;;;206        }
;;;207        return 0;
;;;208    }
000034  bdf0              POP      {r4-r7,pc}
                  |L1.54|
000036  1c52              ADDS     r2,r2,#1              ;200
                  |L1.56|
000038  428a              CMP      r2,r1                 ;200
00003a  dbf0              BLT      |L1.30|
00003c  2000              MOVS     r0,#0                 ;207
00003e  e7f9              B        |L1.52|
;;;209     
                          ENDP


                          AREA ||i.clk_freq_10ms_get||, CODE, READONLY, ALIGN=1

                  clk_freq_10ms_get PROC
;;;398    
;;;399    static int32_t  clk_freq_10ms_get(uint32_t* freq)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;400    {
000004  4607              MOV      r7,r0
;;;401        #define TRY_TIME_MAX  3
;;;402        uint32_t try_cnt = 0;
000006  f04f0800          MOV      r8,#0
;;;403        uint32_t freq1   = 0;
00000a  2400              MOVS     r4,#0
;;;404        uint32_t freq2   = 0;
00000c  2500              MOVS     r5,#0
;;;405        uint32_t avg     = 0;
00000e  bf00              NOP      
;;;406        uint32_t diff    = 0;
000010  bf00              NOP      
;;;407        
;;;408        do
000012  bf00              NOP      
                  |L2.20|
;;;409        {
;;;410            freq1 = pulse_10ms_get();
000014  f7fffffe          BL       pulse_10ms_get
000018  4604              MOV      r4,r0
;;;411            freq2 = pulse_10ms_get();
00001a  f7fffffe          BL       pulse_10ms_get
00001e  4605              MOV      r5,r0
;;;412            diff  = (freq1>freq2)? (freq1-freq2):(freq2-freq1);
000020  42ac              CMP      r4,r5
000022  d901              BLS      |L2.40|
000024  1b60              SUBS     r0,r4,r5
000026  e000              B        |L2.42|
                  |L2.40|
000028  1b28              SUBS     r0,r5,r4
                  |L2.42|
00002a  4681              MOV      r9,r0
;;;413            avg   = (freq1+freq2)/2;
00002c  1960              ADDS     r0,r4,r5
00002e  0846              LSRS     r6,r0,#1
;;;414            *freq = avg;
000030  603e              STR      r6,[r7,#0]
;;;415            try_cnt++;
000032  f1080801          ADD      r8,r8,#1
;;;416            if((diff*100) <= avg) return 0;    //两次差值小于1%，
000036  eb0900c9          ADD      r0,r9,r9,LSL #3
00003a  eb001009          ADD      r0,r0,r9,LSL #4
00003e  ebb60f80          CMP      r6,r0,LSL #2
000042  d302              BCC      |L2.74|
000044  2000              MOVS     r0,#0
                  |L2.70|
;;;417        }while(try_cnt < TRY_TIME_MAX);
;;;418    
;;;419        return -1;
;;;420    }
000046  e8bd87f0          POP      {r4-r10,pc}
                  |L2.74|
00004a  f1b80f03          CMP      r8,#3                 ;417
00004e  d3e1              BCC      |L2.20|
000050  f04f30ff          MOV      r0,#0xffffffff        ;419
000054  e7f7              B        |L2.70|
                          ENDP


                          AREA ||i.difference||, CODE, READONLY, ALIGN=1

                  difference PROC
;;;90     
;;;91     uint32_t difference(uint32_t a, uint32_t b) 
000000  4602              MOV      r2,r0
;;;92     {
;;;93         return (a > b) ? (a - b) : (b - a);
000002  428a              CMP      r2,r1
000004  d901              BLS      |L3.10|
000006  1a50              SUBS     r0,r2,r1
                  |L3.8|
;;;94     }
000008  4770              BX       lr
                  |L3.10|
00000a  1a88              SUBS     r0,r1,r2              ;93
00000c  e7fc              B        |L3.8|
;;;95     //获取OSC_DEV trim值
                          ENDP


                          AREA ||i.freq_binary_search||, CODE, READONLY, ALIGN=1

                  freq_binary_search PROC
;;;258    //dir 考虑 trim增大与频率增大是否通向
;;;259    static int32_t freq_binary_search(freq_search_t*  freq_search_struct)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;260    {
000004  4605              MOV      r5,r0
;;;261        uint32_t tar                = (*freq_search_struct).tar;
000006  682e              LDR      r6,[r5,#0]
;;;262        int32_t (*trim_set)(uint8_t,uint32_t*)  = (*freq_search_struct).trim_val_set;
000008  f8d5a004          LDR      r10,[r5,#4]
;;;263        uint8_t high                = (*freq_search_struct).trim_val_hi;
00000c  7a6f              LDRB     r7,[r5,#9]
;;;264        uint8_t low                 = (*freq_search_struct).trim_val_low;
00000e  f8958008          LDRB     r8,[r5,#8]
;;;265        uint8_t dir                 = (*freq_search_struct).dir;
000012  7c68              LDRB     r0,[r5,#0x11]
000014  9002              STR      r0,[sp,#8]
;;;266        uint8_t mid;
;;;267        uint32_t mid_freq;
;;;268        uint32_t min_diff           = tar;
000016  9600              STR      r6,[sp,#0]
;;;269      
;;;270        while (low <= high) 
000018  e040              B        |L4.156|
                  |L4.26|
;;;271        {
;;;272            mid = (low + high) / 2;
00001a  eb080007          ADD      r0,r8,r7
00001e  eb0071d0          ADD      r1,r0,r0,LSR #31
000022  f3c10447          UBFX     r4,r1,#1,#8
;;;273            int32_t err = trim_set(mid, &mid_freq);
000026  a901              ADD      r1,sp,#4
000028  4620              MOV      r0,r4
00002a  47d0              BLX      r10
00002c  4683              MOV      r11,r0
;;;274            if(err) return -1;
00002e  f1bb0f00          CMP      r11,#0
000032  d003              BEQ      |L4.60|
000034  f04f30ff          MOV      r0,#0xffffffff
                  |L4.56|
;;;275            //logging("mid=%3d, low=%3d, high=%3d, mid_freq=%8d\r\n",mid,low,high,mid_freq);
;;;276            
;;;277            uint32_t diff = (mid_freq > tar)?(mid_freq-tar):(tar-mid_freq);         //当前频率与目标频率的差值
;;;278            if (diff < min_diff) 
;;;279            {
;;;280                min_diff = diff;
;;;281                (*freq_search_struct).best_trim_val  = mid;
;;;282                (*freq_search_struct).best_trim_freq = mid_freq;
;;;283            }
;;;284            
;;;285            if (mid_freq == tar ) 
;;;286            {
;;;287                break;//return mid;
;;;288            } 
;;;289            else if((mid == low) && (mid== high)) /* low mid high三个数为同一值，穷举完毕 */
;;;290            {
;;;291                break;
;;;292            }
;;;293            else 
;;;294            {
;;;295                if(dir)
;;;296                {
;;;297                    if (mid_freq < tar) 
;;;298                    {
;;;299                        low = mid + 1;
;;;300                    } 
;;;301                    else 
;;;302                    {
;;;303                        high = mid - 1;
;;;304                    }
;;;305                }
;;;306                else
;;;307                {
;;;308                    if (mid_freq < tar) 
;;;309                    {
;;;310                       
;;;311                        high = mid - 1;
;;;312                    } 
;;;313                    else 
;;;314                    {
;;;315                        low = mid + 1;
;;;316                    }
;;;317                }
;;;318            }
;;;319        }
;;;320        return 0;
;;;321    }
000038  e8bd8ffe          POP      {r1-r11,pc}
                  |L4.60|
00003c  9801              LDR      r0,[sp,#4]            ;277
00003e  42b0              CMP      r0,r6                 ;277
000040  d902              BLS      |L4.72|
000042  9801              LDR      r0,[sp,#4]            ;277
000044  1b80              SUBS     r0,r0,r6              ;277
000046  e001              B        |L4.76|
                  |L4.72|
000048  9801              LDR      r0,[sp,#4]            ;277
00004a  1a30              SUBS     r0,r6,r0              ;277
                  |L4.76|
00004c  4681              MOV      r9,r0                 ;277
00004e  9800              LDR      r0,[sp,#0]            ;278
000050  4581              CMP      r9,r0                 ;278
000052  d204              BCS      |L4.94|
000054  f8cd9000          STR      r9,[sp,#0]            ;280
000058  742c              STRB     r4,[r5,#0x10]         ;281
00005a  9801              LDR      r0,[sp,#4]            ;282
00005c  60e8              STR      r0,[r5,#0xc]          ;282
                  |L4.94|
00005e  9801              LDR      r0,[sp,#4]            ;285
000060  42b0              CMP      r0,r6                 ;285
000062  d100              BNE      |L4.102|
000064  e01c              B        |L4.160|
                  |L4.102|
000066  4544              CMP      r4,r8                 ;289
000068  d102              BNE      |L4.112|
00006a  42bc              CMP      r4,r7                 ;289
00006c  d100              BNE      |L4.112|
00006e  e017              B        |L4.160|
                  |L4.112|
000070  9802              LDR      r0,[sp,#8]            ;295
000072  b148              CBZ      r0,|L4.136|
000074  9801              LDR      r0,[sp,#4]            ;297
000076  42b0              CMP      r0,r6                 ;297
000078  d203              BCS      |L4.130|
00007a  1c60              ADDS     r0,r4,#1              ;299
00007c  f00008ff          AND      r8,r0,#0xff           ;299
000080  e00b              B        |L4.154|
                  |L4.130|
000082  1e60              SUBS     r0,r4,#1              ;303
000084  b2c7              UXTB     r7,r0                 ;303
000086  e008              B        |L4.154|
                  |L4.136|
000088  9801              LDR      r0,[sp,#4]            ;308
00008a  42b0              CMP      r0,r6                 ;308
00008c  d202              BCS      |L4.148|
00008e  1e60              SUBS     r0,r4,#1              ;311
000090  b2c7              UXTB     r7,r0                 ;311
000092  e002              B        |L4.154|
                  |L4.148|
000094  1c60              ADDS     r0,r4,#1              ;315
000096  f00008ff          AND      r8,r0,#0xff           ;315
                  |L4.154|
00009a  bf00              NOP                            ;319
                  |L4.156|
00009c  45b8              CMP      r8,r7                 ;270
00009e  ddbc              BLE      |L4.26|
                  |L4.160|
0000a0  bf00              NOP                            ;287
0000a2  2000              MOVS     r0,#0                 ;320
0000a4  e7c8              B        |L4.56|
;;;322    
                          ENDP


                          AREA ||i.lrc_trim||, CODE, READONLY, ALIGN=2

                  lrc_trim PROC
;;;96     //返回频率， 0 表示没有合适的trim值 
;;;97     static fsm_rt_t lrc_trim(void)
000000  b510              PUSH     {r4,lr}
;;;98     {
000002  b08a              SUB      sp,sp,#0x28
;;;99         freq_search_t freq_search_p1;
;;;100        freq_search_t freq_search_p2;
;;;101        freq_search_t* pFreq_search_best = NULL;
000004  2400              MOVS     r4,#0
;;;102        //set_apple_trim_value(ITEM_VBG, BGR_FIX_VAL); 
;;;103        //set_apple_trim_value(ITEM_VBG,BGR_FIX_VAL); 
;;;104        set_apple_debug_out(ITEM_RCL); //32K 注入GPIO3
000006  2005              MOVS     r0,#5
000008  f7fffffe          BL       set_apple_debug_out
;;;105        delay_ms(2);
00000c  2002              MOVS     r0,#2
00000e  f7fffffe          BL       bsp_DelayMS
;;;106     
;;;107        //debug("32K reg value: %d\r\n",read_apple_trim_value(ITEM_RCL));
;;;108        default_measure.rclFreq = pulse_10ms_get(); //rcl_trim_set(trim_result.osc_pmu_trim_default);
000012  f7fffffe          BL       pulse_10ms_get
000016  492a              LDR      r1,|L5.192|
000018  6108              STR      r0,[r1,#0x10]  ; default_measure
;;;109        
;;;110        freq_search_p1.tar          = RCL_TAR;
00001a  f44f40fa          MOV      r0,#0x7d00
00001e  9005              STR      r0,[sp,#0x14]
;;;111        freq_search_p1.trim_val_set = rcl_trim_set;
000020  4828              LDR      r0,|L5.196|
000022  9006              STR      r0,[sp,#0x18]
;;;112        freq_search_p1.dir          = 0;//trim值越大，频率越小
000024  2000              MOVS     r0,#0
000026  f88d0025          STRB     r0,[sp,#0x25]
;;;113        freq_search_p1.trim_val_low = RCL_TRIM_P1_LO;
00002a  f88d001c          STRB     r0,[sp,#0x1c]
;;;114        freq_search_p1.trim_val_hi  = RCL_TRIM_P1_HI;
00002e  201f              MOVS     r0,#0x1f
000030  f88d001d          STRB     r0,[sp,#0x1d]
;;;115        freq_binary_search(&freq_search_p1);
000034  a805              ADD      r0,sp,#0x14
000036  f7fffffe          BL       freq_binary_search
;;;116        
;;;117        freq_search_p2.tar          = RCL_TAR;
00003a  f44f40fa          MOV      r0,#0x7d00
00003e  9000              STR      r0,[sp,#0]
;;;118        freq_search_p2.trim_val_set = rcl_trim_set;
000040  4820              LDR      r0,|L5.196|
000042  9001              STR      r0,[sp,#4]
;;;119        freq_search_p2.dir          = 0;//trim值越大，频率越小
000044  2000              MOVS     r0,#0
000046  f88d0011          STRB     r0,[sp,#0x11]
;;;120        freq_search_p2.trim_val_low = RCL_TRIM_P2_LO;
00004a  2020              MOVS     r0,#0x20
00004c  f88d0008          STRB     r0,[sp,#8]
;;;121        freq_search_p2.trim_val_hi  = RCL_TRIM_P2_HI;
000050  203f              MOVS     r0,#0x3f
000052  f88d0009          STRB     r0,[sp,#9]
;;;122        freq_binary_search(&freq_search_p2);
000056  4668              MOV      r0,sp
000058  f7fffffe          BL       freq_binary_search
;;;123        
;;;124        /* 比较32K两段线性区最佳trim值 */
;;;125        if(  difference(freq_search_p1.best_trim_freq,RCL_TAR) <  difference(freq_search_p2.best_trim_freq,RCL_TAR) )
00005c  f44f41fa          MOV      r1,#0x7d00
000060  9808              LDR      r0,[sp,#0x20]
000062  f7fffffe          BL       difference
000066  4603              MOV      r3,r0
000068  f44f41fa          MOV      r1,#0x7d00
00006c  9803              LDR      r0,[sp,#0xc]
00006e  f7fffffe          BL       difference
000072  4283              CMP      r3,r0
000074  d201              BCS      |L5.122|
;;;126        {
;;;127            pFreq_search_best = &freq_search_p1;
000076  ac05              ADD      r4,sp,#0x14
000078  e000              B        |L5.124|
                  |L5.122|
;;;128        }
;;;129        else
;;;130        {
;;;131            pFreq_search_best = &freq_search_p2;
00007a  466c              MOV      r4,sp
                  |L5.124|
;;;132        }
;;;133        
;;;134        if((pFreq_search_best->best_trim_freq <= RCL_HI)  && (pFreq_search_best->best_trim_freq >= RCL_LO))
00007c  f2483140          MOV      r1,#0x8340
000080  68e0              LDR      r0,[r4,#0xc]
000082  4288              CMP      r0,r1
000084  d811              BHI      |L5.170|
000086  f24761c0          MOV      r1,#0x76c0
00008a  68e0              LDR      r0,[r4,#0xc]
00008c  4288              CMP      r0,r1
00008e  d30c              BCC      |L5.170|
;;;135        {
;;;136            trim_reg_data.rcl_f     = pFreq_search_best->best_trim_val;
000090  7c21              LDRB     r1,[r4,#0x10]
000092  480d              LDR      r0,|L5.200|
000094  6800              LDR      r0,[r0,#0]  ; trim_reg_data
000096  f361208f          BFI      r0,r1,#10,#6
00009a  490b              LDR      r1,|L5.200|
00009c  6008              STR      r0,[r1,#0]  ; trim_reg_data
;;;137            trim_measure.rclFreq    = pFreq_search_best->best_trim_freq;
00009e  490b              LDR      r1,|L5.204|
0000a0  68e0              LDR      r0,[r4,#0xc]
0000a2  6108              STR      r0,[r1,#0x10]  ; trim_measure
;;;138            return fsm_rt_cpl;
0000a4  2000              MOVS     r0,#0
                  |L5.166|
;;;139        }
;;;140        else
;;;141        {
;;;142            logging("fail lrc:%d,%d \r\n", pFreq_search_best->best_trim_val*2, 
;;;143                                           pFreq_search_best->best_trim_freq);
;;;144            
;;;145            return fsm_rt_err_lrc;
;;;146        }
;;;147    }
0000a6  b00a              ADD      sp,sp,#0x28
0000a8  bd10              POP      {r4,pc}
                  |L5.170|
0000aa  7c20              LDRB     r0,[r4,#0x10]         ;142
0000ac  0042              LSLS     r2,r0,#1              ;142
0000ae  4808              LDR      r0,|L5.208|
0000b0  68e3              LDR      r3,[r4,#0xc]          ;142
0000b2  6801              LDR      r1,[r0,#0]            ;142  ; g_iRunTime
0000b4  a007              ADR      r0,|L5.212|
0000b6  f7fffffe          BL       logger_buffer_write
0000ba  f06f000f          MVN      r0,#0xf               ;145
0000be  e7f2              B        |L5.166|
;;;148    
                          ENDP

                  |L5.192|
                          DCD      default_measure
                  |L5.196|
                          DCD      rcl_trim_set
                  |L5.200|
                          DCD      trim_reg_data
                  |L5.204|
                          DCD      trim_measure
                  |L5.208|
                          DCD      g_iRunTime
                  |L5.212|
0000d4  5b253864          DCB      "[%8d]fail lrc:%d,%d \r\n",0
0000d8  5d666169
0000dc  6c206c72
0000e0  633a2564
0000e4  2c256420
0000e8  0d0a00  
0000eb  00                DCB      0

                          AREA ||i.pulse_10ms_get||, CODE, READONLY, ALIGN=1

                  pulse_10ms_get PROC
;;;358    
;;;359    static uint32_t pulse_10ms_get(void)
000000  b510              PUSH     {r4,lr}
;;;360    {
;;;361        uint32_t osc_dev_freq;                                                      //频率
;;;362        
;;;363        pwm_measure_start();                                                        // 启动定时器捕获
000002  f7fffffe          BL       pwm_measure_start
;;;364        set_tick(10000);                                                            //定时20ms
000006  f2427010          MOV      r0,#0x2710
00000a  f7fffffe          BL       set_tick
;;;365        wait_tick();                                                                //等待20ms结束
00000e  f7fffffe          BL       wait_tick
;;;366        osc_dev_freq  = pwm_measure_stop();                                         // 读取计数脉冲值
000012  f7fffffe          BL       pwm_measure_stop
000016  4604              MOV      r4,r0
;;;367        reset_tick();                                                               //复位定时
000018  f7fffffe          BL       reset_tick
;;;368        osc_dev_freq *= 100;                                                         //计算脉冲频率（kiwi分频后）
00001c  2064              MOVS     r0,#0x64
00001e  4344              MULS     r4,r0,r4
;;;369        osc_dev_freq *= 1;                                                          //实际振荡频率
000020  bf00              NOP      
;;;370       
;;;371        return osc_dev_freq;
000022  4620              MOV      r0,r4
;;;372    }
000024  bd10              POP      {r4,pc}
;;;373    #endif
                          ENDP


                          AREA ||i.rch_trim||, CODE, READONLY, ALIGN=2

                  rch_trim PROC
;;;151    //返回频率， 0 表示没有合适的trim值 
;;;152    static fsm_rt_t rch_trim(void)
000000  b500              PUSH     {lr}
;;;153    {
000002  b085              SUB      sp,sp,#0x14
;;;154        freq_search_t freq_search;
;;;155        
;;;156        set_apple_debug_out(ITEM_DBGCLK); //79K 注入GPIO3
000004  203d              MOVS     r0,#0x3d
000006  f7fffffe          BL       set_apple_debug_out
;;;157        default_measure.rchFreq = pulse_10ms_get()*1024; //rcl_trim_set(trim_result.osc_pmu_trim_default);
00000a  f7fffffe          BL       pulse_10ms_get
00000e  0280              LSLS     r0,r0,#10
000010  4919              LDR      r1,|L7.120|
000012  6148              STR      r0,[r1,#0x14]  ; default_measure
;;;158        
;;;159        freq_search.tar          = RCH_TAR;
000014  4819              LDR      r0,|L7.124|
000016  9000              STR      r0,[sp,#0]
;;;160        freq_search.trim_val_set = rch_trim_set;
000018  4819              LDR      r0,|L7.128|
00001a  9001              STR      r0,[sp,#4]
;;;161        freq_search.dir          = 1;//trim值越大，频率越小
00001c  2001              MOVS     r0,#1
00001e  f88d0011          STRB     r0,[sp,#0x11]
;;;162        freq_search.trim_val_low = RCH_TRIM_LO;
000022  2000              MOVS     r0,#0
000024  f88d0008          STRB     r0,[sp,#8]
;;;163        freq_search.trim_val_hi  = RCH_TRIM_HI;
000028  2080              MOVS     r0,#0x80
00002a  f88d0009          STRB     r0,[sp,#9]
;;;164        
;;;165        freq_binary_search(&freq_search);
00002e  4668              MOV      r0,sp
000030  f7fffffe          BL       freq_binary_search
;;;166        
;;;167        
;;;168        if((freq_search.best_trim_freq <= RCH_HI)  && (freq_search.best_trim_freq >= RCH_LO))
000034  4913              LDR      r1,|L7.132|
000036  9803              LDR      r0,[sp,#0xc]
000038  4288              CMP      r0,r1
00003a  d811              BHI      |L7.96|
00003c  4912              LDR      r1,|L7.136|
00003e  9803              LDR      r0,[sp,#0xc]
000040  4288              CMP      r0,r1
000042  d30d              BCC      |L7.96|
;;;169        {
;;;170            trim_reg_data.rch_f     = freq_search.best_trim_val;
000044  f89d1010          LDRB     r1,[sp,#0x10]
000048  4810              LDR      r0,|L7.140|
00004a  6800              LDR      r0,[r0,#0]  ; trim_reg_data
00004c  f361605f          BFI      r0,r1,#25,#7
000050  490e              LDR      r1,|L7.140|
000052  6008              STR      r0,[r1,#0]  ; trim_reg_data
;;;171            trim_measure.rchFreq    = freq_search.best_trim_freq;
000054  490e              LDR      r1,|L7.144|
000056  9803              LDR      r0,[sp,#0xc]
000058  6148              STR      r0,[r1,#0x14]  ; trim_measure
;;;172            return fsm_rt_cpl;
00005a  2000              MOVS     r0,#0
                  |L7.92|
;;;173        }
;;;174        else
;;;175        {
;;;176            logging("fail lrc:%d,%d \r\n", freq_search.best_trim_val*2, 
;;;177                                           freq_search.best_trim_freq);
;;;178            return fsm_rt_err_lrc;
;;;179        }
;;;180    }
00005c  b005              ADD      sp,sp,#0x14
00005e  bd00              POP      {pc}
                  |L7.96|
000060  f89d0010          LDRB     r0,[sp,#0x10]         ;176
000064  0042              LSLS     r2,r0,#1              ;176
000066  480b              LDR      r0,|L7.148|
000068  9b03              LDR      r3,[sp,#0xc]          ;176
00006a  6801              LDR      r1,[r0,#0]            ;176  ; g_iRunTime
00006c  a00a              ADR      r0,|L7.152|
00006e  f7fffffe          BL       logger_buffer_write
000072  f06f000f          MVN      r0,#0xf               ;178
000076  e7f1              B        |L7.92|
;;;181    
                          ENDP

                  |L7.120|
                          DCD      default_measure
                  |L7.124|
                          DCD      0x04c4b400
                  |L7.128|
                          DCD      rch_trim_set
                  |L7.132|
                          DCD      0x04d0e900
                  |L7.136|
                          DCD      0x04b87f00
                  |L7.140|
                          DCD      trim_reg_data
                  |L7.144|
                          DCD      trim_measure
                  |L7.148|
                          DCD      g_iRunTime
                  |L7.152|
000098  5b253864          DCB      "[%8d]fail lrc:%d,%d \r\n",0
00009c  5d666169
0000a0  6c206c72
0000a4  633a2564
0000a8  2c256420
0000ac  0d0a00  
0000af  00                DCB      0

                          AREA ||i.rch_trim_set||, CODE, READONLY, ALIGN=1

                  rch_trim_set PROC
;;;234    //设置trim值，返回频率
;;;235    static int32_t rch_trim_set(uint8_t val, uint32_t* pFreq)
000000  b570              PUSH     {r4-r6,lr}
;;;236    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;237        set_apple_trim_value(ITEM_RCH,val);
000006  4629              MOV      r1,r5
000008  2006              MOVS     r0,#6
00000a  f7fffffe          BL       set_apple_trim_value
;;;238        int32_t err = clk_freq_10ms_get(pFreq);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       clk_freq_10ms_get
000014  4606              MOV      r6,r0
;;;239        *pFreq = 1024*(*pFreq);
000016  6820              LDR      r0,[r4,#0]
000018  0280              LSLS     r0,r0,#10
00001a  6020              STR      r0,[r4,#0]
;;;240        if(err) return -1;
00001c  b116              CBZ      r6,|L8.36|
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L8.34|
;;;241         
;;;242        return 0; 
;;;243    }
000022  bd70              POP      {r4-r6,pc}
                  |L8.36|
000024  2000              MOVS     r0,#0                 ;242
000026  e7fc              B        |L8.34|
;;;244    #else
                          ENDP


                          AREA ||i.rcl_trim_set||, CODE, READONLY, ALIGN=1

                  rcl_trim_set PROC
;;;212    //设置trim值，返回频率
;;;213    static int32_t rcl_trim_set(uint8_t val, uint32_t* pFreq)
000000  b570              PUSH     {r4-r6,lr}
;;;214    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;215         
;;;216        set_apple_trim_value(ITEM_RCL,val);
000006  4621              MOV      r1,r4
000008  2005              MOVS     r0,#5
00000a  f7fffffe          BL       set_apple_trim_value
;;;217     
;;;218        int32_t err = clk_freq_10ms_get(pFreq);
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       clk_freq_10ms_get
000014  4606              MOV      r6,r0
;;;219        if(err) return -1;
000016  b116              CBZ      r6,|L9.30|
000018  f04f30ff          MOV      r0,#0xffffffff
                  |L9.28|
;;;220        return 0; 
;;;221    }
00001c  bd70              POP      {r4-r6,pc}
                  |L9.30|
00001e  2000              MOVS     r0,#0                 ;220
000020  e7fc              B        |L9.28|
;;;222    #else
                          ENDP


                          AREA ||i.test_cmu||, CODE, READONLY, ALIGN=2

                  test_cmu PROC
;;;29     
;;;30     fsm_rt_t test_cmu(void)
000000  b538              PUSH     {r3-r5,lr}
;;;31     {
;;;32         static enum
;;;33         {
;;;34             START = 0,    
;;;35             LRC_TRIM,
;;;36             OSC_TRIM,
;;;37         } s_tState = START;
;;;38         fsm_rt_t ret = fsm_rt_cpl;
000002  2400              MOVS     r4,#0
;;;39     
;;;40         switch(s_tState)
000004  482a              LDR      r0,|L10.176|
000006  7800              LDRB     r0,[r0,#0]  ; s_tState
000008  b120              CBZ      r0,|L10.20|
00000a  2801              CMP      r0,#1
00000c  d008              BEQ      |L10.32|
00000e  2802              CMP      r0,#2
000010  d145              BNE      |L10.158|
000012  e01f              B        |L10.84|
                  |L10.20|
;;;41         {
;;;42         case START:
;;;43             {
;;;44                 //uint8_t temp=0;
;;;45                 //apple_prst();
;;;46                 //apple_write_addr16(APPLE_DEV_ADDR,&temp,PRST_CTL_REG,1);  //不要PRST功能，PRST/GPIO2 用来放出时钟
;;;47                 //bsp_prst_ctl_deinit();
;;;48                 s_tState++;
000014  4826              LDR      r0,|L10.176|
000016  7800              LDRB     r0,[r0,#0]  ; s_tState
000018  1c40              ADDS     r0,r0,#1
00001a  4925              LDR      r1,|L10.176|
00001c  7008              STRB     r0,[r1,#0]
;;;49             }
;;;50             //break;
;;;51         
;;;52          
;;;53         case LRC_TRIM:
00001e  bf00              NOP      
                  |L10.32|
;;;54                do
000020  bf00              NOP      
                  |L10.34|
;;;55                 {
;;;56                     ret = lrc_trim();
000022  f7fffffe          BL       lrc_trim
000026  4604              MOV      r4,r0
;;;57                 }while(ret == fsm_rt_on_going);
000028  2c01              CMP      r4,#1
00002a  d0fa              BEQ      |L10.34|
;;;58                 
;;;59                 if(ret != fsm_rt_cpl) goto fail;
00002c  b104              CBZ      r4,|L10.48|
00002e  e039              B        |L10.164|
                  |L10.48|
;;;60      
;;;61                 logging("SUCCESS rcl:%d,%dHz(%dHz)\r\n", trim_reg_data.rcl_f, 
000030  4820              LDR      r0,|L10.180|
000032  6900              LDR      r0,[r0,#0x10]  ; default_measure
000034  9000              STR      r0,[sp,#0]
000036  4820              LDR      r0,|L10.184|
000038  6903              LDR      r3,[r0,#0x10]  ; trim_measure
00003a  4820              LDR      r0,|L10.188|
00003c  8800              LDRH     r0,[r0,#0]  ; trim_reg_data
00003e  f3c02285          UBFX     r2,r0,#10,#6
000042  481f              LDR      r0,|L10.192|
000044  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000046  a01f              ADR      r0,|L10.196|
000048  f7fffffe          BL       logger_buffer_write
;;;62                                                         trim_measure.rclFreq,default_measure.rclFreq);
;;;63                 s_tState = OSC_TRIM;
00004c  2002              MOVS     r0,#2
00004e  4918              LDR      r1,|L10.176|
000050  7008              STRB     r0,[r1,#0]
;;;64             break;
000052  e024              B        |L10.158|
                  |L10.84|
;;;65             
;;;66         case OSC_TRIM:  // 80M 对应的trim值
;;;67             { 
;;;68                 apple_prst();
000054  2002              MOVS     r0,#2
000056  f7fffffe          BL       socket_prst_ctl
00005a  200a              MOVS     r0,#0xa
00005c  f7fffffe          BL       bsp_DelayMS
000060  2001              MOVS     r0,#1
000062  f7fffffe          BL       socket_prst_ctl
000066  200a              MOVS     r0,#0xa
000068  f7fffffe          BL       bsp_DelayMS
;;;69                 do
00006c  bf00              NOP      
                  |L10.110|
;;;70                 {
;;;71                     ret = rch_trim();
00006e  f7fffffe          BL       rch_trim
000072  4604              MOV      r4,r0
;;;72                 }while(ret == fsm_rt_on_going);
000074  2c01              CMP      r4,#1
000076  d0fa              BEQ      |L10.110|
;;;73                 
;;;74                 if(ret != fsm_rt_cpl) goto fail;
000078  b104              CBZ      r4,|L10.124|
00007a  e013              B        |L10.164|
                  |L10.124|
;;;75     
;;;76                 logging("SUCCESS rch:%d,%dHz(%dHz)\r\n",
00007c  480d              LDR      r0,|L10.180|
00007e  6940              LDR      r0,[r0,#0x14]  ; default_measure
000080  9000              STR      r0,[sp,#0]
000082  480d              LDR      r0,|L10.184|
000084  6943              LDR      r3,[r0,#0x14]  ; trim_measure
000086  480d              LDR      r0,|L10.188|
000088  6800              LDR      r0,[r0,#0]  ; trim_reg_data
00008a  0e42              LSRS     r2,r0,#25
00008c  480c              LDR      r0,|L10.192|
00008e  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000090  a015              ADR      r0,|L10.232|
000092  f7fffffe          BL       logger_buffer_write
;;;77                         trim_reg_data.rch_f,
;;;78                         trim_measure.rchFreq,default_measure.rchFreq);
;;;79                 s_tState = START;
000096  2000              MOVS     r0,#0
000098  4905              LDR      r1,|L10.176|
00009a  7008              STRB     r0,[r1,#0]
                  |L10.156|
;;;80                 return fsm_rt_cpl;
;;;81             }
;;;82             //break;
;;;83         }
;;;84         return fsm_rt_on_going;
;;;85         
;;;86         fail:
;;;87         s_tState = START;
;;;88         return ret;
;;;89     }
00009c  bd38              POP      {r3-r5,pc}
                  |L10.158|
00009e  bf00              NOP                            ;64
0000a0  2001              MOVS     r0,#1                 ;84
0000a2  e7fb              B        |L10.156|
                  |L10.164|
0000a4  2000              MOVS     r0,#0                 ;87
0000a6  4902              LDR      r1,|L10.176|
0000a8  7008              STRB     r0,[r1,#0]            ;87
0000aa  4620              MOV      r0,r4                 ;88
0000ac  e7f6              B        |L10.156|
;;;90     
                          ENDP

0000ae  0000              DCW      0x0000
                  |L10.176|
                          DCD      s_tState
                  |L10.180|
                          DCD      default_measure
                  |L10.184|
                          DCD      trim_measure
                  |L10.188|
                          DCD      trim_reg_data
                  |L10.192|
                          DCD      g_iRunTime
                  |L10.196|
0000c4  5b253864          DCB      "[%8d]SUCCESS rcl:%d,%dHz(%dHz)\r\n",0
0000c8  5d535543
0000cc  43455353
0000d0  2072636c
0000d4  3a25642c
0000d8  2564487a
0000dc  28256448
0000e0  7a290d0a
0000e4  00      
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L10.232|
0000e8  5b253864          DCB      "[%8d]SUCCESS rch:%d,%dHz(%dHz)\r\n",0
0000ec  5d535543
0000f0  43455353
0000f4  20726368
0000f8  3a25642c
0000fc  2564487a
000100  28256448
000104  7a290d0a
000108  00      
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=0

                  s_tState
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\chip_ft\\test_cmu.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_test_cmu_c_test_cmu____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_test_cmu_c_test_cmu____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_test_cmu_c_test_cmu____REVSH|
#line 144
|__asm___10_test_cmu_c_test_cmu____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
