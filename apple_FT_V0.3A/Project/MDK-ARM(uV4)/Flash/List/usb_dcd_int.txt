; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\usb_dcd_int.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\usb_dcd_int.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\usb_dcd_int.crf ..\..\Libraries\STM32_USB_OTG_Driver\src\usb_dcd_int.c]
                          THUMB

                          AREA ||i.DCD_HandleEnumDone_ISR||, CODE, READONLY, ALIGN=1

                  DCD_HandleEnumDone_ISR PROC
;;;766    */
;;;767    static uint32_t DCD_HandleEnumDone_ISR(USB_OTG_CORE_HANDLE *pdev)
000000  b51c              PUSH     {r2-r4,lr}
;;;768    {
000002  4604              MOV      r4,r0
;;;769      USB_OTG_GINTSTS_TypeDef  gintsts;
;;;770      USB_OTG_GUSBCFG_TypeDef  gusbcfg;
;;;771      
;;;772      USB_OTG_EP0Activate(pdev);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       USB_OTG_EP0Activate
;;;773      
;;;774      /* Set USB turn-around time based on device speed and PHY interface. */
;;;775      gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
00000a  68e0              LDR      r0,[r4,#0xc]
00000c  68c0              LDR      r0,[r0,#0xc]
00000e  9000              STR      r0,[sp,#0]
;;;776      
;;;777      /* Full or High speed */
;;;778      if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       USB_OTG_GetDeviceSpeed
000016  2803              CMP      r0,#3
000018  d10b              BNE      |L1.50|
;;;779      {
;;;780        pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
00001a  2000              MOVS     r0,#0
00001c  70a0              STRB     r0,[r4,#2]
;;;781        pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
00001e  f44f7000          MOV      r0,#0x200
000022  80a0              STRH     r0,[r4,#4]
;;;782        gusbcfg.b.usbtrdtim = 9;
000024  9800              LDR      r0,[sp,#0]
000026  f4205070          BIC      r0,r0,#0x3c00
00002a  f5005010          ADD      r0,r0,#0x2400
00002e  9000              STR      r0,[sp,#0]
000030  e009              B        |L1.70|
                  |L1.50|
;;;783      }
;;;784      else
;;;785      {
;;;786        pdev->cfg.speed            = USB_OTG_SPEED_FULL;
000032  2001              MOVS     r0,#1
000034  70a0              STRB     r0,[r4,#2]
;;;787        pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
000036  2040              MOVS     r0,#0x40
000038  80a0              STRH     r0,[r4,#4]
;;;788        gusbcfg.b.usbtrdtim = 5;
00003a  9800              LDR      r0,[sp,#0]
00003c  f4205070          BIC      r0,r0,#0x3c00
000040  f50050a0          ADD      r0,r0,#0x1400
000044  9000              STR      r0,[sp,#0]
                  |L1.70|
;;;789      }
;;;790      
;;;791      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
000046  9800              LDR      r0,[sp,#0]
000048  68e1              LDR      r1,[r4,#0xc]
00004a  60c8              STR      r0,[r1,#0xc]
;;;792      
;;;793      /* Clear interrupt */
;;;794      gintsts.d32 = 0;
00004c  2000              MOVS     r0,#0
00004e  9001              STR      r0,[sp,#4]
;;;795      gintsts.b.enumdone = 1;
000050  9801              LDR      r0,[sp,#4]
000052  f4205000          BIC      r0,r0,#0x2000
000056  f5005000          ADD      r0,r0,#0x2000
00005a  9001              STR      r0,[sp,#4]
;;;796      USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
00005c  9801              LDR      r0,[sp,#4]
00005e  68e1              LDR      r1,[r4,#0xc]
000060  6148              STR      r0,[r1,#0x14]
;;;797      return 1;
000062  2001              MOVS     r0,#1
;;;798    }
000064  bd1c              POP      {r2-r4,pc}
;;;799    
                          ENDP


                          AREA ||i.DCD_HandleInEP_ISR||, CODE, READONLY, ALIGN=2

                  DCD_HandleInEP_ISR PROC
;;;424    */
;;;425    static uint32_t DCD_HandleInEP_ISR(USB_OTG_CORE_HANDLE *pdev)
000000  b5f8              PUSH     {r3-r7,lr}
;;;426    {
000002  4605              MOV      r5,r0
;;;427      USB_OTG_DIEPINTn_TypeDef  diepint;
;;;428      
;;;429      uint32_t ep_intr;
;;;430      uint32_t epnum = 0;
000004  2400              MOVS     r4,#0
;;;431      uint32_t fifoemptymsk;
;;;432      diepint.d32 = 0;
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;433      ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       USB_OTG_ReadDevAllInEPItr
000010  4606              MOV      r6,r0
;;;434      
;;;435      while ( ep_intr )
000012  e090              B        |L2.310|
                  |L2.20|
;;;436      {
;;;437        if (ep_intr&0x1) /* In ITR */
000014  f0060001          AND      r0,r6,#1
000018  2800              CMP      r0,#0
00001a  d07d              BEQ      |L2.280|
;;;438        {
;;;439          diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
00001c  b2e1              UXTB     r1,r4
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       DCD_ReadDevInEP
000024  9000              STR      r0,[sp,#0]
;;;440          if ( diepint.b.xfercompl )
000026  9800              LDR      r0,[sp,#0]
000028  f0000001          AND      r0,r0,#1
00002c  b330              CBZ      r0,|L2.124|
;;;441          {
;;;442            fifoemptymsk = 0x1 << epnum;
00002e  2001              MOVS     r0,#1
000030  fa00f704          LSL      r7,r0,r4
;;;443            USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
000034  6928              LDR      r0,[r5,#0x10]
000036  6b40              LDR      r0,[r0,#0x34]
000038  43b8              BICS     r0,r0,r7
00003a  6929              LDR      r1,[r5,#0x10]
00003c  6348              STR      r0,[r1,#0x34]
;;;444            CLEAR_IN_EP_INTR(epnum, xfercompl);
00003e  2000              MOVS     r0,#0
000040  9000              STR      r0,[sp,#0]
000042  9800              LDR      r0,[sp,#0]
000044  f0200001          BIC      r0,r0,#1
000048  1c40              ADDS     r0,r0,#1
00004a  9000              STR      r0,[sp,#0]
00004c  f1050018          ADD      r0,r5,#0x18
000050  f8500024          LDR      r0,[r0,r4,LSL #2]
000054  9900              LDR      r1,[sp,#0]
000056  6081              STR      r1,[r0,#8]
;;;445            /* TX COMPLETE */
;;;446            USBD_DCD_INT_fops->DataInStage(pdev , epnum);
000058  b2e1              UXTB     r1,r4
00005a  4839              LDR      r0,|L2.320|
00005c  6800              LDR      r0,[r0,#0]  ; USBD_DCD_INT_fops
00005e  6842              LDR      r2,[r0,#4]
000060  4628              MOV      r0,r5
000062  4790              BLX      r2
;;;447            
;;;448            if (pdev->cfg.dma_enable == 1)
000064  78e8              LDRB     r0,[r5,#3]
000066  2801              CMP      r0,#1
000068  d108              BNE      |L2.124|
;;;449            {
;;;450              if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_IN))
00006a  b93c              CBNZ     r4,|L2.124|
00006c  f2401011          MOV      r0,#0x111
000070  5d40              LDRB     r0,[r0,r5]
000072  2804              CMP      r0,#4
000074  d102              BNE      |L2.124|
;;;451              {
;;;452                /* prepare to rx more setup packets */
;;;453                USB_OTG_EP0_OutStart(pdev);
000076  4628              MOV      r0,r5
000078  f7fffffe          BL       USB_OTG_EP0_OutStart
                  |L2.124|
;;;454              }
;;;455            }           
;;;456          }
;;;457          if ( diepint.b.timeout )
00007c  9800              LDR      r0,[sp,#0]
00007e  f3c000c0          UBFX     r0,r0,#3,#1
000082  b160              CBZ      r0,|L2.158|
;;;458          {
;;;459            CLEAR_IN_EP_INTR(epnum, timeout);
000084  2000              MOVS     r0,#0
000086  9000              STR      r0,[sp,#0]
000088  9800              LDR      r0,[sp,#0]
00008a  f0200008          BIC      r0,r0,#8
00008e  3008              ADDS     r0,r0,#8
000090  9000              STR      r0,[sp,#0]
000092  f1050018          ADD      r0,r5,#0x18
000096  f8500024          LDR      r0,[r0,r4,LSL #2]
00009a  9900              LDR      r1,[sp,#0]
00009c  6081              STR      r1,[r0,#8]
                  |L2.158|
;;;460          }
;;;461          if (diepint.b.intktxfemp)
00009e  9800              LDR      r0,[sp,#0]
0000a0  f3c01000          UBFX     r0,r0,#4,#1
0000a4  b160              CBZ      r0,|L2.192|
;;;462          {
;;;463            CLEAR_IN_EP_INTR(epnum, intktxfemp);
0000a6  2000              MOVS     r0,#0
0000a8  9000              STR      r0,[sp,#0]
0000aa  9800              LDR      r0,[sp,#0]
0000ac  f0200010          BIC      r0,r0,#0x10
0000b0  3010              ADDS     r0,r0,#0x10
0000b2  9000              STR      r0,[sp,#0]
0000b4  f1050018          ADD      r0,r5,#0x18
0000b8  f8500024          LDR      r0,[r0,r4,LSL #2]
0000bc  9900              LDR      r1,[sp,#0]
0000be  6081              STR      r1,[r0,#8]
                  |L2.192|
;;;464          }
;;;465          if (diepint.b.inepnakeff)
0000c0  9800              LDR      r0,[sp,#0]
0000c2  f3c01080          UBFX     r0,r0,#6,#1
0000c6  b160              CBZ      r0,|L2.226|
;;;466          {
;;;467            CLEAR_IN_EP_INTR(epnum, inepnakeff);
0000c8  2000              MOVS     r0,#0
0000ca  9000              STR      r0,[sp,#0]
0000cc  9800              LDR      r0,[sp,#0]
0000ce  f0200040          BIC      r0,r0,#0x40
0000d2  3040              ADDS     r0,r0,#0x40
0000d4  9000              STR      r0,[sp,#0]
0000d6  f1050018          ADD      r0,r5,#0x18
0000da  f8500024          LDR      r0,[r0,r4,LSL #2]
0000de  9900              LDR      r1,[sp,#0]
0000e0  6081              STR      r1,[r0,#8]
                  |L2.226|
;;;468          }
;;;469          if ( diepint.b.epdisabled )
0000e2  9800              LDR      r0,[sp,#0]
0000e4  f3c00040          UBFX     r0,r0,#1,#1
0000e8  b160              CBZ      r0,|L2.260|
;;;470          {
;;;471            CLEAR_IN_EP_INTR(epnum, epdisabled);
0000ea  2000              MOVS     r0,#0
0000ec  9000              STR      r0,[sp,#0]
0000ee  9800              LDR      r0,[sp,#0]
0000f0  f0200002          BIC      r0,r0,#2
0000f4  1c80              ADDS     r0,r0,#2
0000f6  9000              STR      r0,[sp,#0]
0000f8  f1050018          ADD      r0,r5,#0x18
0000fc  f8500024          LDR      r0,[r0,r4,LSL #2]
000100  9900              LDR      r1,[sp,#0]
000102  6081              STR      r1,[r0,#8]
                  |L2.260|
;;;472          }       
;;;473          if (diepint.b.emptyintr)
000104  9800              LDR      r0,[sp,#0]
000106  f3c010c0          UBFX     r0,r0,#7,#1
00010a  b128              CBZ      r0,|L2.280|
;;;474          {
;;;475            
;;;476            DCD_WriteEmptyTxFifo(pdev , epnum);
00010c  4621              MOV      r1,r4
00010e  4628              MOV      r0,r5
000110  f7fffffe          BL       DCD_WriteEmptyTxFifo
;;;477            
;;;478            CLEAR_IN_EP_INTR(epnum, emptyintr);
000114  2000              MOVS     r0,#0
000116  e000              B        |L2.282|
                  |L2.280|
000118  e00b              B        |L2.306|
                  |L2.282|
00011a  9000              STR      r0,[sp,#0]
00011c  9800              LDR      r0,[sp,#0]
00011e  f0200080          BIC      r0,r0,#0x80
000122  3080              ADDS     r0,r0,#0x80
000124  9000              STR      r0,[sp,#0]
000126  f1050018          ADD      r0,r5,#0x18
00012a  f8500024          LDR      r0,[r0,r4,LSL #2]
00012e  9900              LDR      r1,[sp,#0]
000130  6081              STR      r1,[r0,#8]
                  |L2.306|
;;;479          }
;;;480        }
;;;481        epnum++;
000132  1c64              ADDS     r4,r4,#1
;;;482        ep_intr >>= 1;
000134  0876              LSRS     r6,r6,#1
                  |L2.310|
000136  2e00              CMP      r6,#0                 ;435
000138  f47faf6c          BNE      |L2.20|
;;;483      }
;;;484      
;;;485      return 1;
00013c  2001              MOVS     r0,#1
;;;486    }
00013e  bdf8              POP      {r3-r7,pc}
;;;487    
                          ENDP

                  |L2.320|
                          DCD      USBD_DCD_INT_fops

                          AREA ||i.DCD_HandleOutEP_ISR||, CODE, READONLY, ALIGN=2

                  DCD_HandleOutEP_ISR PROC
;;;493    */
;;;494    static uint32_t DCD_HandleOutEP_ISR(USB_OTG_CORE_HANDLE *pdev)
000000  b57c              PUSH     {r2-r6,lr}
;;;495    {
000002  4604              MOV      r4,r0
;;;496      uint32_t ep_intr;
;;;497      USB_OTG_DOEPINTn_TypeDef  doepint;
;;;498      USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
;;;499      uint32_t epnum = 0;
000004  2500              MOVS     r5,#0
;;;500      
;;;501      doepint.d32 = 0;
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
;;;502      
;;;503      /* Read in the device interrupt bits */
;;;504      ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USB_OTG_ReadDevAllOutEp_itr
000010  4606              MOV      r6,r0
;;;505      
;;;506      while ( ep_intr )
000012  e06f              B        |L3.244|
                  |L3.20|
;;;507      {
;;;508        if (ep_intr&0x1)
000014  f0060001          AND      r0,r6,#1
000018  2800              CMP      r0,#0
00001a  d069              BEQ      |L3.240|
;;;509        {
;;;510          
;;;511          doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
00001c  b2e9              UXTB     r1,r5
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       USB_OTG_ReadDevOutEP_itr
000024  9001              STR      r0,[sp,#4]
;;;512          
;;;513          /* Transfer complete */
;;;514          if ( doepint.b.xfercompl )
000026  9801              LDR      r0,[sp,#4]
000028  f0000001          AND      r0,r0,#1
00002c  b3c8              CBZ      r0,|L3.162|
;;;515          {
;;;516            /* Clear the bit in DOEPINTn for this interrupt */
;;;517            CLEAR_OUT_EP_INTR(epnum, xfercompl);
00002e  2000              MOVS     r0,#0
000030  9001              STR      r0,[sp,#4]
000032  9801              LDR      r0,[sp,#4]
000034  f0200001          BIC      r0,r0,#1
000038  1c40              ADDS     r0,r0,#1
00003a  9001              STR      r0,[sp,#4]
00003c  f1040054          ADD      r0,r4,#0x54
000040  f8500025          LDR      r0,[r0,r5,LSL #2]
000044  9901              LDR      r1,[sp,#4]
000046  6081              STR      r1,[r0,#8]
;;;518            if (pdev->cfg.dma_enable == 1)
000048  78e0              LDRB     r0,[r4,#3]
00004a  2801              CMP      r0,#1
00004c  d117              BNE      |L3.126|
;;;519            {
;;;520              deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
00004e  f1040054          ADD      r0,r4,#0x54
000052  f8500025          LDR      r0,[r0,r5,LSL #2]
000056  6900              LDR      r0,[r0,#0x10]
000058  9000              STR      r0,[sp,#0]
;;;521              /*ToDo : handle more than one single MPS size packet */
;;;522              pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
00005a  eb050185          ADD      r1,r5,r5,LSL #2
00005e  f504705d          ADD      r0,r4,#0x374
000062  eb0000c1          ADD      r0,r0,r1,LSL #3
000066  6880              LDR      r0,[r0,#8]
000068  9900              LDR      r1,[sp,#0]
00006a  f3c10112          UBFX     r1,r1,#0,#19
00006e  1a41              SUBS     r1,r0,r1
000070  eb050285          ADD      r2,r5,r5,LSL #2
000074  f504705d          ADD      r0,r4,#0x374
000078  eb0000c2          ADD      r0,r0,r2,LSL #3
00007c  6181              STR      r1,[r0,#0x18]
                  |L3.126|
;;;523                deptsiz.b.xfersize;
;;;524            }
;;;525            /* Inform upper layer: data ready */
;;;526            /* RX COMPLETE */
;;;527            USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
00007e  b2e9              UXTB     r1,r5
000080  481e              LDR      r0,|L3.252|
000082  6800              LDR      r0,[r0,#0]  ; USBD_DCD_INT_fops
000084  6802              LDR      r2,[r0,#0]
000086  4620              MOV      r0,r4
000088  4790              BLX      r2
;;;528            
;;;529            if (pdev->cfg.dma_enable == 1)
00008a  78e0              LDRB     r0,[r4,#3]
00008c  2801              CMP      r0,#1
00008e  d108              BNE      |L3.162|
;;;530            {
;;;531              if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_OUT))
000090  b93d              CBNZ     r5,|L3.162|
000092  f2401011          MOV      r0,#0x111
000096  5d00              LDRB     r0,[r0,r4]
000098  2805              CMP      r0,#5
00009a  d102              BNE      |L3.162|
;;;532              {
;;;533                /* prepare to rx more setup packets */
;;;534                USB_OTG_EP0_OutStart(pdev);
00009c  4620              MOV      r0,r4
00009e  f7fffffe          BL       USB_OTG_EP0_OutStart
                  |L3.162|
;;;535              }
;;;536            }        
;;;537          }
;;;538          /* Endpoint disable  */
;;;539          if ( doepint.b.epdisabled )
0000a2  9801              LDR      r0,[sp,#4]
0000a4  f3c00040          UBFX     r0,r0,#1,#1
0000a8  b160              CBZ      r0,|L3.196|
;;;540          {
;;;541            /* Clear the bit in DOEPINTn for this interrupt */
;;;542            CLEAR_OUT_EP_INTR(epnum, epdisabled);
0000aa  2000              MOVS     r0,#0
0000ac  9001              STR      r0,[sp,#4]
0000ae  9801              LDR      r0,[sp,#4]
0000b0  f0200002          BIC      r0,r0,#2
0000b4  1c80              ADDS     r0,r0,#2
0000b6  9001              STR      r0,[sp,#4]
0000b8  f1040054          ADD      r0,r4,#0x54
0000bc  f8500025          LDR      r0,[r0,r5,LSL #2]
0000c0  9901              LDR      r1,[sp,#4]
0000c2  6081              STR      r1,[r0,#8]
                  |L3.196|
;;;543          }
;;;544          /* Setup Phase Done (control EPs) */
;;;545          if ( doepint.b.setup )
0000c4  9801              LDR      r0,[sp,#4]
0000c6  f3c000c0          UBFX     r0,r0,#3,#1
0000ca  b188              CBZ      r0,|L3.240|
;;;546          {
;;;547            
;;;548            /* inform the upper layer that a setup packet is available */
;;;549            /* SETUP COMPLETE */
;;;550            USBD_DCD_INT_fops->SetupStage(pdev);
0000cc  480b              LDR      r0,|L3.252|
0000ce  6800              LDR      r0,[r0,#0]  ; USBD_DCD_INT_fops
0000d0  6881              LDR      r1,[r0,#8]
0000d2  4620              MOV      r0,r4
0000d4  4788              BLX      r1
;;;551            CLEAR_OUT_EP_INTR(epnum, setup);
0000d6  2000              MOVS     r0,#0
0000d8  9001              STR      r0,[sp,#4]
0000da  9801              LDR      r0,[sp,#4]
0000dc  f0200008          BIC      r0,r0,#8
0000e0  3008              ADDS     r0,r0,#8
0000e2  9001              STR      r0,[sp,#4]
0000e4  f1040054          ADD      r0,r4,#0x54
0000e8  f8500025          LDR      r0,[r0,r5,LSL #2]
0000ec  9901              LDR      r1,[sp,#4]
0000ee  6081              STR      r1,[r0,#8]
                  |L3.240|
;;;552          }
;;;553        }
;;;554        epnum++;
0000f0  1c6d              ADDS     r5,r5,#1
;;;555        ep_intr >>= 1;
0000f2  0876              LSRS     r6,r6,#1
                  |L3.244|
0000f4  2e00              CMP      r6,#0                 ;506
0000f6  d18d              BNE      |L3.20|
;;;556      }
;;;557      return 1;
0000f8  2001              MOVS     r0,#1
;;;558    }
0000fa  bd7c              POP      {r2-r6,pc}
;;;559    
                          ENDP

                  |L3.252|
                          DCD      USBD_DCD_INT_fops

                          AREA ||i.DCD_HandleResume_ISR||, CODE, READONLY, ALIGN=2

                  DCD_HandleResume_ISR PROC
;;;347    */
;;;348    static uint32_t DCD_HandleResume_ISR(USB_OTG_CORE_HANDLE *pdev)
000000  b53e              PUSH     {r1-r5,lr}
;;;349    {
000002  4604              MOV      r4,r0
;;;350      USB_OTG_GINTSTS_TypeDef  gintsts;
;;;351      USB_OTG_DCTL_TypeDef     devctl;
;;;352      USB_OTG_PCGCCTL_TypeDef  power;
;;;353      
;;;354      if(pdev->cfg.low_power)
000004  7aa0              LDRB     r0,[r4,#0xa]
000006  b170              CBZ      r0,|L4.38|
;;;355      {
;;;356        /* un-gate USB Core clock */
;;;357        power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
000008  f8d4010c          LDR      r0,[r4,#0x10c]
00000c  9000              STR      r0,[sp,#0]
;;;358        power.b.gatehclk = 0;
00000e  9800              LDR      r0,[sp,#0]
000010  f0200002          BIC      r0,r0,#2
000014  9000              STR      r0,[sp,#0]
;;;359        power.b.stoppclk = 0;
000016  9800              LDR      r0,[sp,#0]
000018  f0200001          BIC      r0,r0,#1
00001c  9000              STR      r0,[sp,#0]
;;;360        USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
00001e  9900              LDR      r1,[sp,#0]
000020  f8d4010c          LDR      r0,[r4,#0x10c]
000024  6001              STR      r1,[r0,#0]
                  |L4.38|
;;;361      }
;;;362      
;;;363      /* Clear the Remote Wake-up Signaling */
;;;364      devctl.d32 = 0;
000026  2000              MOVS     r0,#0
000028  9001              STR      r0,[sp,#4]
;;;365      devctl.b.rmtwkupsig = 1;
00002a  9801              LDR      r0,[sp,#4]
00002c  f0200001          BIC      r0,r0,#1
000030  1c40              ADDS     r0,r0,#1
000032  9001              STR      r0,[sp,#4]
;;;366      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
000034  6920              LDR      r0,[r4,#0x10]
000036  6840              LDR      r0,[r0,#4]
000038  9901              LDR      r1,[sp,#4]
00003a  4388              BICS     r0,r0,r1
00003c  6921              LDR      r1,[r4,#0x10]
00003e  6048              STR      r0,[r1,#4]
;;;367      
;;;368      /* Inform upper layer by the Resume Event */
;;;369      USBD_DCD_INT_fops->Resume (pdev);
000040  4808              LDR      r0,|L4.100|
000042  6800              LDR      r0,[r0,#0]  ; USBD_DCD_INT_fops
000044  6981              LDR      r1,[r0,#0x18]
000046  4620              MOV      r0,r4
000048  4788              BLX      r1
;;;370      
;;;371      /* Clear interrupt */
;;;372      gintsts.d32 = 0;
00004a  2000              MOVS     r0,#0
00004c  9002              STR      r0,[sp,#8]
;;;373      gintsts.b.wkupintr = 1;
00004e  9802              LDR      r0,[sp,#8]
000050  f0204000          BIC      r0,r0,#0x80000000
000054  f1004000          ADD      r0,r0,#0x80000000
000058  9002              STR      r0,[sp,#8]
;;;374      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
00005a  9802              LDR      r0,[sp,#8]
00005c  68e1              LDR      r1,[r4,#0xc]
00005e  6148              STR      r0,[r1,#0x14]
;;;375      return 1;
000060  2001              MOVS     r0,#1
;;;376    }
000062  bd3e              POP      {r1-r5,pc}
;;;377    
                          ENDP

                  |L4.100|
                          DCD      USBD_DCD_INT_fops

                          AREA ||i.DCD_HandleRxStatusQueueLevel_ISR||, CODE, READONLY, ALIGN=1

                  DCD_HandleRxStatusQueueLevel_ISR PROC
;;;586    */
;;;587    static uint32_t DCD_HandleRxStatusQueueLevel_ISR(USB_OTG_CORE_HANDLE *pdev)
000000  b57c              PUSH     {r2-r6,lr}
;;;588    {
000002  4604              MOV      r4,r0
;;;589      USB_OTG_GINTMSK_TypeDef  int_mask;
;;;590      USB_OTG_DRXSTS_TypeDef   status;
;;;591      USB_OTG_EP *ep;
;;;592      
;;;593      /* Disable the Rx Status Queue Level interrupt */
;;;594      int_mask.d32 = 0;
000004  2000              MOVS     r0,#0
000006  9001              STR      r0,[sp,#4]
;;;595      int_mask.b.rxstsqlvl = 1;
000008  9801              LDR      r0,[sp,#4]
00000a  f0200010          BIC      r0,r0,#0x10
00000e  3010              ADDS     r0,r0,#0x10
000010  9001              STR      r0,[sp,#4]
;;;596      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
000012  68e0              LDR      r0,[r4,#0xc]
000014  6980              LDR      r0,[r0,#0x18]
000016  9901              LDR      r1,[sp,#4]
000018  4388              BICS     r0,r0,r1
00001a  68e1              LDR      r1,[r4,#0xc]
00001c  6188              STR      r0,[r1,#0x18]
;;;597      
;;;598      /* Get the Status from the top of the FIFO */
;;;599      status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
00001e  68e0              LDR      r0,[r4,#0xc]
000020  6a00              LDR      r0,[r0,#0x20]
000022  9000              STR      r0,[sp,#0]
;;;600      
;;;601      ep = &pdev->dev.out_ep[status.b.epnum];
000024  9800              LDR      r0,[sp,#0]
000026  f000000f          AND      r0,r0,#0xf
00002a  eb000180          ADD      r1,r0,r0,LSL #2
00002e  f504705d          ADD      r0,r4,#0x374
000032  eb0005c1          ADD      r5,r0,r1,LSL #3
;;;602      
;;;603      switch (status.b.pktsts)
000036  9800              LDR      r0,[sp,#0]
000038  f3c04043          UBFX     r0,r0,#17,#4
00003c  2807              CMP      r0,#7
00003e  d22d              BCS      |L5.156|
000040  e8dff000          TBB      [pc,r0]
000044  2c04051d          DCB      0x2c,0x04,0x05,0x1d
000048  1e2c1f00          DCB      0x1e,0x2c,0x1f,0x00
;;;604      {
;;;605      case STS_GOUT_NAK:
;;;606        break;
00004c  e027              B        |L5.158|
;;;607      case STS_DATA_UPDT:
;;;608        if (status.b.bcnt)
00004e  9800              LDR      r0,[sp,#0]
000050  f3c0100a          UBFX     r0,r0,#4,#11
000054  b190              CBZ      r0,|L5.124|
;;;609        {
;;;610          USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
000056  9800              LDR      r0,[sp,#0]
000058  f3c0120a          UBFX     r2,r0,#4,#11
00005c  4620              MOV      r0,r4
00005e  68e9              LDR      r1,[r5,#0xc]
000060  f7fffffe          BL       USB_OTG_ReadPacket
;;;611          ep->xfer_buff += status.b.bcnt;
000064  68e8              LDR      r0,[r5,#0xc]
000066  9900              LDR      r1,[sp,#0]
000068  f3c1110a          UBFX     r1,r1,#4,#11
00006c  4408              ADD      r0,r0,r1
00006e  60e8              STR      r0,[r5,#0xc]
;;;612          ep->xfer_count += status.b.bcnt;
000070  69a8              LDR      r0,[r5,#0x18]
000072  9900              LDR      r1,[sp,#0]
000074  f3c1110a          UBFX     r1,r1,#4,#11
000078  4408              ADD      r0,r0,r1
00007a  61a8              STR      r0,[r5,#0x18]
                  |L5.124|
;;;613        }
;;;614        break;
00007c  e00f              B        |L5.158|
;;;615      case STS_XFER_COMP:
;;;616        break;
00007e  e00e              B        |L5.158|
;;;617      case STS_SETUP_COMP:
;;;618        break;
000080  e00d              B        |L5.158|
;;;619      case STS_SETUP_UPDT:
;;;620        /* Copy the setup packet received in FIFO into the setup buffer in RAM */
;;;621        USB_OTG_ReadPacket(pdev , pdev->dev.setup_packet, 8);
000082  2208              MOVS     r2,#8
000084  f20451cc          ADD      r1,r4,#0x5cc
000088  4620              MOV      r0,r4
00008a  f7fffffe          BL       USB_OTG_ReadPacket
;;;622        ep->xfer_count += status.b.bcnt;
00008e  69a8              LDR      r0,[r5,#0x18]
000090  9900              LDR      r1,[sp,#0]
000092  f3c1110a          UBFX     r1,r1,#4,#11
000096  4408              ADD      r0,r0,r1
000098  61a8              STR      r0,[r5,#0x18]
;;;623        break;
00009a  e000              B        |L5.158|
                  |L5.156|
;;;624      default:
;;;625        break;
00009c  bf00              NOP      
                  |L5.158|
00009e  bf00              NOP                            ;606
;;;626      }
;;;627      
;;;628      /* Enable the Rx Status Queue Level interrupt */
;;;629      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
0000a0  68e0              LDR      r0,[r4,#0xc]
0000a2  6980              LDR      r0,[r0,#0x18]
0000a4  9901              LDR      r1,[sp,#4]
0000a6  4308              ORRS     r0,r0,r1
0000a8  68e1              LDR      r1,[r4,#0xc]
0000aa  6188              STR      r0,[r1,#0x18]
;;;630      
;;;631      return 1;
0000ac  2001              MOVS     r0,#1
;;;632    }
0000ae  bd7c              POP      {r2-r6,pc}
;;;633    
                          ENDP


                          AREA ||i.DCD_HandleSof_ISR||, CODE, READONLY, ALIGN=2

                  DCD_HandleSof_ISR PROC
;;;565    */
;;;566    static uint32_t DCD_HandleSof_ISR(USB_OTG_CORE_HANDLE *pdev)
000000  b538              PUSH     {r3-r5,lr}
;;;567    {
000002  4604              MOV      r4,r0
;;;568      USB_OTG_GINTSTS_TypeDef  GINTSTS;
;;;569      
;;;570      
;;;571      USBD_DCD_INT_fops->SOF(pdev);
000004  4808              LDR      r0,|L6.40|
000006  6800              LDR      r0,[r0,#0]  ; USBD_DCD_INT_fops
000008  68c1              LDR      r1,[r0,#0xc]
00000a  4620              MOV      r0,r4
00000c  4788              BLX      r1
;;;572      
;;;573      /* Clear interrupt */
;;;574      GINTSTS.d32 = 0;
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
;;;575      GINTSTS.b.sofintr = 1;
000012  9800              LDR      r0,[sp,#0]
000014  f0200008          BIC      r0,r0,#8
000018  3008              ADDS     r0,r0,#8
00001a  9000              STR      r0,[sp,#0]
;;;576      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
00001c  9800              LDR      r0,[sp,#0]
00001e  68e1              LDR      r1,[r4,#0xc]
000020  6148              STR      r0,[r1,#0x14]
;;;577      
;;;578      return 1;
000022  2001              MOVS     r0,#1
;;;579    }
000024  bd38              POP      {r3-r5,pc}
;;;580    
                          ENDP

000026  0000              DCW      0x0000
                  |L6.40|
                          DCD      USBD_DCD_INT_fops

                          AREA ||i.DCD_HandleUSBSuspend_ISR||, CODE, READONLY, ALIGN=2

                  DCD_HandleUSBSuspend_ISR PROC
;;;383    */
;;;384    static uint32_t DCD_HandleUSBSuspend_ISR(USB_OTG_CORE_HANDLE *pdev)
000000  b51f              PUSH     {r0-r4,lr}
;;;385    {
000002  4604              MOV      r4,r0
;;;386      USB_OTG_GINTSTS_TypeDef  gintsts;
;;;387      USB_OTG_PCGCCTL_TypeDef  power;
;;;388      USB_OTG_DSTS_TypeDef     dsts;
;;;389      __IO uint8_t prev_status = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;390      
;;;391      prev_status = pdev->dev.device_status;
000008  f44f7089          MOV      r0,#0x112
00000c  5d00              LDRB     r0,[r0,r4]
00000e  9000              STR      r0,[sp,#0]
;;;392      USBD_DCD_INT_fops->Suspend (pdev);      
000010  4823              LDR      r0,|L7.160|
000012  6800              LDR      r0,[r0,#0]  ; USBD_DCD_INT_fops
000014  6941              LDR      r1,[r0,#0x14]
000016  4620              MOV      r0,r4
000018  4788              BLX      r1
;;;393      
;;;394      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
00001a  6920              LDR      r0,[r4,#0x10]
00001c  6880              LDR      r0,[r0,#8]
00001e  9001              STR      r0,[sp,#4]
;;;395        
;;;396      /* Clear interrupt */
;;;397      gintsts.d32 = 0;
000020  2000              MOVS     r0,#0
000022  9003              STR      r0,[sp,#0xc]
;;;398      gintsts.b.usbsuspend = 1;
000024  9803              LDR      r0,[sp,#0xc]
000026  f4206000          BIC      r0,r0,#0x800
00002a  f5006000          ADD      r0,r0,#0x800
00002e  9003              STR      r0,[sp,#0xc]
;;;399      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
000030  9803              LDR      r0,[sp,#0xc]
000032  68e1              LDR      r1,[r4,#0xc]
000034  6148              STR      r0,[r1,#0x14]
;;;400      
;;;401      if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
000036  7aa0              LDRB     r0,[r4,#0xa]
000038  b370              CBZ      r0,|L7.152|
00003a  9801              LDR      r0,[sp,#4]
00003c  f0000001          AND      r0,r0,#1
000040  b350              CBZ      r0,|L7.152|
;;;402        (pdev->dev.connection_status == 1) && 
000042  f2401015          MOV      r0,#0x115
000046  5d00              LDRB     r0,[r0,r4]
000048  2801              CMP      r0,#1
00004a  d125              BNE      |L7.152|
;;;403        (prev_status  == USB_OTG_CONFIGURED))
00004c  f89d0000          LDRB     r0,[sp,#0]
000050  2803              CMP      r0,#3
000052  d121              BNE      |L7.152|
;;;404      {
;;;405    	/*  switch-off the clocks */
;;;406        power.d32 = 0;
000054  2000              MOVS     r0,#0
000056  9002              STR      r0,[sp,#8]
;;;407        power.b.stoppclk = 1;
000058  9802              LDR      r0,[sp,#8]
00005a  f0200001          BIC      r0,r0,#1
00005e  1c40              ADDS     r0,r0,#1
000060  9002              STR      r0,[sp,#8]
;;;408        USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
000062  f8d4010c          LDR      r0,[r4,#0x10c]
000066  6800              LDR      r0,[r0,#0]
000068  9902              LDR      r1,[sp,#8]
00006a  4308              ORRS     r0,r0,r1
00006c  f8d4110c          LDR      r1,[r4,#0x10c]
000070  6008              STR      r0,[r1,#0]
;;;409        
;;;410        power.b.gatehclk = 1;
000072  9802              LDR      r0,[sp,#8]
000074  f0200002          BIC      r0,r0,#2
000078  1c80              ADDS     r0,r0,#2
00007a  9002              STR      r0,[sp,#8]
;;;411        USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
00007c  f8d4010c          LDR      r0,[r4,#0x10c]
000080  6800              LDR      r0,[r0,#0]
000082  9902              LDR      r1,[sp,#8]
000084  4308              ORRS     r0,r0,r1
000086  f8d4110c          LDR      r1,[r4,#0x10c]
00008a  6008              STR      r0,[r1,#0]
;;;412        
;;;413        /* Request to enter Sleep mode after exit from current ISR */
;;;414        SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
00008c  4805              LDR      r0,|L7.164|
00008e  6800              LDR      r0,[r0,#0]
000090  f0400006          ORR      r0,r0,#6
000094  4903              LDR      r1,|L7.164|
000096  6008              STR      r0,[r1,#0]
                  |L7.152|
;;;415      }
;;;416      return 1;
000098  2001              MOVS     r0,#1
;;;417    }
00009a  b004              ADD      sp,sp,#0x10
00009c  bd10              POP      {r4,pc}
;;;418    
                          ENDP

00009e  0000              DCW      0x0000
                  |L7.160|
                          DCD      USBD_DCD_INT_fops
                  |L7.164|
                          DCD      0xe000ed10

                          AREA ||i.DCD_HandleUsbReset_ISR||, CODE, READONLY, ALIGN=2

                  DCD_HandleUsbReset_ISR PROC
;;;691    */
;;;692    static uint32_t DCD_HandleUsbReset_ISR(USB_OTG_CORE_HANDLE *pdev)
000000  b530              PUSH     {r4,r5,lr}
;;;693    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
;;;694      USB_OTG_DAINT_TypeDef    daintmsk;
;;;695      USB_OTG_DOEPMSK_TypeDef  doepmsk;
;;;696      USB_OTG_DIEPMSK_TypeDef  diepmsk;
;;;697      USB_OTG_DCFG_TypeDef     dcfg;
;;;698      USB_OTG_DCTL_TypeDef     dctl;
;;;699      USB_OTG_GINTSTS_TypeDef  gintsts;
;;;700      uint32_t i;
;;;701      
;;;702      dctl.d32 = 0;
000006  2000              MOVS     r0,#0
000008  9002              STR      r0,[sp,#8]
;;;703      daintmsk.d32 = 0;
00000a  9006              STR      r0,[sp,#0x18]
;;;704      doepmsk.d32 = 0;
00000c  9005              STR      r0,[sp,#0x14]
;;;705      diepmsk.d32 = 0;
00000e  9004              STR      r0,[sp,#0x10]
;;;706      dcfg.d32 = 0;
000010  9003              STR      r0,[sp,#0xc]
;;;707      gintsts.d32 = 0;
000012  9001              STR      r0,[sp,#4]
;;;708      
;;;709      /* Clear the Remote Wake-up Signaling */
;;;710      dctl.b.rmtwkupsig = 1;
000014  9802              LDR      r0,[sp,#8]
000016  f0200001          BIC      r0,r0,#1
00001a  1c40              ADDS     r0,r0,#1
00001c  9002              STR      r0,[sp,#8]
;;;711      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
00001e  6920              LDR      r0,[r4,#0x10]
000020  6840              LDR      r0,[r0,#4]
000022  9902              LDR      r1,[sp,#8]
000024  4388              BICS     r0,r0,r1
000026  6921              LDR      r1,[r4,#0x10]
000028  6048              STR      r0,[r1,#4]
;;;712      
;;;713      /* Flush the Tx FIFO */
;;;714      USB_OTG_FlushTxFifo(pdev ,  0 );
00002a  2100              MOVS     r1,#0
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       USB_OTG_FlushTxFifo
;;;715      
;;;716      for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
000032  2500              MOVS     r5,#0
000034  e00b              B        |L8.78|
                  |L8.54|
;;;717      {
;;;718        USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
000036  21ff              MOVS     r1,#0xff
000038  f1040018          ADD      r0,r4,#0x18
00003c  f8500025          LDR      r0,[r0,r5,LSL #2]
000040  6081              STR      r1,[r0,#8]
;;;719        USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
000042  f1040054          ADD      r0,r4,#0x54
000046  f8500025          LDR      r0,[r0,r5,LSL #2]
00004a  6081              STR      r1,[r0,#8]
00004c  1c6d              ADDS     r5,r5,#1              ;716
                  |L8.78|
00004e  7860              LDRB     r0,[r4,#1]            ;716
000050  42a8              CMP      r0,r5                 ;716
000052  d8f0              BHI      |L8.54|
;;;720      }
;;;721      USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
000054  f04f31ff          MOV      r1,#0xffffffff
000058  6920              LDR      r0,[r4,#0x10]
00005a  6181              STR      r1,[r0,#0x18]
;;;722      
;;;723      daintmsk.ep.in = 1;
00005c  9806              LDR      r0,[sp,#0x18]
00005e  f36f000f          BFC      r0,#0,#16
000062  1c40              ADDS     r0,r0,#1
000064  9006              STR      r0,[sp,#0x18]
;;;724      daintmsk.ep.out = 1;
000066  9806              LDR      r0,[sp,#0x18]
000068  b280              UXTH     r0,r0
00006a  f5003080          ADD      r0,r0,#0x10000
00006e  9006              STR      r0,[sp,#0x18]
;;;725      USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
000070  9906              LDR      r1,[sp,#0x18]
000072  6920              LDR      r0,[r4,#0x10]
000074  61c1              STR      r1,[r0,#0x1c]
;;;726      
;;;727      doepmsk.b.setup = 1;
000076  9805              LDR      r0,[sp,#0x14]
000078  f0200008          BIC      r0,r0,#8
00007c  3008              ADDS     r0,r0,#8
00007e  9005              STR      r0,[sp,#0x14]
;;;728      doepmsk.b.xfercompl = 1;
000080  9805              LDR      r0,[sp,#0x14]
000082  f0200001          BIC      r0,r0,#1
000086  1c40              ADDS     r0,r0,#1
000088  9005              STR      r0,[sp,#0x14]
;;;729      doepmsk.b.epdisabled = 1;
00008a  9805              LDR      r0,[sp,#0x14]
00008c  f0200002          BIC      r0,r0,#2
000090  1c80              ADDS     r0,r0,#2
000092  9005              STR      r0,[sp,#0x14]
;;;730      USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );
000094  9905              LDR      r1,[sp,#0x14]
000096  6920              LDR      r0,[r4,#0x10]
000098  6141              STR      r1,[r0,#0x14]
;;;731    #ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED   
;;;732      USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOUTEP1MSK, doepmsk.d32 );
;;;733    #endif
;;;734      diepmsk.b.xfercompl = 1;
00009a  9804              LDR      r0,[sp,#0x10]
00009c  f0200001          BIC      r0,r0,#1
0000a0  1c40              ADDS     r0,r0,#1
0000a2  9004              STR      r0,[sp,#0x10]
;;;735      diepmsk.b.timeout = 1;
0000a4  9804              LDR      r0,[sp,#0x10]
0000a6  f0200008          BIC      r0,r0,#8
0000aa  3008              ADDS     r0,r0,#8
0000ac  9004              STR      r0,[sp,#0x10]
;;;736      diepmsk.b.epdisabled = 1;
0000ae  9804              LDR      r0,[sp,#0x10]
0000b0  f0200002          BIC      r0,r0,#2
0000b4  1c80              ADDS     r0,r0,#2
0000b6  9004              STR      r0,[sp,#0x10]
;;;737    
;;;738      USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, diepmsk.d32 );
0000b8  9904              LDR      r1,[sp,#0x10]
0000ba  6920              LDR      r0,[r4,#0x10]
0000bc  6101              STR      r1,[r0,#0x10]
;;;739    #ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED  
;;;740      USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DINEP1MSK, diepmsk.d32 );
;;;741    #endif
;;;742      /* Reset Device Address */
;;;743      dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
0000be  6920              LDR      r0,[r4,#0x10]
0000c0  6800              LDR      r0,[r0,#0]
0000c2  9003              STR      r0,[sp,#0xc]
;;;744      dcfg.b.devaddr = 0;
0000c4  9803              LDR      r0,[sp,#0xc]
0000c6  f42060fe          BIC      r0,r0,#0x7f0
0000ca  9003              STR      r0,[sp,#0xc]
;;;745      USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32);
0000cc  9903              LDR      r1,[sp,#0xc]
0000ce  6920              LDR      r0,[r4,#0x10]
0000d0  6001              STR      r1,[r0,#0]
;;;746      
;;;747      
;;;748      /* setup EP0 to receive SETUP packets */
;;;749      USB_OTG_EP0_OutStart(pdev);
0000d2  4620              MOV      r0,r4
0000d4  f7fffffe          BL       USB_OTG_EP0_OutStart
;;;750      
;;;751      /* Clear interrupt */
;;;752      gintsts.d32 = 0;
0000d8  2000              MOVS     r0,#0
0000da  9001              STR      r0,[sp,#4]
;;;753      gintsts.b.usbreset = 1;
0000dc  9801              LDR      r0,[sp,#4]
0000de  f4205080          BIC      r0,r0,#0x1000
0000e2  f5005080          ADD      r0,r0,#0x1000
0000e6  9001              STR      r0,[sp,#4]
;;;754      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
0000e8  9801              LDR      r0,[sp,#4]
0000ea  68e1              LDR      r1,[r4,#0xc]
0000ec  6148              STR      r0,[r1,#0x14]
;;;755      
;;;756      /*Reset internal state machine */
;;;757      USBD_DCD_INT_fops->Reset(pdev);
0000ee  4804              LDR      r0,|L8.256|
0000f0  6800              LDR      r0,[r0,#0]  ; USBD_DCD_INT_fops
0000f2  6901              LDR      r1,[r0,#0x10]
0000f4  4620              MOV      r0,r4
0000f6  4788              BLX      r1
;;;758      return 1;
0000f8  2001              MOVS     r0,#1
;;;759    }
0000fa  b007              ADD      sp,sp,#0x1c
0000fc  bd30              POP      {r4,r5,pc}
;;;760    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L8.256|
                          DCD      USBD_DCD_INT_fops

                          AREA ||i.DCD_IsoINIncomplete_ISR||, CODE, READONLY, ALIGN=2

                  DCD_IsoINIncomplete_ISR PROC
;;;806    */
;;;807    static uint32_t DCD_IsoINIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
000000  b538              PUSH     {r3-r5,lr}
;;;808    {
000002  4604              MOV      r4,r0
;;;809      USB_OTG_GINTSTS_TypeDef gintsts;  
;;;810      
;;;811      gintsts.d32 = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;812    
;;;813      USBD_DCD_INT_fops->IsoINIncomplete (pdev); 
000008  4807              LDR      r0,|L9.40|
00000a  6800              LDR      r0,[r0,#0]  ; USBD_DCD_INT_fops
00000c  69c1              LDR      r1,[r0,#0x1c]
00000e  4620              MOV      r0,r4
000010  4788              BLX      r1
;;;814      
;;;815      /* Clear interrupt */
;;;816      gintsts.b.incomplisoin = 1;
000012  9800              LDR      r0,[sp,#0]
000014  f4201080          BIC      r0,r0,#0x100000
000018  f5001080          ADD      r0,r0,#0x100000
00001c  9000              STR      r0,[sp,#0]
;;;817      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
00001e  9800              LDR      r0,[sp,#0]
000020  68e1              LDR      r1,[r4,#0xc]
000022  6148              STR      r0,[r1,#0x14]
;;;818      
;;;819      return 1;
000024  2001              MOVS     r0,#1
;;;820    }
000026  bd38              POP      {r3-r5,pc}
;;;821    
                          ENDP

                  |L9.40|
                          DCD      USBD_DCD_INT_fops

                          AREA ||i.DCD_IsoOUTIncomplete_ISR||, CODE, READONLY, ALIGN=2

                  DCD_IsoOUTIncomplete_ISR PROC
;;;827    */
;;;828    static uint32_t DCD_IsoOUTIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
000000  b538              PUSH     {r3-r5,lr}
;;;829    {
000002  4604              MOV      r4,r0
;;;830      USB_OTG_GINTSTS_TypeDef gintsts;  
;;;831      
;;;832      gintsts.d32 = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;833    
;;;834      USBD_DCD_INT_fops->IsoOUTIncomplete (pdev); 
000008  4807              LDR      r0,|L10.40|
00000a  6800              LDR      r0,[r0,#0]  ; USBD_DCD_INT_fops
00000c  6a01              LDR      r1,[r0,#0x20]
00000e  4620              MOV      r0,r4
000010  4788              BLX      r1
;;;835      
;;;836      /* Clear interrupt */
;;;837      gintsts.b.incomplisoout = 1;
000012  9800              LDR      r0,[sp,#0]
000014  f4201000          BIC      r0,r0,#0x200000
000018  f5001000          ADD      r0,r0,#0x200000
00001c  9000              STR      r0,[sp,#0]
;;;838      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
00001e  9800              LDR      r0,[sp,#0]
000020  68e1              LDR      r1,[r4,#0xc]
000022  6148              STR      r0,[r1,#0x14]
;;;839      return 1;
000024  2001              MOVS     r0,#1
;;;840    }
000026  bd38              POP      {r3-r5,pc}
;;;841    /**
                          ENDP

                  |L10.40|
                          DCD      USBD_DCD_INT_fops

                          AREA ||i.DCD_ReadDevInEP||, CODE, READONLY, ALIGN=1

                  DCD_ReadDevInEP PROC
;;;846    */
;;;847    static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
000000  b530              PUSH     {r4,r5,lr}
;;;848    {
000002  4602              MOV      r2,r0
;;;849      uint32_t v, msk, emp;
;;;850      msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
000004  6915              LDR      r5,[r2,#0x10]
000006  692b              LDR      r3,[r5,#0x10]
;;;851      emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
000008  6915              LDR      r5,[r2,#0x10]
00000a  6b6c              LDR      r4,[r5,#0x34]
;;;852      msk |= ((emp >> epnum) & 0x1) << 7;
00000c  fa24f501          LSR      r5,r4,r1
000010  f0050501          AND      r5,r5,#1
000014  ea4313c5          ORR      r3,r3,r5,LSL #7
;;;853      v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
000018  f1020518          ADD      r5,r2,#0x18
00001c  f8555021          LDR      r5,[r5,r1,LSL #2]
000020  68ad              LDR      r5,[r5,#8]
000022  ea050003          AND      r0,r5,r3
;;;854      return v;
;;;855    }
000026  bd30              POP      {r4,r5,pc}
;;;856    
                          ENDP


                          AREA ||i.DCD_WriteEmptyTxFifo||, CODE, READONLY, ALIGN=1

                  DCD_WriteEmptyTxFifo PROC
;;;639    */
;;;640    static uint32_t DCD_WriteEmptyTxFifo(USB_OTG_CORE_HANDLE *pdev, uint32_t epnum)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;641    {
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
;;;642      USB_OTG_DTXFSTSn_TypeDef  txstatus;
;;;643      USB_OTG_EP *ep;
;;;644      uint32_t len = 0;
000008  2500              MOVS     r5,#0
;;;645      uint32_t len32b;
;;;646      txstatus.d32 = 0;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;647      
;;;648      ep = &pdev->dev.in_ep[epnum];    
00000e  eb060186          ADD      r1,r6,r6,LSL #2
000012  f507708e          ADD      r0,r7,#0x11c
000016  eb0004c1          ADD      r4,r0,r1,LSL #3
;;;649      
;;;650      len = ep->xfer_len - ep->xfer_count;
00001a  e9d40105          LDRD     r0,r1,[r4,#0x14]
00001e  1a45              SUBS     r5,r0,r1
;;;651      
;;;652      if (len > ep->maxpacket)
000020  68a0              LDR      r0,[r4,#8]
000022  42a8              CMP      r0,r5
000024  d200              BCS      |L12.40|
;;;653      {
;;;654        len = ep->maxpacket;
000026  68a5              LDR      r5,[r4,#8]
                  |L12.40|
;;;655      }
;;;656      
;;;657      len32b = (len + 3) / 4;
000028  1ce8              ADDS     r0,r5,#3
00002a  ea4f0890          LSR      r8,r0,#2
;;;658      txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
00002e  f1070018          ADD      r0,r7,#0x18
000032  f8500026          LDR      r0,[r0,r6,LSL #2]
000036  6980              LDR      r0,[r0,#0x18]
000038  9000              STR      r0,[sp,#0]
;;;659      
;;;660      
;;;661      
;;;662      while  (txstatus.b.txfspcavail > len32b &&
00003a  e01b              B        |L12.116|
                  |L12.60|
;;;663              ep->xfer_count < ep->xfer_len &&
;;;664                ep->xfer_len != 0)
;;;665      {
;;;666        /* Write the FIFO */
;;;667        len = ep->xfer_len - ep->xfer_count;
00003c  e9d40105          LDRD     r0,r1,[r4,#0x14]
000040  1a45              SUBS     r5,r0,r1
;;;668        
;;;669        if (len > ep->maxpacket)
000042  68a0              LDR      r0,[r4,#8]
000044  42a8              CMP      r0,r5
000046  d200              BCS      |L12.74|
;;;670        {
;;;671          len = ep->maxpacket;
000048  68a5              LDR      r5,[r4,#8]
                  |L12.74|
;;;672        }
;;;673        len32b = (len + 3) / 4;
00004a  1ce8              ADDS     r0,r5,#3
00004c  ea4f0890          LSR      r8,r0,#2
;;;674        
;;;675        USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
000050  b2ab              UXTH     r3,r5
000052  b2f2              UXTB     r2,r6
000054  4638              MOV      r0,r7
000056  68e1              LDR      r1,[r4,#0xc]
000058  f7fffffe          BL       USB_OTG_WritePacket
;;;676        
;;;677        ep->xfer_buff  += len;
00005c  68e0              LDR      r0,[r4,#0xc]
00005e  4428              ADD      r0,r0,r5
000060  60e0              STR      r0,[r4,#0xc]
;;;678        ep->xfer_count += len;
000062  69a0              LDR      r0,[r4,#0x18]
000064  4428              ADD      r0,r0,r5
000066  61a0              STR      r0,[r4,#0x18]
;;;679        
;;;680        txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
000068  f1070018          ADD      r0,r7,#0x18
00006c  f8500026          LDR      r0,[r0,r6,LSL #2]
000070  6980              LDR      r0,[r0,#0x18]
000072  9000              STR      r0,[sp,#0]
                  |L12.116|
000074  9800              LDR      r0,[sp,#0]            ;662
000076  b280              UXTH     r0,r0                 ;662
000078  4540              CMP      r0,r8                 ;662
00007a  d906              BLS      |L12.138|
00007c  e9d41005          LDRD     r1,r0,[r4,#0x14]      ;663
000080  4288              CMP      r0,r1                 ;663
000082  d202              BCS      |L12.138|
000084  6960              LDR      r0,[r4,#0x14]         ;664
000086  2800              CMP      r0,#0                 ;664
000088  d1d8              BNE      |L12.60|
                  |L12.138|
;;;681      }
;;;682      
;;;683      return 1;
00008a  2001              MOVS     r0,#1
;;;684    }
00008c  e8bd83f8          POP      {r3-r9,pc}
;;;685    
                          ENDP


                          AREA ||i.USBD_OTG_ISR_Handler||, CODE, READONLY, ALIGN=1

                  USBD_OTG_ISR_Handler PROC
;;;210    */
;;;211    uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
000000  b57c              PUSH     {r2-r6,lr}
;;;212    {
000002  4605              MOV      r5,r0
;;;213      USB_OTG_GINTSTS_TypeDef  gintr_status;
;;;214      uint32_t retval = 0;
000004  2400              MOVS     r4,#0
;;;215      
;;;216      if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       USB_OTG_IsDeviceMode
00000c  2800              CMP      r0,#0
00000e  d065              BEQ      |L13.220|
;;;217      {
;;;218        gintr_status.d32 = USB_OTG_ReadCoreItr(pdev);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       USB_OTG_ReadCoreItr
000016  9001              STR      r0,[sp,#4]
;;;219        if (!gintr_status.d32) /* avoid spurious interrupt */
000018  9801              LDR      r0,[sp,#4]
00001a  b908              CBNZ     r0,|L13.32|
;;;220        {
;;;221          return 0;
00001c  2000              MOVS     r0,#0
                  |L13.30|
;;;222        }
;;;223        
;;;224        if (gintr_status.b.outepintr)
;;;225        {
;;;226          retval |= DCD_HandleOutEP_ISR(pdev);
;;;227        }    
;;;228        
;;;229        if (gintr_status.b.inepint)
;;;230        {
;;;231          retval |= DCD_HandleInEP_ISR(pdev);
;;;232        }
;;;233        
;;;234        if (gintr_status.b.modemismatch)
;;;235        {
;;;236          USB_OTG_GINTSTS_TypeDef  gintsts;
;;;237          
;;;238          /* Clear interrupt */
;;;239          gintsts.d32 = 0;
;;;240          gintsts.b.modemismatch = 1;
;;;241          USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
;;;242        }
;;;243        
;;;244        if (gintr_status.b.wkupintr)
;;;245        {
;;;246          retval |= DCD_HandleResume_ISR(pdev);
;;;247        }
;;;248        
;;;249        if (gintr_status.b.usbsuspend)
;;;250        {
;;;251          retval |= DCD_HandleUSBSuspend_ISR(pdev);
;;;252        }
;;;253        if (gintr_status.b.sofintr)
;;;254        {
;;;255          retval |= DCD_HandleSof_ISR(pdev);
;;;256          
;;;257        }
;;;258        
;;;259        if (gintr_status.b.rxstsqlvl)
;;;260        {
;;;261          retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
;;;262          
;;;263        }
;;;264        
;;;265        if (gintr_status.b.usbreset)
;;;266        {
;;;267          retval |= DCD_HandleUsbReset_ISR(pdev);
;;;268          
;;;269        }
;;;270        if (gintr_status.b.enumdone)
;;;271        {
;;;272          retval |= DCD_HandleEnumDone_ISR(pdev);
;;;273        }
;;;274        
;;;275        if (gintr_status.b.incomplisoin)
;;;276        {
;;;277          retval |= DCD_IsoINIncomplete_ISR(pdev);
;;;278        }
;;;279    
;;;280        if (gintr_status.b.incomplisoout)
;;;281        {
;;;282          retval |= DCD_IsoOUTIncomplete_ISR(pdev);
;;;283        }    
;;;284    #ifdef VBUS_SENSING_ENABLED
;;;285        if (gintr_status.b.sessreqintr)
;;;286        {
;;;287          retval |= DCD_SessionRequest_ISR(pdev);
;;;288        }
;;;289    
;;;290        if (gintr_status.b.otgintr)
;;;291        {
;;;292          retval |= DCD_OTG_ISR(pdev);
;;;293        }   
;;;294    #endif    
;;;295      }
;;;296      return retval;
;;;297    }
00001e  bd7c              POP      {r2-r6,pc}
                  |L13.32|
000020  9801              LDR      r0,[sp,#4]            ;224
000022  f3c040c0          UBFX     r0,r0,#19,#1          ;224
000026  b118              CBZ      r0,|L13.48|
000028  4628              MOV      r0,r5                 ;226
00002a  f7fffffe          BL       DCD_HandleOutEP_ISR
00002e  4304              ORRS     r4,r4,r0              ;226
                  |L13.48|
000030  9801              LDR      r0,[sp,#4]            ;229
000032  f3c04080          UBFX     r0,r0,#18,#1          ;229
000036  b118              CBZ      r0,|L13.64|
000038  4628              MOV      r0,r5                 ;231
00003a  f7fffffe          BL       DCD_HandleInEP_ISR
00003e  4304              ORRS     r4,r4,r0              ;231
                  |L13.64|
000040  9801              LDR      r0,[sp,#4]            ;234
000042  f3c00040          UBFX     r0,r0,#1,#1           ;234
000046  b150              CBZ      r0,|L13.94|
000048  2000              MOVS     r0,#0                 ;239
00004a  9000              STR      r0,[sp,#0]            ;239
00004c  9800              LDR      r0,[sp,#0]            ;240
00004e  f0200002          BIC      r0,r0,#2              ;240
000052  1c80              ADDS     r0,r0,#2              ;240
000054  9000              STR      r0,[sp,#0]            ;240
000056  9800              LDR      r0,[sp,#0]            ;241
000058  68e9              LDR      r1,[r5,#0xc]          ;241
00005a  6148              STR      r0,[r1,#0x14]         ;241
00005c  bf00              NOP                            ;242
                  |L13.94|
00005e  9801              LDR      r0,[sp,#4]            ;244
000060  0fc0              LSRS     r0,r0,#31             ;244
000062  b118              CBZ      r0,|L13.108|
000064  4628              MOV      r0,r5                 ;246
000066  f7fffffe          BL       DCD_HandleResume_ISR
00006a  4304              ORRS     r4,r4,r0              ;246
                  |L13.108|
00006c  9801              LDR      r0,[sp,#4]            ;249
00006e  f3c020c0          UBFX     r0,r0,#11,#1          ;249
000072  b118              CBZ      r0,|L13.124|
000074  4628              MOV      r0,r5                 ;251
000076  f7fffffe          BL       DCD_HandleUSBSuspend_ISR
00007a  4304              ORRS     r4,r4,r0              ;251
                  |L13.124|
00007c  9801              LDR      r0,[sp,#4]            ;253
00007e  f3c000c0          UBFX     r0,r0,#3,#1           ;253
000082  b118              CBZ      r0,|L13.140|
000084  4628              MOV      r0,r5                 ;255
000086  f7fffffe          BL       DCD_HandleSof_ISR
00008a  4304              ORRS     r4,r4,r0              ;255
                  |L13.140|
00008c  9801              LDR      r0,[sp,#4]            ;259
00008e  f3c01000          UBFX     r0,r0,#4,#1           ;259
000092  b118              CBZ      r0,|L13.156|
000094  4628              MOV      r0,r5                 ;261
000096  f7fffffe          BL       DCD_HandleRxStatusQueueLevel_ISR
00009a  4304              ORRS     r4,r4,r0              ;261
                  |L13.156|
00009c  9801              LDR      r0,[sp,#4]            ;265
00009e  f3c03000          UBFX     r0,r0,#12,#1          ;265
0000a2  b118              CBZ      r0,|L13.172|
0000a4  4628              MOV      r0,r5                 ;267
0000a6  f7fffffe          BL       DCD_HandleUsbReset_ISR
0000aa  4304              ORRS     r4,r4,r0              ;267
                  |L13.172|
0000ac  9801              LDR      r0,[sp,#4]            ;270
0000ae  f3c03040          UBFX     r0,r0,#13,#1          ;270
0000b2  b118              CBZ      r0,|L13.188|
0000b4  4628              MOV      r0,r5                 ;272
0000b6  f7fffffe          BL       DCD_HandleEnumDone_ISR
0000ba  4304              ORRS     r4,r4,r0              ;272
                  |L13.188|
0000bc  9801              LDR      r0,[sp,#4]            ;275
0000be  f3c05000          UBFX     r0,r0,#20,#1          ;275
0000c2  b118              CBZ      r0,|L13.204|
0000c4  4628              MOV      r0,r5                 ;277
0000c6  f7fffffe          BL       DCD_IsoINIncomplete_ISR
0000ca  4304              ORRS     r4,r4,r0              ;277
                  |L13.204|
0000cc  9801              LDR      r0,[sp,#4]            ;280
0000ce  f3c05040          UBFX     r0,r0,#21,#1          ;280
0000d2  b118              CBZ      r0,|L13.220|
0000d4  4628              MOV      r0,r5                 ;282
0000d6  f7fffffe          BL       DCD_IsoOUTIncomplete_ISR
0000da  4304              ORRS     r4,r4,r0              ;282
                  |L13.220|
0000dc  4620              MOV      r0,r4                 ;296
0000de  e79e              B        |L13.30|
;;;298    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\Libraries\\STM32_USB_OTG_Driver\\src\\usb_dcd_int.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_usb_dcd_int_c_1bde28d0____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_usb_dcd_int_c_1bde28d0____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_usb_dcd_int_c_1bde28d0____REVSH|
#line 144
|__asm___13_usb_dcd_int_c_1bde28d0____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
