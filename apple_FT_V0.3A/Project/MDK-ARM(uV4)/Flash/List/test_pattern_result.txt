; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\test_pattern_result.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\test_pattern_result.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\BERRY_TWI -I..\..\User\berry_ft -I..\..\User\ft_support -I..\..\User\berry_test -I..\..\User\factory_test -I..\..\User\emenu -I..\..\User\kiwi_ft -I..\..\User\kiwi_ft\spv40 -I..\..\User\kiwi_ft\spv40\peripheral -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\kiwi_ft -I..\..\User\MultiButton-1.1.0 -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.16.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\test_pattern_result.crf ..\..\User\kiwi_ft\test_pattern_result.c]
                          THUMB

                          AREA ||i.osc_audio_trim_spl_set||, CODE, READONLY, ALIGN=2

                  osc_audio_trim_spl_set PROC
;;;375     
;;;376    fsm_rt_t osc_audio_trim_spl_set(uint8_t val)
000000  b538              PUSH     {r3-r5,lr}
;;;377    {
000002  4605              MOV      r5,r0
;;;378        fsm_rt_t ret;
;;;379        uint8_t osc_audio_cfg[2]={val,7};//[0]:trim值  [1]:放出时钟的引脚
000004  a007              ADR      r0,|L1.36|
000006  6800              LDR      r0,[r0,#0]
000008  9000              STR      r0,[sp,#0]
00000a  f88d5000          STRB     r5,[sp,#0]
;;;380        do
00000e  bf00              NOP      
                  |L1.16|
;;;381        { 
;;;382            ret = online_update_sm(0xF2,2,osc_audio_cfg);
000010  466a              MOV      r2,sp
000012  2102              MOVS     r1,#2
000014  20f2              MOVS     r0,#0xf2
000016  f7fffffe          BL       online_update_sm
00001a  4604              MOV      r4,r0
;;;383        }while(ret == fsm_rt_on_going);
00001c  2c01              CMP      r4,#1
00001e  d0f7              BEQ      |L1.16|
;;;384        return ret; 
000020  4620              MOV      r0,r4
;;;385    }
000022  bd38              POP      {r3-r5,pc}
;;;386    
                          ENDP

                  |L1.36|
000024  00                DCB      0
000025  0700              DCB      "\a",0
000027  00                DCB      0

                          AREA ||i.pattern_test_state||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  pattern_test_state PROC
;;;82     
;;;83     fsm_rt_t pattern_test_state(void)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;84     {
;;;85         static enum
;;;86         {
;;;87             START = 0,
;;;88             OSC_AUDIO_TRIM,
;;;89      
;;;90             TEST_IO_S1,
;;;91             TEST_IO_S2,
;;;92             TEST_I2C,
;;;93             TEST_UART,
;;;94             TEST_EN,
;;;95             TEST_QUERY,
;;;96             READ_EFUSE, 
;;;97             WRITE_EFUSE, 
;;;98             IS_KIWI_RUN_PATTERN_CPL,
;;;99         } s_tState = START;
;;;100        fsm_rt_t ret;
;;;101        static uint8_t read_twice_flg=0;
;;;102        static uint8_t test_item;
;;;103    
;;;104        switch(s_tState)
000004  48e1              LDR      r0,|L2.908|
000006  7800              LDRB     r0,[r0,#0]  ; s_tState
000008  280b              CMP      r0,#0xb
00000a  d244              BCS      |L2.150|
00000c  e8dff000          TBB      [pc,r0]
000010  061a4456          DCB      0x06,0x1a,0x44,0x56
000014  687a8c9b          DCB      0x68,0x7a,0x8c,0x9b
000018  f3f2f100          DCB      0xf3,0xf2,0xf1,0x00
;;;105        {
;;;106        case START:
;;;107            if(!is_test_item(run_kiwi_pattern_item)) return fsm_rt_cpl;
00001c  2004              MOVS     r0,#4
00001e  f7fffffe          BL       is_test_item
000022  b910              CBNZ     r0,|L2.42|
000024  2000              MOVS     r0,#0
                  |L2.38|
;;;108            test_en.all = 0;
;;;109            read_twice_flg = 0;
;;;110            test_item = 0;
;;;111            s_tState++;
;;;112            //break;
;;;113    
;;;114        case OSC_AUDIO_TRIM:
;;;115            {
;;;116                extern fsm_rt_t osc_audio_trim(void);
;;;117               
;;;118                if( is_test_item(cmu_osc_audio_item) )    
;;;119                {
;;;120                    do
;;;121                    {
;;;122                        ret = osc_audio_trim();
;;;123                    }while(ret == fsm_rt_on_going);
;;;124    
;;;125                    if(ret != fsm_rt_cpl)
;;;126                    {
;;;127                        s_tState = START;
;;;128                        return ret;
;;;129                    }
;;;130                    logging("SUCCESS Oaduio:%d,%d(%d,%d)\r\n", trim_result.osc_audio_trim_val, 
;;;131                                    trim_result.osc_audio_trim_freq,
;;;132                                    trim_result.osc_audio_trim_default,
;;;133                                    trim_result.osc_audio_trim_freq_default);
;;;134                } 
;;;135                else 
;;;136                {
;;;137                    logging("INFO skip Oaudio!\r\n");
;;;138                }
;;;139                
;;;140       
;;;141                #if TEST_IO_EN
;;;142                s_tState = TEST_QUERY;
;;;143                #else 
;;;144                s_tState = READ_EFUSE;
;;;145                #endif
;;;146                
;;;147               
;;;148                
;;;149            }
;;;150            break;
;;;151            
;;;152        case TEST_IO_S1:
;;;153            {
;;;154                test_en.io_s1 = 1;  
;;;155                bsp_ch440r_ctrl_ex(CH440R_EX_CTRL_IO_S1);
;;;156                test_item   = s_tState;  
;;;157                s_tState    = TEST_EN;
;;;158            }
;;;159            break;
;;;160            
;;;161        case TEST_IO_S2:
;;;162            {
;;;163                test_en.io_s2 = 1;   
;;;164                bsp_ch440r_ctrl_ex(CH440R_EX_CTRL_IO_S2);
;;;165                test_item   = s_tState; 
;;;166                s_tState    = TEST_EN;
;;;167            }
;;;168            break;
;;;169            
;;;170        case TEST_I2C:
;;;171            {
;;;172                test_en.i2c = 1;
;;;173                bsp_ch440r_ctrl_ex(CH440R_EX_CTRL_I2C);
;;;174                test_item   = s_tState; 
;;;175                s_tState    = TEST_EN;
;;;176            }
;;;177            break;
;;;178            
;;;179        case TEST_UART:
;;;180            {
;;;181                test_en.uart = 1;
;;;182                bsp_ch440r_ctrl_ex(CH440R_EX_CTRL_UART);
;;;183                test_item   = s_tState;
;;;184                s_tState    = TEST_EN;
;;;185            }
;;;186            break;
;;;187            
;;;188        case TEST_EN:
;;;189            do
;;;190            { 
;;;191                ret = online_update_sm(0xF0,4,(uint8_t*)&test_en);
;;;192            }while(ret == fsm_rt_on_going);
;;;193            if(ret != fsm_rt_cpl )
;;;194            {
;;;195                goto fail;
;;;196            }
;;;197            s_tState = TEST_QUERY;
;;;198            break;
;;;199                
;;;200       
;;;201        case TEST_QUERY: //查询测试结果
;;;202            {
;;;203                if(test_item == 0) //初始
;;;204                {
;;;205                    s_tState = TEST_IO_S1;
;;;206                }
;;;207                else
;;;208                {
;;;209                    
;;;210                    do
;;;211                    { 
;;;212                       ret = online_update_sm(0xF1,0,NULL);
;;;213                    }while(ret == fsm_rt_on_going);
;;;214                    if(ret != fsm_rt_cpl ) { goto fail; }
;;;215     
;;;216                    uint16_t test_done = msg_recv.msg_body.content[0] | 
;;;217                                        (msg_recv.msg_body.content[1] << 8);
;;;218                    uint16_t test_fail = msg_recv.msg_body.content[2] | 
;;;219                                        (msg_recv.msg_body.content[3] << 8);
;;;220                    uint32_t test_fail_info = msg_recv.msg_body.content[4]        | 
;;;221                                             (msg_recv.msg_body.content[5] << 8)  |
;;;222                                             (msg_recv.msg_body.content[6] << 16) |
;;;223                                             (msg_recv.msg_body.content[7] << 24);
;;;224                    
;;;225                    
;;;226                    if((test_item == TEST_IO_S1)   && (test_done & 0x01))
;;;227                    {
;;;228                        s_tState = TEST_IO_S2;
;;;229                        if(test_fail & 0x01)
;;;230                        {
;;;231                            ret = fsm_rt_err_io_s1;
;;;232                            logging("fail_io_num:0x%x\r\n",test_fail_info);
;;;233                            goto fail;
;;;234                        }
;;;235                    }
;;;236                    else if((test_item == TEST_IO_S2)   && (test_done & 0x02))
;;;237                    {
;;;238                        s_tState = READ_EFUSE;
;;;239                        if(test_fail & 0x02)
;;;240                        {
;;;241                            ret = fsm_rt_err_io_s2;
;;;242                            logging("fail_io_num:0x%x\r\n",test_fail_info);
;;;243                            goto fail;
;;;244                        }
;;;245                        logging("SUCCESS IO test\r\n");
;;;246                    }
;;;247                    else if((test_item == TEST_I2C)   && (test_done & 0x04))
;;;248                    {
;;;249                        s_tState = TEST_I2C;
;;;250                        if(test_fail & 0x04)
;;;251                        {
;;;252                            ret = fsm_rt_err_i2c;
;;;253                            goto fail;
;;;254                        }
;;;255                    }
;;;256                    else if((test_item == TEST_UART)   && (test_done & 0x08))
;;;257                    {
;;;258                        s_tState = TEST_UART;
;;;259                        if(test_fail & 0x08)
;;;260                        {
;;;261                            ret = fsm_rt_err_uart;
;;;262                            goto fail;
;;;263                        }
;;;264                    }
;;;265                }  
;;;266            }
;;;267            break;
;;;268    
;;;269        case READ_EFUSE:
;;;270            {
;;;271                //debug("READ_EFUSE\r\n");
;;;272                //uint32_t efuse_post[8];
;;;273                do
;;;274                { 
;;;275                   ret = online_update_sm(0xF3,0,NULL);
;;;276                }while(ret == fsm_rt_on_going);
;;;277                if(ret != fsm_rt_cpl ) 
;;;278                {
;;;279                    s_tState = START;
;;;280                    return ret; 
;;;281                }
;;;282                uint8_t var = sizeof(efuse_pre_data.word_table);
;;;283                memcpy(efuse_pre_data.word_table,(uint8_t*)&msg_recv.msg_body.content[0],var);
;;;284                debug("read  efuse value:");
;;;285                for(uint8_t i=0; i<8; i++)
;;;286                {
;;;287                    debug("[%d]0x%08x  ",i,efuse_pre_data.word_table[i]);
;;;288                }
;;;289                debug("\r\n");
;;;290               
;;;291                read_twice_flg++;
;;;292                if(read_twice_flg == 2)
;;;293                {
;;;294                    s_tState = START;
;;;295                    return fsm_rt_cpl;
;;;296                }
;;;297                else
;;;298                {
;;;299                    if(memcmp(efuse_pre_data.word_table,efuse_otp_data_brom.word_table,var) != 0)
;;;300                    {
;;;301                        ret = fsm_rt_err_efuse_otp_cmp;
;;;302                        goto fail;
;;;303                    }
;;;304                    s_tState = WRITE_EFUSE;
;;;305                } 
;;;306            }
;;;307            break;
;;;308            
;;;309        case WRITE_EFUSE:
;;;310            {
;;;311                if(!is_test_item(efuse_write_item)) 
;;;312                {
;;;313                    trim_result_to_efuse(&efuse_post_data);
;;;314                    debug("write efuse value:");
;;;315                    for(uint8_t i=0; i<8; i++)
;;;316                    {
;;;317                        debug("[%d]0x%08x  ",i,efuse_post_data.word_table[i]);
;;;318                    }
;;;319                    debug("\r\n");
;;;320                    logging("INFO skip efuse write!\r\n");
;;;321                    //return fsm_rt_cpl;
;;;322                }
;;;323                else
;;;324                {
;;;325                    //debug("WRITE_EFUSE\r\n");
;;;326                    for(uint8_t i=0; i<8; i++)
;;;327                    {
;;;328                        efuse_post_data.word_table[i] = efuse_pre_data.word_table[i];
;;;329                    }
;;;330                    
;;;331                    trim_result_to_efuse(&efuse_post_data);
;;;332                    
;;;333                    #if 0
;;;334                    do
;;;335                    { 
;;;336                       ret = online_update_sm(0xF4,sizeof(efuse_post_data.word_table),(uint8_t*)efuse_post_data.word_table);
;;;337                    }while(ret == fsm_rt_on_going);
;;;338                    if(ret != fsm_rt_cpl ) return ret; 
;;;339                    #else
;;;340                    do
;;;341                    {
;;;342                        ret = spl_efuse_write(&efuse_post_data);
;;;343                    }while(ret == fsm_rt_on_going);
;;;344                    if(ret != fsm_rt_cpl ) 
;;;345                    {
;;;346                        s_tState = START;
;;;347                        return ret;
;;;348                    } 
;;;349                    #endif
;;;350                   
;;;351                    debug("write efuse value:");
;;;352                    for(uint8_t i=0; i<8; i++)
;;;353                    {
;;;354                        debug("[%d]0x%08x  ",i,efuse_post_data.word_table[i]);
;;;355                    }
;;;356                    debug("\r\n");
;;;357                }
;;;358                s_tState = READ_EFUSE; 
;;;359            }
;;;360            break;
;;;361            
;;;362        case IS_KIWI_RUN_PATTERN_CPL:
;;;363            {
;;;364                s_tState = START;
;;;365            }
;;;366            break;
;;;367        }
;;;368        return fsm_rt_on_going;
;;;369        
;;;370        fail:
;;;371        s_tState = START;
;;;372        return ret;
;;;373    }
000026  e8bd81fc          POP      {r2-r8,pc}
                  |L2.42|
00002a  2000              MOVS     r0,#0                 ;108
00002c  49d8              LDR      r1,|L2.912|
00002e  6008              STR      r0,[r1,#0]            ;108  ; test_en
000030  49d8              LDR      r1,|L2.916|
000032  7008              STRB     r0,[r1,#0]            ;109
000034  49d8              LDR      r1,|L2.920|
000036  7008              STRB     r0,[r1,#0]            ;110
000038  48d4              LDR      r0,|L2.908|
00003a  7800              LDRB     r0,[r0,#0]            ;111  ; s_tState
00003c  1c40              ADDS     r0,r0,#1              ;111
00003e  49d3              LDR      r1,|L2.908|
000040  7008              STRB     r0,[r1,#0]            ;111
000042  bf00              NOP                            ;114
000044  2001              MOVS     r0,#1                 ;118
000046  f7fffffe          BL       is_test_item
00004a  b1e0              CBZ      r0,|L2.134|
00004c  bf00              NOP                            ;120
                  |L2.78|
00004e  f7fffffe          BL       osc_audio_trim
000052  4604              MOV      r4,r0                 ;122
000054  2c01              CMP      r4,#1                 ;123
000056  d0fa              BEQ      |L2.78|
000058  b124              CBZ      r4,|L2.100|
00005a  2000              MOVS     r0,#0                 ;127
00005c  49cb              LDR      r1,|L2.908|
00005e  7008              STRB     r0,[r1,#0]            ;127
000060  4620              MOV      r0,r4                 ;128
000062  e7e0              B        |L2.38|
                  |L2.100|
000064  48cd              LDR      r0,|L2.924|
000066  6a80              LDR      r0,[r0,#0x28]         ;130  ; trim_result
000068  49cc              LDR      r1,|L2.924|
00006a  f8911022          LDRB     r1,[r1,#0x22]         ;130  ; trim_result
00006e  e9cd1000          STRD     r1,r0,[sp,#0]         ;130
000072  48ca              LDR      r0,|L2.924|
000074  6a43              LDR      r3,[r0,#0x24]         ;130  ; trim_result
000076  f8902020          LDRB     r2,[r0,#0x20]         ;130  ; trim_result
00007a  48c9              LDR      r0,|L2.928|
00007c  6801              LDR      r1,[r0,#0]            ;130  ; g_iRunTime
00007e  a0c9              ADR      r0,|L2.932|
000080  f7fffffe          BL       logger_buffer_write
000084  e004              B        |L2.144|
                  |L2.134|
000086  48c6              LDR      r0,|L2.928|
000088  6801              LDR      r1,[r0,#0]            ;137  ; g_iRunTime
00008a  a0cf              ADR      r0,|L2.968|
00008c  f7fffffe          BL       logger_buffer_write
                  |L2.144|
000090  2007              MOVS     r0,#7                 ;142
000092  49be              LDR      r1,|L2.908|
000094  7008              STRB     r0,[r1,#0]            ;142
                  |L2.150|
000096  e171              B        |L2.892|
000098  48bd              LDR      r0,|L2.912|
00009a  6800              LDR      r0,[r0,#0]            ;154  ; test_en
00009c  f0200001          BIC      r0,r0,#1              ;154
0000a0  1c40              ADDS     r0,r0,#1              ;154
0000a2  49bb              LDR      r1,|L2.912|
0000a4  6008              STR      r0,[r1,#0]            ;154  ; test_en
0000a6  2004              MOVS     r0,#4                 ;155
0000a8  f7fffffe          BL       bsp_ch440r_ctrl_ex
0000ac  48b7              LDR      r0,|L2.908|
0000ae  7800              LDRB     r0,[r0,#0]            ;156  ; s_tState
0000b0  49b9              LDR      r1,|L2.920|
0000b2  7008              STRB     r0,[r1,#0]            ;156
0000b4  2006              MOVS     r0,#6                 ;157
0000b6  49b5              LDR      r1,|L2.908|
0000b8  7008              STRB     r0,[r1,#0]            ;157
0000ba  e15f              B        |L2.892|
0000bc  48b4              LDR      r0,|L2.912|
0000be  6800              LDR      r0,[r0,#0]            ;163  ; test_en
0000c0  f0200002          BIC      r0,r0,#2              ;163
0000c4  1c80              ADDS     r0,r0,#2              ;163
0000c6  49b2              LDR      r1,|L2.912|
0000c8  6008              STR      r0,[r1,#0]            ;163  ; test_en
0000ca  2010              MOVS     r0,#0x10              ;164
0000cc  f7fffffe          BL       bsp_ch440r_ctrl_ex
0000d0  48ae              LDR      r0,|L2.908|
0000d2  7800              LDRB     r0,[r0,#0]            ;165  ; s_tState
0000d4  49b0              LDR      r1,|L2.920|
0000d6  7008              STRB     r0,[r1,#0]            ;165
0000d8  2006              MOVS     r0,#6                 ;166
0000da  49ac              LDR      r1,|L2.908|
0000dc  7008              STRB     r0,[r1,#0]            ;166
0000de  e14d              B        |L2.892|
0000e0  48ab              LDR      r0,|L2.912|
0000e2  6800              LDR      r0,[r0,#0]            ;172  ; test_en
0000e4  f0200004          BIC      r0,r0,#4              ;172
0000e8  1d00              ADDS     r0,r0,#4              ;172
0000ea  49a9              LDR      r1,|L2.912|
0000ec  6008              STR      r0,[r1,#0]            ;172  ; test_en
0000ee  2002              MOVS     r0,#2                 ;173
0000f0  f7fffffe          BL       bsp_ch440r_ctrl_ex
0000f4  48a5              LDR      r0,|L2.908|
0000f6  7800              LDRB     r0,[r0,#0]            ;174  ; s_tState
0000f8  49a7              LDR      r1,|L2.920|
0000fa  7008              STRB     r0,[r1,#0]            ;174
0000fc  2006              MOVS     r0,#6                 ;175
0000fe  49a3              LDR      r1,|L2.908|
000100  7008              STRB     r0,[r1,#0]            ;175
000102  e13b              B        |L2.892|
000104  48a2              LDR      r0,|L2.912|
000106  6800              LDR      r0,[r0,#0]            ;181  ; test_en
000108  f0200008          BIC      r0,r0,#8              ;181
00010c  3008              ADDS     r0,r0,#8              ;181
00010e  49a0              LDR      r1,|L2.912|
000110  6008              STR      r0,[r1,#0]            ;181  ; test_en
000112  2008              MOVS     r0,#8                 ;182
000114  f7fffffe          BL       bsp_ch440r_ctrl_ex
000118  489c              LDR      r0,|L2.908|
00011a  7800              LDRB     r0,[r0,#0]            ;183  ; s_tState
00011c  499e              LDR      r1,|L2.920|
00011e  7008              STRB     r0,[r1,#0]            ;183
000120  2006              MOVS     r0,#6                 ;184
000122  499a              LDR      r1,|L2.908|
000124  7008              STRB     r0,[r1,#0]            ;184
000126  e129              B        |L2.892|
000128  bf00              NOP                            ;189
                  |L2.298|
00012a  4a99              LDR      r2,|L2.912|
00012c  2104              MOVS     r1,#4                 ;191
00012e  20f0              MOVS     r0,#0xf0              ;191
000130  f7fffffe          BL       online_update_sm
000134  4604              MOV      r4,r0                 ;191
000136  2c01              CMP      r4,#1                 ;192
000138  d0f7              BEQ      |L2.298|
00013a  b104              CBZ      r4,|L2.318|
00013c  e121              B        |L2.898|
                  |L2.318|
00013e  2007              MOVS     r0,#7                 ;197
000140  4992              LDR      r1,|L2.908|
000142  7008              STRB     r0,[r1,#0]            ;197
000144  e11a              B        |L2.892|
000146  4894              LDR      r0,|L2.920|
000148  7800              LDRB     r0,[r0,#0]            ;203  ; test_item
00014a  b918              CBNZ     r0,|L2.340|
00014c  2002              MOVS     r0,#2                 ;205
00014e  498f              LDR      r1,|L2.908|
000150  7008              STRB     r0,[r1,#0]            ;205
000152  e078              B        |L2.582|
                  |L2.340|
000154  bf00              NOP                            ;210
                  |L2.342|
000156  2200              MOVS     r2,#0                 ;212
000158  4611              MOV      r1,r2                 ;212
00015a  20f1              MOVS     r0,#0xf1              ;212
00015c  f7fffffe          BL       online_update_sm
000160  4604              MOV      r4,r0                 ;212
000162  2c01              CMP      r4,#1                 ;213
000164  d0f7              BEQ      |L2.342|
000166  b104              CBZ      r4,|L2.362|
000168  e10b              B        |L2.898|
                  |L2.362|
00016a  489e              LDR      r0,|L2.996|
00016c  7b81              LDRB     r1,[r0,#0xe]          ;216  ; msg_recv
00016e  7bc0              LDRB     r0,[r0,#0xf]          ;216
000170  ea412500          ORR      r5,r1,r0,LSL #8       ;216
000174  489b              LDR      r0,|L2.996|
000176  7c01              LDRB     r1,[r0,#0x10]         ;218
000178  7c40              LDRB     r0,[r0,#0x11]         ;218
00017a  ea412600          ORR      r6,r1,r0,LSL #8       ;218
00017e  4899              LDR      r0,|L2.996|
000180  7c81              LDRB     r1,[r0,#0x12]         ;220
000182  7cc0              LDRB     r0,[r0,#0x13]         ;220
000184  ea412100          ORR      r1,r1,r0,LSL #8       ;220
000188  4896              LDR      r0,|L2.996|
00018a  7d00              LDRB     r0,[r0,#0x14]         ;220
00018c  ea414100          ORR      r1,r1,r0,LSL #16      ;220
000190  4894              LDR      r0,|L2.996|
000192  7d40              LDRB     r0,[r0,#0x15]         ;220
000194  ea416700          ORR      r7,r1,r0,LSL #24      ;220
000198  487f              LDR      r0,|L2.920|
00019a  7800              LDRB     r0,[r0,#0]            ;226  ; test_item
00019c  2802              CMP      r0,#2                 ;226
00019e  d112              BNE      |L2.454|
0001a0  f0050001          AND      r0,r5,#1              ;226
0001a4  b178              CBZ      r0,|L2.454|
0001a6  2003              MOVS     r0,#3                 ;228
0001a8  4978              LDR      r1,|L2.908|
0001aa  7008              STRB     r0,[r1,#0]            ;228
0001ac  f0060001          AND      r0,r6,#1              ;229
0001b0  2800              CMP      r0,#0                 ;229
0001b2  d047              BEQ      |L2.580|
0001b4  f06f0434          MVN      r4,#0x34              ;231
0001b8  463a              MOV      r2,r7                 ;232
0001ba  4879              LDR      r0,|L2.928|
0001bc  6801              LDR      r1,[r0,#0]            ;232  ; g_iRunTime
0001be  a08a              ADR      r0,|L2.1000|
0001c0  f7fffffe          BL       logger_buffer_write
0001c4  e0dd              B        |L2.898|
                  |L2.454|
0001c6  4874              LDR      r0,|L2.920|
0001c8  7800              LDRB     r0,[r0,#0]            ;236  ; test_item
0001ca  2803              CMP      r0,#3                 ;236
0001cc  d11a              BNE      |L2.516|
0001ce  f0050002          AND      r0,r5,#2              ;236
0001d2  b1b8              CBZ      r0,|L2.516|
0001d4  2008              MOVS     r0,#8                 ;238
0001d6  496d              LDR      r1,|L2.908|
0001d8  7008              STRB     r0,[r1,#0]            ;238
0001da  f0060002          AND      r0,r6,#2              ;239
0001de  b158              CBZ      r0,|L2.504|
0001e0  f06f0435          MVN      r4,#0x35              ;241
0001e4  463a              MOV      r2,r7                 ;242
0001e6  486e              LDR      r0,|L2.928|
0001e8  6801              LDR      r1,[r0,#0]            ;242  ; g_iRunTime
0001ea  a07f              ADR      r0,|L2.1000|
0001ec  f7fffffe          BL       logger_buffer_write
0001f0  e0c7              B        |L2.898|
0001f2  e0bf              B        |L2.884|
0001f4  e06b              B        |L2.718|
0001f6  e027              B        |L2.584|
                  |L2.504|
0001f8  4869              LDR      r0,|L2.928|
0001fa  6801              LDR      r1,[r0,#0]            ;245  ; g_iRunTime
0001fc  a080              ADR      r0,|L2.1024|
0001fe  f7fffffe          BL       logger_buffer_write
000202  e01f              B        |L2.580|
                  |L2.516|
000204  4864              LDR      r0,|L2.920|
000206  7800              LDRB     r0,[r0,#0]            ;247  ; test_item
000208  2804              CMP      r0,#4                 ;247
00020a  d10b              BNE      |L2.548|
00020c  f0050004          AND      r0,r5,#4              ;247
000210  b140              CBZ      r0,|L2.548|
000212  2004              MOVS     r0,#4                 ;249
000214  495d              LDR      r1,|L2.908|
000216  7008              STRB     r0,[r1,#0]            ;249
000218  f0060004          AND      r0,r6,#4              ;250
00021c  b190              CBZ      r0,|L2.580|
00021e  f06f0420          MVN      r4,#0x20              ;252
000222  e0ae              B        |L2.898|
                  |L2.548|
000224  485c              LDR      r0,|L2.920|
000226  7800              LDRB     r0,[r0,#0]            ;256  ; test_item
000228  2805              CMP      r0,#5                 ;256
00022a  d10b              BNE      |L2.580|
00022c  f0050008          AND      r0,r5,#8              ;256
000230  b140              CBZ      r0,|L2.580|
000232  2005              MOVS     r0,#5                 ;258
000234  4955              LDR      r1,|L2.908|
000236  7008              STRB     r0,[r1,#0]            ;258
000238  f0060008          AND      r0,r6,#8              ;259
00023c  b110              CBZ      r0,|L2.580|
00023e  f06f0421          MVN      r4,#0x21              ;261
000242  e09e              B        |L2.898|
                  |L2.580|
000244  bf00              NOP                            ;265
                  |L2.582|
000246  e099              B        |L2.892|
                  |L2.584|
000248  bf00              NOP                            ;273
                  |L2.586|
00024a  2200              MOVS     r2,#0                 ;275
00024c  4611              MOV      r1,r2                 ;275
00024e  20f3              MOVS     r0,#0xf3              ;275
000250  f7fffffe          BL       online_update_sm
000254  4604              MOV      r4,r0                 ;275
000256  2c01              CMP      r4,#1                 ;276
000258  d0f7              BEQ      |L2.586|
00025a  b124              CBZ      r4,|L2.614|
00025c  2000              MOVS     r0,#0                 ;279
00025e  494b              LDR      r1,|L2.908|
000260  7008              STRB     r0,[r1,#0]            ;279
000262  4620              MOV      r0,r4                 ;280
000264  e6df              B        |L2.38|
                  |L2.614|
000266  2620              MOVS     r6,#0x20              ;282
000268  4632              MOV      r2,r6                 ;283
00026a  495e              LDR      r1,|L2.996|
00026c  310e              ADDS     r1,r1,#0xe            ;283
00026e  486a              LDR      r0,|L2.1048|
000270  f7fffffe          BL       __aeabi_memcpy
000274  a069              ADR      r0,|L2.1052|
000276  f7fffffe          BL       __2printf
00027a  2500              MOVS     r5,#0                 ;285
00027c  e008              B        |L2.656|
                  |L2.638|
00027e  4866              LDR      r0,|L2.1048|
000280  f8502025          LDR      r2,[r0,r5,LSL #2]     ;287
000284  4629              MOV      r1,r5                 ;287
000286  a06a              ADR      r0,|L2.1072|
000288  f7fffffe          BL       __2printf
00028c  1c68              ADDS     r0,r5,#1              ;285
00028e  b2c5              UXTB     r5,r0                 ;285
                  |L2.656|
000290  2d08              CMP      r5,#8                 ;285
000292  dbf4              BLT      |L2.638|
000294  a04b              ADR      r0,|L2.964|
000296  f7fffffe          BL       __2printf
00029a  483e              LDR      r0,|L2.916|
00029c  7800              LDRB     r0,[r0,#0]            ;291  ; read_twice_flg
00029e  1c40              ADDS     r0,r0,#1              ;291
0002a0  493c              LDR      r1,|L2.916|
0002a2  7008              STRB     r0,[r1,#0]            ;291
0002a4  4608              MOV      r0,r1                 ;292
0002a6  7800              LDRB     r0,[r0,#0]            ;292  ; read_twice_flg
0002a8  2802              CMP      r0,#2                 ;292
0002aa  d103              BNE      |L2.692|
0002ac  2000              MOVS     r0,#0                 ;294
0002ae  4937              LDR      r1,|L2.908|
0002b0  7008              STRB     r0,[r1,#0]            ;294
0002b2  e6b8              B        |L2.38|
                  |L2.692|
0002b4  4632              MOV      r2,r6                 ;299
0002b6  4962              LDR      r1,|L2.1088|
0002b8  4857              LDR      r0,|L2.1048|
0002ba  f7fffffe          BL       memcmp
0002be  b110              CBZ      r0,|L2.710|
0002c0  f06f0436          MVN      r4,#0x36              ;301
0002c4  e05d              B        |L2.898|
                  |L2.710|
0002c6  2009              MOVS     r0,#9                 ;304
0002c8  4930              LDR      r1,|L2.908|
0002ca  7008              STRB     r0,[r1,#0]            ;304
0002cc  e056              B        |L2.892|
                  |L2.718|
0002ce  2005              MOVS     r0,#5                 ;311
0002d0  f7fffffe          BL       is_test_item
0002d4  b9d8              CBNZ     r0,|L2.782|
0002d6  485b              LDR      r0,|L2.1092|
0002d8  f7fffffe          BL       trim_result_to_efuse
0002dc  a05a              ADR      r0,|L2.1096|
0002de  f7fffffe          BL       __2printf
0002e2  2500              MOVS     r5,#0                 ;315
0002e4  e008              B        |L2.760|
                  |L2.742|
0002e6  4857              LDR      r0,|L2.1092|
0002e8  f8502025          LDR      r2,[r0,r5,LSL #2]     ;317
0002ec  4629              MOV      r1,r5                 ;317
0002ee  a050              ADR      r0,|L2.1072|
0002f0  f7fffffe          BL       __2printf
0002f4  1c68              ADDS     r0,r5,#1              ;315
0002f6  b2c5              UXTB     r5,r0                 ;315
                  |L2.760|
0002f8  2d08              CMP      r5,#8                 ;315
0002fa  dbf4              BLT      |L2.742|
0002fc  a031              ADR      r0,|L2.964|
0002fe  f7fffffe          BL       __2printf
000302  4827              LDR      r0,|L2.928|
000304  6801              LDR      r1,[r0,#0]            ;320  ; g_iRunTime
000306  a055              ADR      r0,|L2.1116|
000308  f7fffffe          BL       logger_buffer_write
00030c  e02e              B        |L2.876|
                  |L2.782|
00030e  2000              MOVS     r0,#0                 ;326
000310  e007              B        |L2.802|
                  |L2.786|
000312  4941              LDR      r1,|L2.1048|
000314  f8511020          LDR      r1,[r1,r0,LSL #2]     ;328
000318  4a4a              LDR      r2,|L2.1092|
00031a  f8421020          STR      r1,[r2,r0,LSL #2]     ;328
00031e  1c41              ADDS     r1,r0,#1              ;326
000320  b2c8              UXTB     r0,r1                 ;326
                  |L2.802|
000322  2808              CMP      r0,#8                 ;326
000324  dbf5              BLT      |L2.786|
000326  4847              LDR      r0,|L2.1092|
000328  f7fffffe          BL       trim_result_to_efuse
00032c  bf00              NOP                            ;340
                  |L2.814|
00032e  4845              LDR      r0,|L2.1092|
000330  f7fffffe          BL       spl_efuse_write
000334  4604              MOV      r4,r0                 ;342
000336  2c01              CMP      r4,#1                 ;343
000338  d0f9              BEQ      |L2.814|
00033a  b124              CBZ      r4,|L2.838|
00033c  2000              MOVS     r0,#0                 ;346
00033e  4913              LDR      r1,|L2.908|
000340  7008              STRB     r0,[r1,#0]            ;346
000342  4620              MOV      r0,r4                 ;347
000344  e66f              B        |L2.38|
                  |L2.838|
000346  a040              ADR      r0,|L2.1096|
000348  f7fffffe          BL       __2printf
00034c  2500              MOVS     r5,#0                 ;352
00034e  e008              B        |L2.866|
                  |L2.848|
000350  483c              LDR      r0,|L2.1092|
000352  f8502025          LDR      r2,[r0,r5,LSL #2]     ;354
000356  4629              MOV      r1,r5                 ;354
000358  a035              ADR      r0,|L2.1072|
00035a  f7fffffe          BL       __2printf
00035e  1c68              ADDS     r0,r5,#1              ;352
000360  b2c5              UXTB     r5,r0                 ;352
                  |L2.866|
000362  2d08              CMP      r5,#8                 ;352
000364  dbf4              BLT      |L2.848|
000366  a017              ADR      r0,|L2.964|
000368  f7fffffe          BL       __2printf
                  |L2.876|
00036c  2008              MOVS     r0,#8                 ;358
00036e  4907              LDR      r1,|L2.908|
000370  7008              STRB     r0,[r1,#0]            ;358
000372  e003              B        |L2.892|
                  |L2.884|
000374  2000              MOVS     r0,#0                 ;364
000376  4905              LDR      r1,|L2.908|
000378  7008              STRB     r0,[r1,#0]            ;364
00037a  bf00              NOP                            ;366
                  |L2.892|
00037c  bf00              NOP                            ;150
00037e  2001              MOVS     r0,#1                 ;368
000380  e651              B        |L2.38|
                  |L2.898|
000382  2000              MOVS     r0,#0                 ;371
000384  4901              LDR      r1,|L2.908|
000386  7008              STRB     r0,[r1,#0]            ;371
000388  4620              MOV      r0,r4                 ;372
00038a  e64c              B        |L2.38|
;;;374    
                          ENDP

                  |L2.908|
                          DCD      s_tState
                  |L2.912|
                          DCD      test_en
                  |L2.916|
                          DCD      read_twice_flg
                  |L2.920|
                          DCD      test_item
                  |L2.924|
                          DCD      trim_result
                  |L2.928|
                          DCD      g_iRunTime
                  |L2.932|
0003a4  5b253864          DCB      "[%8d]SUCCESS Oaduio:%d,%d(%d,%d)"
0003a8  5d535543
0003ac  43455353
0003b0  204f6164
0003b4  75696f3a
0003b8  25642c25
0003bc  64282564
0003c0  2c256429
                  |L2.964|
0003c4  0d0a00            DCB      "\r\n",0
0003c7  00                DCB      0
                  |L2.968|
0003c8  5b253864          DCB      "[%8d]INFO skip Oaudio!\r\n",0
0003cc  5d494e46
0003d0  4f20736b
0003d4  6970204f
0003d8  61756469
0003dc  6f210d0a
0003e0  00      
0003e1  00                DCB      0
0003e2  00                DCB      0
0003e3  00                DCB      0
                  |L2.996|
                          DCD      msg_recv
                  |L2.1000|
0003e8  5b253864          DCB      "[%8d]fail_io_num:0x%x\r\n",0
0003ec  5d666169
0003f0  6c5f696f
0003f4  5f6e756d
0003f8  3a307825
0003fc  780d0a00
                  |L2.1024|
000400  5b253864          DCB      "[%8d]SUCCESS IO test\r\n",0
000404  5d535543
000408  43455353
00040c  20494f20
000410  74657374
000414  0d0a00  
000417  00                DCB      0
                  |L2.1048|
                          DCD      efuse_pre_data
                  |L2.1052|
00041c  72656164          DCB      "read  efuse value:",0
000420  20206566
000424  75736520
000428  76616c75
00042c  653a00  
00042f  00                DCB      0
                  |L2.1072|
000430  5b25645d          DCB      "[%d]0x%08x  ",0
000434  30782530
000438  38782020
00043c  00      
00043d  00                DCB      0
00043e  00                DCB      0
00043f  00                DCB      0
                  |L2.1088|
                          DCD      efuse_otp_data_brom
                  |L2.1092|
                          DCD      efuse_post_data
                  |L2.1096|
000448  77726974          DCB      "write efuse value:",0
00044c  65206566
000450  75736520
000454  76616c75
000458  653a00  
00045b  00                DCB      0
                  |L2.1116|
00045c  5b253864          DCB      "[%8d]INFO skip efuse write!\r\n",0
000460  5d494e46
000464  4f20736b
000468  69702065
00046c  66757365
000470  20777269
000474  7465210d
000478  0a00    
00047a  00                DCB      0
00047b  00                DCB      0

                          AREA ||i.spl_efuse_write||, CODE, READONLY, ALIGN=2

                  spl_efuse_write PROC
;;;449    
;;;450    static fsm_rt_t spl_efuse_write(kiwi_efuse_t* efuse_data)
000000  b570              PUSH     {r4-r6,lr}
;;;451    {
000002  4605              MOV      r5,r0
;;;452        fsm_rt_t ret;
;;;453        
;;;454        uint32_t len = sizeof(kiwi_efuse_t);
000004  2620              MOVS     r6,#0x20
;;;455        
;;;456        do
000006  bf00              NOP      
                  |L3.8|
;;;457        {
;;;458            ret = online_update_sm(0xF4, len, (uint8_t*)(*efuse_data).word_table);
000008  462a              MOV      r2,r5
00000a  4631              MOV      r1,r6
00000c  20f4              MOVS     r0,#0xf4
00000e  f7fffffe          BL       online_update_sm
000012  4604              MOV      r4,r0
;;;459        }while(ret == fsm_rt_on_going);
000014  2c01              CMP      r4,#1
000016  d0f7              BEQ      |L3.8|
;;;460        if(ret != fsm_rt_cpl ) return ret;
000018  b10c              CBZ      r4,|L3.30|
00001a  4620              MOV      r0,r4
                  |L3.28|
;;;461        
;;;462        switch(msg_recv.msg_body.content[0])
;;;463        {
;;;464            case 0:  return fsm_rt_cpl;
;;;465            case 1:  return fsm_rt_err_efuse_check;
;;;466            default: return fsm_rt_err_efuse_check;
;;;467        }
;;;468    }
00001c  bd70              POP      {r4-r6,pc}
                  |L3.30|
00001e  4807              LDR      r0,|L3.60|
000020  7b80              LDRB     r0,[r0,#0xe]          ;462  ; msg_recv
000022  b110              CBZ      r0,|L3.42|
000024  2801              CMP      r0,#1                 ;462
000026  d105              BNE      |L3.52|
000028  e001              B        |L3.46|
                  |L3.42|
00002a  2000              MOVS     r0,#0                 ;464
00002c  e7f6              B        |L3.28|
                  |L3.46|
00002e  f06f000b          MVN      r0,#0xb               ;465
000032  e7f3              B        |L3.28|
                  |L3.52|
000034  f06f000b          MVN      r0,#0xb               ;466
000038  e7f0              B        |L3.28|
;;;469            
                          ENDP

00003a  0000              DCW      0x0000
                  |L3.60|
                          DCD      msg_recv

                          AREA ||i.trim_result_to_efuse||, CODE, READONLY, ALIGN=2

                  trim_result_to_efuse PROC
;;;387    
;;;388    static void trim_result_to_efuse(kiwi_efuse_t *efuse_data)
000000  4952              LDR      r1,|L4.332|
;;;389    {
;;;390        (*efuse_data).EFUSE_VLD = 0x8e3b5a69;
000002  6001              STR      r1,[r0,#0]
;;;391        if(trim_result.pass_pmu_bgr_trim)
000004  4952              LDR      r1,|L4.336|
000006  7809              LDRB     r1,[r1,#0]  ; trim_result
000008  f3c10140          UBFX     r1,r1,#1,#1
00000c  b151              CBZ      r1,|L4.36|
;;;392        {
;;;393            (*efuse_data).PMU_BGR_VLD  = 1;
00000e  68c1              LDR      r1,[r0,#0xc]
000010  f0210110          BIC      r1,r1,#0x10
000014  3110              ADDS     r1,r1,#0x10
000016  60c1              STR      r1,[r0,#0xc]
;;;394            (*efuse_data).PMU_BGR_TRIM = trim_result.pmu_bgr_trim_val;            
000018  494d              LDR      r1,|L4.336|
00001a  7a0a              LDRB     r2,[r1,#8]  ; trim_result
00001c  68c1              LDR      r1,[r0,#0xc]
00001e  f3620103          BFI      r1,r2,#0,#4
000022  60c1              STR      r1,[r0,#0xc]
                  |L4.36|
;;;395        }
;;;396        
;;;397        if(trim_result.pass_pmu_lpv_trim)
000024  494a              LDR      r1,|L4.336|
000026  7809              LDRB     r1,[r1,#0]  ; trim_result
000028  f3c10180          UBFX     r1,r1,#2,#1
00002c  b151              CBZ      r1,|L4.68|
;;;398        {
;;;399            (*efuse_data).PMU_LPV_VLD  = 1;
00002e  68c1              LDR      r1,[r0,#0xc]
000030  f0210140          BIC      r1,r1,#0x40
000034  3140              ADDS     r1,r1,#0x40
000036  60c1              STR      r1,[r0,#0xc]
;;;400            (*efuse_data).PMU_LPV_TRIM = trim_result.pmu_lpv_trim_val;            
000038  4945              LDR      r1,|L4.336|
00003a  7d0a              LDRB     r2,[r1,#0x14]  ; trim_result
00003c  68c1              LDR      r1,[r0,#0xc]
00003e  f3621145          BFI      r1,r2,#5,#1
000042  60c1              STR      r1,[r0,#0xc]
                  |L4.68|
;;;401        }
;;;402        
;;;403        if(trim_result.pass_osc_audio_trim)
000044  4942              LDR      r1,|L4.336|
000046  7809              LDRB     r1,[r1,#0]  ; trim_result
000048  f3c101c0          UBFX     r1,r1,#3,#1
00004c  b161              CBZ      r1,|L4.104|
;;;404        {
;;;405            (*efuse_data).OSC_AUDIO_VLD  = 1;
00004e  6881              LDR      r1,[r0,#8]
000050  f4210180          BIC      r1,r1,#0x400000
000054  f5010180          ADD      r1,r1,#0x400000
000058  6081              STR      r1,[r0,#8]
;;;406            (*efuse_data).OSC_AUDIO_TRIM = trim_result.osc_audio_trim_val;  
00005a  493d              LDR      r1,|L4.336|
00005c  f8912020          LDRB     r2,[r1,#0x20]  ; trim_result
000060  6881              LDR      r1,[r0,#8]
000062  f3624115          BFI      r1,r2,#16,#6
000066  6081              STR      r1,[r0,#8]
                  |L4.104|
;;;407        }
;;;408        
;;;409        if(trim_result.pass_osc_pmu_trim)
000068  4939              LDR      r1,|L4.336|
00006a  7809              LDRB     r1,[r1,#0]  ; trim_result
00006c  f3c11100          UBFX     r1,r1,#4,#1
000070  b161              CBZ      r1,|L4.140|
;;;410        {
;;;411            (*efuse_data).OSC_32K_VLD  = 1;
000072  68c1              LDR      r1,[r0,#0xc]
000074  f4215100          BIC      r1,r1,#0x2000
000078  f5015100          ADD      r1,r1,#0x2000
00007c  60c1              STR      r1,[r0,#0xc]
;;;412            (*efuse_data).OSC_32K_TRIM = trim_result.osc_pmu_trim_val;  
00007e  4934              LDR      r1,|L4.336|
000080  f891202c          LDRB     r2,[r1,#0x2c]  ; trim_result
000084  68c1              LDR      r1,[r0,#0xc]
000086  f36211cc          BFI      r1,r2,#7,#6
00008a  60c1              STR      r1,[r0,#0xc]
                  |L4.140|
;;;413        }
;;;414        
;;;415        if(trim_result.pass_osc_core_trim)
00008c  4930              LDR      r1,|L4.336|
00008e  7809              LDRB     r1,[r1,#0]  ; trim_result
000090  f3c11140          UBFX     r1,r1,#5,#1
000094  2900              CMP      r1,#0
000096  d058              BEQ      |L4.330|
;;;416        {
;;;417            (*efuse_data).OSC_CORE_60M_VLD  = 1;
000098  6941              LDR      r1,[r0,#0x14]
00009a  f0210180          BIC      r1,r1,#0x80
00009e  3180              ADDS     r1,r1,#0x80
0000a0  6141              STR      r1,[r0,#0x14]
;;;418            (*efuse_data).OSC_CORE_70M_VLD  = 1;
0000a2  6941              LDR      r1,[r0,#0x14]
0000a4  f4214100          BIC      r1,r1,#0x8000
0000a8  f5014100          ADD      r1,r1,#0x8000
0000ac  6141              STR      r1,[r0,#0x14]
;;;419            (*efuse_data).OSC_CORE_80M_VLD  = 1;
0000ae  6941              LDR      r1,[r0,#0x14]
0000b0  f4210100          BIC      r1,r1,#0x800000
0000b4  f5010100          ADD      r1,r1,#0x800000
0000b8  6141              STR      r1,[r0,#0x14]
;;;420            (*efuse_data).OSC_CORE_90M_VLD  = 1;
0000ba  6941              LDR      r1,[r0,#0x14]
0000bc  f0214100          BIC      r1,r1,#0x80000000
0000c0  f1014100          ADD      r1,r1,#0x80000000
0000c4  6141              STR      r1,[r0,#0x14]
;;;421            (*efuse_data).OSC_CORE_100M_VLD  = 1;
0000c6  6981              LDR      r1,[r0,#0x18]
0000c8  f0210180          BIC      r1,r1,#0x80
0000cc  3180              ADDS     r1,r1,#0x80
0000ce  6181              STR      r1,[r0,#0x18]
;;;422            (*efuse_data).OSC_CORE_110M_VLD  = 1;
0000d0  6981              LDR      r1,[r0,#0x18]
0000d2  f4214100          BIC      r1,r1,#0x8000
0000d6  f5014100          ADD      r1,r1,#0x8000
0000da  6181              STR      r1,[r0,#0x18]
;;;423            (*efuse_data).OSC_CORE_120M_VLD  = 1;
0000dc  6981              LDR      r1,[r0,#0x18]
0000de  f4210100          BIC      r1,r1,#0x800000
0000e2  f5010100          ADD      r1,r1,#0x800000
0000e6  6181              STR      r1,[r0,#0x18]
;;;424            (*efuse_data).OSC_CORE_60M_TRIM = trim_result.osc_core_trim_val[0]; 
0000e8  4919              LDR      r1,|L4.336|
0000ea  f8912038          LDRB     r2,[r1,#0x38]  ; trim_result
0000ee  6941              LDR      r1,[r0,#0x14]
0000f0  f3620106          BFI      r1,r2,#0,#7
0000f4  6141              STR      r1,[r0,#0x14]
;;;425            (*efuse_data).OSC_CORE_70M_TRIM = trim_result.osc_core_trim_val[1]; 
0000f6  4916              LDR      r1,|L4.336|
0000f8  f8912039          LDRB     r2,[r1,#0x39]
0000fc  6941              LDR      r1,[r0,#0x14]
0000fe  f362210e          BFI      r1,r2,#8,#7
000102  6141              STR      r1,[r0,#0x14]
;;;426            (*efuse_data).OSC_CORE_80M_TRIM = trim_result.osc_core_trim_val[2]; 
000104  4912              LDR      r1,|L4.336|
000106  f891203a          LDRB     r2,[r1,#0x3a]
00010a  6941              LDR      r1,[r0,#0x14]
00010c  f3624116          BFI      r1,r2,#16,#7
000110  6141              STR      r1,[r0,#0x14]
;;;427            (*efuse_data).OSC_CORE_90M_TRIM = trim_result.osc_core_trim_val[3]; 
000112  490f              LDR      r1,|L4.336|
000114  f891203b          LDRB     r2,[r1,#0x3b]
000118  6941              LDR      r1,[r0,#0x14]
00011a  f362611e          BFI      r1,r2,#24,#7
00011e  6141              STR      r1,[r0,#0x14]
;;;428            (*efuse_data).OSC_CORE_100M_TRIM = trim_result.osc_core_trim_val[4]; 
000120  490b              LDR      r1,|L4.336|
000122  f891203c          LDRB     r2,[r1,#0x3c]
000126  6981              LDR      r1,[r0,#0x18]
000128  f3620106          BFI      r1,r2,#0,#7
00012c  6181              STR      r1,[r0,#0x18]
;;;429            (*efuse_data).OSC_CORE_110M_TRIM = trim_result.osc_core_trim_val[5]; 
00012e  4908              LDR      r1,|L4.336|
000130  f891203d          LDRB     r2,[r1,#0x3d]
000134  6981              LDR      r1,[r0,#0x18]
000136  f362210e          BFI      r1,r2,#8,#7
00013a  6181              STR      r1,[r0,#0x18]
;;;430            (*efuse_data).OSC_CORE_120M_TRIM = trim_result.osc_core_trim_val[6]; 
00013c  4904              LDR      r1,|L4.336|
00013e  f891203e          LDRB     r2,[r1,#0x3e]
000142  6981              LDR      r1,[r0,#0x18]
000144  f3624116          BFI      r1,r2,#16,#7
000148  6181              STR      r1,[r0,#0x18]
                  |L4.330|
;;;431     
;;;432        }
;;;433    //    if(trim_result.pmu_lpv_trim_power_on != trim_result.pmu_lpv_trim_default)
;;;434    //    {
;;;435    //        debug("pmu_lpv_trim_power_on=%d\r\n",trim_result.pmu_lpv_trim_power_on);
;;;436    //    }
;;;437    //    if(trim_result.pmu_bgr_trim_power_on != trim_result.pmu_bgr_trim_default)
;;;438    //    {
;;;439    //        debug("pmu_bgr_trim_power_on=%d\r\n",trim_result.pmu_bgr_trim_power_on);
;;;440    //    }
;;;441    //    if(trim_result.osc_pmu_trim_power_on != trim_result.osc_pmu_trim_default)
;;;442    //    {
;;;443    //        debug("osc_pmu_trim_power_on=%d\r\n",trim_result.osc_pmu_trim_power_on);
;;;444    //    }
;;;445        
;;;446    }
00014a  4770              BX       lr
;;;447    
                          ENDP

                  |L4.332|
                          DCD      0x8e3b5a69
                  |L4.336|
                          DCD      trim_result

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  kiwi_ft_str
000000  68656c6c          DCB      0x68,0x65,0x6c,0x6c
000004  6f206b69          DCB      0x6f,0x20,0x6b,0x69
000008  77692100          DCB      0x77,0x69,0x21,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  pattern_result_flag
                          DCD      0x00000000
                  test_en
                          DCD      0x00000000
                  s_tState
000008  00                DCB      0x00
                  read_twice_flg
000009  00                DCB      0x00
                  test_item
00000a  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\kiwi_ft\\test_pattern_result.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_test_pattern_result_c_5905ccaf____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___21_test_pattern_result_c_5905ccaf____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_test_pattern_result_c_5905ccaf____REVSH|
#line 144
|__asm___21_test_pattern_result_c_5905ccaf____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
