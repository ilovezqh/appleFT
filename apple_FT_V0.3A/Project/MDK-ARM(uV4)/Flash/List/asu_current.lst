L 1 "..\..\User\kiwi_ft\asu_current.c"
N/* 1.配置芯片
N   2.让芯片进入Standby进行功耗测量
N   3.唤醒芯片(通过ONOFF信号触发)，看芯片是否成功唤醒（查看AVDD_CMU）
N*/
N#include "__kiwi_ft_common.h"
L 1 "..\..\User\kiwi_ft\__kiwi_ft_common.h" 1
N/* ft模块内部使用 */
N#ifndef __KIWI_FT_COMMON_H
N#define __KIWI_FT_COMMON_H
N
N#include "bsp.h"
L 1 "..\..\User\bsp_stm32f4xx\bsp.h" 1
N/*
N*********************************************************************************************************
N*
N*	模块名称 : BSP模块
N*	文件名称 : bsp.h
N*	说    明 : 这是底层驱动模块所有的h文件的汇总文件。 应用程序只需 #include bsp.h 即可，
N*			  不需要#include 每个模块的 h 文件
N*
N*	Copyright (C), 2023-2024, 普林芯驰 www.spacetouch.co
N*
N*********************************************************************************************************
N*/
N
N#ifndef _BSP_H_
N#define _BSP_H_
N
N#define STM32_V5
N//#define STM32_X4
N
N/* 检查是否定义了开发板型号 */
N#if !defined (STM32_V5) && !defined (STM32_X4)
X#if !1L && !0L
S	#error "Please define the board model : STM32_X4 or STM32_V5"
N#endif
N
N/* 定义 BSP 版本号 */
N#define __STM32F1_BSP_VERSION		"1.1"
N
N/* 开关全局中断的宏 */
N#define ENABLE_INT()	__set_PRIMASK(0)	/* 使能全局中断 */
N#define DISABLE_INT()	__set_PRIMASK(1)	/* 禁止全局中断 */
N#define UNUSED(x) (void)(x)
N 
N#define F_MOUNT  0
N#define DISK_VOLUME   "0:"
N
N/* 这个宏仅用于调试阶段排错 */
N#define BSP_Printf		printf
N//#define BSP_Printf(...)
N
N#include "stm32f4xx.h"
L 1 "..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\stm32f4xx.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer Header File. 
N  *          This file contains all the peripheral register's definitions, bits 
N  *          definitions and memory mapping for STM32F4xx devices.            
N  *            
N  *          The file is the unique include file that the application programmer
N  *          is using in the C source code, usually in main.c. This file contains:
N  *           - Configuration section that allows to select:
N  *              - The device used in the target application
N  *              - To use or not the peripheral抯 drivers in application code(i.e. 
N  *                code will be based on direct access to peripheral抯 registers 
N  *                rather than drivers API), this option is controlled by 
N  *                "#define USE_STDPERIPH_DRIVER"
N  *              - To change few application-specific parameters such as the HSE 
N  *                crystal frequency
N  *           - Data structures and the address mapping for all peripherals
N  *           - Peripheral's registers declarations and bits definition
N  *           - Macros to access peripheral抯 registers hardware
N  *  
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************  
N  */ 
N
N/** @addtogroup CMSIS
N  * @{
N  */
N
N/** @addtogroup stm32f4xx
N  * @{
N  */
N    
N#ifndef __STM32F4xx_H
N#define __STM32F4xx_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif /* __cplusplus */
N  
N/** @addtogroup Library_configuration_section
N  * @{
N  */
N  
N/* Uncomment the line below according to the target STM32 device used in your
N   application 
N  */
N
N#if !defined (STM32F40_41xxx) && !defined (STM32F427_437xx) && !defined (STM32F429_439xx) && !defined (STM32F401xx)
X#if !1L && !0L && !0L && !0L
S  /* #define STM32F40_41xxx */   /*!< STM32F405RG, STM32F405VG, STM32F405ZG, STM32F415RG, STM32F415VG, STM32F415ZG,  
S                                     STM32F407VG, STM32F407VE, STM32F407ZG, STM32F407ZE, STM32F407IG, STM32F407IE, 
S                                     STM32F417VG, STM32F417VE, STM32F417ZG, STM32F417ZE, STM32F417IG and STM32F417IE Devices */
S
S  /* #define STM32F427_437xx */   /*!< STM32F427VG, STM32F427VI, STM32F427ZG, STM32F427ZI, STM32F427IG, STM32F427II,  
S                                       STM32F437VG, STM32F437VI, STM32F437ZG, STM32F437ZI, STM32F437IG, STM32F437II Devices */
S                                    
S  /* #define STM32F429_439xx */   /*!< STM32F429VG, STM32F429VI, STM32F429ZG, STM32F429ZI, STM32F429BG, STM32F429BI,  
S                                       STM32F429NG, STM32F439NI, STM32F429IG, STM32F429II, STM32F439VG, STM32F439VI, 
S                                       STM32F439ZG, STM32F439ZI, STM32F439BG, STM32F439BI, STM32F439NG, STM32F439NI,
S                                       STM32F439IG and STM32F439II Devices */
S                                    
S  /* #define STM32F401xx */     /*!< STM32F401CB, STM32F401CC,  STM32F401RB, STM32F401RC, STM32F401VB, STM32F401VC  
S                                     STM32F401CD, STM32F401RD, STM32F401VD, STM32F401CExx, STM32F401RE, STM32F401VE Devices */  
S  
N#endif
N
N/* Old STM32F40XX definition, maintained for legacy purpose */
N#ifdef STM32F40XX
S  #define STM32F40_41xxx
N#endif /* STM32F40XX */
N
N/* Old STM32F427X definition, maintained for legacy purpose */
N#ifdef STM32F427X
S  #define STM32F427_437xx
N#endif /* STM32F427X */
N
N/*  Tip: To avoid modifying this file each time you need to switch between these
N        devices, you can define the device in your toolchain compiler preprocessor.
N  */
N
N#if !defined (STM32F40_41xxx) && !defined (STM32F427_437xx) && !defined (STM32F429_439xx) && !defined (STM32F401xx)
X#if !1L && !0L && !0L && !0L
S #error "Please select first the target STM32F4xx device used in your application (in stm32f4xx.h file)"
N#endif
N
N#if !defined  (USE_STDPERIPH_DRIVER)
X#if !1L
S/**
S * @brief Comment the line below if you will not use the peripherals drivers.
S   In this case, these drivers will not be included and the application code will 
S   be based on direct access to peripherals registers 
S   */
S  /*#define USE_STDPERIPH_DRIVER */
N#endif /* USE_STDPERIPH_DRIVER */
N
N/**
N * @brief In the following line adjust the value of External High Speed oscillator (HSE)
N   used in your application 
N   
N   Tip: To avoid modifying this file each time you need to use different HSE, you
N        can define the HSE value in your toolchain compiler preprocessor.
N  */           
N
N#if !defined  (HSE_VALUE) 
X#if !0L 
N  #define HSE_VALUE    ((uint32_t)8000000) /*!< Value of the External oscillator in Hz */
N  
N#endif /* HSE_VALUE */
N
N/**
N * @brief In the following line adjust the External High Speed oscillator (HSE) Startup 
N   Timeout value 
N   */
N#if !defined  (HSE_STARTUP_TIMEOUT) 
X#if !0L 
N  #define HSE_STARTUP_TIMEOUT    ((uint16_t)0x05000)   /*!< Time out for HSE start up */
N#endif /* HSE_STARTUP_TIMEOUT */   
N
N#if !defined  (HSI_VALUE)   
X#if !0L   
N  #define HSI_VALUE    ((uint32_t)16000000) /*!< Value of the Internal oscillator in Hz*/
N#endif /* HSI_VALUE */   
N
N/**
N * @brief STM32F4XX Standard Peripherals Library version number V1.3.0
N   */
N#define __STM32F4XX_STDPERIPH_VERSION_MAIN   (0x01) /*!< [31:24] main version */                                  
N#define __STM32F4XX_STDPERIPH_VERSION_SUB1   (0x03) /*!< [23:16] sub1 version */
N#define __STM32F4XX_STDPERIPH_VERSION_SUB2   (0x00) /*!< [15:8]  sub2 version */
N#define __STM32F4XX_STDPERIPH_VERSION_RC     (0x00) /*!< [7:0]  release candidate */ 
N#define __STM32F4XX_STDPERIPH_VERSION        ((__STM32F4XX_STDPERIPH_VERSION_MAIN << 24)\
N                                             |(__STM32F4XX_STDPERIPH_VERSION_SUB1 << 16)\
N                                             |(__STM32F4XX_STDPERIPH_VERSION_SUB2 << 8)\
N                                             |(__STM32F4XX_STDPERIPH_VERSION_RC))
X#define __STM32F4XX_STDPERIPH_VERSION        ((__STM32F4XX_STDPERIPH_VERSION_MAIN << 24)                                             |(__STM32F4XX_STDPERIPH_VERSION_SUB1 << 16)                                             |(__STM32F4XX_STDPERIPH_VERSION_SUB2 << 8)                                             |(__STM32F4XX_STDPERIPH_VERSION_RC))
N                                             
N/**
N  * @}
N  */
N
N/** @addtogroup Configuration_section_for_CMSIS
N  * @{
N  */
N
N/**
N * @brief Configuration of the Cortex-M4 Processor and Core Peripherals 
N */
N#define __CM4_REV                 0x0001  /*!< Core revision r0p1                            */
N#define __MPU_PRESENT             1       /*!< STM32F4XX provides an MPU                     */
N#define __NVIC_PRIO_BITS          4       /*!< STM32F4XX uses 4 Bits for the Priority Levels */
N#define __Vendor_SysTickConfig    0       /*!< Set to 1 if different SysTick Config is used  */
N#define __FPU_PRESENT             1       /*!< FPU present                                   */
N
N/**
N * @brief STM32F4XX Interrupt Number Definition, according to the selected device 
N *        in @ref Library_configuration_section 
N */
Ntypedef enum IRQn
N{
N/******  Cortex-M4 Processor Exceptions Numbers ****************************************************************/
N  NonMaskableInt_IRQn         = -14,    /*!< 2 Non Maskable Interrupt                                          */
N  MemoryManagement_IRQn       = -12,    /*!< 4 Cortex-M4 Memory Management Interrupt                           */
N  BusFault_IRQn               = -11,    /*!< 5 Cortex-M4 Bus Fault Interrupt                                   */
N  UsageFault_IRQn             = -10,    /*!< 6 Cortex-M4 Usage Fault Interrupt                                 */
N  SVCall_IRQn                 = -5,     /*!< 11 Cortex-M4 SV Call Interrupt                                    */
N  DebugMonitor_IRQn           = -4,     /*!< 12 Cortex-M4 Debug Monitor Interrupt                              */
N  PendSV_IRQn                 = -2,     /*!< 14 Cortex-M4 Pend SV Interrupt                                    */
N  SysTick_IRQn                = -1,     /*!< 15 Cortex-M4 System Tick Interrupt                                */
N/******  STM32 specific Interrupt Numbers **********************************************************************/
N  WWDG_IRQn                   = 0,      /*!< Window WatchDog Interrupt                                         */
N  PVD_IRQn                    = 1,      /*!< PVD through EXTI Line detection Interrupt                         */
N  TAMP_STAMP_IRQn             = 2,      /*!< Tamper and TimeStamp interrupts through the EXTI line             */
N  RTC_WKUP_IRQn               = 3,      /*!< RTC Wakeup interrupt through the EXTI line                        */
N  FLASH_IRQn                  = 4,      /*!< FLASH global Interrupt                                            */
N  RCC_IRQn                    = 5,      /*!< RCC global Interrupt                                              */
N  EXTI0_IRQn                  = 6,      /*!< EXTI Line0 Interrupt                                              */
N  EXTI1_IRQn                  = 7,      /*!< EXTI Line1 Interrupt                                              */
N  EXTI2_IRQn                  = 8,      /*!< EXTI Line2 Interrupt                                              */
N  EXTI3_IRQn                  = 9,      /*!< EXTI Line3 Interrupt                                              */
N  EXTI4_IRQn                  = 10,     /*!< EXTI Line4 Interrupt                                              */
N  DMA1_Stream0_IRQn           = 11,     /*!< DMA1 Stream 0 global Interrupt                                    */
N  DMA1_Stream1_IRQn           = 12,     /*!< DMA1 Stream 1 global Interrupt                                    */
N  DMA1_Stream2_IRQn           = 13,     /*!< DMA1 Stream 2 global Interrupt                                    */
N  DMA1_Stream3_IRQn           = 14,     /*!< DMA1 Stream 3 global Interrupt                                    */
N  DMA1_Stream4_IRQn           = 15,     /*!< DMA1 Stream 4 global Interrupt                                    */
N  DMA1_Stream5_IRQn           = 16,     /*!< DMA1 Stream 5 global Interrupt                                    */
N  DMA1_Stream6_IRQn           = 17,     /*!< DMA1 Stream 6 global Interrupt                                    */
N  ADC_IRQn                    = 18,     /*!< ADC1, ADC2 and ADC3 global Interrupts                             */
N
N#if defined (STM32F40_41xxx)
X#if 1L
N  CAN1_TX_IRQn                = 19,     /*!< CAN1 TX Interrupt                                                 */
N  CAN1_RX0_IRQn               = 20,     /*!< CAN1 RX0 Interrupt                                                */
N  CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                                */
N  CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                                */
N  EXTI9_5_IRQn                = 23,     /*!< External Line[9:5] Interrupts                                     */
N  TIM1_BRK_TIM9_IRQn          = 24,     /*!< TIM1 Break interrupt and TIM9 global interrupt                    */
N  TIM1_UP_TIM10_IRQn          = 25,     /*!< TIM1 Update Interrupt and TIM10 global interrupt                  */
N  TIM1_TRG_COM_TIM11_IRQn     = 26,     /*!< TIM1 Trigger and Commutation Interrupt and TIM11 global interrupt */
N  TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                                    */
N  TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                             */
N  TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                             */
N  TIM4_IRQn                   = 30,     /*!< TIM4 global Interrupt                                             */
N  I2C1_EV_IRQn                = 31,     /*!< I2C1 Event Interrupt                                              */
N  I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                              */
N  I2C2_EV_IRQn                = 33,     /*!< I2C2 Event Interrupt                                              */
N  I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                              */  
N  SPI1_IRQn                   = 35,     /*!< SPI1 global Interrupt                                             */
N  SPI2_IRQn                   = 36,     /*!< SPI2 global Interrupt                                             */
N  USART1_IRQn                 = 37,     /*!< USART1 global Interrupt                                           */
N  USART2_IRQn                 = 38,     /*!< USART2 global Interrupt                                           */
N  USART3_IRQn                 = 39,     /*!< USART3 global Interrupt                                           */
N  EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                                   */
N  RTC_Alarm_IRQn              = 41,     /*!< RTC Alarm (A and B) through EXTI Line Interrupt                   */
N  OTG_FS_WKUP_IRQn            = 42,     /*!< USB OTG FS Wakeup through EXTI line interrupt                     */    
N  TIM8_BRK_TIM12_IRQn         = 43,     /*!< TIM8 Break Interrupt and TIM12 global interrupt                   */
N  TIM8_UP_TIM13_IRQn          = 44,     /*!< TIM8 Update Interrupt and TIM13 global interrupt                  */
N  TIM8_TRG_COM_TIM14_IRQn     = 45,     /*!< TIM8 Trigger and Commutation Interrupt and TIM14 global interrupt */
N  TIM8_CC_IRQn                = 46,     /*!< TIM8 Capture Compare Interrupt                                    */
N  DMA1_Stream7_IRQn           = 47,     /*!< DMA1 Stream7 Interrupt                                            */
N  FSMC_IRQn                   = 48,     /*!< FSMC global Interrupt                                             */
N  SDIO_IRQn                   = 49,     /*!< SDIO global Interrupt                                             */
N  TIM5_IRQn                   = 50,     /*!< TIM5 global Interrupt                                             */
N  SPI3_IRQn                   = 51,     /*!< SPI3 global Interrupt                                             */
N  UART4_IRQn                  = 52,     /*!< UART4 global Interrupt                                            */
N  UART5_IRQn                  = 53,     /*!< UART5 global Interrupt                                            */
N  TIM6_DAC_IRQn               = 54,     /*!< TIM6 global and DAC1&2 underrun error  interrupts                 */
N  TIM7_IRQn                   = 55,     /*!< TIM7 global interrupt                                             */
N  DMA2_Stream0_IRQn           = 56,     /*!< DMA2 Stream 0 global Interrupt                                    */
N  DMA2_Stream1_IRQn           = 57,     /*!< DMA2 Stream 1 global Interrupt                                    */
N  DMA2_Stream2_IRQn           = 58,     /*!< DMA2 Stream 2 global Interrupt                                    */
N  DMA2_Stream3_IRQn           = 59,     /*!< DMA2 Stream 3 global Interrupt                                    */
N  DMA2_Stream4_IRQn           = 60,     /*!< DMA2 Stream 4 global Interrupt                                    */
N  ETH_IRQn                    = 61,     /*!< Ethernet global Interrupt                                         */
N  ETH_WKUP_IRQn               = 62,     /*!< Ethernet Wakeup through EXTI line Interrupt                       */
N  CAN2_TX_IRQn                = 63,     /*!< CAN2 TX Interrupt                                                 */
N  CAN2_RX0_IRQn               = 64,     /*!< CAN2 RX0 Interrupt                                                */
N  CAN2_RX1_IRQn               = 65,     /*!< CAN2 RX1 Interrupt                                                */
N  CAN2_SCE_IRQn               = 66,     /*!< CAN2 SCE Interrupt                                                */
N  OTG_FS_IRQn                 = 67,     /*!< USB OTG FS global Interrupt                                       */
N  DMA2_Stream5_IRQn           = 68,     /*!< DMA2 Stream 5 global interrupt                                    */
N  DMA2_Stream6_IRQn           = 69,     /*!< DMA2 Stream 6 global interrupt                                    */
N  DMA2_Stream7_IRQn           = 70,     /*!< DMA2 Stream 7 global interrupt                                    */
N  USART6_IRQn                 = 71,     /*!< USART6 global interrupt                                           */
N  I2C3_EV_IRQn                = 72,     /*!< I2C3 event interrupt                                              */
N  I2C3_ER_IRQn                = 73,     /*!< I2C3 error interrupt                                              */
N  OTG_HS_EP1_OUT_IRQn         = 74,     /*!< USB OTG HS End Point 1 Out global interrupt                       */
N  OTG_HS_EP1_IN_IRQn          = 75,     /*!< USB OTG HS End Point 1 In global interrupt                        */
N  OTG_HS_WKUP_IRQn            = 76,     /*!< USB OTG HS Wakeup through EXTI interrupt                          */
N  OTG_HS_IRQn                 = 77,     /*!< USB OTG HS global interrupt                                       */
N  DCMI_IRQn                   = 78,     /*!< DCMI global interrupt                                             */
N  CRYP_IRQn                   = 79,     /*!< CRYP crypto global interrupt                                      */
N  HASH_RNG_IRQn               = 80,     /*!< Hash and Rng global interrupt                                     */
N  FPU_IRQn                    = 81      /*!< FPU global interrupt                                              */
N#endif /* STM32F40_41xxx */
N
N#if defined (STM32F427_437xx)
X#if 0L
S  CAN1_TX_IRQn                = 19,     /*!< CAN1 TX Interrupt                                                 */
S  CAN1_RX0_IRQn               = 20,     /*!< CAN1 RX0 Interrupt                                                */
S  CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                                */
S  CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                                */
S  EXTI9_5_IRQn                = 23,     /*!< External Line[9:5] Interrupts                                     */
S  TIM1_BRK_TIM9_IRQn          = 24,     /*!< TIM1 Break interrupt and TIM9 global interrupt                    */
S  TIM1_UP_TIM10_IRQn          = 25,     /*!< TIM1 Update Interrupt and TIM10 global interrupt                  */
S  TIM1_TRG_COM_TIM11_IRQn     = 26,     /*!< TIM1 Trigger and Commutation Interrupt and TIM11 global interrupt */
S  TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                                    */
S  TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                             */
S  TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                             */
S  TIM4_IRQn                   = 30,     /*!< TIM4 global Interrupt                                             */
S  I2C1_EV_IRQn                = 31,     /*!< I2C1 Event Interrupt                                              */
S  I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                              */
S  I2C2_EV_IRQn                = 33,     /*!< I2C2 Event Interrupt                                              */
S  I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                              */  
S  SPI1_IRQn                   = 35,     /*!< SPI1 global Interrupt                                             */
S  SPI2_IRQn                   = 36,     /*!< SPI2 global Interrupt                                             */
S  USART1_IRQn                 = 37,     /*!< USART1 global Interrupt                                           */
S  USART2_IRQn                 = 38,     /*!< USART2 global Interrupt                                           */
S  USART3_IRQn                 = 39,     /*!< USART3 global Interrupt                                           */
S  EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                                   */
S  RTC_Alarm_IRQn              = 41,     /*!< RTC Alarm (A and B) through EXTI Line Interrupt                   */
S  OTG_FS_WKUP_IRQn            = 42,     /*!< USB OTG FS Wakeup through EXTI line interrupt                     */    
S  TIM8_BRK_TIM12_IRQn         = 43,     /*!< TIM8 Break Interrupt and TIM12 global interrupt                   */
S  TIM8_UP_TIM13_IRQn          = 44,     /*!< TIM8 Update Interrupt and TIM13 global interrupt                  */
S  TIM8_TRG_COM_TIM14_IRQn     = 45,     /*!< TIM8 Trigger and Commutation Interrupt and TIM14 global interrupt */
S  TIM8_CC_IRQn                = 46,     /*!< TIM8 Capture Compare Interrupt                                    */
S  DMA1_Stream7_IRQn           = 47,     /*!< DMA1 Stream7 Interrupt                                            */
S  FMC_IRQn                    = 48,     /*!< FMC global Interrupt                                              */
S  SDIO_IRQn                   = 49,     /*!< SDIO global Interrupt                                             */
S  TIM5_IRQn                   = 50,     /*!< TIM5 global Interrupt                                             */
S  SPI3_IRQn                   = 51,     /*!< SPI3 global Interrupt                                             */
S  UART4_IRQn                  = 52,     /*!< UART4 global Interrupt                                            */
S  UART5_IRQn                  = 53,     /*!< UART5 global Interrupt                                            */
S  TIM6_DAC_IRQn               = 54,     /*!< TIM6 global and DAC1&2 underrun error  interrupts                 */
S  TIM7_IRQn                   = 55,     /*!< TIM7 global interrupt                                             */
S  DMA2_Stream0_IRQn           = 56,     /*!< DMA2 Stream 0 global Interrupt                                    */
S  DMA2_Stream1_IRQn           = 57,     /*!< DMA2 Stream 1 global Interrupt                                    */
S  DMA2_Stream2_IRQn           = 58,     /*!< DMA2 Stream 2 global Interrupt                                    */
S  DMA2_Stream3_IRQn           = 59,     /*!< DMA2 Stream 3 global Interrupt                                    */
S  DMA2_Stream4_IRQn           = 60,     /*!< DMA2 Stream 4 global Interrupt                                    */
S  ETH_IRQn                    = 61,     /*!< Ethernet global Interrupt                                         */
S  ETH_WKUP_IRQn               = 62,     /*!< Ethernet Wakeup through EXTI line Interrupt                       */
S  CAN2_TX_IRQn                = 63,     /*!< CAN2 TX Interrupt                                                 */
S  CAN2_RX0_IRQn               = 64,     /*!< CAN2 RX0 Interrupt                                                */
S  CAN2_RX1_IRQn               = 65,     /*!< CAN2 RX1 Interrupt                                                */
S  CAN2_SCE_IRQn               = 66,     /*!< CAN2 SCE Interrupt                                                */
S  OTG_FS_IRQn                 = 67,     /*!< USB OTG FS global Interrupt                                       */
S  DMA2_Stream5_IRQn           = 68,     /*!< DMA2 Stream 5 global interrupt                                    */
S  DMA2_Stream6_IRQn           = 69,     /*!< DMA2 Stream 6 global interrupt                                    */
S  DMA2_Stream7_IRQn           = 70,     /*!< DMA2 Stream 7 global interrupt                                    */
S  USART6_IRQn                 = 71,     /*!< USART6 global interrupt                                           */
S  I2C3_EV_IRQn                = 72,     /*!< I2C3 event interrupt                                              */
S  I2C3_ER_IRQn                = 73,     /*!< I2C3 error interrupt                                              */
S  OTG_HS_EP1_OUT_IRQn         = 74,     /*!< USB OTG HS End Point 1 Out global interrupt                       */
S  OTG_HS_EP1_IN_IRQn          = 75,     /*!< USB OTG HS End Point 1 In global interrupt                        */
S  OTG_HS_WKUP_IRQn            = 76,     /*!< USB OTG HS Wakeup through EXTI interrupt                          */
S  OTG_HS_IRQn                 = 77,     /*!< USB OTG HS global interrupt                                       */
S  DCMI_IRQn                   = 78,     /*!< DCMI global interrupt                                             */
S  CRYP_IRQn                   = 79,     /*!< CRYP crypto global interrupt                                      */
S  HASH_RNG_IRQn               = 80,     /*!< Hash and Rng global interrupt                                     */
S  FPU_IRQn                    = 81,     /*!< FPU global interrupt                                              */
S  UART7_IRQn                  = 82,     /*!< UART7 global interrupt                                            */
S  UART8_IRQn                  = 83,     /*!< UART8 global interrupt                                            */
S  SPI4_IRQn                   = 84,     /*!< SPI4 global Interrupt                                             */
S  SPI5_IRQn                   = 85,     /*!< SPI5 global Interrupt                                             */
S  SPI6_IRQn                   = 86,     /*!< SPI6 global Interrupt                                             */
S  SAI1_IRQn                   = 87,     /*!< SAI1 global Interrupt                                             */
S  DMA2D_IRQn                  = 90      /*!< DMA2D global Interrupt                                            */   
N#endif /* STM32F427_437xx */
N    
N#if defined (STM32F429_439xx)
X#if 0L
S  CAN1_TX_IRQn                = 19,     /*!< CAN1 TX Interrupt                                                 */
S  CAN1_RX0_IRQn               = 20,     /*!< CAN1 RX0 Interrupt                                                */
S  CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                                */
S  CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                                */
S  EXTI9_5_IRQn                = 23,     /*!< External Line[9:5] Interrupts                                     */
S  TIM1_BRK_TIM9_IRQn          = 24,     /*!< TIM1 Break interrupt and TIM9 global interrupt                    */
S  TIM1_UP_TIM10_IRQn          = 25,     /*!< TIM1 Update Interrupt and TIM10 global interrupt                  */
S  TIM1_TRG_COM_TIM11_IRQn     = 26,     /*!< TIM1 Trigger and Commutation Interrupt and TIM11 global interrupt */
S  TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                                    */
S  TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                             */
S  TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                             */
S  TIM4_IRQn                   = 30,     /*!< TIM4 global Interrupt                                             */
S  I2C1_EV_IRQn                = 31,     /*!< I2C1 Event Interrupt                                              */
S  I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                              */
S  I2C2_EV_IRQn                = 33,     /*!< I2C2 Event Interrupt                                              */
S  I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                              */  
S  SPI1_IRQn                   = 35,     /*!< SPI1 global Interrupt                                             */
S  SPI2_IRQn                   = 36,     /*!< SPI2 global Interrupt                                             */
S  USART1_IRQn                 = 37,     /*!< USART1 global Interrupt                                           */
S  USART2_IRQn                 = 38,     /*!< USART2 global Interrupt                                           */
S  USART3_IRQn                 = 39,     /*!< USART3 global Interrupt                                           */
S  EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                                   */
S  RTC_Alarm_IRQn              = 41,     /*!< RTC Alarm (A and B) through EXTI Line Interrupt                   */
S  OTG_FS_WKUP_IRQn            = 42,     /*!< USB OTG FS Wakeup through EXTI line interrupt                     */    
S  TIM8_BRK_TIM12_IRQn         = 43,     /*!< TIM8 Break Interrupt and TIM12 global interrupt                   */
S  TIM8_UP_TIM13_IRQn          = 44,     /*!< TIM8 Update Interrupt and TIM13 global interrupt                  */
S  TIM8_TRG_COM_TIM14_IRQn     = 45,     /*!< TIM8 Trigger and Commutation Interrupt and TIM14 global interrupt */
S  TIM8_CC_IRQn                = 46,     /*!< TIM8 Capture Compare Interrupt                                    */
S  DMA1_Stream7_IRQn           = 47,     /*!< DMA1 Stream7 Interrupt                                            */
S  FMC_IRQn                    = 48,     /*!< FMC global Interrupt                                              */
S  SDIO_IRQn                   = 49,     /*!< SDIO global Interrupt                                             */
S  TIM5_IRQn                   = 50,     /*!< TIM5 global Interrupt                                             */
S  SPI3_IRQn                   = 51,     /*!< SPI3 global Interrupt                                             */
S  UART4_IRQn                  = 52,     /*!< UART4 global Interrupt                                            */
S  UART5_IRQn                  = 53,     /*!< UART5 global Interrupt                                            */
S  TIM6_DAC_IRQn               = 54,     /*!< TIM6 global and DAC1&2 underrun error  interrupts                 */
S  TIM7_IRQn                   = 55,     /*!< TIM7 global interrupt                                             */
S  DMA2_Stream0_IRQn           = 56,     /*!< DMA2 Stream 0 global Interrupt                                    */
S  DMA2_Stream1_IRQn           = 57,     /*!< DMA2 Stream 1 global Interrupt                                    */
S  DMA2_Stream2_IRQn           = 58,     /*!< DMA2 Stream 2 global Interrupt                                    */
S  DMA2_Stream3_IRQn           = 59,     /*!< DMA2 Stream 3 global Interrupt                                    */
S  DMA2_Stream4_IRQn           = 60,     /*!< DMA2 Stream 4 global Interrupt                                    */
S  ETH_IRQn                    = 61,     /*!< Ethernet global Interrupt                                         */
S  ETH_WKUP_IRQn               = 62,     /*!< Ethernet Wakeup through EXTI line Interrupt                       */
S  CAN2_TX_IRQn                = 63,     /*!< CAN2 TX Interrupt                                                 */
S  CAN2_RX0_IRQn               = 64,     /*!< CAN2 RX0 Interrupt                                                */
S  CAN2_RX1_IRQn               = 65,     /*!< CAN2 RX1 Interrupt                                                */
S  CAN2_SCE_IRQn               = 66,     /*!< CAN2 SCE Interrupt                                                */
S  OTG_FS_IRQn                 = 67,     /*!< USB OTG FS global Interrupt                                       */
S  DMA2_Stream5_IRQn           = 68,     /*!< DMA2 Stream 5 global interrupt                                    */
S  DMA2_Stream6_IRQn           = 69,     /*!< DMA2 Stream 6 global interrupt                                    */
S  DMA2_Stream7_IRQn           = 70,     /*!< DMA2 Stream 7 global interrupt                                    */
S  USART6_IRQn                 = 71,     /*!< USART6 global interrupt                                           */
S  I2C3_EV_IRQn                = 72,     /*!< I2C3 event interrupt                                              */
S  I2C3_ER_IRQn                = 73,     /*!< I2C3 error interrupt                                              */
S  OTG_HS_EP1_OUT_IRQn         = 74,     /*!< USB OTG HS End Point 1 Out global interrupt                       */
S  OTG_HS_EP1_IN_IRQn          = 75,     /*!< USB OTG HS End Point 1 In global interrupt                        */
S  OTG_HS_WKUP_IRQn            = 76,     /*!< USB OTG HS Wakeup through EXTI interrupt                          */
S  OTG_HS_IRQn                 = 77,     /*!< USB OTG HS global interrupt                                       */
S  DCMI_IRQn                   = 78,     /*!< DCMI global interrupt                                             */
S  CRYP_IRQn                   = 79,     /*!< CRYP crypto global interrupt                                      */
S  HASH_RNG_IRQn               = 80,     /*!< Hash and Rng global interrupt                                     */
S  FPU_IRQn                    = 81,     /*!< FPU global interrupt                                              */
S  UART7_IRQn                  = 82,     /*!< UART7 global interrupt                                            */
S  UART8_IRQn                  = 83,     /*!< UART8 global interrupt                                            */
S  SPI4_IRQn                   = 84,     /*!< SPI4 global Interrupt                                             */
S  SPI5_IRQn                   = 85,     /*!< SPI5 global Interrupt                                             */
S  SPI6_IRQn                   = 86,     /*!< SPI6 global Interrupt                                             */
S  SAI1_IRQn                   = 87,     /*!< SAI1 global Interrupt                                             */
S  LTDC_IRQn                   = 88,     /*!< LTDC global Interrupt                                             */
S  LTDC_ER_IRQn                = 89,     /*!< LTDC Error global Interrupt                                       */
S  DMA2D_IRQn                  = 90      /*!< DMA2D global Interrupt                                            */   
N#endif /* STM32F429_439xx */
N   
N#if defined (STM32F401xx)
X#if 0L
S  EXTI9_5_IRQn                = 23,     /*!< External Line[9:5] Interrupts                                     */
S  TIM1_BRK_TIM9_IRQn          = 24,     /*!< TIM1 Break interrupt and TIM9 global interrupt                    */
S  TIM1_UP_TIM10_IRQn          = 25,     /*!< TIM1 Update Interrupt and TIM10 global interrupt                  */
S  TIM1_TRG_COM_TIM11_IRQn     = 26,     /*!< TIM1 Trigger and Commutation Interrupt and TIM11 global interrupt */
S  TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                                    */
S  TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                             */
S  TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                             */
S  TIM4_IRQn                   = 30,     /*!< TIM4 global Interrupt                                             */
S  I2C1_EV_IRQn                = 31,     /*!< I2C1 Event Interrupt                                              */
S  I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                              */
S  I2C2_EV_IRQn                = 33,     /*!< I2C2 Event Interrupt                                              */
S  I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                              */  
S  SPI1_IRQn                   = 35,     /*!< SPI1 global Interrupt                                             */
S  SPI2_IRQn                   = 36,     /*!< SPI2 global Interrupt                                             */
S  USART1_IRQn                 = 37,     /*!< USART1 global Interrupt                                           */
S  USART2_IRQn                 = 38,     /*!< USART2 global Interrupt                                           */
S  EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                                   */
S  RTC_Alarm_IRQn              = 41,     /*!< RTC Alarm (A and B) through EXTI Line Interrupt                   */
S  OTG_FS_WKUP_IRQn            = 42,     /*!< USB OTG FS Wakeup through EXTI line interrupt                     */  
S  DMA1_Stream7_IRQn           = 47,     /*!< DMA1 Stream7 Interrupt                                            */
S  SDIO_IRQn                   = 49,     /*!< SDIO global Interrupt                                             */
S  TIM5_IRQn                   = 50,     /*!< TIM5 global Interrupt                                             */
S  SPI3_IRQn                   = 51,     /*!< SPI3 global Interrupt                                             */
S  DMA2_Stream0_IRQn           = 56,     /*!< DMA2 Stream 0 global Interrupt                                    */
S  DMA2_Stream1_IRQn           = 57,     /*!< DMA2 Stream 1 global Interrupt                                    */
S  DMA2_Stream2_IRQn           = 58,     /*!< DMA2 Stream 2 global Interrupt                                    */
S  DMA2_Stream3_IRQn           = 59,     /*!< DMA2 Stream 3 global Interrupt                                    */
S  DMA2_Stream4_IRQn           = 60,     /*!< DMA2 Stream 4 global Interrupt                                    */
S  OTG_FS_IRQn                 = 67,     /*!< USB OTG FS global Interrupt                                       */
S  DMA2_Stream5_IRQn           = 68,     /*!< DMA2 Stream 5 global interrupt                                    */
S  DMA2_Stream6_IRQn           = 69,     /*!< DMA2 Stream 6 global interrupt                                    */
S  DMA2_Stream7_IRQn           = 70,     /*!< DMA2 Stream 7 global interrupt                                    */
S  USART6_IRQn                 = 71,     /*!< USART6 global interrupt                                           */
S  I2C3_EV_IRQn                = 72,     /*!< I2C3 event interrupt                                              */
S  I2C3_ER_IRQn                = 73,     /*!< I2C3 error interrupt                                              */
S  FPU_IRQn                    = 81,      /*!< FPU global interrupt                                             */
S  SPI4_IRQn                   = 84       /*!< SPI4 global Interrupt                                            */
N#endif /* STM32F401xx */
N
N} IRQn_Type;
N
N/**
N  * @}
N  */
N
N#include "core_cm4.h"             /* Cortex-M4 processor and core peripherals */
L 1 "..\..\Libraries\CMSIS\Include\core_cm4.h" 1
N/**************************************************************************//**
N * @file     core_cm4.h
N * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
N * @version  V3.20
N * @date     25. February 2013
N *
N * @note
N *
N ******************************************************************************/
N/* Copyright (c) 2009 - 2013 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#if defined ( __ICCARM__ )
X#if 0L
S #pragma system_include  /* treat file as system include file for MISRA check */
N#endif
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N#ifndef __CORE_CM4_H_GENERIC
N#define __CORE_CM4_H_GENERIC
N
N/** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
N  CMSIS violates the following MISRA-C:2004 rules:
N
N   \li Required Rule 8.5, object/function definition in header file.<br>
N     Function definitions in header files are used to allow 'inlining'.
N
N   \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
N     Unions are used for effective representation of core registers.
N
N   \li Advisory Rule 19.7, Function-like macro defined.<br>
N     Function-like macros are used to allow more efficient code.
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/** \ingroup Cortex_M4
N  @{
N */
N
N/*  CMSIS CM4 definitions */
N#define __CM4_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL main version   */
N#define __CM4_CMSIS_VERSION_SUB   (0x20)                                   /*!< [15:0]  CMSIS HAL sub version    */
N#define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16) | \
N                                    __CM4_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version number         */
X#define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16) |                                     __CM4_CMSIS_VERSION_SUB          )      
N
N#define __CORTEX_M                (0x04)                                   /*!< Cortex-M Core                    */
N
N
N#if   defined ( __CC_ARM )
X#if   1L
N  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler          */
N  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler       */
N  #define __STATIC_INLINE  static __inline
N
N#elif defined ( __ICCARM__ )
X#elif 0L
S  #define __ASM            __asm                                      /*!< asm keyword for IAR Compiler          */
S  #define __INLINE         inline                                     /*!< inline keyword for IAR Compiler. Only available in High optimization mode! */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __TMS470__ )
S  #define __ASM            __asm                                      /*!< asm keyword for TI CCS Compiler       */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __GNUC__ )
S  #define __ASM            __asm                                      /*!< asm keyword for GNU Compiler          */
S  #define __INLINE         inline                                     /*!< inline keyword for GNU Compiler       */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __TASKING__ )
S  #define __ASM            __asm                                      /*!< asm keyword for TASKING Compiler      */
S  #define __INLINE         inline                                     /*!< inline keyword for TASKING Compiler   */
S  #define __STATIC_INLINE  static inline
S
N#endif
N
N/** __FPU_USED indicates whether an FPU is used or not. For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and functions.
N*/
N#if defined ( __CC_ARM )
X#if 1L
N  #if defined __TARGET_FPU_VFP
X  #if 1L
N    #if (__FPU_PRESENT == 1)
X    #if (1 == 1)
N      #define __FPU_USED       1
N    #else
S      #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0
N    #endif
N  #else
S    #define __FPU_USED         0
N  #endif
N
N#elif defined ( __ICCARM__ )
X#elif 0L
S  #if defined __ARMVFP__
S    #if (__FPU_PRESENT == 1)
S      #define __FPU_USED       1
S    #else
S      #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0
S    #endif
S  #else
S    #define __FPU_USED         0
S  #endif
S
S#elif defined ( __TMS470__ )
S  #if defined __TI_VFP_SUPPORT__
S    #if (__FPU_PRESENT == 1)
S      #define __FPU_USED       1
S    #else
S      #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0
S    #endif
S  #else
S    #define __FPU_USED         0
S  #endif
S
S#elif defined ( __GNUC__ )
S  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
S    #if (__FPU_PRESENT == 1)
S      #define __FPU_USED       1
S    #else
S      #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0
S    #endif
S  #else
S    #define __FPU_USED         0
S  #endif
S
S#elif defined ( __TASKING__ )
S  #if defined __FPU_VFP__
S    #if (__FPU_PRESENT == 1)
S      #define __FPU_USED       1
S    #else
S      #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S      #define __FPU_USED       0
S    #endif
S  #else
S    #define __FPU_USED         0
S  #endif
N#endif
N
N#include <stdint.h>                      /* standard types definitions                      */
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 169 "..\..\Libraries\CMSIS\Include\core_cm4.h" 2
N#include <core_cmInstr.h>                /* Core Instruction Access                         */
L 1 "..\..\Libraries\CMSIS\Include\core_cmInstr.h" 1
N/**************************************************************************//**
N * @file     core_cmInstr.h
N * @brief    CMSIS Cortex-M Core Instruction Access Header File
N * @version  V3.20
N * @date     05. March 2013
N *
N * @note
N *
N ******************************************************************************/
N/* Copyright (c) 2009 - 2013 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#ifndef __CORE_CMINSTR_H
N#define __CORE_CMINSTR_H
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N#if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
X#if   1L  
N/* ARM armcc specific functions */
N
N#if (__ARMCC_VERSION < 400677)
X#if (5060960 < 400677)
S  #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
N#endif
N
N
N/** \brief  No Operation
N
N    No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/** \brief  Wait For Interrupt
N
N    Wait For Interrupt is a hint instruction that suspends execution
N    until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/** \brief  Wait For Event
N
N    Wait For Event is a hint instruction that permits the processor to enter
N    a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/** \brief  Send Event
N
N    Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/** \brief  Instruction Synchronization Barrier
N
N    Instruction Synchronization Barrier flushes the pipeline in the processor,
N    so that all instructions following the ISB are fetched from cache or
N    memory, after the instruction has been completed.
N */
N#define __ISB()                           __isb(0xF)
N
N
N/** \brief  Data Synchronization Barrier
N
N    This function acts as a special kind of Data Memory Barrier.
N    It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB()                           __dsb(0xF)
N
N
N/** \brief  Data Memory Barrier
N
N    This function ensures the apparent order of the explicit memory operations before
N    and after the instruction, without ensuring their completion.
N */
N#define __DMB()                           __dmb(0xF)
N
N
N/** \brief  Reverse byte order (32 bit)
N
N    This function reverses the byte order in integer value.
N
N    \param [in]    value  Value to reverse
N    \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/** \brief  Reverse byte order (16 bit)
N
N    This function reverses the byte order in two unsigned short values.
N
N    \param [in]    value  Value to reverse
N    \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
X__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif
N
N/** \brief  Reverse byte order in signed short value
N
N    This function reverses the byte order in a signed short value with sign extension to integer.
N
N    \param [in]    value  Value to reverse
N    \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
X__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif
N
N
N/** \brief  Rotate Right in unsigned value (32 bit)
N
N    This function Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
N
N    \param [in]    value  Value to rotate
N    \param [in]    value  Number of Bits to rotate
N    \return               Rotated value
N */
N#define __ROR                             __ror
N
N
N/** \brief  Breakpoint
N
N    This function causes the processor to enter Debug state.
N    Debug tools can use this to investigate system state when the instruction at a particular address is reached.
N
N    \param [in]    value  is ignored by the processor.
N                   If required, a debugger can use it to store additional information about the breakpoint.
N */
N#define __BKPT(value)                       __breakpoint(value)
N
N
N#if       (__CORTEX_M >= 0x03)
X#if       ((0x04) >= 0x03)
N
N/** \brief  Reverse bit order of value
N
N    This function reverses the bit order of the given value.
N
N    \param [in]    value  Value to reverse
N    \return               Reversed value
N */
N#define __RBIT                            __rbit
N
N
N/** \brief  LDR Exclusive (8 bit)
N
N    This function performs a exclusive LDR command for 8 bit value.
N
N    \param [in]    ptr  Pointer to data
N    \return             value of type uint8_t at (*ptr)
N */
N#define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
N
N
N/** \brief  LDR Exclusive (16 bit)
N
N    This function performs a exclusive LDR command for 16 bit values.
N
N    \param [in]    ptr  Pointer to data
N    \return        value of type uint16_t at (*ptr)
N */
N#define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
N
N
N/** \brief  LDR Exclusive (32 bit)
N
N    This function performs a exclusive LDR command for 32 bit values.
N
N    \param [in]    ptr  Pointer to data
N    \return        value of type uint32_t at (*ptr)
N */
N#define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
N
N
N/** \brief  STR Exclusive (8 bit)
N
N    This function performs a exclusive STR command for 8 bit values.
N
N    \param [in]  value  Value to store
N    \param [in]    ptr  Pointer to location
N    \return          0  Function succeeded
N    \return          1  Function failed
N */
N#define __STREXB(value, ptr)              __strex(value, ptr)
N
N
N/** \brief  STR Exclusive (16 bit)
N
N    This function performs a exclusive STR command for 16 bit values.
N
N    \param [in]  value  Value to store
N    \param [in]    ptr  Pointer to location
N    \return          0  Function succeeded
N    \return          1  Function failed
N */
N#define __STREXH(value, ptr)              __strex(value, ptr)
N
N
N/** \brief  STR Exclusive (32 bit)
N
N    This function performs a exclusive STR command for 32 bit values.
N
N    \param [in]  value  Value to store
N    \param [in]    ptr  Pointer to location
N    \return          0  Function succeeded
N    \return          1  Function failed
N */
N#define __STREXW(value, ptr)              __strex(value, ptr)
N
N
N/** \brief  Remove the exclusive lock
N
N    This function removes the exclusive lock which is created by LDREX.
N
N */
N#define __CLREX                           __clrex
N
N
N/** \brief  Signed Saturate
N
N    This function saturates a signed value.
N
N    \param [in]  value  Value to be saturated
N    \param [in]    sat  Bit position to saturate to (1..32)
N    \return             Saturated value
N */
N#define __SSAT                            __ssat
N
N
N/** \brief  Unsigned Saturate
N
N    This function saturates an unsigned value.
N
N    \param [in]  value  Value to be saturated
N    \param [in]    sat  Bit position to saturate to (0..31)
N    \return             Saturated value
N */
N#define __USAT                            __usat
N
N
N/** \brief  Count leading zeros
N
N    This function counts the number of leading zeros of a data value.
N
N    \param [in]  value  Value to count the leading zeros
N    \return             number of leading zeros in value
N */
N#define __CLZ                             __clz
N
N#endif /* (__CORTEX_M >= 0x03) */
N
N
N
N#elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
X#elif 0L  
S/* IAR iccarm specific functions */
S
S#include <cmsis_iar.h>
S
S
S#elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
S/* TI CCS specific functions */
S
S#include <cmsis_ccs.h>
S
S
S#elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
S/* GNU gcc specific functions */
S
S/* Define macros for porting to both thumb1 and thumb2.
S * For thumb1, use low register (r0-r7), specified by constrant "l"
S * Otherwise, use general registers, specified by constrant "r" */
S#if defined (__thumb__) && !defined (__thumb2__)
S#define __CMSIS_GCC_OUT_REG(r) "=l" (r)
S#define __CMSIS_GCC_USE_REG(r) "l" (r)
S#else
S#define __CMSIS_GCC_OUT_REG(r) "=r" (r)
S#define __CMSIS_GCC_USE_REG(r) "r" (r)
S#endif
S
S/** \brief  No Operation
S
S    No Operation does nothing. This instruction can be used for code alignment purposes.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
S{
S  __ASM volatile ("nop");
S}
S
S
S/** \brief  Wait For Interrupt
S
S    Wait For Interrupt is a hint instruction that suspends execution
S    until one of a number of events occurs.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
S{
S  __ASM volatile ("wfi");
S}
S
S
S/** \brief  Wait For Event
S
S    Wait For Event is a hint instruction that permits the processor to enter
S    a low-power state until one of a number of events occurs.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
S{
S  __ASM volatile ("wfe");
S}
S
S
S/** \brief  Send Event
S
S    Send Event is a hint instruction. It causes an event to be signaled to the CPU.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
S{
S  __ASM volatile ("sev");
S}
S
S
S/** \brief  Instruction Synchronization Barrier
S
S    Instruction Synchronization Barrier flushes the pipeline in the processor,
S    so that all instructions following the ISB are fetched from cache or
S    memory, after the instruction has been completed.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
S{
S  __ASM volatile ("isb");
S}
S
S
S/** \brief  Data Synchronization Barrier
S
S    This function acts as a special kind of Data Memory Barrier.
S    It completes when all explicit memory accesses before this instruction complete.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
S{
S  __ASM volatile ("dsb");
S}
S
S
S/** \brief  Data Memory Barrier
S
S    This function ensures the apparent order of the explicit memory operations before
S    and after the instruction, without ensuring their completion.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
S{
S  __ASM volatile ("dmb");
S}
S
S
S/** \brief  Reverse byte order (32 bit)
S
S    This function reverses the byte order in integer value.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
S{
S#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
S  return __builtin_bswap32(value);
S#else
S  uint32_t result;
S
S  __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
S  return(result);
S#endif
S}
S
S
S/** \brief  Reverse byte order (16 bit)
S
S    This function reverses the byte order in two unsigned short values.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV16(uint32_t value)
S{
S  uint32_t result;
S
S  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
S  return(result);
S}
S
S
S/** \brief  Reverse byte order in signed short value
S
S    This function reverses the byte order in a signed short value with sign extension to integer.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE int32_t __REVSH(int32_t value)
S{
S#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
S  return (short)__builtin_bswap16(value);
S#else
S  uint32_t result;
S
S  __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
S  return(result);
S#endif
S}
S
S
S/** \brief  Rotate Right in unsigned value (32 bit)
S
S    This function Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
S
S    \param [in]    value  Value to rotate
S    \param [in]    value  Number of Bits to rotate
S    \return               Rotated value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
S{
S  return (op1 >> op2) | (op1 << (32 - op2)); 
S}
S
S
S/** \brief  Breakpoint
S
S    This function causes the processor to enter Debug state.
S    Debug tools can use this to investigate system state when the instruction at a particular address is reached.
S
S    \param [in]    value  is ignored by the processor.
S                   If required, a debugger can use it to store additional information about the breakpoint.
S */
S#define __BKPT(value)                       __ASM volatile ("bkpt "#value)
S
S
S#if       (__CORTEX_M >= 0x03)
S
S/** \brief  Reverse bit order of value
S
S    This function reverses the bit order of the given value.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
S{
S  uint32_t result;
S
S   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
S   return(result);
S}
S
S
S/** \brief  LDR Exclusive (8 bit)
S
S    This function performs a exclusive LDR command for 8 bit value.
S
S    \param [in]    ptr  Pointer to data
S    \return             value of type uint8_t at (*ptr)
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __LDREXB(volatile uint8_t *addr)
S{
S    uint32_t result;
S
S#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
S   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
S#else
S    /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
S       accepted by assembler. So has to use following less efficient pattern.
S    */
S   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
S#endif
S   return(result);
S}
S
S
S/** \brief  LDR Exclusive (16 bit)
S
S    This function performs a exclusive LDR command for 16 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint16_t at (*ptr)
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint16_t __LDREXH(volatile uint16_t *addr)
S{
S    uint32_t result;
S
S#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
S   __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
S#else
S    /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
S       accepted by assembler. So has to use following less efficient pattern.
S    */
S   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
S#endif
S   return(result);
S}
S
S
S/** \brief  LDR Exclusive (32 bit)
S
S    This function performs a exclusive LDR command for 32 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint32_t at (*ptr)
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
S{
S    uint32_t result;
S
S   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
S   return(result);
S}
S
S
S/** \brief  STR Exclusive (8 bit)
S
S    This function performs a exclusive STR command for 8 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
S{
S   uint32_t result;
S
S   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
S   return(result);
S}
S
S
S/** \brief  STR Exclusive (16 bit)
S
S    This function performs a exclusive STR command for 16 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
S{
S   uint32_t result;
S
S   __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
S   return(result);
S}
S
S
S/** \brief  STR Exclusive (32 bit)
S
S    This function performs a exclusive STR command for 32 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
S{
S   uint32_t result;
S
S   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
S   return(result);
S}
S
S
S/** \brief  Remove the exclusive lock
S
S    This function removes the exclusive lock which is created by LDREX.
S
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __CLREX(void)
S{
S  __ASM volatile ("clrex" ::: "memory");
S}
S
S
S/** \brief  Signed Saturate
S
S    This function saturates a signed value.
S
S    \param [in]  value  Value to be saturated
S    \param [in]    sat  Bit position to saturate to (1..32)
S    \return             Saturated value
S */
S#define __SSAT(ARG1,ARG2) \
S({                          \
S  uint32_t __RES, __ARG1 = (ARG1); \
S  __ASM ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
S  __RES; \
S })
X#define __SSAT(ARG1,ARG2) ({                            uint32_t __RES, __ARG1 = (ARG1);   __ASM ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) );   __RES;  })
S
S
S/** \brief  Unsigned Saturate
S
S    This function saturates an unsigned value.
S
S    \param [in]  value  Value to be saturated
S    \param [in]    sat  Bit position to saturate to (0..31)
S    \return             Saturated value
S */
S#define __USAT(ARG1,ARG2) \
S({                          \
S  uint32_t __RES, __ARG1 = (ARG1); \
S  __ASM ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
S  __RES; \
S })
X#define __USAT(ARG1,ARG2) ({                            uint32_t __RES, __ARG1 = (ARG1);   __ASM ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) );   __RES;  })
S
S
S/** \brief  Count leading zeros
S
S    This function counts the number of leading zeros of a data value.
S
S    \param [in]  value  Value to count the leading zeros
S    \return             number of leading zeros in value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
S{
S   uint32_t result;
S
S  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
S  return(result);
S}
S
S#endif /* (__CORTEX_M >= 0x03) */
S
S
S
S
S#elif defined ( __TASKING__ ) /*------------------ TASKING Compiler --------------*/
S/* TASKING carm specific functions */
S
S/*
S * The CMSIS functions have been implemented as intrinsics in the compiler.
S * Please use "carm -?i" to get an up to date list of all intrinsics,
S * Including the CMSIS ones.
S */
S
N#endif
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N#endif /* __CORE_CMINSTR_H */
L 170 "..\..\Libraries\CMSIS\Include\core_cm4.h" 2
N#include <core_cmFunc.h>                 /* Core Function Access                            */
L 1 "..\..\Libraries\CMSIS\Include\core_cmFunc.h" 1
N/**************************************************************************//**
N * @file     core_cmFunc.h
N * @brief    CMSIS Cortex-M Core Function Access Header File
N * @version  V3.20
N * @date     25. February 2013
N *
N * @note
N *
N ******************************************************************************/
N/* Copyright (c) 2009 - 2013 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#ifndef __CORE_CMFUNC_H
N#define __CORE_CMFUNC_H
N
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N#if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
X#if   1L  
N/* ARM armcc specific functions */
N
N#if (__ARMCC_VERSION < 400677)
X#if (5060960 < 400677)
S  #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
N#endif
N
N/* intrinsic void __enable_irq();     */
N/* intrinsic void __disable_irq();    */
N
N/** \brief  Get Control Register
N
N    This function returns the content of the Control Register.
N
N    \return               Control Register value
N */
N__STATIC_INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N
N/** \brief  Set Control Register
N
N    This function writes the given value to the Control Register.
N
N    \param [in]    control  Control Register value to set
N */
N__STATIC_INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N
N/** \brief  Get IPSR Register
N
N    This function returns the content of the IPSR Register.
N
N    \return               IPSR Register value
N */
N__STATIC_INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N
N
N/** \brief  Get APSR Register
N
N    This function returns the content of the APSR Register.
N
N    \return               APSR Register value
N */
N__STATIC_INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N
N
N/** \brief  Get xPSR Register
N
N    This function returns the content of the xPSR Register.
N
N    \return               xPSR Register value
N */
N__STATIC_INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N
N
N/** \brief  Get Process Stack Pointer
N
N    This function returns the current value of the Process Stack Pointer (PSP).
N
N    \return               PSP Register value
N */
N__STATIC_INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N
N
N/** \brief  Set Process Stack Pointer
N
N    This function assigns the given value to the Process Stack Pointer (PSP).
N
N    \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N
N
N/** \brief  Get Main Stack Pointer
N
N    This function returns the current value of the Main Stack Pointer (MSP).
N
N    \return               MSP Register value
N */
N__STATIC_INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N
N
N/** \brief  Set Main Stack Pointer
N
N    This function assigns the given value to the Main Stack Pointer (MSP).
N
N    \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N
N
N/** \brief  Get Priority Mask
N
N    This function returns the current state of the priority mask bit from the Priority Mask Register.
N
N    \return               Priority Mask value
N */
N__STATIC_INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N
N/** \brief  Set Priority Mask
N
N    This function assigns the given value to the Priority Mask Register.
N
N    \param [in]    priMask  Priority Mask
N */
N__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N
N#if       (__CORTEX_M >= 0x03)
X#if       ((0x04) >= 0x03)
N
N/** \brief  Enable FIQ
N
N    This function enables FIQ interrupts by clearing the F-bit in the CPSR.
N    Can only be executed in Privileged modes.
N */
N#define __enable_fault_irq                __enable_fiq
N
N
N/** \brief  Disable FIQ
N
N    This function disables FIQ interrupts by setting the F-bit in the CPSR.
N    Can only be executed in Privileged modes.
N */
N#define __disable_fault_irq               __disable_fiq
N
N
N/** \brief  Get Base Priority
N
N    This function returns the current value of the Base Priority register.
N
N    \return               Base Priority register value
N */
N__STATIC_INLINE uint32_t  __get_BASEPRI(void)
Xstatic __inline uint32_t  __get_BASEPRI(void)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  return(__regBasePri);
N}
N
N
N/** \brief  Set Base Priority
N
N    This function assigns the given value to the Base Priority register.
N
N    \param [in]    basePri  Base Priority value to set
N */
N__STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
Xstatic __inline void __set_BASEPRI(uint32_t basePri)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  __regBasePri = (basePri & 0xff);
N}
N
N
N/** \brief  Get Fault Mask
N
N    This function returns the current value of the Fault Mask register.
N
N    \return               Fault Mask register value
N */
N__STATIC_INLINE uint32_t __get_FAULTMASK(void)
Xstatic __inline uint32_t __get_FAULTMASK(void)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  return(__regFaultMask);
N}
N
N
N/** \brief  Set Fault Mask
N
N    This function assigns the given value to the Fault Mask register.
N
N    \param [in]    faultMask  Fault Mask value to set
N */
N__STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
Xstatic __inline void __set_FAULTMASK(uint32_t faultMask)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  __regFaultMask = (faultMask & (uint32_t)1);
N}
N
N#endif /* (__CORTEX_M >= 0x03) */
N
N
N#if       (__CORTEX_M == 0x04)
X#if       ((0x04) == 0x04)
N
N/** \brief  Get FPSCR
N
N    This function returns the current value of the Floating Point Status/Control register.
N
N    \return               Floating Point Status/Control register value
N */
N__STATIC_INLINE uint32_t __get_FPSCR(void)
Xstatic __inline uint32_t __get_FPSCR(void)
N{
N#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
X#if (1 == 1) && (1 == 1)
N  register uint32_t __regfpscr         __ASM("fpscr");
X  register uint32_t __regfpscr         __asm("fpscr");
N  return(__regfpscr);
N#else
S   return(0);
N#endif
N}
N
N
N/** \brief  Set FPSCR
N
N    This function assigns the given value to the Floating Point Status/Control register.
N
N    \param [in]    fpscr  Floating Point Status/Control value to set
N */
N__STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
Xstatic __inline void __set_FPSCR(uint32_t fpscr)
N{
N#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
X#if (1 == 1) && (1 == 1)
N  register uint32_t __regfpscr         __ASM("fpscr");
X  register uint32_t __regfpscr         __asm("fpscr");
N  __regfpscr = (fpscr);
N#endif
N}
N
N#endif /* (__CORTEX_M == 0x04) */
N
N
N#elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
X#elif 0L  
S/* IAR iccarm specific functions */
S
S#include <cmsis_iar.h>
S
S
S#elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
S/* TI CCS specific functions */
S
S#include <cmsis_ccs.h>
S
S
S#elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
S/* GNU gcc specific functions */
S
S/** \brief  Enable IRQ Interrupts
S
S  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
S  Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
S{
S  __ASM volatile ("cpsie i" : : : "memory");
S}
S
S
S/** \brief  Disable IRQ Interrupts
S
S  This function disables IRQ interrupts by setting the I-bit in the CPSR.
S  Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
S{
S  __ASM volatile ("cpsid i" : : : "memory");
S}
S
S
S/** \brief  Get Control Register
S
S    This function returns the content of the Control Register.
S
S    \return               Control Register value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, control" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Control Register
S
S    This function writes the given value to the Control Register.
S
S    \param [in]    control  Control Register value to set
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
S{
S  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
S}
S
S
S/** \brief  Get IPSR Register
S
S    This function returns the content of the IPSR Register.
S
S    \return               IPSR Register value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Get APSR Register
S
S    This function returns the content of the APSR Register.
S
S    \return               APSR Register value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, apsr" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Get xPSR Register
S
S    This function returns the content of the xPSR Register.
S
S    \return               xPSR Register value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Get Process Stack Pointer
S
S    This function returns the current value of the Process Stack Pointer (PSP).
S
S    \return               PSP Register value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
S{
S  register uint32_t result;
S
S  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Process Stack Pointer
S
S    This function assigns the given value to the Process Stack Pointer (PSP).
S
S    \param [in]    topOfProcStack  Process Stack Pointer value to set
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
S{
S  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
S}
S
S
S/** \brief  Get Main Stack Pointer
S
S    This function returns the current value of the Main Stack Pointer (MSP).
S
S    \return               MSP Register value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
S{
S  register uint32_t result;
S
S  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Main Stack Pointer
S
S    This function assigns the given value to the Main Stack Pointer (MSP).
S
S    \param [in]    topOfMainStack  Main Stack Pointer value to set
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
S{
S  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
S}
S
S
S/** \brief  Get Priority Mask
S
S    This function returns the current state of the priority mask bit from the Priority Mask Register.
S
S    \return               Priority Mask value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, primask" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Priority Mask
S
S    This function assigns the given value to the Priority Mask Register.
S
S    \param [in]    priMask  Priority Mask
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
S{
S  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
S}
S
S
S#if       (__CORTEX_M >= 0x03)
S
S/** \brief  Enable FIQ
S
S    This function enables FIQ interrupts by clearing the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
S{
S  __ASM volatile ("cpsie f" : : : "memory");
S}
S
S
S/** \brief  Disable FIQ
S
S    This function disables FIQ interrupts by setting the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
S{
S  __ASM volatile ("cpsid f" : : : "memory");
S}
S
S
S/** \brief  Get Base Priority
S
S    This function returns the current value of the Base Priority register.
S
S    \return               Base Priority register value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Base Priority
S
S    This function assigns the given value to the Base Priority register.
S
S    \param [in]    basePri  Base Priority value to set
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
S{
S  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
S}
S
S
S/** \brief  Get Fault Mask
S
S    This function returns the current value of the Fault Mask register.
S
S    \return               Fault Mask register value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Fault Mask
S
S    This function assigns the given value to the Fault Mask register.
S
S    \param [in]    faultMask  Fault Mask value to set
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
S{
S  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
S}
S
S#endif /* (__CORTEX_M >= 0x03) */
S
S
S#if       (__CORTEX_M == 0x04)
S
S/** \brief  Get FPSCR
S
S    This function returns the current value of the Floating Point Status/Control register.
S
S    \return               Floating Point Status/Control register value
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
S{
S#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
S  uint32_t result;
S
S  /* Empty asm statement works as a scheduling barrier */
S  __ASM volatile ("");
S  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
S  __ASM volatile ("");
S  return(result);
S#else
S   return(0);
S#endif
S}
S
S
S/** \brief  Set FPSCR
S
S    This function assigns the given value to the Floating Point Status/Control register.
S
S    \param [in]    fpscr  Floating Point Status/Control value to set
S */
S__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
S{
S#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
S  /* Empty asm statement works as a scheduling barrier */
S  __ASM volatile ("");
S  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
S  __ASM volatile ("");
S#endif
S}
S
S#endif /* (__CORTEX_M == 0x04) */
S
S
S#elif defined ( __TASKING__ ) /*------------------ TASKING Compiler --------------*/
S/* TASKING carm specific functions */
S
S/*
S * The CMSIS functions have been implemented as intrinsics in the compiler.
S * Please use "carm -?i" to get an up to date list of all instrinsics,
S * Including the CMSIS ones.
S */
S
N#endif
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N#endif /* __CORE_CMFUNC_H */
L 171 "..\..\Libraries\CMSIS\Include\core_cm4.h" 2
N#include <core_cm4_simd.h>               /* Compiler specific SIMD Intrinsics               */
L 1 "..\..\Libraries\CMSIS\Include\core_cm4_simd.h" 1
N/**************************************************************************//**
N * @file     core_cm4_simd.h
N * @brief    CMSIS Cortex-M4 SIMD Header File
N * @version  V3.20
N * @date     25. February 2013
N *
N * @note
N *
N ******************************************************************************/
N/* Copyright (c) 2009 - 2013 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N#ifndef __CORE_CM4_SIMD_H
N#define __CORE_CM4_SIMD_H
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N ******************************************************************************/
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N#if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
X#if   1L  
N/* ARM armcc specific functions */
N
N/*------ CM4 SIMD Intrinsics -----------------------------------------------------*/
N#define __SADD8                           __sadd8
N#define __QADD8                           __qadd8
N#define __SHADD8                          __shadd8
N#define __UADD8                           __uadd8
N#define __UQADD8                          __uqadd8
N#define __UHADD8                          __uhadd8
N#define __SSUB8                           __ssub8
N#define __QSUB8                           __qsub8
N#define __SHSUB8                          __shsub8
N#define __USUB8                           __usub8
N#define __UQSUB8                          __uqsub8
N#define __UHSUB8                          __uhsub8
N#define __SADD16                          __sadd16
N#define __QADD16                          __qadd16
N#define __SHADD16                         __shadd16
N#define __UADD16                          __uadd16
N#define __UQADD16                         __uqadd16
N#define __UHADD16                         __uhadd16
N#define __SSUB16                          __ssub16
N#define __QSUB16                          __qsub16
N#define __SHSUB16                         __shsub16
N#define __USUB16                          __usub16
N#define __UQSUB16                         __uqsub16
N#define __UHSUB16                         __uhsub16
N#define __SASX                            __sasx
N#define __QASX                            __qasx
N#define __SHASX                           __shasx
N#define __UASX                            __uasx
N#define __UQASX                           __uqasx
N#define __UHASX                           __uhasx
N#define __SSAX                            __ssax
N#define __QSAX                            __qsax
N#define __SHSAX                           __shsax
N#define __USAX                            __usax
N#define __UQSAX                           __uqsax
N#define __UHSAX                           __uhsax
N#define __USAD8                           __usad8
N#define __USADA8                          __usada8
N#define __SSAT16                          __ssat16
N#define __USAT16                          __usat16
N#define __UXTB16                          __uxtb16
N#define __UXTAB16                         __uxtab16
N#define __SXTB16                          __sxtb16
N#define __SXTAB16                         __sxtab16
N#define __SMUAD                           __smuad
N#define __SMUADX                          __smuadx
N#define __SMLAD                           __smlad
N#define __SMLADX                          __smladx
N#define __SMLALD                          __smlald
N#define __SMLALDX                         __smlaldx
N#define __SMUSD                           __smusd
N#define __SMUSDX                          __smusdx
N#define __SMLSD                           __smlsd
N#define __SMLSDX                          __smlsdx
N#define __SMLSLD                          __smlsld
N#define __SMLSLDX                         __smlsldx
N#define __SEL                             __sel
N#define __QADD                            __qadd
N#define __QSUB                            __qsub
N
N#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |  \
N                                           ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
X#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |                                             ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
N
N#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |  \
N                                           ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
X#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |                                             ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
N
N#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) + \
N                                                      ((int64_t)(ARG3) << 32)      ) >> 32))
X#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) +                                                       ((int64_t)(ARG3) << 32)      ) >> 32))
N
N/*-- End CM4 SIMD Intrinsics -----------------------------------------------------*/
N
N
N
N#elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
X#elif 0L  
S/* IAR iccarm specific functions */
S
S/*------ CM4 SIMD Intrinsics -----------------------------------------------------*/
S#include <cmsis_iar.h>
S
S/*-- End CM4 SIMD Intrinsics -----------------------------------------------------*/
S
S
S
S#elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
S/* TI CCS specific functions */
S
S/*------ CM4 SIMD Intrinsics -----------------------------------------------------*/
S#include <cmsis_ccs.h>
S
S/*-- End CM4 SIMD Intrinsics -----------------------------------------------------*/
S
S
S
S#elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
S/* GNU gcc specific functions */
S
S/*------ CM4 SIMD Intrinsics -----------------------------------------------------*/
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SADD8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("sadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("qadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHADD8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("shadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UADD8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UQADD8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uqadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UHADD8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uhadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SSUB8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("ssub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QSUB8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHSUB8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("shsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __USUB8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("usub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UQSUB8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uqsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UHSUB8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uhsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SADD16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHADD16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UADD16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UQADD16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uqadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UHADD16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SSUB16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHSUB16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __USUB16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("usub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UQSUB16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uqsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UHSUB16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uhsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SASX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("sasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QASX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHASX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UASX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UQASX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uqasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UHASX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uhasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SSAX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("ssax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QSAX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHSAX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __USAX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("usax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UQSAX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uqsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UHSAX(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uhsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __USAD8(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("usad8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)
S{
S  uint32_t result;
S
S  __ASM volatile ("usada8 %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
S  return(result);
S}
S
S#define __SSAT16(ARG1,ARG2) \
S({                          \
S  uint32_t __RES, __ARG1 = (ARG1); \
S  __ASM ("ssat16 %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
S  __RES; \
S })
X#define __SSAT16(ARG1,ARG2) ({                            uint32_t __RES, __ARG1 = (ARG1);   __ASM ("ssat16 %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) );   __RES;  })
S
S#define __USAT16(ARG1,ARG2) \
S({                          \
S  uint32_t __RES, __ARG1 = (ARG1); \
S  __ASM ("usat16 %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
S  __RES; \
S })
X#define __USAT16(ARG1,ARG2) ({                            uint32_t __RES, __ARG1 = (ARG1);   __ASM ("usat16 %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) );   __RES;  })
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UXTB16(uint32_t op1)
S{
S  uint32_t result;
S
S  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UXTAB16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("uxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SXTB16(uint32_t op1)
S{
S  uint32_t result;
S
S  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMUAD  (uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMUADX (uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
S{
S  uint32_t result;
S
S  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)
S{
S  uint32_t result;
S
S  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
S  return(result);
S}
S
S#define __SMLALD(ARG1,ARG2,ARG3) \
S({ \
S  uint32_t __ARG1 = (ARG1), __ARG2 = (ARG2), __ARG3_H = (uint32_t)((uint64_t)(ARG3) >> 32), __ARG3_L = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \
S  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (__ARG3_L), "=r" (__ARG3_H) : "r" (__ARG1), "r" (__ARG2), "0" (__ARG3_L), "1" (__ARG3_H) ); \
S  (uint64_t)(((uint64_t)__ARG3_H << 32) | __ARG3_L); \
S })
X#define __SMLALD(ARG1,ARG2,ARG3) ({   uint32_t __ARG1 = (ARG1), __ARG2 = (ARG2), __ARG3_H = (uint32_t)((uint64_t)(ARG3) >> 32), __ARG3_L = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL);   __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (__ARG3_L), "=r" (__ARG3_H) : "r" (__ARG1), "r" (__ARG2), "0" (__ARG3_L), "1" (__ARG3_H) );   (uint64_t)(((uint64_t)__ARG3_H << 32) | __ARG3_L);  })
S
S#define __SMLALDX(ARG1,ARG2,ARG3) \
S({ \
S  uint32_t __ARG1 = (ARG1), __ARG2 = (ARG2), __ARG3_H = (uint32_t)((uint64_t)(ARG3) >> 32), __ARG3_L = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \
S  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (__ARG3_L), "=r" (__ARG3_H) : "r" (__ARG1), "r" (__ARG2), "0" (__ARG3_L), "1" (__ARG3_H) ); \
S  (uint64_t)(((uint64_t)__ARG3_H << 32) | __ARG3_L); \
S })
X#define __SMLALDX(ARG1,ARG2,ARG3) ({   uint32_t __ARG1 = (ARG1), __ARG2 = (ARG2), __ARG3_H = (uint32_t)((uint64_t)(ARG3) >> 32), __ARG3_L = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL);   __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (__ARG3_L), "=r" (__ARG3_H) : "r" (__ARG1), "r" (__ARG2), "0" (__ARG3_L), "1" (__ARG3_H) );   (uint64_t)(((uint64_t)__ARG3_H << 32) | __ARG3_L);  })
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMUSD  (uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMLSD (uint32_t op1, uint32_t op2, uint32_t op3)
S{
S  uint32_t result;
S
S  __ASM volatile ("smlsd %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
S{
S  uint32_t result;
S
S  __ASM volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
S  return(result);
S}
S
S#define __SMLSLD(ARG1,ARG2,ARG3) \
S({ \
S  uint32_t __ARG1 = (ARG1), __ARG2 = (ARG2), __ARG3_H = (uint32_t)((ARG3) >> 32), __ARG3_L = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \
S  __ASM volatile ("smlsld %0, %1, %2, %3" : "=r" (__ARG3_L), "=r" (__ARG3_H) : "r" (__ARG1), "r" (__ARG2), "0" (__ARG3_L), "1" (__ARG3_H) ); \
S  (uint64_t)(((uint64_t)__ARG3_H << 32) | __ARG3_L); \
S })
X#define __SMLSLD(ARG1,ARG2,ARG3) ({   uint32_t __ARG1 = (ARG1), __ARG2 = (ARG2), __ARG3_H = (uint32_t)((ARG3) >> 32), __ARG3_L = (uint32_t)((ARG3) & 0xFFFFFFFFUL);   __ASM volatile ("smlsld %0, %1, %2, %3" : "=r" (__ARG3_L), "=r" (__ARG3_H) : "r" (__ARG1), "r" (__ARG2), "0" (__ARG3_L), "1" (__ARG3_H) );   (uint64_t)(((uint64_t)__ARG3_H << 32) | __ARG3_L);  })
S
S#define __SMLSLDX(ARG1,ARG2,ARG3) \
S({ \
S  uint32_t __ARG1 = (ARG1), __ARG2 = (ARG2), __ARG3_H = (uint32_t)((ARG3) >> 32), __ARG3_L = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \
S  __ASM volatile ("smlsldx %0, %1, %2, %3" : "=r" (__ARG3_L), "=r" (__ARG3_H) : "r" (__ARG1), "r" (__ARG2), "0" (__ARG3_L), "1" (__ARG3_H) ); \
S  (uint64_t)(((uint64_t)__ARG3_H << 32) | __ARG3_L); \
S })
X#define __SMLSLDX(ARG1,ARG2,ARG3) ({   uint32_t __ARG1 = (ARG1), __ARG2 = (ARG2), __ARG3_H = (uint32_t)((ARG3) >> 32), __ARG3_L = (uint32_t)((ARG3) & 0xFFFFFFFFUL);   __ASM volatile ("smlsldx %0, %1, %2, %3" : "=r" (__ARG3_L), "=r" (__ARG3_H) : "r" (__ARG1), "r" (__ARG2), "0" (__ARG3_L), "1" (__ARG3_H) );   (uint64_t)(((uint64_t)__ARG3_H << 32) | __ARG3_L);  })
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SEL  (uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("sel %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QSUB(uint32_t op1, uint32_t op2)
S{
S  uint32_t result;
S
S  __ASM volatile ("qsub %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
S  return(result);
S}
S
S#define __PKHBT(ARG1,ARG2,ARG3) \
S({                          \
S  uint32_t __RES, __ARG1 = (ARG1), __ARG2 = (ARG2); \
S  __ASM ("pkhbt %0, %1, %2, lsl %3" : "=r" (__RES) :  "r" (__ARG1), "r" (__ARG2), "I" (ARG3)  ); \
S  __RES; \
S })
X#define __PKHBT(ARG1,ARG2,ARG3) ({                            uint32_t __RES, __ARG1 = (ARG1), __ARG2 = (ARG2);   __ASM ("pkhbt %0, %1, %2, lsl %3" : "=r" (__RES) :  "r" (__ARG1), "r" (__ARG2), "I" (ARG3)  );   __RES;  })
S
S#define __PKHTB(ARG1,ARG2,ARG3) \
S({                          \
S  uint32_t __RES, __ARG1 = (ARG1), __ARG2 = (ARG2); \
S  if (ARG3 == 0) \
S    __ASM ("pkhtb %0, %1, %2" : "=r" (__RES) :  "r" (__ARG1), "r" (__ARG2)  ); \
S  else \
S    __ASM ("pkhtb %0, %1, %2, asr %3" : "=r" (__RES) :  "r" (__ARG1), "r" (__ARG2), "I" (ARG3)  ); \
S  __RES; \
S })
X#define __PKHTB(ARG1,ARG2,ARG3) ({                            uint32_t __RES, __ARG1 = (ARG1), __ARG2 = (ARG2);   if (ARG3 == 0)     __ASM ("pkhtb %0, %1, %2" : "=r" (__RES) :  "r" (__ARG1), "r" (__ARG2)  );   else     __ASM ("pkhtb %0, %1, %2, asr %3" : "=r" (__RES) :  "r" (__ARG1), "r" (__ARG2), "I" (ARG3)  );   __RES;  })
S
S__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)
S{
S int32_t result;
S
S __ASM volatile ("smmla %0, %1, %2, %3" : "=r" (result): "r"  (op1), "r" (op2), "r" (op3) );
S return(result);
S}
S
S/*-- End CM4 SIMD Intrinsics -----------------------------------------------------*/
S
S
S
S#elif defined ( __TASKING__ ) /*------------------ TASKING Compiler --------------*/
S/* TASKING carm specific functions */
S
S
S/*------ CM4 SIMD Intrinsics -----------------------------------------------------*/
S/* not yet supported */
S/*-- End CM4 SIMD Intrinsics -----------------------------------------------------*/
S
S
N#endif
N
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#endif /* __CORE_CM4_SIMD_H */
N
N#ifdef __cplusplus
S}
N#endif
L 172 "..\..\Libraries\CMSIS\Include\core_cm4.h" 2
N
N#endif /* __CORE_CM4_H_GENERIC */
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM4_H_DEPENDANT
N#define __CORE_CM4_H_DEPENDANT
N
N/* check device defines and use defaults */
N#if defined __CHECK_DEVICE_DEFINES
X#if 0L
S  #ifndef __CM4_REV
S    #define __CM4_REV               0x0000
S    #warning "__CM4_REV not defined in device header file; using default!"
S  #endif
S
S  #ifndef __FPU_PRESENT
S    #define __FPU_PRESENT             0
S    #warning "__FPU_PRESENT not defined in device header file; using default!"
S  #endif
S
S  #ifndef __MPU_PRESENT
S    #define __MPU_PRESENT             0
S    #warning "__MPU_PRESENT not defined in device header file; using default!"
S  #endif
S
S  #ifndef __NVIC_PRIO_BITS
S    #define __NVIC_PRIO_BITS          4
S    #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
S  #endif
S
S  #ifndef __Vendor_SysTickConfig
S    #define __Vendor_SysTickConfig    0
S    #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
S  #endif
N#endif
N
N/* IO definitions (access restrictions to peripheral registers) */
N/**
N    \defgroup CMSIS_glob_defs CMSIS Global Defines
N
N    <strong>IO Type Qualifiers</strong> are used
N    \li to specify the access to peripheral variables.
N    \li for automatic generation of peripheral register debug information.
N*/
N#ifdef __cplusplus
S  #define   __I     volatile             /*!< Defines 'read only' permissions                 */
N#else
N  #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
N#endif
N#define     __O     volatile             /*!< Defines 'write only' permissions                */
N#define     __IO    volatile             /*!< Defines 'read / write' permissions              */
N
N/*@} end of group Cortex_M4 */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N  Core Register contain:
N  - Core Register
N  - Core NVIC Register
N  - Core SCB Register
N  - Core SysTick Register
N  - Core Debug Register
N  - Core MPU Register
N  - Core FPU Register
N ******************************************************************************/
N/** \defgroup CMSIS_core_register Defines and Type Definitions
N    \brief Type definitions and defines for Cortex-M processor based devices.
N*/
N
N/** \ingroup    CMSIS_core_register
N    \defgroup   CMSIS_CORE  Status and Control Registers
N    \brief  Core Register type definitions.
N  @{
N */
N
N/** \brief  Union type to access the Application Program Status Register (APSR).
N */
Ntypedef union
N{
N  struct
N  {
N#if (__CORTEX_M != 0x04)
X#if ((0x04) != 0x04)
S    uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
N#else
N    uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
N    uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
N    uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
N#endif
N    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
N  } b;                                   /*!< Structure used for bit  access                  */
N  uint32_t w;                            /*!< Type      used for word access                  */
N} APSR_Type;
N
N
N/** \brief  Union type to access the Interrupt Program Status Register (IPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
N    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
N  } b;                                   /*!< Structure used for bit  access                  */
N  uint32_t w;                            /*!< Type      used for word access                  */
N} IPSR_Type;
N
N
N/** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
N#if (__CORTEX_M != 0x04)
X#if ((0x04) != 0x04)
S    uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
N#else
N    uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
N    uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
N    uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
N#endif
N    uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
N    uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
N    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
N  } b;                                   /*!< Structure used for bit  access                  */
N  uint32_t w;                            /*!< Type      used for word access                  */
N} xPSR_Type;
N
N
N/** \brief  Union type to access the Control Registers (CONTROL).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
N    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
N    uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
N    uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
N  } b;                                   /*!< Structure used for bit  access                  */
N  uint32_t w;                            /*!< Type      used for word access                  */
N} CONTROL_Type;
N
N/*@} end of group CMSIS_CORE */
N
N
N/** \ingroup    CMSIS_core_register
N    \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
N    \brief      Type definitions for the NVIC Registers
N  @{
N */
N
N/** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
N */
Ntypedef struct
N{
N  __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register           */
X  volatile uint32_t ISER[8];                  
N       uint32_t RESERVED0[24];
N  __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register         */
X  volatile uint32_t ICER[8];                  
N       uint32_t RSERVED1[24];
N  __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register          */
X  volatile uint32_t ISPR[8];                  
N       uint32_t RESERVED2[24];
N  __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register        */
X  volatile uint32_t ICPR[8];                  
N       uint32_t RESERVED3[24];
N  __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register           */
X  volatile uint32_t IABR[8];                  
N       uint32_t RESERVED4[56];
N  __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bit wide) */
X  volatile uint8_t  IP[240];                  
N       uint32_t RESERVED5[644];
N  __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Register     */
X  volatile  uint32_t STIR;                     
N}  NVIC_Type;
N
N/* Software Triggered Interrupt Register Definitions */
N#define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: INTLINESNUM Position */
N#define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: INTLINESNUM Mask */
N
N/*@} end of group CMSIS_NVIC */
N
N
N/** \ingroup  CMSIS_core_register
N    \defgroup CMSIS_SCB     System Control Block (SCB)
N    \brief      Type definitions for the System Control Block Registers
N  @{
N */
N
N/** \brief  Structure type to access the System Control Block (SCB).
N */
Ntypedef struct
N{
N  __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register                                   */
X  volatile const  uint32_t CPUID;                    
N  __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register                  */
X  volatile uint32_t ICSR;                     
N  __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register                          */
X  volatile uint32_t VTOR;                     
N  __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */
X  volatile uint32_t AIRCR;                    
N  __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */
X  volatile uint32_t SCR;                      
N  __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */
X  volatile uint32_t CCR;                      
N  __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registers (4-7, 8-11, 12-15) */
X  volatile uint8_t  SHP[12];                  
N  __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State Register             */
X  volatile uint32_t SHCSR;                    
N  __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Register                    */
X  volatile uint32_t CFSR;                     
N  __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register                             */
X  volatile uint32_t HFSR;                     
N  __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register                           */
X  volatile uint32_t DFSR;                     
N  __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register                      */
X  volatile uint32_t MMFAR;                    
N  __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register                             */
X  volatile uint32_t BFAR;                     
N  __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register                       */
X  volatile uint32_t AFSR;                     
N  __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register                            */
X  volatile const  uint32_t PFR[2];                   
N  __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register                                */
X  volatile const  uint32_t DFR;                      
N  __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register                            */
X  volatile const  uint32_t ADR;                      
N  __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register                         */
X  volatile const  uint32_t MMFR[4];                  
N  __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Register                   */
X  volatile const  uint32_t ISAR[5];                  
N       uint32_t RESERVED0[5];
N  __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Register                   */
X  volatile uint32_t CPACR;                    
N} SCB_Type;
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB CPUID: ARCHITECTURE Position */
N#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB ICSR: RETTOBASE Position */
N#define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB ICSR: RETTOBASE Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB ICSR: VECTACTIVE Mask */
N
N/* SCB Vector Table Offset Register Definitions */
N#define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB VTOR: TBLOFF Position */
N#define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB VTOR: TBLOFF Mask */
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB AIRCR: PRIGROUP Position */
N#define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB AIRCR: PRIGROUP Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N#define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB AIRCR: VECTRESET Position */
N#define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB AIRCR: VECTRESET Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB CCR: BFHFNMIGN Position */
N#define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB CCR: BFHFNMIGN Mask */
N
N#define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB CCR: DIV_0_TRP Position */
N#define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB CCR: DIV_0_TRP Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N#define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB CCR: USERSETMPEND Position */
N#define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB CCR: USERSETMPEND Mask */
N
N#define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB CCR: NONBASETHRDENA Position */
N#define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB CCR: NONBASETHRDENA Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB SHCSR: USGFAULTENA Position */
N#define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB SHCSR: USGFAULTENA Mask */
N
N#define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB SHCSR: BUSFAULTENA Position */
N#define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB SHCSR: BUSFAULTENA Mask */
N
N#define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB SHCSR: MEMFAULTENA Position */
N#define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB SHCSR: MEMFAULTENA Mask */
N
N#define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N#define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB SHCSR: BUSFAULTPENDED Position */
N#define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB SHCSR: BUSFAULTPENDED Mask */
N
N#define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB SHCSR: MEMFAULTPENDED Position */
N#define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB SHCSR: MEMFAULTPENDED Mask */
N
N#define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB SHCSR: USGFAULTPENDED Position */
N#define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB SHCSR: USGFAULTPENDED Mask */
N
N#define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB SHCSR: SYSTICKACT Position */
N#define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB SHCSR: SYSTICKACT Mask */
N
N#define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB SHCSR: PENDSVACT Position */
N#define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB SHCSR: PENDSVACT Mask */
N
N#define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB SHCSR: MONITORACT Position */
N#define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB SHCSR: MONITORACT Mask */
N
N#define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB SHCSR: SVCALLACT Position */
N#define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB SHCSR: SVCALLACT Mask */
N
N#define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB SHCSR: USGFAULTACT Position */
N#define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB SHCSR: USGFAULTACT Mask */
N
N#define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB SHCSR: BUSFAULTACT Position */
N#define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB SHCSR: BUSFAULTACT Mask */
N
N#define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB SHCSR: MEMFAULTACT Position */
N#define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB SHCSR: MEMFAULTACT Mask */
N
N/* SCB Configurable Fault Status Registers Definitions */
N#define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB CFSR: Usage Fault Status Register Position */
N#define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB CFSR: Usage Fault Status Register Mask */
N
N#define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB CFSR: Bus Fault Status Register Position */
N#define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB CFSR: Bus Fault Status Register Mask */
N
N#define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB CFSR: Memory Manage Fault Status Register Position */
N#define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB CFSR: Memory Manage Fault Status Register Mask */
N
N/* SCB Hard Fault Status Registers Definitions */
N#define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB HFSR: DEBUGEVT Position */
N#define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB HFSR: DEBUGEVT Mask */
N
N#define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB HFSR: FORCED Position */
N#define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB HFSR: FORCED Mask */
N
N#define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB HFSR: VECTTBL Position */
N#define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB HFSR: VECTTBL Mask */
N
N/* SCB Debug Fault Status Register Definitions */
N#define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB DFSR: EXTERNAL Position */
N#define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB DFSR: EXTERNAL Mask */
N
N#define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB DFSR: VCATCH Position */
N#define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB DFSR: VCATCH Mask */
N
N#define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB DFSR: DWTTRAP Position */
N#define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB DFSR: DWTTRAP Mask */
N
N#define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB DFSR: BKPT Position */
N#define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB DFSR: BKPT Mask */
N
N#define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB DFSR: HALTED Position */
N#define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB DFSR: HALTED Mask */
N
N/*@} end of group CMSIS_SCB */
N
N
N/** \ingroup  CMSIS_core_register
N    \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
N    \brief      Type definitions for the System Control and ID Register not in the SCB
N  @{
N */
N
N/** \brief  Structure type to access the System Control and ID Register not in the SCB.
N */
Ntypedef struct
N{
N       uint32_t RESERVED0[1];
N  __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Register      */
X  volatile const  uint32_t ICTR;                     
N  __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register              */
X  volatile uint32_t ACTLR;                    
N} SCnSCB_Type;
N
N/* Interrupt Controller Type Register Definitions */
N#define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: INTLINESNUM Position */
N#define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: INTLINESNUM Mask */
N
N/* Auxiliary Control Register Definitions */
N#define SCnSCB_ACTLR_DISOOFP_Pos            9                                          /*!< ACTLR: DISOOFP Position */
N#define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: DISOOFP Mask */
N
N#define SCnSCB_ACTLR_DISFPCA_Pos            8                                          /*!< ACTLR: DISFPCA Position */
N#define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: DISFPCA Mask */
N
N#define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: DISFOLD Position */
N#define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: DISFOLD Mask */
N
N#define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: DISDEFWBUF Position */
N#define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: DISDEFWBUF Mask */
N
N#define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: DISMCYCINT Position */
N#define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: DISMCYCINT Mask */
N
N/*@} end of group CMSIS_SCnotSCB */
N
N
N/** \ingroup  CMSIS_core_register
N    \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
N    \brief      Type definitions for the System Timer Registers.
N  @{
N */
N
N/** \brief  Structure type to access the System Timer (SysTick).
N */
Ntypedef struct
N{
N  __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                     
N  __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register       */
X  volatile uint32_t LOAD;                     
N  __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register      */
X  volatile uint32_t VAL;                      
N  __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register        */
X  volatile const  uint32_t CALIB;                    
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysTick CALIB: TENMS Mask */
N
N/*@} end of group CMSIS_SysTick */
N
N
N/** \ingroup  CMSIS_core_register
N    \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
N    \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
N  @{
N */
N
N/** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
N */
Ntypedef struct
N{
N  __O  union
X  volatile  union
N  {
N    __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit                   */
X    volatile  uint8_t    u8;                   
N    __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit                  */
X    volatile  uint16_t   u16;                  
N    __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit                  */
X    volatile  uint32_t   u32;                  
N  }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers               */
N       uint32_t RESERVED0[864];
N  __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register                 */
X  volatile uint32_t TER;                      
N       uint32_t RESERVED1[15];
N  __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register              */
X  volatile uint32_t TPR;                      
N       uint32_t RESERVED2[15];
N  __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register                */
X  volatile uint32_t TCR;                      
N       uint32_t RESERVED3[29];
N  __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register            */
X  volatile  uint32_t IWR;                      
N  __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register             */
X  volatile const  uint32_t IRR;                      
N  __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Register     */
X  volatile uint32_t IMCR;                     
N       uint32_t RESERVED4[43];
N  __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register                  */
X  volatile  uint32_t LAR;                      
N  __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register                  */
X  volatile const  uint32_t LSR;                      
N       uint32_t RESERVED5[6];
N  __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Register #4 */
X  volatile const  uint32_t PID4;                     
N  __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Register #5 */
X  volatile const  uint32_t PID5;                     
N  __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Register #6 */
X  volatile const  uint32_t PID6;                     
N  __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Register #7 */
X  volatile const  uint32_t PID7;                     
N  __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Register #0 */
X  volatile const  uint32_t PID0;                     
N  __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Register #1 */
X  volatile const  uint32_t PID1;                     
N  __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Register #2 */
X  volatile const  uint32_t PID2;                     
N  __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Register #3 */
X  volatile const  uint32_t PID3;                     
N  __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Register #0 */
X  volatile const  uint32_t CID0;                     
N  __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Register #1 */
X  volatile const  uint32_t CID1;                     
N  __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Register #2 */
X  volatile const  uint32_t CID2;                     
N  __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Register #3 */
X  volatile const  uint32_t CID3;                     
N} ITM_Type;
N
N/* ITM Trace Privilege Register Definitions */
N#define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM TPR: PRIVMASK Position */
N#define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM TPR: PRIVMASK Mask */
N
N/* ITM Trace Control Register Definitions */
N#define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM TCR: BUSY Position */
N#define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM TCR: BUSY Mask */
N
N#define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM TCR: ATBID Position */
N#define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM TCR: ATBID Mask */
N
N#define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM TCR: Global timestamp frequency Position */
N#define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM TCR: Global timestamp frequency Mask */
N
N#define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM TCR: TSPrescale Position */
N#define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM TCR: TSPrescale Mask */
N
N#define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM TCR: SWOENA Position */
N#define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM TCR: SWOENA Mask */
N
N#define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM TCR: DWTENA Position */
N#define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM TCR: DWTENA Mask */
N
N#define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM TCR: SYNCENA Position */
N#define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM TCR: SYNCENA Mask */
N
N#define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM TCR: TSENA Position */
N#define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM TCR: TSENA Mask */
N
N#define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM TCR: ITM Enable bit Position */
N#define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM TCR: ITM Enable bit Mask */
N
N/* ITM Integration Write Register Definitions */
N#define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM IWR: ATVALIDM Position */
N#define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM IWR: ATVALIDM Mask */
N
N/* ITM Integration Read Register Definitions */
N#define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM IRR: ATREADYM Position */
N#define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM IRR: ATREADYM Mask */
N
N/* ITM Integration Mode Control Register Definitions */
N#define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM IMCR: INTEGRATION Position */
N#define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM IMCR: INTEGRATION Mask */
N
N/* ITM Lock Status Register Definitions */
N#define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM LSR: ByteAcc Position */
N#define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM LSR: ByteAcc Mask */
N
N#define ITM_LSR_Access_Pos                  1                                             /*!< ITM LSR: Access Position */
N#define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM LSR: Access Mask */
N
N#define ITM_LSR_Present_Pos                 0                                             /*!< ITM LSR: Present Position */
N#define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM LSR: Present Mask */
N
N/*@}*/ /* end of group CMSIS_ITM */
N
N
N/** \ingroup  CMSIS_core_register
N    \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
N    \brief      Type definitions for the Data Watchpoint and Trace (DWT)
N  @{
N */
N
N/** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
N */
Ntypedef struct
N{
N  __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                          */
X  volatile uint32_t CTRL;                     
N  __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register                      */
X  volatile uint32_t CYCCNT;                   
N  __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register                        */
X  volatile uint32_t CPICNT;                   
N  __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Register         */
X  volatile uint32_t EXCCNT;                   
N  __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register                      */
X  volatile uint32_t SLEEPCNT;                 
N  __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register                        */
X  volatile uint32_t LSUCNT;                   
N  __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Register         */
X  volatile uint32_t FOLDCNT;                  
N  __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register           */
X  volatile const  uint32_t PCSR;                     
N  __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0                     */
X  volatile uint32_t COMP0;                    
N  __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                           */
X  volatile uint32_t MASK0;                    
N  __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0                       */
X  volatile uint32_t FUNCTION0;                
N       uint32_t RESERVED0[1];
N  __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1                     */
X  volatile uint32_t COMP1;                    
N  __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                           */
X  volatile uint32_t MASK1;                    
N  __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1                       */
X  volatile uint32_t FUNCTION1;                
N       uint32_t RESERVED1[1];
N  __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2                     */
X  volatile uint32_t COMP2;                    
N  __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                           */
X  volatile uint32_t MASK2;                    
N  __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2                       */
X  volatile uint32_t FUNCTION2;                
N       uint32_t RESERVED2[1];
N  __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3                     */
X  volatile uint32_t COMP3;                    
N  __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                           */
X  volatile uint32_t MASK3;                    
N  __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3                       */
X  volatile uint32_t FUNCTION3;                
N} DWT_Type;
N
N/* DWT Control Register Definitions */
N#define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTRL: NUMCOMP Position */
N#define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTRL: NUMCOMP Mask */
N
N#define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTRL: NOTRCPKT Position */
N#define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTRL: NOTRCPKT Mask */
N
N#define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTRL: NOEXTTRIG Position */
N#define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTRL: NOEXTTRIG Mask */
N
N#define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTRL: NOCYCCNT Position */
N#define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTRL: NOCYCCNT Mask */
N
N#define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTRL: NOPRFCNT Position */
N#define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTRL: NOPRFCNT Mask */
N
N#define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTRL: CYCEVTENA Position */
N#define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTRL: CYCEVTENA Mask */
N
N#define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTRL: FOLDEVTENA Position */
N#define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTRL: FOLDEVTENA Mask */
N
N#define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTRL: LSUEVTENA Position */
N#define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTRL: LSUEVTENA Mask */
N
N#define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTRL: SLEEPEVTENA Position */
N#define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTRL: SLEEPEVTENA Mask */
N
N#define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTRL: EXCEVTENA Position */
N#define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTRL: EXCEVTENA Mask */
N
N#define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTRL: CPIEVTENA Position */
N#define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTRL: CPIEVTENA Mask */
N
N#define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTRL: EXCTRCENA Position */
N#define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTRL: EXCTRCENA Mask */
N
N#define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTRL: PCSAMPLENA Position */
N#define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTRL: PCSAMPLENA Mask */
N
N#define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTRL: SYNCTAP Position */
N#define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTRL: SYNCTAP Mask */
N
N#define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTRL: CYCTAP Position */
N#define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTRL: CYCTAP Mask */
N
N#define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTRL: POSTINIT Position */
N#define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTRL: POSTINIT Mask */
N
N#define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTRL: POSTPRESET Position */
N#define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTRL: POSTPRESET Mask */
N
N#define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTRL: CYCCNTENA Position */
N#define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTRL: CYCCNTENA Mask */
N
N/* DWT CPI Count Register Definitions */
N#define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPICNT: CPICNT Position */
N#define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPICNT: CPICNT Mask */
N
N/* DWT Exception Overhead Count Register Definitions */
N#define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXCCNT: EXCCNT Position */
N#define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXCCNT: EXCCNT Mask */
N
N/* DWT Sleep Count Register Definitions */
N#define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLEEPCNT: SLEEPCNT Position */
N#define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLEEPCNT: SLEEPCNT Mask */
N
N/* DWT LSU Count Register Definitions */
N#define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSUCNT: LSUCNT Position */
N#define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSUCNT: LSUCNT Mask */
N
N/* DWT Folded-instruction Count Register Definitions */
N#define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOLDCNT: FOLDCNT Position */
N#define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOLDCNT: FOLDCNT Mask */
N
N/* DWT Comparator Mask Register Definitions */
N#define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MASK: MASK Position */
N#define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MASK: MASK Mask */
N
N/* DWT Comparator Function Register Definitions */
N#define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUNCTION: MATCHED Position */
N#define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUNCTION: MATCHED Mask */
N
N#define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUNCTION: DATAVADDR1 Position */
N#define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUNCTION: DATAVADDR1 Mask */
N
N#define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUNCTION: DATAVADDR0 Position */
N#define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUNCTION: DATAVADDR0 Mask */
N
N#define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUNCTION: DATAVSIZE Position */
N#define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUNCTION: DATAVSIZE Mask */
N
N#define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUNCTION: LNK1ENA Position */
N#define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUNCTION: LNK1ENA Mask */
N
N#define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUNCTION: DATAVMATCH Position */
N#define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUNCTION: DATAVMATCH Mask */
N
N#define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUNCTION: CYCMATCH Position */
N#define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUNCTION: CYCMATCH Mask */
N
N#define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUNCTION: EMITRANGE Position */
N#define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUNCTION: EMITRANGE Mask */
N
N#define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUNCTION: FUNCTION Position */
N#define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUNCTION: FUNCTION Mask */
N
N/*@}*/ /* end of group CMSIS_DWT */
N
N
N/** \ingroup  CMSIS_core_register
N    \defgroup CMSIS_TPI     Trace Port Interface (TPI)
N    \brief      Type definitions for the Trace Port Interface (TPI)
N  @{
N */
N
N/** \brief  Structure type to access the Trace Port Interface Register (TPI).
N */
Ntypedef struct
N{
N  __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Register     */
X  volatile uint32_t SSPSR;                    
N  __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Register */
X  volatile uint32_t CSPSR;                    
N       uint32_t RESERVED0[2];
N  __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Register */
X  volatile uint32_t ACPR;                     
N       uint32_t RESERVED1[55];
N  __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register */
X  volatile uint32_t SPPR;                     
N       uint32_t RESERVED2[131];
N  __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Register */
X  volatile const  uint32_t FFSR;                     
N  __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Register */
X  volatile uint32_t FFCR;                     
N  __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counter Register */
X  volatile const  uint32_t FSCR;                     
N       uint32_t RESERVED3[759];
N  __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
X  volatile const  uint32_t TRIGGER;                  
N  __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
X  volatile const  uint32_t FIFO0;                    
N  __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
X  volatile const  uint32_t ITATBCTR2;                
N       uint32_t RESERVED4[1];
N  __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
X  volatile const  uint32_t ITATBCTR0;                
N  __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
X  volatile const  uint32_t FIFO1;                    
N  __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
X  volatile uint32_t ITCTRL;                   
N       uint32_t RESERVED5[39];
N  __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
X  volatile uint32_t CLAIMSET;                 
N  __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
X  volatile uint32_t CLAIMCLR;                 
N       uint32_t RESERVED7[8];
N  __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
X  volatile const  uint32_t DEVID;                    
N  __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
X  volatile const  uint32_t DEVTYPE;                  
N} TPI_Type;
N
N/* TPI Asynchronous Clock Prescaler Register Definitions */
N#define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACPR: PRESCALER Position */
N#define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACPR: PRESCALER Mask */
N
N/* TPI Selected Pin Protocol Register Definitions */
N#define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPPR: TXMODE Position */
N#define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPPR: TXMODE Mask */
N
N/* TPI Formatter and Flush Status Register Definitions */
N#define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFSR: FtNonStop Position */
N#define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFSR: FtNonStop Mask */
N
N#define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFSR: TCPresent Position */
N#define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFSR: TCPresent Mask */
N
N#define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFSR: FtStopped Position */
N#define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFSR: FtStopped Mask */
N
N#define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFSR: FlInProg Position */
N#define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFSR: FlInProg Mask */
N
N/* TPI Formatter and Flush Control Register Definitions */
N#define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFCR: TrigIn Position */
N#define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFCR: TrigIn Mask */
N
N#define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFCR: EnFCont Position */
N#define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFCR: EnFCont Mask */
N
N/* TPI TRIGGER Register Definitions */
N#define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRIGGER: TRIGGER Position */
N#define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRIGGER: TRIGGER Mask */
N
N/* TPI Integration ETM Data Register Definitions (FIFO0) */
N#define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIFO0: ITM_ATVALID Position */
N#define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIFO0: ITM_ATVALID Mask */
N
N#define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIFO0: ITM_bytecount Position */
N#define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIFO0: ITM_bytecount Mask */
N
N#define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIFO0: ETM_ATVALID Position */
N#define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIFO0: ETM_ATVALID Mask */
N
N#define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIFO0: ETM_bytecount Position */
N#define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIFO0: ETM_bytecount Mask */
N
N#define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIFO0: ETM2 Position */
N#define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIFO0: ETM2 Mask */
N
N#define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIFO0: ETM1 Position */
N#define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIFO0: ETM1 Mask */
N
N#define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIFO0: ETM0 Position */
N#define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIFO0: ETM0 Mask */
N
N/* TPI ITATBCTR2 Register Definitions */
N#define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITATBCTR2: ATREADY Position */
N#define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITATBCTR2: ATREADY Mask */
N
N/* TPI Integration ITM Data Register Definitions (FIFO1) */
N#define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIFO1: ITM_ATVALID Position */
N#define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIFO1: ITM_ATVALID Mask */
N
N#define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIFO1: ITM_bytecount Position */
N#define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIFO1: ITM_bytecount Mask */
N
N#define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIFO1: ETM_ATVALID Position */
N#define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIFO1: ETM_ATVALID Mask */
N
N#define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIFO1: ETM_bytecount Position */
N#define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIFO1: ETM_bytecount Mask */
N
N#define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIFO1: ITM2 Position */
N#define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIFO1: ITM2 Mask */
N
N#define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIFO1: ITM1 Position */
N#define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIFO1: ITM1 Mask */
N
N#define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIFO1: ITM0 Position */
N#define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIFO1: ITM0 Mask */
N
N/* TPI ITATBCTR0 Register Definitions */
N#define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITATBCTR0: ATREADY Position */
N#define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITATBCTR0: ATREADY Mask */
N
N/* TPI Integration Mode Control Register Definitions */
N#define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITCTRL: Mode Position */
N#define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITCTRL: Mode Mask */
N
N/* TPI DEVID Register Definitions */
N#define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEVID: NRZVALID Position */
N#define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEVID: NRZVALID Mask */
N
N#define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEVID: MANCVALID Position */
N#define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEVID: MANCVALID Mask */
N
N#define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEVID: PTINVALID Position */
N#define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEVID: PTINVALID Mask */
N
N#define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEVID: MinBufSz Position */
N#define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEVID: MinBufSz Mask */
N
N#define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEVID: AsynClkIn Position */
N#define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEVID: AsynClkIn Mask */
N
N#define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEVID: NrTraceInput Position */
N#define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEVID: NrTraceInput Mask */
N
N/* TPI DEVTYPE Register Definitions */
N#define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEVTYPE: SubType Position */
N#define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEVTYPE: SubType Mask */
N
N#define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEVTYPE: MajorType Position */
N#define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEVTYPE: MajorType Mask */
N
N/*@}*/ /* end of group CMSIS_TPI */
N
N
N#if (__MPU_PRESENT == 1)
X#if (1 == 1)
N/** \ingroup  CMSIS_core_register
N    \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
N    \brief      Type definitions for the Memory Protection Unit (MPU)
N  @{
N */
N
N/** \brief  Structure type to access the Memory Protection Unit (MPU).
N */
Ntypedef struct
N{
N  __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register                              */
X  volatile const  uint32_t TYPE;                     
N  __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register                           */
X  volatile uint32_t CTRL;                     
N  __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register                     */
X  volatile uint32_t RNR;                      
N  __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register               */
X  volatile uint32_t RBAR;                     
N  __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Register         */
X  volatile uint32_t RASR;                     
N  __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address Register       */
X  volatile uint32_t RBAR_A1;                  
N  __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and Size Register */
X  volatile uint32_t RASR_A1;                  
N  __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address Register       */
X  volatile uint32_t RBAR_A2;                  
N  __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and Size Register */
X  volatile uint32_t RASR_A2;                  
N  __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address Register       */
X  volatile uint32_t RBAR_A3;                  
N  __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and Size Register */
X  volatile uint32_t RASR_A3;                  
N} MPU_Type;
N
N/* MPU Type Register */
N#define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU TYPE: IREGION Position */
N#define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU TYPE: IREGION Mask */
N
N#define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU TYPE: DREGION Position */
N#define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU TYPE: DREGION Mask */
N
N#define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU TYPE: SEPARATE Position */
N#define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU TYPE: SEPARATE Mask */
N
N/* MPU Control Register */
N#define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU CTRL: PRIVDEFENA Position */
N#define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU CTRL: PRIVDEFENA Mask */
N
N#define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU CTRL: HFNMIENA Position */
N#define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU CTRL: HFNMIENA Mask */
N
N#define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU CTRL: ENABLE Position */
N#define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU CTRL: ENABLE Mask */
N
N/* MPU Region Number Register */
N#define MPU_RNR_REGION_Pos                  0                                             /*!< MPU RNR: REGION Position */
N#define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU RNR: REGION Mask */
N
N/* MPU Region Base Address Register */
N#define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU RBAR: ADDR Position */
N#define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU RBAR: ADDR Mask */
N
N#define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU RBAR: VALID Position */
N#define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU RBAR: VALID Mask */
N
N#define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU RBAR: REGION Position */
N#define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU RBAR: REGION Mask */
N
N/* MPU Region Attribute and Size Register */
N#define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU RASR: MPU Region Attribute field Position */
N#define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU RASR: MPU Region Attribute field Mask */
N
N#define MPU_RASR_XN_Pos                    28                                             /*!< MPU RASR: ATTRS.XN Position */
N#define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU RASR: ATTRS.XN Mask */
N
N#define MPU_RASR_AP_Pos                    24                                             /*!< MPU RASR: ATTRS.AP Position */
N#define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU RASR: ATTRS.AP Mask */
N
N#define MPU_RASR_TEX_Pos                   19                                             /*!< MPU RASR: ATTRS.TEX Position */
N#define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU RASR: ATTRS.TEX Mask */
N
N#define MPU_RASR_S_Pos                     18                                             /*!< MPU RASR: ATTRS.S Position */
N#define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU RASR: ATTRS.S Mask */
N
N#define MPU_RASR_C_Pos                     17                                             /*!< MPU RASR: ATTRS.C Position */
N#define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU RASR: ATTRS.C Mask */
N
N#define MPU_RASR_B_Pos                     16                                             /*!< MPU RASR: ATTRS.B Position */
N#define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU RASR: ATTRS.B Mask */
N
N#define MPU_RASR_SRD_Pos                    8                                             /*!< MPU RASR: Sub-Region Disable Position */
N#define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU RASR: Sub-Region Disable Mask */
N
N#define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU RASR: Region Size Field Position */
N#define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU RASR: Region Size Field Mask */
N
N#define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU RASR: Region enable bit Position */
N#define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU RASR: Region enable bit Disable Mask */
N
N/*@} end of group CMSIS_MPU */
N#endif
N
N
N#if (__FPU_PRESENT == 1)
X#if (1 == 1)
N/** \ingroup  CMSIS_core_register
N    \defgroup CMSIS_FPU     Floating Point Unit (FPU)
N    \brief      Type definitions for the Floating Point Unit (FPU)
N  @{
N */
N
N/** \brief  Structure type to access the Floating Point Unit (FPU).
N */
Ntypedef struct
N{
N       uint32_t RESERVED0[1];
N  __IO uint32_t FPCCR;                   /*!< Offset: 0x004 (R/W)  Floating-Point Context Control Register               */
X  volatile uint32_t FPCCR;                    
N  __IO uint32_t FPCAR;                   /*!< Offset: 0x008 (R/W)  Floating-Point Context Address Register               */
X  volatile uint32_t FPCAR;                    
N  __IO uint32_t FPDSCR;                  /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Control Register        */
X  volatile uint32_t FPDSCR;                   
N  __I  uint32_t MVFR0;                   /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0                       */
X  volatile const  uint32_t MVFR0;                    
N  __I  uint32_t MVFR1;                   /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1                       */
X  volatile const  uint32_t MVFR1;                    
N} FPU_Type;
N
N/* Floating-Point Context Control Register */
N#define FPU_FPCCR_ASPEN_Pos                31                                             /*!< FPCCR: ASPEN bit Position */
N#define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCCR: ASPEN bit Mask */
N
N#define FPU_FPCCR_LSPEN_Pos                30                                             /*!< FPCCR: LSPEN Position */
N#define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCCR: LSPEN bit Mask */
N
N#define FPU_FPCCR_MONRDY_Pos                8                                             /*!< FPCCR: MONRDY Position */
N#define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCCR: MONRDY bit Mask */
N
N#define FPU_FPCCR_BFRDY_Pos                 6                                             /*!< FPCCR: BFRDY Position */
N#define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCCR: BFRDY bit Mask */
N
N#define FPU_FPCCR_MMRDY_Pos                 5                                             /*!< FPCCR: MMRDY Position */
N#define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCCR: MMRDY bit Mask */
N
N#define FPU_FPCCR_HFRDY_Pos                 4                                             /*!< FPCCR: HFRDY Position */
N#define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCCR: HFRDY bit Mask */
N
N#define FPU_FPCCR_THREAD_Pos                3                                             /*!< FPCCR: processor mode bit Position */
N#define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCCR: processor mode active bit Mask */
N
N#define FPU_FPCCR_USER_Pos                  1                                             /*!< FPCCR: privilege level bit Position */
N#define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCCR: privilege level bit Mask */
N
N#define FPU_FPCCR_LSPACT_Pos                0                                             /*!< FPCCR: Lazy state preservation active bit Position */
N#define FPU_FPCCR_LSPACT_Msk               (1UL << FPU_FPCCR_LSPACT_Pos)                  /*!< FPCCR: Lazy state preservation active bit Mask */
N
N/* Floating-Point Context Address Register */
N#define FPU_FPCAR_ADDRESS_Pos               3                                             /*!< FPCAR: ADDRESS bit Position */
N#define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCAR: ADDRESS bit Mask */
N
N/* Floating-Point Default Status Control Register */
N#define FPU_FPDSCR_AHP_Pos                 26                                             /*!< FPDSCR: AHP bit Position */
N#define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDSCR: AHP bit Mask */
N
N#define FPU_FPDSCR_DN_Pos                  25                                             /*!< FPDSCR: DN bit Position */
N#define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDSCR: DN bit Mask */
N
N#define FPU_FPDSCR_FZ_Pos                  24                                             /*!< FPDSCR: FZ bit Position */
N#define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDSCR: FZ bit Mask */
N
N#define FPU_FPDSCR_RMode_Pos               22                                             /*!< FPDSCR: RMode bit Position */
N#define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDSCR: RMode bit Mask */
N
N/* Media and FP Feature Register 0 */
N#define FPU_MVFR0_FP_rounding_modes_Pos    28                                             /*!< MVFR0: FP rounding modes bits Position */
N#define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR0: FP rounding modes bits Mask */
N
N#define FPU_MVFR0_Short_vectors_Pos        24                                             /*!< MVFR0: Short vectors bits Position */
N#define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR0: Short vectors bits Mask */
N
N#define FPU_MVFR0_Square_root_Pos          20                                             /*!< MVFR0: Square root bits Position */
N#define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR0: Square root bits Mask */
N
N#define FPU_MVFR0_Divide_Pos               16                                             /*!< MVFR0: Divide bits Position */
N#define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR0: Divide bits Mask */
N
N#define FPU_MVFR0_FP_excep_trapping_Pos    12                                             /*!< MVFR0: FP exception trapping bits Position */
N#define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR0: FP exception trapping bits Mask */
N
N#define FPU_MVFR0_Double_precision_Pos      8                                             /*!< MVFR0: Double-precision bits Position */
N#define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR0: Double-precision bits Mask */
N
N#define FPU_MVFR0_Single_precision_Pos      4                                             /*!< MVFR0: Single-precision bits Position */
N#define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR0: Single-precision bits Mask */
N
N#define FPU_MVFR0_A_SIMD_registers_Pos      0                                             /*!< MVFR0: A_SIMD registers bits Position */
N#define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL << FPU_MVFR0_A_SIMD_registers_Pos)      /*!< MVFR0: A_SIMD registers bits Mask */
N
N/* Media and FP Feature Register 1 */
N#define FPU_MVFR1_FP_fused_MAC_Pos         28                                             /*!< MVFR1: FP fused MAC bits Position */
N#define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR1: FP fused MAC bits Mask */
N
N#define FPU_MVFR1_FP_HPFP_Pos              24                                             /*!< MVFR1: FP HPFP bits Position */
N#define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR1: FP HPFP bits Mask */
N
N#define FPU_MVFR1_D_NaN_mode_Pos            4                                             /*!< MVFR1: D_NaN mode bits Position */
N#define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR1: D_NaN mode bits Mask */
N
N#define FPU_MVFR1_FtZ_mode_Pos              0                                             /*!< MVFR1: FtZ mode bits Position */
N#define FPU_MVFR1_FtZ_mode_Msk             (0xFUL << FPU_MVFR1_FtZ_mode_Pos)              /*!< MVFR1: FtZ mode bits Mask */
N
N/*@} end of group CMSIS_FPU */
N#endif
N
N
N/** \ingroup  CMSIS_core_register
N    \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
N    \brief      Type definitions for the Core Debug Registers
N  @{
N */
N
N/** \brief  Structure type to access the Core Debug Register (CoreDebug).
N */
Ntypedef struct
N{
N  __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status Register    */
X  volatile uint32_t DHCSR;                    
N  __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Register        */
X  volatile  uint32_t DCRSR;                    
N  __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Register            */
X  volatile uint32_t DCRDR;                    
N  __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Control Register */
X  volatile uint32_t DEMCR;                    
N} CoreDebug_Type;
N
N/* Debug Halting Control and Status Register */
N#define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< CoreDebug DHCSR: DBGKEY Position */
N#define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< CoreDebug DHCSR: DBGKEY Mask */
N
N#define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< CoreDebug DHCSR: S_RESET_ST Position */
N#define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< CoreDebug DHCSR: S_RESET_ST Mask */
N
N#define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< CoreDebug DHCSR: S_RETIRE_ST Position */
N#define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< CoreDebug DHCSR: S_RETIRE_ST Mask */
N
N#define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< CoreDebug DHCSR: S_LOCKUP Position */
N#define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< CoreDebug DHCSR: S_LOCKUP Mask */
N
N#define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< CoreDebug DHCSR: S_SLEEP Position */
N#define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< CoreDebug DHCSR: S_SLEEP Mask */
N
N#define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< CoreDebug DHCSR: S_HALT Position */
N#define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< CoreDebug DHCSR: S_HALT Mask */
N
N#define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< CoreDebug DHCSR: S_REGRDY Position */
N#define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< CoreDebug DHCSR: S_REGRDY Mask */
N
N#define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< CoreDebug DHCSR: C_SNAPSTALL Position */
N#define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< CoreDebug DHCSR: C_SNAPSTALL Mask */
N
N#define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< CoreDebug DHCSR: C_MASKINTS Position */
N#define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< CoreDebug DHCSR: C_MASKINTS Mask */
N
N#define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< CoreDebug DHCSR: C_STEP Position */
N#define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< CoreDebug DHCSR: C_STEP Mask */
N
N#define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< CoreDebug DHCSR: C_HALT Position */
N#define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< CoreDebug DHCSR: C_HALT Mask */
N
N#define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< CoreDebug DHCSR: C_DEBUGEN Position */
N#define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< CoreDebug DHCSR: C_DEBUGEN Mask */
N
N/* Debug Core Register Selector Register */
N#define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< CoreDebug DCRSR: REGWnR Position */
N#define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< CoreDebug DCRSR: REGWnR Mask */
N
N#define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< CoreDebug DCRSR: REGSEL Position */
N#define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< CoreDebug DCRSR: REGSEL Mask */
N
N/* Debug Exception and Monitor Control Register */
N#define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< CoreDebug DEMCR: TRCENA Position */
N#define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< CoreDebug DEMCR: TRCENA Mask */
N
N#define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< CoreDebug DEMCR: MON_REQ Position */
N#define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< CoreDebug DEMCR: MON_REQ Mask */
N
N#define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< CoreDebug DEMCR: MON_STEP Position */
N#define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< CoreDebug DEMCR: MON_STEP Mask */
N
N#define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< CoreDebug DEMCR: MON_PEND Position */
N#define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< CoreDebug DEMCR: MON_PEND Mask */
N
N#define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< CoreDebug DEMCR: MON_EN Position */
N#define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< CoreDebug DEMCR: MON_EN Mask */
N
N#define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< CoreDebug DEMCR: VC_HARDERR Position */
N#define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< CoreDebug DEMCR: VC_HARDERR Mask */
N
N#define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< CoreDebug DEMCR: VC_INTERR Position */
N#define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< CoreDebug DEMCR: VC_INTERR Mask */
N
N#define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< CoreDebug DEMCR: VC_BUSERR Position */
N#define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< CoreDebug DEMCR: VC_BUSERR Mask */
N
N#define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< CoreDebug DEMCR: VC_STATERR Position */
N#define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< CoreDebug DEMCR: VC_STATERR Mask */
N
N#define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< CoreDebug DEMCR: VC_CHKERR Position */
N#define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< CoreDebug DEMCR: VC_CHKERR Mask */
N
N#define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< CoreDebug DEMCR: VC_NOCPERR Position */
N#define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< CoreDebug DEMCR: VC_NOCPERR Mask */
N
N#define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< CoreDebug DEMCR: VC_MMERR Position */
N#define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< CoreDebug DEMCR: VC_MMERR Mask */
N
N#define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< CoreDebug DEMCR: VC_CORERESET Position */
N#define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< CoreDebug DEMCR: VC_CORERESET Mask */
N
N/*@} end of group CMSIS_CoreDebug */
N
N
N/** \ingroup    CMSIS_core_register
N    \defgroup   CMSIS_core_base     Core Definitions
N    \brief      Definitions for base addresses, unions, and structures.
N  @{
N */
N
N/* Memory mapping of Cortex-M4 Hardware */
N#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address  */
N#define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address                   */
N#define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address                   */
N#define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address                   */
N#define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address            */
N#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address               */
N#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address                  */
N#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address  */
N
N#define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register not in SCB */
N#define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct           */
N#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct       */
N#define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struct          */
N#define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct           */
N#define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct           */
N#define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct           */
N#define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration struct    */
N
N#if (__MPU_PRESENT == 1)
X#if (1 == 1)
N  #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit             */
N  #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit             */
N#endif
N
N#if (__FPU_PRESENT == 1)
X#if (1 == 1)
N  #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit                */
N  #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit                */
N#endif
N
N/*@} */
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N  Core Function Interface contains:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Debug Functions
N  - Core Register Access Functions
N ******************************************************************************/
N/** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
N*/
N
N
N
N/* ##########################   NVIC functions  #################################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_NVICFunctions NVIC Functions
N    \brief      Functions that manage interrupts and exceptions via the NVIC.
N    @{
N */
N
N/** \brief  Set Priority Grouping
N
N  The function sets the priority grouping field using the required unlock sequence.
N  The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
N  Only values from 0..7 are used.
N  In case of a conflict between priority grouping and available
N  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
N
N    \param [in]      PriorityGroup  Priority grouping field.
N */
N__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
Xstatic __inline void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
N{
N  uint32_t reg_value;
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
N
N  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
X  reg_value  =  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;                                                    
N  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
X  reg_value &= ~((0xFFFFUL << 16) | (7UL << 8));              
N  reg_value  =  (reg_value                                 |
N                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
X                ((uint32_t)0x5FA << 16) |
N                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
N  SCB->AIRCR =  reg_value;
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR =  reg_value;
N}
N
N
N/** \brief  Get Priority Grouping
N
N  The function reads the priority grouping field from the NVIC Interrupt Controller.
N
N    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
N */
N__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
Xstatic __inline uint32_t NVIC_GetPriorityGrouping(void)
N{
N  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
X  return ((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8)) >> 8);    
N}
N
N
N/** \brief  Enable External Interrupt
N
N    The function enables a device-specific interrupt in the NVIC interrupt controller.
N
N    \param [in]      IRQn  External interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
N  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));  
N}
N
N
N/** \brief  Disable External Interrupt
N
N    The function disables a device-specific interrupt in the NVIC interrupt controller.
N
N    \param [in]      IRQn  External interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N
N/** \brief  Get Pending Interrupt
N
N    The function reads the pending register in the NVIC and returns the pending bit
N    for the specified interrupt.
N
N    \param [in]      IRQn  Interrupt number.
N
N    \return             0  Interrupt status is not pending.
N    \return             1  Interrupt status is pending.
N */
N__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
X  return((uint32_t) ((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));  
N}
N
N
N/** \brief  Set Pending Interrupt
N
N    The function sets the pending bit of an external interrupt.
N
N    \param [in]      IRQn  Interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N
N/** \brief  Clear Pending Interrupt
N
N    The function clears the pending bit of an external interrupt.
N
N    \param [in]      IRQn  External interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N
N/** \brief  Get Active Interrupt
N
N    The function reads the active register in NVIC and returns the active bit.
N
N    \param [in]      IRQn  Interrupt number.
N
N    \return             0  Interrupt status is not active.
N    \return             1  Interrupt status is active.
N */
N__STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetActive(IRQn_Type IRQn)
N{
N  return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if active else 0 */
X  return((uint32_t)((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));  
N}
N
N
N/** \brief  Set Interrupt Priority
N
N    The function sets the priority of an interrupt.
N
N    \note The priority cannot be set for every core interrupt.
N
N    \param [in]      IRQn  Interrupt number.
N    \param [in]  priority  Priority to set.
N */
N__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if(IRQn < 0) {
N    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - 4)) & 0xff); }  
N  else {
N    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[(uint32_t)(IRQn)] = ((priority << (8 - 4)) & 0xff);    }         
N}
N
N
N/** \brief  Get Interrupt Priority
N
N    The function reads the priority of an interrupt. The interrupt
N    number can be positive to specify an external (device specific)
N    interrupt, or negative to specify an internal (core) interrupt.
N
N
N    \param [in]   IRQn  Interrupt number.
N    \return             Interrupt Priority. Value is aligned automatically to the implemented
N                        priority bits of the microcontroller.
N */
N__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if(IRQn < 0) {
N    return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M  system interrupts */
X    return((uint32_t)(((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - 4)));  }  
N  else {
N    return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
X    return((uint32_t)(((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[(uint32_t)(IRQn)]           >> (8 - 4)));  }  
N}
N
N
N/** \brief  Encode Priority
N
N    The function encodes the priority for an interrupt with the given priority group,
N    preemptive priority value, and subpriority value.
N    In case of a conflict between priority grouping and available
N    priority bits (__NVIC_PRIO_BITS), the samllest possible priority group is set.
N
N    \param [in]     PriorityGroup  Used priority group.
N    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
N    \param [in]       SubPriority  Subpriority value (starting from 0).
N    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
N */
N__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
Xstatic __inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
X  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 4) ? 4 : 7 - PriorityGroupTmp;
N  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
X  SubPriorityBits     = ((PriorityGroupTmp + 4) < 7) ? 0 : PriorityGroupTmp - 7 + 4;
N
N  return (
N           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
N           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
N         );
N}
N
N
N/** \brief  Decode Priority
N
N    The function decodes an interrupt priority value with a given priority group to
N    preemptive priority value and subpriority value.
N    In case of a conflict between priority grouping and available
N    priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
N
N    \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC_GetPriority().
N    \param [in]     PriorityGroup  Used priority group.
N    \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
N    \param [out]     pSubPriority  Subpriority value (starting from 0).
N */
N__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
Xstatic __inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
X  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 4) ? 4 : 7 - PriorityGroupTmp;
N  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
X  SubPriorityBits     = ((PriorityGroupTmp + 4) < 7) ? 0 : PriorityGroupTmp - 7 + 4;
N
N  *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
N  *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
N}
N
N
N/** \brief  System Reset
N
N    The function initiates a system reset request to reset the MCU.
N */
N__STATIC_INLINE void NVIC_SystemReset(void)
Xstatic __inline void NVIC_SystemReset(void)
N{
N  __DSB();                                                     /* Ensure all outstanding memory accesses included
X  __dsb(0xF);                                                     
N                                                                  buffered write are completed before reset */
N  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = ((0x5FA << 16)      |
N                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
X                 (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8)) |
N                 SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
X                 (1UL << 2));                    
N  __DSB();                                                     /* Ensure completion of memory access */
X  __dsb(0xF);                                                      
N  while(1);                                                    /* wait until reset */
N}
N
N/*@} end of CMSIS_Core_NVICFunctions */
N
N
N
N/* ##################################    SysTick function  ############################################ */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
N    \brief      Functions that configure the System.
N  @{
N */
N
N#if (__Vendor_SysTickConfig == 0)
X#if (0 == 0)
N
N/** \brief  System Tick Configuration
N
N    The function initializes the System Timer and its interrupt, and starts the System Tick Timer.
N    Counter is in free running mode to generate periodic interrupts.
N
N    \param [in]  ticks  Number of ticks between two interrupts.
N
N    \return          0  Function succeeded.
N    \return          1  Function failed.
N
N    \note     When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
N    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
N    must contain a vendor-specific implementation of this function.
N
N */
N__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{
N  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
X  if ((ticks - 1) > (0xFFFFFFUL << 0))  return (1);       
N
N  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = ticks - 1;                                   
N  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
X  NVIC_SetPriority (SysTick_IRQn, (1<<4) - 1);   
N  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0;                                           
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2) |
N                   SysTick_CTRL_TICKINT_Msk   |
X                   (1UL << 1)   |
N                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
X                   (1UL << 0);                     
N  return (0);                                                  /* Function successful */
N}
N
N#endif
N
N/*@} end of CMSIS_Core_SysTickFunctions */
N
N
N
N/* ##################################### Debug In/Output function ########################################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_core_DebugFunctions ITM Functions
N    \brief   Functions that access the ITM debug interface.
N  @{
N */
N
Nextern volatile int32_t ITM_RxBuffer;                    /*!< External variable to receive characters.                         */
N#define                 ITM_RXBUFFER_EMPTY    0x5AA55AA5 /*!< Value identifying \ref ITM_RxBuffer is ready for next character. */
N
N
N/** \brief  ITM Send Character
N
N    The function transmits a character via the ITM channel 0, and
N    \li Just returns when no debugger is connected that has booked the output.
N    \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
N
N    \param [in]     ch  Character to transmit.
N
N    \returns            Character to transmit.
N */
N__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
Xstatic __inline uint32_t ITM_SendChar (uint32_t ch)
N{
N  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
X  if ((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL << 0))                  &&       
N      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
X      (((ITM_Type *) (0xE0000000UL) )->TER & (1UL << 0)        )                    )      
N  {
N    while (ITM->PORT[0].u32 == 0);
X    while (((ITM_Type *) (0xE0000000UL) )->PORT[0].u32 == 0);
N    ITM->PORT[0].u8 = (uint8_t) ch;
X    ((ITM_Type *) (0xE0000000UL) )->PORT[0].u8 = (uint8_t) ch;
N  }
N  return (ch);
N}
N
N
N/** \brief  ITM Receive Character
N
N    The function inputs a character via the external variable \ref ITM_RxBuffer.
N
N    \return             Received character.
N    \return         -1  No character pending.
N */
N__STATIC_INLINE int32_t ITM_ReceiveChar (void) {
Xstatic __inline int32_t ITM_ReceiveChar (void) {
N  int32_t ch = -1;                           /* no character available */
N
N  if (ITM_RxBuffer != ITM_RXBUFFER_EMPTY) {
X  if (ITM_RxBuffer != 0x5AA55AA5) {
N    ch = ITM_RxBuffer;
N    ITM_RxBuffer = ITM_RXBUFFER_EMPTY;       /* ready for next character */
X    ITM_RxBuffer = 0x5AA55AA5;        
N  }
N
N  return (ch);
N}
N
N
N/** \brief  ITM Check Character
N
N    The function checks whether a character is pending for reading in the variable \ref ITM_RxBuffer.
N
N    \return          0  No character available.
N    \return          1  Character available.
N */
N__STATIC_INLINE int32_t ITM_CheckChar (void) {
Xstatic __inline int32_t ITM_CheckChar (void) {
N
N  if (ITM_RxBuffer == ITM_RXBUFFER_EMPTY) {
X  if (ITM_RxBuffer == 0x5AA55AA5) {
N    return (0);                                 /* no character available */
N  } else {
N    return (1);                                 /*    character available */
N  }
N}
N
N/*@} end of CMSIS_core_DebugFunctions */
N
N#endif /* __CORE_CM4_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
N
N#ifdef __cplusplus
S}
N#endif
L 464 "..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\stm32f4xx.h" 2
N#include "system_stm32f4xx.h"
L 1 "..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\system_stm32f4xx.h" 1
N/**
N  ******************************************************************************
N  * @file    system_stm32f4xx.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   CMSIS Cortex-M4 Device System Source File for STM32F4xx devices.       
N  ******************************************************************************  
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************  
N  */ 
N
N/** @addtogroup CMSIS
N  * @{
N  */
N
N/** @addtogroup stm32f4xx_system
N  * @{
N  */  
N  
N/**
N  * @brief Define to prevent recursive inclusion
N  */
N#ifndef __SYSTEM_STM32F4XX_H
N#define __SYSTEM_STM32F4XX_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif 
N
N/** @addtogroup STM32F4xx_System_Includes
N  * @{
N  */
N
N/**
N  * @}
N  */
N
N
N/** @addtogroup STM32F4xx_System_Exported_types
N  * @{
N  */
N
Nextern uint32_t SystemCoreClock;          /*!< System Clock Frequency (Core Clock) */
N
N
N/**
N  * @}
N  */
N
N/** @addtogroup STM32F4xx_System_Exported_Constants
N  * @{
N  */
N
N/**
N  * @}
N  */
N
N/** @addtogroup STM32F4xx_System_Exported_Macros
N  * @{
N  */
N
N/**
N  * @}
N  */
N
N/** @addtogroup STM32F4xx_System_Exported_Functions
N  * @{
N  */
N  
Nextern void SystemInit(void);
Nextern void SystemCoreClockUpdate(void);
N/**
N  * @}
N  */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__SYSTEM_STM32F4XX_H */
N
N/**
N  * @}
N  */
N  
N/**
N  * @}
N  */  
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 465 "..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\stm32f4xx.h" 2
N#include <stdint.h>
N
N/** @addtogroup Exported_types
N  * @{
N  */  
N/*!< STM32F10x Standard Peripheral Library old types (maintained for legacy purpose) */
Ntypedef int32_t  s32;
Ntypedef int16_t s16;
Ntypedef int8_t  s8;
N
Ntypedef const int32_t sc32;  /*!< Read Only */
Ntypedef const int16_t sc16;  /*!< Read Only */
Ntypedef const int8_t sc8;   /*!< Read Only */
N
Ntypedef __IO int32_t  vs32;
Xtypedef volatile int32_t  vs32;
Ntypedef __IO int16_t  vs16;
Xtypedef volatile int16_t  vs16;
Ntypedef __IO int8_t   vs8;
Xtypedef volatile int8_t   vs8;
N
Ntypedef __I int32_t vsc32;  /*!< Read Only */
Xtypedef volatile const int32_t vsc32;   
Ntypedef __I int16_t vsc16;  /*!< Read Only */
Xtypedef volatile const int16_t vsc16;   
Ntypedef __I int8_t vsc8;   /*!< Read Only */
Xtypedef volatile const int8_t vsc8;    
N
Ntypedef uint32_t  u32;
Ntypedef uint16_t u16;
Ntypedef uint8_t  u8;
N
Ntypedef const uint32_t uc32;  /*!< Read Only */
Ntypedef const uint16_t uc16;  /*!< Read Only */
Ntypedef const uint8_t uc8;   /*!< Read Only */
N
Ntypedef __IO uint32_t  vu32;
Xtypedef volatile uint32_t  vu32;
Ntypedef __IO uint16_t vu16;
Xtypedef volatile uint16_t vu16;
Ntypedef __IO uint8_t  vu8;
Xtypedef volatile uint8_t  vu8;
N
Ntypedef __I uint32_t vuc32;  /*!< Read Only */
Xtypedef volatile const uint32_t vuc32;   
Ntypedef __I uint16_t vuc16;  /*!< Read Only */
Xtypedef volatile const uint16_t vuc16;   
Ntypedef __I uint8_t vuc8;   /*!< Read Only */
Xtypedef volatile const uint8_t vuc8;    
N
Ntypedef enum {RESET = 0, SET = !RESET} FlagStatus, ITStatus;
N
Ntypedef enum {DISABLE = 0, ENABLE = !DISABLE} FunctionalState;
N#define IS_FUNCTIONAL_STATE(STATE) (((STATE) == DISABLE) || ((STATE) == ENABLE))
N
Ntypedef enum {ERROR = 0, SUCCESS = !ERROR} ErrorStatus;
N
N/**
N  * @}
N  */
N
N/** @addtogroup Peripheral_registers_structures
N  * @{
N  */   
N
N/** 
N  * @brief Analog to Digital Converter  
N  */
N
Ntypedef struct
N{
N  __IO uint32_t SR;     /*!< ADC status register,                         Address offset: 0x00 */
X  volatile uint32_t SR;      
N  __IO uint32_t CR1;    /*!< ADC control register 1,                      Address offset: 0x04 */      
X  volatile uint32_t CR1;           
N  __IO uint32_t CR2;    /*!< ADC control register 2,                      Address offset: 0x08 */
X  volatile uint32_t CR2;     
N  __IO uint32_t SMPR1;  /*!< ADC sample time register 1,                  Address offset: 0x0C */
X  volatile uint32_t SMPR1;   
N  __IO uint32_t SMPR2;  /*!< ADC sample time register 2,                  Address offset: 0x10 */
X  volatile uint32_t SMPR2;   
N  __IO uint32_t JOFR1;  /*!< ADC injected channel data offset register 1, Address offset: 0x14 */
X  volatile uint32_t JOFR1;   
N  __IO uint32_t JOFR2;  /*!< ADC injected channel data offset register 2, Address offset: 0x18 */
X  volatile uint32_t JOFR2;   
N  __IO uint32_t JOFR3;  /*!< ADC injected channel data offset register 3, Address offset: 0x1C */
X  volatile uint32_t JOFR3;   
N  __IO uint32_t JOFR4;  /*!< ADC injected channel data offset register 4, Address offset: 0x20 */
X  volatile uint32_t JOFR4;   
N  __IO uint32_t HTR;    /*!< ADC watchdog higher threshold register,      Address offset: 0x24 */
X  volatile uint32_t HTR;     
N  __IO uint32_t LTR;    /*!< ADC watchdog lower threshold register,       Address offset: 0x28 */
X  volatile uint32_t LTR;     
N  __IO uint32_t SQR1;   /*!< ADC regular sequence register 1,             Address offset: 0x2C */
X  volatile uint32_t SQR1;    
N  __IO uint32_t SQR2;   /*!< ADC regular sequence register 2,             Address offset: 0x30 */
X  volatile uint32_t SQR2;    
N  __IO uint32_t SQR3;   /*!< ADC regular sequence register 3,             Address offset: 0x34 */
X  volatile uint32_t SQR3;    
N  __IO uint32_t JSQR;   /*!< ADC injected sequence register,              Address offset: 0x38*/
X  volatile uint32_t JSQR;    
N  __IO uint32_t JDR1;   /*!< ADC injected data register 1,                Address offset: 0x3C */
X  volatile uint32_t JDR1;    
N  __IO uint32_t JDR2;   /*!< ADC injected data register 2,                Address offset: 0x40 */
X  volatile uint32_t JDR2;    
N  __IO uint32_t JDR3;   /*!< ADC injected data register 3,                Address offset: 0x44 */
X  volatile uint32_t JDR3;    
N  __IO uint32_t JDR4;   /*!< ADC injected data register 4,                Address offset: 0x48 */
X  volatile uint32_t JDR4;    
N  __IO uint32_t DR;     /*!< ADC regular data register,                   Address offset: 0x4C */
X  volatile uint32_t DR;      
N} ADC_TypeDef;
N
Ntypedef struct
N{
N  __IO uint32_t CSR;    /*!< ADC Common status register,                  Address offset: ADC1 base address + 0x300 */
X  volatile uint32_t CSR;     
N  __IO uint32_t CCR;    /*!< ADC common control register,                 Address offset: ADC1 base address + 0x304 */
X  volatile uint32_t CCR;     
N  __IO uint32_t CDR;    /*!< ADC common regular data register for dual
X  volatile uint32_t CDR;    
N                             AND triple modes,                            Address offset: ADC1 base address + 0x308 */
N} ADC_Common_TypeDef;
N
N
N/** 
N  * @brief Controller Area Network TxMailBox 
N  */
N
Ntypedef struct
N{
N  __IO uint32_t TIR;  /*!< CAN TX mailbox identifier register */
X  volatile uint32_t TIR;   
N  __IO uint32_t TDTR; /*!< CAN mailbox data length control and time stamp register */
X  volatile uint32_t TDTR;  
N  __IO uint32_t TDLR; /*!< CAN mailbox data low register */
X  volatile uint32_t TDLR;  
N  __IO uint32_t TDHR; /*!< CAN mailbox data high register */
X  volatile uint32_t TDHR;  
N} CAN_TxMailBox_TypeDef;
N
N/** 
N  * @brief Controller Area Network FIFOMailBox 
N  */
N  
Ntypedef struct
N{
N  __IO uint32_t RIR;  /*!< CAN receive FIFO mailbox identifier register */
X  volatile uint32_t RIR;   
N  __IO uint32_t RDTR; /*!< CAN receive FIFO mailbox data length control and time stamp register */
X  volatile uint32_t RDTR;  
N  __IO uint32_t RDLR; /*!< CAN receive FIFO mailbox data low register */
X  volatile uint32_t RDLR;  
N  __IO uint32_t RDHR; /*!< CAN receive FIFO mailbox data high register */
X  volatile uint32_t RDHR;  
N} CAN_FIFOMailBox_TypeDef;
N
N/** 
N  * @brief Controller Area Network FilterRegister 
N  */
N  
Ntypedef struct
N{
N  __IO uint32_t FR1; /*!< CAN Filter bank register 1 */
X  volatile uint32_t FR1;  
N  __IO uint32_t FR2; /*!< CAN Filter bank register 1 */
X  volatile uint32_t FR2;  
N} CAN_FilterRegister_TypeDef;
N
N/** 
N  * @brief Controller Area Network 
N  */
N  
Ntypedef struct
N{
N  __IO uint32_t              MCR;                 /*!< CAN master control register,         Address offset: 0x00          */
X  volatile uint32_t              MCR;                  
N  __IO uint32_t              MSR;                 /*!< CAN master status register,          Address offset: 0x04          */
X  volatile uint32_t              MSR;                  
N  __IO uint32_t              TSR;                 /*!< CAN transmit status register,        Address offset: 0x08          */
X  volatile uint32_t              TSR;                  
N  __IO uint32_t              RF0R;                /*!< CAN receive FIFO 0 register,         Address offset: 0x0C          */
X  volatile uint32_t              RF0R;                 
N  __IO uint32_t              RF1R;                /*!< CAN receive FIFO 1 register,         Address offset: 0x10          */
X  volatile uint32_t              RF1R;                 
N  __IO uint32_t              IER;                 /*!< CAN interrupt enable register,       Address offset: 0x14          */
X  volatile uint32_t              IER;                  
N  __IO uint32_t              ESR;                 /*!< CAN error status register,           Address offset: 0x18          */
X  volatile uint32_t              ESR;                  
N  __IO uint32_t              BTR;                 /*!< CAN bit timing register,             Address offset: 0x1C          */
X  volatile uint32_t              BTR;                  
N  uint32_t                   RESERVED0[88];       /*!< Reserved, 0x020 - 0x17F                                            */
N  CAN_TxMailBox_TypeDef      sTxMailBox[3];       /*!< CAN Tx MailBox,                      Address offset: 0x180 - 0x1AC */
N  CAN_FIFOMailBox_TypeDef    sFIFOMailBox[2];     /*!< CAN FIFO MailBox,                    Address offset: 0x1B0 - 0x1CC */
N  uint32_t                   RESERVED1[12];       /*!< Reserved, 0x1D0 - 0x1FF                                            */
N  __IO uint32_t              FMR;                 /*!< CAN filter master register,          Address offset: 0x200         */
X  volatile uint32_t              FMR;                  
N  __IO uint32_t              FM1R;                /*!< CAN filter mode register,            Address offset: 0x204         */
X  volatile uint32_t              FM1R;                 
N  uint32_t                   RESERVED2;           /*!< Reserved, 0x208                                                    */
N  __IO uint32_t              FS1R;                /*!< CAN filter scale register,           Address offset: 0x20C         */
X  volatile uint32_t              FS1R;                 
N  uint32_t                   RESERVED3;           /*!< Reserved, 0x210                                                    */
N  __IO uint32_t              FFA1R;               /*!< CAN filter FIFO assignment register, Address offset: 0x214         */
X  volatile uint32_t              FFA1R;                
N  uint32_t                   RESERVED4;           /*!< Reserved, 0x218                                                    */
N  __IO uint32_t              FA1R;                /*!< CAN filter activation register,      Address offset: 0x21C         */
X  volatile uint32_t              FA1R;                 
N  uint32_t                   RESERVED5[8];        /*!< Reserved, 0x220-0x23F                                              */ 
N  CAN_FilterRegister_TypeDef sFilterRegister[28]; /*!< CAN Filter Register,                 Address offset: 0x240-0x31C   */
N} CAN_TypeDef;
N
N/** 
N  * @brief CRC calculation unit 
N  */
N
Ntypedef struct
N{
N  __IO uint32_t DR;         /*!< CRC Data register,             Address offset: 0x00 */
X  volatile uint32_t DR;          
N  __IO uint8_t  IDR;        /*!< CRC Independent data register, Address offset: 0x04 */
X  volatile uint8_t  IDR;         
N  uint8_t       RESERVED0;  /*!< Reserved, 0x05                                      */
N  uint16_t      RESERVED1;  /*!< Reserved, 0x06                                      */
N  __IO uint32_t CR;         /*!< CRC Control register,          Address offset: 0x08 */
X  volatile uint32_t CR;          
N} CRC_TypeDef;
N
N/** 
N  * @brief Digital to Analog Converter
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CR;       /*!< DAC control register,                                    Address offset: 0x00 */
X  volatile uint32_t CR;        
N  __IO uint32_t SWTRIGR;  /*!< DAC software trigger register,                           Address offset: 0x04 */
X  volatile uint32_t SWTRIGR;   
N  __IO uint32_t DHR12R1;  /*!< DAC channel1 12-bit right-aligned data holding register, Address offset: 0x08 */
X  volatile uint32_t DHR12R1;   
N  __IO uint32_t DHR12L1;  /*!< DAC channel1 12-bit left aligned data holding register,  Address offset: 0x0C */
X  volatile uint32_t DHR12L1;   
N  __IO uint32_t DHR8R1;   /*!< DAC channel1 8-bit right aligned data holding register,  Address offset: 0x10 */
X  volatile uint32_t DHR8R1;    
N  __IO uint32_t DHR12R2;  /*!< DAC channel2 12-bit right aligned data holding register, Address offset: 0x14 */
X  volatile uint32_t DHR12R2;   
N  __IO uint32_t DHR12L2;  /*!< DAC channel2 12-bit left aligned data holding register,  Address offset: 0x18 */
X  volatile uint32_t DHR12L2;   
N  __IO uint32_t DHR8R2;   /*!< DAC channel2 8-bit right-aligned data holding register,  Address offset: 0x1C */
X  volatile uint32_t DHR8R2;    
N  __IO uint32_t DHR12RD;  /*!< Dual DAC 12-bit right-aligned data holding register,     Address offset: 0x20 */
X  volatile uint32_t DHR12RD;   
N  __IO uint32_t DHR12LD;  /*!< DUAL DAC 12-bit left aligned data holding register,      Address offset: 0x24 */
X  volatile uint32_t DHR12LD;   
N  __IO uint32_t DHR8RD;   /*!< DUAL DAC 8-bit right aligned data holding register,      Address offset: 0x28 */
X  volatile uint32_t DHR8RD;    
N  __IO uint32_t DOR1;     /*!< DAC channel1 data output register,                       Address offset: 0x2C */
X  volatile uint32_t DOR1;      
N  __IO uint32_t DOR2;     /*!< DAC channel2 data output register,                       Address offset: 0x30 */
X  volatile uint32_t DOR2;      
N  __IO uint32_t SR;       /*!< DAC status register,                                     Address offset: 0x34 */
X  volatile uint32_t SR;        
N} DAC_TypeDef;
N
N/** 
N  * @brief Debug MCU
N  */
N
Ntypedef struct
N{
N  __IO uint32_t IDCODE;  /*!< MCU device ID code,               Address offset: 0x00 */
X  volatile uint32_t IDCODE;   
N  __IO uint32_t CR;      /*!< Debug MCU configuration register, Address offset: 0x04 */
X  volatile uint32_t CR;       
N  __IO uint32_t APB1FZ;  /*!< Debug MCU APB1 freeze register,   Address offset: 0x08 */
X  volatile uint32_t APB1FZ;   
N  __IO uint32_t APB2FZ;  /*!< Debug MCU APB2 freeze register,   Address offset: 0x0C */
X  volatile uint32_t APB2FZ;   
N}DBGMCU_TypeDef;
N
N/** 
N  * @brief DCMI
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CR;       /*!< DCMI control register 1,                       Address offset: 0x00 */
X  volatile uint32_t CR;        
N  __IO uint32_t SR;       /*!< DCMI status register,                          Address offset: 0x04 */
X  volatile uint32_t SR;        
N  __IO uint32_t RISR;     /*!< DCMI raw interrupt status register,            Address offset: 0x08 */
X  volatile uint32_t RISR;      
N  __IO uint32_t IER;      /*!< DCMI interrupt enable register,                Address offset: 0x0C */
X  volatile uint32_t IER;       
N  __IO uint32_t MISR;     /*!< DCMI masked interrupt status register,         Address offset: 0x10 */
X  volatile uint32_t MISR;      
N  __IO uint32_t ICR;      /*!< DCMI interrupt clear register,                 Address offset: 0x14 */
X  volatile uint32_t ICR;       
N  __IO uint32_t ESCR;     /*!< DCMI embedded synchronization code register,   Address offset: 0x18 */
X  volatile uint32_t ESCR;      
N  __IO uint32_t ESUR;     /*!< DCMI embedded synchronization unmask register, Address offset: 0x1C */
X  volatile uint32_t ESUR;      
N  __IO uint32_t CWSTRTR;  /*!< DCMI crop window start,                        Address offset: 0x20 */
X  volatile uint32_t CWSTRTR;   
N  __IO uint32_t CWSIZER;  /*!< DCMI crop window size,                         Address offset: 0x24 */
X  volatile uint32_t CWSIZER;   
N  __IO uint32_t DR;       /*!< DCMI data register,                            Address offset: 0x28 */
X  volatile uint32_t DR;        
N} DCMI_TypeDef;
N
N/** 
N  * @brief DMA Controller
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CR;     /*!< DMA stream x configuration register      */
X  volatile uint32_t CR;      
N  __IO uint32_t NDTR;   /*!< DMA stream x number of data register     */
X  volatile uint32_t NDTR;    
N  __IO uint32_t PAR;    /*!< DMA stream x peripheral address register */
X  volatile uint32_t PAR;     
N  __IO uint32_t M0AR;   /*!< DMA stream x memory 0 address register   */
X  volatile uint32_t M0AR;    
N  __IO uint32_t M1AR;   /*!< DMA stream x memory 1 address register   */
X  volatile uint32_t M1AR;    
N  __IO uint32_t FCR;    /*!< DMA stream x FIFO control register       */
X  volatile uint32_t FCR;     
N} DMA_Stream_TypeDef;
N
Ntypedef struct
N{
N  __IO uint32_t LISR;   /*!< DMA low interrupt status register,      Address offset: 0x00 */
X  volatile uint32_t LISR;    
N  __IO uint32_t HISR;   /*!< DMA high interrupt status register,     Address offset: 0x04 */
X  volatile uint32_t HISR;    
N  __IO uint32_t LIFCR;  /*!< DMA low interrupt flag clear register,  Address offset: 0x08 */
X  volatile uint32_t LIFCR;   
N  __IO uint32_t HIFCR;  /*!< DMA high interrupt flag clear register, Address offset: 0x0C */
X  volatile uint32_t HIFCR;   
N} DMA_TypeDef;
N 
N/** 
N  * @brief DMA2D Controller
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CR;            /*!< DMA2D Control Register,                         Address offset: 0x00 */
X  volatile uint32_t CR;             
N  __IO uint32_t ISR;           /*!< DMA2D Interrupt Status Register,                Address offset: 0x04 */
X  volatile uint32_t ISR;            
N  __IO uint32_t IFCR;          /*!< DMA2D Interrupt Flag Clear Register,            Address offset: 0x08 */
X  volatile uint32_t IFCR;           
N  __IO uint32_t FGMAR;         /*!< DMA2D Foreground Memory Address Register,       Address offset: 0x0C */
X  volatile uint32_t FGMAR;          
N  __IO uint32_t FGOR;          /*!< DMA2D Foreground Offset Register,               Address offset: 0x10 */
X  volatile uint32_t FGOR;           
N  __IO uint32_t BGMAR;         /*!< DMA2D Background Memory Address Register,       Address offset: 0x14 */
X  volatile uint32_t BGMAR;          
N  __IO uint32_t BGOR;          /*!< DMA2D Background Offset Register,               Address offset: 0x18 */
X  volatile uint32_t BGOR;           
N  __IO uint32_t FGPFCCR;       /*!< DMA2D Foreground PFC Control Register,          Address offset: 0x1C */
X  volatile uint32_t FGPFCCR;        
N  __IO uint32_t FGCOLR;        /*!< DMA2D Foreground Color Register,                Address offset: 0x20 */
X  volatile uint32_t FGCOLR;         
N  __IO uint32_t BGPFCCR;       /*!< DMA2D Background PFC Control Register,          Address offset: 0x24 */
X  volatile uint32_t BGPFCCR;        
N  __IO uint32_t BGCOLR;        /*!< DMA2D Background Color Register,                Address offset: 0x28 */
X  volatile uint32_t BGCOLR;         
N  __IO uint32_t FGCMAR;        /*!< DMA2D Foreground CLUT Memory Address Register,  Address offset: 0x2C */
X  volatile uint32_t FGCMAR;         
N  __IO uint32_t BGCMAR;        /*!< DMA2D Background CLUT Memory Address Register,  Address offset: 0x30 */
X  volatile uint32_t BGCMAR;         
N  __IO uint32_t OPFCCR;        /*!< DMA2D Output PFC Control Register,              Address offset: 0x34 */
X  volatile uint32_t OPFCCR;         
N  __IO uint32_t OCOLR;         /*!< DMA2D Output Color Register,                    Address offset: 0x38 */
X  volatile uint32_t OCOLR;          
N  __IO uint32_t OMAR;          /*!< DMA2D Output Memory Address Register,           Address offset: 0x3C */
X  volatile uint32_t OMAR;           
N  __IO uint32_t OOR;           /*!< DMA2D Output Offset Register,                   Address offset: 0x40 */
X  volatile uint32_t OOR;            
N  __IO uint32_t NLR;           /*!< DMA2D Number of Line Register,                  Address offset: 0x44 */
X  volatile uint32_t NLR;            
N  __IO uint32_t LWR;           /*!< DMA2D Line Watermark Register,                  Address offset: 0x48 */
X  volatile uint32_t LWR;            
N  __IO uint32_t AMTCR;         /*!< DMA2D AHB Master Timer Configuration Register,  Address offset: 0x4C */
X  volatile uint32_t AMTCR;          
N  uint32_t      RESERVED[236]; /*!< Reserved, 0x50-0x3FF */
N  __IO uint32_t FGCLUT[256];   /*!< DMA2D Foreground CLUT,                          Address offset:400-7FF */
X  volatile uint32_t FGCLUT[256];    
N  __IO uint32_t BGCLUT[256];   /*!< DMA2D Background CLUT,                          Address offset:800-BFF */
X  volatile uint32_t BGCLUT[256];    
N} DMA2D_TypeDef;
N
N/** 
N  * @brief Ethernet MAC
N  */
N
Ntypedef struct
N{
N  __IO uint32_t MACCR;
X  volatile uint32_t MACCR;
N  __IO uint32_t MACFFR;
X  volatile uint32_t MACFFR;
N  __IO uint32_t MACHTHR;
X  volatile uint32_t MACHTHR;
N  __IO uint32_t MACHTLR;
X  volatile uint32_t MACHTLR;
N  __IO uint32_t MACMIIAR;
X  volatile uint32_t MACMIIAR;
N  __IO uint32_t MACMIIDR;
X  volatile uint32_t MACMIIDR;
N  __IO uint32_t MACFCR;
X  volatile uint32_t MACFCR;
N  __IO uint32_t MACVLANTR;             /*    8 */
X  volatile uint32_t MACVLANTR;              
N  uint32_t      RESERVED0[2];
N  __IO uint32_t MACRWUFFR;             /*   11 */
X  volatile uint32_t MACRWUFFR;              
N  __IO uint32_t MACPMTCSR;
X  volatile uint32_t MACPMTCSR;
N  uint32_t      RESERVED1[2];
N  __IO uint32_t MACSR;                 /*   15 */
X  volatile uint32_t MACSR;                  
N  __IO uint32_t MACIMR;
X  volatile uint32_t MACIMR;
N  __IO uint32_t MACA0HR;
X  volatile uint32_t MACA0HR;
N  __IO uint32_t MACA0LR;
X  volatile uint32_t MACA0LR;
N  __IO uint32_t MACA1HR;
X  volatile uint32_t MACA1HR;
N  __IO uint32_t MACA1LR;
X  volatile uint32_t MACA1LR;
N  __IO uint32_t MACA2HR;
X  volatile uint32_t MACA2HR;
N  __IO uint32_t MACA2LR;
X  volatile uint32_t MACA2LR;
N  __IO uint32_t MACA3HR;
X  volatile uint32_t MACA3HR;
N  __IO uint32_t MACA3LR;               /*   24 */
X  volatile uint32_t MACA3LR;                
N  uint32_t      RESERVED2[40];
N  __IO uint32_t MMCCR;                 /*   65 */
X  volatile uint32_t MMCCR;                  
N  __IO uint32_t MMCRIR;
X  volatile uint32_t MMCRIR;
N  __IO uint32_t MMCTIR;
X  volatile uint32_t MMCTIR;
N  __IO uint32_t MMCRIMR;
X  volatile uint32_t MMCRIMR;
N  __IO uint32_t MMCTIMR;               /*   69 */
X  volatile uint32_t MMCTIMR;                
N  uint32_t      RESERVED3[14];
N  __IO uint32_t MMCTGFSCCR;            /*   84 */
X  volatile uint32_t MMCTGFSCCR;             
N  __IO uint32_t MMCTGFMSCCR;
X  volatile uint32_t MMCTGFMSCCR;
N  uint32_t      RESERVED4[5];
N  __IO uint32_t MMCTGFCR;
X  volatile uint32_t MMCTGFCR;
N  uint32_t      RESERVED5[10];
N  __IO uint32_t MMCRFCECR;
X  volatile uint32_t MMCRFCECR;
N  __IO uint32_t MMCRFAECR;
X  volatile uint32_t MMCRFAECR;
N  uint32_t      RESERVED6[10];
N  __IO uint32_t MMCRGUFCR;
X  volatile uint32_t MMCRGUFCR;
N  uint32_t      RESERVED7[334];
N  __IO uint32_t PTPTSCR;
X  volatile uint32_t PTPTSCR;
N  __IO uint32_t PTPSSIR;
X  volatile uint32_t PTPSSIR;
N  __IO uint32_t PTPTSHR;
X  volatile uint32_t PTPTSHR;
N  __IO uint32_t PTPTSLR;
X  volatile uint32_t PTPTSLR;
N  __IO uint32_t PTPTSHUR;
X  volatile uint32_t PTPTSHUR;
N  __IO uint32_t PTPTSLUR;
X  volatile uint32_t PTPTSLUR;
N  __IO uint32_t PTPTSAR;
X  volatile uint32_t PTPTSAR;
N  __IO uint32_t PTPTTHR;
X  volatile uint32_t PTPTTHR;
N  __IO uint32_t PTPTTLR;
X  volatile uint32_t PTPTTLR;
N  __IO uint32_t RESERVED8;
X  volatile uint32_t RESERVED8;
N  __IO uint32_t PTPTSSR;
X  volatile uint32_t PTPTSSR;
N  uint32_t      RESERVED9[565];
N  __IO uint32_t DMABMR;
X  volatile uint32_t DMABMR;
N  __IO uint32_t DMATPDR;
X  volatile uint32_t DMATPDR;
N  __IO uint32_t DMARPDR;
X  volatile uint32_t DMARPDR;
N  __IO uint32_t DMARDLAR;
X  volatile uint32_t DMARDLAR;
N  __IO uint32_t DMATDLAR;
X  volatile uint32_t DMATDLAR;
N  __IO uint32_t DMASR;
X  volatile uint32_t DMASR;
N  __IO uint32_t DMAOMR;
X  volatile uint32_t DMAOMR;
N  __IO uint32_t DMAIER;
X  volatile uint32_t DMAIER;
N  __IO uint32_t DMAMFBOCR;
X  volatile uint32_t DMAMFBOCR;
N  __IO uint32_t DMARSWTR;
X  volatile uint32_t DMARSWTR;
N  uint32_t      RESERVED10[8];
N  __IO uint32_t DMACHTDR;
X  volatile uint32_t DMACHTDR;
N  __IO uint32_t DMACHRDR;
X  volatile uint32_t DMACHRDR;
N  __IO uint32_t DMACHTBAR;
X  volatile uint32_t DMACHTBAR;
N  __IO uint32_t DMACHRBAR;
X  volatile uint32_t DMACHRBAR;
N} ETH_TypeDef;
N
N/** 
N  * @brief External Interrupt/Event Controller
N  */
N
Ntypedef struct
N{
N  __IO uint32_t IMR;    /*!< EXTI Interrupt mask register,            Address offset: 0x00 */
X  volatile uint32_t IMR;     
N  __IO uint32_t EMR;    /*!< EXTI Event mask register,                Address offset: 0x04 */
X  volatile uint32_t EMR;     
N  __IO uint32_t RTSR;   /*!< EXTI Rising trigger selection register,  Address offset: 0x08 */
X  volatile uint32_t RTSR;    
N  __IO uint32_t FTSR;   /*!< EXTI Falling trigger selection register, Address offset: 0x0C */
X  volatile uint32_t FTSR;    
N  __IO uint32_t SWIER;  /*!< EXTI Software interrupt event register,  Address offset: 0x10 */
X  volatile uint32_t SWIER;   
N  __IO uint32_t PR;     /*!< EXTI Pending register,                   Address offset: 0x14 */
X  volatile uint32_t PR;      
N} EXTI_TypeDef;
N
N/** 
N  * @brief FLASH Registers
N  */
N
Ntypedef struct
N{
N  __IO uint32_t ACR;      /*!< FLASH access control register,   Address offset: 0x00 */
X  volatile uint32_t ACR;       
N  __IO uint32_t KEYR;     /*!< FLASH key register,              Address offset: 0x04 */
X  volatile uint32_t KEYR;      
N  __IO uint32_t OPTKEYR;  /*!< FLASH option key register,       Address offset: 0x08 */
X  volatile uint32_t OPTKEYR;   
N  __IO uint32_t SR;       /*!< FLASH status register,           Address offset: 0x0C */
X  volatile uint32_t SR;        
N  __IO uint32_t CR;       /*!< FLASH control register,          Address offset: 0x10 */
X  volatile uint32_t CR;        
N  __IO uint32_t OPTCR;    /*!< FLASH option control register ,  Address offset: 0x14 */
X  volatile uint32_t OPTCR;     
N  __IO uint32_t OPTCR1;   /*!< FLASH option control register 1, Address offset: 0x18 */
X  volatile uint32_t OPTCR1;    
N} FLASH_TypeDef;
N
N#if defined (STM32F40_41xxx)
X#if 1L
N/** 
N  * @brief Flexible Static Memory Controller
N  */
N
Ntypedef struct
N{
N  __IO uint32_t BTCR[8];    /*!< NOR/PSRAM chip-select control register(BCR) and chip-select timing register(BTR), Address offset: 0x00-1C */   
X  volatile uint32_t BTCR[8];        
N} FSMC_Bank1_TypeDef; 
N
N/** 
N  * @brief Flexible Static Memory Controller Bank1E
N  */
N  
Ntypedef struct
N{
N  __IO uint32_t BWTR[7];    /*!< NOR/PSRAM write timing registers, Address offset: 0x104-0x11C */
X  volatile uint32_t BWTR[7];     
N} FSMC_Bank1E_TypeDef;
N
N/** 
N  * @brief Flexible Static Memory Controller Bank2
N  */
N  
Ntypedef struct
N{
N  __IO uint32_t PCR2;       /*!< NAND Flash control register 2,                       Address offset: 0x60 */
X  volatile uint32_t PCR2;        
N  __IO uint32_t SR2;        /*!< NAND Flash FIFO status and interrupt register 2,     Address offset: 0x64 */
X  volatile uint32_t SR2;         
N  __IO uint32_t PMEM2;      /*!< NAND Flash Common memory space timing register 2,    Address offset: 0x68 */
X  volatile uint32_t PMEM2;       
N  __IO uint32_t PATT2;      /*!< NAND Flash Attribute memory space timing register 2, Address offset: 0x6C */
X  volatile uint32_t PATT2;       
N  uint32_t      RESERVED0;  /*!< Reserved, 0x70                                                            */
N  __IO uint32_t ECCR2;      /*!< NAND Flash ECC result registers 2,                   Address offset: 0x74 */
X  volatile uint32_t ECCR2;       
N} FSMC_Bank2_TypeDef;
N
N/** 
N  * @brief Flexible Static Memory Controller Bank3
N  */
N  
Ntypedef struct
N{
N  __IO uint32_t PCR3;       /*!< NAND Flash control register 3,                       Address offset: 0x80 */
X  volatile uint32_t PCR3;        
N  __IO uint32_t SR3;        /*!< NAND Flash FIFO status and interrupt register 3,     Address offset: 0x84 */
X  volatile uint32_t SR3;         
N  __IO uint32_t PMEM3;      /*!< NAND Flash Common memory space timing register 3,    Address offset: 0x88 */
X  volatile uint32_t PMEM3;       
N  __IO uint32_t PATT3;      /*!< NAND Flash Attribute memory space timing register 3, Address offset: 0x8C */
X  volatile uint32_t PATT3;       
N  uint32_t      RESERVED0;  /*!< Reserved, 0x90                                                            */
N  __IO uint32_t ECCR3;      /*!< NAND Flash ECC result registers 3,                   Address offset: 0x94 */
X  volatile uint32_t ECCR3;       
N} FSMC_Bank3_TypeDef;
N
N/** 
N  * @brief Flexible Static Memory Controller Bank4
N  */
N  
Ntypedef struct
N{
N  __IO uint32_t PCR4;       /*!< PC Card  control register 4,                       Address offset: 0xA0 */
X  volatile uint32_t PCR4;        
N  __IO uint32_t SR4;        /*!< PC Card  FIFO status and interrupt register 4,     Address offset: 0xA4 */
X  volatile uint32_t SR4;         
N  __IO uint32_t PMEM4;      /*!< PC Card  Common memory space timing register 4,    Address offset: 0xA8 */
X  volatile uint32_t PMEM4;       
N  __IO uint32_t PATT4;      /*!< PC Card  Attribute memory space timing register 4, Address offset: 0xAC */
X  volatile uint32_t PATT4;       
N  __IO uint32_t PIO4;       /*!< PC Card  I/O space timing register 4,              Address offset: 0xB0 */
X  volatile uint32_t PIO4;        
N} FSMC_Bank4_TypeDef; 
N#endif /* STM32F40_41xxx */
N
N#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
X#if 0L || 0L
S/** 
S  * @brief Flexible Memory Controller
S  */
S
Stypedef struct
S{
S  __IO uint32_t BTCR[8];    /*!< NOR/PSRAM chip-select control register(BCR) and chip-select timing register(BTR), Address offset: 0x00-1C */   
S} FMC_Bank1_TypeDef; 
S
S/** 
S  * @brief Flexible Memory Controller Bank1E
S  */
S  
Stypedef struct
S{
S  __IO uint32_t BWTR[7];    /*!< NOR/PSRAM write timing registers, Address offset: 0x104-0x11C */
S} FMC_Bank1E_TypeDef;
S
S/** 
S  * @brief Flexible Memory Controller Bank2
S  */
S  
Stypedef struct
S{
S  __IO uint32_t PCR2;       /*!< NAND Flash control register 2,                       Address offset: 0x60 */
S  __IO uint32_t SR2;        /*!< NAND Flash FIFO status and interrupt register 2,     Address offset: 0x64 */
S  __IO uint32_t PMEM2;      /*!< NAND Flash Common memory space timing register 2,    Address offset: 0x68 */
S  __IO uint32_t PATT2;      /*!< NAND Flash Attribute memory space timing register 2, Address offset: 0x6C */
S  uint32_t      RESERVED0;  /*!< Reserved, 0x70                                                            */
S  __IO uint32_t ECCR2;      /*!< NAND Flash ECC result registers 2,                   Address offset: 0x74 */
S} FMC_Bank2_TypeDef;
S
S/** 
S  * @brief Flexible Memory Controller Bank3
S  */
S  
Stypedef struct
S{
S  __IO uint32_t PCR3;       /*!< NAND Flash control register 3,                       Address offset: 0x80 */
S  __IO uint32_t SR3;        /*!< NAND Flash FIFO status and interrupt register 3,     Address offset: 0x84 */
S  __IO uint32_t PMEM3;      /*!< NAND Flash Common memory space timing register 3,    Address offset: 0x88 */
S  __IO uint32_t PATT3;      /*!< NAND Flash Attribute memory space timing register 3, Address offset: 0x8C */
S  uint32_t      RESERVED0;  /*!< Reserved, 0x90                                                            */
S  __IO uint32_t ECCR3;      /*!< NAND Flash ECC result registers 3,                   Address offset: 0x94 */
S} FMC_Bank3_TypeDef;
S
S/** 
S  * @brief Flexible Memory Controller Bank4
S  */
S  
Stypedef struct
S{
S  __IO uint32_t PCR4;       /*!< PC Card  control register 4,                       Address offset: 0xA0 */
S  __IO uint32_t SR4;        /*!< PC Card  FIFO status and interrupt register 4,     Address offset: 0xA4 */
S  __IO uint32_t PMEM4;      /*!< PC Card  Common memory space timing register 4,    Address offset: 0xA8 */
S  __IO uint32_t PATT4;      /*!< PC Card  Attribute memory space timing register 4, Address offset: 0xAC */
S  __IO uint32_t PIO4;       /*!< PC Card  I/O space timing register 4,              Address offset: 0xB0 */
S} FMC_Bank4_TypeDef; 
S
S/** 
S  * @brief Flexible Memory Controller Bank5_6
S  */
S  
Stypedef struct
S{
S  __IO uint32_t SDCR[2];        /*!< SDRAM Control registers ,      Address offset: 0x140-0x144  */
S  __IO uint32_t SDTR[2];        /*!< SDRAM Timing registers ,       Address offset: 0x148-0x14C  */
S  __IO uint32_t SDCMR;       /*!< SDRAM Command Mode register,    Address offset: 0x150  */
S  __IO uint32_t SDRTR;       /*!< SDRAM Refresh Timer register,   Address offset: 0x154  */
S  __IO uint32_t SDSR;        /*!< SDRAM Status register,          Address offset: 0x158  */
S} FMC_Bank5_6_TypeDef; 
N#endif /* STM32F427_437xx ||  STM32F429_439xx */
N
N/** 
N  * @brief General Purpose I/O
N  */
N
Ntypedef struct
N{
N  __IO uint32_t MODER;    /*!< GPIO port mode register,               Address offset: 0x00      */
X  volatile uint32_t MODER;     
N  __IO uint32_t OTYPER;   /*!< GPIO port output type register,        Address offset: 0x04      */
X  volatile uint32_t OTYPER;    
N  __IO uint32_t OSPEEDR;  /*!< GPIO port output speed register,       Address offset: 0x08      */
X  volatile uint32_t OSPEEDR;   
N  __IO uint32_t PUPDR;    /*!< GPIO port pull-up/pull-down register,  Address offset: 0x0C      */
X  volatile uint32_t PUPDR;     
N  __IO uint32_t IDR;      /*!< GPIO port input data register,         Address offset: 0x10      */
X  volatile uint32_t IDR;       
N  __IO uint32_t ODR;      /*!< GPIO port output data register,        Address offset: 0x14      */
X  volatile uint32_t ODR;       
N  __IO uint16_t BSRRL;    /*!< GPIO port bit set/reset low register,  Address offset: 0x18      */
X  volatile uint16_t BSRRL;     
N  __IO uint16_t BSRRH;    /*!< GPIO port bit set/reset high register, Address offset: 0x1A      */
X  volatile uint16_t BSRRH;     
N  __IO uint32_t LCKR;     /*!< GPIO port configuration lock register, Address offset: 0x1C      */
X  volatile uint32_t LCKR;      
N  __IO uint32_t AFR[2];   /*!< GPIO alternate function registers,     Address offset: 0x20-0x24 */
X  volatile uint32_t AFR[2];    
N} GPIO_TypeDef;
N
N/** 
N  * @brief System configuration controller
N  */
N  
Ntypedef struct
N{
N  __IO uint32_t MEMRMP;       /*!< SYSCFG memory remap register,                      Address offset: 0x00      */
X  volatile uint32_t MEMRMP;        
N  __IO uint32_t PMC;          /*!< SYSCFG peripheral mode configuration register,     Address offset: 0x04      */
X  volatile uint32_t PMC;           
N  __IO uint32_t EXTICR[4];    /*!< SYSCFG external interrupt configuration registers, Address offset: 0x08-0x14 */
X  volatile uint32_t EXTICR[4];     
N  uint32_t      RESERVED[2];  /*!< Reserved, 0x18-0x1C                                                          */ 
N  __IO uint32_t CMPCR;        /*!< SYSCFG Compensation cell control register,         Address offset: 0x20      */
X  volatile uint32_t CMPCR;         
N} SYSCFG_TypeDef;
N
N/** 
N  * @brief Inter-integrated Circuit Interface
N  */
N
Ntypedef struct
N{
N  __IO uint16_t CR1;        /*!< I2C Control register 1,     Address offset: 0x00 */
X  volatile uint16_t CR1;         
N  uint16_t      RESERVED0;  /*!< Reserved, 0x02                                   */
N  __IO uint16_t CR2;        /*!< I2C Control register 2,     Address offset: 0x04 */
X  volatile uint16_t CR2;         
N  uint16_t      RESERVED1;  /*!< Reserved, 0x06                                   */
N  __IO uint16_t OAR1;       /*!< I2C Own address register 1, Address offset: 0x08 */
X  volatile uint16_t OAR1;        
N  uint16_t      RESERVED2;  /*!< Reserved, 0x0A                                   */
N  __IO uint16_t OAR2;       /*!< I2C Own address register 2, Address offset: 0x0C */
X  volatile uint16_t OAR2;        
N  uint16_t      RESERVED3;  /*!< Reserved, 0x0E                                   */
N  __IO uint16_t DR;         /*!< I2C Data register,          Address offset: 0x10 */
X  volatile uint16_t DR;          
N  uint16_t      RESERVED4;  /*!< Reserved, 0x12                                   */
N  __IO uint16_t SR1;        /*!< I2C Status register 1,      Address offset: 0x14 */
X  volatile uint16_t SR1;         
N  uint16_t      RESERVED5;  /*!< Reserved, 0x16                                   */
N  __IO uint16_t SR2;        /*!< I2C Status register 2,      Address offset: 0x18 */
X  volatile uint16_t SR2;         
N  uint16_t      RESERVED6;  /*!< Reserved, 0x1A                                   */
N  __IO uint16_t CCR;        /*!< I2C Clock control register, Address offset: 0x1C */
X  volatile uint16_t CCR;         
N  uint16_t      RESERVED7;  /*!< Reserved, 0x1E                                   */
N  __IO uint16_t TRISE;      /*!< I2C TRISE register,         Address offset: 0x20 */
X  volatile uint16_t TRISE;       
N  uint16_t      RESERVED8;  /*!< Reserved, 0x22                                   */
N  __IO uint16_t FLTR;       /*!< I2C FLTR register,          Address offset: 0x24 */
X  volatile uint16_t FLTR;        
N  uint16_t      RESERVED9;  /*!< Reserved, 0x26                                   */
N} I2C_TypeDef;
N
N/** 
N  * @brief Independent WATCHDOG
N  */
N
Ntypedef struct
N{
N  __IO uint32_t KR;   /*!< IWDG Key register,       Address offset: 0x00 */
X  volatile uint32_t KR;    
N  __IO uint32_t PR;   /*!< IWDG Prescaler register, Address offset: 0x04 */
X  volatile uint32_t PR;    
N  __IO uint32_t RLR;  /*!< IWDG Reload register,    Address offset: 0x08 */
X  volatile uint32_t RLR;   
N  __IO uint32_t SR;   /*!< IWDG Status register,    Address offset: 0x0C */
X  volatile uint32_t SR;    
N} IWDG_TypeDef;
N
N/** 
N  * @brief LCD-TFT Display Controller
N  */
N  
Ntypedef struct
N{
N  uint32_t      RESERVED0[2];  /*!< Reserved, 0x00-0x04 */
N  __IO uint32_t SSCR;          /*!< LTDC Synchronization Size Configuration Register,    Address offset: 0x08 */
X  volatile uint32_t SSCR;           
N  __IO uint32_t BPCR;          /*!< LTDC Back Porch Configuration Register,              Address offset: 0x0C */
X  volatile uint32_t BPCR;           
N  __IO uint32_t AWCR;          /*!< LTDC Active Width Configuration Register,            Address offset: 0x10 */
X  volatile uint32_t AWCR;           
N  __IO uint32_t TWCR;          /*!< LTDC Total Width Configuration Register,             Address offset: 0x14 */
X  volatile uint32_t TWCR;           
N  __IO uint32_t GCR;           /*!< LTDC Global Control Register,                        Address offset: 0x18 */
X  volatile uint32_t GCR;            
N  uint32_t      RESERVED1[2];  /*!< Reserved, 0x1C-0x20 */
N  __IO uint32_t SRCR;          /*!< LTDC Shadow Reload Configuration Register,           Address offset: 0x24 */
X  volatile uint32_t SRCR;           
N  uint32_t      RESERVED2[1];  /*!< Reserved, 0x28 */
N  __IO uint32_t BCCR;          /*!< LTDC Background Color Configuration Register,        Address offset: 0x2C */
X  volatile uint32_t BCCR;           
N  uint32_t      RESERVED3[1];  /*!< Reserved, 0x30 */
N  __IO uint32_t IER;           /*!< LTDC Interrupt Enable Register,                      Address offset: 0x34 */
X  volatile uint32_t IER;            
N  __IO uint32_t ISR;           /*!< LTDC Interrupt Status Register,                      Address offset: 0x38 */
X  volatile uint32_t ISR;            
N  __IO uint32_t ICR;           /*!< LTDC Interrupt Clear Register,                       Address offset: 0x3C */
X  volatile uint32_t ICR;            
N  __IO uint32_t LIPCR;         /*!< LTDC Line Interrupt Position Configuration Register, Address offset: 0x40 */
X  volatile uint32_t LIPCR;          
N  __IO uint32_t CPSR;          /*!< LTDC Current Position Status Register,               Address offset: 0x44 */
X  volatile uint32_t CPSR;           
N  __IO uint32_t CDSR;         /*!< LTDC Current Display Status Register,                       Address offset: 0x48 */
X  volatile uint32_t CDSR;          
N} LTDC_TypeDef;  
N
N/** 
N  * @brief LCD-TFT Display layer x Controller
N  */
N  
Ntypedef struct
N{  
N  __IO uint32_t CR;            /*!< LTDC Layerx Control Register                                  Address offset: 0x84 */
X  volatile uint32_t CR;             
N  __IO uint32_t WHPCR;         /*!< LTDC Layerx Window Horizontal Position Configuration Register Address offset: 0x88 */
X  volatile uint32_t WHPCR;          
N  __IO uint32_t WVPCR;         /*!< LTDC Layerx Window Vertical Position Configuration Register   Address offset: 0x8C */
X  volatile uint32_t WVPCR;          
N  __IO uint32_t CKCR;          /*!< LTDC Layerx Color Keying Configuration Register               Address offset: 0x90 */
X  volatile uint32_t CKCR;           
N  __IO uint32_t PFCR;          /*!< LTDC Layerx Pixel Format Configuration Register               Address offset: 0x94 */
X  volatile uint32_t PFCR;           
N  __IO uint32_t CACR;          /*!< LTDC Layerx Constant Alpha Configuration Register             Address offset: 0x98 */
X  volatile uint32_t CACR;           
N  __IO uint32_t DCCR;          /*!< LTDC Layerx Default Color Configuration Register              Address offset: 0x9C */
X  volatile uint32_t DCCR;           
N  __IO uint32_t BFCR;          /*!< LTDC Layerx Blending Factors Configuration Register           Address offset: 0xA0 */
X  volatile uint32_t BFCR;           
N  uint32_t      RESERVED0[2];  /*!< Reserved */
N  __IO uint32_t CFBAR;         /*!< LTDC Layerx Color Frame Buffer Address Register               Address offset: 0xAC */
X  volatile uint32_t CFBAR;          
N  __IO uint32_t CFBLR;         /*!< LTDC Layerx Color Frame Buffer Length Register                Address offset: 0xB0 */
X  volatile uint32_t CFBLR;          
N  __IO uint32_t CFBLNR;        /*!< LTDC Layerx ColorFrame Buffer Line Number Register            Address offset: 0xB4 */
X  volatile uint32_t CFBLNR;         
N  uint32_t      RESERVED1[3];  /*!< Reserved */
N  __IO uint32_t CLUTWR;         /*!< LTDC Layerx CLUT Write Register                               Address offset: 0x144 */
X  volatile uint32_t CLUTWR;          
N
N} LTDC_Layer_TypeDef;
N
N/** 
N  * @brief Power Control
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CR;   /*!< PWR power control register,        Address offset: 0x00 */
X  volatile uint32_t CR;    
N  __IO uint32_t CSR;  /*!< PWR power control/status register, Address offset: 0x04 */
X  volatile uint32_t CSR;   
N} PWR_TypeDef;
N
N/** 
N  * @brief Reset and Clock Control
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CR;            /*!< RCC clock control register,                                  Address offset: 0x00 */
X  volatile uint32_t CR;             
N  __IO uint32_t PLLCFGR;       /*!< RCC PLL configuration register,                              Address offset: 0x04 */
X  volatile uint32_t PLLCFGR;        
N  __IO uint32_t CFGR;          /*!< RCC clock configuration register,                            Address offset: 0x08 */
X  volatile uint32_t CFGR;           
N  __IO uint32_t CIR;           /*!< RCC clock interrupt register,                                Address offset: 0x0C */
X  volatile uint32_t CIR;            
N  __IO uint32_t AHB1RSTR;      /*!< RCC AHB1 peripheral reset register,                          Address offset: 0x10 */
X  volatile uint32_t AHB1RSTR;       
N  __IO uint32_t AHB2RSTR;      /*!< RCC AHB2 peripheral reset register,                          Address offset: 0x14 */
X  volatile uint32_t AHB2RSTR;       
N  __IO uint32_t AHB3RSTR;      /*!< RCC AHB3 peripheral reset register,                          Address offset: 0x18 */
X  volatile uint32_t AHB3RSTR;       
N  uint32_t      RESERVED0;     /*!< Reserved, 0x1C                                                                    */
N  __IO uint32_t APB1RSTR;      /*!< RCC APB1 peripheral reset register,                          Address offset: 0x20 */
X  volatile uint32_t APB1RSTR;       
N  __IO uint32_t APB2RSTR;      /*!< RCC APB2 peripheral reset register,                          Address offset: 0x24 */
X  volatile uint32_t APB2RSTR;       
N  uint32_t      RESERVED1[2];  /*!< Reserved, 0x28-0x2C                                                               */
N  __IO uint32_t AHB1ENR;       /*!< RCC AHB1 peripheral clock register,                          Address offset: 0x30 */
X  volatile uint32_t AHB1ENR;        
N  __IO uint32_t AHB2ENR;       /*!< RCC AHB2 peripheral clock register,                          Address offset: 0x34 */
X  volatile uint32_t AHB2ENR;        
N  __IO uint32_t AHB3ENR;       /*!< RCC AHB3 peripheral clock register,                          Address offset: 0x38 */
X  volatile uint32_t AHB3ENR;        
N  uint32_t      RESERVED2;     /*!< Reserved, 0x3C                                                                    */
N  __IO uint32_t APB1ENR;       /*!< RCC APB1 peripheral clock enable register,                   Address offset: 0x40 */
X  volatile uint32_t APB1ENR;        
N  __IO uint32_t APB2ENR;       /*!< RCC APB2 peripheral clock enable register,                   Address offset: 0x44 */
X  volatile uint32_t APB2ENR;        
N  uint32_t      RESERVED3[2];  /*!< Reserved, 0x48-0x4C                                                               */
N  __IO uint32_t AHB1LPENR;     /*!< RCC AHB1 peripheral clock enable in low power mode register, Address offset: 0x50 */
X  volatile uint32_t AHB1LPENR;      
N  __IO uint32_t AHB2LPENR;     /*!< RCC AHB2 peripheral clock enable in low power mode register, Address offset: 0x54 */
X  volatile uint32_t AHB2LPENR;      
N  __IO uint32_t AHB3LPENR;     /*!< RCC AHB3 peripheral clock enable in low power mode register, Address offset: 0x58 */
X  volatile uint32_t AHB3LPENR;      
N  uint32_t      RESERVED4;     /*!< Reserved, 0x5C                                                                    */
N  __IO uint32_t APB1LPENR;     /*!< RCC APB1 peripheral clock enable in low power mode register, Address offset: 0x60 */
X  volatile uint32_t APB1LPENR;      
N  __IO uint32_t APB2LPENR;     /*!< RCC APB2 peripheral clock enable in low power mode register, Address offset: 0x64 */
X  volatile uint32_t APB2LPENR;      
N  uint32_t      RESERVED5[2];  /*!< Reserved, 0x68-0x6C                                                               */
N  __IO uint32_t BDCR;          /*!< RCC Backup domain control register,                          Address offset: 0x70 */
X  volatile uint32_t BDCR;           
N  __IO uint32_t CSR;           /*!< RCC clock control & status register,                         Address offset: 0x74 */
X  volatile uint32_t CSR;            
N  uint32_t      RESERVED6[2];  /*!< Reserved, 0x78-0x7C                                                               */
N  __IO uint32_t SSCGR;         /*!< RCC spread spectrum clock generation register,               Address offset: 0x80 */
X  volatile uint32_t SSCGR;          
N  __IO uint32_t PLLI2SCFGR;    /*!< RCC PLLI2S configuration register,                           Address offset: 0x84 */
X  volatile uint32_t PLLI2SCFGR;     
N  __IO uint32_t PLLSAICFGR;    /*!< RCC PLLSAI configuration register,                           Address offset: 0x88 */
X  volatile uint32_t PLLSAICFGR;     
N  __IO uint32_t DCKCFGR;       /*!< RCC Dedicated Clocks configuration register,                 Address offset: 0x8C */
X  volatile uint32_t DCKCFGR;        
N
N} RCC_TypeDef;
N
N/** 
N  * @brief Real-Time Clock
N  */
N
Ntypedef struct
N{
N  __IO uint32_t TR;      /*!< RTC time register,                                        Address offset: 0x00 */
X  volatile uint32_t TR;       
N  __IO uint32_t DR;      /*!< RTC date register,                                        Address offset: 0x04 */
X  volatile uint32_t DR;       
N  __IO uint32_t CR;      /*!< RTC control register,                                     Address offset: 0x08 */
X  volatile uint32_t CR;       
N  __IO uint32_t ISR;     /*!< RTC initialization and status register,                   Address offset: 0x0C */
X  volatile uint32_t ISR;      
N  __IO uint32_t PRER;    /*!< RTC prescaler register,                                   Address offset: 0x10 */
X  volatile uint32_t PRER;     
N  __IO uint32_t WUTR;    /*!< RTC wakeup timer register,                                Address offset: 0x14 */
X  volatile uint32_t WUTR;     
N  __IO uint32_t CALIBR;  /*!< RTC calibration register,                                 Address offset: 0x18 */
X  volatile uint32_t CALIBR;   
N  __IO uint32_t ALRMAR;  /*!< RTC alarm A register,                                     Address offset: 0x1C */
X  volatile uint32_t ALRMAR;   
N  __IO uint32_t ALRMBR;  /*!< RTC alarm B register,                                     Address offset: 0x20 */
X  volatile uint32_t ALRMBR;   
N  __IO uint32_t WPR;     /*!< RTC write protection register,                            Address offset: 0x24 */
X  volatile uint32_t WPR;      
N  __IO uint32_t SSR;     /*!< RTC sub second register,                                  Address offset: 0x28 */
X  volatile uint32_t SSR;      
N  __IO uint32_t SHIFTR;  /*!< RTC shift control register,                               Address offset: 0x2C */
X  volatile uint32_t SHIFTR;   
N  __IO uint32_t TSTR;    /*!< RTC time stamp time register,                             Address offset: 0x30 */
X  volatile uint32_t TSTR;     
N  __IO uint32_t TSDR;    /*!< RTC time stamp date register,                             Address offset: 0x34 */
X  volatile uint32_t TSDR;     
N  __IO uint32_t TSSSR;   /*!< RTC time-stamp sub second register,                       Address offset: 0x38 */
X  volatile uint32_t TSSSR;    
N  __IO uint32_t CALR;    /*!< RTC calibration register,                                 Address offset: 0x3C */
X  volatile uint32_t CALR;     
N  __IO uint32_t TAFCR;   /*!< RTC tamper and alternate function configuration register, Address offset: 0x40 */
X  volatile uint32_t TAFCR;    
N  __IO uint32_t ALRMASSR;/*!< RTC alarm A sub second register,                          Address offset: 0x44 */
X  volatile uint32_t ALRMASSR; 
N  __IO uint32_t ALRMBSSR;/*!< RTC alarm B sub second register,                          Address offset: 0x48 */
X  volatile uint32_t ALRMBSSR; 
N  uint32_t RESERVED7;    /*!< Reserved, 0x4C                                                                 */
N  __IO uint32_t BKP0R;   /*!< RTC backup register 1,                                    Address offset: 0x50 */
X  volatile uint32_t BKP0R;    
N  __IO uint32_t BKP1R;   /*!< RTC backup register 1,                                    Address offset: 0x54 */
X  volatile uint32_t BKP1R;    
N  __IO uint32_t BKP2R;   /*!< RTC backup register 2,                                    Address offset: 0x58 */
X  volatile uint32_t BKP2R;    
N  __IO uint32_t BKP3R;   /*!< RTC backup register 3,                                    Address offset: 0x5C */
X  volatile uint32_t BKP3R;    
N  __IO uint32_t BKP4R;   /*!< RTC backup register 4,                                    Address offset: 0x60 */
X  volatile uint32_t BKP4R;    
N  __IO uint32_t BKP5R;   /*!< RTC backup register 5,                                    Address offset: 0x64 */
X  volatile uint32_t BKP5R;    
N  __IO uint32_t BKP6R;   /*!< RTC backup register 6,                                    Address offset: 0x68 */
X  volatile uint32_t BKP6R;    
N  __IO uint32_t BKP7R;   /*!< RTC backup register 7,                                    Address offset: 0x6C */
X  volatile uint32_t BKP7R;    
N  __IO uint32_t BKP8R;   /*!< RTC backup register 8,                                    Address offset: 0x70 */
X  volatile uint32_t BKP8R;    
N  __IO uint32_t BKP9R;   /*!< RTC backup register 9,                                    Address offset: 0x74 */
X  volatile uint32_t BKP9R;    
N  __IO uint32_t BKP10R;  /*!< RTC backup register 10,                                   Address offset: 0x78 */
X  volatile uint32_t BKP10R;   
N  __IO uint32_t BKP11R;  /*!< RTC backup register 11,                                   Address offset: 0x7C */
X  volatile uint32_t BKP11R;   
N  __IO uint32_t BKP12R;  /*!< RTC backup register 12,                                   Address offset: 0x80 */
X  volatile uint32_t BKP12R;   
N  __IO uint32_t BKP13R;  /*!< RTC backup register 13,                                   Address offset: 0x84 */
X  volatile uint32_t BKP13R;   
N  __IO uint32_t BKP14R;  /*!< RTC backup register 14,                                   Address offset: 0x88 */
X  volatile uint32_t BKP14R;   
N  __IO uint32_t BKP15R;  /*!< RTC backup register 15,                                   Address offset: 0x8C */
X  volatile uint32_t BKP15R;   
N  __IO uint32_t BKP16R;  /*!< RTC backup register 16,                                   Address offset: 0x90 */
X  volatile uint32_t BKP16R;   
N  __IO uint32_t BKP17R;  /*!< RTC backup register 17,                                   Address offset: 0x94 */
X  volatile uint32_t BKP17R;   
N  __IO uint32_t BKP18R;  /*!< RTC backup register 18,                                   Address offset: 0x98 */
X  volatile uint32_t BKP18R;   
N  __IO uint32_t BKP19R;  /*!< RTC backup register 19,                                   Address offset: 0x9C */
X  volatile uint32_t BKP19R;   
N} RTC_TypeDef;
N
N
N/** 
N  * @brief Serial Audio Interface
N  */
N  
Ntypedef struct
N{
N  __IO uint32_t GCR;      /*!< SAI global configuration register,        Address offset: 0x00 */
X  volatile uint32_t GCR;       
N} SAI_TypeDef;
N
Ntypedef struct
N{
N  __IO uint32_t CR1;      /*!< SAI block x configuration register 1,     Address offset: 0x04 */
X  volatile uint32_t CR1;       
N  __IO uint32_t CR2;      /*!< SAI block x configuration register 2,     Address offset: 0x08 */
X  volatile uint32_t CR2;       
N  __IO uint32_t FRCR;     /*!< SAI block x frame configuration register, Address offset: 0x0C */
X  volatile uint32_t FRCR;      
N  __IO uint32_t SLOTR;    /*!< SAI block x slot register,                Address offset: 0x10 */
X  volatile uint32_t SLOTR;     
N  __IO uint32_t IMR;      /*!< SAI block x interrupt mask register,      Address offset: 0x14 */
X  volatile uint32_t IMR;       
N  __IO uint32_t SR;       /*!< SAI block x status register,              Address offset: 0x18 */
X  volatile uint32_t SR;        
N  __IO uint32_t CLRFR;    /*!< SAI block x clear flag register,          Address offset: 0x1C */
X  volatile uint32_t CLRFR;     
N  __IO uint32_t DR;       /*!< SAI block x data register,                Address offset: 0x20 */
X  volatile uint32_t DR;        
N} SAI_Block_TypeDef;
N
N/** 
N  * @brief SD host Interface
N  */
N
Ntypedef struct
N{
N  __IO uint32_t POWER;          /*!< SDIO power control register,    Address offset: 0x00 */
X  volatile uint32_t POWER;           
N  __IO uint32_t CLKCR;          /*!< SDI clock control register,     Address offset: 0x04 */
X  volatile uint32_t CLKCR;           
N  __IO uint32_t ARG;            /*!< SDIO argument register,         Address offset: 0x08 */
X  volatile uint32_t ARG;             
N  __IO uint32_t CMD;            /*!< SDIO command register,          Address offset: 0x0C */
X  volatile uint32_t CMD;             
N  __I uint32_t  RESPCMD;        /*!< SDIO command response register, Address offset: 0x10 */
X  volatile const uint32_t  RESPCMD;         
N  __I uint32_t  RESP1;          /*!< SDIO response 1 register,       Address offset: 0x14 */
X  volatile const uint32_t  RESP1;           
N  __I uint32_t  RESP2;          /*!< SDIO response 2 register,       Address offset: 0x18 */
X  volatile const uint32_t  RESP2;           
N  __I uint32_t  RESP3;          /*!< SDIO response 3 register,       Address offset: 0x1C */
X  volatile const uint32_t  RESP3;           
N  __I uint32_t  RESP4;          /*!< SDIO response 4 register,       Address offset: 0x20 */
X  volatile const uint32_t  RESP4;           
N  __IO uint32_t DTIMER;         /*!< SDIO data timer register,       Address offset: 0x24 */
X  volatile uint32_t DTIMER;          
N  __IO uint32_t DLEN;           /*!< SDIO data length register,      Address offset: 0x28 */
X  volatile uint32_t DLEN;            
N  __IO uint32_t DCTRL;          /*!< SDIO data control register,     Address offset: 0x2C */
X  volatile uint32_t DCTRL;           
N  __I uint32_t  DCOUNT;         /*!< SDIO data counter register,     Address offset: 0x30 */
X  volatile const uint32_t  DCOUNT;          
N  __I uint32_t  STA;            /*!< SDIO status register,           Address offset: 0x34 */
X  volatile const uint32_t  STA;             
N  __IO uint32_t ICR;            /*!< SDIO interrupt clear register,  Address offset: 0x38 */
X  volatile uint32_t ICR;             
N  __IO uint32_t MASK;           /*!< SDIO mask register,             Address offset: 0x3C */
X  volatile uint32_t MASK;            
N  uint32_t      RESERVED0[2];   /*!< Reserved, 0x40-0x44                                  */
N  __I uint32_t  FIFOCNT;        /*!< SDIO FIFO counter register,     Address offset: 0x48 */
X  volatile const uint32_t  FIFOCNT;         
N  uint32_t      RESERVED1[13];  /*!< Reserved, 0x4C-0x7C                                  */
N  __IO uint32_t FIFO;           /*!< SDIO data FIFO register,        Address offset: 0x80 */
X  volatile uint32_t FIFO;            
N} SDIO_TypeDef;
N
N/** 
N  * @brief Serial Peripheral Interface
N  */
N
Ntypedef struct
N{
N  __IO uint16_t CR1;        /*!< SPI control register 1 (not used in I2S mode),      Address offset: 0x00 */
X  volatile uint16_t CR1;         
N  uint16_t      RESERVED0;  /*!< Reserved, 0x02                                                           */
N  __IO uint16_t CR2;        /*!< SPI control register 2,                             Address offset: 0x04 */
X  volatile uint16_t CR2;         
N  uint16_t      RESERVED1;  /*!< Reserved, 0x06                                                           */
N  __IO uint16_t SR;         /*!< SPI status register,                                Address offset: 0x08 */
X  volatile uint16_t SR;          
N  uint16_t      RESERVED2;  /*!< Reserved, 0x0A                                                           */
N  __IO uint16_t DR;         /*!< SPI data register,                                  Address offset: 0x0C */
X  volatile uint16_t DR;          
N  uint16_t      RESERVED3;  /*!< Reserved, 0x0E                                                           */
N  __IO uint16_t CRCPR;      /*!< SPI CRC polynomial register (not used in I2S mode), Address offset: 0x10 */
X  volatile uint16_t CRCPR;       
N  uint16_t      RESERVED4;  /*!< Reserved, 0x12                                                           */
N  __IO uint16_t RXCRCR;     /*!< SPI RX CRC register (not used in I2S mode),         Address offset: 0x14 */
X  volatile uint16_t RXCRCR;      
N  uint16_t      RESERVED5;  /*!< Reserved, 0x16                                                           */
N  __IO uint16_t TXCRCR;     /*!< SPI TX CRC register (not used in I2S mode),         Address offset: 0x18 */
X  volatile uint16_t TXCRCR;      
N  uint16_t      RESERVED6;  /*!< Reserved, 0x1A                                                           */
N  __IO uint16_t I2SCFGR;    /*!< SPI_I2S configuration register,                     Address offset: 0x1C */
X  volatile uint16_t I2SCFGR;     
N  uint16_t      RESERVED7;  /*!< Reserved, 0x1E                                                           */
N  __IO uint16_t I2SPR;      /*!< SPI_I2S prescaler register,                         Address offset: 0x20 */
X  volatile uint16_t I2SPR;       
N  uint16_t      RESERVED8;  /*!< Reserved, 0x22                                                           */
N} SPI_TypeDef;
N
N/** 
N  * @brief TIM
N  */
N
Ntypedef struct
N{
N  __IO uint16_t CR1;         /*!< TIM control register 1,              Address offset: 0x00 */
X  volatile uint16_t CR1;          
N  uint16_t      RESERVED0;   /*!< Reserved, 0x02                                            */
N  __IO uint16_t CR2;         /*!< TIM control register 2,              Address offset: 0x04 */
X  volatile uint16_t CR2;          
N  uint16_t      RESERVED1;   /*!< Reserved, 0x06                                            */
N  __IO uint16_t SMCR;        /*!< TIM slave mode control register,     Address offset: 0x08 */
X  volatile uint16_t SMCR;         
N  uint16_t      RESERVED2;   /*!< Reserved, 0x0A                                            */
N  __IO uint16_t DIER;        /*!< TIM DMA/interrupt enable register,   Address offset: 0x0C */
X  volatile uint16_t DIER;         
N  uint16_t      RESERVED3;   /*!< Reserved, 0x0E                                            */
N  __IO uint16_t SR;          /*!< TIM status register,                 Address offset: 0x10 */
X  volatile uint16_t SR;           
N  uint16_t      RESERVED4;   /*!< Reserved, 0x12                                            */
N  __IO uint16_t EGR;         /*!< TIM event generation register,       Address offset: 0x14 */
X  volatile uint16_t EGR;          
N  uint16_t      RESERVED5;   /*!< Reserved, 0x16                                            */
N  __IO uint16_t CCMR1;       /*!< TIM capture/compare mode register 1, Address offset: 0x18 */
X  volatile uint16_t CCMR1;        
N  uint16_t      RESERVED6;   /*!< Reserved, 0x1A                                            */
N  __IO uint16_t CCMR2;       /*!< TIM capture/compare mode register 2, Address offset: 0x1C */
X  volatile uint16_t CCMR2;        
N  uint16_t      RESERVED7;   /*!< Reserved, 0x1E                                            */
N  __IO uint16_t CCER;        /*!< TIM capture/compare enable register, Address offset: 0x20 */
X  volatile uint16_t CCER;         
N  uint16_t      RESERVED8;   /*!< Reserved, 0x22                                            */
N  __IO uint32_t CNT;         /*!< TIM counter register,                Address offset: 0x24 */
X  volatile uint32_t CNT;          
N  __IO uint16_t PSC;         /*!< TIM prescaler,                       Address offset: 0x28 */
X  volatile uint16_t PSC;          
N  uint16_t      RESERVED9;   /*!< Reserved, 0x2A                                            */
N  __IO uint32_t ARR;         /*!< TIM auto-reload register,            Address offset: 0x2C */
X  volatile uint32_t ARR;          
N  __IO uint16_t RCR;         /*!< TIM repetition counter register,     Address offset: 0x30 */
X  volatile uint16_t RCR;          
N  uint16_t      RESERVED10;  /*!< Reserved, 0x32                                            */
N  __IO uint32_t CCR1;        /*!< TIM capture/compare register 1,      Address offset: 0x34 */
X  volatile uint32_t CCR1;         
N  __IO uint32_t CCR2;        /*!< TIM capture/compare register 2,      Address offset: 0x38 */
X  volatile uint32_t CCR2;         
N  __IO uint32_t CCR3;        /*!< TIM capture/compare register 3,      Address offset: 0x3C */
X  volatile uint32_t CCR3;         
N  __IO uint32_t CCR4;        /*!< TIM capture/compare register 4,      Address offset: 0x40 */
X  volatile uint32_t CCR4;         
N  __IO uint16_t BDTR;        /*!< TIM break and dead-time register,    Address offset: 0x44 */
X  volatile uint16_t BDTR;         
N  uint16_t      RESERVED11;  /*!< Reserved, 0x46                                            */
N  __IO uint16_t DCR;         /*!< TIM DMA control register,            Address offset: 0x48 */
X  volatile uint16_t DCR;          
N  uint16_t      RESERVED12;  /*!< Reserved, 0x4A                                            */
N  __IO uint16_t DMAR;        /*!< TIM DMA address for full transfer,   Address offset: 0x4C */
X  volatile uint16_t DMAR;         
N  uint16_t      RESERVED13;  /*!< Reserved, 0x4E                                            */
N  __IO uint16_t OR;          /*!< TIM option register,                 Address offset: 0x50 */
X  volatile uint16_t OR;           
N  uint16_t      RESERVED14;  /*!< Reserved, 0x52                                            */
N} TIM_TypeDef;
N
N/** 
N  * @brief Universal Synchronous Asynchronous Receiver Transmitter
N  */
N 
Ntypedef struct
N{
N  __IO uint16_t SR;         /*!< USART Status register,                   Address offset: 0x00 */
X  volatile uint16_t SR;          
N  uint16_t      RESERVED0;  /*!< Reserved, 0x02                                                */
N  __IO uint16_t DR;         /*!< USART Data register,                     Address offset: 0x04 */
X  volatile uint16_t DR;          
N  uint16_t      RESERVED1;  /*!< Reserved, 0x06                                                */
N  __IO uint16_t BRR;        /*!< USART Baud rate register,                Address offset: 0x08 */
X  volatile uint16_t BRR;         
N  uint16_t      RESERVED2;  /*!< Reserved, 0x0A                                                */
N  __IO uint16_t CR1;        /*!< USART Control register 1,                Address offset: 0x0C */
X  volatile uint16_t CR1;         
N  uint16_t      RESERVED3;  /*!< Reserved, 0x0E                                                */
N  __IO uint16_t CR2;        /*!< USART Control register 2,                Address offset: 0x10 */
X  volatile uint16_t CR2;         
N  uint16_t      RESERVED4;  /*!< Reserved, 0x12                                                */
N  __IO uint16_t CR3;        /*!< USART Control register 3,                Address offset: 0x14 */
X  volatile uint16_t CR3;         
N  uint16_t      RESERVED5;  /*!< Reserved, 0x16                                                */
N  __IO uint16_t GTPR;       /*!< USART Guard time and prescaler register, Address offset: 0x18 */
X  volatile uint16_t GTPR;        
N  uint16_t      RESERVED6;  /*!< Reserved, 0x1A                                                */
N} USART_TypeDef;
N
N/** 
N  * @brief Window WATCHDOG
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CR;   /*!< WWDG Control register,       Address offset: 0x00 */
X  volatile uint32_t CR;    
N  __IO uint32_t CFR;  /*!< WWDG Configuration register, Address offset: 0x04 */
X  volatile uint32_t CFR;   
N  __IO uint32_t SR;   /*!< WWDG Status register,        Address offset: 0x08 */
X  volatile uint32_t SR;    
N} WWDG_TypeDef;
N
N/** 
N  * @brief Crypto Processor
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CR;         /*!< CRYP control register,                                    Address offset: 0x00 */
X  volatile uint32_t CR;          
N  __IO uint32_t SR;         /*!< CRYP status register,                                     Address offset: 0x04 */
X  volatile uint32_t SR;          
N  __IO uint32_t DR;         /*!< CRYP data input register,                                 Address offset: 0x08 */
X  volatile uint32_t DR;          
N  __IO uint32_t DOUT;       /*!< CRYP data output register,                                Address offset: 0x0C */
X  volatile uint32_t DOUT;        
N  __IO uint32_t DMACR;      /*!< CRYP DMA control register,                                Address offset: 0x10 */
X  volatile uint32_t DMACR;       
N  __IO uint32_t IMSCR;      /*!< CRYP interrupt mask set/clear register,                   Address offset: 0x14 */
X  volatile uint32_t IMSCR;       
N  __IO uint32_t RISR;       /*!< CRYP raw interrupt status register,                       Address offset: 0x18 */
X  volatile uint32_t RISR;        
N  __IO uint32_t MISR;       /*!< CRYP masked interrupt status register,                    Address offset: 0x1C */
X  volatile uint32_t MISR;        
N  __IO uint32_t K0LR;       /*!< CRYP key left  register 0,                                Address offset: 0x20 */
X  volatile uint32_t K0LR;        
N  __IO uint32_t K0RR;       /*!< CRYP key right register 0,                                Address offset: 0x24 */
X  volatile uint32_t K0RR;        
N  __IO uint32_t K1LR;       /*!< CRYP key left  register 1,                                Address offset: 0x28 */
X  volatile uint32_t K1LR;        
N  __IO uint32_t K1RR;       /*!< CRYP key right register 1,                                Address offset: 0x2C */
X  volatile uint32_t K1RR;        
N  __IO uint32_t K2LR;       /*!< CRYP key left  register 2,                                Address offset: 0x30 */
X  volatile uint32_t K2LR;        
N  __IO uint32_t K2RR;       /*!< CRYP key right register 2,                                Address offset: 0x34 */
X  volatile uint32_t K2RR;        
N  __IO uint32_t K3LR;       /*!< CRYP key left  register 3,                                Address offset: 0x38 */
X  volatile uint32_t K3LR;        
N  __IO uint32_t K3RR;       /*!< CRYP key right register 3,                                Address offset: 0x3C */
X  volatile uint32_t K3RR;        
N  __IO uint32_t IV0LR;      /*!< CRYP initialization vector left-word  register 0,         Address offset: 0x40 */
X  volatile uint32_t IV0LR;       
N  __IO uint32_t IV0RR;      /*!< CRYP initialization vector right-word register 0,         Address offset: 0x44 */
X  volatile uint32_t IV0RR;       
N  __IO uint32_t IV1LR;      /*!< CRYP initialization vector left-word  register 1,         Address offset: 0x48 */
X  volatile uint32_t IV1LR;       
N  __IO uint32_t IV1RR;      /*!< CRYP initialization vector right-word register 1,         Address offset: 0x4C */
X  volatile uint32_t IV1RR;       
N  __IO uint32_t CSGCMCCM0R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 0,        Address offset: 0x50 */
X  volatile uint32_t CSGCMCCM0R;  
N  __IO uint32_t CSGCMCCM1R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 1,        Address offset: 0x54 */
X  volatile uint32_t CSGCMCCM1R;  
N  __IO uint32_t CSGCMCCM2R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 2,        Address offset: 0x58 */
X  volatile uint32_t CSGCMCCM2R;  
N  __IO uint32_t CSGCMCCM3R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 3,        Address offset: 0x5C */
X  volatile uint32_t CSGCMCCM3R;  
N  __IO uint32_t CSGCMCCM4R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 4,        Address offset: 0x60 */
X  volatile uint32_t CSGCMCCM4R;  
N  __IO uint32_t CSGCMCCM5R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 5,        Address offset: 0x64 */
X  volatile uint32_t CSGCMCCM5R;  
N  __IO uint32_t CSGCMCCM6R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 6,        Address offset: 0x68 */
X  volatile uint32_t CSGCMCCM6R;  
N  __IO uint32_t CSGCMCCM7R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 7,        Address offset: 0x6C */
X  volatile uint32_t CSGCMCCM7R;  
N  __IO uint32_t CSGCM0R;    /*!< CRYP GCM/GMAC context swap register 0,                    Address offset: 0x70 */
X  volatile uint32_t CSGCM0R;     
N  __IO uint32_t CSGCM1R;    /*!< CRYP GCM/GMAC context swap register 1,                    Address offset: 0x74 */
X  volatile uint32_t CSGCM1R;     
N  __IO uint32_t CSGCM2R;    /*!< CRYP GCM/GMAC context swap register 2,                    Address offset: 0x78 */
X  volatile uint32_t CSGCM2R;     
N  __IO uint32_t CSGCM3R;    /*!< CRYP GCM/GMAC context swap register 3,                    Address offset: 0x7C */
X  volatile uint32_t CSGCM3R;     
N  __IO uint32_t CSGCM4R;    /*!< CRYP GCM/GMAC context swap register 4,                    Address offset: 0x80 */
X  volatile uint32_t CSGCM4R;     
N  __IO uint32_t CSGCM5R;    /*!< CRYP GCM/GMAC context swap register 5,                    Address offset: 0x84 */
X  volatile uint32_t CSGCM5R;     
N  __IO uint32_t CSGCM6R;    /*!< CRYP GCM/GMAC context swap register 6,                    Address offset: 0x88 */
X  volatile uint32_t CSGCM6R;     
N  __IO uint32_t CSGCM7R;    /*!< CRYP GCM/GMAC context swap register 7,                    Address offset: 0x8C */
X  volatile uint32_t CSGCM7R;     
N} CRYP_TypeDef;
N
N/** 
N  * @brief HASH
N  */
N  
Ntypedef struct 
N{
N  __IO uint32_t CR;               /*!< HASH control register,          Address offset: 0x00        */
X  volatile uint32_t CR;                
N  __IO uint32_t DIN;              /*!< HASH data input register,       Address offset: 0x04        */
X  volatile uint32_t DIN;               
N  __IO uint32_t STR;              /*!< HASH start register,            Address offset: 0x08        */
X  volatile uint32_t STR;               
N  __IO uint32_t HR[5];            /*!< HASH digest registers,          Address offset: 0x0C-0x1C   */
X  volatile uint32_t HR[5];             
N  __IO uint32_t IMR;              /*!< HASH interrupt enable register, Address offset: 0x20        */
X  volatile uint32_t IMR;               
N  __IO uint32_t SR;               /*!< HASH status register,           Address offset: 0x24        */
X  volatile uint32_t SR;                
N       uint32_t RESERVED[52];     /*!< Reserved, 0x28-0xF4                                         */
N  __IO uint32_t CSR[54];          /*!< HASH context swap registers,    Address offset: 0x0F8-0x1CC */
X  volatile uint32_t CSR[54];           
N} HASH_TypeDef;
N
N/** 
N  * @brief HASH_DIGEST
N  */
N  
Ntypedef struct 
N{
N  __IO uint32_t HR[8];     /*!< HASH digest registers,          Address offset: 0x310-0x32C */ 
X  volatile uint32_t HR[8];       
N} HASH_DIGEST_TypeDef;
N
N/** 
N  * @brief RNG
N  */
N  
Ntypedef struct 
N{
N  __IO uint32_t CR;  /*!< RNG control register, Address offset: 0x00 */
X  volatile uint32_t CR;   
N  __IO uint32_t SR;  /*!< RNG status register,  Address offset: 0x04 */
X  volatile uint32_t SR;   
N  __IO uint32_t DR;  /*!< RNG data register,    Address offset: 0x08 */
X  volatile uint32_t DR;   
N} RNG_TypeDef;
N
N/**
N  * @}
N  */
N  
N/** @addtogroup Peripheral_memory_map
N  * @{
N  */
N#define FLASH_BASE            ((uint32_t)0x08000000) /*!< FLASH(up to 1 MB) base address in the alias region                         */
N#define CCMDATARAM_BASE       ((uint32_t)0x10000000) /*!< CCM(core coupled memory) data RAM(64 KB) base address in the alias region  */
N#define SRAM1_BASE            ((uint32_t)0x20000000) /*!< SRAM1(112 KB) base address in the alias region                             */
N#define SRAM2_BASE            ((uint32_t)0x2001C000) /*!< SRAM2(16 KB) base address in the alias region                              */
N#define SRAM3_BASE            ((uint32_t)0x20020000) /*!< SRAM3(64 KB) base address in the alias region                              */
N#define PERIPH_BASE           ((uint32_t)0x40000000) /*!< Peripheral base address in the alias region                                */
N#define BKPSRAM_BASE          ((uint32_t)0x40024000) /*!< Backup SRAM(4 KB) base address in the alias region                         */
N
N#if defined (STM32F40_41xxx)
X#if 1L
N#define FSMC_R_BASE           ((uint32_t)0xA0000000) /*!< FSMC registers base address                                                */
N#endif /* STM32F40_41xxx */
N
N#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
X#if 0L || 0L
S#define FMC_R_BASE            ((uint32_t)0xA0000000) /*!< FMC registers base address                                                 */
N#endif /* STM32F427_437xx ||  STM32F429_439xx */
N
N#define CCMDATARAM_BB_BASE    ((uint32_t)0x12000000) /*!< CCM(core coupled memory) data RAM(64 KB) base address in the bit-band region  */
N#define SRAM1_BB_BASE         ((uint32_t)0x22000000) /*!< SRAM1(112 KB) base address in the bit-band region                             */
N#define SRAM2_BB_BASE         ((uint32_t)0x2201C000) /*!< SRAM2(16 KB) base address in the bit-band region                              */
N#define SRAM3_BB_BASE         ((uint32_t)0x22400000) /*!< SRAM3(64 KB) base address in the bit-band region                              */
N#define PERIPH_BB_BASE        ((uint32_t)0x42000000) /*!< Peripheral base address in the bit-band region                                */
N#define BKPSRAM_BB_BASE       ((uint32_t)0x42024000) /*!< Backup SRAM(4 KB) base address in the bit-band region                         */
N
N/* Legacy defines */
N#define SRAM_BASE             SRAM1_BASE
N#define SRAM_BB_BASE          SRAM1_BB_BASE
N
N
N/*!< Peripheral memory map */
N#define APB1PERIPH_BASE       PERIPH_BASE
N#define APB2PERIPH_BASE       (PERIPH_BASE + 0x00010000)
N#define AHB1PERIPH_BASE       (PERIPH_BASE + 0x00020000)
N#define AHB2PERIPH_BASE       (PERIPH_BASE + 0x10000000)
N
N/*!< APB1 peripherals */
N#define TIM2_BASE             (APB1PERIPH_BASE + 0x0000)
N#define TIM3_BASE             (APB1PERIPH_BASE + 0x0400)
N#define TIM4_BASE             (APB1PERIPH_BASE + 0x0800)
N#define TIM5_BASE             (APB1PERIPH_BASE + 0x0C00)
N#define TIM6_BASE             (APB1PERIPH_BASE + 0x1000)
N#define TIM7_BASE             (APB1PERIPH_BASE + 0x1400)
N#define TIM12_BASE            (APB1PERIPH_BASE + 0x1800)
N#define TIM13_BASE            (APB1PERIPH_BASE + 0x1C00)
N#define TIM14_BASE            (APB1PERIPH_BASE + 0x2000)
N#define RTC_BASE              (APB1PERIPH_BASE + 0x2800)
N#define WWDG_BASE             (APB1PERIPH_BASE + 0x2C00)
N#define IWDG_BASE             (APB1PERIPH_BASE + 0x3000)
N#define I2S2ext_BASE          (APB1PERIPH_BASE + 0x3400)
N#define SPI2_BASE             (APB1PERIPH_BASE + 0x3800)
N#define SPI3_BASE             (APB1PERIPH_BASE + 0x3C00)
N#define I2S3ext_BASE          (APB1PERIPH_BASE + 0x4000)
N#define USART2_BASE           (APB1PERIPH_BASE + 0x4400)
N#define USART3_BASE           (APB1PERIPH_BASE + 0x4800)
N#define UART4_BASE            (APB1PERIPH_BASE + 0x4C00)
N#define UART5_BASE            (APB1PERIPH_BASE + 0x5000)
N#define I2C1_BASE             (APB1PERIPH_BASE + 0x5400)
N#define I2C2_BASE             (APB1PERIPH_BASE + 0x5800)
N#define I2C3_BASE             (APB1PERIPH_BASE + 0x5C00)
N#define CAN1_BASE             (APB1PERIPH_BASE + 0x6400)
N#define CAN2_BASE             (APB1PERIPH_BASE + 0x6800)
N#define PWR_BASE              (APB1PERIPH_BASE + 0x7000)
N#define DAC_BASE              (APB1PERIPH_BASE + 0x7400)
N#define UART7_BASE            (APB1PERIPH_BASE + 0x7800)
N#define UART8_BASE            (APB1PERIPH_BASE + 0x7C00)
N
N/*!< APB2 peripherals */
N#define TIM1_BASE             (APB2PERIPH_BASE + 0x0000)
N#define TIM8_BASE             (APB2PERIPH_BASE + 0x0400)
N#define USART1_BASE           (APB2PERIPH_BASE + 0x1000)
N#define USART6_BASE           (APB2PERIPH_BASE + 0x1400)
N#define ADC1_BASE             (APB2PERIPH_BASE + 0x2000)
N#define ADC2_BASE             (APB2PERIPH_BASE + 0x2100)
N#define ADC3_BASE             (APB2PERIPH_BASE + 0x2200)
N#define ADC_BASE              (APB2PERIPH_BASE + 0x2300)
N#define SDIO_BASE             (APB2PERIPH_BASE + 0x2C00)
N#define SPI1_BASE             (APB2PERIPH_BASE + 0x3000)
N#define SPI4_BASE             (APB2PERIPH_BASE + 0x3400)
N#define SYSCFG_BASE           (APB2PERIPH_BASE + 0x3800)
N#define EXTI_BASE             (APB2PERIPH_BASE + 0x3C00)
N#define TIM9_BASE             (APB2PERIPH_BASE + 0x4000)
N#define TIM10_BASE            (APB2PERIPH_BASE + 0x4400)
N#define TIM11_BASE            (APB2PERIPH_BASE + 0x4800)
N#define SPI5_BASE             (APB2PERIPH_BASE + 0x5000)
N#define SPI6_BASE             (APB2PERIPH_BASE + 0x5400)
N#define SAI1_BASE             (APB2PERIPH_BASE + 0x5800)
N#define SAI1_Block_A_BASE     (SAI1_BASE + 0x004)
N#define SAI1_Block_B_BASE     (SAI1_BASE + 0x024)
N#define LTDC_BASE             (APB2PERIPH_BASE + 0x6800)
N#define LTDC_Layer1_BASE      (LTDC_BASE + 0x84)
N#define LTDC_Layer2_BASE      (LTDC_BASE + 0x104) 
N
N/*!< AHB1 peripherals */
N#define GPIOA_BASE            (AHB1PERIPH_BASE + 0x0000)
N#define GPIOB_BASE            (AHB1PERIPH_BASE + 0x0400)
N#define GPIOC_BASE            (AHB1PERIPH_BASE + 0x0800)
N#define GPIOD_BASE            (AHB1PERIPH_BASE + 0x0C00)
N#define GPIOE_BASE            (AHB1PERIPH_BASE + 0x1000)
N#define GPIOF_BASE            (AHB1PERIPH_BASE + 0x1400)
N#define GPIOG_BASE            (AHB1PERIPH_BASE + 0x1800)
N#define GPIOH_BASE            (AHB1PERIPH_BASE + 0x1C00)
N#define GPIOI_BASE            (AHB1PERIPH_BASE + 0x2000)
N#define GPIOJ_BASE            (AHB1PERIPH_BASE + 0x2400)
N#define GPIOK_BASE            (AHB1PERIPH_BASE + 0x2800)
N#define CRC_BASE              (AHB1PERIPH_BASE + 0x3000)
N#define RCC_BASE              (AHB1PERIPH_BASE + 0x3800)
N#define FLASH_R_BASE          (AHB1PERIPH_BASE + 0x3C00)
N#define DMA1_BASE             (AHB1PERIPH_BASE + 0x6000)
N#define DMA1_Stream0_BASE     (DMA1_BASE + 0x010)
N#define DMA1_Stream1_BASE     (DMA1_BASE + 0x028)
N#define DMA1_Stream2_BASE     (DMA1_BASE + 0x040)
N#define DMA1_Stream3_BASE     (DMA1_BASE + 0x058)
N#define DMA1_Stream4_BASE     (DMA1_BASE + 0x070)
N#define DMA1_Stream5_BASE     (DMA1_BASE + 0x088)
N#define DMA1_Stream6_BASE     (DMA1_BASE + 0x0A0)
N#define DMA1_Stream7_BASE     (DMA1_BASE + 0x0B8)
N#define DMA2_BASE             (AHB1PERIPH_BASE + 0x6400)
N#define DMA2_Stream0_BASE     (DMA2_BASE + 0x010)
N#define DMA2_Stream1_BASE     (DMA2_BASE + 0x028)
N#define DMA2_Stream2_BASE     (DMA2_BASE + 0x040)
N#define DMA2_Stream3_BASE     (DMA2_BASE + 0x058)
N#define DMA2_Stream4_BASE     (DMA2_BASE + 0x070)
N#define DMA2_Stream5_BASE     (DMA2_BASE + 0x088)
N#define DMA2_Stream6_BASE     (DMA2_BASE + 0x0A0)
N#define DMA2_Stream7_BASE     (DMA2_BASE + 0x0B8)
N#define ETH_BASE              (AHB1PERIPH_BASE + 0x8000)
N#define ETH_MAC_BASE          (ETH_BASE)
N#define ETH_MMC_BASE          (ETH_BASE + 0x0100)
N#define ETH_PTP_BASE          (ETH_BASE + 0x0700)
N#define ETH_DMA_BASE          (ETH_BASE + 0x1000)
N#define DMA2D_BASE            (AHB1PERIPH_BASE + 0xB000)
N
N/*!< AHB2 peripherals */
N#define DCMI_BASE             (AHB2PERIPH_BASE + 0x50000)
N#define CRYP_BASE             (AHB2PERIPH_BASE + 0x60000)
N#define HASH_BASE             (AHB2PERIPH_BASE + 0x60400)
N#define HASH_DIGEST_BASE      (AHB2PERIPH_BASE + 0x60710)
N#define RNG_BASE              (AHB2PERIPH_BASE + 0x60800)
N
N#if defined (STM32F40_41xxx)
X#if 1L
N/*!< FSMC Bankx registers base address */
N#define FSMC_Bank1_R_BASE     (FSMC_R_BASE + 0x0000)
N#define FSMC_Bank1E_R_BASE    (FSMC_R_BASE + 0x0104)
N#define FSMC_Bank2_R_BASE     (FSMC_R_BASE + 0x0060)
N#define FSMC_Bank3_R_BASE     (FSMC_R_BASE + 0x0080)
N#define FSMC_Bank4_R_BASE     (FSMC_R_BASE + 0x00A0)
N#endif /* STM32F40_41xxx */
N
N#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
X#if 0L || 0L
S/*!< FMC Bankx registers base address */
S#define FMC_Bank1_R_BASE      (FMC_R_BASE + 0x0000)
S#define FMC_Bank1E_R_BASE     (FMC_R_BASE + 0x0104)
S#define FMC_Bank2_R_BASE      (FMC_R_BASE + 0x0060)
S#define FMC_Bank3_R_BASE      (FMC_R_BASE + 0x0080)
S#define FMC_Bank4_R_BASE      (FMC_R_BASE + 0x00A0)
S#define FMC_Bank5_6_R_BASE    (FMC_R_BASE + 0x0140)
N#endif /* STM32F427_437xx ||  STM32F429_439xx */
N
N/* Debug MCU registers base address */
N#define DBGMCU_BASE           ((uint32_t )0xE0042000)
N
N/**
N  * @}
N  */
N  
N/** @addtogroup Peripheral_declaration
N  * @{
N  */  
N#define TIM2                ((TIM_TypeDef *) TIM2_BASE)
N#define TIM3                ((TIM_TypeDef *) TIM3_BASE)
N#define TIM4                ((TIM_TypeDef *) TIM4_BASE)
N#define TIM5                ((TIM_TypeDef *) TIM5_BASE)
N#define TIM6                ((TIM_TypeDef *) TIM6_BASE)
N#define TIM7                ((TIM_TypeDef *) TIM7_BASE)
N#define TIM12               ((TIM_TypeDef *) TIM12_BASE)
N#define TIM13               ((TIM_TypeDef *) TIM13_BASE)
N#define TIM14               ((TIM_TypeDef *) TIM14_BASE)
N#define RTC                 ((RTC_TypeDef *) RTC_BASE)
N#define WWDG                ((WWDG_TypeDef *) WWDG_BASE)
N#define IWDG                ((IWDG_TypeDef *) IWDG_BASE)
N#define I2S2ext             ((SPI_TypeDef *) I2S2ext_BASE)
N#define SPI2                ((SPI_TypeDef *) SPI2_BASE)
N#define SPI3                ((SPI_TypeDef *) SPI3_BASE)
N#define I2S3ext             ((SPI_TypeDef *) I2S3ext_BASE)
N#define USART2              ((USART_TypeDef *) USART2_BASE)
N#define USART3              ((USART_TypeDef *) USART3_BASE)
N#define UART4               ((USART_TypeDef *) UART4_BASE)
N#define UART5               ((USART_TypeDef *) UART5_BASE)
N#define I2C1                ((I2C_TypeDef *) I2C1_BASE)
N#define I2C2                ((I2C_TypeDef *) I2C2_BASE)
N#define I2C3                ((I2C_TypeDef *) I2C3_BASE)
N#define CAN1                ((CAN_TypeDef *) CAN1_BASE)
N#define CAN2                ((CAN_TypeDef *) CAN2_BASE)
N#define PWR                 ((PWR_TypeDef *) PWR_BASE)
N#define DAC                 ((DAC_TypeDef *) DAC_BASE)
N#define UART7               ((USART_TypeDef *) UART7_BASE)
N#define UART8               ((USART_TypeDef *) UART8_BASE)
N#define TIM1                ((TIM_TypeDef *) TIM1_BASE)
N#define TIM8                ((TIM_TypeDef *) TIM8_BASE)
N#define USART1              ((USART_TypeDef *) USART1_BASE)
N#define USART6              ((USART_TypeDef *) USART6_BASE)
N#define ADC                 ((ADC_Common_TypeDef *) ADC_BASE)
N#define ADC1                ((ADC_TypeDef *) ADC1_BASE)
N#define ADC2                ((ADC_TypeDef *) ADC2_BASE)
N#define ADC3                ((ADC_TypeDef *) ADC3_BASE)
N#define SDIO                ((SDIO_TypeDef *) SDIO_BASE)
N#define SPI1                ((SPI_TypeDef *) SPI1_BASE) 
N#define SPI4                ((SPI_TypeDef *) SPI4_BASE)
N#define SYSCFG              ((SYSCFG_TypeDef *) SYSCFG_BASE)
N#define EXTI                ((EXTI_TypeDef *) EXTI_BASE)
N#define TIM9                ((TIM_TypeDef *) TIM9_BASE)
N#define TIM10               ((TIM_TypeDef *) TIM10_BASE)
N#define TIM11               ((TIM_TypeDef *) TIM11_BASE)
N#define SPI5                ((SPI_TypeDef *) SPI5_BASE)
N#define SPI6                ((SPI_TypeDef *) SPI6_BASE)
N#define SAI1                ((SAI_TypeDef *) SAI1_BASE)
N#define SAI1_Block_A        ((SAI_Block_TypeDef *)SAI1_Block_A_BASE)
N#define SAI1_Block_B        ((SAI_Block_TypeDef *)SAI1_Block_B_BASE)
N#define LTDC                ((LTDC_TypeDef *)LTDC_BASE)
N#define LTDC_Layer1         ((LTDC_Layer_TypeDef *)LTDC_Layer1_BASE)
N#define LTDC_Layer2         ((LTDC_Layer_TypeDef *)LTDC_Layer2_BASE)
N#define GPIOA               ((GPIO_TypeDef *) GPIOA_BASE)
N#define GPIOB               ((GPIO_TypeDef *) GPIOB_BASE)
N#define GPIOC               ((GPIO_TypeDef *) GPIOC_BASE)
N#define GPIOD               ((GPIO_TypeDef *) GPIOD_BASE)
N#define GPIOE               ((GPIO_TypeDef *) GPIOE_BASE)
N#define GPIOF               ((GPIO_TypeDef *) GPIOF_BASE)
N#define GPIOG               ((GPIO_TypeDef *) GPIOG_BASE)
N#define GPIOH               ((GPIO_TypeDef *) GPIOH_BASE)
N#define GPIOI               ((GPIO_TypeDef *) GPIOI_BASE)
N#define GPIOJ               ((GPIO_TypeDef *) GPIOJ_BASE)
N#define GPIOK               ((GPIO_TypeDef *) GPIOK_BASE)
N#define CRC                 ((CRC_TypeDef *) CRC_BASE)
N#define RCC                 ((RCC_TypeDef *) RCC_BASE)
N#define FLASH               ((FLASH_TypeDef *) FLASH_R_BASE)
N#define DMA1                ((DMA_TypeDef *) DMA1_BASE)
N#define DMA1_Stream0        ((DMA_Stream_TypeDef *) DMA1_Stream0_BASE)
N#define DMA1_Stream1        ((DMA_Stream_TypeDef *) DMA1_Stream1_BASE)
N#define DMA1_Stream2        ((DMA_Stream_TypeDef *) DMA1_Stream2_BASE)
N#define DMA1_Stream3        ((DMA_Stream_TypeDef *) DMA1_Stream3_BASE)
N#define DMA1_Stream4        ((DMA_Stream_TypeDef *) DMA1_Stream4_BASE)
N#define DMA1_Stream5        ((DMA_Stream_TypeDef *) DMA1_Stream5_BASE)
N#define DMA1_Stream6        ((DMA_Stream_TypeDef *) DMA1_Stream6_BASE)
N#define DMA1_Stream7        ((DMA_Stream_TypeDef *) DMA1_Stream7_BASE)
N#define DMA2                ((DMA_TypeDef *) DMA2_BASE)
N#define DMA2_Stream0        ((DMA_Stream_TypeDef *) DMA2_Stream0_BASE)
N#define DMA2_Stream1        ((DMA_Stream_TypeDef *) DMA2_Stream1_BASE)
N#define DMA2_Stream2        ((DMA_Stream_TypeDef *) DMA2_Stream2_BASE)
N#define DMA2_Stream3        ((DMA_Stream_TypeDef *) DMA2_Stream3_BASE)
N#define DMA2_Stream4        ((DMA_Stream_TypeDef *) DMA2_Stream4_BASE)
N#define DMA2_Stream5        ((DMA_Stream_TypeDef *) DMA2_Stream5_BASE)
N#define DMA2_Stream6        ((DMA_Stream_TypeDef *) DMA2_Stream6_BASE)
N#define DMA2_Stream7        ((DMA_Stream_TypeDef *) DMA2_Stream7_BASE)
N#define ETH                 ((ETH_TypeDef *) ETH_BASE)  
N#define DMA2D               ((DMA2D_TypeDef *)DMA2D_BASE)
N#define DCMI                ((DCMI_TypeDef *) DCMI_BASE)
N#define CRYP                ((CRYP_TypeDef *) CRYP_BASE)
N#define HASH                ((HASH_TypeDef *) HASH_BASE)
N#define HASH_DIGEST         ((HASH_DIGEST_TypeDef *) HASH_DIGEST_BASE)
N#define RNG                 ((RNG_TypeDef *) RNG_BASE)
N
N#if defined (STM32F40_41xxx)
X#if 1L
N#define FSMC_Bank1          ((FSMC_Bank1_TypeDef *) FSMC_Bank1_R_BASE)
N#define FSMC_Bank1E         ((FSMC_Bank1E_TypeDef *) FSMC_Bank1E_R_BASE)
N#define FSMC_Bank2          ((FSMC_Bank2_TypeDef *) FSMC_Bank2_R_BASE)
N#define FSMC_Bank3          ((FSMC_Bank3_TypeDef *) FSMC_Bank3_R_BASE)
N#define FSMC_Bank4          ((FSMC_Bank4_TypeDef *) FSMC_Bank4_R_BASE)
N#endif /* STM32F40_41xxx */
N
N#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
X#if 0L || 0L
S#define FMC_Bank1           ((FMC_Bank1_TypeDef *) FMC_Bank1_R_BASE)
S#define FMC_Bank1E          ((FMC_Bank1E_TypeDef *) FMC_Bank1E_R_BASE)
S#define FMC_Bank2           ((FMC_Bank2_TypeDef *) FMC_Bank2_R_BASE)
S#define FMC_Bank3           ((FMC_Bank3_TypeDef *) FMC_Bank3_R_BASE)
S#define FMC_Bank4           ((FMC_Bank4_TypeDef *) FMC_Bank4_R_BASE)
S#define FMC_Bank5_6         ((FMC_Bank5_6_TypeDef *) FMC_Bank5_6_R_BASE)
N#endif /* STM32F427_437xx ||  STM32F429_439xx */
N
N#define DBGMCU              ((DBGMCU_TypeDef *) DBGMCU_BASE)
N
N/**
N  * @}
N  */
N
N/** @addtogroup Exported_constants
N  * @{
N  */
N  
N  /** @addtogroup Peripheral_Registers_Bits_Definition
N  * @{
N  */
N    
N/******************************************************************************/
N/*                         Peripheral Registers_Bits_Definition               */
N/******************************************************************************/
N
N/******************************************************************************/
N/*                                                                            */
N/*                        Analog to Digital Converter                         */
N/*                                                                            */
N/******************************************************************************/
N/********************  Bit definition for ADC_SR register  ********************/
N#define  ADC_SR_AWD                          ((uint8_t)0x01)               /*!<Analog watchdog flag               */
N#define  ADC_SR_EOC                          ((uint8_t)0x02)               /*!<End of conversion                  */
N#define  ADC_SR_JEOC                         ((uint8_t)0x04)               /*!<Injected channel end of conversion */
N#define  ADC_SR_JSTRT                        ((uint8_t)0x08)               /*!<Injected channel Start flag        */
N#define  ADC_SR_STRT                         ((uint8_t)0x10)               /*!<Regular channel Start flag         */
N#define  ADC_SR_OVR                          ((uint8_t)0x20)               /*!<Overrun flag                       */
N
N/*******************  Bit definition for ADC_CR1 register  ********************/
N#define  ADC_CR1_AWDCH                       ((uint32_t)0x0000001F)        /*!<AWDCH[4:0] bits (Analog watchdog channel select bits) */
N#define  ADC_CR1_AWDCH_0                     ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  ADC_CR1_AWDCH_1                     ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  ADC_CR1_AWDCH_2                     ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  ADC_CR1_AWDCH_3                     ((uint32_t)0x00000008)        /*!<Bit 3 */
N#define  ADC_CR1_AWDCH_4                     ((uint32_t)0x00000010)        /*!<Bit 4 */
N#define  ADC_CR1_EOCIE                       ((uint32_t)0x00000020)        /*!<Interrupt enable for EOC                              */
N#define  ADC_CR1_AWDIE                       ((uint32_t)0x00000040)        /*!<AAnalog Watchdog interrupt enable                     */
N#define  ADC_CR1_JEOCIE                      ((uint32_t)0x00000080)        /*!<Interrupt enable for injected channels                */
N#define  ADC_CR1_SCAN                        ((uint32_t)0x00000100)        /*!<Scan mode                                             */
N#define  ADC_CR1_AWDSGL                      ((uint32_t)0x00000200)        /*!<Enable the watchdog on a single channel in scan mode  */
N#define  ADC_CR1_JAUTO                       ((uint32_t)0x00000400)        /*!<Automatic injected group conversion                   */
N#define  ADC_CR1_DISCEN                      ((uint32_t)0x00000800)        /*!<Discontinuous mode on regular channels                */
N#define  ADC_CR1_JDISCEN                     ((uint32_t)0x00001000)        /*!<Discontinuous mode on injected channels               */
N#define  ADC_CR1_DISCNUM                     ((uint32_t)0x0000E000)        /*!<DISCNUM[2:0] bits (Discontinuous mode channel count)  */
N#define  ADC_CR1_DISCNUM_0                   ((uint32_t)0x00002000)        /*!<Bit 0 */
N#define  ADC_CR1_DISCNUM_1                   ((uint32_t)0x00004000)        /*!<Bit 1 */
N#define  ADC_CR1_DISCNUM_2                   ((uint32_t)0x00008000)        /*!<Bit 2 */
N#define  ADC_CR1_JAWDEN                      ((uint32_t)0x00400000)        /*!<Analog watchdog enable on injected channels           */
N#define  ADC_CR1_AWDEN                       ((uint32_t)0x00800000)        /*!<Analog watchdog enable on regular channels            */
N#define  ADC_CR1_RES                         ((uint32_t)0x03000000)        /*!<RES[2:0] bits (Resolution)                            */
N#define  ADC_CR1_RES_0                       ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  ADC_CR1_RES_1                       ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  ADC_CR1_OVRIE                       ((uint32_t)0x04000000)         /*!<overrun interrupt enable                              */
N  
N/*******************  Bit definition for ADC_CR2 register  ********************/
N#define  ADC_CR2_ADON                        ((uint32_t)0x00000001)        /*!<A/D Converter ON / OFF             */
N#define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!<Continuous Conversion              */
N#define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!<Direct Memory access mode          */
N#define  ADC_CR2_DDS                         ((uint32_t)0x00000200)        /*!<DMA disable selection (Single ADC) */
N#define  ADC_CR2_EOCS                        ((uint32_t)0x00000400)        /*!<End of conversion selection        */
N#define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!<Data Alignment                     */
N#define  ADC_CR2_JEXTSEL                     ((uint32_t)0x000F0000)        /*!<JEXTSEL[3:0] bits (External event select for injected group) */
N#define  ADC_CR2_JEXTSEL_0                   ((uint32_t)0x00010000)        /*!<Bit 0 */
N#define  ADC_CR2_JEXTSEL_1                   ((uint32_t)0x00020000)        /*!<Bit 1 */
N#define  ADC_CR2_JEXTSEL_2                   ((uint32_t)0x00040000)        /*!<Bit 2 */
N#define  ADC_CR2_JEXTSEL_3                   ((uint32_t)0x00080000)        /*!<Bit 3 */
N#define  ADC_CR2_JEXTEN                      ((uint32_t)0x00300000)        /*!<JEXTEN[1:0] bits (External Trigger Conversion mode for injected channelsp) */
N#define  ADC_CR2_JEXTEN_0                    ((uint32_t)0x00100000)        /*!<Bit 0 */
N#define  ADC_CR2_JEXTEN_1                    ((uint32_t)0x00200000)        /*!<Bit 1 */
N#define  ADC_CR2_JSWSTART                    ((uint32_t)0x00400000)        /*!<Start Conversion of injected channels */
N#define  ADC_CR2_EXTSEL                      ((uint32_t)0x0F000000)        /*!<EXTSEL[3:0] bits (External Event Select for regular group) */
N#define  ADC_CR2_EXTSEL_0                    ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  ADC_CR2_EXTSEL_1                    ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  ADC_CR2_EXTSEL_2                    ((uint32_t)0x04000000)        /*!<Bit 2 */
N#define  ADC_CR2_EXTSEL_3                    ((uint32_t)0x08000000)        /*!<Bit 3 */
N#define  ADC_CR2_EXTEN                       ((uint32_t)0x30000000)        /*!<EXTEN[1:0] bits (External Trigger Conversion mode for regular channelsp) */
N#define  ADC_CR2_EXTEN_0                     ((uint32_t)0x10000000)        /*!<Bit 0 */
N#define  ADC_CR2_EXTEN_1                     ((uint32_t)0x20000000)        /*!<Bit 1 */
N#define  ADC_CR2_SWSTART                     ((uint32_t)0x40000000)        /*!<Start Conversion of regular channels */
N
N/******************  Bit definition for ADC_SMPR1 register  *******************/
N#define  ADC_SMPR1_SMP10                     ((uint32_t)0x00000007)        /*!<SMP10[2:0] bits (Channel 10 Sample time selection) */
N#define  ADC_SMPR1_SMP10_0                   ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  ADC_SMPR1_SMP10_1                   ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  ADC_SMPR1_SMP10_2                   ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  ADC_SMPR1_SMP11                     ((uint32_t)0x00000038)        /*!<SMP11[2:0] bits (Channel 11 Sample time selection) */
N#define  ADC_SMPR1_SMP11_0                   ((uint32_t)0x00000008)        /*!<Bit 0 */
N#define  ADC_SMPR1_SMP11_1                   ((uint32_t)0x00000010)        /*!<Bit 1 */
N#define  ADC_SMPR1_SMP11_2                   ((uint32_t)0x00000020)        /*!<Bit 2 */
N#define  ADC_SMPR1_SMP12                     ((uint32_t)0x000001C0)        /*!<SMP12[2:0] bits (Channel 12 Sample time selection) */
N#define  ADC_SMPR1_SMP12_0                   ((uint32_t)0x00000040)        /*!<Bit 0 */
N#define  ADC_SMPR1_SMP12_1                   ((uint32_t)0x00000080)        /*!<Bit 1 */
N#define  ADC_SMPR1_SMP12_2                   ((uint32_t)0x00000100)        /*!<Bit 2 */
N#define  ADC_SMPR1_SMP13                     ((uint32_t)0x00000E00)        /*!<SMP13[2:0] bits (Channel 13 Sample time selection) */
N#define  ADC_SMPR1_SMP13_0                   ((uint32_t)0x00000200)        /*!<Bit 0 */
N#define  ADC_SMPR1_SMP13_1                   ((uint32_t)0x00000400)        /*!<Bit 1 */
N#define  ADC_SMPR1_SMP13_2                   ((uint32_t)0x00000800)        /*!<Bit 2 */
N#define  ADC_SMPR1_SMP14                     ((uint32_t)0x00007000)        /*!<SMP14[2:0] bits (Channel 14 Sample time selection) */
N#define  ADC_SMPR1_SMP14_0                   ((uint32_t)0x00001000)        /*!<Bit 0 */
N#define  ADC_SMPR1_SMP14_1                   ((uint32_t)0x00002000)        /*!<Bit 1 */
N#define  ADC_SMPR1_SMP14_2                   ((uint32_t)0x00004000)        /*!<Bit 2 */
N#define  ADC_SMPR1_SMP15                     ((uint32_t)0x00038000)        /*!<SMP15[2:0] bits (Channel 15 Sample time selection) */
N#define  ADC_SMPR1_SMP15_0                   ((uint32_t)0x00008000)        /*!<Bit 0 */
N#define  ADC_SMPR1_SMP15_1                   ((uint32_t)0x00010000)        /*!<Bit 1 */
N#define  ADC_SMPR1_SMP15_2                   ((uint32_t)0x00020000)        /*!<Bit 2 */
N#define  ADC_SMPR1_SMP16                     ((uint32_t)0x001C0000)        /*!<SMP16[2:0] bits (Channel 16 Sample time selection) */
N#define  ADC_SMPR1_SMP16_0                   ((uint32_t)0x00040000)        /*!<Bit 0 */
N#define  ADC_SMPR1_SMP16_1                   ((uint32_t)0x00080000)        /*!<Bit 1 */
N#define  ADC_SMPR1_SMP16_2                   ((uint32_t)0x00100000)        /*!<Bit 2 */
N#define  ADC_SMPR1_SMP17                     ((uint32_t)0x00E00000)        /*!<SMP17[2:0] bits (Channel 17 Sample time selection) */
N#define  ADC_SMPR1_SMP17_0                   ((uint32_t)0x00200000)        /*!<Bit 0 */
N#define  ADC_SMPR1_SMP17_1                   ((uint32_t)0x00400000)        /*!<Bit 1 */
N#define  ADC_SMPR1_SMP17_2                   ((uint32_t)0x00800000)        /*!<Bit 2 */
N#define  ADC_SMPR1_SMP18                     ((uint32_t)0x07000000)        /*!<SMP18[2:0] bits (Channel 18 Sample time selection) */
N#define  ADC_SMPR1_SMP18_0                   ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  ADC_SMPR1_SMP18_1                   ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  ADC_SMPR1_SMP18_2                   ((uint32_t)0x04000000)        /*!<Bit 2 */
N
N/******************  Bit definition for ADC_SMPR2 register  *******************/
N#define  ADC_SMPR2_SMP0                      ((uint32_t)0x00000007)        /*!<SMP0[2:0] bits (Channel 0 Sample time selection) */
N#define  ADC_SMPR2_SMP0_0                    ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  ADC_SMPR2_SMP0_1                    ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  ADC_SMPR2_SMP0_2                    ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  ADC_SMPR2_SMP1                      ((uint32_t)0x00000038)        /*!<SMP1[2:0] bits (Channel 1 Sample time selection) */
N#define  ADC_SMPR2_SMP1_0                    ((uint32_t)0x00000008)        /*!<Bit 0 */
N#define  ADC_SMPR2_SMP1_1                    ((uint32_t)0x00000010)        /*!<Bit 1 */
N#define  ADC_SMPR2_SMP1_2                    ((uint32_t)0x00000020)        /*!<Bit 2 */
N#define  ADC_SMPR2_SMP2                      ((uint32_t)0x000001C0)        /*!<SMP2[2:0] bits (Channel 2 Sample time selection) */
N#define  ADC_SMPR2_SMP2_0                    ((uint32_t)0x00000040)        /*!<Bit 0 */
N#define  ADC_SMPR2_SMP2_1                    ((uint32_t)0x00000080)        /*!<Bit 1 */
N#define  ADC_SMPR2_SMP2_2                    ((uint32_t)0x00000100)        /*!<Bit 2 */
N#define  ADC_SMPR2_SMP3                      ((uint32_t)0x00000E00)        /*!<SMP3[2:0] bits (Channel 3 Sample time selection) */
N#define  ADC_SMPR2_SMP3_0                    ((uint32_t)0x00000200)        /*!<Bit 0 */
N#define  ADC_SMPR2_SMP3_1                    ((uint32_t)0x00000400)        /*!<Bit 1 */
N#define  ADC_SMPR2_SMP3_2                    ((uint32_t)0x00000800)        /*!<Bit 2 */
N#define  ADC_SMPR2_SMP4                      ((uint32_t)0x00007000)        /*!<SMP4[2:0] bits (Channel 4 Sample time selection) */
N#define  ADC_SMPR2_SMP4_0                    ((uint32_t)0x00001000)        /*!<Bit 0 */
N#define  ADC_SMPR2_SMP4_1                    ((uint32_t)0x00002000)        /*!<Bit 1 */
N#define  ADC_SMPR2_SMP4_2                    ((uint32_t)0x00004000)        /*!<Bit 2 */
N#define  ADC_SMPR2_SMP5                      ((uint32_t)0x00038000)        /*!<SMP5[2:0] bits (Channel 5 Sample time selection) */
N#define  ADC_SMPR2_SMP5_0                    ((uint32_t)0x00008000)        /*!<Bit 0 */
N#define  ADC_SMPR2_SMP5_1                    ((uint32_t)0x00010000)        /*!<Bit 1 */
N#define  ADC_SMPR2_SMP5_2                    ((uint32_t)0x00020000)        /*!<Bit 2 */
N#define  ADC_SMPR2_SMP6                      ((uint32_t)0x001C0000)        /*!<SMP6[2:0] bits (Channel 6 Sample time selection) */
N#define  ADC_SMPR2_SMP6_0                    ((uint32_t)0x00040000)        /*!<Bit 0 */
N#define  ADC_SMPR2_SMP6_1                    ((uint32_t)0x00080000)        /*!<Bit 1 */
N#define  ADC_SMPR2_SMP6_2                    ((uint32_t)0x00100000)        /*!<Bit 2 */
N#define  ADC_SMPR2_SMP7                      ((uint32_t)0x00E00000)        /*!<SMP7[2:0] bits (Channel 7 Sample time selection) */
N#define  ADC_SMPR2_SMP7_0                    ((uint32_t)0x00200000)        /*!<Bit 0 */
N#define  ADC_SMPR2_SMP7_1                    ((uint32_t)0x00400000)        /*!<Bit 1 */
N#define  ADC_SMPR2_SMP7_2                    ((uint32_t)0x00800000)        /*!<Bit 2 */
N#define  ADC_SMPR2_SMP8                      ((uint32_t)0x07000000)        /*!<SMP8[2:0] bits (Channel 8 Sample time selection) */
N#define  ADC_SMPR2_SMP8_0                    ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  ADC_SMPR2_SMP8_1                    ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  ADC_SMPR2_SMP8_2                    ((uint32_t)0x04000000)        /*!<Bit 2 */
N#define  ADC_SMPR2_SMP9                      ((uint32_t)0x38000000)        /*!<SMP9[2:0] bits (Channel 9 Sample time selection) */
N#define  ADC_SMPR2_SMP9_0                    ((uint32_t)0x08000000)        /*!<Bit 0 */
N#define  ADC_SMPR2_SMP9_1                    ((uint32_t)0x10000000)        /*!<Bit 1 */
N#define  ADC_SMPR2_SMP9_2                    ((uint32_t)0x20000000)        /*!<Bit 2 */
N
N/******************  Bit definition for ADC_JOFR1 register  *******************/
N#define  ADC_JOFR1_JOFFSET1                  ((uint16_t)0x0FFF)            /*!<Data offset for injected channel 1 */
N
N/******************  Bit definition for ADC_JOFR2 register  *******************/
N#define  ADC_JOFR2_JOFFSET2                  ((uint16_t)0x0FFF)            /*!<Data offset for injected channel 2 */
N
N/******************  Bit definition for ADC_JOFR3 register  *******************/
N#define  ADC_JOFR3_JOFFSET3                  ((uint16_t)0x0FFF)            /*!<Data offset for injected channel 3 */
N
N/******************  Bit definition for ADC_JOFR4 register  *******************/
N#define  ADC_JOFR4_JOFFSET4                  ((uint16_t)0x0FFF)            /*!<Data offset for injected channel 4 */
N
N/*******************  Bit definition for ADC_HTR register  ********************/
N#define  ADC_HTR_HT                          ((uint16_t)0x0FFF)            /*!<Analog watchdog high threshold */
N
N/*******************  Bit definition for ADC_LTR register  ********************/
N#define  ADC_LTR_LT                          ((uint16_t)0x0FFF)            /*!<Analog watchdog low threshold */
N
N/*******************  Bit definition for ADC_SQR1 register  *******************/
N#define  ADC_SQR1_SQ13                       ((uint32_t)0x0000001F)        /*!<SQ13[4:0] bits (13th conversion in regular sequence) */
N#define  ADC_SQR1_SQ13_0                     ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  ADC_SQR1_SQ13_1                     ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  ADC_SQR1_SQ13_2                     ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  ADC_SQR1_SQ13_3                     ((uint32_t)0x00000008)        /*!<Bit 3 */
N#define  ADC_SQR1_SQ13_4                     ((uint32_t)0x00000010)        /*!<Bit 4 */
N#define  ADC_SQR1_SQ14                       ((uint32_t)0x000003E0)        /*!<SQ14[4:0] bits (14th conversion in regular sequence) */
N#define  ADC_SQR1_SQ14_0                     ((uint32_t)0x00000020)        /*!<Bit 0 */
N#define  ADC_SQR1_SQ14_1                     ((uint32_t)0x00000040)        /*!<Bit 1 */
N#define  ADC_SQR1_SQ14_2                     ((uint32_t)0x00000080)        /*!<Bit 2 */
N#define  ADC_SQR1_SQ14_3                     ((uint32_t)0x00000100)        /*!<Bit 3 */
N#define  ADC_SQR1_SQ14_4                     ((uint32_t)0x00000200)        /*!<Bit 4 */
N#define  ADC_SQR1_SQ15                       ((uint32_t)0x00007C00)        /*!<SQ15[4:0] bits (15th conversion in regular sequence) */
N#define  ADC_SQR1_SQ15_0                     ((uint32_t)0x00000400)        /*!<Bit 0 */
N#define  ADC_SQR1_SQ15_1                     ((uint32_t)0x00000800)        /*!<Bit 1 */
N#define  ADC_SQR1_SQ15_2                     ((uint32_t)0x00001000)        /*!<Bit 2 */
N#define  ADC_SQR1_SQ15_3                     ((uint32_t)0x00002000)        /*!<Bit 3 */
N#define  ADC_SQR1_SQ15_4                     ((uint32_t)0x00004000)        /*!<Bit 4 */
N#define  ADC_SQR1_SQ16                       ((uint32_t)0x000F8000)        /*!<SQ16[4:0] bits (16th conversion in regular sequence) */
N#define  ADC_SQR1_SQ16_0                     ((uint32_t)0x00008000)        /*!<Bit 0 */
N#define  ADC_SQR1_SQ16_1                     ((uint32_t)0x00010000)        /*!<Bit 1 */
N#define  ADC_SQR1_SQ16_2                     ((uint32_t)0x00020000)        /*!<Bit 2 */
N#define  ADC_SQR1_SQ16_3                     ((uint32_t)0x00040000)        /*!<Bit 3 */
N#define  ADC_SQR1_SQ16_4                     ((uint32_t)0x00080000)        /*!<Bit 4 */
N#define  ADC_SQR1_L                          ((uint32_t)0x00F00000)        /*!<L[3:0] bits (Regular channel sequence length) */
N#define  ADC_SQR1_L_0                        ((uint32_t)0x00100000)        /*!<Bit 0 */
N#define  ADC_SQR1_L_1                        ((uint32_t)0x00200000)        /*!<Bit 1 */
N#define  ADC_SQR1_L_2                        ((uint32_t)0x00400000)        /*!<Bit 2 */
N#define  ADC_SQR1_L_3                        ((uint32_t)0x00800000)        /*!<Bit 3 */
N
N/*******************  Bit definition for ADC_SQR2 register  *******************/
N#define  ADC_SQR2_SQ7                        ((uint32_t)0x0000001F)        /*!<SQ7[4:0] bits (7th conversion in regular sequence) */
N#define  ADC_SQR2_SQ7_0                      ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  ADC_SQR2_SQ7_1                      ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  ADC_SQR2_SQ7_2                      ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  ADC_SQR2_SQ7_3                      ((uint32_t)0x00000008)        /*!<Bit 3 */
N#define  ADC_SQR2_SQ7_4                      ((uint32_t)0x00000010)        /*!<Bit 4 */
N#define  ADC_SQR2_SQ8                        ((uint32_t)0x000003E0)        /*!<SQ8[4:0] bits (8th conversion in regular sequence) */
N#define  ADC_SQR2_SQ8_0                      ((uint32_t)0x00000020)        /*!<Bit 0 */
N#define  ADC_SQR2_SQ8_1                      ((uint32_t)0x00000040)        /*!<Bit 1 */
N#define  ADC_SQR2_SQ8_2                      ((uint32_t)0x00000080)        /*!<Bit 2 */
N#define  ADC_SQR2_SQ8_3                      ((uint32_t)0x00000100)        /*!<Bit 3 */
N#define  ADC_SQR2_SQ8_4                      ((uint32_t)0x00000200)        /*!<Bit 4 */
N#define  ADC_SQR2_SQ9                        ((uint32_t)0x00007C00)        /*!<SQ9[4:0] bits (9th conversion in regular sequence) */
N#define  ADC_SQR2_SQ9_0                      ((uint32_t)0x00000400)        /*!<Bit 0 */
N#define  ADC_SQR2_SQ9_1                      ((uint32_t)0x00000800)        /*!<Bit 1 */
N#define  ADC_SQR2_SQ9_2                      ((uint32_t)0x00001000)        /*!<Bit 2 */
N#define  ADC_SQR2_SQ9_3                      ((uint32_t)0x00002000)        /*!<Bit 3 */
N#define  ADC_SQR2_SQ9_4                      ((uint32_t)0x00004000)        /*!<Bit 4 */
N#define  ADC_SQR2_SQ10                       ((uint32_t)0x000F8000)        /*!<SQ10[4:0] bits (10th conversion in regular sequence) */
N#define  ADC_SQR2_SQ10_0                     ((uint32_t)0x00008000)        /*!<Bit 0 */
N#define  ADC_SQR2_SQ10_1                     ((uint32_t)0x00010000)        /*!<Bit 1 */
N#define  ADC_SQR2_SQ10_2                     ((uint32_t)0x00020000)        /*!<Bit 2 */
N#define  ADC_SQR2_SQ10_3                     ((uint32_t)0x00040000)        /*!<Bit 3 */
N#define  ADC_SQR2_SQ10_4                     ((uint32_t)0x00080000)        /*!<Bit 4 */
N#define  ADC_SQR2_SQ11                       ((uint32_t)0x01F00000)        /*!<SQ11[4:0] bits (11th conversion in regular sequence) */
N#define  ADC_SQR2_SQ11_0                     ((uint32_t)0x00100000)        /*!<Bit 0 */
N#define  ADC_SQR2_SQ11_1                     ((uint32_t)0x00200000)        /*!<Bit 1 */
N#define  ADC_SQR2_SQ11_2                     ((uint32_t)0x00400000)        /*!<Bit 2 */
N#define  ADC_SQR2_SQ11_3                     ((uint32_t)0x00800000)        /*!<Bit 3 */
N#define  ADC_SQR2_SQ11_4                     ((uint32_t)0x01000000)        /*!<Bit 4 */
N#define  ADC_SQR2_SQ12                       ((uint32_t)0x3E000000)        /*!<SQ12[4:0] bits (12th conversion in regular sequence) */
N#define  ADC_SQR2_SQ12_0                     ((uint32_t)0x02000000)        /*!<Bit 0 */
N#define  ADC_SQR2_SQ12_1                     ((uint32_t)0x04000000)        /*!<Bit 1 */
N#define  ADC_SQR2_SQ12_2                     ((uint32_t)0x08000000)        /*!<Bit 2 */
N#define  ADC_SQR2_SQ12_3                     ((uint32_t)0x10000000)        /*!<Bit 3 */
N#define  ADC_SQR2_SQ12_4                     ((uint32_t)0x20000000)        /*!<Bit 4 */
N
N/*******************  Bit definition for ADC_SQR3 register  *******************/
N#define  ADC_SQR3_SQ1                        ((uint32_t)0x0000001F)        /*!<SQ1[4:0] bits (1st conversion in regular sequence) */
N#define  ADC_SQR3_SQ1_0                      ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  ADC_SQR3_SQ1_1                      ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  ADC_SQR3_SQ1_2                      ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  ADC_SQR3_SQ1_3                      ((uint32_t)0x00000008)        /*!<Bit 3 */
N#define  ADC_SQR3_SQ1_4                      ((uint32_t)0x00000010)        /*!<Bit 4 */
N#define  ADC_SQR3_SQ2                        ((uint32_t)0x000003E0)        /*!<SQ2[4:0] bits (2nd conversion in regular sequence) */
N#define  ADC_SQR3_SQ2_0                      ((uint32_t)0x00000020)        /*!<Bit 0 */
N#define  ADC_SQR3_SQ2_1                      ((uint32_t)0x00000040)        /*!<Bit 1 */
N#define  ADC_SQR3_SQ2_2                      ((uint32_t)0x00000080)        /*!<Bit 2 */
N#define  ADC_SQR3_SQ2_3                      ((uint32_t)0x00000100)        /*!<Bit 3 */
N#define  ADC_SQR3_SQ2_4                      ((uint32_t)0x00000200)        /*!<Bit 4 */
N#define  ADC_SQR3_SQ3                        ((uint32_t)0x00007C00)        /*!<SQ3[4:0] bits (3rd conversion in regular sequence) */
N#define  ADC_SQR3_SQ3_0                      ((uint32_t)0x00000400)        /*!<Bit 0 */
N#define  ADC_SQR3_SQ3_1                      ((uint32_t)0x00000800)        /*!<Bit 1 */
N#define  ADC_SQR3_SQ3_2                      ((uint32_t)0x00001000)        /*!<Bit 2 */
N#define  ADC_SQR3_SQ3_3                      ((uint32_t)0x00002000)        /*!<Bit 3 */
N#define  ADC_SQR3_SQ3_4                      ((uint32_t)0x00004000)        /*!<Bit 4 */
N#define  ADC_SQR3_SQ4                        ((uint32_t)0x000F8000)        /*!<SQ4[4:0] bits (4th conversion in regular sequence) */
N#define  ADC_SQR3_SQ4_0                      ((uint32_t)0x00008000)        /*!<Bit 0 */
N#define  ADC_SQR3_SQ4_1                      ((uint32_t)0x00010000)        /*!<Bit 1 */
N#define  ADC_SQR3_SQ4_2                      ((uint32_t)0x00020000)        /*!<Bit 2 */
N#define  ADC_SQR3_SQ4_3                      ((uint32_t)0x00040000)        /*!<Bit 3 */
N#define  ADC_SQR3_SQ4_4                      ((uint32_t)0x00080000)        /*!<Bit 4 */
N#define  ADC_SQR3_SQ5                        ((uint32_t)0x01F00000)        /*!<SQ5[4:0] bits (5th conversion in regular sequence) */
N#define  ADC_SQR3_SQ5_0                      ((uint32_t)0x00100000)        /*!<Bit 0 */
N#define  ADC_SQR3_SQ5_1                      ((uint32_t)0x00200000)        /*!<Bit 1 */
N#define  ADC_SQR3_SQ5_2                      ((uint32_t)0x00400000)        /*!<Bit 2 */
N#define  ADC_SQR3_SQ5_3                      ((uint32_t)0x00800000)        /*!<Bit 3 */
N#define  ADC_SQR3_SQ5_4                      ((uint32_t)0x01000000)        /*!<Bit 4 */
N#define  ADC_SQR3_SQ6                        ((uint32_t)0x3E000000)        /*!<SQ6[4:0] bits (6th conversion in regular sequence) */
N#define  ADC_SQR3_SQ6_0                      ((uint32_t)0x02000000)        /*!<Bit 0 */
N#define  ADC_SQR3_SQ6_1                      ((uint32_t)0x04000000)        /*!<Bit 1 */
N#define  ADC_SQR3_SQ6_2                      ((uint32_t)0x08000000)        /*!<Bit 2 */
N#define  ADC_SQR3_SQ6_3                      ((uint32_t)0x10000000)        /*!<Bit 3 */
N#define  ADC_SQR3_SQ6_4                      ((uint32_t)0x20000000)        /*!<Bit 4 */
N
N/*******************  Bit definition for ADC_JSQR register  *******************/
N#define  ADC_JSQR_JSQ1                       ((uint32_t)0x0000001F)        /*!<JSQ1[4:0] bits (1st conversion in injected sequence) */  
N#define  ADC_JSQR_JSQ1_0                     ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  ADC_JSQR_JSQ1_1                     ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  ADC_JSQR_JSQ1_2                     ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  ADC_JSQR_JSQ1_3                     ((uint32_t)0x00000008)        /*!<Bit 3 */
N#define  ADC_JSQR_JSQ1_4                     ((uint32_t)0x00000010)        /*!<Bit 4 */
N#define  ADC_JSQR_JSQ2                       ((uint32_t)0x000003E0)        /*!<JSQ2[4:0] bits (2nd conversion in injected sequence) */
N#define  ADC_JSQR_JSQ2_0                     ((uint32_t)0x00000020)        /*!<Bit 0 */
N#define  ADC_JSQR_JSQ2_1                     ((uint32_t)0x00000040)        /*!<Bit 1 */
N#define  ADC_JSQR_JSQ2_2                     ((uint32_t)0x00000080)        /*!<Bit 2 */
N#define  ADC_JSQR_JSQ2_3                     ((uint32_t)0x00000100)        /*!<Bit 3 */
N#define  ADC_JSQR_JSQ2_4                     ((uint32_t)0x00000200)        /*!<Bit 4 */
N#define  ADC_JSQR_JSQ3                       ((uint32_t)0x00007C00)        /*!<JSQ3[4:0] bits (3rd conversion in injected sequence) */
N#define  ADC_JSQR_JSQ3_0                     ((uint32_t)0x00000400)        /*!<Bit 0 */
N#define  ADC_JSQR_JSQ3_1                     ((uint32_t)0x00000800)        /*!<Bit 1 */
N#define  ADC_JSQR_JSQ3_2                     ((uint32_t)0x00001000)        /*!<Bit 2 */
N#define  ADC_JSQR_JSQ3_3                     ((uint32_t)0x00002000)        /*!<Bit 3 */
N#define  ADC_JSQR_JSQ3_4                     ((uint32_t)0x00004000)        /*!<Bit 4 */
N#define  ADC_JSQR_JSQ4                       ((uint32_t)0x000F8000)        /*!<JSQ4[4:0] bits (4th conversion in injected sequence) */
N#define  ADC_JSQR_JSQ4_0                     ((uint32_t)0x00008000)        /*!<Bit 0 */
N#define  ADC_JSQR_JSQ4_1                     ((uint32_t)0x00010000)        /*!<Bit 1 */
N#define  ADC_JSQR_JSQ4_2                     ((uint32_t)0x00020000)        /*!<Bit 2 */
N#define  ADC_JSQR_JSQ4_3                     ((uint32_t)0x00040000)        /*!<Bit 3 */
N#define  ADC_JSQR_JSQ4_4                     ((uint32_t)0x00080000)        /*!<Bit 4 */
N#define  ADC_JSQR_JL                         ((uint32_t)0x00300000)        /*!<JL[1:0] bits (Injected Sequence length) */
N#define  ADC_JSQR_JL_0                       ((uint32_t)0x00100000)        /*!<Bit 0 */
N#define  ADC_JSQR_JL_1                       ((uint32_t)0x00200000)        /*!<Bit 1 */
N
N/*******************  Bit definition for ADC_JDR1 register  *******************/
N#define  ADC_JDR1_JDATA                      ((uint16_t)0xFFFF)            /*!<Injected data */
N
N/*******************  Bit definition for ADC_JDR2 register  *******************/
N#define  ADC_JDR2_JDATA                      ((uint16_t)0xFFFF)            /*!<Injected data */
N
N/*******************  Bit definition for ADC_JDR3 register  *******************/
N#define  ADC_JDR3_JDATA                      ((uint16_t)0xFFFF)            /*!<Injected data */
N
N/*******************  Bit definition for ADC_JDR4 register  *******************/
N#define  ADC_JDR4_JDATA                      ((uint16_t)0xFFFF)            /*!<Injected data */
N
N/********************  Bit definition for ADC_DR register  ********************/
N#define  ADC_DR_DATA                         ((uint32_t)0x0000FFFF)        /*!<Regular data */
N#define  ADC_DR_ADC2DATA                     ((uint32_t)0xFFFF0000)        /*!<ADC2 data */
N
N/*******************  Bit definition for ADC_CSR register  ********************/
N#define  ADC_CSR_AWD1                        ((uint32_t)0x00000001)        /*!<ADC1 Analog watchdog flag */
N#define  ADC_CSR_EOC1                        ((uint32_t)0x00000002)        /*!<ADC1 End of conversion */
N#define  ADC_CSR_JEOC1                       ((uint32_t)0x00000004)        /*!<ADC1 Injected channel end of conversion */
N#define  ADC_CSR_JSTRT1                      ((uint32_t)0x00000008)        /*!<ADC1 Injected channel Start flag */
N#define  ADC_CSR_STRT1                       ((uint32_t)0x00000010)        /*!<ADC1 Regular channel Start flag */
N#define  ADC_CSR_DOVR1                       ((uint32_t)0x00000020)        /*!<ADC1 DMA overrun  flag */
N#define  ADC_CSR_AWD2                        ((uint32_t)0x00000100)        /*!<ADC2 Analog watchdog flag */
N#define  ADC_CSR_EOC2                        ((uint32_t)0x00000200)        /*!<ADC2 End of conversion */
N#define  ADC_CSR_JEOC2                       ((uint32_t)0x00000400)        /*!<ADC2 Injected channel end of conversion */
N#define  ADC_CSR_JSTRT2                      ((uint32_t)0x00000800)        /*!<ADC2 Injected channel Start flag */
N#define  ADC_CSR_STRT2                       ((uint32_t)0x00001000)        /*!<ADC2 Regular channel Start flag */
N#define  ADC_CSR_DOVR2                       ((uint32_t)0x00002000)        /*!<ADC2 DMA overrun  flag */
N#define  ADC_CSR_AWD3                        ((uint32_t)0x00010000)        /*!<ADC3 Analog watchdog flag */
N#define  ADC_CSR_EOC3                        ((uint32_t)0x00020000)        /*!<ADC3 End of conversion */
N#define  ADC_CSR_JEOC3                       ((uint32_t)0x00040000)        /*!<ADC3 Injected channel end of conversion */
N#define  ADC_CSR_JSTRT3                      ((uint32_t)0x00080000)        /*!<ADC3 Injected channel Start flag */
N#define  ADC_CSR_STRT3                       ((uint32_t)0x00100000)        /*!<ADC3 Regular channel Start flag */
N#define  ADC_CSR_DOVR3                       ((uint32_t)0x00200000)        /*!<ADC3 DMA overrun  flag */
N
N/*******************  Bit definition for ADC_CCR register  ********************/
N#define  ADC_CCR_MULTI                       ((uint32_t)0x0000001F)        /*!<MULTI[4:0] bits (Multi-ADC mode selection) */  
N#define  ADC_CCR_MULTI_0                     ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  ADC_CCR_MULTI_1                     ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  ADC_CCR_MULTI_2                     ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  ADC_CCR_MULTI_3                     ((uint32_t)0x00000008)        /*!<Bit 3 */
N#define  ADC_CCR_MULTI_4                     ((uint32_t)0x00000010)        /*!<Bit 4 */
N#define  ADC_CCR_DELAY                       ((uint32_t)0x00000F00)        /*!<DELAY[3:0] bits (Delay between 2 sampling phases) */  
N#define  ADC_CCR_DELAY_0                     ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  ADC_CCR_DELAY_1                     ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  ADC_CCR_DELAY_2                     ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  ADC_CCR_DELAY_3                     ((uint32_t)0x00000800)        /*!<Bit 3 */
N#define  ADC_CCR_DDS                         ((uint32_t)0x00002000)        /*!<DMA disable selection (Multi-ADC mode) */
N#define  ADC_CCR_DMA                         ((uint32_t)0x0000C000)        /*!<DMA[1:0] bits (Direct Memory Access mode for multimode) */  
N#define  ADC_CCR_DMA_0                       ((uint32_t)0x00004000)        /*!<Bit 0 */
N#define  ADC_CCR_DMA_1                       ((uint32_t)0x00008000)        /*!<Bit 1 */
N#define  ADC_CCR_ADCPRE                      ((uint32_t)0x00030000)        /*!<ADCPRE[1:0] bits (ADC prescaler) */  
N#define  ADC_CCR_ADCPRE_0                    ((uint32_t)0x00010000)        /*!<Bit 0 */
N#define  ADC_CCR_ADCPRE_1                    ((uint32_t)0x00020000)        /*!<Bit 1 */
N#define  ADC_CCR_VBATE                       ((uint32_t)0x00400000)        /*!<VBAT Enable */
N#define  ADC_CCR_TSVREFE                     ((uint32_t)0x00800000)        /*!<Temperature Sensor and VREFINT Enable */
N
N/*******************  Bit definition for ADC_CDR register  ********************/
N#define  ADC_CDR_DATA1                      ((uint32_t)0x0000FFFF)         /*!<1st data of a pair of regular conversions */
N#define  ADC_CDR_DATA2                      ((uint32_t)0xFFFF0000)         /*!<2nd data of a pair of regular conversions */
N
N/******************************************************************************/
N/*                                                                            */
N/*                         Controller Area Network                            */
N/*                                                                            */
N/******************************************************************************/
N/*!<CAN control and status registers */
N/*******************  Bit definition for CAN_MCR register  ********************/
N#define  CAN_MCR_INRQ                        ((uint16_t)0x0001)            /*!<Initialization Request */
N#define  CAN_MCR_SLEEP                       ((uint16_t)0x0002)            /*!<Sleep Mode Request */
N#define  CAN_MCR_TXFP                        ((uint16_t)0x0004)            /*!<Transmit FIFO Priority */
N#define  CAN_MCR_RFLM                        ((uint16_t)0x0008)            /*!<Receive FIFO Locked Mode */
N#define  CAN_MCR_NART                        ((uint16_t)0x0010)            /*!<No Automatic Retransmission */
N#define  CAN_MCR_AWUM                        ((uint16_t)0x0020)            /*!<Automatic Wakeup Mode */
N#define  CAN_MCR_ABOM                        ((uint16_t)0x0040)            /*!<Automatic Bus-Off Management */
N#define  CAN_MCR_TTCM                        ((uint16_t)0x0080)            /*!<Time Triggered Communication Mode */
N#define  CAN_MCR_RESET                       ((uint16_t)0x8000)            /*!<bxCAN software master reset */
N
N/*******************  Bit definition for CAN_MSR register  ********************/
N#define  CAN_MSR_INAK                        ((uint16_t)0x0001)            /*!<Initialization Acknowledge */
N#define  CAN_MSR_SLAK                        ((uint16_t)0x0002)            /*!<Sleep Acknowledge */
N#define  CAN_MSR_ERRI                        ((uint16_t)0x0004)            /*!<Error Interrupt */
N#define  CAN_MSR_WKUI                        ((uint16_t)0x0008)            /*!<Wakeup Interrupt */
N#define  CAN_MSR_SLAKI                       ((uint16_t)0x0010)            /*!<Sleep Acknowledge Interrupt */
N#define  CAN_MSR_TXM                         ((uint16_t)0x0100)            /*!<Transmit Mode */
N#define  CAN_MSR_RXM                         ((uint16_t)0x0200)            /*!<Receive Mode */
N#define  CAN_MSR_SAMP                        ((uint16_t)0x0400)            /*!<Last Sample Point */
N#define  CAN_MSR_RX                          ((uint16_t)0x0800)            /*!<CAN Rx Signal */
N
N/*******************  Bit definition for CAN_TSR register  ********************/
N#define  CAN_TSR_RQCP0                       ((uint32_t)0x00000001)        /*!<Request Completed Mailbox0 */
N#define  CAN_TSR_TXOK0                       ((uint32_t)0x00000002)        /*!<Transmission OK of Mailbox0 */
N#define  CAN_TSR_ALST0                       ((uint32_t)0x00000004)        /*!<Arbitration Lost for Mailbox0 */
N#define  CAN_TSR_TERR0                       ((uint32_t)0x00000008)        /*!<Transmission Error of Mailbox0 */
N#define  CAN_TSR_ABRQ0                       ((uint32_t)0x00000080)        /*!<Abort Request for Mailbox0 */
N#define  CAN_TSR_RQCP1                       ((uint32_t)0x00000100)        /*!<Request Completed Mailbox1 */
N#define  CAN_TSR_TXOK1                       ((uint32_t)0x00000200)        /*!<Transmission OK of Mailbox1 */
N#define  CAN_TSR_ALST1                       ((uint32_t)0x00000400)        /*!<Arbitration Lost for Mailbox1 */
N#define  CAN_TSR_TERR1                       ((uint32_t)0x00000800)        /*!<Transmission Error of Mailbox1 */
N#define  CAN_TSR_ABRQ1                       ((uint32_t)0x00008000)        /*!<Abort Request for Mailbox 1 */
N#define  CAN_TSR_RQCP2                       ((uint32_t)0x00010000)        /*!<Request Completed Mailbox2 */
N#define  CAN_TSR_TXOK2                       ((uint32_t)0x00020000)        /*!<Transmission OK of Mailbox 2 */
N#define  CAN_TSR_ALST2                       ((uint32_t)0x00040000)        /*!<Arbitration Lost for mailbox 2 */
N#define  CAN_TSR_TERR2                       ((uint32_t)0x00080000)        /*!<Transmission Error of Mailbox 2 */
N#define  CAN_TSR_ABRQ2                       ((uint32_t)0x00800000)        /*!<Abort Request for Mailbox 2 */
N#define  CAN_TSR_CODE                        ((uint32_t)0x03000000)        /*!<Mailbox Code */
N
N#define  CAN_TSR_TME                         ((uint32_t)0x1C000000)        /*!<TME[2:0] bits */
N#define  CAN_TSR_TME0                        ((uint32_t)0x04000000)        /*!<Transmit Mailbox 0 Empty */
N#define  CAN_TSR_TME1                        ((uint32_t)0x08000000)        /*!<Transmit Mailbox 1 Empty */
N#define  CAN_TSR_TME2                        ((uint32_t)0x10000000)        /*!<Transmit Mailbox 2 Empty */
N
N#define  CAN_TSR_LOW                         ((uint32_t)0xE0000000)        /*!<LOW[2:0] bits */
N#define  CAN_TSR_LOW0                        ((uint32_t)0x20000000)        /*!<Lowest Priority Flag for Mailbox 0 */
N#define  CAN_TSR_LOW1                        ((uint32_t)0x40000000)        /*!<Lowest Priority Flag for Mailbox 1 */
N#define  CAN_TSR_LOW2                        ((uint32_t)0x80000000)        /*!<Lowest Priority Flag for Mailbox 2 */
N
N/*******************  Bit definition for CAN_RF0R register  *******************/
N#define  CAN_RF0R_FMP0                       ((uint8_t)0x03)               /*!<FIFO 0 Message Pending */
N#define  CAN_RF0R_FULL0                      ((uint8_t)0x08)               /*!<FIFO 0 Full */
N#define  CAN_RF0R_FOVR0                      ((uint8_t)0x10)               /*!<FIFO 0 Overrun */
N#define  CAN_RF0R_RFOM0                      ((uint8_t)0x20)               /*!<Release FIFO 0 Output Mailbox */
N
N/*******************  Bit definition for CAN_RF1R register  *******************/
N#define  CAN_RF1R_FMP1                       ((uint8_t)0x03)               /*!<FIFO 1 Message Pending */
N#define  CAN_RF1R_FULL1                      ((uint8_t)0x08)               /*!<FIFO 1 Full */
N#define  CAN_RF1R_FOVR1                      ((uint8_t)0x10)               /*!<FIFO 1 Overrun */
N#define  CAN_RF1R_RFOM1                      ((uint8_t)0x20)               /*!<Release FIFO 1 Output Mailbox */
N
N/********************  Bit definition for CAN_IER register  *******************/
N#define  CAN_IER_TMEIE                       ((uint32_t)0x00000001)        /*!<Transmit Mailbox Empty Interrupt Enable */
N#define  CAN_IER_FMPIE0                      ((uint32_t)0x00000002)        /*!<FIFO Message Pending Interrupt Enable */
N#define  CAN_IER_FFIE0                       ((uint32_t)0x00000004)        /*!<FIFO Full Interrupt Enable */
N#define  CAN_IER_FOVIE0                      ((uint32_t)0x00000008)        /*!<FIFO Overrun Interrupt Enable */
N#define  CAN_IER_FMPIE1                      ((uint32_t)0x00000010)        /*!<FIFO Message Pending Interrupt Enable */
N#define  CAN_IER_FFIE1                       ((uint32_t)0x00000020)        /*!<FIFO Full Interrupt Enable */
N#define  CAN_IER_FOVIE1                      ((uint32_t)0x00000040)        /*!<FIFO Overrun Interrupt Enable */
N#define  CAN_IER_EWGIE                       ((uint32_t)0x00000100)        /*!<Error Warning Interrupt Enable */
N#define  CAN_IER_EPVIE                       ((uint32_t)0x00000200)        /*!<Error Passive Interrupt Enable */
N#define  CAN_IER_BOFIE                       ((uint32_t)0x00000400)        /*!<Bus-Off Interrupt Enable */
N#define  CAN_IER_LECIE                       ((uint32_t)0x00000800)        /*!<Last Error Code Interrupt Enable */
N#define  CAN_IER_ERRIE                       ((uint32_t)0x00008000)        /*!<Error Interrupt Enable */
N#define  CAN_IER_WKUIE                       ((uint32_t)0x00010000)        /*!<Wakeup Interrupt Enable */
N#define  CAN_IER_SLKIE                       ((uint32_t)0x00020000)        /*!<Sleep Interrupt Enable */
N
N/********************  Bit definition for CAN_ESR register  *******************/
N#define  CAN_ESR_EWGF                        ((uint32_t)0x00000001)        /*!<Error Warning Flag */
N#define  CAN_ESR_EPVF                        ((uint32_t)0x00000002)        /*!<Error Passive Flag */
N#define  CAN_ESR_BOFF                        ((uint32_t)0x00000004)        /*!<Bus-Off Flag */
N
N#define  CAN_ESR_LEC                         ((uint32_t)0x00000070)        /*!<LEC[2:0] bits (Last Error Code) */
N#define  CAN_ESR_LEC_0                       ((uint32_t)0x00000010)        /*!<Bit 0 */
N#define  CAN_ESR_LEC_1                       ((uint32_t)0x00000020)        /*!<Bit 1 */
N#define  CAN_ESR_LEC_2                       ((uint32_t)0x00000040)        /*!<Bit 2 */
N
N#define  CAN_ESR_TEC                         ((uint32_t)0x00FF0000)        /*!<Least significant byte of the 9-bit Transmit Error Counter */
N#define  CAN_ESR_REC                         ((uint32_t)0xFF000000)        /*!<Receive Error Counter */
N
N/*******************  Bit definition for CAN_BTR register  ********************/
N#define  CAN_BTR_BRP                         ((uint32_t)0x000003FF)        /*!<Baud Rate Prescaler */
N#define  CAN_BTR_TS1                         ((uint32_t)0x000F0000)        /*!<Time Segment 1 */
N#define  CAN_BTR_TS2                         ((uint32_t)0x00700000)        /*!<Time Segment 2 */
N#define  CAN_BTR_SJW                         ((uint32_t)0x03000000)        /*!<Resynchronization Jump Width */
N#define  CAN_BTR_LBKM                        ((uint32_t)0x40000000)        /*!<Loop Back Mode (Debug) */
N#define  CAN_BTR_SILM                        ((uint32_t)0x80000000)        /*!<Silent Mode */
N
N/*!<Mailbox registers */
N/******************  Bit definition for CAN_TI0R register  ********************/
N#define  CAN_TI0R_TXRQ                       ((uint32_t)0x00000001)        /*!<Transmit Mailbox Request */
N#define  CAN_TI0R_RTR                        ((uint32_t)0x00000002)        /*!<Remote Transmission Request */
N#define  CAN_TI0R_IDE                        ((uint32_t)0x00000004)        /*!<Identifier Extension */
N#define  CAN_TI0R_EXID                       ((uint32_t)0x001FFFF8)        /*!<Extended Identifier */
N#define  CAN_TI0R_STID                       ((uint32_t)0xFFE00000)        /*!<Standard Identifier or Extended Identifier */
N
N/******************  Bit definition for CAN_TDT0R register  *******************/
N#define  CAN_TDT0R_DLC                       ((uint32_t)0x0000000F)        /*!<Data Length Code */
N#define  CAN_TDT0R_TGT                       ((uint32_t)0x00000100)        /*!<Transmit Global Time */
N#define  CAN_TDT0R_TIME                      ((uint32_t)0xFFFF0000)        /*!<Message Time Stamp */
N
N/******************  Bit definition for CAN_TDL0R register  *******************/
N#define  CAN_TDL0R_DATA0                     ((uint32_t)0x000000FF)        /*!<Data byte 0 */
N#define  CAN_TDL0R_DATA1                     ((uint32_t)0x0000FF00)        /*!<Data byte 1 */
N#define  CAN_TDL0R_DATA2                     ((uint32_t)0x00FF0000)        /*!<Data byte 2 */
N#define  CAN_TDL0R_DATA3                     ((uint32_t)0xFF000000)        /*!<Data byte 3 */
N
N/******************  Bit definition for CAN_TDH0R register  *******************/
N#define  CAN_TDH0R_DATA4                     ((uint32_t)0x000000FF)        /*!<Data byte 4 */
N#define  CAN_TDH0R_DATA5                     ((uint32_t)0x0000FF00)        /*!<Data byte 5 */
N#define  CAN_TDH0R_DATA6                     ((uint32_t)0x00FF0000)        /*!<Data byte 6 */
N#define  CAN_TDH0R_DATA7                     ((uint32_t)0xFF000000)        /*!<Data byte 7 */
N
N/*******************  Bit definition for CAN_TI1R register  *******************/
N#define  CAN_TI1R_TXRQ                       ((uint32_t)0x00000001)        /*!<Transmit Mailbox Request */
N#define  CAN_TI1R_RTR                        ((uint32_t)0x00000002)        /*!<Remote Transmission Request */
N#define  CAN_TI1R_IDE                        ((uint32_t)0x00000004)        /*!<Identifier Extension */
N#define  CAN_TI1R_EXID                       ((uint32_t)0x001FFFF8)        /*!<Extended Identifier */
N#define  CAN_TI1R_STID                       ((uint32_t)0xFFE00000)        /*!<Standard Identifier or Extended Identifier */
N
N/*******************  Bit definition for CAN_TDT1R register  ******************/
N#define  CAN_TDT1R_DLC                       ((uint32_t)0x0000000F)        /*!<Data Length Code */
N#define  CAN_TDT1R_TGT                       ((uint32_t)0x00000100)        /*!<Transmit Global Time */
N#define  CAN_TDT1R_TIME                      ((uint32_t)0xFFFF0000)        /*!<Message Time Stamp */
N
N/*******************  Bit definition for CAN_TDL1R register  ******************/
N#define  CAN_TDL1R_DATA0                     ((uint32_t)0x000000FF)        /*!<Data byte 0 */
N#define  CAN_TDL1R_DATA1                     ((uint32_t)0x0000FF00)        /*!<Data byte 1 */
N#define  CAN_TDL1R_DATA2                     ((uint32_t)0x00FF0000)        /*!<Data byte 2 */
N#define  CAN_TDL1R_DATA3                     ((uint32_t)0xFF000000)        /*!<Data byte 3 */
N
N/*******************  Bit definition for CAN_TDH1R register  ******************/
N#define  CAN_TDH1R_DATA4                     ((uint32_t)0x000000FF)        /*!<Data byte 4 */
N#define  CAN_TDH1R_DATA5                     ((uint32_t)0x0000FF00)        /*!<Data byte 5 */
N#define  CAN_TDH1R_DATA6                     ((uint32_t)0x00FF0000)        /*!<Data byte 6 */
N#define  CAN_TDH1R_DATA7                     ((uint32_t)0xFF000000)        /*!<Data byte 7 */
N
N/*******************  Bit definition for CAN_TI2R register  *******************/
N#define  CAN_TI2R_TXRQ                       ((uint32_t)0x00000001)        /*!<Transmit Mailbox Request */
N#define  CAN_TI2R_RTR                        ((uint32_t)0x00000002)        /*!<Remote Transmission Request */
N#define  CAN_TI2R_IDE                        ((uint32_t)0x00000004)        /*!<Identifier Extension */
N#define  CAN_TI2R_EXID                       ((uint32_t)0x001FFFF8)        /*!<Extended identifier */
N#define  CAN_TI2R_STID                       ((uint32_t)0xFFE00000)        /*!<Standard Identifier or Extended Identifier */
N
N/*******************  Bit definition for CAN_TDT2R register  ******************/  
N#define  CAN_TDT2R_DLC                       ((uint32_t)0x0000000F)        /*!<Data Length Code */
N#define  CAN_TDT2R_TGT                       ((uint32_t)0x00000100)        /*!<Transmit Global Time */
N#define  CAN_TDT2R_TIME                      ((uint32_t)0xFFFF0000)        /*!<Message Time Stamp */
N
N/*******************  Bit definition for CAN_TDL2R register  ******************/
N#define  CAN_TDL2R_DATA0                     ((uint32_t)0x000000FF)        /*!<Data byte 0 */
N#define  CAN_TDL2R_DATA1                     ((uint32_t)0x0000FF00)        /*!<Data byte 1 */
N#define  CAN_TDL2R_DATA2                     ((uint32_t)0x00FF0000)        /*!<Data byte 2 */
N#define  CAN_TDL2R_DATA3                     ((uint32_t)0xFF000000)        /*!<Data byte 3 */
N
N/*******************  Bit definition for CAN_TDH2R register  ******************/
N#define  CAN_TDH2R_DATA4                     ((uint32_t)0x000000FF)        /*!<Data byte 4 */
N#define  CAN_TDH2R_DATA5                     ((uint32_t)0x0000FF00)        /*!<Data byte 5 */
N#define  CAN_TDH2R_DATA6                     ((uint32_t)0x00FF0000)        /*!<Data byte 6 */
N#define  CAN_TDH2R_DATA7                     ((uint32_t)0xFF000000)        /*!<Data byte 7 */
N
N/*******************  Bit definition for CAN_RI0R register  *******************/
N#define  CAN_RI0R_RTR                        ((uint32_t)0x00000002)        /*!<Remote Transmission Request */
N#define  CAN_RI0R_IDE                        ((uint32_t)0x00000004)        /*!<Identifier Extension */
N#define  CAN_RI0R_EXID                       ((uint32_t)0x001FFFF8)        /*!<Extended Identifier */
N#define  CAN_RI0R_STID                       ((uint32_t)0xFFE00000)        /*!<Standard Identifier or Extended Identifier */
N
N/*******************  Bit definition for CAN_RDT0R register  ******************/
N#define  CAN_RDT0R_DLC                       ((uint32_t)0x0000000F)        /*!<Data Length Code */
N#define  CAN_RDT0R_FMI                       ((uint32_t)0x0000FF00)        /*!<Filter Match Index */
N#define  CAN_RDT0R_TIME                      ((uint32_t)0xFFFF0000)        /*!<Message Time Stamp */
N
N/*******************  Bit definition for CAN_RDL0R register  ******************/
N#define  CAN_RDL0R_DATA0                     ((uint32_t)0x000000FF)        /*!<Data byte 0 */
N#define  CAN_RDL0R_DATA1                     ((uint32_t)0x0000FF00)        /*!<Data byte 1 */
N#define  CAN_RDL0R_DATA2                     ((uint32_t)0x00FF0000)        /*!<Data byte 2 */
N#define  CAN_RDL0R_DATA3                     ((uint32_t)0xFF000000)        /*!<Data byte 3 */
N
N/*******************  Bit definition for CAN_RDH0R register  ******************/
N#define  CAN_RDH0R_DATA4                     ((uint32_t)0x000000FF)        /*!<Data byte 4 */
N#define  CAN_RDH0R_DATA5                     ((uint32_t)0x0000FF00)        /*!<Data byte 5 */
N#define  CAN_RDH0R_DATA6                     ((uint32_t)0x00FF0000)        /*!<Data byte 6 */
N#define  CAN_RDH0R_DATA7                     ((uint32_t)0xFF000000)        /*!<Data byte 7 */
N
N/*******************  Bit definition for CAN_RI1R register  *******************/
N#define  CAN_RI1R_RTR                        ((uint32_t)0x00000002)        /*!<Remote Transmission Request */
N#define  CAN_RI1R_IDE                        ((uint32_t)0x00000004)        /*!<Identifier Extension */
N#define  CAN_RI1R_EXID                       ((uint32_t)0x001FFFF8)        /*!<Extended identifier */
N#define  CAN_RI1R_STID                       ((uint32_t)0xFFE00000)        /*!<Standard Identifier or Extended Identifier */
N
N/*******************  Bit definition for CAN_RDT1R register  ******************/
N#define  CAN_RDT1R_DLC                       ((uint32_t)0x0000000F)        /*!<Data Length Code */
N#define  CAN_RDT1R_FMI                       ((uint32_t)0x0000FF00)        /*!<Filter Match Index */
N#define  CAN_RDT1R_TIME                      ((uint32_t)0xFFFF0000)        /*!<Message Time Stamp */
N
N/*******************  Bit definition for CAN_RDL1R register  ******************/
N#define  CAN_RDL1R_DATA0                     ((uint32_t)0x000000FF)        /*!<Data byte 0 */
N#define  CAN_RDL1R_DATA1                     ((uint32_t)0x0000FF00)        /*!<Data byte 1 */
N#define  CAN_RDL1R_DATA2                     ((uint32_t)0x00FF0000)        /*!<Data byte 2 */
N#define  CAN_RDL1R_DATA3                     ((uint32_t)0xFF000000)        /*!<Data byte 3 */
N
N/*******************  Bit definition for CAN_RDH1R register  ******************/
N#define  CAN_RDH1R_DATA4                     ((uint32_t)0x000000FF)        /*!<Data byte 4 */
N#define  CAN_RDH1R_DATA5                     ((uint32_t)0x0000FF00)        /*!<Data byte 5 */
N#define  CAN_RDH1R_DATA6                     ((uint32_t)0x00FF0000)        /*!<Data byte 6 */
N#define  CAN_RDH1R_DATA7                     ((uint32_t)0xFF000000)        /*!<Data byte 7 */
N
N/*!<CAN filter registers */
N/*******************  Bit definition for CAN_FMR register  ********************/
N#define  CAN_FMR_FINIT                       ((uint8_t)0x01)               /*!<Filter Init Mode */
N
N/*******************  Bit definition for CAN_FM1R register  *******************/
N#define  CAN_FM1R_FBM                        ((uint16_t)0x3FFF)            /*!<Filter Mode */
N#define  CAN_FM1R_FBM0                       ((uint16_t)0x0001)            /*!<Filter Init Mode bit 0 */
N#define  CAN_FM1R_FBM1                       ((uint16_t)0x0002)            /*!<Filter Init Mode bit 1 */
N#define  CAN_FM1R_FBM2                       ((uint16_t)0x0004)            /*!<Filter Init Mode bit 2 */
N#define  CAN_FM1R_FBM3                       ((uint16_t)0x0008)            /*!<Filter Init Mode bit 3 */
N#define  CAN_FM1R_FBM4                       ((uint16_t)0x0010)            /*!<Filter Init Mode bit 4 */
N#define  CAN_FM1R_FBM5                       ((uint16_t)0x0020)            /*!<Filter Init Mode bit 5 */
N#define  CAN_FM1R_FBM6                       ((uint16_t)0x0040)            /*!<Filter Init Mode bit 6 */
N#define  CAN_FM1R_FBM7                       ((uint16_t)0x0080)            /*!<Filter Init Mode bit 7 */
N#define  CAN_FM1R_FBM8                       ((uint16_t)0x0100)            /*!<Filter Init Mode bit 8 */
N#define  CAN_FM1R_FBM9                       ((uint16_t)0x0200)            /*!<Filter Init Mode bit 9 */
N#define  CAN_FM1R_FBM10                      ((uint16_t)0x0400)            /*!<Filter Init Mode bit 10 */
N#define  CAN_FM1R_FBM11                      ((uint16_t)0x0800)            /*!<Filter Init Mode bit 11 */
N#define  CAN_FM1R_FBM12                      ((uint16_t)0x1000)            /*!<Filter Init Mode bit 12 */
N#define  CAN_FM1R_FBM13                      ((uint16_t)0x2000)            /*!<Filter Init Mode bit 13 */
N
N/*******************  Bit definition for CAN_FS1R register  *******************/
N#define  CAN_FS1R_FSC                        ((uint16_t)0x3FFF)            /*!<Filter Scale Configuration */
N#define  CAN_FS1R_FSC0                       ((uint16_t)0x0001)            /*!<Filter Scale Configuration bit 0 */
N#define  CAN_FS1R_FSC1                       ((uint16_t)0x0002)            /*!<Filter Scale Configuration bit 1 */
N#define  CAN_FS1R_FSC2                       ((uint16_t)0x0004)            /*!<Filter Scale Configuration bit 2 */
N#define  CAN_FS1R_FSC3                       ((uint16_t)0x0008)            /*!<Filter Scale Configuration bit 3 */
N#define  CAN_FS1R_FSC4                       ((uint16_t)0x0010)            /*!<Filter Scale Configuration bit 4 */
N#define  CAN_FS1R_FSC5                       ((uint16_t)0x0020)            /*!<Filter Scale Configuration bit 5 */
N#define  CAN_FS1R_FSC6                       ((uint16_t)0x0040)            /*!<Filter Scale Configuration bit 6 */
N#define  CAN_FS1R_FSC7                       ((uint16_t)0x0080)            /*!<Filter Scale Configuration bit 7 */
N#define  CAN_FS1R_FSC8                       ((uint16_t)0x0100)            /*!<Filter Scale Configuration bit 8 */
N#define  CAN_FS1R_FSC9                       ((uint16_t)0x0200)            /*!<Filter Scale Configuration bit 9 */
N#define  CAN_FS1R_FSC10                      ((uint16_t)0x0400)            /*!<Filter Scale Configuration bit 10 */
N#define  CAN_FS1R_FSC11                      ((uint16_t)0x0800)            /*!<Filter Scale Configuration bit 11 */
N#define  CAN_FS1R_FSC12                      ((uint16_t)0x1000)            /*!<Filter Scale Configuration bit 12 */
N#define  CAN_FS1R_FSC13                      ((uint16_t)0x2000)            /*!<Filter Scale Configuration bit 13 */
N
N/******************  Bit definition for CAN_FFA1R register  *******************/
N#define  CAN_FFA1R_FFA                       ((uint16_t)0x3FFF)            /*!<Filter FIFO Assignment */
N#define  CAN_FFA1R_FFA0                      ((uint16_t)0x0001)            /*!<Filter FIFO Assignment for Filter 0 */
N#define  CAN_FFA1R_FFA1                      ((uint16_t)0x0002)            /*!<Filter FIFO Assignment for Filter 1 */
N#define  CAN_FFA1R_FFA2                      ((uint16_t)0x0004)            /*!<Filter FIFO Assignment for Filter 2 */
N#define  CAN_FFA1R_FFA3                      ((uint16_t)0x0008)            /*!<Filter FIFO Assignment for Filter 3 */
N#define  CAN_FFA1R_FFA4                      ((uint16_t)0x0010)            /*!<Filter FIFO Assignment for Filter 4 */
N#define  CAN_FFA1R_FFA5                      ((uint16_t)0x0020)            /*!<Filter FIFO Assignment for Filter 5 */
N#define  CAN_FFA1R_FFA6                      ((uint16_t)0x0040)            /*!<Filter FIFO Assignment for Filter 6 */
N#define  CAN_FFA1R_FFA7                      ((uint16_t)0x0080)            /*!<Filter FIFO Assignment for Filter 7 */
N#define  CAN_FFA1R_FFA8                      ((uint16_t)0x0100)            /*!<Filter FIFO Assignment for Filter 8 */
N#define  CAN_FFA1R_FFA9                      ((uint16_t)0x0200)            /*!<Filter FIFO Assignment for Filter 9 */
N#define  CAN_FFA1R_FFA10                     ((uint16_t)0x0400)            /*!<Filter FIFO Assignment for Filter 10 */
N#define  CAN_FFA1R_FFA11                     ((uint16_t)0x0800)            /*!<Filter FIFO Assignment for Filter 11 */
N#define  CAN_FFA1R_FFA12                     ((uint16_t)0x1000)            /*!<Filter FIFO Assignment for Filter 12 */
N#define  CAN_FFA1R_FFA13                     ((uint16_t)0x2000)            /*!<Filter FIFO Assignment for Filter 13 */
N
N/*******************  Bit definition for CAN_FA1R register  *******************/
N#define  CAN_FA1R_FACT                       ((uint16_t)0x3FFF)            /*!<Filter Active */
N#define  CAN_FA1R_FACT0                      ((uint16_t)0x0001)            /*!<Filter 0 Active */
N#define  CAN_FA1R_FACT1                      ((uint16_t)0x0002)            /*!<Filter 1 Active */
N#define  CAN_FA1R_FACT2                      ((uint16_t)0x0004)            /*!<Filter 2 Active */
N#define  CAN_FA1R_FACT3                      ((uint16_t)0x0008)            /*!<Filter 3 Active */
N#define  CAN_FA1R_FACT4                      ((uint16_t)0x0010)            /*!<Filter 4 Active */
N#define  CAN_FA1R_FACT5                      ((uint16_t)0x0020)            /*!<Filter 5 Active */
N#define  CAN_FA1R_FACT6                      ((uint16_t)0x0040)            /*!<Filter 6 Active */
N#define  CAN_FA1R_FACT7                      ((uint16_t)0x0080)            /*!<Filter 7 Active */
N#define  CAN_FA1R_FACT8                      ((uint16_t)0x0100)            /*!<Filter 8 Active */
N#define  CAN_FA1R_FACT9                      ((uint16_t)0x0200)            /*!<Filter 9 Active */
N#define  CAN_FA1R_FACT10                     ((uint16_t)0x0400)            /*!<Filter 10 Active */
N#define  CAN_FA1R_FACT11                     ((uint16_t)0x0800)            /*!<Filter 11 Active */
N#define  CAN_FA1R_FACT12                     ((uint16_t)0x1000)            /*!<Filter 12 Active */
N#define  CAN_FA1R_FACT13                     ((uint16_t)0x2000)            /*!<Filter 13 Active */
N
N/*******************  Bit definition for CAN_F0R1 register  *******************/
N#define  CAN_F0R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F0R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F0R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F0R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F0R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F0R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F0R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F0R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F0R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F0R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F0R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F0R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F0R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F0R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F0R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F0R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F0R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F0R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F0R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F0R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F0R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F0R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F0R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F0R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F0R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F0R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F0R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F0R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F0R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F0R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F0R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F0R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F1R1 register  *******************/
N#define  CAN_F1R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F1R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F1R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F1R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F1R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F1R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F1R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F1R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F1R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F1R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F1R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F1R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F1R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F1R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F1R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F1R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F1R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F1R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F1R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F1R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F1R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F1R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F1R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F1R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F1R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F1R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F1R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F1R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F1R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F1R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F1R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F1R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F2R1 register  *******************/
N#define  CAN_F2R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F2R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F2R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F2R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F2R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F2R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F2R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F2R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F2R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F2R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F2R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F2R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F2R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F2R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F2R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F2R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F2R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F2R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F2R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F2R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F2R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F2R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F2R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F2R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F2R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F2R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F2R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F2R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F2R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F2R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F2R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F2R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F3R1 register  *******************/
N#define  CAN_F3R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F3R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F3R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F3R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F3R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F3R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F3R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F3R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F3R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F3R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F3R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F3R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F3R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F3R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F3R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F3R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F3R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F3R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F3R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F3R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F3R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F3R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F3R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F3R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F3R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F3R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F3R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F3R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F3R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F3R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F3R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F3R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F4R1 register  *******************/
N#define  CAN_F4R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F4R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F4R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F4R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F4R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F4R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F4R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F4R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F4R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F4R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F4R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F4R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F4R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F4R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F4R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F4R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F4R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F4R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F4R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F4R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F4R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F4R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F4R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F4R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F4R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F4R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F4R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F4R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F4R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F4R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F4R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F4R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F5R1 register  *******************/
N#define  CAN_F5R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F5R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F5R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F5R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F5R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F5R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F5R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F5R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F5R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F5R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F5R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F5R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F5R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F5R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F5R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F5R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F5R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F5R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F5R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F5R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F5R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F5R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F5R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F5R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F5R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F5R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F5R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F5R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F5R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F5R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F5R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F5R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F6R1 register  *******************/
N#define  CAN_F6R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F6R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F6R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F6R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F6R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F6R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F6R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F6R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F6R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F6R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F6R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F6R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F6R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F6R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F6R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F6R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F6R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F6R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F6R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F6R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F6R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F6R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F6R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F6R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F6R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F6R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F6R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F6R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F6R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F6R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F6R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F6R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F7R1 register  *******************/
N#define  CAN_F7R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F7R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F7R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F7R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F7R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F7R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F7R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F7R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F7R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F7R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F7R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F7R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F7R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F7R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F7R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F7R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F7R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F7R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F7R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F7R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F7R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F7R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F7R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F7R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F7R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F7R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F7R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F7R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F7R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F7R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F7R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F7R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F8R1 register  *******************/
N#define  CAN_F8R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F8R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F8R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F8R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F8R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F8R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F8R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F8R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F8R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F8R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F8R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F8R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F8R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F8R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F8R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F8R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F8R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F8R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F8R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F8R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F8R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F8R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F8R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F8R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F8R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F8R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F8R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F8R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F8R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F8R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F8R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F8R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F9R1 register  *******************/
N#define  CAN_F9R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F9R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F9R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F9R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F9R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F9R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F9R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F9R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F9R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F9R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F9R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F9R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F9R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F9R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F9R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F9R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F9R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F9R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F9R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F9R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F9R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F9R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F9R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F9R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F9R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F9R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F9R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F9R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F9R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F9R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F9R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F9R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F10R1 register  ******************/
N#define  CAN_F10R1_FB0                       ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F10R1_FB1                       ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F10R1_FB2                       ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F10R1_FB3                       ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F10R1_FB4                       ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F10R1_FB5                       ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F10R1_FB6                       ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F10R1_FB7                       ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F10R1_FB8                       ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F10R1_FB9                       ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F10R1_FB10                      ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F10R1_FB11                      ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F10R1_FB12                      ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F10R1_FB13                      ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F10R1_FB14                      ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F10R1_FB15                      ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F10R1_FB16                      ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F10R1_FB17                      ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F10R1_FB18                      ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F10R1_FB19                      ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F10R1_FB20                      ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F10R1_FB21                      ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F10R1_FB22                      ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F10R1_FB23                      ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F10R1_FB24                      ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F10R1_FB25                      ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F10R1_FB26                      ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F10R1_FB27                      ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F10R1_FB28                      ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F10R1_FB29                      ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F10R1_FB30                      ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F10R1_FB31                      ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F11R1 register  ******************/
N#define  CAN_F11R1_FB0                       ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F11R1_FB1                       ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F11R1_FB2                       ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F11R1_FB3                       ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F11R1_FB4                       ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F11R1_FB5                       ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F11R1_FB6                       ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F11R1_FB7                       ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F11R1_FB8                       ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F11R1_FB9                       ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F11R1_FB10                      ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F11R1_FB11                      ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F11R1_FB12                      ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F11R1_FB13                      ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F11R1_FB14                      ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F11R1_FB15                      ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F11R1_FB16                      ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F11R1_FB17                      ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F11R1_FB18                      ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F11R1_FB19                      ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F11R1_FB20                      ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F11R1_FB21                      ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F11R1_FB22                      ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F11R1_FB23                      ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F11R1_FB24                      ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F11R1_FB25                      ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F11R1_FB26                      ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F11R1_FB27                      ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F11R1_FB28                      ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F11R1_FB29                      ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F11R1_FB30                      ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F11R1_FB31                      ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F12R1 register  ******************/
N#define  CAN_F12R1_FB0                       ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F12R1_FB1                       ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F12R1_FB2                       ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F12R1_FB3                       ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F12R1_FB4                       ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F12R1_FB5                       ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F12R1_FB6                       ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F12R1_FB7                       ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F12R1_FB8                       ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F12R1_FB9                       ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F12R1_FB10                      ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F12R1_FB11                      ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F12R1_FB12                      ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F12R1_FB13                      ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F12R1_FB14                      ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F12R1_FB15                      ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F12R1_FB16                      ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F12R1_FB17                      ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F12R1_FB18                      ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F12R1_FB19                      ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F12R1_FB20                      ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F12R1_FB21                      ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F12R1_FB22                      ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F12R1_FB23                      ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F12R1_FB24                      ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F12R1_FB25                      ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F12R1_FB26                      ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F12R1_FB27                      ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F12R1_FB28                      ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F12R1_FB29                      ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F12R1_FB30                      ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F12R1_FB31                      ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F13R1 register  ******************/
N#define  CAN_F13R1_FB0                       ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F13R1_FB1                       ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F13R1_FB2                       ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F13R1_FB3                       ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F13R1_FB4                       ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F13R1_FB5                       ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F13R1_FB6                       ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F13R1_FB7                       ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F13R1_FB8                       ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F13R1_FB9                       ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F13R1_FB10                      ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F13R1_FB11                      ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F13R1_FB12                      ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F13R1_FB13                      ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F13R1_FB14                      ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F13R1_FB15                      ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F13R1_FB16                      ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F13R1_FB17                      ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F13R1_FB18                      ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F13R1_FB19                      ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F13R1_FB20                      ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F13R1_FB21                      ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F13R1_FB22                      ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F13R1_FB23                      ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F13R1_FB24                      ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F13R1_FB25                      ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F13R1_FB26                      ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F13R1_FB27                      ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F13R1_FB28                      ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F13R1_FB29                      ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F13R1_FB30                      ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F13R1_FB31                      ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F0R2 register  *******************/
N#define  CAN_F0R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F0R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F0R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F0R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F0R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F0R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F0R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F0R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F0R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F0R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F0R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F0R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F0R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F0R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F0R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F0R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F0R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F0R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F0R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F0R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F0R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F0R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F0R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F0R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F0R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F0R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F0R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F0R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F0R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F0R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F0R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F0R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F1R2 register  *******************/
N#define  CAN_F1R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F1R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F1R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F1R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F1R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F1R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F1R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F1R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F1R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F1R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F1R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F1R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F1R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F1R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F1R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F1R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F1R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F1R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F1R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F1R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F1R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F1R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F1R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F1R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F1R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F1R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F1R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F1R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F1R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F1R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F1R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F1R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F2R2 register  *******************/
N#define  CAN_F2R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F2R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F2R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F2R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F2R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F2R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F2R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F2R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F2R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F2R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F2R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F2R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F2R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F2R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F2R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F2R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F2R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F2R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F2R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F2R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F2R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F2R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F2R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F2R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F2R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F2R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F2R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F2R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F2R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F2R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F2R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F2R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F3R2 register  *******************/
N#define  CAN_F3R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F3R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F3R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F3R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F3R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F3R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F3R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F3R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F3R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F3R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F3R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F3R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F3R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F3R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F3R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F3R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F3R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F3R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F3R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F3R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F3R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F3R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F3R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F3R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F3R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F3R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F3R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F3R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F3R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F3R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F3R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F3R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F4R2 register  *******************/
N#define  CAN_F4R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F4R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F4R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F4R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F4R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F4R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F4R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F4R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F4R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F4R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F4R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F4R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F4R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F4R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F4R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F4R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F4R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F4R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F4R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F4R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F4R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F4R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F4R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F4R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F4R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F4R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F4R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F4R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F4R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F4R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F4R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F4R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F5R2 register  *******************/
N#define  CAN_F5R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F5R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F5R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F5R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F5R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F5R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F5R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F5R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F5R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F5R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F5R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F5R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F5R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F5R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F5R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F5R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F5R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F5R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F5R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F5R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F5R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F5R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F5R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F5R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F5R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F5R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F5R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F5R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F5R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F5R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F5R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F5R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F6R2 register  *******************/
N#define  CAN_F6R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F6R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F6R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F6R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F6R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F6R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F6R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F6R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F6R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F6R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F6R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F6R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F6R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F6R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F6R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F6R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F6R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F6R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F6R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F6R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F6R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F6R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F6R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F6R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F6R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F6R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F6R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F6R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F6R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F6R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F6R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F6R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F7R2 register  *******************/
N#define  CAN_F7R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F7R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F7R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F7R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F7R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F7R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F7R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F7R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F7R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F7R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F7R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F7R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F7R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F7R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F7R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F7R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F7R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F7R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F7R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F7R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F7R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F7R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F7R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F7R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F7R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F7R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F7R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F7R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F7R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F7R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F7R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F7R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F8R2 register  *******************/
N#define  CAN_F8R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F8R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F8R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F8R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F8R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F8R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F8R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F8R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F8R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F8R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F8R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F8R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F8R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F8R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F8R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F8R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F8R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F8R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F8R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F8R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F8R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F8R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F8R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F8R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F8R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F8R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F8R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F8R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F8R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F8R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F8R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F8R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F9R2 register  *******************/
N#define  CAN_F9R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F9R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F9R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F9R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F9R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F9R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F9R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F9R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F9R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F9R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F9R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F9R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F9R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F9R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F9R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F9R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F9R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F9R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F9R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F9R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F9R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F9R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F9R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F9R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F9R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F9R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F9R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F9R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F9R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F9R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F9R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F9R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F10R2 register  ******************/
N#define  CAN_F10R2_FB0                       ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F10R2_FB1                       ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F10R2_FB2                       ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F10R2_FB3                       ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F10R2_FB4                       ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F10R2_FB5                       ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F10R2_FB6                       ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F10R2_FB7                       ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F10R2_FB8                       ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F10R2_FB9                       ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F10R2_FB10                      ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F10R2_FB11                      ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F10R2_FB12                      ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F10R2_FB13                      ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F10R2_FB14                      ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F10R2_FB15                      ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F10R2_FB16                      ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F10R2_FB17                      ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F10R2_FB18                      ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F10R2_FB19                      ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F10R2_FB20                      ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F10R2_FB21                      ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F10R2_FB22                      ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F10R2_FB23                      ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F10R2_FB24                      ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F10R2_FB25                      ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F10R2_FB26                      ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F10R2_FB27                      ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F10R2_FB28                      ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F10R2_FB29                      ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F10R2_FB30                      ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F10R2_FB31                      ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F11R2 register  ******************/
N#define  CAN_F11R2_FB0                       ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F11R2_FB1                       ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F11R2_FB2                       ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F11R2_FB3                       ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F11R2_FB4                       ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F11R2_FB5                       ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F11R2_FB6                       ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F11R2_FB7                       ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F11R2_FB8                       ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F11R2_FB9                       ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F11R2_FB10                      ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F11R2_FB11                      ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F11R2_FB12                      ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F11R2_FB13                      ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F11R2_FB14                      ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F11R2_FB15                      ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F11R2_FB16                      ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F11R2_FB17                      ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F11R2_FB18                      ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F11R2_FB19                      ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F11R2_FB20                      ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F11R2_FB21                      ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F11R2_FB22                      ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F11R2_FB23                      ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F11R2_FB24                      ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F11R2_FB25                      ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F11R2_FB26                      ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F11R2_FB27                      ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F11R2_FB28                      ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F11R2_FB29                      ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F11R2_FB30                      ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F11R2_FB31                      ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F12R2 register  ******************/
N#define  CAN_F12R2_FB0                       ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F12R2_FB1                       ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F12R2_FB2                       ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F12R2_FB3                       ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F12R2_FB4                       ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F12R2_FB5                       ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F12R2_FB6                       ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F12R2_FB7                       ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F12R2_FB8                       ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F12R2_FB9                       ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F12R2_FB10                      ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F12R2_FB11                      ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F12R2_FB12                      ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F12R2_FB13                      ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F12R2_FB14                      ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F12R2_FB15                      ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F12R2_FB16                      ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F12R2_FB17                      ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F12R2_FB18                      ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F12R2_FB19                      ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F12R2_FB20                      ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F12R2_FB21                      ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F12R2_FB22                      ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F12R2_FB23                      ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F12R2_FB24                      ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F12R2_FB25                      ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F12R2_FB26                      ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F12R2_FB27                      ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F12R2_FB28                      ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F12R2_FB29                      ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F12R2_FB30                      ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F12R2_FB31                      ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/*******************  Bit definition for CAN_F13R2 register  ******************/
N#define  CAN_F13R2_FB0                       ((uint32_t)0x00000001)        /*!<Filter bit 0 */
N#define  CAN_F13R2_FB1                       ((uint32_t)0x00000002)        /*!<Filter bit 1 */
N#define  CAN_F13R2_FB2                       ((uint32_t)0x00000004)        /*!<Filter bit 2 */
N#define  CAN_F13R2_FB3                       ((uint32_t)0x00000008)        /*!<Filter bit 3 */
N#define  CAN_F13R2_FB4                       ((uint32_t)0x00000010)        /*!<Filter bit 4 */
N#define  CAN_F13R2_FB5                       ((uint32_t)0x00000020)        /*!<Filter bit 5 */
N#define  CAN_F13R2_FB6                       ((uint32_t)0x00000040)        /*!<Filter bit 6 */
N#define  CAN_F13R2_FB7                       ((uint32_t)0x00000080)        /*!<Filter bit 7 */
N#define  CAN_F13R2_FB8                       ((uint32_t)0x00000100)        /*!<Filter bit 8 */
N#define  CAN_F13R2_FB9                       ((uint32_t)0x00000200)        /*!<Filter bit 9 */
N#define  CAN_F13R2_FB10                      ((uint32_t)0x00000400)        /*!<Filter bit 10 */
N#define  CAN_F13R2_FB11                      ((uint32_t)0x00000800)        /*!<Filter bit 11 */
N#define  CAN_F13R2_FB12                      ((uint32_t)0x00001000)        /*!<Filter bit 12 */
N#define  CAN_F13R2_FB13                      ((uint32_t)0x00002000)        /*!<Filter bit 13 */
N#define  CAN_F13R2_FB14                      ((uint32_t)0x00004000)        /*!<Filter bit 14 */
N#define  CAN_F13R2_FB15                      ((uint32_t)0x00008000)        /*!<Filter bit 15 */
N#define  CAN_F13R2_FB16                      ((uint32_t)0x00010000)        /*!<Filter bit 16 */
N#define  CAN_F13R2_FB17                      ((uint32_t)0x00020000)        /*!<Filter bit 17 */
N#define  CAN_F13R2_FB18                      ((uint32_t)0x00040000)        /*!<Filter bit 18 */
N#define  CAN_F13R2_FB19                      ((uint32_t)0x00080000)        /*!<Filter bit 19 */
N#define  CAN_F13R2_FB20                      ((uint32_t)0x00100000)        /*!<Filter bit 20 */
N#define  CAN_F13R2_FB21                      ((uint32_t)0x00200000)        /*!<Filter bit 21 */
N#define  CAN_F13R2_FB22                      ((uint32_t)0x00400000)        /*!<Filter bit 22 */
N#define  CAN_F13R2_FB23                      ((uint32_t)0x00800000)        /*!<Filter bit 23 */
N#define  CAN_F13R2_FB24                      ((uint32_t)0x01000000)        /*!<Filter bit 24 */
N#define  CAN_F13R2_FB25                      ((uint32_t)0x02000000)        /*!<Filter bit 25 */
N#define  CAN_F13R2_FB26                      ((uint32_t)0x04000000)        /*!<Filter bit 26 */
N#define  CAN_F13R2_FB27                      ((uint32_t)0x08000000)        /*!<Filter bit 27 */
N#define  CAN_F13R2_FB28                      ((uint32_t)0x10000000)        /*!<Filter bit 28 */
N#define  CAN_F13R2_FB29                      ((uint32_t)0x20000000)        /*!<Filter bit 29 */
N#define  CAN_F13R2_FB30                      ((uint32_t)0x40000000)        /*!<Filter bit 30 */
N#define  CAN_F13R2_FB31                      ((uint32_t)0x80000000)        /*!<Filter bit 31 */
N
N/******************************************************************************/
N/*                                                                            */
N/*                          CRC calculation unit                              */
N/*                                                                            */
N/******************************************************************************/
N/*******************  Bit definition for CRC_DR register  *********************/
N#define  CRC_DR_DR                           ((uint32_t)0xFFFFFFFF) /*!< Data register bits */
N
N
N/*******************  Bit definition for CRC_IDR register  ********************/
N#define  CRC_IDR_IDR                         ((uint8_t)0xFF)        /*!< General-purpose 8-bit data register bits */
N
N
N/********************  Bit definition for CRC_CR register  ********************/
N#define  CRC_CR_RESET                        ((uint8_t)0x01)        /*!< RESET bit */
N
N/******************************************************************************/
N/*                                                                            */
N/*                            Crypto Processor                                */
N/*                                                                            */
N/******************************************************************************/
N/******************* Bits definition for CRYP_CR register  ********************/
N#define CRYP_CR_ALGODIR                      ((uint32_t)0x00000004)
N
N#define CRYP_CR_ALGOMODE                     ((uint32_t)0x00080038)
N#define CRYP_CR_ALGOMODE_0                   ((uint32_t)0x00000008)
N#define CRYP_CR_ALGOMODE_1                   ((uint32_t)0x00000010)
N#define CRYP_CR_ALGOMODE_2                   ((uint32_t)0x00000020)
N#define CRYP_CR_ALGOMODE_TDES_ECB            ((uint32_t)0x00000000)
N#define CRYP_CR_ALGOMODE_TDES_CBC            ((uint32_t)0x00000008)
N#define CRYP_CR_ALGOMODE_DES_ECB             ((uint32_t)0x00000010)
N#define CRYP_CR_ALGOMODE_DES_CBC             ((uint32_t)0x00000018)
N#define CRYP_CR_ALGOMODE_AES_ECB             ((uint32_t)0x00000020)
N#define CRYP_CR_ALGOMODE_AES_CBC             ((uint32_t)0x00000028)
N#define CRYP_CR_ALGOMODE_AES_CTR             ((uint32_t)0x00000030)
N#define CRYP_CR_ALGOMODE_AES_KEY             ((uint32_t)0x00000038)
N
N#define CRYP_CR_DATATYPE                     ((uint32_t)0x000000C0)
N#define CRYP_CR_DATATYPE_0                   ((uint32_t)0x00000040)
N#define CRYP_CR_DATATYPE_1                   ((uint32_t)0x00000080)
N#define CRYP_CR_KEYSIZE                      ((uint32_t)0x00000300)
N#define CRYP_CR_KEYSIZE_0                    ((uint32_t)0x00000100)
N#define CRYP_CR_KEYSIZE_1                    ((uint32_t)0x00000200)
N#define CRYP_CR_FFLUSH                       ((uint32_t)0x00004000)
N#define CRYP_CR_CRYPEN                       ((uint32_t)0x00008000)
N
N#define CRYP_CR_GCM_CCMPH                    ((uint32_t)0x00030000)
N#define CRYP_CR_GCM_CCMPH_0                  ((uint32_t)0x00010000)
N#define CRYP_CR_GCM_CCMPH_1                  ((uint32_t)0x00020000)
N#define CRYP_CR_ALGOMODE_3                   ((uint32_t)0x00080000) 
N
N/****************** Bits definition for CRYP_SR register  *********************/
N#define CRYP_SR_IFEM                         ((uint32_t)0x00000001)
N#define CRYP_SR_IFNF                         ((uint32_t)0x00000002)
N#define CRYP_SR_OFNE                         ((uint32_t)0x00000004)
N#define CRYP_SR_OFFU                         ((uint32_t)0x00000008)
N#define CRYP_SR_BUSY                         ((uint32_t)0x00000010)
N/****************** Bits definition for CRYP_DMACR register  ******************/
N#define CRYP_DMACR_DIEN                      ((uint32_t)0x00000001)
N#define CRYP_DMACR_DOEN                      ((uint32_t)0x00000002)
N/*****************  Bits definition for CRYP_IMSCR register  ******************/
N#define CRYP_IMSCR_INIM                      ((uint32_t)0x00000001)
N#define CRYP_IMSCR_OUTIM                     ((uint32_t)0x00000002)
N/****************** Bits definition for CRYP_RISR register  *******************/
N#define CRYP_RISR_OUTRIS                     ((uint32_t)0x00000001)
N#define CRYP_RISR_INRIS                      ((uint32_t)0x00000002)
N/****************** Bits definition for CRYP_MISR register  *******************/
N#define CRYP_MISR_INMIS                      ((uint32_t)0x00000001)
N#define CRYP_MISR_OUTMIS                     ((uint32_t)0x00000002)
N
N/******************************************************************************/
N/*                                                                            */
N/*                      Digital to Analog Converter                           */
N/*                                                                            */
N/******************************************************************************/
N/********************  Bit definition for DAC_CR register  ********************/
N#define  DAC_CR_EN1                          ((uint32_t)0x00000001)        /*!<DAC channel1 enable */
N#define  DAC_CR_BOFF1                        ((uint32_t)0x00000002)        /*!<DAC channel1 output buffer disable */
N#define  DAC_CR_TEN1                         ((uint32_t)0x00000004)        /*!<DAC channel1 Trigger enable */
N
N#define  DAC_CR_TSEL1                        ((uint32_t)0x00000038)        /*!<TSEL1[2:0] (DAC channel1 Trigger selection) */
N#define  DAC_CR_TSEL1_0                      ((uint32_t)0x00000008)        /*!<Bit 0 */
N#define  DAC_CR_TSEL1_1                      ((uint32_t)0x00000010)        /*!<Bit 1 */
N#define  DAC_CR_TSEL1_2                      ((uint32_t)0x00000020)        /*!<Bit 2 */
N
N#define  DAC_CR_WAVE1                        ((uint32_t)0x000000C0)        /*!<WAVE1[1:0] (DAC channel1 noise/triangle wave generation enable) */
N#define  DAC_CR_WAVE1_0                      ((uint32_t)0x00000040)        /*!<Bit 0 */
N#define  DAC_CR_WAVE1_1                      ((uint32_t)0x00000080)        /*!<Bit 1 */
N
N#define  DAC_CR_MAMP1                        ((uint32_t)0x00000F00)        /*!<MAMP1[3:0] (DAC channel1 Mask/Amplitude selector) */
N#define  DAC_CR_MAMP1_0                      ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  DAC_CR_MAMP1_1                      ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  DAC_CR_MAMP1_2                      ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  DAC_CR_MAMP1_3                      ((uint32_t)0x00000800)        /*!<Bit 3 */
N
N#define  DAC_CR_DMAEN1                       ((uint32_t)0x00001000)        /*!<DAC channel1 DMA enable */
N#define  DAC_CR_EN2                          ((uint32_t)0x00010000)        /*!<DAC channel2 enable */
N#define  DAC_CR_BOFF2                        ((uint32_t)0x00020000)        /*!<DAC channel2 output buffer disable */
N#define  DAC_CR_TEN2                         ((uint32_t)0x00040000)        /*!<DAC channel2 Trigger enable */
N
N#define  DAC_CR_TSEL2                        ((uint32_t)0x00380000)        /*!<TSEL2[2:0] (DAC channel2 Trigger selection) */
N#define  DAC_CR_TSEL2_0                      ((uint32_t)0x00080000)        /*!<Bit 0 */
N#define  DAC_CR_TSEL2_1                      ((uint32_t)0x00100000)        /*!<Bit 1 */
N#define  DAC_CR_TSEL2_2                      ((uint32_t)0x00200000)        /*!<Bit 2 */
N
N#define  DAC_CR_WAVE2                        ((uint32_t)0x00C00000)        /*!<WAVE2[1:0] (DAC channel2 noise/triangle wave generation enable) */
N#define  DAC_CR_WAVE2_0                      ((uint32_t)0x00400000)        /*!<Bit 0 */
N#define  DAC_CR_WAVE2_1                      ((uint32_t)0x00800000)        /*!<Bit 1 */
N
N#define  DAC_CR_MAMP2                        ((uint32_t)0x0F000000)        /*!<MAMP2[3:0] (DAC channel2 Mask/Amplitude selector) */
N#define  DAC_CR_MAMP2_0                      ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  DAC_CR_MAMP2_1                      ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  DAC_CR_MAMP2_2                      ((uint32_t)0x04000000)        /*!<Bit 2 */
N#define  DAC_CR_MAMP2_3                      ((uint32_t)0x08000000)        /*!<Bit 3 */
N
N#define  DAC_CR_DMAEN2                       ((uint32_t)0x10000000)        /*!<DAC channel2 DMA enabled */
N
N/*****************  Bit definition for DAC_SWTRIGR register  ******************/
N#define  DAC_SWTRIGR_SWTRIG1                 ((uint8_t)0x01)               /*!<DAC channel1 software trigger */
N#define  DAC_SWTRIGR_SWTRIG2                 ((uint8_t)0x02)               /*!<DAC channel2 software trigger */
N
N/*****************  Bit definition for DAC_DHR12R1 register  ******************/
N#define  DAC_DHR12R1_DACC1DHR                ((uint16_t)0x0FFF)            /*!<DAC channel1 12-bit Right aligned data */
N
N/*****************  Bit definition for DAC_DHR12L1 register  ******************/
N#define  DAC_DHR12L1_DACC1DHR                ((uint16_t)0xFFF0)            /*!<DAC channel1 12-bit Left aligned data */
N
N/******************  Bit definition for DAC_DHR8R1 register  ******************/
N#define  DAC_DHR8R1_DACC1DHR                 ((uint8_t)0xFF)               /*!<DAC channel1 8-bit Right aligned data */
N
N/*****************  Bit definition for DAC_DHR12R2 register  ******************/
N#define  DAC_DHR12R2_DACC2DHR                ((uint16_t)0x0FFF)            /*!<DAC channel2 12-bit Right aligned data */
N
N/*****************  Bit definition for DAC_DHR12L2 register  ******************/
N#define  DAC_DHR12L2_DACC2DHR                ((uint16_t)0xFFF0)            /*!<DAC channel2 12-bit Left aligned data */
N
N/******************  Bit definition for DAC_DHR8R2 register  ******************/
N#define  DAC_DHR8R2_DACC2DHR                 ((uint8_t)0xFF)               /*!<DAC channel2 8-bit Right aligned data */
N
N/*****************  Bit definition for DAC_DHR12RD register  ******************/
N#define  DAC_DHR12RD_DACC1DHR                ((uint32_t)0x00000FFF)        /*!<DAC channel1 12-bit Right aligned data */
N#define  DAC_DHR12RD_DACC2DHR                ((uint32_t)0x0FFF0000)        /*!<DAC channel2 12-bit Right aligned data */
N
N/*****************  Bit definition for DAC_DHR12LD register  ******************/
N#define  DAC_DHR12LD_DACC1DHR                ((uint32_t)0x0000FFF0)        /*!<DAC channel1 12-bit Left aligned data */
N#define  DAC_DHR12LD_DACC2DHR                ((uint32_t)0xFFF00000)        /*!<DAC channel2 12-bit Left aligned data */
N
N/******************  Bit definition for DAC_DHR8RD register  ******************/
N#define  DAC_DHR8RD_DACC1DHR                 ((uint16_t)0x00FF)            /*!<DAC channel1 8-bit Right aligned data */
N#define  DAC_DHR8RD_DACC2DHR                 ((uint16_t)0xFF00)            /*!<DAC channel2 8-bit Right aligned data */
N
N/*******************  Bit definition for DAC_DOR1 register  *******************/
N#define  DAC_DOR1_DACC1DOR                   ((uint16_t)0x0FFF)            /*!<DAC channel1 data output */
N
N/*******************  Bit definition for DAC_DOR2 register  *******************/
N#define  DAC_DOR2_DACC2DOR                   ((uint16_t)0x0FFF)            /*!<DAC channel2 data output */
N
N/********************  Bit definition for DAC_SR register  ********************/
N#define  DAC_SR_DMAUDR1                      ((uint32_t)0x00002000)        /*!<DAC channel1 DMA underrun flag */
N#define  DAC_SR_DMAUDR2                      ((uint32_t)0x20000000)        /*!<DAC channel2 DMA underrun flag */
N
N/******************************************************************************/
N/*                                                                            */
N/*                                 Debug MCU                                  */
N/*                                                                            */
N/******************************************************************************/
N
N/******************************************************************************/
N/*                                                                            */
N/*                                    DCMI                                    */
N/*                                                                            */
N/******************************************************************************/
N/********************  Bits definition for DCMI_CR register  ******************/
N#define DCMI_CR_CAPTURE                      ((uint32_t)0x00000001)
N#define DCMI_CR_CM                           ((uint32_t)0x00000002)
N#define DCMI_CR_CROP                         ((uint32_t)0x00000004)
N#define DCMI_CR_JPEG                         ((uint32_t)0x00000008)
N#define DCMI_CR_ESS                          ((uint32_t)0x00000010)
N#define DCMI_CR_PCKPOL                       ((uint32_t)0x00000020)
N#define DCMI_CR_HSPOL                        ((uint32_t)0x00000040)
N#define DCMI_CR_VSPOL                        ((uint32_t)0x00000080)
N#define DCMI_CR_FCRC_0                       ((uint32_t)0x00000100)
N#define DCMI_CR_FCRC_1                       ((uint32_t)0x00000200)
N#define DCMI_CR_EDM_0                        ((uint32_t)0x00000400)
N#define DCMI_CR_EDM_1                        ((uint32_t)0x00000800)
N#define DCMI_CR_CRE                          ((uint32_t)0x00001000)
N#define DCMI_CR_ENABLE                       ((uint32_t)0x00004000)
N
N/********************  Bits definition for DCMI_SR register  ******************/
N#define DCMI_SR_HSYNC                        ((uint32_t)0x00000001)
N#define DCMI_SR_VSYNC                        ((uint32_t)0x00000002)
N#define DCMI_SR_FNE                          ((uint32_t)0x00000004)
N
N/********************  Bits definition for DCMI_RISR register  ****************/
N#define DCMI_RISR_FRAME_RIS                  ((uint32_t)0x00000001)
N#define DCMI_RISR_OVF_RIS                    ((uint32_t)0x00000002)
N#define DCMI_RISR_ERR_RIS                    ((uint32_t)0x00000004)
N#define DCMI_RISR_VSYNC_RIS                  ((uint32_t)0x00000008)
N#define DCMI_RISR_LINE_RIS                   ((uint32_t)0x00000010)
N
N/********************  Bits definition for DCMI_IER register  *****************/
N#define DCMI_IER_FRAME_IE                    ((uint32_t)0x00000001)
N#define DCMI_IER_OVF_IE                      ((uint32_t)0x00000002)
N#define DCMI_IER_ERR_IE                      ((uint32_t)0x00000004)
N#define DCMI_IER_VSYNC_IE                    ((uint32_t)0x00000008)
N#define DCMI_IER_LINE_IE                     ((uint32_t)0x00000010)
N
N/********************  Bits definition for DCMI_MISR register  ****************/
N#define DCMI_MISR_FRAME_MIS                  ((uint32_t)0x00000001)
N#define DCMI_MISR_OVF_MIS                    ((uint32_t)0x00000002)
N#define DCMI_MISR_ERR_MIS                    ((uint32_t)0x00000004)
N#define DCMI_MISR_VSYNC_MIS                  ((uint32_t)0x00000008)
N#define DCMI_MISR_LINE_MIS                   ((uint32_t)0x00000010)
N
N/********************  Bits definition for DCMI_ICR register  *****************/
N#define DCMI_ICR_FRAME_ISC                   ((uint32_t)0x00000001)
N#define DCMI_ICR_OVF_ISC                     ((uint32_t)0x00000002)
N#define DCMI_ICR_ERR_ISC                     ((uint32_t)0x00000004)
N#define DCMI_ICR_VSYNC_ISC                   ((uint32_t)0x00000008)
N#define DCMI_ICR_LINE_ISC                    ((uint32_t)0x00000010)
N
N/******************************************************************************/
N/*                                                                            */
N/*                             DMA Controller                                 */
N/*                                                                            */
N/******************************************************************************/
N/********************  Bits definition for DMA_SxCR register  *****************/ 
N#define DMA_SxCR_CHSEL                       ((uint32_t)0x0E000000)
N#define DMA_SxCR_CHSEL_0                     ((uint32_t)0x02000000)
N#define DMA_SxCR_CHSEL_1                     ((uint32_t)0x04000000)
N#define DMA_SxCR_CHSEL_2                     ((uint32_t)0x08000000) 
N#define DMA_SxCR_MBURST                      ((uint32_t)0x01800000)
N#define DMA_SxCR_MBURST_0                    ((uint32_t)0x00800000)
N#define DMA_SxCR_MBURST_1                    ((uint32_t)0x01000000)
N#define DMA_SxCR_PBURST                      ((uint32_t)0x00600000)
N#define DMA_SxCR_PBURST_0                    ((uint32_t)0x00200000)
N#define DMA_SxCR_PBURST_1                    ((uint32_t)0x00400000)
N#define DMA_SxCR_ACK                         ((uint32_t)0x00100000)
N#define DMA_SxCR_CT                          ((uint32_t)0x00080000)  
N#define DMA_SxCR_DBM                         ((uint32_t)0x00040000)
N#define DMA_SxCR_PL                          ((uint32_t)0x00030000)
N#define DMA_SxCR_PL_0                        ((uint32_t)0x00010000)
N#define DMA_SxCR_PL_1                        ((uint32_t)0x00020000)
N#define DMA_SxCR_PINCOS                      ((uint32_t)0x00008000)
N#define DMA_SxCR_MSIZE                       ((uint32_t)0x00006000)
N#define DMA_SxCR_MSIZE_0                     ((uint32_t)0x00002000)
N#define DMA_SxCR_MSIZE_1                     ((uint32_t)0x00004000)
N#define DMA_SxCR_PSIZE                       ((uint32_t)0x00001800)
N#define DMA_SxCR_PSIZE_0                     ((uint32_t)0x00000800)
N#define DMA_SxCR_PSIZE_1                     ((uint32_t)0x00001000)
N#define DMA_SxCR_MINC                        ((uint32_t)0x00000400)
N#define DMA_SxCR_PINC                        ((uint32_t)0x00000200)
N#define DMA_SxCR_CIRC                        ((uint32_t)0x00000100)
N#define DMA_SxCR_DIR                         ((uint32_t)0x000000C0)
N#define DMA_SxCR_DIR_0                       ((uint32_t)0x00000040)
N#define DMA_SxCR_DIR_1                       ((uint32_t)0x00000080)
N#define DMA_SxCR_PFCTRL                      ((uint32_t)0x00000020)
N#define DMA_SxCR_TCIE                        ((uint32_t)0x00000010)
N#define DMA_SxCR_HTIE                        ((uint32_t)0x00000008)
N#define DMA_SxCR_TEIE                        ((uint32_t)0x00000004)
N#define DMA_SxCR_DMEIE                       ((uint32_t)0x00000002)
N#define DMA_SxCR_EN                          ((uint32_t)0x00000001)
N
N/********************  Bits definition for DMA_SxCNDTR register  **************/
N#define DMA_SxNDT                            ((uint32_t)0x0000FFFF)
N#define DMA_SxNDT_0                          ((uint32_t)0x00000001)
N#define DMA_SxNDT_1                          ((uint32_t)0x00000002)
N#define DMA_SxNDT_2                          ((uint32_t)0x00000004)
N#define DMA_SxNDT_3                          ((uint32_t)0x00000008)
N#define DMA_SxNDT_4                          ((uint32_t)0x00000010)
N#define DMA_SxNDT_5                          ((uint32_t)0x00000020)
N#define DMA_SxNDT_6                          ((uint32_t)0x00000040)
N#define DMA_SxNDT_7                          ((uint32_t)0x00000080)
N#define DMA_SxNDT_8                          ((uint32_t)0x00000100)
N#define DMA_SxNDT_9                          ((uint32_t)0x00000200)
N#define DMA_SxNDT_10                         ((uint32_t)0x00000400)
N#define DMA_SxNDT_11                         ((uint32_t)0x00000800)
N#define DMA_SxNDT_12                         ((uint32_t)0x00001000)
N#define DMA_SxNDT_13                         ((uint32_t)0x00002000)
N#define DMA_SxNDT_14                         ((uint32_t)0x00004000)
N#define DMA_SxNDT_15                         ((uint32_t)0x00008000)
N
N/********************  Bits definition for DMA_SxFCR register  ****************/ 
N#define DMA_SxFCR_FEIE                       ((uint32_t)0x00000080)
N#define DMA_SxFCR_FS                         ((uint32_t)0x00000038)
N#define DMA_SxFCR_FS_0                       ((uint32_t)0x00000008)
N#define DMA_SxFCR_FS_1                       ((uint32_t)0x00000010)
N#define DMA_SxFCR_FS_2                       ((uint32_t)0x00000020)
N#define DMA_SxFCR_DMDIS                      ((uint32_t)0x00000004)
N#define DMA_SxFCR_FTH                        ((uint32_t)0x00000003)
N#define DMA_SxFCR_FTH_0                      ((uint32_t)0x00000001)
N#define DMA_SxFCR_FTH_1                      ((uint32_t)0x00000002)
N
N/********************  Bits definition for DMA_LISR register  *****************/ 
N#define DMA_LISR_TCIF3                       ((uint32_t)0x08000000)
N#define DMA_LISR_HTIF3                       ((uint32_t)0x04000000)
N#define DMA_LISR_TEIF3                       ((uint32_t)0x02000000)
N#define DMA_LISR_DMEIF3                      ((uint32_t)0x01000000)
N#define DMA_LISR_FEIF3                       ((uint32_t)0x00400000)
N#define DMA_LISR_TCIF2                       ((uint32_t)0x00200000)
N#define DMA_LISR_HTIF2                       ((uint32_t)0x00100000)
N#define DMA_LISR_TEIF2                       ((uint32_t)0x00080000)
N#define DMA_LISR_DMEIF2                      ((uint32_t)0x00040000)
N#define DMA_LISR_FEIF2                       ((uint32_t)0x00010000)
N#define DMA_LISR_TCIF1                       ((uint32_t)0x00000800)
N#define DMA_LISR_HTIF1                       ((uint32_t)0x00000400)
N#define DMA_LISR_TEIF1                       ((uint32_t)0x00000200)
N#define DMA_LISR_DMEIF1                      ((uint32_t)0x00000100)
N#define DMA_LISR_FEIF1                       ((uint32_t)0x00000040)
N#define DMA_LISR_TCIF0                       ((uint32_t)0x00000020)
N#define DMA_LISR_HTIF0                       ((uint32_t)0x00000010)
N#define DMA_LISR_TEIF0                       ((uint32_t)0x00000008)
N#define DMA_LISR_DMEIF0                      ((uint32_t)0x00000004)
N#define DMA_LISR_FEIF0                       ((uint32_t)0x00000001)
N
N/********************  Bits definition for DMA_HISR register  *****************/ 
N#define DMA_HISR_TCIF7                       ((uint32_t)0x08000000)
N#define DMA_HISR_HTIF7                       ((uint32_t)0x04000000)
N#define DMA_HISR_TEIF7                       ((uint32_t)0x02000000)
N#define DMA_HISR_DMEIF7                      ((uint32_t)0x01000000)
N#define DMA_HISR_FEIF7                       ((uint32_t)0x00400000)
N#define DMA_HISR_TCIF6                       ((uint32_t)0x00200000)
N#define DMA_HISR_HTIF6                       ((uint32_t)0x00100000)
N#define DMA_HISR_TEIF6                       ((uint32_t)0x00080000)
N#define DMA_HISR_DMEIF6                      ((uint32_t)0x00040000)
N#define DMA_HISR_FEIF6                       ((uint32_t)0x00010000)
N#define DMA_HISR_TCIF5                       ((uint32_t)0x00000800)
N#define DMA_HISR_HTIF5                       ((uint32_t)0x00000400)
N#define DMA_HISR_TEIF5                       ((uint32_t)0x00000200)
N#define DMA_HISR_DMEIF5                      ((uint32_t)0x00000100)
N#define DMA_HISR_FEIF5                       ((uint32_t)0x00000040)
N#define DMA_HISR_TCIF4                       ((uint32_t)0x00000020)
N#define DMA_HISR_HTIF4                       ((uint32_t)0x00000010)
N#define DMA_HISR_TEIF4                       ((uint32_t)0x00000008)
N#define DMA_HISR_DMEIF4                      ((uint32_t)0x00000004)
N#define DMA_HISR_FEIF4                       ((uint32_t)0x00000001)
N
N/********************  Bits definition for DMA_LIFCR register  ****************/ 
N#define DMA_LIFCR_CTCIF3                     ((uint32_t)0x08000000)
N#define DMA_LIFCR_CHTIF3                     ((uint32_t)0x04000000)
N#define DMA_LIFCR_CTEIF3                     ((uint32_t)0x02000000)
N#define DMA_LIFCR_CDMEIF3                    ((uint32_t)0x01000000)
N#define DMA_LIFCR_CFEIF3                     ((uint32_t)0x00400000)
N#define DMA_LIFCR_CTCIF2                     ((uint32_t)0x00200000)
N#define DMA_LIFCR_CHTIF2                     ((uint32_t)0x00100000)
N#define DMA_LIFCR_CTEIF2                     ((uint32_t)0x00080000)
N#define DMA_LIFCR_CDMEIF2                    ((uint32_t)0x00040000)
N#define DMA_LIFCR_CFEIF2                     ((uint32_t)0x00010000)
N#define DMA_LIFCR_CTCIF1                     ((uint32_t)0x00000800)
N#define DMA_LIFCR_CHTIF1                     ((uint32_t)0x00000400)
N#define DMA_LIFCR_CTEIF1                     ((uint32_t)0x00000200)
N#define DMA_LIFCR_CDMEIF1                    ((uint32_t)0x00000100)
N#define DMA_LIFCR_CFEIF1                     ((uint32_t)0x00000040)
N#define DMA_LIFCR_CTCIF0                     ((uint32_t)0x00000020)
N#define DMA_LIFCR_CHTIF0                     ((uint32_t)0x00000010)
N#define DMA_LIFCR_CTEIF0                     ((uint32_t)0x00000008)
N#define DMA_LIFCR_CDMEIF0                    ((uint32_t)0x00000004)
N#define DMA_LIFCR_CFEIF0                     ((uint32_t)0x00000001)
N
N/********************  Bits definition for DMA_HIFCR  register  ****************/ 
N#define DMA_HIFCR_CTCIF7                     ((uint32_t)0x08000000)
N#define DMA_HIFCR_CHTIF7                     ((uint32_t)0x04000000)
N#define DMA_HIFCR_CTEIF7                     ((uint32_t)0x02000000)
N#define DMA_HIFCR_CDMEIF7                    ((uint32_t)0x01000000)
N#define DMA_HIFCR_CFEIF7                     ((uint32_t)0x00400000)
N#define DMA_HIFCR_CTCIF6                     ((uint32_t)0x00200000)
N#define DMA_HIFCR_CHTIF6                     ((uint32_t)0x00100000)
N#define DMA_HIFCR_CTEIF6                     ((uint32_t)0x00080000)
N#define DMA_HIFCR_CDMEIF6                    ((uint32_t)0x00040000)
N#define DMA_HIFCR_CFEIF6                     ((uint32_t)0x00010000)
N#define DMA_HIFCR_CTCIF5                     ((uint32_t)0x00000800)
N#define DMA_HIFCR_CHTIF5                     ((uint32_t)0x00000400)
N#define DMA_HIFCR_CTEIF5                     ((uint32_t)0x00000200)
N#define DMA_HIFCR_CDMEIF5                    ((uint32_t)0x00000100)
N#define DMA_HIFCR_CFEIF5                     ((uint32_t)0x00000040)
N#define DMA_HIFCR_CTCIF4                     ((uint32_t)0x00000020)
N#define DMA_HIFCR_CHTIF4                     ((uint32_t)0x00000010)
N#define DMA_HIFCR_CTEIF4                     ((uint32_t)0x00000008)
N#define DMA_HIFCR_CDMEIF4                    ((uint32_t)0x00000004)
N#define DMA_HIFCR_CFEIF4                     ((uint32_t)0x00000001)
N
N/******************************************************************************/
N/*                                                                            */
N/*                         AHB Master DMA2D Controller (DMA2D)                */
N/*                                                                            */
N/******************************************************************************/
N
N/********************  Bit definition for DMA2D_CR register  ******************/
N
N#define DMA2D_CR_START                     ((uint32_t)0x00000001)               /*!< Start transfer */
N#define DMA2D_CR_SUSP                      ((uint32_t)0x00000002)               /*!< Suspend transfer */
N#define DMA2D_CR_ABORT                     ((uint32_t)0x00000004)               /*!< Abort transfer */
N#define DMA2D_CR_TEIE                      ((uint32_t)0x00000100)               /*!< Transfer Error Interrupt Enable */
N#define DMA2D_CR_TCIE                      ((uint32_t)0x00000200)               /*!< Transfer Complete Interrupt Enable */
N#define DMA2D_CR_TWIE                      ((uint32_t)0x00000400)               /*!< Transfer Watermark Interrupt Enable */
N#define DMA2D_CR_CAEIE                     ((uint32_t)0x00000800)               /*!< CLUT Access Error Interrupt Enable */
N#define DMA2D_CR_CTCIE                     ((uint32_t)0x00001000)               /*!< CLUT Transfer Complete Interrupt Enable */
N#define DMA2D_CR_CEIE                      ((uint32_t)0x00002000)               /*!< Configuration Error Interrupt Enable */
N#define DMA2D_CR_MODE                      ((uint32_t)0x00030000)               /*!< DMA2D Mode */
N
N/********************  Bit definition for DMA2D_ISR register  *****************/
N
N#define DMA2D_ISR_TEIF                     ((uint32_t)0x00000001)               /*!< Transfer Error Interrupt Flag */
N#define DMA2D_ISR_TCIF                     ((uint32_t)0x00000002)               /*!< Transfer Complete Interrupt Flag */
N#define DMA2D_ISR_TWIF                     ((uint32_t)0x00000004)               /*!< Transfer Watermark Interrupt Flag */
N#define DMA2D_ISR_CAEIF                    ((uint32_t)0x00000008)               /*!< CLUT Access Error Interrupt Flag */
N#define DMA2D_ISR_CTCIF                    ((uint32_t)0x00000010)               /*!< CLUT Transfer Complete Interrupt Flag */
N#define DMA2D_ISR_CEIF                     ((uint32_t)0x00000020)               /*!< Configuration Error Interrupt Flag */
N
N/********************  Bit definition for DMA2D_IFSR register  ****************/
N
N#define DMA2D_IFSR_CTEIF                   ((uint32_t)0x00000001)               /*!< Clears Transfer Error Interrupt Flag */
N#define DMA2D_IFSR_CTCIF                   ((uint32_t)0x00000002)               /*!< Clears Transfer Complete Interrupt Flag */
N#define DMA2D_IFSR_CTWIF                   ((uint32_t)0x00000004)               /*!< Clears Transfer Watermark Interrupt Flag */
N#define DMA2D_IFSR_CCAEIF                  ((uint32_t)0x00000008)               /*!< Clears CLUT Access Error Interrupt Flag */
N#define DMA2D_IFSR_CCTCIF                  ((uint32_t)0x00000010)               /*!< Clears CLUT Transfer Complete Interrupt Flag */
N#define DMA2D_IFSR_CCEIF                   ((uint32_t)0x00000020)               /*!< Clears Configuration Error Interrupt Flag */
N
N/********************  Bit definition for DMA2D_FGMAR register  ***************/
N
N#define DMA2D_FGMAR_MA                     ((uint32_t)0xFFFFFFFF)               /*!< Memory Address */
N
N/********************  Bit definition for DMA2D_FGOR register  ****************/
N
N#define DMA2D_FGOR_LO                      ((uint32_t)0x00003FFF)               /*!< Line Offset */
N
N/********************  Bit definition for DMA2D_BGMAR register  ***************/
N
N#define DMA2D_BGMAR_MA                     ((uint32_t)0xFFFFFFFF)               /*!< Memory Address */
N
N/********************  Bit definition for DMA2D_BGOR register  ****************/
N
N#define DMA2D_BGOR_LO                      ((uint32_t)0x00003FFF)               /*!< Line Offset */
N
N/********************  Bit definition for DMA2D_FGPFCCR register  *************/
N
N#define DMA2D_FGPFCCR_CM                   ((uint32_t)0x0000000F)               /*!< Color mode */
N#define DMA2D_FGPFCCR_CCM                  ((uint32_t)0x00000010)               /*!< CLUT Color mode */
N#define DMA2D_FGPFCCR_START                ((uint32_t)0x00000020)               /*!< Start */
N#define DMA2D_FGPFCCR_CS                   ((uint32_t)0x0000FF00)               /*!< CLUT size */
N#define DMA2D_FGPFCCR_AM                   ((uint32_t)0x00030000)               /*!< Alpha mode */
N#define DMA2D_FGPFCCR_ALPHA                ((uint32_t)0xFF000000)               /*!< Alpha value */
N
N/********************  Bit definition for DMA2D_FGCOLR register  **************/
N
N#define DMA2D_FGCOLR_BLUE                  ((uint32_t)0x000000FF)               /*!< Blue Value */
N#define DMA2D_FGCOLR_GREEN                 ((uint32_t)0x0000FF00)               /*!< Green Value */
N#define DMA2D_FGCOLR_RED                   ((uint32_t)0x00FF0000)               /*!< Red Value */   
N
N/********************  Bit definition for DMA2D_BGPFCCR register  *************/
N
N#define DMA2D_BGPFCCR_CM                   ((uint32_t)0x0000000F)               /*!< Color mode */
N#define DMA2D_BGPFCCR_CCM                  ((uint32_t)0x00000010)               /*!< CLUT Color mode */
N#define DMA2D_BGPFCCR_START                ((uint32_t)0x00000020)               /*!< Start */
N#define DMA2D_BGPFCCR_CS                   ((uint32_t)0x0000FF00)               /*!< CLUT size */
N#define DMA2D_BGPFCCR_AM                   ((uint32_t)0x00030000)               /*!< Alpha Mode */
N#define DMA2D_BGPFCCR_ALPHA                ((uint32_t)0xFF000000)               /*!< Alpha value */
N
N/********************  Bit definition for DMA2D_BGCOLR register  **************/
N
N#define DMA2D_BGCOLR_BLUE                  ((uint32_t)0x000000FF)               /*!< Blue Value */
N#define DMA2D_BGCOLR_GREEN                 ((uint32_t)0x0000FF00)               /*!< Green Value */
N#define DMA2D_BGCOLR_RED                   ((uint32_t)0x00FF0000)               /*!< Red Value */
N
N/********************  Bit definition for DMA2D_FGCMAR register  **************/
N
N#define DMA2D_FGCMAR_MA                    ((uint32_t)0xFFFFFFFF)               /*!< Memory Address */
N
N/********************  Bit definition for DMA2D_BGCMAR register  **************/
N
N#define DMA2D_BGCMAR_MA                    ((uint32_t)0xFFFFFFFF)               /*!< Memory Address */
N
N/********************  Bit definition for DMA2D_OPFCCR register  **************/
N
N#define DMA2D_OPFCCR_CM                    ((uint32_t)0x00000007)               /*!< Color mode */
N
N/********************  Bit definition for DMA2D_OCOLR register  ***************/
N
N/*!<Mode_ARGB8888/RGB888 */
N
N#define DMA2D_OCOLR_BLUE_1                 ((uint32_t)0x000000FF)               /*!< BLUE Value */
N#define DMA2D_OCOLR_GREEN_1                ((uint32_t)0x0000FF00)               /*!< GREEN Value  */
N#define DMA2D_OCOLR_RED_1                  ((uint32_t)0x00FF0000)               /*!< Red Value */
N#define DMA2D_OCOLR_ALPHA_1                ((uint32_t)0xFF000000)               /*!< Alpha Channel Value */
N
N/*!<Mode_RGB565 */
N#define DMA2D_OCOLR_BLUE_2                 ((uint32_t)0x0000001F)               /*!< BLUE Value */
N#define DMA2D_OCOLR_GREEN_2                ((uint32_t)0x000007E0)               /*!< GREEN Value  */
N#define DMA2D_OCOLR_RED_2                  ((uint32_t)0x0000F800)               /*!< Red Value */
N
N/*!<Mode_ARGB1555 */
N#define DMA2D_OCOLR_BLUE_3                 ((uint32_t)0x0000001F)               /*!< BLUE Value */
N#define DMA2D_OCOLR_GREEN_3                ((uint32_t)0x000003E0)               /*!< GREEN Value  */
N#define DMA2D_OCOLR_RED_3                  ((uint32_t)0x00007C00)               /*!< Red Value */
N#define DMA2D_OCOLR_ALPHA_3                ((uint32_t)0x00008000)               /*!< Alpha Channel Value */
N
N/*!<Mode_ARGB4444 */
N#define DMA2D_OCOLR_BLUE_4                 ((uint32_t)0x0000000F)               /*!< BLUE Value */
N#define DMA2D_OCOLR_GREEN_4                ((uint32_t)0x000000F0)               /*!< GREEN Value  */
N#define DMA2D_OCOLR_RED_4                  ((uint32_t)0x00000F00)               /*!< Red Value */
N#define DMA2D_OCOLR_ALPHA_4                ((uint32_t)0x0000F000)               /*!< Alpha Channel Value */
N
N/********************  Bit definition for DMA2D_OMAR register  ****************/
N
N#define DMA2D_OMAR_MA                      ((uint32_t)0xFFFFFFFF)               /*!< Memory Address */
N
N/********************  Bit definition for DMA2D_OOR register  *****************/
N
N#define DMA2D_OOR_LO                       ((uint32_t)0x00003FFF)               /*!< Line Offset */
N
N/********************  Bit definition for DMA2D_NLR register  *****************/
N
N#define DMA2D_NLR_NL                       ((uint32_t)0x0000FFFF)               /*!< Number of Lines */
N#define DMA2D_NLR_PL                       ((uint32_t)0x3FFF0000)               /*!< Pixel per Lines */
N
N/********************  Bit definition for DMA2D_LWR register  *****************/
N
N#define DMA2D_LWR_LW                       ((uint32_t)0x0000FFFF)               /*!< Line Watermark */
N
N/********************  Bit definition for DMA2D_AMTCR register  ***************/
N
N#define DMA2D_AMTCR_EN                     ((uint32_t)0x00000001)               /*!< Enable */
N#define DMA2D_AMTCR_DT                     ((uint32_t)0x0000FF00)               /*!< Dead Time */
N
N
N
N/********************  Bit definition for DMA2D_FGCLUT register  **************/
N                                                                     
N/********************  Bit definition for DMA2D_BGCLUT register  **************/
N
N
N/******************************************************************************/
N/*                                                                            */
N/*                    External Interrupt/Event Controller                     */
N/*                                                                            */
N/******************************************************************************/
N/*******************  Bit definition for EXTI_IMR register  *******************/
N#define  EXTI_IMR_MR0                        ((uint32_t)0x00000001)        /*!< Interrupt Mask on line 0 */
N#define  EXTI_IMR_MR1                        ((uint32_t)0x00000002)        /*!< Interrupt Mask on line 1 */
N#define  EXTI_IMR_MR2                        ((uint32_t)0x00000004)        /*!< Interrupt Mask on line 2 */
N#define  EXTI_IMR_MR3                        ((uint32_t)0x00000008)        /*!< Interrupt Mask on line 3 */
N#define  EXTI_IMR_MR4                        ((uint32_t)0x00000010)        /*!< Interrupt Mask on line 4 */
N#define  EXTI_IMR_MR5                        ((uint32_t)0x00000020)        /*!< Interrupt Mask on line 5 */
N#define  EXTI_IMR_MR6                        ((uint32_t)0x00000040)        /*!< Interrupt Mask on line 6 */
N#define  EXTI_IMR_MR7                        ((uint32_t)0x00000080)        /*!< Interrupt Mask on line 7 */
N#define  EXTI_IMR_MR8                        ((uint32_t)0x00000100)        /*!< Interrupt Mask on line 8 */
N#define  EXTI_IMR_MR9                        ((uint32_t)0x00000200)        /*!< Interrupt Mask on line 9 */
N#define  EXTI_IMR_MR10                       ((uint32_t)0x00000400)        /*!< Interrupt Mask on line 10 */
N#define  EXTI_IMR_MR11                       ((uint32_t)0x00000800)        /*!< Interrupt Mask on line 11 */
N#define  EXTI_IMR_MR12                       ((uint32_t)0x00001000)        /*!< Interrupt Mask on line 12 */
N#define  EXTI_IMR_MR13                       ((uint32_t)0x00002000)        /*!< Interrupt Mask on line 13 */
N#define  EXTI_IMR_MR14                       ((uint32_t)0x00004000)        /*!< Interrupt Mask on line 14 */
N#define  EXTI_IMR_MR15                       ((uint32_t)0x00008000)        /*!< Interrupt Mask on line 15 */
N#define  EXTI_IMR_MR16                       ((uint32_t)0x00010000)        /*!< Interrupt Mask on line 16 */
N#define  EXTI_IMR_MR17                       ((uint32_t)0x00020000)        /*!< Interrupt Mask on line 17 */
N#define  EXTI_IMR_MR18                       ((uint32_t)0x00040000)        /*!< Interrupt Mask on line 18 */
N#define  EXTI_IMR_MR19                       ((uint32_t)0x00080000)        /*!< Interrupt Mask on line 19 */
N
N/*******************  Bit definition for EXTI_EMR register  *******************/
N#define  EXTI_EMR_MR0                        ((uint32_t)0x00000001)        /*!< Event Mask on line 0 */
N#define  EXTI_EMR_MR1                        ((uint32_t)0x00000002)        /*!< Event Mask on line 1 */
N#define  EXTI_EMR_MR2                        ((uint32_t)0x00000004)        /*!< Event Mask on line 2 */
N#define  EXTI_EMR_MR3                        ((uint32_t)0x00000008)        /*!< Event Mask on line 3 */
N#define  EXTI_EMR_MR4                        ((uint32_t)0x00000010)        /*!< Event Mask on line 4 */
N#define  EXTI_EMR_MR5                        ((uint32_t)0x00000020)        /*!< Event Mask on line 5 */
N#define  EXTI_EMR_MR6                        ((uint32_t)0x00000040)        /*!< Event Mask on line 6 */
N#define  EXTI_EMR_MR7                        ((uint32_t)0x00000080)        /*!< Event Mask on line 7 */
N#define  EXTI_EMR_MR8                        ((uint32_t)0x00000100)        /*!< Event Mask on line 8 */
N#define  EXTI_EMR_MR9                        ((uint32_t)0x00000200)        /*!< Event Mask on line 9 */
N#define  EXTI_EMR_MR10                       ((uint32_t)0x00000400)        /*!< Event Mask on line 10 */
N#define  EXTI_EMR_MR11                       ((uint32_t)0x00000800)        /*!< Event Mask on line 11 */
N#define  EXTI_EMR_MR12                       ((uint32_t)0x00001000)        /*!< Event Mask on line 12 */
N#define  EXTI_EMR_MR13                       ((uint32_t)0x00002000)        /*!< Event Mask on line 13 */
N#define  EXTI_EMR_MR14                       ((uint32_t)0x00004000)        /*!< Event Mask on line 14 */
N#define  EXTI_EMR_MR15                       ((uint32_t)0x00008000)        /*!< Event Mask on line 15 */
N#define  EXTI_EMR_MR16                       ((uint32_t)0x00010000)        /*!< Event Mask on line 16 */
N#define  EXTI_EMR_MR17                       ((uint32_t)0x00020000)        /*!< Event Mask on line 17 */
N#define  EXTI_EMR_MR18                       ((uint32_t)0x00040000)        /*!< Event Mask on line 18 */
N#define  EXTI_EMR_MR19                       ((uint32_t)0x00080000)        /*!< Event Mask on line 19 */
N
N/******************  Bit definition for EXTI_RTSR register  *******************/
N#define  EXTI_RTSR_TR0                       ((uint32_t)0x00000001)        /*!< Rising trigger event configuration bit of line 0 */
N#define  EXTI_RTSR_TR1                       ((uint32_t)0x00000002)        /*!< Rising trigger event configuration bit of line 1 */
N#define  EXTI_RTSR_TR2                       ((uint32_t)0x00000004)        /*!< Rising trigger event configuration bit of line 2 */
N#define  EXTI_RTSR_TR3                       ((uint32_t)0x00000008)        /*!< Rising trigger event configuration bit of line 3 */
N#define  EXTI_RTSR_TR4                       ((uint32_t)0x00000010)        /*!< Rising trigger event configuration bit of line 4 */
N#define  EXTI_RTSR_TR5                       ((uint32_t)0x00000020)        /*!< Rising trigger event configuration bit of line 5 */
N#define  EXTI_RTSR_TR6                       ((uint32_t)0x00000040)        /*!< Rising trigger event configuration bit of line 6 */
N#define  EXTI_RTSR_TR7                       ((uint32_t)0x00000080)        /*!< Rising trigger event configuration bit of line 7 */
N#define  EXTI_RTSR_TR8                       ((uint32_t)0x00000100)        /*!< Rising trigger event configuration bit of line 8 */
N#define  EXTI_RTSR_TR9                       ((uint32_t)0x00000200)        /*!< Rising trigger event configuration bit of line 9 */
N#define  EXTI_RTSR_TR10                      ((uint32_t)0x00000400)        /*!< Rising trigger event configuration bit of line 10 */
N#define  EXTI_RTSR_TR11                      ((uint32_t)0x00000800)        /*!< Rising trigger event configuration bit of line 11 */
N#define  EXTI_RTSR_TR12                      ((uint32_t)0x00001000)        /*!< Rising trigger event configuration bit of line 12 */
N#define  EXTI_RTSR_TR13                      ((uint32_t)0x00002000)        /*!< Rising trigger event configuration bit of line 13 */
N#define  EXTI_RTSR_TR14                      ((uint32_t)0x00004000)        /*!< Rising trigger event configuration bit of line 14 */
N#define  EXTI_RTSR_TR15                      ((uint32_t)0x00008000)        /*!< Rising trigger event configuration bit of line 15 */
N#define  EXTI_RTSR_TR16                      ((uint32_t)0x00010000)        /*!< Rising trigger event configuration bit of line 16 */
N#define  EXTI_RTSR_TR17                      ((uint32_t)0x00020000)        /*!< Rising trigger event configuration bit of line 17 */
N#define  EXTI_RTSR_TR18                      ((uint32_t)0x00040000)        /*!< Rising trigger event configuration bit of line 18 */
N#define  EXTI_RTSR_TR19                      ((uint32_t)0x00080000)        /*!< Rising trigger event configuration bit of line 19 */
N
N/******************  Bit definition for EXTI_FTSR register  *******************/
N#define  EXTI_FTSR_TR0                       ((uint32_t)0x00000001)        /*!< Falling trigger event configuration bit of line 0 */
N#define  EXTI_FTSR_TR1                       ((uint32_t)0x00000002)        /*!< Falling trigger event configuration bit of line 1 */
N#define  EXTI_FTSR_TR2                       ((uint32_t)0x00000004)        /*!< Falling trigger event configuration bit of line 2 */
N#define  EXTI_FTSR_TR3                       ((uint32_t)0x00000008)        /*!< Falling trigger event configuration bit of line 3 */
N#define  EXTI_FTSR_TR4                       ((uint32_t)0x00000010)        /*!< Falling trigger event configuration bit of line 4 */
N#define  EXTI_FTSR_TR5                       ((uint32_t)0x00000020)        /*!< Falling trigger event configuration bit of line 5 */
N#define  EXTI_FTSR_TR6                       ((uint32_t)0x00000040)        /*!< Falling trigger event configuration bit of line 6 */
N#define  EXTI_FTSR_TR7                       ((uint32_t)0x00000080)        /*!< Falling trigger event configuration bit of line 7 */
N#define  EXTI_FTSR_TR8                       ((uint32_t)0x00000100)        /*!< Falling trigger event configuration bit of line 8 */
N#define  EXTI_FTSR_TR9                       ((uint32_t)0x00000200)        /*!< Falling trigger event configuration bit of line 9 */
N#define  EXTI_FTSR_TR10                      ((uint32_t)0x00000400)        /*!< Falling trigger event configuration bit of line 10 */
N#define  EXTI_FTSR_TR11                      ((uint32_t)0x00000800)        /*!< Falling trigger event configuration bit of line 11 */
N#define  EXTI_FTSR_TR12                      ((uint32_t)0x00001000)        /*!< Falling trigger event configuration bit of line 12 */
N#define  EXTI_FTSR_TR13                      ((uint32_t)0x00002000)        /*!< Falling trigger event configuration bit of line 13 */
N#define  EXTI_FTSR_TR14                      ((uint32_t)0x00004000)        /*!< Falling trigger event configuration bit of line 14 */
N#define  EXTI_FTSR_TR15                      ((uint32_t)0x00008000)        /*!< Falling trigger event configuration bit of line 15 */
N#define  EXTI_FTSR_TR16                      ((uint32_t)0x00010000)        /*!< Falling trigger event configuration bit of line 16 */
N#define  EXTI_FTSR_TR17                      ((uint32_t)0x00020000)        /*!< Falling trigger event configuration bit of line 17 */
N#define  EXTI_FTSR_TR18                      ((uint32_t)0x00040000)        /*!< Falling trigger event configuration bit of line 18 */
N#define  EXTI_FTSR_TR19                      ((uint32_t)0x00080000)        /*!< Falling trigger event configuration bit of line 19 */
N
N/******************  Bit definition for EXTI_SWIER register  ******************/
N#define  EXTI_SWIER_SWIER0                   ((uint32_t)0x00000001)        /*!< Software Interrupt on line 0 */
N#define  EXTI_SWIER_SWIER1                   ((uint32_t)0x00000002)        /*!< Software Interrupt on line 1 */
N#define  EXTI_SWIER_SWIER2                   ((uint32_t)0x00000004)        /*!< Software Interrupt on line 2 */
N#define  EXTI_SWIER_SWIER3                   ((uint32_t)0x00000008)        /*!< Software Interrupt on line 3 */
N#define  EXTI_SWIER_SWIER4                   ((uint32_t)0x00000010)        /*!< Software Interrupt on line 4 */
N#define  EXTI_SWIER_SWIER5                   ((uint32_t)0x00000020)        /*!< Software Interrupt on line 5 */
N#define  EXTI_SWIER_SWIER6                   ((uint32_t)0x00000040)        /*!< Software Interrupt on line 6 */
N#define  EXTI_SWIER_SWIER7                   ((uint32_t)0x00000080)        /*!< Software Interrupt on line 7 */
N#define  EXTI_SWIER_SWIER8                   ((uint32_t)0x00000100)        /*!< Software Interrupt on line 8 */
N#define  EXTI_SWIER_SWIER9                   ((uint32_t)0x00000200)        /*!< Software Interrupt on line 9 */
N#define  EXTI_SWIER_SWIER10                  ((uint32_t)0x00000400)        /*!< Software Interrupt on line 10 */
N#define  EXTI_SWIER_SWIER11                  ((uint32_t)0x00000800)        /*!< Software Interrupt on line 11 */
N#define  EXTI_SWIER_SWIER12                  ((uint32_t)0x00001000)        /*!< Software Interrupt on line 12 */
N#define  EXTI_SWIER_SWIER13                  ((uint32_t)0x00002000)        /*!< Software Interrupt on line 13 */
N#define  EXTI_SWIER_SWIER14                  ((uint32_t)0x00004000)        /*!< Software Interrupt on line 14 */
N#define  EXTI_SWIER_SWIER15                  ((uint32_t)0x00008000)        /*!< Software Interrupt on line 15 */
N#define  EXTI_SWIER_SWIER16                  ((uint32_t)0x00010000)        /*!< Software Interrupt on line 16 */
N#define  EXTI_SWIER_SWIER17                  ((uint32_t)0x00020000)        /*!< Software Interrupt on line 17 */
N#define  EXTI_SWIER_SWIER18                  ((uint32_t)0x00040000)        /*!< Software Interrupt on line 18 */
N#define  EXTI_SWIER_SWIER19                  ((uint32_t)0x00080000)        /*!< Software Interrupt on line 19 */
N
N/*******************  Bit definition for EXTI_PR register  ********************/
N#define  EXTI_PR_PR0                         ((uint32_t)0x00000001)        /*!< Pending bit for line 0 */
N#define  EXTI_PR_PR1                         ((uint32_t)0x00000002)        /*!< Pending bit for line 1 */
N#define  EXTI_PR_PR2                         ((uint32_t)0x00000004)        /*!< Pending bit for line 2 */
N#define  EXTI_PR_PR3                         ((uint32_t)0x00000008)        /*!< Pending bit for line 3 */
N#define  EXTI_PR_PR4                         ((uint32_t)0x00000010)        /*!< Pending bit for line 4 */
N#define  EXTI_PR_PR5                         ((uint32_t)0x00000020)        /*!< Pending bit for line 5 */
N#define  EXTI_PR_PR6                         ((uint32_t)0x00000040)        /*!< Pending bit for line 6 */
N#define  EXTI_PR_PR7                         ((uint32_t)0x00000080)        /*!< Pending bit for line 7 */
N#define  EXTI_PR_PR8                         ((uint32_t)0x00000100)        /*!< Pending bit for line 8 */
N#define  EXTI_PR_PR9                         ((uint32_t)0x00000200)        /*!< Pending bit for line 9 */
N#define  EXTI_PR_PR10                        ((uint32_t)0x00000400)        /*!< Pending bit for line 10 */
N#define  EXTI_PR_PR11                        ((uint32_t)0x00000800)        /*!< Pending bit for line 11 */
N#define  EXTI_PR_PR12                        ((uint32_t)0x00001000)        /*!< Pending bit for line 12 */
N#define  EXTI_PR_PR13                        ((uint32_t)0x00002000)        /*!< Pending bit for line 13 */
N#define  EXTI_PR_PR14                        ((uint32_t)0x00004000)        /*!< Pending bit for line 14 */
N#define  EXTI_PR_PR15                        ((uint32_t)0x00008000)        /*!< Pending bit for line 15 */
N#define  EXTI_PR_PR16                        ((uint32_t)0x00010000)        /*!< Pending bit for line 16 */
N#define  EXTI_PR_PR17                        ((uint32_t)0x00020000)        /*!< Pending bit for line 17 */
N#define  EXTI_PR_PR18                        ((uint32_t)0x00040000)        /*!< Pending bit for line 18 */
N#define  EXTI_PR_PR19                        ((uint32_t)0x00080000)        /*!< Pending bit for line 19 */
N
N/******************************************************************************/
N/*                                                                            */
N/*                                    FLASH                                   */
N/*                                                                            */
N/******************************************************************************/
N/*******************  Bits definition for FLASH_ACR register  *****************/
N#define FLASH_ACR_LATENCY                    ((uint32_t)0x0000000F)
N#define FLASH_ACR_LATENCY_0WS                ((uint32_t)0x00000000)
N#define FLASH_ACR_LATENCY_1WS                ((uint32_t)0x00000001)
N#define FLASH_ACR_LATENCY_2WS                ((uint32_t)0x00000002)
N#define FLASH_ACR_LATENCY_3WS                ((uint32_t)0x00000003)
N#define FLASH_ACR_LATENCY_4WS                ((uint32_t)0x00000004)
N#define FLASH_ACR_LATENCY_5WS                ((uint32_t)0x00000005)
N#define FLASH_ACR_LATENCY_6WS                ((uint32_t)0x00000006)
N#define FLASH_ACR_LATENCY_7WS                ((uint32_t)0x00000007)
N#define FLASH_ACR_LATENCY_8WS                ((uint32_t)0x00000008)
N#define FLASH_ACR_LATENCY_9WS                ((uint32_t)0x00000009)
N#define FLASH_ACR_LATENCY_10WS               ((uint32_t)0x0000000A)
N#define FLASH_ACR_LATENCY_11WS               ((uint32_t)0x0000000B)
N#define FLASH_ACR_LATENCY_12WS               ((uint32_t)0x0000000C)
N#define FLASH_ACR_LATENCY_13WS               ((uint32_t)0x0000000D)
N#define FLASH_ACR_LATENCY_14WS               ((uint32_t)0x0000000E)
N#define FLASH_ACR_LATENCY_15WS               ((uint32_t)0x0000000F)
N
N#define FLASH_ACR_PRFTEN                     ((uint32_t)0x00000100)
N#define FLASH_ACR_ICEN                       ((uint32_t)0x00000200)
N#define FLASH_ACR_DCEN                       ((uint32_t)0x00000400)
N#define FLASH_ACR_ICRST                      ((uint32_t)0x00000800)
N#define FLASH_ACR_DCRST                      ((uint32_t)0x00001000)
N#define FLASH_ACR_BYTE0_ADDRESS              ((uint32_t)0x40023C00)
N#define FLASH_ACR_BYTE2_ADDRESS              ((uint32_t)0x40023C03)
N
N/*******************  Bits definition for FLASH_SR register  ******************/
N#define FLASH_SR_EOP                         ((uint32_t)0x00000001)
N#define FLASH_SR_SOP                         ((uint32_t)0x00000002)
N#define FLASH_SR_WRPERR                      ((uint32_t)0x00000010)
N#define FLASH_SR_PGAERR                      ((uint32_t)0x00000020)
N#define FLASH_SR_PGPERR                      ((uint32_t)0x00000040)
N#define FLASH_SR_PGSERR                      ((uint32_t)0x00000080)
N#define FLASH_SR_BSY                         ((uint32_t)0x00010000)
N
N/*******************  Bits definition for FLASH_CR register  ******************/
N#define FLASH_CR_PG                          ((uint32_t)0x00000001)
N#define FLASH_CR_SER                         ((uint32_t)0x00000002)
N#define FLASH_CR_MER                         ((uint32_t)0x00000004)
N#define FLASH_CR_MER1                        FLASH_CR_MER
N#define FLASH_CR_SNB                         ((uint32_t)0x000000F8)
N#define FLASH_CR_SNB_0                       ((uint32_t)0x00000008)
N#define FLASH_CR_SNB_1                       ((uint32_t)0x00000010)
N#define FLASH_CR_SNB_2                       ((uint32_t)0x00000020)
N#define FLASH_CR_SNB_3                       ((uint32_t)0x00000040)
N#define FLASH_CR_SNB_4                       ((uint32_t)0x00000040)
N#define FLASH_CR_PSIZE                       ((uint32_t)0x00000300)
N#define FLASH_CR_PSIZE_0                     ((uint32_t)0x00000100)
N#define FLASH_CR_PSIZE_1                     ((uint32_t)0x00000200)
N#define FLASH_CR_MER2                        ((uint32_t)0x00008000)
N#define FLASH_CR_STRT                        ((uint32_t)0x00010000)
N#define FLASH_CR_EOPIE                       ((uint32_t)0x01000000)
N#define FLASH_CR_LOCK                        ((uint32_t)0x80000000)
N
N/*******************  Bits definition for FLASH_OPTCR register  ***************/
N#define FLASH_OPTCR_OPTLOCK                 ((uint32_t)0x00000001)
N#define FLASH_OPTCR_OPTSTRT                 ((uint32_t)0x00000002)
N#define FLASH_OPTCR_BOR_LEV_0               ((uint32_t)0x00000004)
N#define FLASH_OPTCR_BOR_LEV_1               ((uint32_t)0x00000008)
N#define FLASH_OPTCR_BOR_LEV                 ((uint32_t)0x0000000C)
N#define FLASH_OPTCR_BFB2                    ((uint32_t)0x00000010)
N
N#define FLASH_OPTCR_WDG_SW                  ((uint32_t)0x00000020)
N#define FLASH_OPTCR_nRST_STOP               ((uint32_t)0x00000040)
N#define FLASH_OPTCR_nRST_STDBY              ((uint32_t)0x00000080)
N#define FLASH_OPTCR_RDP                     ((uint32_t)0x0000FF00)
N#define FLASH_OPTCR_RDP_0                   ((uint32_t)0x00000100)
N#define FLASH_OPTCR_RDP_1                   ((uint32_t)0x00000200)
N#define FLASH_OPTCR_RDP_2                   ((uint32_t)0x00000400)
N#define FLASH_OPTCR_RDP_3                   ((uint32_t)0x00000800)
N#define FLASH_OPTCR_RDP_4                   ((uint32_t)0x00001000)
N#define FLASH_OPTCR_RDP_5                   ((uint32_t)0x00002000)
N#define FLASH_OPTCR_RDP_6                   ((uint32_t)0x00004000)
N#define FLASH_OPTCR_RDP_7                   ((uint32_t)0x00008000)
N#define FLASH_OPTCR_nWRP                    ((uint32_t)0x0FFF0000)
N#define FLASH_OPTCR_nWRP_0                  ((uint32_t)0x00010000)
N#define FLASH_OPTCR_nWRP_1                  ((uint32_t)0x00020000)
N#define FLASH_OPTCR_nWRP_2                  ((uint32_t)0x00040000)
N#define FLASH_OPTCR_nWRP_3                  ((uint32_t)0x00080000)
N#define FLASH_OPTCR_nWRP_4                  ((uint32_t)0x00100000)
N#define FLASH_OPTCR_nWRP_5                  ((uint32_t)0x00200000)
N#define FLASH_OPTCR_nWRP_6                  ((uint32_t)0x00400000)
N#define FLASH_OPTCR_nWRP_7                  ((uint32_t)0x00800000)
N#define FLASH_OPTCR_nWRP_8                  ((uint32_t)0x01000000)
N#define FLASH_OPTCR_nWRP_9                  ((uint32_t)0x02000000)
N#define FLASH_OPTCR_nWRP_10                 ((uint32_t)0x04000000)
N#define FLASH_OPTCR_nWRP_11                 ((uint32_t)0x08000000)
N
N#define FLASH_OPTCR_DB1M                    ((uint32_t)0x40000000) 
N#define FLASH_OPTCR_SPRMOD                  ((uint32_t)0x80000000) 
N                                             
N/******************  Bits definition for FLASH_OPTCR1 register  ***************/
N#define FLASH_OPTCR1_nWRP                    ((uint32_t)0x0FFF0000)
N#define FLASH_OPTCR1_nWRP_0                  ((uint32_t)0x00010000)
N#define FLASH_OPTCR1_nWRP_1                  ((uint32_t)0x00020000)
N#define FLASH_OPTCR1_nWRP_2                  ((uint32_t)0x00040000)
N#define FLASH_OPTCR1_nWRP_3                  ((uint32_t)0x00080000)
N#define FLASH_OPTCR1_nWRP_4                  ((uint32_t)0x00100000)
N#define FLASH_OPTCR1_nWRP_5                  ((uint32_t)0x00200000)
N#define FLASH_OPTCR1_nWRP_6                  ((uint32_t)0x00400000)
N#define FLASH_OPTCR1_nWRP_7                  ((uint32_t)0x00800000)
N#define FLASH_OPTCR1_nWRP_8                  ((uint32_t)0x01000000)
N#define FLASH_OPTCR1_nWRP_9                  ((uint32_t)0x02000000)
N#define FLASH_OPTCR1_nWRP_10                 ((uint32_t)0x04000000)
N#define FLASH_OPTCR1_nWRP_11                 ((uint32_t)0x08000000)
N
N#if defined (STM32F40_41xxx)
X#if 1L
N/******************************************************************************/
N/*                                                                            */
N/*                       Flexible Static Memory Controller                    */
N/*                                                                            */
N/******************************************************************************/
N/******************  Bit definition for FSMC_BCR1 register  *******************/
N#define  FSMC_BCR1_MBKEN                     ((uint32_t)0x00000001)        /*!<Memory bank enable bit                 */
N#define  FSMC_BCR1_MUXEN                     ((uint32_t)0x00000002)        /*!<Address/data multiplexing enable bit   */
N
N#define  FSMC_BCR1_MTYP                      ((uint32_t)0x0000000C)        /*!<MTYP[1:0] bits (Memory type)           */
N#define  FSMC_BCR1_MTYP_0                    ((uint32_t)0x00000004)        /*!<Bit 0 */
N#define  FSMC_BCR1_MTYP_1                    ((uint32_t)0x00000008)        /*!<Bit 1 */
N
N#define  FSMC_BCR1_MWID                      ((uint32_t)0x00000030)        /*!<MWID[1:0] bits (Memory data bus width) */
N#define  FSMC_BCR1_MWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
N#define  FSMC_BCR1_MWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
N
N#define  FSMC_BCR1_FACCEN                    ((uint32_t)0x00000040)        /*!<Flash access enable                    */
N#define  FSMC_BCR1_BURSTEN                   ((uint32_t)0x00000100)        /*!<Burst enable bit                       */
N#define  FSMC_BCR1_WAITPOL                   ((uint32_t)0x00000200)        /*!<Wait signal polarity bit               */
N#define  FSMC_BCR1_WRAPMOD                   ((uint32_t)0x00000400)        /*!<Wrapped burst mode support             */
N#define  FSMC_BCR1_WAITCFG                   ((uint32_t)0x00000800)        /*!<Wait timing configuration              */
N#define  FSMC_BCR1_WREN                      ((uint32_t)0x00001000)        /*!<Write enable bit                       */
N#define  FSMC_BCR1_WAITEN                    ((uint32_t)0x00002000)        /*!<Wait enable bit                        */
N#define  FSMC_BCR1_EXTMOD                    ((uint32_t)0x00004000)        /*!<Extended mode enable                   */
N#define  FSMC_BCR1_ASYNCWAIT                 ((uint32_t)0x00008000)        /*!<Asynchronous wait                      */
N#define  FSMC_BCR1_CBURSTRW                  ((uint32_t)0x00080000)        /*!<Write burst enable                     */
N
N/******************  Bit definition for FSMC_BCR2 register  *******************/
N#define  FSMC_BCR2_MBKEN                     ((uint32_t)0x00000001)        /*!<Memory bank enable bit                */
N#define  FSMC_BCR2_MUXEN                     ((uint32_t)0x00000002)        /*!<Address/data multiplexing enable bit   */
N
N#define  FSMC_BCR2_MTYP                      ((uint32_t)0x0000000C)        /*!<MTYP[1:0] bits (Memory type)           */
N#define  FSMC_BCR2_MTYP_0                    ((uint32_t)0x00000004)        /*!<Bit 0 */
N#define  FSMC_BCR2_MTYP_1                    ((uint32_t)0x00000008)        /*!<Bit 1 */
N
N#define  FSMC_BCR2_MWID                      ((uint32_t)0x00000030)        /*!<MWID[1:0] bits (Memory data bus width) */
N#define  FSMC_BCR2_MWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
N#define  FSMC_BCR2_MWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
N
N#define  FSMC_BCR2_FACCEN                    ((uint32_t)0x00000040)        /*!<Flash access enable                    */
N#define  FSMC_BCR2_BURSTEN                   ((uint32_t)0x00000100)        /*!<Burst enable bit                       */
N#define  FSMC_BCR2_WAITPOL                   ((uint32_t)0x00000200)        /*!<Wait signal polarity bit               */
N#define  FSMC_BCR2_WRAPMOD                   ((uint32_t)0x00000400)        /*!<Wrapped burst mode support             */
N#define  FSMC_BCR2_WAITCFG                   ((uint32_t)0x00000800)        /*!<Wait timing configuration              */
N#define  FSMC_BCR2_WREN                      ((uint32_t)0x00001000)        /*!<Write enable bit                       */
N#define  FSMC_BCR2_WAITEN                    ((uint32_t)0x00002000)        /*!<Wait enable bit                        */
N#define  FSMC_BCR2_EXTMOD                    ((uint32_t)0x00004000)        /*!<Extended mode enable                   */
N#define  FSMC_BCR2_ASYNCWAIT                 ((uint32_t)0x00008000)        /*!<Asynchronous wait                      */
N#define  FSMC_BCR2_CBURSTRW                  ((uint32_t)0x00080000)        /*!<Write burst enable                     */
N
N/******************  Bit definition for FSMC_BCR3 register  *******************/
N#define  FSMC_BCR3_MBKEN                     ((uint32_t)0x00000001)        /*!<Memory bank enable bit                 */
N#define  FSMC_BCR3_MUXEN                     ((uint32_t)0x00000002)        /*!<Address/data multiplexing enable bit   */
N
N#define  FSMC_BCR3_MTYP                      ((uint32_t)0x0000000C)        /*!<MTYP[1:0] bits (Memory type)           */
N#define  FSMC_BCR3_MTYP_0                    ((uint32_t)0x00000004)        /*!<Bit 0 */
N#define  FSMC_BCR3_MTYP_1                    ((uint32_t)0x00000008)        /*!<Bit 1 */
N
N#define  FSMC_BCR3_MWID                      ((uint32_t)0x00000030)        /*!<MWID[1:0] bits (Memory data bus width) */
N#define  FSMC_BCR3_MWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
N#define  FSMC_BCR3_MWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
N
N#define  FSMC_BCR3_FACCEN                    ((uint32_t)0x00000040)        /*!<Flash access enable                    */
N#define  FSMC_BCR3_BURSTEN                   ((uint32_t)0x00000100)        /*!<Burst enable bit                       */
N#define  FSMC_BCR3_WAITPOL                   ((uint32_t)0x00000200)        /*!<Wait signal polarity bit               */
N#define  FSMC_BCR3_WRAPMOD                   ((uint32_t)0x00000400)        /*!<Wrapped burst mode support             */
N#define  FSMC_BCR3_WAITCFG                   ((uint32_t)0x00000800)        /*!<Wait timing configuration              */
N#define  FSMC_BCR3_WREN                      ((uint32_t)0x00001000)        /*!<Write enable bit                       */
N#define  FSMC_BCR3_WAITEN                    ((uint32_t)0x00002000)        /*!<Wait enable bit                        */
N#define  FSMC_BCR3_EXTMOD                    ((uint32_t)0x00004000)        /*!<Extended mode enable                   */
N#define  FSMC_BCR3_ASYNCWAIT                 ((uint32_t)0x00008000)        /*!<Asynchronous wait                      */
N#define  FSMC_BCR3_CBURSTRW                  ((uint32_t)0x00080000)        /*!<Write burst enable                     */
N
N/******************  Bit definition for FSMC_BCR4 register  *******************/
N#define  FSMC_BCR4_MBKEN                     ((uint32_t)0x00000001)        /*!<Memory bank enable bit */
N#define  FSMC_BCR4_MUXEN                     ((uint32_t)0x00000002)        /*!<Address/data multiplexing enable bit   */
N
N#define  FSMC_BCR4_MTYP                      ((uint32_t)0x0000000C)        /*!<MTYP[1:0] bits (Memory type)           */
N#define  FSMC_BCR4_MTYP_0                    ((uint32_t)0x00000004)        /*!<Bit 0 */
N#define  FSMC_BCR4_MTYP_1                    ((uint32_t)0x00000008)        /*!<Bit 1 */
N
N#define  FSMC_BCR4_MWID                      ((uint32_t)0x00000030)        /*!<MWID[1:0] bits (Memory data bus width) */
N#define  FSMC_BCR4_MWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
N#define  FSMC_BCR4_MWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
N
N#define  FSMC_BCR4_FACCEN                    ((uint32_t)0x00000040)        /*!<Flash access enable                    */
N#define  FSMC_BCR4_BURSTEN                   ((uint32_t)0x00000100)        /*!<Burst enable bit                       */
N#define  FSMC_BCR4_WAITPOL                   ((uint32_t)0x00000200)        /*!<Wait signal polarity bit               */
N#define  FSMC_BCR4_WRAPMOD                   ((uint32_t)0x00000400)        /*!<Wrapped burst mode support             */
N#define  FSMC_BCR4_WAITCFG                   ((uint32_t)0x00000800)        /*!<Wait timing configuration              */
N#define  FSMC_BCR4_WREN                      ((uint32_t)0x00001000)        /*!<Write enable bit                       */
N#define  FSMC_BCR4_WAITEN                    ((uint32_t)0x00002000)        /*!<Wait enable bit                        */
N#define  FSMC_BCR4_EXTMOD                    ((uint32_t)0x00004000)        /*!<Extended mode enable                   */
N#define  FSMC_BCR4_ASYNCWAIT                 ((uint32_t)0x00008000)        /*!<Asynchronous wait                      */
N#define  FSMC_BCR4_CBURSTRW                  ((uint32_t)0x00080000)        /*!<Write burst enable                     */
N
N/******************  Bit definition for FSMC_BTR1 register  ******************/
N#define  FSMC_BTR1_ADDSET                    ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
N#define  FSMC_BTR1_ADDSET_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  FSMC_BTR1_ADDSET_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  FSMC_BTR1_ADDSET_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  FSMC_BTR1_ADDSET_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
N
N#define  FSMC_BTR1_ADDHLD                    ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
N#define  FSMC_BTR1_ADDHLD_0                  ((uint32_t)0x00000010)        /*!<Bit 0 */
N#define  FSMC_BTR1_ADDHLD_1                  ((uint32_t)0x00000020)        /*!<Bit 1 */
N#define  FSMC_BTR1_ADDHLD_2                  ((uint32_t)0x00000040)        /*!<Bit 2 */
N#define  FSMC_BTR1_ADDHLD_3                  ((uint32_t)0x00000080)        /*!<Bit 3 */
N
N#define  FSMC_BTR1_DATAST                    ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
N#define  FSMC_BTR1_DATAST_0                  ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  FSMC_BTR1_DATAST_1                  ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  FSMC_BTR1_DATAST_2                  ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  FSMC_BTR1_DATAST_3                  ((uint32_t)0x00000800)        /*!<Bit 3 */
N
N#define  FSMC_BTR1_BUSTURN                   ((uint32_t)0x000F0000)        /*!<BUSTURN[3:0] bits (Bus turnaround phase duration) */
N#define  FSMC_BTR1_BUSTURN_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
N#define  FSMC_BTR1_BUSTURN_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
N#define  FSMC_BTR1_BUSTURN_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
N#define  FSMC_BTR1_BUSTURN_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
N
N#define  FSMC_BTR1_CLKDIV                    ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
N#define  FSMC_BTR1_CLKDIV_0                  ((uint32_t)0x00100000)        /*!<Bit 0 */
N#define  FSMC_BTR1_CLKDIV_1                  ((uint32_t)0x00200000)        /*!<Bit 1 */
N#define  FSMC_BTR1_CLKDIV_2                  ((uint32_t)0x00400000)        /*!<Bit 2 */
N#define  FSMC_BTR1_CLKDIV_3                  ((uint32_t)0x00800000)        /*!<Bit 3 */
N
N#define  FSMC_BTR1_DATLAT                    ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
N#define  FSMC_BTR1_DATLAT_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  FSMC_BTR1_DATLAT_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  FSMC_BTR1_DATLAT_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
N#define  FSMC_BTR1_DATLAT_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
N
N#define  FSMC_BTR1_ACCMOD                    ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
N#define  FSMC_BTR1_ACCMOD_0                  ((uint32_t)0x10000000)        /*!<Bit 0 */
N#define  FSMC_BTR1_ACCMOD_1                  ((uint32_t)0x20000000)        /*!<Bit 1 */
N
N/******************  Bit definition for FSMC_BTR2 register  *******************/
N#define  FSMC_BTR2_ADDSET                    ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
N#define  FSMC_BTR2_ADDSET_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  FSMC_BTR2_ADDSET_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  FSMC_BTR2_ADDSET_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  FSMC_BTR2_ADDSET_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
N
N#define  FSMC_BTR2_ADDHLD                    ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
N#define  FSMC_BTR2_ADDHLD_0                  ((uint32_t)0x00000010)        /*!<Bit 0 */
N#define  FSMC_BTR2_ADDHLD_1                  ((uint32_t)0x00000020)        /*!<Bit 1 */
N#define  FSMC_BTR2_ADDHLD_2                  ((uint32_t)0x00000040)        /*!<Bit 2 */
N#define  FSMC_BTR2_ADDHLD_3                  ((uint32_t)0x00000080)        /*!<Bit 3 */
N
N#define  FSMC_BTR2_DATAST                    ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
N#define  FSMC_BTR2_DATAST_0                  ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  FSMC_BTR2_DATAST_1                  ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  FSMC_BTR2_DATAST_2                  ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  FSMC_BTR2_DATAST_3                  ((uint32_t)0x00000800)        /*!<Bit 3 */
N
N#define  FSMC_BTR2_BUSTURN                   ((uint32_t)0x000F0000)        /*!<BUSTURN[3:0] bits (Bus turnaround phase duration) */
N#define  FSMC_BTR2_BUSTURN_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
N#define  FSMC_BTR2_BUSTURN_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
N#define  FSMC_BTR2_BUSTURN_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
N#define  FSMC_BTR2_BUSTURN_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
N
N#define  FSMC_BTR2_CLKDIV                    ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
N#define  FSMC_BTR2_CLKDIV_0                  ((uint32_t)0x00100000)        /*!<Bit 0 */
N#define  FSMC_BTR2_CLKDIV_1                  ((uint32_t)0x00200000)        /*!<Bit 1 */
N#define  FSMC_BTR2_CLKDIV_2                  ((uint32_t)0x00400000)        /*!<Bit 2 */
N#define  FSMC_BTR2_CLKDIV_3                  ((uint32_t)0x00800000)        /*!<Bit 3 */
N
N#define  FSMC_BTR2_DATLAT                    ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
N#define  FSMC_BTR2_DATLAT_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  FSMC_BTR2_DATLAT_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  FSMC_BTR2_DATLAT_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
N#define  FSMC_BTR2_DATLAT_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
N
N#define  FSMC_BTR2_ACCMOD                    ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
N#define  FSMC_BTR2_ACCMOD_0                  ((uint32_t)0x10000000)        /*!<Bit 0 */
N#define  FSMC_BTR2_ACCMOD_1                  ((uint32_t)0x20000000)        /*!<Bit 1 */
N
N/*******************  Bit definition for FSMC_BTR3 register  *******************/
N#define  FSMC_BTR3_ADDSET                    ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
N#define  FSMC_BTR3_ADDSET_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  FSMC_BTR3_ADDSET_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  FSMC_BTR3_ADDSET_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  FSMC_BTR3_ADDSET_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
N
N#define  FSMC_BTR3_ADDHLD                    ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
N#define  FSMC_BTR3_ADDHLD_0                  ((uint32_t)0x00000010)        /*!<Bit 0 */
N#define  FSMC_BTR3_ADDHLD_1                  ((uint32_t)0x00000020)        /*!<Bit 1 */
N#define  FSMC_BTR3_ADDHLD_2                  ((uint32_t)0x00000040)        /*!<Bit 2 */
N#define  FSMC_BTR3_ADDHLD_3                  ((uint32_t)0x00000080)        /*!<Bit 3 */
N
N#define  FSMC_BTR3_DATAST                    ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
N#define  FSMC_BTR3_DATAST_0                  ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  FSMC_BTR3_DATAST_1                  ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  FSMC_BTR3_DATAST_2                  ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  FSMC_BTR3_DATAST_3                  ((uint32_t)0x00000800)        /*!<Bit 3 */
N
N#define  FSMC_BTR3_BUSTURN                   ((uint32_t)0x000F0000)        /*!<BUSTURN[3:0] bits (Bus turnaround phase duration) */
N#define  FSMC_BTR3_BUSTURN_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
N#define  FSMC_BTR3_BUSTURN_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
N#define  FSMC_BTR3_BUSTURN_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
N#define  FSMC_BTR3_BUSTURN_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
N
N#define  FSMC_BTR3_CLKDIV                    ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
N#define  FSMC_BTR3_CLKDIV_0                  ((uint32_t)0x00100000)        /*!<Bit 0 */
N#define  FSMC_BTR3_CLKDIV_1                  ((uint32_t)0x00200000)        /*!<Bit 1 */
N#define  FSMC_BTR3_CLKDIV_2                  ((uint32_t)0x00400000)        /*!<Bit 2 */
N#define  FSMC_BTR3_CLKDIV_3                  ((uint32_t)0x00800000)        /*!<Bit 3 */
N
N#define  FSMC_BTR3_DATLAT                    ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
N#define  FSMC_BTR3_DATLAT_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  FSMC_BTR3_DATLAT_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  FSMC_BTR3_DATLAT_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
N#define  FSMC_BTR3_DATLAT_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
N
N#define  FSMC_BTR3_ACCMOD                    ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
N#define  FSMC_BTR3_ACCMOD_0                  ((uint32_t)0x10000000)        /*!<Bit 0 */
N#define  FSMC_BTR3_ACCMOD_1                  ((uint32_t)0x20000000)        /*!<Bit 1 */
N
N/******************  Bit definition for FSMC_BTR4 register  *******************/
N#define  FSMC_BTR4_ADDSET                    ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
N#define  FSMC_BTR4_ADDSET_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  FSMC_BTR4_ADDSET_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  FSMC_BTR4_ADDSET_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  FSMC_BTR4_ADDSET_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
N
N#define  FSMC_BTR4_ADDHLD                    ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
N#define  FSMC_BTR4_ADDHLD_0                  ((uint32_t)0x00000010)        /*!<Bit 0 */
N#define  FSMC_BTR4_ADDHLD_1                  ((uint32_t)0x00000020)        /*!<Bit 1 */
N#define  FSMC_BTR4_ADDHLD_2                  ((uint32_t)0x00000040)        /*!<Bit 2 */
N#define  FSMC_BTR4_ADDHLD_3                  ((uint32_t)0x00000080)        /*!<Bit 3 */
N
N#define  FSMC_BTR4_DATAST                    ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
N#define  FSMC_BTR4_DATAST_0                  ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  FSMC_BTR4_DATAST_1                  ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  FSMC_BTR4_DATAST_2                  ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  FSMC_BTR4_DATAST_3                  ((uint32_t)0x00000800)        /*!<Bit 3 */
N
N#define  FSMC_BTR4_BUSTURN                   ((uint32_t)0x000F0000)        /*!<BUSTURN[3:0] bits (Bus turnaround phase duration) */
N#define  FSMC_BTR4_BUSTURN_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
N#define  FSMC_BTR4_BUSTURN_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
N#define  FSMC_BTR4_BUSTURN_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
N#define  FSMC_BTR4_BUSTURN_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
N
N#define  FSMC_BTR4_CLKDIV                    ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
N#define  FSMC_BTR4_CLKDIV_0                  ((uint32_t)0x00100000)        /*!<Bit 0 */
N#define  FSMC_BTR4_CLKDIV_1                  ((uint32_t)0x00200000)        /*!<Bit 1 */
N#define  FSMC_BTR4_CLKDIV_2                  ((uint32_t)0x00400000)        /*!<Bit 2 */
N#define  FSMC_BTR4_CLKDIV_3                  ((uint32_t)0x00800000)        /*!<Bit 3 */
N
N#define  FSMC_BTR4_DATLAT                    ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
N#define  FSMC_BTR4_DATLAT_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  FSMC_BTR4_DATLAT_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  FSMC_BTR4_DATLAT_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
N#define  FSMC_BTR4_DATLAT_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
N
N#define  FSMC_BTR4_ACCMOD                    ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
N#define  FSMC_BTR4_ACCMOD_0                  ((uint32_t)0x10000000)        /*!<Bit 0 */
N#define  FSMC_BTR4_ACCMOD_1                  ((uint32_t)0x20000000)        /*!<Bit 1 */
N
N/******************  Bit definition for FSMC_BWTR1 register  ******************/
N#define  FSMC_BWTR1_ADDSET                   ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
N#define  FSMC_BWTR1_ADDSET_0                 ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  FSMC_BWTR1_ADDSET_1                 ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  FSMC_BWTR1_ADDSET_2                 ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  FSMC_BWTR1_ADDSET_3                 ((uint32_t)0x00000008)        /*!<Bit 3 */
N
N#define  FSMC_BWTR1_ADDHLD                   ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
N#define  FSMC_BWTR1_ADDHLD_0                 ((uint32_t)0x00000010)        /*!<Bit 0 */
N#define  FSMC_BWTR1_ADDHLD_1                 ((uint32_t)0x00000020)        /*!<Bit 1 */
N#define  FSMC_BWTR1_ADDHLD_2                 ((uint32_t)0x00000040)        /*!<Bit 2 */
N#define  FSMC_BWTR1_ADDHLD_3                 ((uint32_t)0x00000080)        /*!<Bit 3 */
N
N#define  FSMC_BWTR1_DATAST                   ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
N#define  FSMC_BWTR1_DATAST_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  FSMC_BWTR1_DATAST_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  FSMC_BWTR1_DATAST_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  FSMC_BWTR1_DATAST_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
N
N#define  FSMC_BWTR1_CLKDIV                   ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
N#define  FSMC_BWTR1_CLKDIV_0                 ((uint32_t)0x00100000)        /*!<Bit 0 */
N#define  FSMC_BWTR1_CLKDIV_1                 ((uint32_t)0x00200000)        /*!<Bit 1 */
N#define  FSMC_BWTR1_CLKDIV_2                 ((uint32_t)0x00400000)        /*!<Bit 2 */
N#define  FSMC_BWTR1_CLKDIV_3                 ((uint32_t)0x00800000)        /*!<Bit 3 */
N
N#define  FSMC_BWTR1_DATLAT                   ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
N#define  FSMC_BWTR1_DATLAT_0                 ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  FSMC_BWTR1_DATLAT_1                 ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  FSMC_BWTR1_DATLAT_2                 ((uint32_t)0x04000000)        /*!<Bit 2 */
N#define  FSMC_BWTR1_DATLAT_3                 ((uint32_t)0x08000000)        /*!<Bit 3 */
N
N#define  FSMC_BWTR1_ACCMOD                   ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
N#define  FSMC_BWTR1_ACCMOD_0                 ((uint32_t)0x10000000)        /*!<Bit 0 */
N#define  FSMC_BWTR1_ACCMOD_1                 ((uint32_t)0x20000000)        /*!<Bit 1 */
N
N/******************  Bit definition for FSMC_BWTR2 register  ******************/
N#define  FSMC_BWTR2_ADDSET                   ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
N#define  FSMC_BWTR2_ADDSET_0                 ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  FSMC_BWTR2_ADDSET_1                 ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  FSMC_BWTR2_ADDSET_2                 ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  FSMC_BWTR2_ADDSET_3                 ((uint32_t)0x00000008)        /*!<Bit 3 */
N
N#define  FSMC_BWTR2_ADDHLD                   ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
N#define  FSMC_BWTR2_ADDHLD_0                 ((uint32_t)0x00000010)        /*!<Bit 0 */
N#define  FSMC_BWTR2_ADDHLD_1                 ((uint32_t)0x00000020)        /*!<Bit 1 */
N#define  FSMC_BWTR2_ADDHLD_2                 ((uint32_t)0x00000040)        /*!<Bit 2 */
N#define  FSMC_BWTR2_ADDHLD_3                 ((uint32_t)0x00000080)        /*!<Bit 3 */
N
N#define  FSMC_BWTR2_DATAST                   ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
N#define  FSMC_BWTR2_DATAST_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  FSMC_BWTR2_DATAST_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  FSMC_BWTR2_DATAST_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  FSMC_BWTR2_DATAST_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
N
N#define  FSMC_BWTR2_CLKDIV                   ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
N#define  FSMC_BWTR2_CLKDIV_0                 ((uint32_t)0x00100000)        /*!<Bit 0 */
N#define  FSMC_BWTR2_CLKDIV_1                 ((uint32_t)0x00200000)        /*!<Bit 1*/
N#define  FSMC_BWTR2_CLKDIV_2                 ((uint32_t)0x00400000)        /*!<Bit 2 */
N#define  FSMC_BWTR2_CLKDIV_3                 ((uint32_t)0x00800000)        /*!<Bit 3 */
N
N#define  FSMC_BWTR2_DATLAT                   ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
N#define  FSMC_BWTR2_DATLAT_0                 ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  FSMC_BWTR2_DATLAT_1                 ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  FSMC_BWTR2_DATLAT_2                 ((uint32_t)0x04000000)        /*!<Bit 2 */
N#define  FSMC_BWTR2_DATLAT_3                 ((uint32_t)0x08000000)        /*!<Bit 3 */
N
N#define  FSMC_BWTR2_ACCMOD                   ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
N#define  FSMC_BWTR2_ACCMOD_0                 ((uint32_t)0x10000000)        /*!<Bit 0 */
N#define  FSMC_BWTR2_ACCMOD_1                 ((uint32_t)0x20000000)        /*!<Bit 1 */
N
N/******************  Bit definition for FSMC_BWTR3 register  ******************/
N#define  FSMC_BWTR3_ADDSET                   ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
N#define  FSMC_BWTR3_ADDSET_0                 ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  FSMC_BWTR3_ADDSET_1                 ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  FSMC_BWTR3_ADDSET_2                 ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  FSMC_BWTR3_ADDSET_3                 ((uint32_t)0x00000008)        /*!<Bit 3 */
N
N#define  FSMC_BWTR3_ADDHLD                   ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
N#define  FSMC_BWTR3_ADDHLD_0                 ((uint32_t)0x00000010)        /*!<Bit 0 */
N#define  FSMC_BWTR3_ADDHLD_1                 ((uint32_t)0x00000020)        /*!<Bit 1 */
N#define  FSMC_BWTR3_ADDHLD_2                 ((uint32_t)0x00000040)        /*!<Bit 2 */
N#define  FSMC_BWTR3_ADDHLD_3                 ((uint32_t)0x00000080)        /*!<Bit 3 */
N
N#define  FSMC_BWTR3_DATAST                   ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
N#define  FSMC_BWTR3_DATAST_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  FSMC_BWTR3_DATAST_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  FSMC_BWTR3_DATAST_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  FSMC_BWTR3_DATAST_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
N
N#define  FSMC_BWTR3_CLKDIV                   ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
N#define  FSMC_BWTR3_CLKDIV_0                 ((uint32_t)0x00100000)        /*!<Bit 0 */
N#define  FSMC_BWTR3_CLKDIV_1                 ((uint32_t)0x00200000)        /*!<Bit 1 */
N#define  FSMC_BWTR3_CLKDIV_2                 ((uint32_t)0x00400000)        /*!<Bit 2 */
N#define  FSMC_BWTR3_CLKDIV_3                 ((uint32_t)0x00800000)        /*!<Bit 3 */
N
N#define  FSMC_BWTR3_DATLAT                   ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
N#define  FSMC_BWTR3_DATLAT_0                 ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  FSMC_BWTR3_DATLAT_1                 ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  FSMC_BWTR3_DATLAT_2                 ((uint32_t)0x04000000)        /*!<Bit 2 */
N#define  FSMC_BWTR3_DATLAT_3                 ((uint32_t)0x08000000)        /*!<Bit 3 */
N
N#define  FSMC_BWTR3_ACCMOD                   ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
N#define  FSMC_BWTR3_ACCMOD_0                 ((uint32_t)0x10000000)        /*!<Bit 0 */
N#define  FSMC_BWTR3_ACCMOD_1                 ((uint32_t)0x20000000)        /*!<Bit 1 */
N
N/******************  Bit definition for FSMC_BWTR4 register  ******************/
N#define  FSMC_BWTR4_ADDSET                   ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
N#define  FSMC_BWTR4_ADDSET_0                 ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  FSMC_BWTR4_ADDSET_1                 ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  FSMC_BWTR4_ADDSET_2                 ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  FSMC_BWTR4_ADDSET_3                 ((uint32_t)0x00000008)        /*!<Bit 3 */
N
N#define  FSMC_BWTR4_ADDHLD                   ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
N#define  FSMC_BWTR4_ADDHLD_0                 ((uint32_t)0x00000010)        /*!<Bit 0 */
N#define  FSMC_BWTR4_ADDHLD_1                 ((uint32_t)0x00000020)        /*!<Bit 1 */
N#define  FSMC_BWTR4_ADDHLD_2                 ((uint32_t)0x00000040)        /*!<Bit 2 */
N#define  FSMC_BWTR4_ADDHLD_3                 ((uint32_t)0x00000080)        /*!<Bit 3 */
N
N#define  FSMC_BWTR4_DATAST                   ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
N#define  FSMC_BWTR4_DATAST_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  FSMC_BWTR4_DATAST_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  FSMC_BWTR4_DATAST_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  FSMC_BWTR4_DATAST_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
N
N#define  FSMC_BWTR4_CLKDIV                   ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
N#define  FSMC_BWTR4_CLKDIV_0                 ((uint32_t)0x00100000)        /*!<Bit 0 */
N#define  FSMC_BWTR4_CLKDIV_1                 ((uint32_t)0x00200000)        /*!<Bit 1 */
N#define  FSMC_BWTR4_CLKDIV_2                 ((uint32_t)0x00400000)        /*!<Bit 2 */
N#define  FSMC_BWTR4_CLKDIV_3                 ((uint32_t)0x00800000)        /*!<Bit 3 */
N
N#define  FSMC_BWTR4_DATLAT                   ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
N#define  FSMC_BWTR4_DATLAT_0                 ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  FSMC_BWTR4_DATLAT_1                 ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  FSMC_BWTR4_DATLAT_2                 ((uint32_t)0x04000000)        /*!<Bit 2 */
N#define  FSMC_BWTR4_DATLAT_3                 ((uint32_t)0x08000000)        /*!<Bit 3 */
N
N#define  FSMC_BWTR4_ACCMOD                   ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
N#define  FSMC_BWTR4_ACCMOD_0                 ((uint32_t)0x10000000)        /*!<Bit 0 */
N#define  FSMC_BWTR4_ACCMOD_1                 ((uint32_t)0x20000000)        /*!<Bit 1 */
N
N/******************  Bit definition for FSMC_PCR2 register  *******************/
N#define  FSMC_PCR2_PWAITEN                   ((uint32_t)0x00000002)        /*!<Wait feature enable bit */
N#define  FSMC_PCR2_PBKEN                     ((uint32_t)0x00000004)        /*!<PC Card/NAND Flash memory bank enable bit */
N#define  FSMC_PCR2_PTYP                      ((uint32_t)0x00000008)        /*!<Memory type */
N
N#define  FSMC_PCR2_PWID                      ((uint32_t)0x00000030)        /*!<PWID[1:0] bits (NAND Flash databus width) */
N#define  FSMC_PCR2_PWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
N#define  FSMC_PCR2_PWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
N
N#define  FSMC_PCR2_ECCEN                     ((uint32_t)0x00000040)        /*!<ECC computation logic enable bit */
N
N#define  FSMC_PCR2_TCLR                      ((uint32_t)0x00001E00)        /*!<TCLR[3:0] bits (CLE to RE delay) */
N#define  FSMC_PCR2_TCLR_0                    ((uint32_t)0x00000200)        /*!<Bit 0 */
N#define  FSMC_PCR2_TCLR_1                    ((uint32_t)0x00000400)        /*!<Bit 1 */
N#define  FSMC_PCR2_TCLR_2                    ((uint32_t)0x00000800)        /*!<Bit 2 */
N#define  FSMC_PCR2_TCLR_3                    ((uint32_t)0x00001000)        /*!<Bit 3 */
N
N#define  FSMC_PCR2_TAR                       ((uint32_t)0x0001E000)        /*!<TAR[3:0] bits (ALE to RE delay) */
N#define  FSMC_PCR2_TAR_0                     ((uint32_t)0x00002000)        /*!<Bit 0 */
N#define  FSMC_PCR2_TAR_1                     ((uint32_t)0x00004000)        /*!<Bit 1 */
N#define  FSMC_PCR2_TAR_2                     ((uint32_t)0x00008000)        /*!<Bit 2 */
N#define  FSMC_PCR2_TAR_3                     ((uint32_t)0x00010000)        /*!<Bit 3 */
N
N#define  FSMC_PCR2_ECCPS                     ((uint32_t)0x000E0000)        /*!<ECCPS[1:0] bits (ECC page size) */
N#define  FSMC_PCR2_ECCPS_0                   ((uint32_t)0x00020000)        /*!<Bit 0 */
N#define  FSMC_PCR2_ECCPS_1                   ((uint32_t)0x00040000)        /*!<Bit 1 */
N#define  FSMC_PCR2_ECCPS_2                   ((uint32_t)0x00080000)        /*!<Bit 2 */
N
N/******************  Bit definition for FSMC_PCR3 register  *******************/
N#define  FSMC_PCR3_PWAITEN                   ((uint32_t)0x00000002)        /*!<Wait feature enable bit */
N#define  FSMC_PCR3_PBKEN                     ((uint32_t)0x00000004)        /*!<PC Card/NAND Flash memory bank enable bit */
N#define  FSMC_PCR3_PTYP                      ((uint32_t)0x00000008)        /*!<Memory type */
N
N#define  FSMC_PCR3_PWID                      ((uint32_t)0x00000030)        /*!<PWID[1:0] bits (NAND Flash databus width) */
N#define  FSMC_PCR3_PWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
N#define  FSMC_PCR3_PWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
N
N#define  FSMC_PCR3_ECCEN                     ((uint32_t)0x00000040)        /*!<ECC computation logic enable bit */
N
N#define  FSMC_PCR3_TCLR                      ((uint32_t)0x00001E00)        /*!<TCLR[3:0] bits (CLE to RE delay) */
N#define  FSMC_PCR3_TCLR_0                    ((uint32_t)0x00000200)        /*!<Bit 0 */
N#define  FSMC_PCR3_TCLR_1                    ((uint32_t)0x00000400)        /*!<Bit 1 */
N#define  FSMC_PCR3_TCLR_2                    ((uint32_t)0x00000800)        /*!<Bit 2 */
N#define  FSMC_PCR3_TCLR_3                    ((uint32_t)0x00001000)        /*!<Bit 3 */
N
N#define  FSMC_PCR3_TAR                       ((uint32_t)0x0001E000)        /*!<TAR[3:0] bits (ALE to RE delay) */
N#define  FSMC_PCR3_TAR_0                     ((uint32_t)0x00002000)        /*!<Bit 0 */
N#define  FSMC_PCR3_TAR_1                     ((uint32_t)0x00004000)        /*!<Bit 1 */
N#define  FSMC_PCR3_TAR_2                     ((uint32_t)0x00008000)        /*!<Bit 2 */
N#define  FSMC_PCR3_TAR_3                     ((uint32_t)0x00010000)        /*!<Bit 3 */
N
N#define  FSMC_PCR3_ECCPS                     ((uint32_t)0x000E0000)        /*!<ECCPS[2:0] bits (ECC page size) */
N#define  FSMC_PCR3_ECCPS_0                   ((uint32_t)0x00020000)        /*!<Bit 0 */
N#define  FSMC_PCR3_ECCPS_1                   ((uint32_t)0x00040000)        /*!<Bit 1 */
N#define  FSMC_PCR3_ECCPS_2                   ((uint32_t)0x00080000)        /*!<Bit 2 */
N
N/******************  Bit definition for FSMC_PCR4 register  *******************/
N#define  FSMC_PCR4_PWAITEN                   ((uint32_t)0x00000002)        /*!<Wait feature enable bit */
N#define  FSMC_PCR4_PBKEN                     ((uint32_t)0x00000004)        /*!<PC Card/NAND Flash memory bank enable bit */
N#define  FSMC_PCR4_PTYP                      ((uint32_t)0x00000008)        /*!<Memory type */
N
N#define  FSMC_PCR4_PWID                      ((uint32_t)0x00000030)        /*!<PWID[1:0] bits (NAND Flash databus width) */
N#define  FSMC_PCR4_PWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
N#define  FSMC_PCR4_PWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
N
N#define  FSMC_PCR4_ECCEN                     ((uint32_t)0x00000040)        /*!<ECC computation logic enable bit */
N
N#define  FSMC_PCR4_TCLR                      ((uint32_t)0x00001E00)        /*!<TCLR[3:0] bits (CLE to RE delay) */
N#define  FSMC_PCR4_TCLR_0                    ((uint32_t)0x00000200)        /*!<Bit 0 */
N#define  FSMC_PCR4_TCLR_1                    ((uint32_t)0x00000400)        /*!<Bit 1 */
N#define  FSMC_PCR4_TCLR_2                    ((uint32_t)0x00000800)        /*!<Bit 2 */
N#define  FSMC_PCR4_TCLR_3                    ((uint32_t)0x00001000)        /*!<Bit 3 */
N
N#define  FSMC_PCR4_TAR                       ((uint32_t)0x0001E000)        /*!<TAR[3:0] bits (ALE to RE delay) */
N#define  FSMC_PCR4_TAR_0                     ((uint32_t)0x00002000)        /*!<Bit 0 */
N#define  FSMC_PCR4_TAR_1                     ((uint32_t)0x00004000)        /*!<Bit 1 */
N#define  FSMC_PCR4_TAR_2                     ((uint32_t)0x00008000)        /*!<Bit 2 */
N#define  FSMC_PCR4_TAR_3                     ((uint32_t)0x00010000)        /*!<Bit 3 */
N
N#define  FSMC_PCR4_ECCPS                     ((uint32_t)0x000E0000)        /*!<ECCPS[2:0] bits (ECC page size) */
N#define  FSMC_PCR4_ECCPS_0                   ((uint32_t)0x00020000)        /*!<Bit 0 */
N#define  FSMC_PCR4_ECCPS_1                   ((uint32_t)0x00040000)        /*!<Bit 1 */
N#define  FSMC_PCR4_ECCPS_2                   ((uint32_t)0x00080000)        /*!<Bit 2 */
N
N/*******************  Bit definition for FSMC_SR2 register  *******************/
N#define  FSMC_SR2_IRS                        ((uint8_t)0x01)               /*!<Interrupt Rising Edge status                */
N#define  FSMC_SR2_ILS                        ((uint8_t)0x02)               /*!<Interrupt Level status                      */
N#define  FSMC_SR2_IFS                        ((uint8_t)0x04)               /*!<Interrupt Falling Edge status               */
N#define  FSMC_SR2_IREN                       ((uint8_t)0x08)               /*!<Interrupt Rising Edge detection Enable bit  */
N#define  FSMC_SR2_ILEN                       ((uint8_t)0x10)               /*!<Interrupt Level detection Enable bit        */
N#define  FSMC_SR2_IFEN                       ((uint8_t)0x20)               /*!<Interrupt Falling Edge detection Enable bit */
N#define  FSMC_SR2_FEMPT                      ((uint8_t)0x40)               /*!<FIFO empty */
N
N/*******************  Bit definition for FSMC_SR3 register  *******************/
N#define  FSMC_SR3_IRS                        ((uint8_t)0x01)               /*!<Interrupt Rising Edge status                */
N#define  FSMC_SR3_ILS                        ((uint8_t)0x02)               /*!<Interrupt Level status                      */
N#define  FSMC_SR3_IFS                        ((uint8_t)0x04)               /*!<Interrupt Falling Edge status               */
N#define  FSMC_SR3_IREN                       ((uint8_t)0x08)               /*!<Interrupt Rising Edge detection Enable bit  */
N#define  FSMC_SR3_ILEN                       ((uint8_t)0x10)               /*!<Interrupt Level detection Enable bit        */
N#define  FSMC_SR3_IFEN                       ((uint8_t)0x20)               /*!<Interrupt Falling Edge detection Enable bit */
N#define  FSMC_SR3_FEMPT                      ((uint8_t)0x40)               /*!<FIFO empty */
N
N/*******************  Bit definition for FSMC_SR4 register  *******************/
N#define  FSMC_SR4_IRS                        ((uint8_t)0x01)               /*!<Interrupt Rising Edge status                 */
N#define  FSMC_SR4_ILS                        ((uint8_t)0x02)               /*!<Interrupt Level status                       */
N#define  FSMC_SR4_IFS                        ((uint8_t)0x04)               /*!<Interrupt Falling Edge status                */
N#define  FSMC_SR4_IREN                       ((uint8_t)0x08)               /*!<Interrupt Rising Edge detection Enable bit   */
N#define  FSMC_SR4_ILEN                       ((uint8_t)0x10)               /*!<Interrupt Level detection Enable bit         */
N#define  FSMC_SR4_IFEN                       ((uint8_t)0x20)               /*!<Interrupt Falling Edge detection Enable bit  */
N#define  FSMC_SR4_FEMPT                      ((uint8_t)0x40)               /*!<FIFO empty */
N
N/******************  Bit definition for FSMC_PMEM2 register  ******************/
N#define  FSMC_PMEM2_MEMSET2                  ((uint32_t)0x000000FF)        /*!<MEMSET2[7:0] bits (Common memory 2 setup time) */
N#define  FSMC_PMEM2_MEMSET2_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  FSMC_PMEM2_MEMSET2_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  FSMC_PMEM2_MEMSET2_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  FSMC_PMEM2_MEMSET2_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
N#define  FSMC_PMEM2_MEMSET2_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
N#define  FSMC_PMEM2_MEMSET2_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
N#define  FSMC_PMEM2_MEMSET2_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
N#define  FSMC_PMEM2_MEMSET2_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
N
N#define  FSMC_PMEM2_MEMWAIT2                 ((uint32_t)0x0000FF00)        /*!<MEMWAIT2[7:0] bits (Common memory 2 wait time) */
N#define  FSMC_PMEM2_MEMWAIT2_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  FSMC_PMEM2_MEMWAIT2_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  FSMC_PMEM2_MEMWAIT2_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  FSMC_PMEM2_MEMWAIT2_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
N#define  FSMC_PMEM2_MEMWAIT2_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
N#define  FSMC_PMEM2_MEMWAIT2_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
N#define  FSMC_PMEM2_MEMWAIT2_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
N#define  FSMC_PMEM2_MEMWAIT2_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
N
N#define  FSMC_PMEM2_MEMHOLD2                 ((uint32_t)0x00FF0000)        /*!<MEMHOLD2[7:0] bits (Common memory 2 hold time) */
N#define  FSMC_PMEM2_MEMHOLD2_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
N#define  FSMC_PMEM2_MEMHOLD2_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
N#define  FSMC_PMEM2_MEMHOLD2_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
N#define  FSMC_PMEM2_MEMHOLD2_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
N#define  FSMC_PMEM2_MEMHOLD2_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
N#define  FSMC_PMEM2_MEMHOLD2_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
N#define  FSMC_PMEM2_MEMHOLD2_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
N#define  FSMC_PMEM2_MEMHOLD2_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
N
N#define  FSMC_PMEM2_MEMHIZ2                  ((uint32_t)0xFF000000)        /*!<MEMHIZ2[7:0] bits (Common memory 2 databus HiZ time) */
N#define  FSMC_PMEM2_MEMHIZ2_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  FSMC_PMEM2_MEMHIZ2_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  FSMC_PMEM2_MEMHIZ2_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
N#define  FSMC_PMEM2_MEMHIZ2_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
N#define  FSMC_PMEM2_MEMHIZ2_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
N#define  FSMC_PMEM2_MEMHIZ2_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
N#define  FSMC_PMEM2_MEMHIZ2_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
N#define  FSMC_PMEM2_MEMHIZ2_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
N
N/******************  Bit definition for FSMC_PMEM3 register  ******************/
N#define  FSMC_PMEM3_MEMSET3                  ((uint32_t)0x000000FF)        /*!<MEMSET3[7:0] bits (Common memory 3 setup time) */
N#define  FSMC_PMEM3_MEMSET3_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  FSMC_PMEM3_MEMSET3_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  FSMC_PMEM3_MEMSET3_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  FSMC_PMEM3_MEMSET3_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
N#define  FSMC_PMEM3_MEMSET3_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
N#define  FSMC_PMEM3_MEMSET3_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
N#define  FSMC_PMEM3_MEMSET3_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
N#define  FSMC_PMEM3_MEMSET3_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
N
N#define  FSMC_PMEM3_MEMWAIT3                 ((uint32_t)0x0000FF00)        /*!<MEMWAIT3[7:0] bits (Common memory 3 wait time) */
N#define  FSMC_PMEM3_MEMWAIT3_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  FSMC_PMEM3_MEMWAIT3_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  FSMC_PMEM3_MEMWAIT3_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  FSMC_PMEM3_MEMWAIT3_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
N#define  FSMC_PMEM3_MEMWAIT3_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
N#define  FSMC_PMEM3_MEMWAIT3_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
N#define  FSMC_PMEM3_MEMWAIT3_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
N#define  FSMC_PMEM3_MEMWAIT3_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
N
N#define  FSMC_PMEM3_MEMHOLD3                 ((uint32_t)0x00FF0000)        /*!<MEMHOLD3[7:0] bits (Common memory 3 hold time) */
N#define  FSMC_PMEM3_MEMHOLD3_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
N#define  FSMC_PMEM3_MEMHOLD3_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
N#define  FSMC_PMEM3_MEMHOLD3_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
N#define  FSMC_PMEM3_MEMHOLD3_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
N#define  FSMC_PMEM3_MEMHOLD3_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
N#define  FSMC_PMEM3_MEMHOLD3_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
N#define  FSMC_PMEM3_MEMHOLD3_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
N#define  FSMC_PMEM3_MEMHOLD3_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
N
N#define  FSMC_PMEM3_MEMHIZ3                  ((uint32_t)0xFF000000)        /*!<MEMHIZ3[7:0] bits (Common memory 3 databus HiZ time) */
N#define  FSMC_PMEM3_MEMHIZ3_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  FSMC_PMEM3_MEMHIZ3_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  FSMC_PMEM3_MEMHIZ3_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
N#define  FSMC_PMEM3_MEMHIZ3_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
N#define  FSMC_PMEM3_MEMHIZ3_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
N#define  FSMC_PMEM3_MEMHIZ3_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
N#define  FSMC_PMEM3_MEMHIZ3_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
N#define  FSMC_PMEM3_MEMHIZ3_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
N
N/******************  Bit definition for FSMC_PMEM4 register  ******************/
N#define  FSMC_PMEM4_MEMSET4                  ((uint32_t)0x000000FF)        /*!<MEMSET4[7:0] bits (Common memory 4 setup time) */
N#define  FSMC_PMEM4_MEMSET4_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  FSMC_PMEM4_MEMSET4_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  FSMC_PMEM4_MEMSET4_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  FSMC_PMEM4_MEMSET4_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
N#define  FSMC_PMEM4_MEMSET4_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
N#define  FSMC_PMEM4_MEMSET4_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
N#define  FSMC_PMEM4_MEMSET4_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
N#define  FSMC_PMEM4_MEMSET4_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
N
N#define  FSMC_PMEM4_MEMWAIT4                 ((uint32_t)0x0000FF00)        /*!<MEMWAIT4[7:0] bits (Common memory 4 wait time) */
N#define  FSMC_PMEM4_MEMWAIT4_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  FSMC_PMEM4_MEMWAIT4_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  FSMC_PMEM4_MEMWAIT4_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  FSMC_PMEM4_MEMWAIT4_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
N#define  FSMC_PMEM4_MEMWAIT4_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
N#define  FSMC_PMEM4_MEMWAIT4_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
N#define  FSMC_PMEM4_MEMWAIT4_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
N#define  FSMC_PMEM4_MEMWAIT4_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
N
N#define  FSMC_PMEM4_MEMHOLD4                 ((uint32_t)0x00FF0000)        /*!<MEMHOLD4[7:0] bits (Common memory 4 hold time) */
N#define  FSMC_PMEM4_MEMHOLD4_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
N#define  FSMC_PMEM4_MEMHOLD4_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
N#define  FSMC_PMEM4_MEMHOLD4_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
N#define  FSMC_PMEM4_MEMHOLD4_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
N#define  FSMC_PMEM4_MEMHOLD4_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
N#define  FSMC_PMEM4_MEMHOLD4_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
N#define  FSMC_PMEM4_MEMHOLD4_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
N#define  FSMC_PMEM4_MEMHOLD4_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
N
N#define  FSMC_PMEM4_MEMHIZ4                  ((uint32_t)0xFF000000)        /*!<MEMHIZ4[7:0] bits (Common memory 4 databus HiZ time) */
N#define  FSMC_PMEM4_MEMHIZ4_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  FSMC_PMEM4_MEMHIZ4_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  FSMC_PMEM4_MEMHIZ4_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
N#define  FSMC_PMEM4_MEMHIZ4_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
N#define  FSMC_PMEM4_MEMHIZ4_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
N#define  FSMC_PMEM4_MEMHIZ4_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
N#define  FSMC_PMEM4_MEMHIZ4_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
N#define  FSMC_PMEM4_MEMHIZ4_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
N
N/******************  Bit definition for FSMC_PATT2 register  ******************/
N#define  FSMC_PATT2_ATTSET2                  ((uint32_t)0x000000FF)        /*!<ATTSET2[7:0] bits (Attribute memory 2 setup time) */
N#define  FSMC_PATT2_ATTSET2_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  FSMC_PATT2_ATTSET2_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  FSMC_PATT2_ATTSET2_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  FSMC_PATT2_ATTSET2_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
N#define  FSMC_PATT2_ATTSET2_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
N#define  FSMC_PATT2_ATTSET2_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
N#define  FSMC_PATT2_ATTSET2_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
N#define  FSMC_PATT2_ATTSET2_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
N
N#define  FSMC_PATT2_ATTWAIT2                 ((uint32_t)0x0000FF00)        /*!<ATTWAIT2[7:0] bits (Attribute memory 2 wait time) */
N#define  FSMC_PATT2_ATTWAIT2_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  FSMC_PATT2_ATTWAIT2_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  FSMC_PATT2_ATTWAIT2_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  FSMC_PATT2_ATTWAIT2_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
N#define  FSMC_PATT2_ATTWAIT2_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
N#define  FSMC_PATT2_ATTWAIT2_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
N#define  FSMC_PATT2_ATTWAIT2_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
N#define  FSMC_PATT2_ATTWAIT2_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
N
N#define  FSMC_PATT2_ATTHOLD2                 ((uint32_t)0x00FF0000)        /*!<ATTHOLD2[7:0] bits (Attribute memory 2 hold time) */
N#define  FSMC_PATT2_ATTHOLD2_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
N#define  FSMC_PATT2_ATTHOLD2_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
N#define  FSMC_PATT2_ATTHOLD2_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
N#define  FSMC_PATT2_ATTHOLD2_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
N#define  FSMC_PATT2_ATTHOLD2_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
N#define  FSMC_PATT2_ATTHOLD2_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
N#define  FSMC_PATT2_ATTHOLD2_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
N#define  FSMC_PATT2_ATTHOLD2_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
N
N#define  FSMC_PATT2_ATTHIZ2                  ((uint32_t)0xFF000000)        /*!<ATTHIZ2[7:0] bits (Attribute memory 2 databus HiZ time) */
N#define  FSMC_PATT2_ATTHIZ2_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  FSMC_PATT2_ATTHIZ2_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  FSMC_PATT2_ATTHIZ2_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
N#define  FSMC_PATT2_ATTHIZ2_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
N#define  FSMC_PATT2_ATTHIZ2_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
N#define  FSMC_PATT2_ATTHIZ2_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
N#define  FSMC_PATT2_ATTHIZ2_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
N#define  FSMC_PATT2_ATTHIZ2_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
N
N/******************  Bit definition for FSMC_PATT3 register  ******************/
N#define  FSMC_PATT3_ATTSET3                  ((uint32_t)0x000000FF)        /*!<ATTSET3[7:0] bits (Attribute memory 3 setup time) */
N#define  FSMC_PATT3_ATTSET3_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  FSMC_PATT3_ATTSET3_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  FSMC_PATT3_ATTSET3_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  FSMC_PATT3_ATTSET3_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
N#define  FSMC_PATT3_ATTSET3_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
N#define  FSMC_PATT3_ATTSET3_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
N#define  FSMC_PATT3_ATTSET3_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
N#define  FSMC_PATT3_ATTSET3_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
N
N#define  FSMC_PATT3_ATTWAIT3                 ((uint32_t)0x0000FF00)        /*!<ATTWAIT3[7:0] bits (Attribute memory 3 wait time) */
N#define  FSMC_PATT3_ATTWAIT3_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  FSMC_PATT3_ATTWAIT3_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  FSMC_PATT3_ATTWAIT3_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  FSMC_PATT3_ATTWAIT3_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
N#define  FSMC_PATT3_ATTWAIT3_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
N#define  FSMC_PATT3_ATTWAIT3_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
N#define  FSMC_PATT3_ATTWAIT3_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
N#define  FSMC_PATT3_ATTWAIT3_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
N
N#define  FSMC_PATT3_ATTHOLD3                 ((uint32_t)0x00FF0000)        /*!<ATTHOLD3[7:0] bits (Attribute memory 3 hold time) */
N#define  FSMC_PATT3_ATTHOLD3_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
N#define  FSMC_PATT3_ATTHOLD3_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
N#define  FSMC_PATT3_ATTHOLD3_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
N#define  FSMC_PATT3_ATTHOLD3_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
N#define  FSMC_PATT3_ATTHOLD3_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
N#define  FSMC_PATT3_ATTHOLD3_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
N#define  FSMC_PATT3_ATTHOLD3_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
N#define  FSMC_PATT3_ATTHOLD3_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
N
N#define  FSMC_PATT3_ATTHIZ3                  ((uint32_t)0xFF000000)        /*!<ATTHIZ3[7:0] bits (Attribute memory 3 databus HiZ time) */
N#define  FSMC_PATT3_ATTHIZ3_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  FSMC_PATT3_ATTHIZ3_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  FSMC_PATT3_ATTHIZ3_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
N#define  FSMC_PATT3_ATTHIZ3_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
N#define  FSMC_PATT3_ATTHIZ3_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
N#define  FSMC_PATT3_ATTHIZ3_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
N#define  FSMC_PATT3_ATTHIZ3_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
N#define  FSMC_PATT3_ATTHIZ3_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
N
N/******************  Bit definition for FSMC_PATT4 register  ******************/
N#define  FSMC_PATT4_ATTSET4                  ((uint32_t)0x000000FF)        /*!<ATTSET4[7:0] bits (Attribute memory 4 setup time) */
N#define  FSMC_PATT4_ATTSET4_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  FSMC_PATT4_ATTSET4_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  FSMC_PATT4_ATTSET4_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  FSMC_PATT4_ATTSET4_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
N#define  FSMC_PATT4_ATTSET4_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
N#define  FSMC_PATT4_ATTSET4_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
N#define  FSMC_PATT4_ATTSET4_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
N#define  FSMC_PATT4_ATTSET4_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
N
N#define  FSMC_PATT4_ATTWAIT4                 ((uint32_t)0x0000FF00)        /*!<ATTWAIT4[7:0] bits (Attribute memory 4 wait time) */
N#define  FSMC_PATT4_ATTWAIT4_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  FSMC_PATT4_ATTWAIT4_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  FSMC_PATT4_ATTWAIT4_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  FSMC_PATT4_ATTWAIT4_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
N#define  FSMC_PATT4_ATTWAIT4_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
N#define  FSMC_PATT4_ATTWAIT4_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
N#define  FSMC_PATT4_ATTWAIT4_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
N#define  FSMC_PATT4_ATTWAIT4_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
N
N#define  FSMC_PATT4_ATTHOLD4                 ((uint32_t)0x00FF0000)        /*!<ATTHOLD4[7:0] bits (Attribute memory 4 hold time) */
N#define  FSMC_PATT4_ATTHOLD4_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
N#define  FSMC_PATT4_ATTHOLD4_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
N#define  FSMC_PATT4_ATTHOLD4_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
N#define  FSMC_PATT4_ATTHOLD4_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
N#define  FSMC_PATT4_ATTHOLD4_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
N#define  FSMC_PATT4_ATTHOLD4_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
N#define  FSMC_PATT4_ATTHOLD4_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
N#define  FSMC_PATT4_ATTHOLD4_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
N
N#define  FSMC_PATT4_ATTHIZ4                  ((uint32_t)0xFF000000)        /*!<ATTHIZ4[7:0] bits (Attribute memory 4 databus HiZ time) */
N#define  FSMC_PATT4_ATTHIZ4_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  FSMC_PATT4_ATTHIZ4_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  FSMC_PATT4_ATTHIZ4_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
N#define  FSMC_PATT4_ATTHIZ4_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
N#define  FSMC_PATT4_ATTHIZ4_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
N#define  FSMC_PATT4_ATTHIZ4_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
N#define  FSMC_PATT4_ATTHIZ4_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
N#define  FSMC_PATT4_ATTHIZ4_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
N
N/******************  Bit definition for FSMC_PIO4 register  *******************/
N#define  FSMC_PIO4_IOSET4                    ((uint32_t)0x000000FF)        /*!<IOSET4[7:0] bits (I/O 4 setup time) */
N#define  FSMC_PIO4_IOSET4_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  FSMC_PIO4_IOSET4_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  FSMC_PIO4_IOSET4_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  FSMC_PIO4_IOSET4_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
N#define  FSMC_PIO4_IOSET4_4                  ((uint32_t)0x00000010)        /*!<Bit 4 */
N#define  FSMC_PIO4_IOSET4_5                  ((uint32_t)0x00000020)        /*!<Bit 5 */
N#define  FSMC_PIO4_IOSET4_6                  ((uint32_t)0x00000040)        /*!<Bit 6 */
N#define  FSMC_PIO4_IOSET4_7                  ((uint32_t)0x00000080)        /*!<Bit 7 */
N
N#define  FSMC_PIO4_IOWAIT4                   ((uint32_t)0x0000FF00)        /*!<IOWAIT4[7:0] bits (I/O 4 wait time) */
N#define  FSMC_PIO4_IOWAIT4_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  FSMC_PIO4_IOWAIT4_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  FSMC_PIO4_IOWAIT4_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  FSMC_PIO4_IOWAIT4_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
N#define  FSMC_PIO4_IOWAIT4_4                 ((uint32_t)0x00001000)        /*!<Bit 4 */
N#define  FSMC_PIO4_IOWAIT4_5                 ((uint32_t)0x00002000)        /*!<Bit 5 */
N#define  FSMC_PIO4_IOWAIT4_6                 ((uint32_t)0x00004000)        /*!<Bit 6 */
N#define  FSMC_PIO4_IOWAIT4_7                 ((uint32_t)0x00008000)        /*!<Bit 7 */
N
N#define  FSMC_PIO4_IOHOLD4                   ((uint32_t)0x00FF0000)        /*!<IOHOLD4[7:0] bits (I/O 4 hold time) */
N#define  FSMC_PIO4_IOHOLD4_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
N#define  FSMC_PIO4_IOHOLD4_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
N#define  FSMC_PIO4_IOHOLD4_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
N#define  FSMC_PIO4_IOHOLD4_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
N#define  FSMC_PIO4_IOHOLD4_4                 ((uint32_t)0x00100000)        /*!<Bit 4 */
N#define  FSMC_PIO4_IOHOLD4_5                 ((uint32_t)0x00200000)        /*!<Bit 5 */
N#define  FSMC_PIO4_IOHOLD4_6                 ((uint32_t)0x00400000)        /*!<Bit 6 */
N#define  FSMC_PIO4_IOHOLD4_7                 ((uint32_t)0x00800000)        /*!<Bit 7 */
N
N#define  FSMC_PIO4_IOHIZ4                    ((uint32_t)0xFF000000)        /*!<IOHIZ4[7:0] bits (I/O 4 databus HiZ time) */
N#define  FSMC_PIO4_IOHIZ4_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
N#define  FSMC_PIO4_IOHIZ4_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
N#define  FSMC_PIO4_IOHIZ4_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
N#define  FSMC_PIO4_IOHIZ4_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
N#define  FSMC_PIO4_IOHIZ4_4                  ((uint32_t)0x10000000)        /*!<Bit 4 */
N#define  FSMC_PIO4_IOHIZ4_5                  ((uint32_t)0x20000000)        /*!<Bit 5 */
N#define  FSMC_PIO4_IOHIZ4_6                  ((uint32_t)0x40000000)        /*!<Bit 6 */
N#define  FSMC_PIO4_IOHIZ4_7                  ((uint32_t)0x80000000)        /*!<Bit 7 */
N
N/******************  Bit definition for FSMC_ECCR2 register  ******************/
N#define  FSMC_ECCR2_ECC2                     ((uint32_t)0xFFFFFFFF)        /*!<ECC result */
N
N/******************  Bit definition for FSMC_ECCR3 register  ******************/
N#define  FSMC_ECCR3_ECC3                     ((uint32_t)0xFFFFFFFF)        /*!<ECC result */
N#endif /* STM32F40_41xxx */
N
N#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
X#if 0L || 0L
S/******************************************************************************/
S/*                                                                            */
S/*                          Flexible Memory Controller                        */
S/*                                                                            */
S/******************************************************************************/
S/******************  Bit definition for FMC_BCR1 register  *******************/
S#define  FMC_BCR1_MBKEN                     ((uint32_t)0x00000001)        /*!<Memory bank enable bit                 */
S#define  FMC_BCR1_MUXEN                     ((uint32_t)0x00000002)        /*!<Address/data multiplexing enable bit   */
S
S#define  FMC_BCR1_MTYP                      ((uint32_t)0x0000000C)        /*!<MTYP[1:0] bits (Memory type)           */
S#define  FMC_BCR1_MTYP_0                    ((uint32_t)0x00000004)        /*!<Bit 0 */
S#define  FMC_BCR1_MTYP_1                    ((uint32_t)0x00000008)        /*!<Bit 1 */
S
S#define  FMC_BCR1_MWID                      ((uint32_t)0x00000030)        /*!<MWID[1:0] bits (Memory data bus width) */
S#define  FMC_BCR1_MWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BCR1_MWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FMC_BCR1_FACCEN                    ((uint32_t)0x00000040)        /*!<Flash access enable        */
S#define  FMC_BCR1_BURSTEN                   ((uint32_t)0x00000100)        /*!<Burst enable bit           */
S#define  FMC_BCR1_WAITPOL                   ((uint32_t)0x00000200)        /*!<Wait signal polarity bit   */
S#define  FMC_BCR1_WRAPMOD                   ((uint32_t)0x00000400)        /*!<Wrapped burst mode support */
S#define  FMC_BCR1_WAITCFG                   ((uint32_t)0x00000800)        /*!<Wait timing configuration  */
S#define  FMC_BCR1_WREN                      ((uint32_t)0x00001000)        /*!<Write enable bit           */
S#define  FMC_BCR1_WAITEN                    ((uint32_t)0x00002000)        /*!<Wait enable bit            */
S#define  FMC_BCR1_EXTMOD                    ((uint32_t)0x00004000)        /*!<Extended mode enable       */
S#define  FMC_BCR1_ASYNCWAIT                 ((uint32_t)0x00008000)        /*!<Asynchronous wait          */
S#define  FMC_BCR1_CBURSTRW                  ((uint32_t)0x00080000)        /*!<Write burst enable         */
S#define  FMC_BCR1_CCLKEN                    ((uint32_t)0x00100000)        /*!<Continous clock enable     */
S
S/******************  Bit definition for FMC_BCR2 register  *******************/
S#define  FMC_BCR2_MBKEN                     ((uint32_t)0x00000001)        /*!<Memory bank enable bit                 */
S#define  FMC_BCR2_MUXEN                     ((uint32_t)0x00000002)        /*!<Address/data multiplexing enable bit   */
S
S#define  FMC_BCR2_MTYP                      ((uint32_t)0x0000000C)        /*!<MTYP[1:0] bits (Memory type)           */
S#define  FMC_BCR2_MTYP_0                    ((uint32_t)0x00000004)        /*!<Bit 0 */
S#define  FMC_BCR2_MTYP_1                    ((uint32_t)0x00000008)        /*!<Bit 1 */
S
S#define  FMC_BCR2_MWID                      ((uint32_t)0x00000030)        /*!<MWID[1:0] bits (Memory data bus width) */
S#define  FMC_BCR2_MWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BCR2_MWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FMC_BCR2_FACCEN                    ((uint32_t)0x00000040)        /*!<Flash access enable        */
S#define  FMC_BCR2_BURSTEN                   ((uint32_t)0x00000100)        /*!<Burst enable bit           */
S#define  FMC_BCR2_WAITPOL                   ((uint32_t)0x00000200)        /*!<Wait signal polarity bit   */
S#define  FMC_BCR2_WRAPMOD                   ((uint32_t)0x00000400)        /*!<Wrapped burst mode support */
S#define  FMC_BCR2_WAITCFG                   ((uint32_t)0x00000800)        /*!<Wait timing configuration  */
S#define  FMC_BCR2_WREN                      ((uint32_t)0x00001000)        /*!<Write enable bit           */
S#define  FMC_BCR2_WAITEN                    ((uint32_t)0x00002000)        /*!<Wait enable bit            */
S#define  FMC_BCR2_EXTMOD                    ((uint32_t)0x00004000)        /*!<Extended mode enable       */
S#define  FMC_BCR2_ASYNCWAIT                 ((uint32_t)0x00008000)        /*!<Asynchronous wait          */
S#define  FMC_BCR2_CBURSTRW                  ((uint32_t)0x00080000)        /*!<Write burst enable         */
S
S/******************  Bit definition for FMC_BCR3 register  *******************/
S#define  FMC_BCR3_MBKEN                     ((uint32_t)0x00000001)        /*!<Memory bank enable bit                 */
S#define  FMC_BCR3_MUXEN                     ((uint32_t)0x00000002)        /*!<Address/data multiplexing enable bit   */
S
S#define  FMC_BCR3_MTYP                      ((uint32_t)0x0000000C)        /*!<MTYP[1:0] bits (Memory type)           */
S#define  FMC_BCR3_MTYP_0                    ((uint32_t)0x00000004)        /*!<Bit 0 */
S#define  FMC_BCR3_MTYP_1                    ((uint32_t)0x00000008)        /*!<Bit 1 */
S
S#define  FMC_BCR3_MWID                      ((uint32_t)0x00000030)        /*!<MWID[1:0] bits (Memory data bus width) */
S#define  FMC_BCR3_MWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BCR3_MWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FMC_BCR3_FACCEN                    ((uint32_t)0x00000040)        /*!<Flash access enable        */
S#define  FMC_BCR3_BURSTEN                   ((uint32_t)0x00000100)        /*!<Burst enable bit           */
S#define  FMC_BCR3_WAITPOL                   ((uint32_t)0x00000200)        /*!<Wait signal polarity bit   */
S#define  FMC_BCR3_WRAPMOD                   ((uint32_t)0x00000400)        /*!<Wrapped burst mode support */
S#define  FMC_BCR3_WAITCFG                   ((uint32_t)0x00000800)        /*!<Wait timing configuration  */
S#define  FMC_BCR3_WREN                      ((uint32_t)0x00001000)        /*!<Write enable bit           */
S#define  FMC_BCR3_WAITEN                    ((uint32_t)0x00002000)        /*!<Wait enable bit            */
S#define  FMC_BCR3_EXTMOD                    ((uint32_t)0x00004000)        /*!<Extended mode enable       */
S#define  FMC_BCR3_ASYNCWAIT                 ((uint32_t)0x00008000)        /*!<Asynchronous wait          */
S#define  FMC_BCR3_CBURSTRW                  ((uint32_t)0x00080000)        /*!<Write burst enable         */
S
S/******************  Bit definition for FMC_BCR4 register  *******************/
S#define  FMC_BCR4_MBKEN                     ((uint32_t)0x00000001)        /*!<Memory bank enable bit                 */
S#define  FMC_BCR4_MUXEN                     ((uint32_t)0x00000002)        /*!<Address/data multiplexing enable bit   */
S
S#define  FMC_BCR4_MTYP                      ((uint32_t)0x0000000C)        /*!<MTYP[1:0] bits (Memory type)           */
S#define  FMC_BCR4_MTYP_0                    ((uint32_t)0x00000004)        /*!<Bit 0 */
S#define  FMC_BCR4_MTYP_1                    ((uint32_t)0x00000008)        /*!<Bit 1 */
S
S#define  FMC_BCR4_MWID                      ((uint32_t)0x00000030)        /*!<MWID[1:0] bits (Memory data bus width) */
S#define  FMC_BCR4_MWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BCR4_MWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FMC_BCR4_FACCEN                    ((uint32_t)0x00000040)        /*!<Flash access enable        */
S#define  FMC_BCR4_BURSTEN                   ((uint32_t)0x00000100)        /*!<Burst enable bit           */
S#define  FMC_BCR4_WAITPOL                   ((uint32_t)0x00000200)        /*!<Wait signal polarity bit   */
S#define  FMC_BCR4_WRAPMOD                   ((uint32_t)0x00000400)        /*!<Wrapped burst mode support */
S#define  FMC_BCR4_WAITCFG                   ((uint32_t)0x00000800)        /*!<Wait timing configuration  */
S#define  FMC_BCR4_WREN                      ((uint32_t)0x00001000)        /*!<Write enable bit           */
S#define  FMC_BCR4_WAITEN                    ((uint32_t)0x00002000)        /*!<Wait enable bit            */
S#define  FMC_BCR4_EXTMOD                    ((uint32_t)0x00004000)        /*!<Extended mode enable       */
S#define  FMC_BCR4_ASYNCWAIT                 ((uint32_t)0x00008000)        /*!<Asynchronous wait          */
S#define  FMC_BCR4_CBURSTRW                  ((uint32_t)0x00080000)        /*!<Write burst enable         */
S
S/******************  Bit definition for FMC_BTR1 register  ******************/
S#define  FMC_BTR1_ADDSET                    ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FMC_BTR1_ADDSET_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_BTR1_ADDSET_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_BTR1_ADDSET_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_BTR1_ADDSET_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FMC_BTR1_ADDHLD                    ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration)  */
S#define  FMC_BTR1_ADDHLD_0                  ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BTR1_ADDHLD_1                  ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_BTR1_ADDHLD_2                  ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_BTR1_ADDHLD_3                  ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_BTR1_DATAST                    ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FMC_BTR1_DATAST_0                  ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_BTR1_DATAST_1                  ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_BTR1_DATAST_2                  ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_BTR1_DATAST_3                  ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_BTR1_DATAST_4                  ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_BTR1_DATAST_5                  ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_BTR1_DATAST_6                  ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_BTR1_DATAST_7                  ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_BTR1_BUSTURN                   ((uint32_t)0x000F0000)        /*!<BUSTURN[3:0] bits (Bus turnaround phase duration) */
S#define  FMC_BTR1_BUSTURN_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_BTR1_BUSTURN_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_BTR1_BUSTURN_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_BTR1_BUSTURN_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
S
S#define  FMC_BTR1_CLKDIV                    ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FMC_BTR1_CLKDIV_0                  ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_BTR1_CLKDIV_1                  ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FMC_BTR1_CLKDIV_2                  ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FMC_BTR1_CLKDIV_3                  ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FMC_BTR1_DATLAT                    ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FMC_BTR1_DATLAT_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_BTR1_DATLAT_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_BTR1_DATLAT_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_BTR1_DATLAT_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FMC_BTR1_ACCMOD                    ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FMC_BTR1_ACCMOD_0                  ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FMC_BTR1_ACCMOD_1                  ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FMC_BTR2 register  *******************/
S#define  FMC_BTR2_ADDSET                    ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FMC_BTR2_ADDSET_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_BTR2_ADDSET_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_BTR2_ADDSET_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_BTR2_ADDSET_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FMC_BTR2_ADDHLD                    ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FMC_BTR2_ADDHLD_0                  ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BTR2_ADDHLD_1                  ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_BTR2_ADDHLD_2                  ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_BTR2_ADDHLD_3                  ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_BTR2_DATAST                    ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FMC_BTR2_DATAST_0                  ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_BTR2_DATAST_1                  ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_BTR2_DATAST_2                  ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_BTR2_DATAST_3                  ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_BTR2_DATAST_4                  ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_BTR2_DATAST_5                  ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_BTR2_DATAST_6                  ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_BTR2_DATAST_7                  ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_BTR2_BUSTURN                   ((uint32_t)0x000F0000)        /*!<BUSTURN[3:0] bits (Bus turnaround phase duration) */
S#define  FMC_BTR2_BUSTURN_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_BTR2_BUSTURN_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_BTR2_BUSTURN_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_BTR2_BUSTURN_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
S
S#define  FMC_BTR2_CLKDIV                    ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FMC_BTR2_CLKDIV_0                  ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_BTR2_CLKDIV_1                  ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FMC_BTR2_CLKDIV_2                  ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FMC_BTR2_CLKDIV_3                  ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FMC_BTR2_DATLAT                    ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FMC_BTR2_DATLAT_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_BTR2_DATLAT_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_BTR2_DATLAT_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_BTR2_DATLAT_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FMC_BTR2_ACCMOD                    ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FMC_BTR2_ACCMOD_0                  ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FMC_BTR2_ACCMOD_1                  ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/*******************  Bit definition for FMC_BTR3 register  *******************/
S#define  FMC_BTR3_ADDSET                    ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FMC_BTR3_ADDSET_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_BTR3_ADDSET_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_BTR3_ADDSET_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_BTR3_ADDSET_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FMC_BTR3_ADDHLD                    ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FMC_BTR3_ADDHLD_0                  ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BTR3_ADDHLD_1                  ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_BTR3_ADDHLD_2                  ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_BTR3_ADDHLD_3                  ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_BTR3_DATAST                    ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FMC_BTR3_DATAST_0                  ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_BTR3_DATAST_1                  ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_BTR3_DATAST_2                  ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_BTR3_DATAST_3                  ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_BTR3_DATAST_4                  ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_BTR3_DATAST_5                  ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_BTR3_DATAST_6                  ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_BTR3_DATAST_7                  ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_BTR3_BUSTURN                   ((uint32_t)0x000F0000)        /*!<BUSTURN[3:0] bits (Bus turnaround phase duration) */
S#define  FMC_BTR3_BUSTURN_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_BTR3_BUSTURN_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_BTR3_BUSTURN_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_BTR3_BUSTURN_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
S
S#define  FMC_BTR3_CLKDIV                    ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FMC_BTR3_CLKDIV_0                  ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_BTR3_CLKDIV_1                  ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FMC_BTR3_CLKDIV_2                  ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FMC_BTR3_CLKDIV_3                  ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FMC_BTR3_DATLAT                    ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FMC_BTR3_DATLAT_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_BTR3_DATLAT_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_BTR3_DATLAT_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_BTR3_DATLAT_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FMC_BTR3_ACCMOD                    ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FMC_BTR3_ACCMOD_0                  ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FMC_BTR3_ACCMOD_1                  ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FMC_BTR4 register  *******************/
S#define  FMC_BTR4_ADDSET                    ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FMC_BTR4_ADDSET_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_BTR4_ADDSET_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_BTR4_ADDSET_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_BTR4_ADDSET_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FMC_BTR4_ADDHLD                    ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FMC_BTR4_ADDHLD_0                  ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BTR4_ADDHLD_1                  ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_BTR4_ADDHLD_2                  ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_BTR4_ADDHLD_3                  ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_BTR4_DATAST                    ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FMC_BTR4_DATAST_0                  ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_BTR4_DATAST_1                  ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_BTR4_DATAST_2                  ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_BTR4_DATAST_3                  ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_BTR4_DATAST_4                  ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_BTR4_DATAST_5                  ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_BTR4_DATAST_6                  ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_BTR4_DATAST_7                  ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_BTR4_BUSTURN                   ((uint32_t)0x000F0000)        /*!<BUSTURN[3:0] bits (Bus turnaround phase duration) */
S#define  FMC_BTR4_BUSTURN_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_BTR4_BUSTURN_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_BTR4_BUSTURN_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_BTR4_BUSTURN_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
S
S#define  FMC_BTR4_CLKDIV                    ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FMC_BTR4_CLKDIV_0                  ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_BTR4_CLKDIV_1                  ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FMC_BTR4_CLKDIV_2                  ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FMC_BTR4_CLKDIV_3                  ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FMC_BTR4_DATLAT                    ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FMC_BTR4_DATLAT_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_BTR4_DATLAT_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_BTR4_DATLAT_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_BTR4_DATLAT_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FMC_BTR4_ACCMOD                    ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FMC_BTR4_ACCMOD_0                  ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FMC_BTR4_ACCMOD_1                  ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FMC_BWTR1 register  ******************/
S#define  FMC_BWTR1_ADDSET                   ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FMC_BWTR1_ADDSET_0                 ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_BWTR1_ADDSET_1                 ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_BWTR1_ADDSET_2                 ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_BWTR1_ADDSET_3                 ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FMC_BWTR1_ADDHLD                   ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FMC_BWTR1_ADDHLD_0                 ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BWTR1_ADDHLD_1                 ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_BWTR1_ADDHLD_2                 ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_BWTR1_ADDHLD_3                 ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_BWTR1_DATAST                   ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FMC_BWTR1_DATAST_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_BWTR1_DATAST_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_BWTR1_DATAST_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_BWTR1_DATAST_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_BWTR1_DATAST_4                 ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_BWTR1_DATAST_5                 ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_BWTR1_DATAST_6                 ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_BWTR1_DATAST_7                 ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_BWTR1_CLKDIV                   ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FMC_BWTR1_CLKDIV_0                 ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_BWTR1_CLKDIV_1                 ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FMC_BWTR1_CLKDIV_2                 ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FMC_BWTR1_CLKDIV_3                 ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FMC_BWTR1_DATLAT                   ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FMC_BWTR1_DATLAT_0                 ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_BWTR1_DATLAT_1                 ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_BWTR1_DATLAT_2                 ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_BWTR1_DATLAT_3                 ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FMC_BWTR1_ACCMOD                   ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FMC_BWTR1_ACCMOD_0                 ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FMC_BWTR1_ACCMOD_1                 ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FMC_BWTR2 register  ******************/
S#define  FMC_BWTR2_ADDSET                   ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FMC_BWTR2_ADDSET_0                 ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_BWTR2_ADDSET_1                 ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_BWTR2_ADDSET_2                 ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_BWTR2_ADDSET_3                 ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FMC_BWTR2_ADDHLD                   ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FMC_BWTR2_ADDHLD_0                 ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BWTR2_ADDHLD_1                 ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_BWTR2_ADDHLD_2                 ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_BWTR2_ADDHLD_3                 ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_BWTR2_DATAST                   ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FMC_BWTR2_DATAST_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_BWTR2_DATAST_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_BWTR2_DATAST_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_BWTR2_DATAST_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_BWTR2_DATAST_4                 ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_BWTR2_DATAST_5                 ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_BWTR2_DATAST_6                 ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_BWTR2_DATAST_7                 ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_BWTR2_CLKDIV                   ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FMC_BWTR2_CLKDIV_0                 ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_BWTR2_CLKDIV_1                 ((uint32_t)0x00200000)        /*!<Bit 1*/
S#define  FMC_BWTR2_CLKDIV_2                 ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FMC_BWTR2_CLKDIV_3                 ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FMC_BWTR2_DATLAT                   ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FMC_BWTR2_DATLAT_0                 ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_BWTR2_DATLAT_1                 ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_BWTR2_DATLAT_2                 ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_BWTR2_DATLAT_3                 ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FMC_BWTR2_ACCMOD                   ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FMC_BWTR2_ACCMOD_0                 ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FMC_BWTR2_ACCMOD_1                 ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FMC_BWTR3 register  ******************/
S#define  FMC_BWTR3_ADDSET                   ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FMC_BWTR3_ADDSET_0                 ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_BWTR3_ADDSET_1                 ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_BWTR3_ADDSET_2                 ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_BWTR3_ADDSET_3                 ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FMC_BWTR3_ADDHLD                   ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FMC_BWTR3_ADDHLD_0                 ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BWTR3_ADDHLD_1                 ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_BWTR3_ADDHLD_2                 ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_BWTR3_ADDHLD_3                 ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_BWTR3_DATAST                   ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FMC_BWTR3_DATAST_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_BWTR3_DATAST_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_BWTR3_DATAST_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_BWTR3_DATAST_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_BWTR3_DATAST_4                 ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_BWTR3_DATAST_5                 ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_BWTR3_DATAST_6                 ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_BWTR3_DATAST_7                 ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_BWTR3_CLKDIV                   ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FMC_BWTR3_CLKDIV_0                 ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_BWTR3_CLKDIV_1                 ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FMC_BWTR3_CLKDIV_2                 ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FMC_BWTR3_CLKDIV_3                 ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FMC_BWTR3_DATLAT                   ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FMC_BWTR3_DATLAT_0                 ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_BWTR3_DATLAT_1                 ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_BWTR3_DATLAT_2                 ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_BWTR3_DATLAT_3                 ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FMC_BWTR3_ACCMOD                   ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FMC_BWTR3_ACCMOD_0                 ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FMC_BWTR3_ACCMOD_1                 ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FMC_BWTR4 register  ******************/
S#define  FMC_BWTR4_ADDSET                   ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FMC_BWTR4_ADDSET_0                 ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_BWTR4_ADDSET_1                 ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_BWTR4_ADDSET_2                 ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_BWTR4_ADDSET_3                 ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FMC_BWTR4_ADDHLD                   ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FMC_BWTR4_ADDHLD_0                 ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BWTR4_ADDHLD_1                 ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_BWTR4_ADDHLD_2                 ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_BWTR4_ADDHLD_3                 ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_BWTR4_DATAST                   ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FMC_BWTR4_DATAST_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_BWTR4_DATAST_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_BWTR4_DATAST_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_BWTR4_DATAST_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_BWTR4_DATAST_4                 ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_BWTR4_DATAST_5                 ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_BWTR4_DATAST_6                 ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_BWTR4_DATAST_7                 ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_BWTR4_CLKDIV                   ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FMC_BWTR4_CLKDIV_0                 ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_BWTR4_CLKDIV_1                 ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FMC_BWTR4_CLKDIV_2                 ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FMC_BWTR4_CLKDIV_3                 ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FMC_BWTR4_DATLAT                   ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FMC_BWTR4_DATLAT_0                 ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_BWTR4_DATLAT_1                 ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_BWTR4_DATLAT_2                 ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_BWTR4_DATLAT_3                 ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FMC_BWTR4_ACCMOD                   ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FMC_BWTR4_ACCMOD_0                 ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FMC_BWTR4_ACCMOD_1                 ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FMC_PCR2 register  *******************/
S#define  FMC_PCR2_PWAITEN                   ((uint32_t)0x00000002)        /*!<Wait feature enable bit                   */
S#define  FMC_PCR2_PBKEN                     ((uint32_t)0x00000004)        /*!<PC Card/NAND Flash memory bank enable bit */
S#define  FMC_PCR2_PTYP                      ((uint32_t)0x00000008)        /*!<Memory type                               */
S
S#define  FMC_PCR2_PWID                      ((uint32_t)0x00000030)        /*!<PWID[1:0] bits (NAND Flash databus width) */
S#define  FMC_PCR2_PWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_PCR2_PWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FMC_PCR2_ECCEN                     ((uint32_t)0x00000040)        /*!<ECC computation logic enable bit          */
S
S#define  FMC_PCR2_TCLR                      ((uint32_t)0x00001E00)        /*!<TCLR[3:0] bits (CLE to RE delay)          */
S#define  FMC_PCR2_TCLR_0                    ((uint32_t)0x00000200)        /*!<Bit 0 */
S#define  FMC_PCR2_TCLR_1                    ((uint32_t)0x00000400)        /*!<Bit 1 */
S#define  FMC_PCR2_TCLR_2                    ((uint32_t)0x00000800)        /*!<Bit 2 */
S#define  FMC_PCR2_TCLR_3                    ((uint32_t)0x00001000)        /*!<Bit 3 */
S
S#define  FMC_PCR2_TAR                       ((uint32_t)0x0001E000)        /*!<TAR[3:0] bits (ALE to RE delay)           */
S#define  FMC_PCR2_TAR_0                     ((uint32_t)0x00002000)        /*!<Bit 0 */
S#define  FMC_PCR2_TAR_1                     ((uint32_t)0x00004000)        /*!<Bit 1 */
S#define  FMC_PCR2_TAR_2                     ((uint32_t)0x00008000)        /*!<Bit 2 */
S#define  FMC_PCR2_TAR_3                     ((uint32_t)0x00010000)        /*!<Bit 3 */
S
S#define  FMC_PCR2_ECCPS                     ((uint32_t)0x000E0000)        /*!<ECCPS[1:0] bits (ECC page size)           */
S#define  FMC_PCR2_ECCPS_0                   ((uint32_t)0x00020000)        /*!<Bit 0 */
S#define  FMC_PCR2_ECCPS_1                   ((uint32_t)0x00040000)        /*!<Bit 1 */
S#define  FMC_PCR2_ECCPS_2                   ((uint32_t)0x00080000)        /*!<Bit 2 */
S
S/******************  Bit definition for FMC_PCR3 register  *******************/
S#define  FMC_PCR3_PWAITEN                   ((uint32_t)0x00000002)        /*!<Wait feature enable bit                   */
S#define  FMC_PCR3_PBKEN                     ((uint32_t)0x00000004)        /*!<PC Card/NAND Flash memory bank enable bit */
S#define  FMC_PCR3_PTYP                      ((uint32_t)0x00000008)        /*!<Memory type                               */
S
S#define  FMC_PCR3_PWID                      ((uint32_t)0x00000030)        /*!<PWID[1:0] bits (NAND Flash databus width) */
S#define  FMC_PCR3_PWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_PCR3_PWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FMC_PCR3_ECCEN                     ((uint32_t)0x00000040)        /*!<ECC computation logic enable bit          */
S
S#define  FMC_PCR3_TCLR                      ((uint32_t)0x00001E00)        /*!<TCLR[3:0] bits (CLE to RE delay)          */
S#define  FMC_PCR3_TCLR_0                    ((uint32_t)0x00000200)        /*!<Bit 0 */
S#define  FMC_PCR3_TCLR_1                    ((uint32_t)0x00000400)        /*!<Bit 1 */
S#define  FMC_PCR3_TCLR_2                    ((uint32_t)0x00000800)        /*!<Bit 2 */
S#define  FMC_PCR3_TCLR_3                    ((uint32_t)0x00001000)        /*!<Bit 3 */
S
S#define  FMC_PCR3_TAR                       ((uint32_t)0x0001E000)        /*!<TAR[3:0] bits (ALE to RE delay)           */
S#define  FMC_PCR3_TAR_0                     ((uint32_t)0x00002000)        /*!<Bit 0 */
S#define  FMC_PCR3_TAR_1                     ((uint32_t)0x00004000)        /*!<Bit 1 */
S#define  FMC_PCR3_TAR_2                     ((uint32_t)0x00008000)        /*!<Bit 2 */
S#define  FMC_PCR3_TAR_3                     ((uint32_t)0x00010000)        /*!<Bit 3 */
S
S#define  FMC_PCR3_ECCPS                     ((uint32_t)0x000E0000)        /*!<ECCPS[2:0] bits (ECC page size)           */
S#define  FMC_PCR3_ECCPS_0                   ((uint32_t)0x00020000)        /*!<Bit 0 */
S#define  FMC_PCR3_ECCPS_1                   ((uint32_t)0x00040000)        /*!<Bit 1 */
S#define  FMC_PCR3_ECCPS_2                   ((uint32_t)0x00080000)        /*!<Bit 2 */
S
S/******************  Bit definition for FMC_PCR4 register  *******************/
S#define  FMC_PCR4_PWAITEN                   ((uint32_t)0x00000002)        /*!<Wait feature enable bit                   */
S#define  FMC_PCR4_PBKEN                     ((uint32_t)0x00000004)        /*!<PC Card/NAND Flash memory bank enable bit */
S#define  FMC_PCR4_PTYP                      ((uint32_t)0x00000008)        /*!<Memory type                               */
S
S#define  FMC_PCR4_PWID                      ((uint32_t)0x00000030)        /*!<PWID[1:0] bits (NAND Flash databus width) */
S#define  FMC_PCR4_PWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_PCR4_PWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FMC_PCR4_ECCEN                     ((uint32_t)0x00000040)        /*!<ECC computation logic enable bit          */
S
S#define  FMC_PCR4_TCLR                      ((uint32_t)0x00001E00)        /*!<TCLR[3:0] bits (CLE to RE delay)          */
S#define  FMC_PCR4_TCLR_0                    ((uint32_t)0x00000200)        /*!<Bit 0 */
S#define  FMC_PCR4_TCLR_1                    ((uint32_t)0x00000400)        /*!<Bit 1 */
S#define  FMC_PCR4_TCLR_2                    ((uint32_t)0x00000800)        /*!<Bit 2 */
S#define  FMC_PCR4_TCLR_3                    ((uint32_t)0x00001000)        /*!<Bit 3 */
S
S#define  FMC_PCR4_TAR                       ((uint32_t)0x0001E000)        /*!<TAR[3:0] bits (ALE to RE delay)           */
S#define  FMC_PCR4_TAR_0                     ((uint32_t)0x00002000)        /*!<Bit 0 */
S#define  FMC_PCR4_TAR_1                     ((uint32_t)0x00004000)        /*!<Bit 1 */
S#define  FMC_PCR4_TAR_2                     ((uint32_t)0x00008000)        /*!<Bit 2 */
S#define  FMC_PCR4_TAR_3                     ((uint32_t)0x00010000)        /*!<Bit 3 */
S
S#define  FMC_PCR4_ECCPS                     ((uint32_t)0x000E0000)        /*!<ECCPS[2:0] bits (ECC page size)           */
S#define  FMC_PCR4_ECCPS_0                   ((uint32_t)0x00020000)        /*!<Bit 0 */
S#define  FMC_PCR4_ECCPS_1                   ((uint32_t)0x00040000)        /*!<Bit 1 */
S#define  FMC_PCR4_ECCPS_2                   ((uint32_t)0x00080000)        /*!<Bit 2 */
S
S/*******************  Bit definition for FMC_SR2 register  *******************/
S#define  FMC_SR2_IRS                        ((uint8_t)0x01)               /*!<Interrupt Rising Edge status                */
S#define  FMC_SR2_ILS                        ((uint8_t)0x02)               /*!<Interrupt Level status                      */
S#define  FMC_SR2_IFS                        ((uint8_t)0x04)               /*!<Interrupt Falling Edge status               */
S#define  FMC_SR2_IREN                       ((uint8_t)0x08)               /*!<Interrupt Rising Edge detection Enable bit  */
S#define  FMC_SR2_ILEN                       ((uint8_t)0x10)               /*!<Interrupt Level detection Enable bit        */
S#define  FMC_SR2_IFEN                       ((uint8_t)0x20)               /*!<Interrupt Falling Edge detection Enable bit */
S#define  FMC_SR2_FEMPT                      ((uint8_t)0x40)               /*!<FIFO empty                                  */
S
S/*******************  Bit definition for FMC_SR3 register  *******************/
S#define  FMC_SR3_IRS                        ((uint8_t)0x01)               /*!<Interrupt Rising Edge status                */
S#define  FMC_SR3_ILS                        ((uint8_t)0x02)               /*!<Interrupt Level status                      */
S#define  FMC_SR3_IFS                        ((uint8_t)0x04)               /*!<Interrupt Falling Edge status               */
S#define  FMC_SR3_IREN                       ((uint8_t)0x08)               /*!<Interrupt Rising Edge detection Enable bit  */
S#define  FMC_SR3_ILEN                       ((uint8_t)0x10)               /*!<Interrupt Level detection Enable bit        */
S#define  FMC_SR3_IFEN                       ((uint8_t)0x20)               /*!<Interrupt Falling Edge detection Enable bit */
S#define  FMC_SR3_FEMPT                      ((uint8_t)0x40)               /*!<FIFO empty                                  */
S
S/*******************  Bit definition for FMC_SR4 register  *******************/
S#define  FMC_SR4_IRS                        ((uint8_t)0x01)               /*!<Interrupt Rising Edge status                */
S#define  FMC_SR4_ILS                        ((uint8_t)0x02)               /*!<Interrupt Level status                      */
S#define  FMC_SR4_IFS                        ((uint8_t)0x04)               /*!<Interrupt Falling Edge status               */
S#define  FMC_SR4_IREN                       ((uint8_t)0x08)               /*!<Interrupt Rising Edge detection Enable bit  */
S#define  FMC_SR4_ILEN                       ((uint8_t)0x10)               /*!<Interrupt Level detection Enable bit        */
S#define  FMC_SR4_IFEN                       ((uint8_t)0x20)               /*!<Interrupt Falling Edge detection Enable bit */
S#define  FMC_SR4_FEMPT                      ((uint8_t)0x40)               /*!<FIFO empty                                  */
S
S/******************  Bit definition for FMC_PMEM2 register  ******************/
S#define  FMC_PMEM2_MEMSET2                  ((uint32_t)0x000000FF)        /*!<MEMSET2[7:0] bits (Common memory 2 setup time) */
S#define  FMC_PMEM2_MEMSET2_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_PMEM2_MEMSET2_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_PMEM2_MEMSET2_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_PMEM2_MEMSET2_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FMC_PMEM2_MEMSET2_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FMC_PMEM2_MEMSET2_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FMC_PMEM2_MEMSET2_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FMC_PMEM2_MEMSET2_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FMC_PMEM2_MEMWAIT2                 ((uint32_t)0x0000FF00)        /*!<MEMWAIT2[7:0] bits (Common memory 2 wait time) */
S#define  FMC_PMEM2_MEMWAIT2_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_PMEM2_MEMWAIT2_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_PMEM2_MEMWAIT2_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_PMEM2_MEMWAIT2_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_PMEM2_MEMWAIT2_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_PMEM2_MEMWAIT2_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_PMEM2_MEMWAIT2_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_PMEM2_MEMWAIT2_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_PMEM2_MEMHOLD2                 ((uint32_t)0x00FF0000)        /*!<MEMHOLD2[7:0] bits (Common memory 2 hold time) */
S#define  FMC_PMEM2_MEMHOLD2_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_PMEM2_MEMHOLD2_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_PMEM2_MEMHOLD2_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_PMEM2_MEMHOLD2_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FMC_PMEM2_MEMHOLD2_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FMC_PMEM2_MEMHOLD2_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FMC_PMEM2_MEMHOLD2_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FMC_PMEM2_MEMHOLD2_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FMC_PMEM2_MEMHIZ2                  ((uint32_t)0xFF000000)        /*!<MEMHIZ2[7:0] bits (Common memory 2 databus HiZ time) */
S#define  FMC_PMEM2_MEMHIZ2_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_PMEM2_MEMHIZ2_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_PMEM2_MEMHIZ2_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_PMEM2_MEMHIZ2_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FMC_PMEM2_MEMHIZ2_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FMC_PMEM2_MEMHIZ2_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FMC_PMEM2_MEMHIZ2_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FMC_PMEM2_MEMHIZ2_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FMC_PMEM3 register  ******************/
S#define  FMC_PMEM3_MEMSET3                  ((uint32_t)0x000000FF)        /*!<MEMSET3[7:0] bits (Common memory 3 setup time) */
S#define  FMC_PMEM3_MEMSET3_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_PMEM3_MEMSET3_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_PMEM3_MEMSET3_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_PMEM3_MEMSET3_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FMC_PMEM3_MEMSET3_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FMC_PMEM3_MEMSET3_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FMC_PMEM3_MEMSET3_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FMC_PMEM3_MEMSET3_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FMC_PMEM3_MEMWAIT3                 ((uint32_t)0x0000FF00)        /*!<MEMWAIT3[7:0] bits (Common memory 3 wait time) */
S#define  FMC_PMEM3_MEMWAIT3_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_PMEM3_MEMWAIT3_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_PMEM3_MEMWAIT3_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_PMEM3_MEMWAIT3_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_PMEM3_MEMWAIT3_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_PMEM3_MEMWAIT3_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_PMEM3_MEMWAIT3_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_PMEM3_MEMWAIT3_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_PMEM3_MEMHOLD3                 ((uint32_t)0x00FF0000)        /*!<MEMHOLD3[7:0] bits (Common memory 3 hold time) */
S#define  FMC_PMEM3_MEMHOLD3_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_PMEM3_MEMHOLD3_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_PMEM3_MEMHOLD3_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_PMEM3_MEMHOLD3_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FMC_PMEM3_MEMHOLD3_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FMC_PMEM3_MEMHOLD3_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FMC_PMEM3_MEMHOLD3_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FMC_PMEM3_MEMHOLD3_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FMC_PMEM3_MEMHIZ3                  ((uint32_t)0xFF000000)        /*!<MEMHIZ3[7:0] bits (Common memory 3 databus HiZ time) */
S#define  FMC_PMEM3_MEMHIZ3_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_PMEM3_MEMHIZ3_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_PMEM3_MEMHIZ3_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_PMEM3_MEMHIZ3_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FMC_PMEM3_MEMHIZ3_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FMC_PMEM3_MEMHIZ3_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FMC_PMEM3_MEMHIZ3_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FMC_PMEM3_MEMHIZ3_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FMC_PMEM4 register  ******************/
S#define  FMC_PMEM4_MEMSET4                  ((uint32_t)0x000000FF)        /*!<MEMSET4[7:0] bits (Common memory 4 setup time) */
S#define  FMC_PMEM4_MEMSET4_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_PMEM4_MEMSET4_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_PMEM4_MEMSET4_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_PMEM4_MEMSET4_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FMC_PMEM4_MEMSET4_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FMC_PMEM4_MEMSET4_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FMC_PMEM4_MEMSET4_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FMC_PMEM4_MEMSET4_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FMC_PMEM4_MEMWAIT4                 ((uint32_t)0x0000FF00)        /*!<MEMWAIT4[7:0] bits (Common memory 4 wait time) */
S#define  FMC_PMEM4_MEMWAIT4_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_PMEM4_MEMWAIT4_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_PMEM4_MEMWAIT4_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_PMEM4_MEMWAIT4_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_PMEM4_MEMWAIT4_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_PMEM4_MEMWAIT4_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_PMEM4_MEMWAIT4_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_PMEM4_MEMWAIT4_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_PMEM4_MEMHOLD4                 ((uint32_t)0x00FF0000)        /*!<MEMHOLD4[7:0] bits (Common memory 4 hold time) */
S#define  FMC_PMEM4_MEMHOLD4_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_PMEM4_MEMHOLD4_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_PMEM4_MEMHOLD4_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_PMEM4_MEMHOLD4_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FMC_PMEM4_MEMHOLD4_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FMC_PMEM4_MEMHOLD4_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FMC_PMEM4_MEMHOLD4_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FMC_PMEM4_MEMHOLD4_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FMC_PMEM4_MEMHIZ4                  ((uint32_t)0xFF000000)        /*!<MEMHIZ4[7:0] bits (Common memory 4 databus HiZ time) */
S#define  FMC_PMEM4_MEMHIZ4_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_PMEM4_MEMHIZ4_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_PMEM4_MEMHIZ4_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_PMEM4_MEMHIZ4_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FMC_PMEM4_MEMHIZ4_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FMC_PMEM4_MEMHIZ4_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FMC_PMEM4_MEMHIZ4_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FMC_PMEM4_MEMHIZ4_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FMC_PATT2 register  ******************/
S#define  FMC_PATT2_ATTSET2                  ((uint32_t)0x000000FF)        /*!<ATTSET2[7:0] bits (Attribute memory 2 setup time) */
S#define  FMC_PATT2_ATTSET2_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_PATT2_ATTSET2_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_PATT2_ATTSET2_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_PATT2_ATTSET2_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FMC_PATT2_ATTSET2_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FMC_PATT2_ATTSET2_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FMC_PATT2_ATTSET2_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FMC_PATT2_ATTSET2_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FMC_PATT2_ATTWAIT2                 ((uint32_t)0x0000FF00)        /*!<ATTWAIT2[7:0] bits (Attribute memory 2 wait time) */
S#define  FMC_PATT2_ATTWAIT2_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_PATT2_ATTWAIT2_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_PATT2_ATTWAIT2_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_PATT2_ATTWAIT2_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_PATT2_ATTWAIT2_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_PATT2_ATTWAIT2_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_PATT2_ATTWAIT2_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_PATT2_ATTWAIT2_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_PATT2_ATTHOLD2                 ((uint32_t)0x00FF0000)        /*!<ATTHOLD2[7:0] bits (Attribute memory 2 hold time) */
S#define  FMC_PATT2_ATTHOLD2_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_PATT2_ATTHOLD2_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_PATT2_ATTHOLD2_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_PATT2_ATTHOLD2_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FMC_PATT2_ATTHOLD2_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FMC_PATT2_ATTHOLD2_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FMC_PATT2_ATTHOLD2_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FMC_PATT2_ATTHOLD2_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FMC_PATT2_ATTHIZ2                  ((uint32_t)0xFF000000)        /*!<ATTHIZ2[7:0] bits (Attribute memory 2 databus HiZ time) */
S#define  FMC_PATT2_ATTHIZ2_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_PATT2_ATTHIZ2_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_PATT2_ATTHIZ2_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_PATT2_ATTHIZ2_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FMC_PATT2_ATTHIZ2_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FMC_PATT2_ATTHIZ2_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FMC_PATT2_ATTHIZ2_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FMC_PATT2_ATTHIZ2_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FMC_PATT3 register  ******************/
S#define  FMC_PATT3_ATTSET3                  ((uint32_t)0x000000FF)        /*!<ATTSET3[7:0] bits (Attribute memory 3 setup time) */
S#define  FMC_PATT3_ATTSET3_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_PATT3_ATTSET3_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_PATT3_ATTSET3_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_PATT3_ATTSET3_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FMC_PATT3_ATTSET3_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FMC_PATT3_ATTSET3_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FMC_PATT3_ATTSET3_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FMC_PATT3_ATTSET3_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FMC_PATT3_ATTWAIT3                 ((uint32_t)0x0000FF00)        /*!<ATTWAIT3[7:0] bits (Attribute memory 3 wait time) */
S#define  FMC_PATT3_ATTWAIT3_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_PATT3_ATTWAIT3_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_PATT3_ATTWAIT3_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_PATT3_ATTWAIT3_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_PATT3_ATTWAIT3_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_PATT3_ATTWAIT3_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_PATT3_ATTWAIT3_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_PATT3_ATTWAIT3_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_PATT3_ATTHOLD3                 ((uint32_t)0x00FF0000)        /*!<ATTHOLD3[7:0] bits (Attribute memory 3 hold time) */
S#define  FMC_PATT3_ATTHOLD3_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_PATT3_ATTHOLD3_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_PATT3_ATTHOLD3_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_PATT3_ATTHOLD3_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FMC_PATT3_ATTHOLD3_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FMC_PATT3_ATTHOLD3_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FMC_PATT3_ATTHOLD3_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FMC_PATT3_ATTHOLD3_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FMC_PATT3_ATTHIZ3                  ((uint32_t)0xFF000000)        /*!<ATTHIZ3[7:0] bits (Attribute memory 3 databus HiZ time) */
S#define  FMC_PATT3_ATTHIZ3_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_PATT3_ATTHIZ3_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_PATT3_ATTHIZ3_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_PATT3_ATTHIZ3_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FMC_PATT3_ATTHIZ3_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FMC_PATT3_ATTHIZ3_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FMC_PATT3_ATTHIZ3_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FMC_PATT3_ATTHIZ3_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FMC_PATT4 register  ******************/
S#define  FMC_PATT4_ATTSET4                  ((uint32_t)0x000000FF)        /*!<ATTSET4[7:0] bits (Attribute memory 4 setup time) */
S#define  FMC_PATT4_ATTSET4_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_PATT4_ATTSET4_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_PATT4_ATTSET4_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_PATT4_ATTSET4_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FMC_PATT4_ATTSET4_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FMC_PATT4_ATTSET4_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FMC_PATT4_ATTSET4_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FMC_PATT4_ATTSET4_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FMC_PATT4_ATTWAIT4                 ((uint32_t)0x0000FF00)        /*!<ATTWAIT4[7:0] bits (Attribute memory 4 wait time) */
S#define  FMC_PATT4_ATTWAIT4_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_PATT4_ATTWAIT4_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_PATT4_ATTWAIT4_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_PATT4_ATTWAIT4_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_PATT4_ATTWAIT4_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_PATT4_ATTWAIT4_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_PATT4_ATTWAIT4_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_PATT4_ATTWAIT4_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_PATT4_ATTHOLD4                 ((uint32_t)0x00FF0000)        /*!<ATTHOLD4[7:0] bits (Attribute memory 4 hold time) */
S#define  FMC_PATT4_ATTHOLD4_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_PATT4_ATTHOLD4_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_PATT4_ATTHOLD4_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_PATT4_ATTHOLD4_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FMC_PATT4_ATTHOLD4_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FMC_PATT4_ATTHOLD4_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FMC_PATT4_ATTHOLD4_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FMC_PATT4_ATTHOLD4_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FMC_PATT4_ATTHIZ4                  ((uint32_t)0xFF000000)        /*!<ATTHIZ4[7:0] bits (Attribute memory 4 databus HiZ time) */
S#define  FMC_PATT4_ATTHIZ4_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_PATT4_ATTHIZ4_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_PATT4_ATTHIZ4_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_PATT4_ATTHIZ4_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FMC_PATT4_ATTHIZ4_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FMC_PATT4_ATTHIZ4_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FMC_PATT4_ATTHIZ4_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FMC_PATT4_ATTHIZ4_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FMC_PIO4 register  *******************/
S#define  FMC_PIO4_IOSET4                    ((uint32_t)0x000000FF)        /*!<IOSET4[7:0] bits (I/O 4 setup time) */
S#define  FMC_PIO4_IOSET4_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_PIO4_IOSET4_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_PIO4_IOSET4_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_PIO4_IOSET4_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FMC_PIO4_IOSET4_4                  ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FMC_PIO4_IOSET4_5                  ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FMC_PIO4_IOSET4_6                  ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FMC_PIO4_IOSET4_7                  ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FMC_PIO4_IOWAIT4                   ((uint32_t)0x0000FF00)        /*!<IOWAIT4[7:0] bits (I/O 4 wait time) */
S#define  FMC_PIO4_IOWAIT4_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_PIO4_IOWAIT4_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_PIO4_IOWAIT4_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_PIO4_IOWAIT4_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_PIO4_IOWAIT4_4                 ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_PIO4_IOWAIT4_5                 ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_PIO4_IOWAIT4_6                 ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_PIO4_IOWAIT4_7                 ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_PIO4_IOHOLD4                   ((uint32_t)0x00FF0000)        /*!<IOHOLD4[7:0] bits (I/O 4 hold time) */
S#define  FMC_PIO4_IOHOLD4_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_PIO4_IOHOLD4_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_PIO4_IOHOLD4_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_PIO4_IOHOLD4_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FMC_PIO4_IOHOLD4_4                 ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FMC_PIO4_IOHOLD4_5                 ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FMC_PIO4_IOHOLD4_6                 ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FMC_PIO4_IOHOLD4_7                 ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FMC_PIO4_IOHIZ4                    ((uint32_t)0xFF000000)        /*!<IOHIZ4[7:0] bits (I/O 4 databus HiZ time) */
S#define  FMC_PIO4_IOHIZ4_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_PIO4_IOHIZ4_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_PIO4_IOHIZ4_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_PIO4_IOHIZ4_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FMC_PIO4_IOHIZ4_4                  ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FMC_PIO4_IOHIZ4_5                  ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FMC_PIO4_IOHIZ4_6                  ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FMC_PIO4_IOHIZ4_7                  ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FMC_ECCR2 register  ******************/
S#define  FMC_ECCR2_ECC2                     ((uint32_t)0xFFFFFFFF)        /*!<ECC result */
S
S/******************  Bit definition for FMC_ECCR3 register  ******************/
S#define  FMC_ECCR3_ECC3                     ((uint32_t)0xFFFFFFFF)        /*!<ECC result */
S
S/******************  Bit definition for FMC_SDCR1 register  ******************/
S#define  FMC_SDCR1_NC                       ((uint32_t)0x00000003)        /*!<NC[1:0] bits (Number of column bits) */
S#define  FMC_SDCR1_NC_0                     ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_SDCR1_NC_1                     ((uint32_t)0x00000002)        /*!<Bit 1 */
S
S#define  FMC_SDCR1_NR                       ((uint32_t)0x0000000C)        /*!<NR[1:0] bits (Number of row bits) */
S#define  FMC_SDCR1_NR_0                     ((uint32_t)0x00000004)        /*!<Bit 0 */
S#define  FMC_SDCR1_NR_1                     ((uint32_t)0x00000008)        /*!<Bit 1 */
S
S#define  FMC_SDCR1_MWID                     ((uint32_t)0x00000030)        /*!<NR[1:0] bits (Number of row bits) */
S#define  FMC_SDCR1_MWID_0                   ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_SDCR1_MWID_1                   ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FMC_SDCR1_NB                       ((uint32_t)0x00000040)        /*!<Number of internal bank */
S
S#define  FMC_SDCR1_CAS                      ((uint32_t)0x00000180)        /*!<CAS[1:0] bits (CAS latency) */
S#define  FMC_SDCR1_CAS_0                    ((uint32_t)0x00000080)        /*!<Bit 0 */
S#define  FMC_SDCR1_CAS_1                    ((uint32_t)0x00000100)        /*!<Bit 1 */
S
S#define  FMC_SDCR1_WP                       ((uint32_t)0x00000200)        /*!<Write protection */
S
S#define  FMC_SDCR1_SDCLK                    ((uint32_t)0x00000C00)        /*!<SDRAM clock configuration */
S#define  FMC_SDCR1_SDCLK_0                  ((uint32_t)0x00000400)        /*!<Bit 0 */
S#define  FMC_SDCR1_SDCLK_1                  ((uint32_t)0x00000800)        /*!<Bit 1 */
S
S#define  FMC_SDCR1_RBURST                   ((uint32_t)0x00001000)        /*!<Read burst */
S
S#define  FMC_SDCR1_RPIPE                    ((uint32_t)0x00006000)        /*!<Write protection */
S#define  FMC_SDCR1_RPIPE_0                  ((uint32_t)0x00002000)        /*!<Bit 0 */
S#define  FMC_SDCR1_RPIPE_1                  ((uint32_t)0x00004000)        /*!<Bit 1 */
S
S/******************  Bit definition for FMC_SDCR2 register  ******************/
S#define  FMC_SDCR2_NC                       ((uint32_t)0x00000003)        /*!<NC[1:0] bits (Number of column bits) */
S#define  FMC_SDCR2_NC_0                     ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_SDCR2_NC_1                     ((uint32_t)0x00000002)        /*!<Bit 1 */
S
S#define  FMC_SDCR2_NR                       ((uint32_t)0x0000000C)        /*!<NR[1:0] bits (Number of row bits) */
S#define  FMC_SDCR2_NR_0                     ((uint32_t)0x00000004)        /*!<Bit 0 */
S#define  FMC_SDCR2_NR_1                     ((uint32_t)0x00000008)        /*!<Bit 1 */
S
S#define  FMC_SDCR2_MWID                     ((uint32_t)0x00000030)        /*!<NR[1:0] bits (Number of row bits) */
S#define  FMC_SDCR2_MWID_0                   ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_SDCR2_MWID_1                   ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FMC_SDCR2_NB                       ((uint32_t)0x00000040)        /*!<Number of internal bank */
S
S#define  FMC_SDCR2_CAS                      ((uint32_t)0x00000180)        /*!<CAS[1:0] bits (CAS latency) */
S#define  FMC_SDCR2_CAS_0                    ((uint32_t)0x00000080)        /*!<Bit 0 */
S#define  FMC_SDCR2_CAS_1                    ((uint32_t)0x00000100)        /*!<Bit 1 */
S
S#define  FMC_SDCR2_WP                       ((uint32_t)0x00000200)        /*!<Write protection */
S
S#define  FMC_SDCR2_SDCLK                    ((uint32_t)0x00000C00)        /*!<SDCLK[1:0] (SDRAM clock configuration) */
S#define  FMC_SDCR2_SDCLK_0                  ((uint32_t)0x00000400)        /*!<Bit 0 */
S#define  FMC_SDCR2_SDCLK_1                  ((uint32_t)0x00000800)        /*!<Bit 1 */
S
S#define  FMC_SDCR2_RBURST                   ((uint32_t)0x00001000)        /*!<Read burst */
S
S#define  FMC_SDCR2_RPIPE                    ((uint32_t)0x00006000)        /*!<RPIPE[1:0](Read pipe) */
S#define  FMC_SDCR2_RPIPE_0                  ((uint32_t)0x00002000)        /*!<Bit 0 */
S#define  FMC_SDCR2_RPIPE_1                  ((uint32_t)0x00004000)        /*!<Bit 1 */
S
S/******************  Bit definition for FMC_SDTR1 register  ******************/
S#define  FMC_SDTR1_TMRD                     ((uint32_t)0x0000000F)        /*!<TMRD[3:0] bits (Load mode register to active) */
S#define  FMC_SDTR1_TMRD_0                   ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_SDTR1_TMRD_1                   ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_SDTR1_TMRD_2                   ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_SDTR1_TMRD_3                   ((uint32_t)0x00000008)        /*!<Bit 3 */
S                                            
S#define  FMC_SDTR1_TXSR                     ((uint32_t)0x000000F0)        /*!<TXSR[3:0] bits (Exit self refresh) */
S#define  FMC_SDTR1_TXSR_0                   ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_SDTR1_TXSR_1                   ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_SDTR1_TXSR_2                   ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_SDTR1_TXSR_3                   ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_SDTR1_TRAS                     ((uint32_t)0x00000F00)        /*!<TRAS[3:0] bits (Self refresh time) */
S#define  FMC_SDTR1_TRAS_0                   ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_SDTR1_TRAS_1                   ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_SDTR1_TRAS_2                   ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_SDTR1_TRAS_3                   ((uint32_t)0x00000800)        /*!<Bit 3 */
S
S#define  FMC_SDTR1_TRC                      ((uint32_t)0x0000F000)        /*!<TRC[2:0] bits (Row cycle delay) */
S#define  FMC_SDTR1_TRC_0                    ((uint32_t)0x00001000)        /*!<Bit 0 */
S#define  FMC_SDTR1_TRC_1                    ((uint32_t)0x00002000)        /*!<Bit 1 */
S#define  FMC_SDTR1_TRC_2                    ((uint32_t)0x00004000)        /*!<Bit 2 */
S
S#define  FMC_SDTR1_TWR                      ((uint32_t)0x000F0000)        /*!<TRC[2:0] bits (Write recovery delay) */
S#define  FMC_SDTR1_TWR_0                    ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_SDTR1_TWR_1                    ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_SDTR1_TWR_2                    ((uint32_t)0x00040000)        /*!<Bit 2 */
S
S#define  FMC_SDTR1_TRP                      ((uint32_t)0x00F00000)        /*!<TRP[2:0] bits (Row precharge delay) */
S#define  FMC_SDTR1_TRP_0                    ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_SDTR1_TRP_1                    ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FMC_SDTR1_TRP_2                    ((uint32_t)0x00400000)        /*!<Bit 2 */
S
S#define  FMC_SDTR1_TRCD                     ((uint32_t)0x0F000000)        /*!<TRP[2:0] bits (Row to column delay) */
S#define  FMC_SDTR1_TRCD_0                   ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_SDTR1_TRCD_1                   ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_SDTR1_TRCD_2                   ((uint32_t)0x04000000)        /*!<Bit 2 */
S
S/******************  Bit definition for FMC_SDTR2 register  ******************/
S#define  FMC_SDTR2_TMRD                     ((uint32_t)0x0000000F)        /*!<TMRD[3:0] bits (Load mode register to active) */
S#define  FMC_SDTR2_TMRD_0                   ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_SDTR2_TMRD_1                   ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_SDTR2_TMRD_2                   ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_SDTR2_TMRD_3                   ((uint32_t)0x00000008)        /*!<Bit 3 */
S                                            
S#define  FMC_SDTR2_TXSR                     ((uint32_t)0x000000F0)        /*!<TXSR[3:0] bits (Exit self refresh) */
S#define  FMC_SDTR2_TXSR_0                   ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_SDTR2_TXSR_1                   ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_SDTR2_TXSR_2                   ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_SDTR2_TXSR_3                   ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_SDTR2_TRAS                     ((uint32_t)0x00000F00)        /*!<TRAS[3:0] bits (Self refresh time) */
S#define  FMC_SDTR2_TRAS_0                   ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_SDTR2_TRAS_1                   ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_SDTR2_TRAS_2                   ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_SDTR2_TRAS_3                   ((uint32_t)0x00000800)        /*!<Bit 3 */
S
S#define  FMC_SDTR2_TRC                      ((uint32_t)0x0000F000)        /*!<TRC[2:0] bits (Row cycle delay) */
S#define  FMC_SDTR2_TRC_0                    ((uint32_t)0x00001000)        /*!<Bit 0 */
S#define  FMC_SDTR2_TRC_1                    ((uint32_t)0x00002000)        /*!<Bit 1 */
S#define  FMC_SDTR2_TRC_2                    ((uint32_t)0x00004000)        /*!<Bit 2 */
S
S#define  FMC_SDTR2_TWR                      ((uint32_t)0x000F0000)        /*!<TRC[2:0] bits (Write recovery delay) */
S#define  FMC_SDTR2_TWR_0                    ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_SDTR2_TWR_1                    ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_SDTR2_TWR_2                    ((uint32_t)0x00040000)        /*!<Bit 2 */
S
S#define  FMC_SDTR2_TRP                      ((uint32_t)0x00F00000)        /*!<TRP[2:0] bits (Row precharge delay) */
S#define  FMC_SDTR2_TRP_0                    ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_SDTR2_TRP_1                    ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FMC_SDTR2_TRP_2                    ((uint32_t)0x00400000)        /*!<Bit 2 */
S
S#define  FMC_SDTR2_TRCD                     ((uint32_t)0x0F000000)        /*!<TRP[2:0] bits (Row to column delay) */
S#define  FMC_SDTR2_TRCD_0                   ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_SDTR2_TRCD_1                   ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_SDTR2_TRCD_2                   ((uint32_t)0x04000000)        /*!<Bit 2 */
S
S/******************  Bit definition for FMC_SDCMR register  ******************/
S#define  FMC_SDCMR_MODE                     ((uint32_t)0x00000007)        /*!<MODE[2:0] bits (Command mode) */
S#define  FMC_SDCMR_MODE_0                   ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_SDCMR_MODE_1                   ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_SDCMR_MODE_2                   ((uint32_t)0x00000003)        /*!<Bit 2 */
S                                            
S#define  FMC_SDCMR_CTB2                     ((uint32_t)0x00000008)        /*!<Command target 2 */
S
S#define  FMC_SDCMR_CTB1                     ((uint32_t)0x00000010)        /*!<Command target 1 */
S
S#define  FMC_SDCMR_NRFS                     ((uint32_t)0x000001E0)        /*!<NRFS[3:0] bits (Number of auto-refresh) */
S#define  FMC_SDCMR_NRFS_0                   ((uint32_t)0x00000020)        /*!<Bit 0 */
S#define  FMC_SDCMR_NRFS_1                   ((uint32_t)0x00000040)        /*!<Bit 1 */
S#define  FMC_SDCMR_NRFS_2                   ((uint32_t)0x00000080)        /*!<Bit 2 */
S#define  FMC_SDCMR_NRFS_3                   ((uint32_t)0x00000100)        /*!<Bit 3 */
S
S#define  FMC_SDCMR_MRD                      ((uint32_t)0x003FFE00)        /*!<MRD[12:0] bits (Mode register definition) */
S
S/******************  Bit definition for FMC_SDRTR register  ******************/
S#define  FMC_SDRTR_CRE                      ((uint32_t)0x00000001)        /*!<Clear refresh error flag */
S
S#define  FMC_SDRTR_COUNT                    ((uint32_t)0x00003FFE)        /*!<COUNT[12:0] bits (Refresh timer count) */
S
S#define  FMC_SDRTR_REIE                     ((uint32_t)0x00004000)        /*!<RES interupt enable */
S
S/******************  Bit definition for FMC_SDSR register  ******************/
S#define  FMC_SDSR_RE                        ((uint32_t)0x00000001)        /*!<Refresh error flag */
S
S#define  FMC_SDSR_MODES1                    ((uint32_t)0x00000006)        /*!<MODES1[1:0]bits (Status mode for bank 1) */
S#define  FMC_SDSR_MODES1_0                  ((uint32_t)0x00000002)        /*!<Bit 0 */
S#define  FMC_SDSR_MODES1_1                  ((uint32_t)0x00000004)        /*!<Bit 1 */
S
S#define  FMC_SDSR_MODES2                    ((uint32_t)0x00000018)        /*!<MODES2[1:0]bits (Status mode for bank 2) */
S#define  FMC_SDSR_MODES2_0                  ((uint32_t)0x00000008)        /*!<Bit 0 */
S#define  FMC_SDSR_MODES2_1                  ((uint32_t)0x00000010)        /*!<Bit 1 */
S
S#define  FMC_SDSR_BUSY                      ((uint32_t)0x00000020)        /*!<Busy status */
S
N#endif /* STM32F427_437xx ||  STM32F429_439xx */
N
N/******************************************************************************/
N/*                                                                            */
N/*                            General Purpose I/O                             */
N/*                                                                            */
N/******************************************************************************/
N/******************  Bits definition for GPIO_MODER register  *****************/
N#define GPIO_MODER_MODER0                    ((uint32_t)0x00000003)
N#define GPIO_MODER_MODER0_0                  ((uint32_t)0x00000001)
N#define GPIO_MODER_MODER0_1                  ((uint32_t)0x00000002)
N
N#define GPIO_MODER_MODER1                    ((uint32_t)0x0000000C)
N#define GPIO_MODER_MODER1_0                  ((uint32_t)0x00000004)
N#define GPIO_MODER_MODER1_1                  ((uint32_t)0x00000008)
N
N#define GPIO_MODER_MODER2                    ((uint32_t)0x00000030)
N#define GPIO_MODER_MODER2_0                  ((uint32_t)0x00000010)
N#define GPIO_MODER_MODER2_1                  ((uint32_t)0x00000020)
N
N#define GPIO_MODER_MODER3                    ((uint32_t)0x000000C0)
N#define GPIO_MODER_MODER3_0                  ((uint32_t)0x00000040)
N#define GPIO_MODER_MODER3_1                  ((uint32_t)0x00000080)
N
N#define GPIO_MODER_MODER4                    ((uint32_t)0x00000300)
N#define GPIO_MODER_MODER4_0                  ((uint32_t)0x00000100)
N#define GPIO_MODER_MODER4_1                  ((uint32_t)0x00000200)
N
N#define GPIO_MODER_MODER5                    ((uint32_t)0x00000C00)
N#define GPIO_MODER_MODER5_0                  ((uint32_t)0x00000400)
N#define GPIO_MODER_MODER5_1                  ((uint32_t)0x00000800)
N
N#define GPIO_MODER_MODER6                    ((uint32_t)0x00003000)
N#define GPIO_MODER_MODER6_0                  ((uint32_t)0x00001000)
N#define GPIO_MODER_MODER6_1                  ((uint32_t)0x00002000)
N
N#define GPIO_MODER_MODER7                    ((uint32_t)0x0000C000)
N#define GPIO_MODER_MODER7_0                  ((uint32_t)0x00004000)
N#define GPIO_MODER_MODER7_1                  ((uint32_t)0x00008000)
N
N#define GPIO_MODER_MODER8                    ((uint32_t)0x00030000)
N#define GPIO_MODER_MODER8_0                  ((uint32_t)0x00010000)
N#define GPIO_MODER_MODER8_1                  ((uint32_t)0x00020000)
N
N#define GPIO_MODER_MODER9                    ((uint32_t)0x000C0000)
N#define GPIO_MODER_MODER9_0                  ((uint32_t)0x00040000)
N#define GPIO_MODER_MODER9_1                  ((uint32_t)0x00080000)
N
N#define GPIO_MODER_MODER10                   ((uint32_t)0x00300000)
N#define GPIO_MODER_MODER10_0                 ((uint32_t)0x00100000)
N#define GPIO_MODER_MODER10_1                 ((uint32_t)0x00200000)
N
N#define GPIO_MODER_MODER11                   ((uint32_t)0x00C00000)
N#define GPIO_MODER_MODER11_0                 ((uint32_t)0x00400000)
N#define GPIO_MODER_MODER11_1                 ((uint32_t)0x00800000)
N
N#define GPIO_MODER_MODER12                   ((uint32_t)0x03000000)
N#define GPIO_MODER_MODER12_0                 ((uint32_t)0x01000000)
N#define GPIO_MODER_MODER12_1                 ((uint32_t)0x02000000)
N
N#define GPIO_MODER_MODER13                   ((uint32_t)0x0C000000)
N#define GPIO_MODER_MODER13_0                 ((uint32_t)0x04000000)
N#define GPIO_MODER_MODER13_1                 ((uint32_t)0x08000000)
N
N#define GPIO_MODER_MODER14                   ((uint32_t)0x30000000)
N#define GPIO_MODER_MODER14_0                 ((uint32_t)0x10000000)
N#define GPIO_MODER_MODER14_1                 ((uint32_t)0x20000000)
N
N#define GPIO_MODER_MODER15                   ((uint32_t)0xC0000000)
N#define GPIO_MODER_MODER15_0                 ((uint32_t)0x40000000)
N#define GPIO_MODER_MODER15_1                 ((uint32_t)0x80000000)
N
N/******************  Bits definition for GPIO_OTYPER register  ****************/
N#define GPIO_OTYPER_OT_0                     ((uint32_t)0x00000001)
N#define GPIO_OTYPER_OT_1                     ((uint32_t)0x00000002)
N#define GPIO_OTYPER_OT_2                     ((uint32_t)0x00000004)
N#define GPIO_OTYPER_OT_3                     ((uint32_t)0x00000008)
N#define GPIO_OTYPER_OT_4                     ((uint32_t)0x00000010)
N#define GPIO_OTYPER_OT_5                     ((uint32_t)0x00000020)
N#define GPIO_OTYPER_OT_6                     ((uint32_t)0x00000040)
N#define GPIO_OTYPER_OT_7                     ((uint32_t)0x00000080)
N#define GPIO_OTYPER_OT_8                     ((uint32_t)0x00000100)
N#define GPIO_OTYPER_OT_9                     ((uint32_t)0x00000200)
N#define GPIO_OTYPER_OT_10                    ((uint32_t)0x00000400)
N#define GPIO_OTYPER_OT_11                    ((uint32_t)0x00000800)
N#define GPIO_OTYPER_OT_12                    ((uint32_t)0x00001000)
N#define GPIO_OTYPER_OT_13                    ((uint32_t)0x00002000)
N#define GPIO_OTYPER_OT_14                    ((uint32_t)0x00004000)
N#define GPIO_OTYPER_OT_15                    ((uint32_t)0x00008000)
N
N/******************  Bits definition for GPIO_OSPEEDR register  ***************/
N#define GPIO_OSPEEDER_OSPEEDR0               ((uint32_t)0x00000003)
N#define GPIO_OSPEEDER_OSPEEDR0_0             ((uint32_t)0x00000001)
N#define GPIO_OSPEEDER_OSPEEDR0_1             ((uint32_t)0x00000002)
N
N#define GPIO_OSPEEDER_OSPEEDR1               ((uint32_t)0x0000000C)
N#define GPIO_OSPEEDER_OSPEEDR1_0             ((uint32_t)0x00000004)
N#define GPIO_OSPEEDER_OSPEEDR1_1             ((uint32_t)0x00000008)
N
N#define GPIO_OSPEEDER_OSPEEDR2               ((uint32_t)0x00000030)
N#define GPIO_OSPEEDER_OSPEEDR2_0             ((uint32_t)0x00000010)
N#define GPIO_OSPEEDER_OSPEEDR2_1             ((uint32_t)0x00000020)
N
N#define GPIO_OSPEEDER_OSPEEDR3               ((uint32_t)0x000000C0)
N#define GPIO_OSPEEDER_OSPEEDR3_0             ((uint32_t)0x00000040)
N#define GPIO_OSPEEDER_OSPEEDR3_1             ((uint32_t)0x00000080)
N
N#define GPIO_OSPEEDER_OSPEEDR4               ((uint32_t)0x00000300)
N#define GPIO_OSPEEDER_OSPEEDR4_0             ((uint32_t)0x00000100)
N#define GPIO_OSPEEDER_OSPEEDR4_1             ((uint32_t)0x00000200)
N
N#define GPIO_OSPEEDER_OSPEEDR5               ((uint32_t)0x00000C00)
N#define GPIO_OSPEEDER_OSPEEDR5_0             ((uint32_t)0x00000400)
N#define GPIO_OSPEEDER_OSPEEDR5_1             ((uint32_t)0x00000800)
N
N#define GPIO_OSPEEDER_OSPEEDR6               ((uint32_t)0x00003000)
N#define GPIO_OSPEEDER_OSPEEDR6_0             ((uint32_t)0x00001000)
N#define GPIO_OSPEEDER_OSPEEDR6_1             ((uint32_t)0x00002000)
N
N#define GPIO_OSPEEDER_OSPEEDR7               ((uint32_t)0x0000C000)
N#define GPIO_OSPEEDER_OSPEEDR7_0             ((uint32_t)0x00004000)
N#define GPIO_OSPEEDER_OSPEEDR7_1             ((uint32_t)0x00008000)
N
N#define GPIO_OSPEEDER_OSPEEDR8               ((uint32_t)0x00030000)
N#define GPIO_OSPEEDER_OSPEEDR8_0             ((uint32_t)0x00010000)
N#define GPIO_OSPEEDER_OSPEEDR8_1             ((uint32_t)0x00020000)
N
N#define GPIO_OSPEEDER_OSPEEDR9               ((uint32_t)0x000C0000)
N#define GPIO_OSPEEDER_OSPEEDR9_0             ((uint32_t)0x00040000)
N#define GPIO_OSPEEDER_OSPEEDR9_1             ((uint32_t)0x00080000)
N
N#define GPIO_OSPEEDER_OSPEEDR10              ((uint32_t)0x00300000)
N#define GPIO_OSPEEDER_OSPEEDR10_0            ((uint32_t)0x00100000)
N#define GPIO_OSPEEDER_OSPEEDR10_1            ((uint32_t)0x00200000)
N
N#define GPIO_OSPEEDER_OSPEEDR11              ((uint32_t)0x00C00000)
N#define GPIO_OSPEEDER_OSPEEDR11_0            ((uint32_t)0x00400000)
N#define GPIO_OSPEEDER_OSPEEDR11_1            ((uint32_t)0x00800000)
N
N#define GPIO_OSPEEDER_OSPEEDR12              ((uint32_t)0x03000000)
N#define GPIO_OSPEEDER_OSPEEDR12_0            ((uint32_t)0x01000000)
N#define GPIO_OSPEEDER_OSPEEDR12_1            ((uint32_t)0x02000000)
N
N#define GPIO_OSPEEDER_OSPEEDR13              ((uint32_t)0x0C000000)
N#define GPIO_OSPEEDER_OSPEEDR13_0            ((uint32_t)0x04000000)
N#define GPIO_OSPEEDER_OSPEEDR13_1            ((uint32_t)0x08000000)
N
N#define GPIO_OSPEEDER_OSPEEDR14              ((uint32_t)0x30000000)
N#define GPIO_OSPEEDER_OSPEEDR14_0            ((uint32_t)0x10000000)
N#define GPIO_OSPEEDER_OSPEEDR14_1            ((uint32_t)0x20000000)
N
N#define GPIO_OSPEEDER_OSPEEDR15              ((uint32_t)0xC0000000)
N#define GPIO_OSPEEDER_OSPEEDR15_0            ((uint32_t)0x40000000)
N#define GPIO_OSPEEDER_OSPEEDR15_1            ((uint32_t)0x80000000)
N
N/******************  Bits definition for GPIO_PUPDR register  *****************/
N#define GPIO_PUPDR_PUPDR0                    ((uint32_t)0x00000003)
N#define GPIO_PUPDR_PUPDR0_0                  ((uint32_t)0x00000001)
N#define GPIO_PUPDR_PUPDR0_1                  ((uint32_t)0x00000002)
N
N#define GPIO_PUPDR_PUPDR1                    ((uint32_t)0x0000000C)
N#define GPIO_PUPDR_PUPDR1_0                  ((uint32_t)0x00000004)
N#define GPIO_PUPDR_PUPDR1_1                  ((uint32_t)0x00000008)
N
N#define GPIO_PUPDR_PUPDR2                    ((uint32_t)0x00000030)
N#define GPIO_PUPDR_PUPDR2_0                  ((uint32_t)0x00000010)
N#define GPIO_PUPDR_PUPDR2_1                  ((uint32_t)0x00000020)
N
N#define GPIO_PUPDR_PUPDR3                    ((uint32_t)0x000000C0)
N#define GPIO_PUPDR_PUPDR3_0                  ((uint32_t)0x00000040)
N#define GPIO_PUPDR_PUPDR3_1                  ((uint32_t)0x00000080)
N
N#define GPIO_PUPDR_PUPDR4                    ((uint32_t)0x00000300)
N#define GPIO_PUPDR_PUPDR4_0                  ((uint32_t)0x00000100)
N#define GPIO_PUPDR_PUPDR4_1                  ((uint32_t)0x00000200)
N
N#define GPIO_PUPDR_PUPDR5                    ((uint32_t)0x00000C00)
N#define GPIO_PUPDR_PUPDR5_0                  ((uint32_t)0x00000400)
N#define GPIO_PUPDR_PUPDR5_1                  ((uint32_t)0x00000800)
N
N#define GPIO_PUPDR_PUPDR6                    ((uint32_t)0x00003000)
N#define GPIO_PUPDR_PUPDR6_0                  ((uint32_t)0x00001000)
N#define GPIO_PUPDR_PUPDR6_1                  ((uint32_t)0x00002000)
N
N#define GPIO_PUPDR_PUPDR7                    ((uint32_t)0x0000C000)
N#define GPIO_PUPDR_PUPDR7_0                  ((uint32_t)0x00004000)
N#define GPIO_PUPDR_PUPDR7_1                  ((uint32_t)0x00008000)
N
N#define GPIO_PUPDR_PUPDR8                    ((uint32_t)0x00030000)
N#define GPIO_PUPDR_PUPDR8_0                  ((uint32_t)0x00010000)
N#define GPIO_PUPDR_PUPDR8_1                  ((uint32_t)0x00020000)
N
N#define GPIO_PUPDR_PUPDR9                    ((uint32_t)0x000C0000)
N#define GPIO_PUPDR_PUPDR9_0                  ((uint32_t)0x00040000)
N#define GPIO_PUPDR_PUPDR9_1                  ((uint32_t)0x00080000)
N
N#define GPIO_PUPDR_PUPDR10                   ((uint32_t)0x00300000)
N#define GPIO_PUPDR_PUPDR10_0                 ((uint32_t)0x00100000)
N#define GPIO_PUPDR_PUPDR10_1                 ((uint32_t)0x00200000)
N
N#define GPIO_PUPDR_PUPDR11                   ((uint32_t)0x00C00000)
N#define GPIO_PUPDR_PUPDR11_0                 ((uint32_t)0x00400000)
N#define GPIO_PUPDR_PUPDR11_1                 ((uint32_t)0x00800000)
N
N#define GPIO_PUPDR_PUPDR12                   ((uint32_t)0x03000000)
N#define GPIO_PUPDR_PUPDR12_0                 ((uint32_t)0x01000000)
N#define GPIO_PUPDR_PUPDR12_1                 ((uint32_t)0x02000000)
N
N#define GPIO_PUPDR_PUPDR13                   ((uint32_t)0x0C000000)
N#define GPIO_PUPDR_PUPDR13_0                 ((uint32_t)0x04000000)
N#define GPIO_PUPDR_PUPDR13_1                 ((uint32_t)0x08000000)
N
N#define GPIO_PUPDR_PUPDR14                   ((uint32_t)0x30000000)
N#define GPIO_PUPDR_PUPDR14_0                 ((uint32_t)0x10000000)
N#define GPIO_PUPDR_PUPDR14_1                 ((uint32_t)0x20000000)
N
N#define GPIO_PUPDR_PUPDR15                   ((uint32_t)0xC0000000)
N#define GPIO_PUPDR_PUPDR15_0                 ((uint32_t)0x40000000)
N#define GPIO_PUPDR_PUPDR15_1                 ((uint32_t)0x80000000)
N
N/******************  Bits definition for GPIO_IDR register  *******************/
N#define GPIO_IDR_IDR_0                       ((uint32_t)0x00000001)
N#define GPIO_IDR_IDR_1                       ((uint32_t)0x00000002)
N#define GPIO_IDR_IDR_2                       ((uint32_t)0x00000004)
N#define GPIO_IDR_IDR_3                       ((uint32_t)0x00000008)
N#define GPIO_IDR_IDR_4                       ((uint32_t)0x00000010)
N#define GPIO_IDR_IDR_5                       ((uint32_t)0x00000020)
N#define GPIO_IDR_IDR_6                       ((uint32_t)0x00000040)
N#define GPIO_IDR_IDR_7                       ((uint32_t)0x00000080)
N#define GPIO_IDR_IDR_8                       ((uint32_t)0x00000100)
N#define GPIO_IDR_IDR_9                       ((uint32_t)0x00000200)
N#define GPIO_IDR_IDR_10                      ((uint32_t)0x00000400)
N#define GPIO_IDR_IDR_11                      ((uint32_t)0x00000800)
N#define GPIO_IDR_IDR_12                      ((uint32_t)0x00001000)
N#define GPIO_IDR_IDR_13                      ((uint32_t)0x00002000)
N#define GPIO_IDR_IDR_14                      ((uint32_t)0x00004000)
N#define GPIO_IDR_IDR_15                      ((uint32_t)0x00008000)
N/* Old GPIO_IDR register bits definition, maintained for legacy purpose */
N#define GPIO_OTYPER_IDR_0                    GPIO_IDR_IDR_0
N#define GPIO_OTYPER_IDR_1                    GPIO_IDR_IDR_1
N#define GPIO_OTYPER_IDR_2                    GPIO_IDR_IDR_2
N#define GPIO_OTYPER_IDR_3                    GPIO_IDR_IDR_3
N#define GPIO_OTYPER_IDR_4                    GPIO_IDR_IDR_4
N#define GPIO_OTYPER_IDR_5                    GPIO_IDR_IDR_5
N#define GPIO_OTYPER_IDR_6                    GPIO_IDR_IDR_6
N#define GPIO_OTYPER_IDR_7                    GPIO_IDR_IDR_7
N#define GPIO_OTYPER_IDR_8                    GPIO_IDR_IDR_8
N#define GPIO_OTYPER_IDR_9                    GPIO_IDR_IDR_9
N#define GPIO_OTYPER_IDR_10                   GPIO_IDR_IDR_10
N#define GPIO_OTYPER_IDR_11                   GPIO_IDR_IDR_11
N#define GPIO_OTYPER_IDR_12                   GPIO_IDR_IDR_12
N#define GPIO_OTYPER_IDR_13                   GPIO_IDR_IDR_13
N#define GPIO_OTYPER_IDR_14                   GPIO_IDR_IDR_14
N#define GPIO_OTYPER_IDR_15                   GPIO_IDR_IDR_15
N
N/******************  Bits definition for GPIO_ODR register  *******************/
N#define GPIO_ODR_ODR_0                       ((uint32_t)0x00000001)
N#define GPIO_ODR_ODR_1                       ((uint32_t)0x00000002)
N#define GPIO_ODR_ODR_2                       ((uint32_t)0x00000004)
N#define GPIO_ODR_ODR_3                       ((uint32_t)0x00000008)
N#define GPIO_ODR_ODR_4                       ((uint32_t)0x00000010)
N#define GPIO_ODR_ODR_5                       ((uint32_t)0x00000020)
N#define GPIO_ODR_ODR_6                       ((uint32_t)0x00000040)
N#define GPIO_ODR_ODR_7                       ((uint32_t)0x00000080)
N#define GPIO_ODR_ODR_8                       ((uint32_t)0x00000100)
N#define GPIO_ODR_ODR_9                       ((uint32_t)0x00000200)
N#define GPIO_ODR_ODR_10                      ((uint32_t)0x00000400)
N#define GPIO_ODR_ODR_11                      ((uint32_t)0x00000800)
N#define GPIO_ODR_ODR_12                      ((uint32_t)0x00001000)
N#define GPIO_ODR_ODR_13                      ((uint32_t)0x00002000)
N#define GPIO_ODR_ODR_14                      ((uint32_t)0x00004000)
N#define GPIO_ODR_ODR_15                      ((uint32_t)0x00008000)
N/* Old GPIO_ODR register bits definition, maintained for legacy purpose */
N#define GPIO_OTYPER_ODR_0                    GPIO_ODR_ODR_0
N#define GPIO_OTYPER_ODR_1                    GPIO_ODR_ODR_1
N#define GPIO_OTYPER_ODR_2                    GPIO_ODR_ODR_2
N#define GPIO_OTYPER_ODR_3                    GPIO_ODR_ODR_3
N#define GPIO_OTYPER_ODR_4                    GPIO_ODR_ODR_4
N#define GPIO_OTYPER_ODR_5                    GPIO_ODR_ODR_5
N#define GPIO_OTYPER_ODR_6                    GPIO_ODR_ODR_6
N#define GPIO_OTYPER_ODR_7                    GPIO_ODR_ODR_7
N#define GPIO_OTYPER_ODR_8                    GPIO_ODR_ODR_8
N#define GPIO_OTYPER_ODR_9                    GPIO_ODR_ODR_9
N#define GPIO_OTYPER_ODR_10                   GPIO_ODR_ODR_10
N#define GPIO_OTYPER_ODR_11                   GPIO_ODR_ODR_11
N#define GPIO_OTYPER_ODR_12                   GPIO_ODR_ODR_12
N#define GPIO_OTYPER_ODR_13                   GPIO_ODR_ODR_13
N#define GPIO_OTYPER_ODR_14                   GPIO_ODR_ODR_14
N#define GPIO_OTYPER_ODR_15                   GPIO_ODR_ODR_15
N
N/******************  Bits definition for GPIO_BSRR register  ******************/
N#define GPIO_BSRR_BS_0                       ((uint32_t)0x00000001)
N#define GPIO_BSRR_BS_1                       ((uint32_t)0x00000002)
N#define GPIO_BSRR_BS_2                       ((uint32_t)0x00000004)
N#define GPIO_BSRR_BS_3                       ((uint32_t)0x00000008)
N#define GPIO_BSRR_BS_4                       ((uint32_t)0x00000010)
N#define GPIO_BSRR_BS_5                       ((uint32_t)0x00000020)
N#define GPIO_BSRR_BS_6                       ((uint32_t)0x00000040)
N#define GPIO_BSRR_BS_7                       ((uint32_t)0x00000080)
N#define GPIO_BSRR_BS_8                       ((uint32_t)0x00000100)
N#define GPIO_BSRR_BS_9                       ((uint32_t)0x00000200)
N#define GPIO_BSRR_BS_10                      ((uint32_t)0x00000400)
N#define GPIO_BSRR_BS_11                      ((uint32_t)0x00000800)
N#define GPIO_BSRR_BS_12                      ((uint32_t)0x00001000)
N#define GPIO_BSRR_BS_13                      ((uint32_t)0x00002000)
N#define GPIO_BSRR_BS_14                      ((uint32_t)0x00004000)
N#define GPIO_BSRR_BS_15                      ((uint32_t)0x00008000)
N#define GPIO_BSRR_BR_0                       ((uint32_t)0x00010000)
N#define GPIO_BSRR_BR_1                       ((uint32_t)0x00020000)
N#define GPIO_BSRR_BR_2                       ((uint32_t)0x00040000)
N#define GPIO_BSRR_BR_3                       ((uint32_t)0x00080000)
N#define GPIO_BSRR_BR_4                       ((uint32_t)0x00100000)
N#define GPIO_BSRR_BR_5                       ((uint32_t)0x00200000)
N#define GPIO_BSRR_BR_6                       ((uint32_t)0x00400000)
N#define GPIO_BSRR_BR_7                       ((uint32_t)0x00800000)
N#define GPIO_BSRR_BR_8                       ((uint32_t)0x01000000)
N#define GPIO_BSRR_BR_9                       ((uint32_t)0x02000000)
N#define GPIO_BSRR_BR_10                      ((uint32_t)0x04000000)
N#define GPIO_BSRR_BR_11                      ((uint32_t)0x08000000)
N#define GPIO_BSRR_BR_12                      ((uint32_t)0x10000000)
N#define GPIO_BSRR_BR_13                      ((uint32_t)0x20000000)
N#define GPIO_BSRR_BR_14                      ((uint32_t)0x40000000)
N#define GPIO_BSRR_BR_15                      ((uint32_t)0x80000000)
N
N/******************************************************************************/
N/*                                                                            */
N/*                                    HASH                                    */
N/*                                                                            */
N/******************************************************************************/
N/******************  Bits definition for HASH_CR register  ********************/
N#define HASH_CR_INIT                         ((uint32_t)0x00000004)
N#define HASH_CR_DMAE                         ((uint32_t)0x00000008)
N#define HASH_CR_DATATYPE                     ((uint32_t)0x00000030)
N#define HASH_CR_DATATYPE_0                   ((uint32_t)0x00000010)
N#define HASH_CR_DATATYPE_1                   ((uint32_t)0x00000020)
N#define HASH_CR_MODE                         ((uint32_t)0x00000040)
N#define HASH_CR_ALGO                         ((uint32_t)0x00040080)
N#define HASH_CR_ALGO_0                       ((uint32_t)0x00000080)
N#define HASH_CR_ALGO_1                       ((uint32_t)0x00040000)
N#define HASH_CR_NBW                          ((uint32_t)0x00000F00)
N#define HASH_CR_NBW_0                        ((uint32_t)0x00000100)
N#define HASH_CR_NBW_1                        ((uint32_t)0x00000200)
N#define HASH_CR_NBW_2                        ((uint32_t)0x00000400)
N#define HASH_CR_NBW_3                        ((uint32_t)0x00000800)
N#define HASH_CR_DINNE                        ((uint32_t)0x00001000)
N#define HASH_CR_MDMAT                        ((uint32_t)0x00002000)
N#define HASH_CR_LKEY                         ((uint32_t)0x00010000)
N
N/******************  Bits definition for HASH_STR register  *******************/
N#define HASH_STR_NBW                         ((uint32_t)0x0000001F)
N#define HASH_STR_NBW_0                       ((uint32_t)0x00000001)
N#define HASH_STR_NBW_1                       ((uint32_t)0x00000002)
N#define HASH_STR_NBW_2                       ((uint32_t)0x00000004)
N#define HASH_STR_NBW_3                       ((uint32_t)0x00000008)
N#define HASH_STR_NBW_4                       ((uint32_t)0x00000010)
N#define HASH_STR_DCAL                        ((uint32_t)0x00000100)
N
N/******************  Bits definition for HASH_IMR register  *******************/
N#define HASH_IMR_DINIM                       ((uint32_t)0x00000001)
N#define HASH_IMR_DCIM                        ((uint32_t)0x00000002)
N
N/******************  Bits definition for HASH_SR register  ********************/
N#define HASH_SR_DINIS                        ((uint32_t)0x00000001)
N#define HASH_SR_DCIS                         ((uint32_t)0x00000002)
N#define HASH_SR_DMAS                         ((uint32_t)0x00000004)
N#define HASH_SR_BUSY                         ((uint32_t)0x00000008)
N
N/******************************************************************************/
N/*                                                                            */
N/*                      Inter-integrated Circuit Interface                    */
N/*                                                                            */
N/******************************************************************************/
N/*******************  Bit definition for I2C_CR1 register  ********************/
N#define  I2C_CR1_PE                          ((uint16_t)0x0001)            /*!<Peripheral Enable                             */
N#define  I2C_CR1_SMBUS                       ((uint16_t)0x0002)            /*!<SMBus Mode                                    */
N#define  I2C_CR1_SMBTYPE                     ((uint16_t)0x0008)            /*!<SMBus Type                                    */
N#define  I2C_CR1_ENARP                       ((uint16_t)0x0010)            /*!<ARP Enable                                    */
N#define  I2C_CR1_ENPEC                       ((uint16_t)0x0020)            /*!<PEC Enable                                    */
N#define  I2C_CR1_ENGC                        ((uint16_t)0x0040)            /*!<General Call Enable                           */
N#define  I2C_CR1_NOSTRETCH                   ((uint16_t)0x0080)            /*!<Clock Stretching Disable (Slave mode)         */
N#define  I2C_CR1_START                       ((uint16_t)0x0100)            /*!<Start Generation                              */
N#define  I2C_CR1_STOP                        ((uint16_t)0x0200)            /*!<Stop Generation                               */
N#define  I2C_CR1_ACK                         ((uint16_t)0x0400)            /*!<Acknowledge Enable                            */
N#define  I2C_CR1_POS                         ((uint16_t)0x0800)            /*!<Acknowledge/PEC Position (for data reception) */
N#define  I2C_CR1_PEC                         ((uint16_t)0x1000)            /*!<Packet Error Checking                         */
N#define  I2C_CR1_ALERT                       ((uint16_t)0x2000)            /*!<SMBus Alert                                   */
N#define  I2C_CR1_SWRST                       ((uint16_t)0x8000)            /*!<Software Reset                                */
N
N/*******************  Bit definition for I2C_CR2 register  ********************/
N#define  I2C_CR2_FREQ                        ((uint16_t)0x003F)            /*!<FREQ[5:0] bits (Peripheral Clock Frequency)   */
N#define  I2C_CR2_FREQ_0                      ((uint16_t)0x0001)            /*!<Bit 0 */
N#define  I2C_CR2_FREQ_1                      ((uint16_t)0x0002)            /*!<Bit 1 */
N#define  I2C_CR2_FREQ_2                      ((uint16_t)0x0004)            /*!<Bit 2 */
N#define  I2C_CR2_FREQ_3                      ((uint16_t)0x0008)            /*!<Bit 3 */
N#define  I2C_CR2_FREQ_4                      ((uint16_t)0x0010)            /*!<Bit 4 */
N#define  I2C_CR2_FREQ_5                      ((uint16_t)0x0020)            /*!<Bit 5 */
N
N#define  I2C_CR2_ITERREN                     ((uint16_t)0x0100)            /*!<Error Interrupt Enable  */
N#define  I2C_CR2_ITEVTEN                     ((uint16_t)0x0200)            /*!<Event Interrupt Enable  */
N#define  I2C_CR2_ITBUFEN                     ((uint16_t)0x0400)            /*!<Buffer Interrupt Enable */
N#define  I2C_CR2_DMAEN                       ((uint16_t)0x0800)            /*!<DMA Requests Enable     */
N#define  I2C_CR2_LAST                        ((uint16_t)0x1000)            /*!<DMA Last Transfer       */
N
N/*******************  Bit definition for I2C_OAR1 register  *******************/
N#define  I2C_OAR1_ADD1_7                     ((uint16_t)0x00FE)            /*!<Interface Address */
N#define  I2C_OAR1_ADD8_9                     ((uint16_t)0x0300)            /*!<Interface Address */
N
N#define  I2C_OAR1_ADD0                       ((uint16_t)0x0001)            /*!<Bit 0 */
N#define  I2C_OAR1_ADD1                       ((uint16_t)0x0002)            /*!<Bit 1 */
N#define  I2C_OAR1_ADD2                       ((uint16_t)0x0004)            /*!<Bit 2 */
N#define  I2C_OAR1_ADD3                       ((uint16_t)0x0008)            /*!<Bit 3 */
N#define  I2C_OAR1_ADD4                       ((uint16_t)0x0010)            /*!<Bit 4 */
N#define  I2C_OAR1_ADD5                       ((uint16_t)0x0020)            /*!<Bit 5 */
N#define  I2C_OAR1_ADD6                       ((uint16_t)0x0040)            /*!<Bit 6 */
N#define  I2C_OAR1_ADD7                       ((uint16_t)0x0080)            /*!<Bit 7 */
N#define  I2C_OAR1_ADD8                       ((uint16_t)0x0100)            /*!<Bit 8 */
N#define  I2C_OAR1_ADD9                       ((uint16_t)0x0200)            /*!<Bit 9 */
N
N#define  I2C_OAR1_ADDMODE                    ((uint16_t)0x8000)            /*!<Addressing Mode (Slave mode) */
N
N/*******************  Bit definition for I2C_OAR2 register  *******************/
N#define  I2C_OAR2_ENDUAL                     ((uint8_t)0x01)               /*!<Dual addressing mode enable */
N#define  I2C_OAR2_ADD2                       ((uint8_t)0xFE)               /*!<Interface address           */
N
N/********************  Bit definition for I2C_DR register  ********************/
N#define  I2C_DR_DR                           ((uint8_t)0xFF)               /*!<8-bit Data Register         */
N
N/*******************  Bit definition for I2C_SR1 register  ********************/
N#define  I2C_SR1_SB                          ((uint16_t)0x0001)            /*!<Start Bit (Master mode)                         */
N#define  I2C_SR1_ADDR                        ((uint16_t)0x0002)            /*!<Address sent (master mode)/matched (slave mode) */
N#define  I2C_SR1_BTF                         ((uint16_t)0x0004)            /*!<Byte Transfer Finished                          */
N#define  I2C_SR1_ADD10                       ((uint16_t)0x0008)            /*!<10-bit header sent (Master mode)                */
N#define  I2C_SR1_STOPF                       ((uint16_t)0x0010)            /*!<Stop detection (Slave mode)                     */
N#define  I2C_SR1_RXNE                        ((uint16_t)0x0040)            /*!<Data Register not Empty (receivers)             */
N#define  I2C_SR1_TXE                         ((uint16_t)0x0080)            /*!<Data Register Empty (transmitters)              */
N#define  I2C_SR1_BERR                        ((uint16_t)0x0100)            /*!<Bus Error                                       */
N#define  I2C_SR1_ARLO                        ((uint16_t)0x0200)            /*!<Arbitration Lost (master mode)                  */
N#define  I2C_SR1_AF                          ((uint16_t)0x0400)            /*!<Acknowledge Failure                             */
N#define  I2C_SR1_OVR                         ((uint16_t)0x0800)            /*!<Overrun/Underrun                                */
N#define  I2C_SR1_PECERR                      ((uint16_t)0x1000)            /*!<PEC Error in reception                          */
N#define  I2C_SR1_TIMEOUT                     ((uint16_t)0x4000)            /*!<Timeout or Tlow Error                           */
N#define  I2C_SR1_SMBALERT                    ((uint16_t)0x8000)            /*!<SMBus Alert                                     */
N
N/*******************  Bit definition for I2C_SR2 register  ********************/
N#define  I2C_SR2_MSL                         ((uint16_t)0x0001)            /*!<Master/Slave                              */
N#define  I2C_SR2_BUSY                        ((uint16_t)0x0002)            /*!<Bus Busy                                  */
N#define  I2C_SR2_TRA                         ((uint16_t)0x0004)            /*!<Transmitter/Receiver                      */
N#define  I2C_SR2_GENCALL                     ((uint16_t)0x0010)            /*!<General Call Address (Slave mode)         */
N#define  I2C_SR2_SMBDEFAULT                  ((uint16_t)0x0020)            /*!<SMBus Device Default Address (Slave mode) */
N#define  I2C_SR2_SMBHOST                     ((uint16_t)0x0040)            /*!<SMBus Host Header (Slave mode)            */
N#define  I2C_SR2_DUALF                       ((uint16_t)0x0080)            /*!<Dual Flag (Slave mode)                    */
N#define  I2C_SR2_PEC                         ((uint16_t)0xFF00)            /*!<Packet Error Checking Register            */
N
N/*******************  Bit definition for I2C_CCR register  ********************/
N#define  I2C_CCR_CCR                         ((uint16_t)0x0FFF)            /*!<Clock Control Register in Fast/Standard mode (Master mode) */
N#define  I2C_CCR_DUTY                        ((uint16_t)0x4000)            /*!<Fast Mode Duty Cycle                                       */
N#define  I2C_CCR_FS                          ((uint16_t)0x8000)            /*!<I2C Master Mode Selection                                  */
N
N/******************  Bit definition for I2C_TRISE register  *******************/
N#define  I2C_TRISE_TRISE                     ((uint8_t)0x3F)               /*!<Maximum Rise Time in Fast/Standard mode (Master mode) */
N
N/******************  Bit definition for I2C_FLTR register  *******************/
N#define  I2C_FLTR_DNF                     ((uint8_t)0x0F)                  /*!<Digital Noise Filter */
N#define  I2C_FLTR_ANOFF                   ((uint8_t)0x10)                  /*!<Analog Noise Filter OFF */
N
N/******************************************************************************/
N/*                                                                            */
N/*                           Independent WATCHDOG                             */
N/*                                                                            */
N/******************************************************************************/
N/*******************  Bit definition for IWDG_KR register  ********************/
N#define  IWDG_KR_KEY                         ((uint16_t)0xFFFF)            /*!<Key value (write only, read 0000h)  */
N
N/*******************  Bit definition for IWDG_PR register  ********************/
N#define  IWDG_PR_PR                          ((uint8_t)0x07)               /*!<PR[2:0] (Prescaler divider)         */
N#define  IWDG_PR_PR_0                        ((uint8_t)0x01)               /*!<Bit 0 */
N#define  IWDG_PR_PR_1                        ((uint8_t)0x02)               /*!<Bit 1 */
N#define  IWDG_PR_PR_2                        ((uint8_t)0x04)               /*!<Bit 2 */
N
N/*******************  Bit definition for IWDG_RLR register  *******************/
N#define  IWDG_RLR_RL                         ((uint16_t)0x0FFF)            /*!<Watchdog counter reload value        */
N
N/*******************  Bit definition for IWDG_SR register  ********************/
N#define  IWDG_SR_PVU                         ((uint8_t)0x01)               /*!<Watchdog prescaler value update      */
N#define  IWDG_SR_RVU                         ((uint8_t)0x02)               /*!<Watchdog counter reload value update */
N
N/******************************************************************************/
N/*                                                                            */
N/*                      LCD-TFT Display Controller (LTDC)                     */
N/*                                                                            */
N/******************************************************************************/
N
N/********************  Bit definition for LTDC_SSCR register  *****************/
N
N#define LTDC_SSCR_VSH                       ((uint32_t)0x000007FF)              /*!< Vertical Synchronization Height */
N#define LTDC_SSCR_HSW                       ((uint32_t)0x0FFF0000)              /*!< Horizontal Synchronization Width */
N
N/********************  Bit definition for LTDC_BPCR register  *****************/
N
N#define LTDC_BPCR_AVBP                      ((uint32_t)0x000007FF)              /*!< Accumulated Vertical Back Porch */
N#define LTDC_BPCR_AHBP                      ((uint32_t)0x0FFF0000)              /*!< Accumulated Horizontal Back Porch */
N
N/********************  Bit definition for LTDC_AWCR register  *****************/
N
N#define LTDC_AWCR_AAH                       ((uint32_t)0x000007FF)              /*!< Accumulated Active heigh */
N#define LTDC_AWCR_AAW                       ((uint32_t)0x0FFF0000)              /*!< Accumulated Active Width */
N
N/********************  Bit definition for LTDC_TWCR register  *****************/
N
N#define LTDC_TWCR_TOTALH                    ((uint32_t)0x000007FF)              /*!< Total Heigh */
N#define LTDC_TWCR_TOTALW                    ((uint32_t)0x0FFF0000)              /*!< Total Width */
N
N/********************  Bit definition for LTDC_GCR register  ******************/
N
N#define LTDC_GCR_LTDCEN                     ((uint32_t)0x00000001)              /*!< LCD-TFT controller enable bit */
N#define LTDC_GCR_DBW                        ((uint32_t)0x00000070)              /*!< Dither Blue Width */
N#define LTDC_GCR_DGW                        ((uint32_t)0x00000700)              /*!< Dither Green Width */
N#define LTDC_GCR_DRW                        ((uint32_t)0x00007000)              /*!< Dither Red Width */
N#define LTDC_GCR_DTEN                       ((uint32_t)0x00010000)              /*!< Dither Enable */
N#define LTDC_GCR_PCPOL                      ((uint32_t)0x10000000)              /*!< Pixel Clock Polarity */
N#define LTDC_GCR_DEPOL                      ((uint32_t)0x20000000)              /*!< Data Enable Polarity */
N#define LTDC_GCR_VSPOL                      ((uint32_t)0x40000000)              /*!< Vertical Synchronization Polarity */
N#define LTDC_GCR_HSPOL                      ((uint32_t)0x80000000)              /*!< Horizontal Synchronization Polarity */
N
N/********************  Bit definition for LTDC_SRCR register  *****************/
N
N#define LTDC_SRCR_IMR                      ((uint32_t)0x00000001)               /*!< Immediate Reload */
N#define LTDC_SRCR_VBR                      ((uint32_t)0x00000002)               /*!< Vertical Blanking Reload */
N
N/********************  Bit definition for LTDC_BCCR register  *****************/
N
N#define LTDC_BCCR_BCBLUE                    ((uint32_t)0x000000FF)              /*!< Background Blue value */
N#define LTDC_BCCR_BCGREEN                   ((uint32_t)0x0000FF00)              /*!< Background Green value */
N#define LTDC_BCCR_BCRED                     ((uint32_t)0x00FF0000)              /*!< Background Red value */
N
N/********************  Bit definition for LTDC_IER register  ******************/
N
N#define LTDC_IER_LIE                        ((uint32_t)0x00000001)              /*!< Line Interrupt Enable */
N#define LTDC_IER_FUIE                       ((uint32_t)0x00000002)              /*!< FIFO Underrun Interrupt Enable */
N#define LTDC_IER_TERRIE                     ((uint32_t)0x00000004)              /*!< Transfer Error Interrupt Enable */
N#define LTDC_IER_RRIE                       ((uint32_t)0x00000008)              /*!< Register Reload interrupt enable */
N
N/********************  Bit definition for LTDC_ISR register  ******************/
N
N#define LTDC_ISR_LIF                        ((uint32_t)0x00000001)              /*!< Line Interrupt Flag */
N#define LTDC_ISR_FUIF                       ((uint32_t)0x00000002)              /*!< FIFO Underrun Interrupt Flag */
N#define LTDC_ISR_TERRIF                     ((uint32_t)0x00000004)              /*!< Transfer Error Interrupt Flag */
N#define LTDC_ISR_RRIF                       ((uint32_t)0x00000008)              /*!< Register Reload interrupt Flag */
N
N/********************  Bit definition for LTDC_ICR register  ******************/
N
N#define LTDC_ICR_CLIF                       ((uint32_t)0x00000001)              /*!< Clears the Line Interrupt Flag */
N#define LTDC_ICR_CFUIF                      ((uint32_t)0x00000002)              /*!< Clears the FIFO Underrun Interrupt Flag */
N#define LTDC_ICR_CTERRIF                    ((uint32_t)0x00000004)              /*!< Clears the Transfer Error Interrupt Flag */
N#define LTDC_ICR_CRRIF                      ((uint32_t)0x00000008)              /*!< Clears Register Reload interrupt Flag */
N
N/********************  Bit definition for LTDC_LIPCR register  ****************/
N
N#define LTDC_LIPCR_LIPOS                    ((uint32_t)0x000007FF)              /*!< Line Interrupt Position */
N
N/********************  Bit definition for LTDC_CPSR register  *****************/
N
N#define LTDC_CPSR_CYPOS                     ((uint32_t)0x0000FFFF)              /*!< Current Y Position */
N#define LTDC_CPSR_CXPOS                     ((uint32_t)0xFFFF0000)              /*!< Current X Position */
N
N/********************  Bit definition for LTDC_CDSR register  *****************/
N
N#define LTDC_CDSR_VDES                      ((uint32_t)0x00000001)              /*!< Vertical Data Enable Status */
N#define LTDC_CDSR_HDES                      ((uint32_t)0x00000002)              /*!< Horizontal Data Enable Status */
N#define LTDC_CDSR_VSYNCS                    ((uint32_t)0x00000004)              /*!< Vertical Synchronization Status */
N#define LTDC_CDSR_HSYNCS                    ((uint32_t)0x00000008)              /*!< Horizontal Synchronization Status */
N
N/********************  Bit definition for LTDC_LxCR register  *****************/
N
N#define LTDC_LxCR_LEN                       ((uint32_t)0x00000001)              /*!< Layer Enable */
N#define LTDC_LxCR_COLKEN                    ((uint32_t)0x00000002)              /*!< Color Keying Enable */
N#define LTDC_LxCR_CLUTEN                    ((uint32_t)0x00000010)              /*!< Color Lockup Table Enable */
N
N/********************  Bit definition for LTDC_LxWHPCR register  **************/
N
N#define LTDC_LxWHPCR_WHSTPOS                ((uint32_t)0x00000FFF)              /*!< Window Horizontal Start Position */
N#define LTDC_LxWHPCR_WHSPPOS                ((uint32_t)0xFFFF0000)              /*!< Window Horizontal Stop Position */
N
N/********************  Bit definition for LTDC_LxWVPCR register  **************/
N
N#define LTDC_LxWVPCR_WVSTPOS                ((uint32_t)0x00000FFF)              /*!< Window Vertical Start Position */
N#define LTDC_LxWVPCR_WVSPPOS                ((uint32_t)0xFFFF0000)              /*!< Window Vertical Stop Position */
N
N/********************  Bit definition for LTDC_LxCKCR register  ***************/
N
N#define LTDC_LxCKCR_CKBLUE                  ((uint32_t)0x000000FF)              /*!< Color Key Blue value */
N#define LTDC_LxCKCR_CKGREEN                 ((uint32_t)0x0000FF00)              /*!< Color Key Green value */
N#define LTDC_LxCKCR_CKRED                   ((uint32_t)0x00FF0000)              /*!< Color Key Red value */
N
N/********************  Bit definition for LTDC_LxPFCR register  ***************/
N
N#define LTDC_LxPFCR_PF                      ((uint32_t)0x00000007)              /*!< Pixel Format */
N
N/********************  Bit definition for LTDC_LxCACR register  ***************/
N
N#define LTDC_LxCACR_CONSTA                  ((uint32_t)0x000000FF)              /*!< Constant Alpha */
N
N/********************  Bit definition for LTDC_LxDCCR register  ***************/
N
N#define LTDC_LxDCCR_DCBLUE                  ((uint32_t)0x000000FF)              /*!< Default Color Blue */
N#define LTDC_LxDCCR_DCGREEN                 ((uint32_t)0x0000FF00)              /*!< Default Color Green */
N#define LTDC_LxDCCR_DCRED                   ((uint32_t)0x00FF0000)              /*!< Default Color Red */
N#define LTDC_LxDCCR_DCALPHA                 ((uint32_t)0xFF000000)              /*!< Default Color Alpha */
N                                
N/********************  Bit definition for LTDC_LxBFCR register  ***************/
N
N#define LTDC_LxBFCR_BF2                     ((uint32_t)0x00000007)              /*!< Blending Factor 2 */
N#define LTDC_LxBFCR_BF1                     ((uint32_t)0x00000700)              /*!< Blending Factor 1 */
N
N/********************  Bit definition for LTDC_LxCFBAR register  **************/
N
N#define LTDC_LxCFBAR_CFBADD                 ((uint32_t)0xFFFFFFFF)              /*!< Color Frame Buffer Start Address */
N
N/********************  Bit definition for LTDC_LxCFBLR register  **************/
N
N#define LTDC_LxCFBLR_CFBLL                  ((uint32_t)0x00001FFF)              /*!< Color Frame Buffer Line Length */
N#define LTDC_LxCFBLR_CFBP                   ((uint32_t)0x1FFF0000)              /*!< Color Frame Buffer Pitch in bytes */
N
N/********************  Bit definition for LTDC_LxCFBLNR register  *************/
N
N#define LTDC_LxCFBLNR_CFBLNBR               ((uint32_t)0x000007FF)              /*!< Frame Buffer Line Number */
N
N/********************  Bit definition for LTDC_LxCLUTWR register  *************/
N
N#define LTDC_LxCLUTWR_BLUE                  ((uint32_t)0x000000FF)              /*!< Blue value */
N#define LTDC_LxCLUTWR_GREEN                 ((uint32_t)0x0000FF00)              /*!< Green value */
N#define LTDC_LxCLUTWR_RED                   ((uint32_t)0x00FF0000)              /*!< Red value */
N#define LTDC_LxCLUTWR_CLUTADD               ((uint32_t)0xFF000000)              /*!< CLUT address */
N
N/******************************************************************************/
N/*                                                                            */
N/*                             Power Control                                  */
N/*                                                                            */
N/******************************************************************************/
N/********************  Bit definition for PWR_CR register  ********************/
N#define  PWR_CR_LPDS                         ((uint32_t)0x00000001)     /*!< Low-Power Deepsleep                 */
N#define  PWR_CR_PDDS                         ((uint32_t)0x00000002)     /*!< Power Down Deepsleep                */
N#define  PWR_CR_CWUF                         ((uint32_t)0x00000004)     /*!< Clear Wakeup Flag                   */
N#define  PWR_CR_CSBF                         ((uint32_t)0x00000008)     /*!< Clear Standby Flag                  */
N#define  PWR_CR_PVDE                         ((uint32_t)0x00000010)     /*!< Power Voltage Detector Enable       */
N
N#define  PWR_CR_PLS                          ((uint32_t)0x000000E0)     /*!< PLS[2:0] bits (PVD Level Selection) */
N#define  PWR_CR_PLS_0                        ((uint32_t)0x00000020)     /*!< Bit 0 */
N#define  PWR_CR_PLS_1                        ((uint32_t)0x00000040)     /*!< Bit 1 */
N#define  PWR_CR_PLS_2                        ((uint32_t)0x00000080)     /*!< Bit 2 */
N
N/*!< PVD level configuration */
N#define  PWR_CR_PLS_LEV0                     ((uint32_t)0x00000000)     /*!< PVD level 0 */
N#define  PWR_CR_PLS_LEV1                     ((uint32_t)0x00000020)     /*!< PVD level 1 */
N#define  PWR_CR_PLS_LEV2                     ((uint32_t)0x00000040)     /*!< PVD level 2 */
N#define  PWR_CR_PLS_LEV3                     ((uint32_t)0x00000060)     /*!< PVD level 3 */
N#define  PWR_CR_PLS_LEV4                     ((uint32_t)0x00000080)     /*!< PVD level 4 */
N#define  PWR_CR_PLS_LEV5                     ((uint32_t)0x000000A0)     /*!< PVD level 5 */
N#define  PWR_CR_PLS_LEV6                     ((uint32_t)0x000000C0)     /*!< PVD level 6 */
N#define  PWR_CR_PLS_LEV7                     ((uint32_t)0x000000E0)     /*!< PVD level 7 */
N
N#define  PWR_CR_DBP                          ((uint32_t)0x00000100)     /*!< Disable Backup Domain write protection                     */
N#define  PWR_CR_FPDS                         ((uint32_t)0x00000200)     /*!< Flash power down in Stop mode                              */
N#define  PWR_CR_LPUDS                        ((uint32_t)0x00000400)     /*!< Low-Power Regulator in Stop under-drive mode               */
N#define  PWR_CR_MRUDS                        ((uint32_t)0x00000800)     /*!< Main regulator in Stop under-drive mode                    */
N
N#define  PWR_CR_ADCDC1                       ((uint32_t)0x00002000)     /*!< Refer to AN4073 on how to use this bit */ 
N
N#define  PWR_CR_VOS                          ((uint32_t)0x0000C000)     /*!< VOS[1:0] bits (Regulator voltage scaling output selection) */
N#define  PWR_CR_VOS_0                        ((uint32_t)0x00004000)     /*!< Bit 0 */
N#define  PWR_CR_VOS_1                        ((uint32_t)0x00008000)     /*!< Bit 1 */
N
N#define  PWR_CR_ODEN                         ((uint32_t)0x00010000)     /*!< Over Drive enable                   */
N#define  PWR_CR_ODSWEN                       ((uint32_t)0x00020000)     /*!< Over Drive switch enabled           */
N#define  PWR_CR_UDEN                         ((uint32_t)0x000C0000)     /*!< Under Drive enable in stop mode     */
N#define  PWR_CR_UDEN_0                       ((uint32_t)0x00040000)     /*!< Bit 0                               */
N#define  PWR_CR_UDEN_1                       ((uint32_t)0x00080000)     /*!< Bit 1                               */
N
N/* Legacy define */
N#define  PWR_CR_PMODE                        PWR_CR_VOS
N
N/*******************  Bit definition for PWR_CSR register  ********************/
N#define  PWR_CSR_WUF                         ((uint32_t)0x00000001)     /*!< Wakeup Flag                                      */
N#define  PWR_CSR_SBF                         ((uint32_t)0x00000002)     /*!< Standby Flag                                     */
N#define  PWR_CSR_PVDO                        ((uint32_t)0x00000004)     /*!< PVD Output                                       */
N#define  PWR_CSR_BRR                         ((uint32_t)0x00000008)     /*!< Backup regulator ready                           */
N#define  PWR_CSR_EWUP                        ((uint32_t)0x00000100)     /*!< Enable WKUP pin                                  */
N#define  PWR_CSR_BRE                         ((uint32_t)0x00000200)     /*!< Backup regulator enable                          */
N#define  PWR_CSR_VOSRDY                      ((uint32_t)0x00004000)     /*!< Regulator voltage scaling output selection ready */
N#define  PWR_CSR_ODRDY                       ((uint32_t)0x00010000)     /*!< Over Drive generator ready                       */
N#define  PWR_CSR_ODSWRDY                     ((uint32_t)0x00020000)     /*!< Over Drive Switch ready                          */
N#define  PWR_CSR_UDSWRDY                     ((uint32_t)0x000C0000)     /*!< Under Drive ready                                */
N
N/* Legacy define */
N#define  PWR_CSR_REGRDY                      PWR_CSR_VOSRDY
N
N/******************************************************************************/
N/*                                                                            */
N/*                         Reset and Clock Control                            */
N/*                                                                            */
N/******************************************************************************/
N/********************  Bit definition for RCC_CR register  ********************/
N#define  RCC_CR_HSION                        ((uint32_t)0x00000001)
N#define  RCC_CR_HSIRDY                       ((uint32_t)0x00000002)
N
N#define  RCC_CR_HSITRIM                      ((uint32_t)0x000000F8)
N#define  RCC_CR_HSITRIM_0                    ((uint32_t)0x00000008)/*!<Bit 0 */
N#define  RCC_CR_HSITRIM_1                    ((uint32_t)0x00000010)/*!<Bit 1 */
N#define  RCC_CR_HSITRIM_2                    ((uint32_t)0x00000020)/*!<Bit 2 */
N#define  RCC_CR_HSITRIM_3                    ((uint32_t)0x00000040)/*!<Bit 3 */
N#define  RCC_CR_HSITRIM_4                    ((uint32_t)0x00000080)/*!<Bit 4 */
N
N#define  RCC_CR_HSICAL                       ((uint32_t)0x0000FF00)
N#define  RCC_CR_HSICAL_0                     ((uint32_t)0x00000100)/*!<Bit 0 */
N#define  RCC_CR_HSICAL_1                     ((uint32_t)0x00000200)/*!<Bit 1 */
N#define  RCC_CR_HSICAL_2                     ((uint32_t)0x00000400)/*!<Bit 2 */
N#define  RCC_CR_HSICAL_3                     ((uint32_t)0x00000800)/*!<Bit 3 */
N#define  RCC_CR_HSICAL_4                     ((uint32_t)0x00001000)/*!<Bit 4 */
N#define  RCC_CR_HSICAL_5                     ((uint32_t)0x00002000)/*!<Bit 5 */
N#define  RCC_CR_HSICAL_6                     ((uint32_t)0x00004000)/*!<Bit 6 */
N#define  RCC_CR_HSICAL_7                     ((uint32_t)0x00008000)/*!<Bit 7 */
N
N#define  RCC_CR_HSEON                        ((uint32_t)0x00010000)
N#define  RCC_CR_HSERDY                       ((uint32_t)0x00020000)
N#define  RCC_CR_HSEBYP                       ((uint32_t)0x00040000)
N#define  RCC_CR_CSSON                        ((uint32_t)0x00080000)
N#define  RCC_CR_PLLON                        ((uint32_t)0x01000000)
N#define  RCC_CR_PLLRDY                       ((uint32_t)0x02000000)
N#define  RCC_CR_PLLI2SON                     ((uint32_t)0x04000000)
N#define  RCC_CR_PLLI2SRDY                    ((uint32_t)0x08000000)
N#define  RCC_CR_PLLSAION                     ((uint32_t)0x10000000)
N#define  RCC_CR_PLLSAIRDY                    ((uint32_t)0x20000000)
N
N/********************  Bit definition for RCC_PLLCFGR register  ***************/
N#define  RCC_PLLCFGR_PLLM                    ((uint32_t)0x0000003F)
N#define  RCC_PLLCFGR_PLLM_0                  ((uint32_t)0x00000001)
N#define  RCC_PLLCFGR_PLLM_1                  ((uint32_t)0x00000002)
N#define  RCC_PLLCFGR_PLLM_2                  ((uint32_t)0x00000004)
N#define  RCC_PLLCFGR_PLLM_3                  ((uint32_t)0x00000008)
N#define  RCC_PLLCFGR_PLLM_4                  ((uint32_t)0x00000010)
N#define  RCC_PLLCFGR_PLLM_5                  ((uint32_t)0x00000020)
N
N#define  RCC_PLLCFGR_PLLN                     ((uint32_t)0x00007FC0)
N#define  RCC_PLLCFGR_PLLN_0                   ((uint32_t)0x00000040)
N#define  RCC_PLLCFGR_PLLN_1                   ((uint32_t)0x00000080)
N#define  RCC_PLLCFGR_PLLN_2                   ((uint32_t)0x00000100)
N#define  RCC_PLLCFGR_PLLN_3                   ((uint32_t)0x00000200)
N#define  RCC_PLLCFGR_PLLN_4                   ((uint32_t)0x00000400)
N#define  RCC_PLLCFGR_PLLN_5                   ((uint32_t)0x00000800)
N#define  RCC_PLLCFGR_PLLN_6                   ((uint32_t)0x00001000)
N#define  RCC_PLLCFGR_PLLN_7                   ((uint32_t)0x00002000)
N#define  RCC_PLLCFGR_PLLN_8                   ((uint32_t)0x00004000)
N
N#define  RCC_PLLCFGR_PLLP                    ((uint32_t)0x00030000)
N#define  RCC_PLLCFGR_PLLP_0                  ((uint32_t)0x00010000)
N#define  RCC_PLLCFGR_PLLP_1                  ((uint32_t)0x00020000)
N
N#define  RCC_PLLCFGR_PLLSRC                  ((uint32_t)0x00400000)
N#define  RCC_PLLCFGR_PLLSRC_HSE              ((uint32_t)0x00400000)
N#define  RCC_PLLCFGR_PLLSRC_HSI              ((uint32_t)0x00000000)
N
N#define  RCC_PLLCFGR_PLLQ                    ((uint32_t)0x0F000000)
N#define  RCC_PLLCFGR_PLLQ_0                  ((uint32_t)0x01000000)
N#define  RCC_PLLCFGR_PLLQ_1                  ((uint32_t)0x02000000)
N#define  RCC_PLLCFGR_PLLQ_2                  ((uint32_t)0x04000000)
N#define  RCC_PLLCFGR_PLLQ_3                  ((uint32_t)0x08000000)
N
N/********************  Bit definition for RCC_CFGR register  ******************/
N/*!< SW configuration */
N#define  RCC_CFGR_SW                         ((uint32_t)0x00000003)        /*!< SW[1:0] bits (System clock Switch) */
N#define  RCC_CFGR_SW_0                       ((uint32_t)0x00000001)        /*!< Bit 0 */
N#define  RCC_CFGR_SW_1                       ((uint32_t)0x00000002)        /*!< Bit 1 */
N
N#define  RCC_CFGR_SW_HSI                     ((uint32_t)0x00000000)        /*!< HSI selected as system clock */
N#define  RCC_CFGR_SW_HSE                     ((uint32_t)0x00000001)        /*!< HSE selected as system clock */
N#define  RCC_CFGR_SW_PLL                     ((uint32_t)0x00000002)        /*!< PLL selected as system clock */
N
N/*!< SWS configuration */
N#define  RCC_CFGR_SWS                        ((uint32_t)0x0000000C)        /*!< SWS[1:0] bits (System Clock Switch Status) */
N#define  RCC_CFGR_SWS_0                      ((uint32_t)0x00000004)        /*!< Bit 0 */
N#define  RCC_CFGR_SWS_1                      ((uint32_t)0x00000008)        /*!< Bit 1 */
N
N#define  RCC_CFGR_SWS_HSI                    ((uint32_t)0x00000000)        /*!< HSI oscillator used as system clock */
N#define  RCC_CFGR_SWS_HSE                    ((uint32_t)0x00000004)        /*!< HSE oscillator used as system clock */
N#define  RCC_CFGR_SWS_PLL                    ((uint32_t)0x00000008)        /*!< PLL used as system clock */
N
N/*!< HPRE configuration */
N#define  RCC_CFGR_HPRE                       ((uint32_t)0x000000F0)        /*!< HPRE[3:0] bits (AHB prescaler) */
N#define  RCC_CFGR_HPRE_0                     ((uint32_t)0x00000010)        /*!< Bit 0 */
N#define  RCC_CFGR_HPRE_1                     ((uint32_t)0x00000020)        /*!< Bit 1 */
N#define  RCC_CFGR_HPRE_2                     ((uint32_t)0x00000040)        /*!< Bit 2 */
N#define  RCC_CFGR_HPRE_3                     ((uint32_t)0x00000080)        /*!< Bit 3 */
N
N#define  RCC_CFGR_HPRE_DIV1                  ((uint32_t)0x00000000)        /*!< SYSCLK not divided */
N#define  RCC_CFGR_HPRE_DIV2                  ((uint32_t)0x00000080)        /*!< SYSCLK divided by 2 */
N#define  RCC_CFGR_HPRE_DIV4                  ((uint32_t)0x00000090)        /*!< SYSCLK divided by 4 */
N#define  RCC_CFGR_HPRE_DIV8                  ((uint32_t)0x000000A0)        /*!< SYSCLK divided by 8 */
N#define  RCC_CFGR_HPRE_DIV16                 ((uint32_t)0x000000B0)        /*!< SYSCLK divided by 16 */
N#define  RCC_CFGR_HPRE_DIV64                 ((uint32_t)0x000000C0)        /*!< SYSCLK divided by 64 */
N#define  RCC_CFGR_HPRE_DIV128                ((uint32_t)0x000000D0)        /*!< SYSCLK divided by 128 */
N#define  RCC_CFGR_HPRE_DIV256                ((uint32_t)0x000000E0)        /*!< SYSCLK divided by 256 */
N#define  RCC_CFGR_HPRE_DIV512                ((uint32_t)0x000000F0)        /*!< SYSCLK divided by 512 */
N
N/*!< PPRE1 configuration */
N#define  RCC_CFGR_PPRE1                      ((uint32_t)0x00001C00)        /*!< PRE1[2:0] bits (APB1 prescaler) */
N#define  RCC_CFGR_PPRE1_0                    ((uint32_t)0x00000400)        /*!< Bit 0 */
N#define  RCC_CFGR_PPRE1_1                    ((uint32_t)0x00000800)        /*!< Bit 1 */
N#define  RCC_CFGR_PPRE1_2                    ((uint32_t)0x00001000)        /*!< Bit 2 */
N
N#define  RCC_CFGR_PPRE1_DIV1                 ((uint32_t)0x00000000)        /*!< HCLK not divided */
N#define  RCC_CFGR_PPRE1_DIV2                 ((uint32_t)0x00001000)        /*!< HCLK divided by 2 */
N#define  RCC_CFGR_PPRE1_DIV4                 ((uint32_t)0x00001400)        /*!< HCLK divided by 4 */
N#define  RCC_CFGR_PPRE1_DIV8                 ((uint32_t)0x00001800)        /*!< HCLK divided by 8 */
N#define  RCC_CFGR_PPRE1_DIV16                ((uint32_t)0x00001C00)        /*!< HCLK divided by 16 */
N
N/*!< PPRE2 configuration */
N#define  RCC_CFGR_PPRE2                      ((uint32_t)0x0000E000)        /*!< PRE2[2:0] bits (APB2 prescaler) */
N#define  RCC_CFGR_PPRE2_0                    ((uint32_t)0x00002000)        /*!< Bit 0 */
N#define  RCC_CFGR_PPRE2_1                    ((uint32_t)0x00004000)        /*!< Bit 1 */
N#define  RCC_CFGR_PPRE2_2                    ((uint32_t)0x00008000)        /*!< Bit 2 */
N
N#define  RCC_CFGR_PPRE2_DIV1                 ((uint32_t)0x00000000)        /*!< HCLK not divided */
N#define  RCC_CFGR_PPRE2_DIV2                 ((uint32_t)0x00008000)        /*!< HCLK divided by 2 */
N#define  RCC_CFGR_PPRE2_DIV4                 ((uint32_t)0x0000A000)        /*!< HCLK divided by 4 */
N#define  RCC_CFGR_PPRE2_DIV8                 ((uint32_t)0x0000C000)        /*!< HCLK divided by 8 */
N#define  RCC_CFGR_PPRE2_DIV16                ((uint32_t)0x0000E000)        /*!< HCLK divided by 16 */
N
N/*!< RTCPRE configuration */
N#define  RCC_CFGR_RTCPRE                     ((uint32_t)0x001F0000)
N#define  RCC_CFGR_RTCPRE_0                   ((uint32_t)0x00010000)
N#define  RCC_CFGR_RTCPRE_1                   ((uint32_t)0x00020000)
N#define  RCC_CFGR_RTCPRE_2                   ((uint32_t)0x00040000)
N#define  RCC_CFGR_RTCPRE_3                   ((uint32_t)0x00080000)
N#define  RCC_CFGR_RTCPRE_4                   ((uint32_t)0x00100000)
N
N/*!< MCO1 configuration */
N#define  RCC_CFGR_MCO1                       ((uint32_t)0x00600000)
N#define  RCC_CFGR_MCO1_0                     ((uint32_t)0x00200000)
N#define  RCC_CFGR_MCO1_1                     ((uint32_t)0x00400000)
N
N#define  RCC_CFGR_I2SSRC                     ((uint32_t)0x00800000)
N
N#define  RCC_CFGR_MCO1PRE                    ((uint32_t)0x07000000)
N#define  RCC_CFGR_MCO1PRE_0                  ((uint32_t)0x01000000)
N#define  RCC_CFGR_MCO1PRE_1                  ((uint32_t)0x02000000)
N#define  RCC_CFGR_MCO1PRE_2                  ((uint32_t)0x04000000)
N
N#define  RCC_CFGR_MCO2PRE                    ((uint32_t)0x38000000)
N#define  RCC_CFGR_MCO2PRE_0                  ((uint32_t)0x08000000)
N#define  RCC_CFGR_MCO2PRE_1                  ((uint32_t)0x10000000)
N#define  RCC_CFGR_MCO2PRE_2                  ((uint32_t)0x20000000)
N
N#define  RCC_CFGR_MCO2                       ((uint32_t)0xC0000000)
N#define  RCC_CFGR_MCO2_0                     ((uint32_t)0x40000000)
N#define  RCC_CFGR_MCO2_1                     ((uint32_t)0x80000000)
N
N/********************  Bit definition for RCC_CIR register  *******************/
N#define  RCC_CIR_LSIRDYF                     ((uint32_t)0x00000001)
N#define  RCC_CIR_LSERDYF                     ((uint32_t)0x00000002)
N#define  RCC_CIR_HSIRDYF                     ((uint32_t)0x00000004)
N#define  RCC_CIR_HSERDYF                     ((uint32_t)0x00000008)
N#define  RCC_CIR_PLLRDYF                     ((uint32_t)0x00000010)
N#define  RCC_CIR_PLLI2SRDYF                  ((uint32_t)0x00000020)
N#define  RCC_CIR_PLLSAIRDYF                  ((uint32_t)0x00000040)
N#define  RCC_CIR_CSSF                        ((uint32_t)0x00000080)
N#define  RCC_CIR_LSIRDYIE                    ((uint32_t)0x00000100)
N#define  RCC_CIR_LSERDYIE                    ((uint32_t)0x00000200)
N#define  RCC_CIR_HSIRDYIE                    ((uint32_t)0x00000400)
N#define  RCC_CIR_HSERDYIE                    ((uint32_t)0x00000800)
N#define  RCC_CIR_PLLRDYIE                    ((uint32_t)0x00001000)
N#define  RCC_CIR_PLLI2SRDYIE                 ((uint32_t)0x00002000)
N#define  RCC_CIR_PLLSAIRDYIE                 ((uint32_t)0x00004000)
N#define  RCC_CIR_LSIRDYC                     ((uint32_t)0x00010000)
N#define  RCC_CIR_LSERDYC                     ((uint32_t)0x00020000)
N#define  RCC_CIR_HSIRDYC                     ((uint32_t)0x00040000)
N#define  RCC_CIR_HSERDYC                     ((uint32_t)0x00080000)
N#define  RCC_CIR_PLLRDYC                     ((uint32_t)0x00100000)
N#define  RCC_CIR_PLLI2SRDYC                  ((uint32_t)0x00200000)
N#define  RCC_CIR_PLLSAIRDYC                  ((uint32_t)0x00400000)
N#define  RCC_CIR_CSSC                        ((uint32_t)0x00800000)
N
N/********************  Bit definition for RCC_AHB1RSTR register  **************/
N#define  RCC_AHB1RSTR_GPIOARST               ((uint32_t)0x00000001)
N#define  RCC_AHB1RSTR_GPIOBRST               ((uint32_t)0x00000002)
N#define  RCC_AHB1RSTR_GPIOCRST               ((uint32_t)0x00000004)
N#define  RCC_AHB1RSTR_GPIODRST               ((uint32_t)0x00000008)
N#define  RCC_AHB1RSTR_GPIOERST               ((uint32_t)0x00000010)
N#define  RCC_AHB1RSTR_GPIOFRST               ((uint32_t)0x00000020)
N#define  RCC_AHB1RSTR_GPIOGRST               ((uint32_t)0x00000040)
N#define  RCC_AHB1RSTR_GPIOHRST               ((uint32_t)0x00000080)
N#define  RCC_AHB1RSTR_GPIOIRST               ((uint32_t)0x00000100)
N#define  RCC_AHB1RSTR_GPIOJRST               ((uint32_t)0x00000200)
N#define  RCC_AHB1RSTR_GPIOKRST               ((uint32_t)0x00000400)
N#define  RCC_AHB1RSTR_CRCRST                 ((uint32_t)0x00001000)
N#define  RCC_AHB1RSTR_DMA1RST                ((uint32_t)0x00200000)
N#define  RCC_AHB1RSTR_DMA2RST                ((uint32_t)0x00400000)
N#define  RCC_AHB1RSTR_DMA2DRST               ((uint32_t)0x00800000)
N#define  RCC_AHB1RSTR_ETHMACRST              ((uint32_t)0x02000000)
N#define  RCC_AHB1RSTR_OTGHRST                ((uint32_t)0x10000000)
N
N/********************  Bit definition for RCC_AHB2RSTR register  **************/
N#define  RCC_AHB2RSTR_DCMIRST                ((uint32_t)0x00000001)
N#define  RCC_AHB2RSTR_CRYPRST                ((uint32_t)0x00000010)
N#define  RCC_AHB2RSTR_HASHRST                ((uint32_t)0x00000020)
N /* maintained for legacy purpose */
N #define  RCC_AHB2RSTR_HSAHRST                RCC_AHB2RSTR_HASHRST
N#define  RCC_AHB2RSTR_RNGRST                 ((uint32_t)0x00000040)
N#define  RCC_AHB2RSTR_OTGFSRST               ((uint32_t)0x00000080)
N
N/********************  Bit definition for RCC_AHB3RSTR register  **************/
N#if defined(STM32F40_41xxx)
X#if 1L
N#define  RCC_AHB3RSTR_FSMCRST                ((uint32_t)0x00000001)
N#endif /* STM32F40_41xxx */
N
N#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
X#if 0L || 0L
S#define  RCC_AHB3RSTR_FMCRST                ((uint32_t)0x00000001)
N#endif /* STM32F427_437xx ||  STM32F429_439xx */
N/********************  Bit definition for RCC_APB1RSTR register  **************/
N#define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)
N#define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)
N#define  RCC_APB1RSTR_TIM4RST                ((uint32_t)0x00000004)
N#define  RCC_APB1RSTR_TIM5RST                ((uint32_t)0x00000008)
N#define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)
N#define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)
N#define  RCC_APB1RSTR_TIM12RST               ((uint32_t)0x00000040)
N#define  RCC_APB1RSTR_TIM13RST               ((uint32_t)0x00000080)
N#define  RCC_APB1RSTR_TIM14RST               ((uint32_t)0x00000100)
N#define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)
N#define  RCC_APB1RSTR_SPI2RST                ((uint32_t)0x00004000)
N#define  RCC_APB1RSTR_SPI3RST                ((uint32_t)0x00008000)
N#define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)
N#define  RCC_APB1RSTR_USART3RST              ((uint32_t)0x00040000)
N#define  RCC_APB1RSTR_UART4RST               ((uint32_t)0x00080000)
N#define  RCC_APB1RSTR_UART5RST               ((uint32_t)0x00100000)
N#define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)
N#define  RCC_APB1RSTR_I2C2RST                ((uint32_t)0x00400000)
N#define  RCC_APB1RSTR_I2C3RST                ((uint32_t)0x00800000)
N#define  RCC_APB1RSTR_CAN1RST                ((uint32_t)0x02000000)
N#define  RCC_APB1RSTR_CAN2RST                ((uint32_t)0x04000000)
N#define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)
N#define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)
N#define  RCC_APB1RSTR_UART7RST               ((uint32_t)0x40000000)
N#define  RCC_APB1RSTR_UART8RST               ((uint32_t)0x80000000)
N
N/********************  Bit definition for RCC_APB2RSTR register  **************/
N#define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000001)
N#define  RCC_APB2RSTR_TIM8RST                ((uint32_t)0x00000002)
N#define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00000010)
N#define  RCC_APB2RSTR_USART6RST              ((uint32_t)0x00000020)
N#define  RCC_APB2RSTR_ADCRST                 ((uint32_t)0x00000100)
N#define  RCC_APB2RSTR_SDIORST                ((uint32_t)0x00000800)
N#define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)
N#define  RCC_APB2RSTR_SPI4RST                ((uint32_t)0x00002000)
N#define  RCC_APB2RSTR_SYSCFGRST              ((uint32_t)0x00004000)
N#define  RCC_APB2RSTR_TIM9RST                ((uint32_t)0x00010000)
N#define  RCC_APB2RSTR_TIM10RST               ((uint32_t)0x00020000)
N#define  RCC_APB2RSTR_TIM11RST               ((uint32_t)0x00040000)
N#define  RCC_APB2RSTR_SPI5RST                ((uint32_t)0x00100000)
N#define  RCC_APB2RSTR_SPI6RST                ((uint32_t)0x00200000)
N#define  RCC_APB2RSTR_SAI1RST                ((uint32_t)0x00400000)
N#define  RCC_APB2RSTR_LTDCRST                ((uint32_t)0x04000000)
N
N/* Old SPI1RST bit definition, maintained for legacy purpose */
N#define  RCC_APB2RSTR_SPI1                   RCC_APB2RSTR_SPI1RST
N
N/********************  Bit definition for RCC_AHB1ENR register  ***************/
N#define  RCC_AHB1ENR_GPIOAEN                 ((uint32_t)0x00000001)
N#define  RCC_AHB1ENR_GPIOBEN                 ((uint32_t)0x00000002)
N#define  RCC_AHB1ENR_GPIOCEN                 ((uint32_t)0x00000004)
N#define  RCC_AHB1ENR_GPIODEN                 ((uint32_t)0x00000008)
N#define  RCC_AHB1ENR_GPIOEEN                 ((uint32_t)0x00000010)
N#define  RCC_AHB1ENR_GPIOFEN                 ((uint32_t)0x00000020)
N#define  RCC_AHB1ENR_GPIOGEN                 ((uint32_t)0x00000040)
N#define  RCC_AHB1ENR_GPIOHEN                 ((uint32_t)0x00000080)
N#define  RCC_AHB1ENR_GPIOIEN                 ((uint32_t)0x00000100)
N#define  RCC_AHB1ENR_GPIOJEN                 ((uint32_t)0x00000200)
N#define  RCC_AHB1ENR_GPIOKEN                 ((uint32_t)0x00000400)
N#define  RCC_AHB1ENR_CRCEN                   ((uint32_t)0x00001000)
N#define  RCC_AHB1ENR_BKPSRAMEN               ((uint32_t)0x00040000)
N#define  RCC_AHB1ENR_CCMDATARAMEN            ((uint32_t)0x00100000)
N#define  RCC_AHB1ENR_DMA1EN                  ((uint32_t)0x00200000)
N#define  RCC_AHB1ENR_DMA2EN                  ((uint32_t)0x00400000)
N#define  RCC_AHB1ENR_DMA2DEN                 ((uint32_t)0x00800000)
N#define  RCC_AHB1ENR_ETHMACEN                ((uint32_t)0x02000000)
N#define  RCC_AHB1ENR_ETHMACTXEN              ((uint32_t)0x04000000)
N#define  RCC_AHB1ENR_ETHMACRXEN              ((uint32_t)0x08000000)
N#define  RCC_AHB1ENR_ETHMACPTPEN             ((uint32_t)0x10000000)
N#define  RCC_AHB1ENR_OTGHSEN                 ((uint32_t)0x20000000)
N#define  RCC_AHB1ENR_OTGHSULPIEN             ((uint32_t)0x40000000)
N
N/********************  Bit definition for RCC_AHB2ENR register  ***************/
N#define  RCC_AHB2ENR_DCMIEN                  ((uint32_t)0x00000001)
N#define  RCC_AHB2ENR_CRYPEN                  ((uint32_t)0x00000010)
N#define  RCC_AHB2ENR_HASHEN                  ((uint32_t)0x00000020)
N#define  RCC_AHB2ENR_RNGEN                   ((uint32_t)0x00000040)
N#define  RCC_AHB2ENR_OTGFSEN                 ((uint32_t)0x00000080)
N
N/********************  Bit definition for RCC_AHB3ENR register  ***************/
N
N#if defined(STM32F40_41xxx)
X#if 1L
N#define  RCC_AHB3ENR_FSMCEN                  ((uint32_t)0x00000001)
N#endif /* STM32F40_41xxx */
N
N#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
X#if 0L || 0L
S#define  RCC_AHB3ENR_FMCEN                  ((uint32_t)0x00000001)
N#endif /* STM32F427_437xx ||  STM32F429_439xx */
N
N/********************  Bit definition for RCC_APB1ENR register  ***************/
N#define  RCC_APB1ENR_TIM2EN                  ((uint32_t)0x00000001)
N#define  RCC_APB1ENR_TIM3EN                  ((uint32_t)0x00000002)
N#define  RCC_APB1ENR_TIM4EN                  ((uint32_t)0x00000004)
N#define  RCC_APB1ENR_TIM5EN                  ((uint32_t)0x00000008)
N#define  RCC_APB1ENR_TIM6EN                  ((uint32_t)0x00000010)
N#define  RCC_APB1ENR_TIM7EN                  ((uint32_t)0x00000020)
N#define  RCC_APB1ENR_TIM12EN                 ((uint32_t)0x00000040)
N#define  RCC_APB1ENR_TIM13EN                 ((uint32_t)0x00000080)
N#define  RCC_APB1ENR_TIM14EN                 ((uint32_t)0x00000100)
N#define  RCC_APB1ENR_WWDGEN                  ((uint32_t)0x00000800)
N#define  RCC_APB1ENR_SPI2EN                  ((uint32_t)0x00004000)
N#define  RCC_APB1ENR_SPI3EN                  ((uint32_t)0x00008000)
N#define  RCC_APB1ENR_USART2EN                ((uint32_t)0x00020000)
N#define  RCC_APB1ENR_USART3EN                ((uint32_t)0x00040000)
N#define  RCC_APB1ENR_UART4EN                 ((uint32_t)0x00080000)
N#define  RCC_APB1ENR_UART5EN                 ((uint32_t)0x00100000)
N#define  RCC_APB1ENR_I2C1EN                  ((uint32_t)0x00200000)
N#define  RCC_APB1ENR_I2C2EN                  ((uint32_t)0x00400000)
N#define  RCC_APB1ENR_I2C3EN                  ((uint32_t)0x00800000)
N#define  RCC_APB1ENR_CAN1EN                  ((uint32_t)0x02000000)
N#define  RCC_APB1ENR_CAN2EN                  ((uint32_t)0x04000000)
N#define  RCC_APB1ENR_PWREN                   ((uint32_t)0x10000000)
N#define  RCC_APB1ENR_DACEN                   ((uint32_t)0x20000000)
N#define  RCC_APB1ENR_UART7EN                 ((uint32_t)0x40000000)
N#define  RCC_APB1ENR_UART8EN                 ((uint32_t)0x80000000)
N
N/********************  Bit definition for RCC_APB2ENR register  ***************/
N#define  RCC_APB2ENR_TIM1EN                  ((uint32_t)0x00000001)
N#define  RCC_APB2ENR_TIM8EN                  ((uint32_t)0x00000002)
N#define  RCC_APB2ENR_USART1EN                ((uint32_t)0x00000010)
N#define  RCC_APB2ENR_USART6EN                ((uint32_t)0x00000020)
N#define  RCC_APB2ENR_ADC1EN                  ((uint32_t)0x00000100)
N#define  RCC_APB2ENR_ADC2EN                  ((uint32_t)0x00000200)
N#define  RCC_APB2ENR_ADC3EN                  ((uint32_t)0x00000400)
N#define  RCC_APB2ENR_SDIOEN                  ((uint32_t)0x00000800)
N#define  RCC_APB2ENR_SPI1EN                  ((uint32_t)0x00001000)
N#define  RCC_APB2ENR_SPI4EN                  ((uint32_t)0x00002000)
N#define  RCC_APB2ENR_SYSCFGEN                ((uint32_t)0x00004000)
N#define  RCC_APB2ENR_TIM9EN                  ((uint32_t)0x00010000)
N#define  RCC_APB2ENR_TIM10EN                 ((uint32_t)0x00020000)
N#define  RCC_APB2ENR_TIM11EN                 ((uint32_t)0x00040000)
N#define  RCC_APB2ENR_SPI5EN                  ((uint32_t)0x00100000)
N#define  RCC_APB2ENR_SPI6EN                  ((uint32_t)0x00200000)
N#define  RCC_APB2ENR_SAI1EN                  ((uint32_t)0x00400000)
N#define  RCC_APB2ENR_LTDCEN                  ((uint32_t)0x04000000)
N
N/********************  Bit definition for RCC_AHB1LPENR register  *************/
N#define  RCC_AHB1LPENR_GPIOALPEN             ((uint32_t)0x00000001)
N#define  RCC_AHB1LPENR_GPIOBLPEN             ((uint32_t)0x00000002)
N#define  RCC_AHB1LPENR_GPIOCLPEN             ((uint32_t)0x00000004)
N#define  RCC_AHB1LPENR_GPIODLPEN             ((uint32_t)0x00000008)
N#define  RCC_AHB1LPENR_GPIOELPEN             ((uint32_t)0x00000010)
N#define  RCC_AHB1LPENR_GPIOFLPEN             ((uint32_t)0x00000020)
N#define  RCC_AHB1LPENR_GPIOGLPEN             ((uint32_t)0x00000040)
N#define  RCC_AHB1LPENR_GPIOHLPEN             ((uint32_t)0x00000080)
N#define  RCC_AHB1LPENR_GPIOILPEN             ((uint32_t)0x00000100)
N#define  RCC_AHB1LPENR_GPIOJLPEN             ((uint32_t)0x00000200)
N#define  RCC_AHB1LPENR_GPIOKLPEN             ((uint32_t)0x00000400)
N#define  RCC_AHB1LPENR_CRCLPEN               ((uint32_t)0x00001000)
N#define  RCC_AHB1LPENR_FLITFLPEN             ((uint32_t)0x00008000)
N#define  RCC_AHB1LPENR_SRAM1LPEN             ((uint32_t)0x00010000)
N#define  RCC_AHB1LPENR_SRAM2LPEN             ((uint32_t)0x00020000)
N#define  RCC_AHB1LPENR_BKPSRAMLPEN           ((uint32_t)0x00040000)
N#define  RCC_AHB1LPENR_SRAM3LPEN             ((uint32_t)0x00080000)
N#define  RCC_AHB1LPENR_DMA1LPEN              ((uint32_t)0x00200000)
N#define  RCC_AHB1LPENR_DMA2LPEN              ((uint32_t)0x00400000)
N#define  RCC_AHB1LPENR_DMA2DLPEN             ((uint32_t)0x00800000)
N#define  RCC_AHB1LPENR_ETHMACLPEN            ((uint32_t)0x02000000)
N#define  RCC_AHB1LPENR_ETHMACTXLPEN          ((uint32_t)0x04000000)
N#define  RCC_AHB1LPENR_ETHMACRXLPEN          ((uint32_t)0x08000000)
N#define  RCC_AHB1LPENR_ETHMACPTPLPEN         ((uint32_t)0x10000000)
N#define  RCC_AHB1LPENR_OTGHSLPEN             ((uint32_t)0x20000000)
N#define  RCC_AHB1LPENR_OTGHSULPILPEN         ((uint32_t)0x40000000)
N
N/********************  Bit definition for RCC_AHB2LPENR register  *************/
N#define  RCC_AHB2LPENR_DCMILPEN              ((uint32_t)0x00000001)
N#define  RCC_AHB2LPENR_CRYPLPEN              ((uint32_t)0x00000010)
N#define  RCC_AHB2LPENR_HASHLPEN              ((uint32_t)0x00000020)
N#define  RCC_AHB2LPENR_RNGLPEN               ((uint32_t)0x00000040)
N#define  RCC_AHB2LPENR_OTGFSLPEN             ((uint32_t)0x00000080)
N
N/********************  Bit definition for RCC_AHB3LPENR register  *************/
N#if defined(STM32F40_41xxx)
X#if 1L
N#define  RCC_AHB3LPENR_FSMCLPEN              ((uint32_t)0x00000001)
N#endif /* STM32F40_41xxx */
N
N#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
X#if 0L || 0L
S#define  RCC_AHB3LPENR_FMCLPEN              ((uint32_t)0x00000001)
N#endif /* STM32F427_437xx ||  STM32F429_439xx */
N
N/********************  Bit definition for RCC_APB1LPENR register  *************/
N#define  RCC_APB1LPENR_TIM2LPEN              ((uint32_t)0x00000001)
N#define  RCC_APB1LPENR_TIM3LPEN              ((uint32_t)0x00000002)
N#define  RCC_APB1LPENR_TIM4LPEN              ((uint32_t)0x00000004)
N#define  RCC_APB1LPENR_TIM5LPEN              ((uint32_t)0x00000008)
N#define  RCC_APB1LPENR_TIM6LPEN              ((uint32_t)0x00000010)
N#define  RCC_APB1LPENR_TIM7LPEN              ((uint32_t)0x00000020)
N#define  RCC_APB1LPENR_TIM12LPEN             ((uint32_t)0x00000040)
N#define  RCC_APB1LPENR_TIM13LPEN             ((uint32_t)0x00000080)
N#define  RCC_APB1LPENR_TIM14LPEN             ((uint32_t)0x00000100)
N#define  RCC_APB1LPENR_WWDGLPEN              ((uint32_t)0x00000800)
N#define  RCC_APB1LPENR_SPI2LPEN              ((uint32_t)0x00004000)
N#define  RCC_APB1LPENR_SPI3LPEN              ((uint32_t)0x00008000)
N#define  RCC_APB1LPENR_USART2LPEN            ((uint32_t)0x00020000)
N#define  RCC_APB1LPENR_USART3LPEN            ((uint32_t)0x00040000)
N#define  RCC_APB1LPENR_UART4LPEN             ((uint32_t)0x00080000)
N#define  RCC_APB1LPENR_UART5LPEN             ((uint32_t)0x00100000)
N#define  RCC_APB1LPENR_I2C1LPEN              ((uint32_t)0x00200000)
N#define  RCC_APB1LPENR_I2C2LPEN              ((uint32_t)0x00400000)
N#define  RCC_APB1LPENR_I2C3LPEN              ((uint32_t)0x00800000)
N#define  RCC_APB1LPENR_CAN1LPEN              ((uint32_t)0x02000000)
N#define  RCC_APB1LPENR_CAN2LPEN              ((uint32_t)0x04000000)
N#define  RCC_APB1LPENR_PWRLPEN               ((uint32_t)0x10000000)
N#define  RCC_APB1LPENR_DACLPEN               ((uint32_t)0x20000000)
N#define  RCC_APB1LPENR_UART7LPEN             ((uint32_t)0x40000000)
N#define  RCC_APB1LPENR_UART8LPEN             ((uint32_t)0x80000000)
N
N/********************  Bit definition for RCC_APB2LPENR register  *************/
N#define  RCC_APB2LPENR_TIM1LPEN              ((uint32_t)0x00000001)
N#define  RCC_APB2LPENR_TIM8LPEN              ((uint32_t)0x00000002)
N#define  RCC_APB2LPENR_USART1LPEN            ((uint32_t)0x00000010)
N#define  RCC_APB2LPENR_USART6LPEN            ((uint32_t)0x00000020)
N#define  RCC_APB2LPENR_ADC1LPEN              ((uint32_t)0x00000100)
N#define  RCC_APB2LPENR_ADC2PEN               ((uint32_t)0x00000200)
N#define  RCC_APB2LPENR_ADC3LPEN              ((uint32_t)0x00000400)
N#define  RCC_APB2LPENR_SDIOLPEN              ((uint32_t)0x00000800)
N#define  RCC_APB2LPENR_SPI1LPEN              ((uint32_t)0x00001000)
N#define  RCC_APB2LPENR_SPI4LPEN              ((uint32_t)0x00002000)
N#define  RCC_APB2LPENR_SYSCFGLPEN            ((uint32_t)0x00004000)
N#define  RCC_APB2LPENR_TIM9LPEN              ((uint32_t)0x00010000)
N#define  RCC_APB2LPENR_TIM10LPEN             ((uint32_t)0x00020000)
N#define  RCC_APB2LPENR_TIM11LPEN             ((uint32_t)0x00040000)
N#define  RCC_APB2LPENR_SPI5LPEN              ((uint32_t)0x00100000)
N#define  RCC_APB2LPENR_SPI6LPEN              ((uint32_t)0x00200000)
N#define  RCC_APB2LPENR_SAI1LPEN              ((uint32_t)0x00400000)
N#define  RCC_APB2LPENR_LTDCLPEN              ((uint32_t)0x04000000)
N
N/********************  Bit definition for RCC_BDCR register  ******************/
N#define  RCC_BDCR_LSEON                      ((uint32_t)0x00000001)
N#define  RCC_BDCR_LSERDY                     ((uint32_t)0x00000002)
N#define  RCC_BDCR_LSEBYP                     ((uint32_t)0x00000004)
N
N#define  RCC_BDCR_RTCSEL                    ((uint32_t)0x00000300)
N#define  RCC_BDCR_RTCSEL_0                  ((uint32_t)0x00000100)
N#define  RCC_BDCR_RTCSEL_1                  ((uint32_t)0x00000200)
N
N#define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)
N#define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)
N
N/********************  Bit definition for RCC_CSR register  *******************/
N#define  RCC_CSR_LSION                       ((uint32_t)0x00000001)
N#define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)
N#define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)
N#define  RCC_CSR_BORRSTF                     ((uint32_t)0x02000000)
N#define  RCC_CSR_PADRSTF                     ((uint32_t)0x04000000)
N#define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)
N#define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)
N#define  RCC_CSR_WDGRSTF                     ((uint32_t)0x20000000)
N#define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)
N#define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)
N
N/********************  Bit definition for RCC_SSCGR register  *****************/
N#define  RCC_SSCGR_MODPER                    ((uint32_t)0x00001FFF)
N#define  RCC_SSCGR_INCSTEP                   ((uint32_t)0x0FFFE000)
N#define  RCC_SSCGR_SPREADSEL                 ((uint32_t)0x40000000)
N#define  RCC_SSCGR_SSCGEN                    ((uint32_t)0x80000000)
N
N/********************  Bit definition for RCC_PLLI2SCFGR register  ************/
N#define  RCC_PLLI2SCFGR_PLLI2SN              ((uint32_t)0x00007FC0)
N#define  RCC_PLLI2SCFGR_PLLI2SQ              ((uint32_t)0x0F000000)
N#define  RCC_PLLI2SCFGR_PLLI2SR              ((uint32_t)0x70000000)
N
N/********************  Bit definition for RCC_PLLSAICFGR register  ************/
N#define  RCC_PLLSAICFGR_PLLI2SN              ((uint32_t)0x00007FC0)
N#define  RCC_PLLSAICFGR_PLLI2SQ              ((uint32_t)0x0F000000)
N#define  RCC_PLLSAICFGR_PLLI2SR              ((uint32_t)0x70000000)
N
N/********************  Bit definition for RCC_DCKCFGR register  ***************/
N#define  RCC_DCKCFGR_PLLI2SDIVQ              ((uint32_t)0x0000001F)
N#define  RCC_DCKCFGR_PLLSAIDIVQ              ((uint32_t)0x00001F00)
N#define  RCC_DCKCFGR_PLLSAIDIVR              ((uint32_t)0x00030000)
N#define  RCC_DCKCFGR_SAI1ASRC                ((uint32_t)0x00300000)
N#define  RCC_DCKCFGR_SAI1BSRC                ((uint32_t)0x00C00000)
N#define  RCC_DCKCFGR_TIMPRE                  ((uint32_t)0x01000000)
N
N
N/******************************************************************************/
N/*                                                                            */
N/*                                    RNG                                     */
N/*                                                                            */
N/******************************************************************************/
N/********************  Bits definition for RNG_CR register  *******************/
N#define RNG_CR_RNGEN                         ((uint32_t)0x00000004)
N#define RNG_CR_IE                            ((uint32_t)0x00000008)
N
N/********************  Bits definition for RNG_SR register  *******************/
N#define RNG_SR_DRDY                          ((uint32_t)0x00000001)
N#define RNG_SR_CECS                          ((uint32_t)0x00000002)
N#define RNG_SR_SECS                          ((uint32_t)0x00000004)
N#define RNG_SR_CEIS                          ((uint32_t)0x00000020)
N#define RNG_SR_SEIS                          ((uint32_t)0x00000040)
N
N/******************************************************************************/
N/*                                                                            */
N/*                           Real-Time Clock (RTC)                            */
N/*                                                                            */
N/******************************************************************************/
N/********************  Bits definition for RTC_TR register  *******************/
N#define RTC_TR_PM                            ((uint32_t)0x00400000)
N#define RTC_TR_HT                            ((uint32_t)0x00300000)
N#define RTC_TR_HT_0                          ((uint32_t)0x00100000)
N#define RTC_TR_HT_1                          ((uint32_t)0x00200000)
N#define RTC_TR_HU                            ((uint32_t)0x000F0000)
N#define RTC_TR_HU_0                          ((uint32_t)0x00010000)
N#define RTC_TR_HU_1                          ((uint32_t)0x00020000)
N#define RTC_TR_HU_2                          ((uint32_t)0x00040000)
N#define RTC_TR_HU_3                          ((uint32_t)0x00080000)
N#define RTC_TR_MNT                           ((uint32_t)0x00007000)
N#define RTC_TR_MNT_0                         ((uint32_t)0x00001000)
N#define RTC_TR_MNT_1                         ((uint32_t)0x00002000)
N#define RTC_TR_MNT_2                         ((uint32_t)0x00004000)
N#define RTC_TR_MNU                           ((uint32_t)0x00000F00)
N#define RTC_TR_MNU_0                         ((uint32_t)0x00000100)
N#define RTC_TR_MNU_1                         ((uint32_t)0x00000200)
N#define RTC_TR_MNU_2                         ((uint32_t)0x00000400)
N#define RTC_TR_MNU_3                         ((uint32_t)0x00000800)
N#define RTC_TR_ST                            ((uint32_t)0x00000070)
N#define RTC_TR_ST_0                          ((uint32_t)0x00000010)
N#define RTC_TR_ST_1                          ((uint32_t)0x00000020)
N#define RTC_TR_ST_2                          ((uint32_t)0x00000040)
N#define RTC_TR_SU                            ((uint32_t)0x0000000F)
N#define RTC_TR_SU_0                          ((uint32_t)0x00000001)
N#define RTC_TR_SU_1                          ((uint32_t)0x00000002)
N#define RTC_TR_SU_2                          ((uint32_t)0x00000004)
N#define RTC_TR_SU_3                          ((uint32_t)0x00000008)
N
N/********************  Bits definition for RTC_DR register  *******************/
N#define RTC_DR_YT                            ((uint32_t)0x00F00000)
N#define RTC_DR_YT_0                          ((uint32_t)0x00100000)
N#define RTC_DR_YT_1                          ((uint32_t)0x00200000)
N#define RTC_DR_YT_2                          ((uint32_t)0x00400000)
N#define RTC_DR_YT_3                          ((uint32_t)0x00800000)
N#define RTC_DR_YU                            ((uint32_t)0x000F0000)
N#define RTC_DR_YU_0                          ((uint32_t)0x00010000)
N#define RTC_DR_YU_1                          ((uint32_t)0x00020000)
N#define RTC_DR_YU_2                          ((uint32_t)0x00040000)
N#define RTC_DR_YU_3                          ((uint32_t)0x00080000)
N#define RTC_DR_WDU                           ((uint32_t)0x0000E000)
N#define RTC_DR_WDU_0                         ((uint32_t)0x00002000)
N#define RTC_DR_WDU_1                         ((uint32_t)0x00004000)
N#define RTC_DR_WDU_2                         ((uint32_t)0x00008000)
N#define RTC_DR_MT                            ((uint32_t)0x00001000)
N#define RTC_DR_MU                            ((uint32_t)0x00000F00)
N#define RTC_DR_MU_0                          ((uint32_t)0x00000100)
N#define RTC_DR_MU_1                          ((uint32_t)0x00000200)
N#define RTC_DR_MU_2                          ((uint32_t)0x00000400)
N#define RTC_DR_MU_3                          ((uint32_t)0x00000800)
N#define RTC_DR_DT                            ((uint32_t)0x00000030)
N#define RTC_DR_DT_0                          ((uint32_t)0x00000010)
N#define RTC_DR_DT_1                          ((uint32_t)0x00000020)
N#define RTC_DR_DU                            ((uint32_t)0x0000000F)
N#define RTC_DR_DU_0                          ((uint32_t)0x00000001)
N#define RTC_DR_DU_1                          ((uint32_t)0x00000002)
N#define RTC_DR_DU_2                          ((uint32_t)0x00000004)
N#define RTC_DR_DU_3                          ((uint32_t)0x00000008)
N
N/********************  Bits definition for RTC_CR register  *******************/
N#define RTC_CR_COE                           ((uint32_t)0x00800000)
N#define RTC_CR_OSEL                          ((uint32_t)0x00600000)
N#define RTC_CR_OSEL_0                        ((uint32_t)0x00200000)
N#define RTC_CR_OSEL_1                        ((uint32_t)0x00400000)
N#define RTC_CR_POL                           ((uint32_t)0x00100000)
N#define RTC_CR_COSEL                         ((uint32_t)0x00080000)
N#define RTC_CR_BCK                           ((uint32_t)0x00040000)
N#define RTC_CR_SUB1H                         ((uint32_t)0x00020000)
N#define RTC_CR_ADD1H                         ((uint32_t)0x00010000)
N#define RTC_CR_TSIE                          ((uint32_t)0x00008000)
N#define RTC_CR_WUTIE                         ((uint32_t)0x00004000)
N#define RTC_CR_ALRBIE                        ((uint32_t)0x00002000)
N#define RTC_CR_ALRAIE                        ((uint32_t)0x00001000)
N#define RTC_CR_TSE                           ((uint32_t)0x00000800)
N#define RTC_CR_WUTE                          ((uint32_t)0x00000400)
N#define RTC_CR_ALRBE                         ((uint32_t)0x00000200)
N#define RTC_CR_ALRAE                         ((uint32_t)0x00000100)
N#define RTC_CR_DCE                           ((uint32_t)0x00000080)
N#define RTC_CR_FMT                           ((uint32_t)0x00000040)
N#define RTC_CR_BYPSHAD                       ((uint32_t)0x00000020)
N#define RTC_CR_REFCKON                       ((uint32_t)0x00000010)
N#define RTC_CR_TSEDGE                        ((uint32_t)0x00000008)
N#define RTC_CR_WUCKSEL                       ((uint32_t)0x00000007)
N#define RTC_CR_WUCKSEL_0                     ((uint32_t)0x00000001)
N#define RTC_CR_WUCKSEL_1                     ((uint32_t)0x00000002)
N#define RTC_CR_WUCKSEL_2                     ((uint32_t)0x00000004)
N
N/********************  Bits definition for RTC_ISR register  ******************/
N#define RTC_ISR_RECALPF                      ((uint32_t)0x00010000)
N#define RTC_ISR_TAMP1F                       ((uint32_t)0x00002000)
N#define RTC_ISR_TSOVF                        ((uint32_t)0x00001000)
N#define RTC_ISR_TSF                          ((uint32_t)0x00000800)
N#define RTC_ISR_WUTF                         ((uint32_t)0x00000400)
N#define RTC_ISR_ALRBF                        ((uint32_t)0x00000200)
N#define RTC_ISR_ALRAF                        ((uint32_t)0x00000100)
N#define RTC_ISR_INIT                         ((uint32_t)0x00000080)
N#define RTC_ISR_INITF                        ((uint32_t)0x00000040)
N#define RTC_ISR_RSF                          ((uint32_t)0x00000020)
N#define RTC_ISR_INITS                        ((uint32_t)0x00000010)
N#define RTC_ISR_SHPF                         ((uint32_t)0x00000008)
N#define RTC_ISR_WUTWF                        ((uint32_t)0x00000004)
N#define RTC_ISR_ALRBWF                       ((uint32_t)0x00000002)
N#define RTC_ISR_ALRAWF                       ((uint32_t)0x00000001)
N
N/********************  Bits definition for RTC_PRER register  *****************/
N#define RTC_PRER_PREDIV_A                    ((uint32_t)0x007F0000)
N#define RTC_PRER_PREDIV_S                    ((uint32_t)0x00001FFF)
N
N/********************  Bits definition for RTC_WUTR register  *****************/
N#define RTC_WUTR_WUT                         ((uint32_t)0x0000FFFF)
N
N/********************  Bits definition for RTC_CALIBR register  ***************/
N#define RTC_CALIBR_DCS                       ((uint32_t)0x00000080)
N#define RTC_CALIBR_DC                        ((uint32_t)0x0000001F)
N
N/********************  Bits definition for RTC_ALRMAR register  ***************/
N#define RTC_ALRMAR_MSK4                      ((uint32_t)0x80000000)
N#define RTC_ALRMAR_WDSEL                     ((uint32_t)0x40000000)
N#define RTC_ALRMAR_DT                        ((uint32_t)0x30000000)
N#define RTC_ALRMAR_DT_0                      ((uint32_t)0x10000000)
N#define RTC_ALRMAR_DT_1                      ((uint32_t)0x20000000)
N#define RTC_ALRMAR_DU                        ((uint32_t)0x0F000000)
N#define RTC_ALRMAR_DU_0                      ((uint32_t)0x01000000)
N#define RTC_ALRMAR_DU_1                      ((uint32_t)0x02000000)
N#define RTC_ALRMAR_DU_2                      ((uint32_t)0x04000000)
N#define RTC_ALRMAR_DU_3                      ((uint32_t)0x08000000)
N#define RTC_ALRMAR_MSK3                      ((uint32_t)0x00800000)
N#define RTC_ALRMAR_PM                        ((uint32_t)0x00400000)
N#define RTC_ALRMAR_HT                        ((uint32_t)0x00300000)
N#define RTC_ALRMAR_HT_0                      ((uint32_t)0x00100000)
N#define RTC_ALRMAR_HT_1                      ((uint32_t)0x00200000)
N#define RTC_ALRMAR_HU                        ((uint32_t)0x000F0000)
N#define RTC_ALRMAR_HU_0                      ((uint32_t)0x00010000)
N#define RTC_ALRMAR_HU_1                      ((uint32_t)0x00020000)
N#define RTC_ALRMAR_HU_2                      ((uint32_t)0x00040000)
N#define RTC_ALRMAR_HU_3                      ((uint32_t)0x00080000)
N#define RTC_ALRMAR_MSK2                      ((uint32_t)0x00008000)
N#define RTC_ALRMAR_MNT                       ((uint32_t)0x00007000)
N#define RTC_ALRMAR_MNT_0                     ((uint32_t)0x00001000)
N#define RTC_ALRMAR_MNT_1                     ((uint32_t)0x00002000)
N#define RTC_ALRMAR_MNT_2                     ((uint32_t)0x00004000)
N#define RTC_ALRMAR_MNU                       ((uint32_t)0x00000F00)
N#define RTC_ALRMAR_MNU_0                     ((uint32_t)0x00000100)
N#define RTC_ALRMAR_MNU_1                     ((uint32_t)0x00000200)
N#define RTC_ALRMAR_MNU_2                     ((uint32_t)0x00000400)
N#define RTC_ALRMAR_MNU_3                     ((uint32_t)0x00000800)
N#define RTC_ALRMAR_MSK1                      ((uint32_t)0x00000080)
N#define RTC_ALRMAR_ST                        ((uint32_t)0x00000070)
N#define RTC_ALRMAR_ST_0                      ((uint32_t)0x00000010)
N#define RTC_ALRMAR_ST_1                      ((uint32_t)0x00000020)
N#define RTC_ALRMAR_ST_2                      ((uint32_t)0x00000040)
N#define RTC_ALRMAR_SU                        ((uint32_t)0x0000000F)
N#define RTC_ALRMAR_SU_0                      ((uint32_t)0x00000001)
N#define RTC_ALRMAR_SU_1                      ((uint32_t)0x00000002)
N#define RTC_ALRMAR_SU_2                      ((uint32_t)0x00000004)
N#define RTC_ALRMAR_SU_3                      ((uint32_t)0x00000008)
N
N/********************  Bits definition for RTC_ALRMBR register  ***************/
N#define RTC_ALRMBR_MSK4                      ((uint32_t)0x80000000)
N#define RTC_ALRMBR_WDSEL                     ((uint32_t)0x40000000)
N#define RTC_ALRMBR_DT                        ((uint32_t)0x30000000)
N#define RTC_ALRMBR_DT_0                      ((uint32_t)0x10000000)
N#define RTC_ALRMBR_DT_1                      ((uint32_t)0x20000000)
N#define RTC_ALRMBR_DU                        ((uint32_t)0x0F000000)
N#define RTC_ALRMBR_DU_0                      ((uint32_t)0x01000000)
N#define RTC_ALRMBR_DU_1                      ((uint32_t)0x02000000)
N#define RTC_ALRMBR_DU_2                      ((uint32_t)0x04000000)
N#define RTC_ALRMBR_DU_3                      ((uint32_t)0x08000000)
N#define RTC_ALRMBR_MSK3                      ((uint32_t)0x00800000)
N#define RTC_ALRMBR_PM                        ((uint32_t)0x00400000)
N#define RTC_ALRMBR_HT                        ((uint32_t)0x00300000)
N#define RTC_ALRMBR_HT_0                      ((uint32_t)0x00100000)
N#define RTC_ALRMBR_HT_1                      ((uint32_t)0x00200000)
N#define RTC_ALRMBR_HU                        ((uint32_t)0x000F0000)
N#define RTC_ALRMBR_HU_0                      ((uint32_t)0x00010000)
N#define RTC_ALRMBR_HU_1                      ((uint32_t)0x00020000)
N#define RTC_ALRMBR_HU_2                      ((uint32_t)0x00040000)
N#define RTC_ALRMBR_HU_3                      ((uint32_t)0x00080000)
N#define RTC_ALRMBR_MSK2                      ((uint32_t)0x00008000)
N#define RTC_ALRMBR_MNT                       ((uint32_t)0x00007000)
N#define RTC_ALRMBR_MNT_0                     ((uint32_t)0x00001000)
N#define RTC_ALRMBR_MNT_1                     ((uint32_t)0x00002000)
N#define RTC_ALRMBR_MNT_2                     ((uint32_t)0x00004000)
N#define RTC_ALRMBR_MNU                       ((uint32_t)0x00000F00)
N#define RTC_ALRMBR_MNU_0                     ((uint32_t)0x00000100)
N#define RTC_ALRMBR_MNU_1                     ((uint32_t)0x00000200)
N#define RTC_ALRMBR_MNU_2                     ((uint32_t)0x00000400)
N#define RTC_ALRMBR_MNU_3                     ((uint32_t)0x00000800)
N#define RTC_ALRMBR_MSK1                      ((uint32_t)0x00000080)
N#define RTC_ALRMBR_ST                        ((uint32_t)0x00000070)
N#define RTC_ALRMBR_ST_0                      ((uint32_t)0x00000010)
N#define RTC_ALRMBR_ST_1                      ((uint32_t)0x00000020)
N#define RTC_ALRMBR_ST_2                      ((uint32_t)0x00000040)
N#define RTC_ALRMBR_SU                        ((uint32_t)0x0000000F)
N#define RTC_ALRMBR_SU_0                      ((uint32_t)0x00000001)
N#define RTC_ALRMBR_SU_1                      ((uint32_t)0x00000002)
N#define RTC_ALRMBR_SU_2                      ((uint32_t)0x00000004)
N#define RTC_ALRMBR_SU_3                      ((uint32_t)0x00000008)
N
N/********************  Bits definition for RTC_WPR register  ******************/
N#define RTC_WPR_KEY                          ((uint32_t)0x000000FF)
N
N/********************  Bits definition for RTC_SSR register  ******************/
N#define RTC_SSR_SS                           ((uint32_t)0x0000FFFF)
N
N/********************  Bits definition for RTC_SHIFTR register  ***************/
N#define RTC_SHIFTR_SUBFS                     ((uint32_t)0x00007FFF)
N#define RTC_SHIFTR_ADD1S                     ((uint32_t)0x80000000)
N
N/********************  Bits definition for RTC_TSTR register  *****************/
N#define RTC_TSTR_PM                          ((uint32_t)0x00400000)
N#define RTC_TSTR_HT                          ((uint32_t)0x00300000)
N#define RTC_TSTR_HT_0                        ((uint32_t)0x00100000)
N#define RTC_TSTR_HT_1                        ((uint32_t)0x00200000)
N#define RTC_TSTR_HU                          ((uint32_t)0x000F0000)
N#define RTC_TSTR_HU_0                        ((uint32_t)0x00010000)
N#define RTC_TSTR_HU_1                        ((uint32_t)0x00020000)
N#define RTC_TSTR_HU_2                        ((uint32_t)0x00040000)
N#define RTC_TSTR_HU_3                        ((uint32_t)0x00080000)
N#define RTC_TSTR_MNT                         ((uint32_t)0x00007000)
N#define RTC_TSTR_MNT_0                       ((uint32_t)0x00001000)
N#define RTC_TSTR_MNT_1                       ((uint32_t)0x00002000)
N#define RTC_TSTR_MNT_2                       ((uint32_t)0x00004000)
N#define RTC_TSTR_MNU                         ((uint32_t)0x00000F00)
N#define RTC_TSTR_MNU_0                       ((uint32_t)0x00000100)
N#define RTC_TSTR_MNU_1                       ((uint32_t)0x00000200)
N#define RTC_TSTR_MNU_2                       ((uint32_t)0x00000400)
N#define RTC_TSTR_MNU_3                       ((uint32_t)0x00000800)
N#define RTC_TSTR_ST                          ((uint32_t)0x00000070)
N#define RTC_TSTR_ST_0                        ((uint32_t)0x00000010)
N#define RTC_TSTR_ST_1                        ((uint32_t)0x00000020)
N#define RTC_TSTR_ST_2                        ((uint32_t)0x00000040)
N#define RTC_TSTR_SU                          ((uint32_t)0x0000000F)
N#define RTC_TSTR_SU_0                        ((uint32_t)0x00000001)
N#define RTC_TSTR_SU_1                        ((uint32_t)0x00000002)
N#define RTC_TSTR_SU_2                        ((uint32_t)0x00000004)
N#define RTC_TSTR_SU_3                        ((uint32_t)0x00000008)
N
N/********************  Bits definition for RTC_TSDR register  *****************/
N#define RTC_TSDR_WDU                         ((uint32_t)0x0000E000)
N#define RTC_TSDR_WDU_0                       ((uint32_t)0x00002000)
N#define RTC_TSDR_WDU_1                       ((uint32_t)0x00004000)
N#define RTC_TSDR_WDU_2                       ((uint32_t)0x00008000)
N#define RTC_TSDR_MT                          ((uint32_t)0x00001000)
N#define RTC_TSDR_MU                          ((uint32_t)0x00000F00)
N#define RTC_TSDR_MU_0                        ((uint32_t)0x00000100)
N#define RTC_TSDR_MU_1                        ((uint32_t)0x00000200)
N#define RTC_TSDR_MU_2                        ((uint32_t)0x00000400)
N#define RTC_TSDR_MU_3                        ((uint32_t)0x00000800)
N#define RTC_TSDR_DT                          ((uint32_t)0x00000030)
N#define RTC_TSDR_DT_0                        ((uint32_t)0x00000010)
N#define RTC_TSDR_DT_1                        ((uint32_t)0x00000020)
N#define RTC_TSDR_DU                          ((uint32_t)0x0000000F)
N#define RTC_TSDR_DU_0                        ((uint32_t)0x00000001)
N#define RTC_TSDR_DU_1                        ((uint32_t)0x00000002)
N#define RTC_TSDR_DU_2                        ((uint32_t)0x00000004)
N#define RTC_TSDR_DU_3                        ((uint32_t)0x00000008)
N
N/********************  Bits definition for RTC_TSSSR register  ****************/
N#define RTC_TSSSR_SS                         ((uint32_t)0x0000FFFF)
N
N/********************  Bits definition for RTC_CAL register  *****************/
N#define RTC_CALR_CALP                        ((uint32_t)0x00008000)
N#define RTC_CALR_CALW8                       ((uint32_t)0x00004000)
N#define RTC_CALR_CALW16                      ((uint32_t)0x00002000)
N#define RTC_CALR_CALM                        ((uint32_t)0x000001FF)
N#define RTC_CALR_CALM_0                      ((uint32_t)0x00000001)
N#define RTC_CALR_CALM_1                      ((uint32_t)0x00000002)
N#define RTC_CALR_CALM_2                      ((uint32_t)0x00000004)
N#define RTC_CALR_CALM_3                      ((uint32_t)0x00000008)
N#define RTC_CALR_CALM_4                      ((uint32_t)0x00000010)
N#define RTC_CALR_CALM_5                      ((uint32_t)0x00000020)
N#define RTC_CALR_CALM_6                      ((uint32_t)0x00000040)
N#define RTC_CALR_CALM_7                      ((uint32_t)0x00000080)
N#define RTC_CALR_CALM_8                      ((uint32_t)0x00000100)
N
N/********************  Bits definition for RTC_TAFCR register  ****************/
N#define RTC_TAFCR_ALARMOUTTYPE               ((uint32_t)0x00040000)
N#define RTC_TAFCR_TSINSEL                    ((uint32_t)0x00020000)
N#define RTC_TAFCR_TAMPINSEL                  ((uint32_t)0x00010000)
N#define RTC_TAFCR_TAMPPUDIS                  ((uint32_t)0x00008000)
N#define RTC_TAFCR_TAMPPRCH                   ((uint32_t)0x00006000)
N#define RTC_TAFCR_TAMPPRCH_0                 ((uint32_t)0x00002000)
N#define RTC_TAFCR_TAMPPRCH_1                 ((uint32_t)0x00004000)
N#define RTC_TAFCR_TAMPFLT                    ((uint32_t)0x00001800)
N#define RTC_TAFCR_TAMPFLT_0                  ((uint32_t)0x00000800)
N#define RTC_TAFCR_TAMPFLT_1                  ((uint32_t)0x00001000)
N#define RTC_TAFCR_TAMPFREQ                   ((uint32_t)0x00000700)
N#define RTC_TAFCR_TAMPFREQ_0                 ((uint32_t)0x00000100)
N#define RTC_TAFCR_TAMPFREQ_1                 ((uint32_t)0x00000200)
N#define RTC_TAFCR_TAMPFREQ_2                 ((uint32_t)0x00000400)
N#define RTC_TAFCR_TAMPTS                     ((uint32_t)0x00000080)
N#define RTC_TAFCR_TAMPIE                     ((uint32_t)0x00000004)
N#define RTC_TAFCR_TAMP1TRG                   ((uint32_t)0x00000002)
N#define RTC_TAFCR_TAMP1E                     ((uint32_t)0x00000001)
N
N/********************  Bits definition for RTC_ALRMASSR register  *************/
N#define RTC_ALRMASSR_MASKSS                  ((uint32_t)0x0F000000)
N#define RTC_ALRMASSR_MASKSS_0                ((uint32_t)0x01000000)
N#define RTC_ALRMASSR_MASKSS_1                ((uint32_t)0x02000000)
N#define RTC_ALRMASSR_MASKSS_2                ((uint32_t)0x04000000)
N#define RTC_ALRMASSR_MASKSS_3                ((uint32_t)0x08000000)
N#define RTC_ALRMASSR_SS                      ((uint32_t)0x00007FFF)
N
N/********************  Bits definition for RTC_ALRMBSSR register  *************/
N#define RTC_ALRMBSSR_MASKSS                  ((uint32_t)0x0F000000)
N#define RTC_ALRMBSSR_MASKSS_0                ((uint32_t)0x01000000)
N#define RTC_ALRMBSSR_MASKSS_1                ((uint32_t)0x02000000)
N#define RTC_ALRMBSSR_MASKSS_2                ((uint32_t)0x04000000)
N#define RTC_ALRMBSSR_MASKSS_3                ((uint32_t)0x08000000)
N#define RTC_ALRMBSSR_SS                      ((uint32_t)0x00007FFF)
N
N/********************  Bits definition for RTC_BKP0R register  ****************/
N#define RTC_BKP0R                            ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP1R register  ****************/
N#define RTC_BKP1R                            ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP2R register  ****************/
N#define RTC_BKP2R                            ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP3R register  ****************/
N#define RTC_BKP3R                            ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP4R register  ****************/
N#define RTC_BKP4R                            ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP5R register  ****************/
N#define RTC_BKP5R                            ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP6R register  ****************/
N#define RTC_BKP6R                            ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP7R register  ****************/
N#define RTC_BKP7R                            ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP8R register  ****************/
N#define RTC_BKP8R                            ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP9R register  ****************/
N#define RTC_BKP9R                            ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP10R register  ***************/
N#define RTC_BKP10R                           ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP11R register  ***************/
N#define RTC_BKP11R                           ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP12R register  ***************/
N#define RTC_BKP12R                           ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP13R register  ***************/
N#define RTC_BKP13R                           ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP14R register  ***************/
N#define RTC_BKP14R                           ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP15R register  ***************/
N#define RTC_BKP15R                           ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP16R register  ***************/
N#define RTC_BKP16R                           ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP17R register  ***************/
N#define RTC_BKP17R                           ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP18R register  ***************/
N#define RTC_BKP18R                           ((uint32_t)0xFFFFFFFF)
N
N/********************  Bits definition for RTC_BKP19R register  ***************/
N#define RTC_BKP19R                           ((uint32_t)0xFFFFFFFF)
N
N/******************************************************************************/
N/*                                                                            */
N/*                          Serial Audio Interface                            */
N/*                                                                            */
N/******************************************************************************/
N/********************  Bit definition for SAI_GCR register  *******************/
N#define  SAI_GCR_SYNCIN                  ((uint32_t)0x00000003)        /*!<SYNCIN[1:0] bits (Synchronization Inputs)   */
N#define  SAI_GCR_SYNCIN_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  SAI_GCR_SYNCIN_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
N
N#define  SAI_GCR_SYNCOUT                 ((uint32_t)0x00000030)        /*!<SYNCOUT[1:0] bits (Synchronization Outputs) */
N#define  SAI_GCR_SYNCOUT_0               ((uint32_t)0x00000010)        /*!<Bit 0 */
N#define  SAI_GCR_SYNCOUT_1               ((uint32_t)0x00000020)        /*!<Bit 1 */
N
N/*******************  Bit definition for SAI_xCR1 register  *******************/
N#define  SAI_xCR1_MODE                    ((uint32_t)0x00000003)        /*!<MODE[1:0] bits (Audio Block Mode)           */
N#define  SAI_xCR1_MODE_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  SAI_xCR1_MODE_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
N
N#define  SAI_xCR1_PRTCFG                  ((uint32_t)0x0000000C)        /*!<PRTCFG[1:0] bits (Protocol Configuration)   */
N#define  SAI_xCR1_PRTCFG_0                ((uint32_t)0x00000004)        /*!<Bit 0 */
N#define  SAI_xCR1_PRTCFG_1                ((uint32_t)0x00000008)        /*!<Bit 1 */
N
N#define  SAI_xCR1_DS                      ((uint32_t)0x000000E0)        /*!<DS[1:0] bits (Data Size) */
N#define  SAI_xCR1_DS_0                    ((uint32_t)0x00000020)        /*!<Bit 0 */
N#define  SAI_xCR1_DS_1                    ((uint32_t)0x00000040)        /*!<Bit 1 */
N#define  SAI_xCR1_DS_2                    ((uint32_t)0x00000080)        /*!<Bit 2 */
N
N#define  SAI_xCR1_LSBFIRST                ((uint32_t)0x00000100)        /*!<LSB First Configuration  */
N#define  SAI_xCR1_CKSTR                   ((uint32_t)0x00000200)        /*!<ClocK STRobing edge      */
N
N#define  SAI_xCR1_SYNCEN                  ((uint32_t)0x00000C00)        /*!<SYNCEN[1:0](SYNChronization ENable) */
N#define  SAI_xCR1_SYNCEN_0                ((uint32_t)0x00000400)        /*!<Bit 0 */
N#define  SAI_xCR1_SYNCEN_1                ((uint32_t)0x00000800)        /*!<Bit 1 */
N
N#define  SAI_xCR1_MONO                    ((uint32_t)0x00001000)        /*!<Mono mode                  */
N#define  SAI_xCR1_OUTDRIV                 ((uint32_t)0x00002000)        /*!<Output Drive               */
N#define  SAI_xCR1_SAIEN                   ((uint32_t)0x00010000)        /*!<Audio Block enable         */
N#define  SAI_xCR1_DMAEN                   ((uint32_t)0x00020000)        /*!<DMA enable                 */
N#define  SAI_xCR1_NODIV                   ((uint32_t)0x00080000)        /*!<No Divider Configuration   */
N
N#define  SAI_xCR1_MCKDIV                  ((uint32_t)0x00780000)        /*!<MCKDIV[3:0] (Master ClocK Divider)  */
N#define  SAI_xCR1_MCKDIV_0                ((uint32_t)0x00080000)        /*!<Bit 0  */
N#define  SAI_xCR1_MCKDIV_1                ((uint32_t)0x00100000)        /*!<Bit 1  */
N#define  SAI_xCR1_MCKDIV_2                ((uint32_t)0x00200000)        /*!<Bit 2  */
N#define  SAI_xCR1_MCKDIV_3                ((uint32_t)0x00400000)        /*!<Bit 3  */
N
N/*******************  Bit definition for SAI_xCR2 register  *******************/
N#define  SAI_xCR2_FTH                     ((uint32_t)0x00000003)        /*!<FTH[1:0](Fifo THreshold)  */
N#define  SAI_xCR2_FTH_0                   ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  SAI_xCR2_FTH_1                   ((uint32_t)0x00000002)        /*!<Bit 1 */
N
N#define  SAI_xCR2_FFLUSH                  ((uint32_t)0x00000008)        /*!<Fifo FLUSH                       */
N#define  SAI_xCR2_TRIS                    ((uint32_t)0x00000010)        /*!<TRIState Management on data line */
N#define  SAI_xCR2_MUTE                    ((uint32_t)0x00000020)        /*!<Mute mode                        */
N#define  SAI_xCR2_MUTEVAL                 ((uint32_t)0x00000040)        /*!<Muate value                      */
N
N#define  SAI_xCR2_MUTECNT                  ((uint32_t)0x00001F80)       /*!<MUTECNT[5:0] (MUTE counter) */
N#define  SAI_xCR2_MUTECNT_0               ((uint32_t)0x00000080)        /*!<Bit 0 */
N#define  SAI_xCR2_MUTECNT_1               ((uint32_t)0x00000100)        /*!<Bit 1 */
N#define  SAI_xCR2_MUTECNT_2               ((uint32_t)0x00000200)        /*!<Bit 2 */
N#define  SAI_xCR2_MUTECNT_3               ((uint32_t)0x00000400)        /*!<Bit 3 */
N#define  SAI_xCR2_MUTECNT_4               ((uint32_t)0x00000800)        /*!<Bit 4 */
N#define  SAI_xCR2_MUTECNT_5               ((uint32_t)0x00001000)        /*!<Bit 5 */
N
N#define  SAI_xCR2_CPL                     ((uint32_t)0x00080000)        /*!< Complement Bit             */
N
N#define  SAI_xCR2_COMP                    ((uint32_t)0x0000C000)        /*!<COMP[1:0] (Companding mode) */
N#define  SAI_xCR2_COMP_0                  ((uint32_t)0x00004000)        /*!<Bit 0 */
N#define  SAI_xCR2_COMP_1                  ((uint32_t)0x00008000)        /*!<Bit 1 */
N
N/******************  Bit definition for SAI_xFRCR register  *******************/
N#define  SAI_xFRCR_FRL                    ((uint32_t)0x000000FF)        /*!<FRL[1:0](Frame length)  */
N#define  SAI_xFRCR_FRL_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  SAI_xFRCR_FRL_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  SAI_xFRCR_FRL_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  SAI_xFRCR_FRL_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
N#define  SAI_xFRCR_FRL_4                  ((uint32_t)0x00000010)        /*!<Bit 4 */
N#define  SAI_xFRCR_FRL_5                  ((uint32_t)0x00000020)        /*!<Bit 5 */
N#define  SAI_xFRCR_FRL_6                  ((uint32_t)0x00000040)        /*!<Bit 6 */
N#define  SAI_xFRCR_FRL_7                  ((uint32_t)0x00000080)        /*!<Bit 7 */
N
N#define  SAI_xFRCR_FSALL                  ((uint32_t)0x00007F00)        /*!<FRL[1:0] (Frame synchronization active level length)  */
N#define  SAI_xFRCR_FSALL_0                ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  SAI_xFRCR_FSALL_1                ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  SAI_xFRCR_FSALL_2                ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  SAI_xFRCR_FSALL_3                ((uint32_t)0x00000800)        /*!<Bit 3 */
N#define  SAI_xFRCR_FSALL_4                ((uint32_t)0x00001000)        /*!<Bit 4 */
N#define  SAI_xFRCR_FSALL_5                ((uint32_t)0x00002000)        /*!<Bit 5 */
N#define  SAI_xFRCR_FSALL_6                ((uint32_t)0x00004000)        /*!<Bit 6 */
N
N#define  SAI_xFRCR_FSDEF                  ((uint32_t)0x00010000)        /*!< Frame Synchronization Definition */
N#define  SAI_xFRCR_FSPO                   ((uint32_t)0x00020000)        /*!<Frame Synchronization POLarity    */
N#define  SAI_xFRCR_FSOFF                  ((uint32_t)0x00040000)        /*!<Frame Synchronization OFFset      */
N
N/******************  Bit definition for SAI_xSLOTR register  *******************/
N#define  SAI_xSLOTR_FBOFF                 ((uint32_t)0x0000001F)        /*!<FRL[4:0](First Bit Offset)  */
N#define  SAI_xSLOTR_FBOFF_0               ((uint32_t)0x00000001)        /*!<Bit 0 */
N#define  SAI_xSLOTR_FBOFF_1               ((uint32_t)0x00000002)        /*!<Bit 1 */
N#define  SAI_xSLOTR_FBOFF_2               ((uint32_t)0x00000004)        /*!<Bit 2 */
N#define  SAI_xSLOTR_FBOFF_3               ((uint32_t)0x00000008)        /*!<Bit 3 */
N#define  SAI_xSLOTR_FBOFF_4               ((uint32_t)0x00000010)        /*!<Bit 4 */
N                                     
N#define  SAI_xSLOTR_SLOTSZ                ((uint32_t)0x000000C0)        /*!<SLOTSZ[1:0] (Slot size)  */
N#define  SAI_xSLOTR_SLOTSZ_0              ((uint32_t)0x00000040)        /*!<Bit 0 */
N#define  SAI_xSLOTR_SLOTSZ_1              ((uint32_t)0x00000080)        /*!<Bit 1 */
N
N#define  SAI_xSLOTR_NBSLOT                ((uint32_t)0x00000F00)        /*!<NBSLOT[3:0] (Number of Slot in audio Frame)  */
N#define  SAI_xSLOTR_NBSLOT_0              ((uint32_t)0x00000100)        /*!<Bit 0 */
N#define  SAI_xSLOTR_NBSLOT_1              ((uint32_t)0x00000200)        /*!<Bit 1 */
N#define  SAI_xSLOTR_NBSLOT_2              ((uint32_t)0x00000400)        /*!<Bit 2 */
N#define  SAI_xSLOTR_NBSLOT_3              ((uint32_t)0x00000800)        /*!<Bit 3 */
N
N#define  SAI_xSLOTR_SLOTEN                ((uint32_t)0xFFFF0000)        /*!<SLOTEN[15:0] (Slot Enable)  */
N
N/*******************  Bit definition for SAI_xIMR register  *******************/
N#define  SAI_xIMR_OVRUDRIE                ((uint32_t)0x00000001)        /*!<Overrun underrun interrupt enable                              */
N#define  SAI_xIMR_MUTEDETIE               ((uint32_t)0x00000002)        /*!<Mute detection interrupt enable                                */
N#define  SAI_xIMR_WCKCFGIE                ((uint32_t)0x00000004)        /*!<Wrong Clock Configuration interrupt enable                     */
N#define  SAI_xIMR_FREQIE                  ((uint32_t)0x00000008)        /*!<FIFO request interrupt enable                                  */
N#define  SAI_xIMR_CNRDYIE                 ((uint32_t)0x00000010)        /*!<Codec not ready interrupt enable                               */
N#define  SAI_xIMR_AFSDETIE                ((uint32_t)0x00000020)        /*!<Anticipated frame synchronization detection interrupt enable   */
N#define  SAI_xIMR_LFSDETIE                ((uint32_t)0x00000040)        /*!<Late frame synchronization detection interrupt enable          */
N
N/********************  Bit definition for SAI_xSR register  *******************/
N#define  SAI_xSR_OVRUDR                   ((uint32_t)0x00000001)         /*!<Overrun underrun                               */
N#define  SAI_xSR_MUTEDET                  ((uint32_t)0x00000002)         /*!<Mute detection                                 */
N#define  SAI_xSR_WCKCFG                   ((uint32_t)0x00000004)         /*!<Wrong Clock Configuration                      */
N#define  SAI_xSR_FREQ                     ((uint32_t)0x00000008)         /*!<FIFO request                                   */
N#define  SAI_xSR_CNRDY                    ((uint32_t)0x00000010)         /*!<Codec not ready                                */
N#define  SAI_xSR_AFSDET                   ((uint32_t)0x00000020)         /*!<Anticipated frame synchronization detection    */
N#define  SAI_xSR_LFSDET                   ((uint32_t)0x00000040)         /*!<Late frame synchronization detection           */
N
N#define  SAI_xSR_FLVL                     ((uint32_t)0x00070000)         /*!<FLVL[2:0] (FIFO Level Threshold)               */
N#define  SAI_xSR_FLVL_0                   ((uint32_t)0x00010000)         /*!<Bit 0 */
N#define  SAI_xSR_FLVL_1                   ((uint32_t)0x00020000)         /*!<Bit 1 */
N#define  SAI_xSR_FLVL_2                   ((uint32_t)0x00030000)         /*!<Bit 2 */
N
N/******************  Bit definition for SAI_xCLRFR register  ******************/
N#define  SAI_xCLRFR_COVRUDR               ((uint32_t)0x00000001)        /*!<Clear Overrun underrun                               */
N#define  SAI_xCLRFR_CMUTEDET              ((uint32_t)0x00000002)        /*!<Clear Mute detection                                 */
N#define  SAI_xCLRFR_CWCKCFG               ((uint32_t)0x00000004)        /*!<Clear Wrong Clock Configuration                      */
N#define  SAI_xCLRFR_CFREQ                 ((uint32_t)0x00000008)        /*!<Clear FIFO request                                   */
N#define  SAI_xCLRFR_CCNRDY                ((uint32_t)0x00000010)        /*!<Clear Codec not ready                                */
N#define  SAI_xCLRFR_CAFSDET               ((uint32_t)0x00000020)        /*!<Clear Anticipated frame synchronization detection    */
N#define  SAI_xCLRFR_CLFSDET               ((uint32_t)0x00000040)        /*!<Clear Late frame synchronization detection           */
N
N/******************  Bit definition for SAI_xDR register  ******************/
N#define  SAI_xDR_DATA                     ((uint32_t)0xFFFFFFFF)        
N
N/******************************************************************************/
N/*                                                                            */
N/*                          SD host Interface                                 */
N/*                                                                            */
N/******************************************************************************/
N/******************  Bit definition for SDIO_POWER register  ******************/
N#define  SDIO_POWER_PWRCTRL                  ((uint8_t)0x03)               /*!<PWRCTRL[1:0] bits (Power supply control bits) */
N#define  SDIO_POWER_PWRCTRL_0                ((uint8_t)0x01)               /*!<Bit 0 */
N#define  SDIO_POWER_PWRCTRL_1                ((uint8_t)0x02)               /*!<Bit 1 */
N
N/******************  Bit definition for SDIO_CLKCR register  ******************/
N#define  SDIO_CLKCR_CLKDIV                   ((uint16_t)0x00FF)            /*!<Clock divide factor             */
N#define  SDIO_CLKCR_CLKEN                    ((uint16_t)0x0100)            /*!<Clock enable bit                */
N#define  SDIO_CLKCR_PWRSAV                   ((uint16_t)0x0200)            /*!<Power saving configuration bit  */
N#define  SDIO_CLKCR_BYPASS                   ((uint16_t)0x0400)            /*!<Clock divider bypass enable bit */
N
N#define  SDIO_CLKCR_WIDBUS                   ((uint16_t)0x1800)            /*!<WIDBUS[1:0] bits (Wide bus mode enable bit) */
N#define  SDIO_CLKCR_WIDBUS_0                 ((uint16_t)0x0800)            /*!<Bit 0 */
N#define  SDIO_CLKCR_WIDBUS_1                 ((uint16_t)0x1000)            /*!<Bit 1 */
N
N#define  SDIO_CLKCR_NEGEDGE                  ((uint16_t)0x2000)            /*!<SDIO_CK dephasing selection bit */
N#define  SDIO_CLKCR_HWFC_EN                  ((uint16_t)0x4000)            /*!<HW Flow Control enable          */
N
N/*******************  Bit definition for SDIO_ARG register  *******************/
N#define  SDIO_ARG_CMDARG                     ((uint32_t)0xFFFFFFFF)            /*!<Command argument */
N
N/*******************  Bit definition for SDIO_CMD register  *******************/
N#define  SDIO_CMD_CMDINDEX                   ((uint16_t)0x003F)            /*!<Command Index                               */
N
N#define  SDIO_CMD_WAITRESP                   ((uint16_t)0x00C0)            /*!<WAITRESP[1:0] bits (Wait for response bits) */
N#define  SDIO_CMD_WAITRESP_0                 ((uint16_t)0x0040)            /*!< Bit 0 */
N#define  SDIO_CMD_WAITRESP_1                 ((uint16_t)0x0080)            /*!< Bit 1 */
N
N#define  SDIO_CMD_WAITINT                    ((uint16_t)0x0100)            /*!<CPSM Waits for Interrupt Request                               */
N#define  SDIO_CMD_WAITPEND                   ((uint16_t)0x0200)            /*!<CPSM Waits for ends of data transfer (CmdPend internal signal) */
N#define  SDIO_CMD_CPSMEN                     ((uint16_t)0x0400)            /*!<Command path state machine (CPSM) Enable bit                   */
N#define  SDIO_CMD_SDIOSUSPEND                ((uint16_t)0x0800)            /*!<SD I/O suspend command                                         */
N#define  SDIO_CMD_ENCMDCOMPL                 ((uint16_t)0x1000)            /*!<Enable CMD completion                                          */
N#define  SDIO_CMD_NIEN                       ((uint16_t)0x2000)            /*!<Not Interrupt Enable */
N#define  SDIO_CMD_CEATACMD                   ((uint16_t)0x4000)            /*!<CE-ATA command       */
N
N/*****************  Bit definition for SDIO_RESPCMD register  *****************/
N#define  SDIO_RESPCMD_RESPCMD                ((uint8_t)0x3F)               /*!<Response command index */
N
N/******************  Bit definition for SDIO_RESP0 register  ******************/
N#define  SDIO_RESP0_CARDSTATUS0              ((uint32_t)0xFFFFFFFF)        /*!<Card Status */
N
N/******************  Bit definition for SDIO_RESP1 register  ******************/
N#define  SDIO_RESP1_CARDSTATUS1              ((uint32_t)0xFFFFFFFF)        /*!<Card Status */
N
N/******************  Bit definition for SDIO_RESP2 register  ******************/
N#define  SDIO_RESP2_CARDSTATUS2              ((uint32_t)0xFFFFFFFF)        /*!<Card Status */
N
N/******************  Bit definition for SDIO_RESP3 register  ******************/
N#define  SDIO_RESP3_CARDSTATUS3              ((uint32_t)0xFFFFFFFF)        /*!<Card Status */
N
N/******************  Bit definition for SDIO_RESP4 register  ******************/
N#define  SDIO_RESP4_CARDSTATUS4              ((uint32_t)0xFFFFFFFF)        /*!<Card Status */
N
N/******************  Bit definition for SDIO_DTIMER register  *****************/
N#define  SDIO_DTIMER_DATATIME                ((uint32_t)0xFFFFFFFF)        /*!<Data timeout period. */
N
N/******************  Bit definition for SDIO_DLEN register  *******************/
N#define  SDIO_DLEN_DATALENGTH                ((uint32_t)0x01FFFFFF)        /*!<Data length value    */
N
N/******************  Bit definition for SDIO_DCTRL register  ******************/
N#define  SDIO_DCTRL_DTEN                     ((uint16_t)0x0001)            /*!<Data transfer enabled bit         */
N#define  SDIO_DCTRL_DTDIR                    ((uint16_t)0x0002)            /*!<Data transfer direction selection */
N#define  SDIO_DCTRL_DTMODE                   ((uint16_t)0x0004)            /*!<Data transfer mode selection      */
N#define  SDIO_DCTRL_DMAEN                    ((uint16_t)0x0008)            /*!<DMA enabled bit                   */
N
N#define  SDIO_DCTRL_DBLOCKSIZE               ((uint16_t)0x00F0)            /*!<DBLOCKSIZE[3:0] bits (Data block size) */
N#define  SDIO_DCTRL_DBLOCKSIZE_0             ((uint16_t)0x0010)            /*!<Bit 0 */
N#define  SDIO_DCTRL_DBLOCKSIZE_1             ((uint16_t)0x0020)            /*!<Bit 1 */
N#define  SDIO_DCTRL_DBLOCKSIZE_2             ((uint16_t)0x0040)            /*!<Bit 2 */
N#define  SDIO_DCTRL_DBLOCKSIZE_3             ((uint16_t)0x0080)            /*!<Bit 3 */
N
N#define  SDIO_DCTRL_RWSTART                  ((uint16_t)0x0100)            /*!<Read wait start         */
N#define  SDIO_DCTRL_RWSTOP                   ((uint16_t)0x0200)            /*!<Read wait stop          */
N#define  SDIO_DCTRL_RWMOD                    ((uint16_t)0x0400)            /*!<Read wait mode          */
N#define  SDIO_DCTRL_SDIOEN                   ((uint16_t)0x0800)            /*!<SD I/O enable functions */
N
N/******************  Bit definition for SDIO_DCOUNT register  *****************/
N#define  SDIO_DCOUNT_DATACOUNT               ((uint32_t)0x01FFFFFF)        /*!<Data count value */
N
N/******************  Bit definition for SDIO_STA register  ********************/
N#define  SDIO_STA_CCRCFAIL                   ((uint32_t)0x00000001)        /*!<Command response received (CRC check failed)  */
N#define  SDIO_STA_DCRCFAIL                   ((uint32_t)0x00000002)        /*!<Data block sent/received (CRC check failed)   */
N#define  SDIO_STA_CTIMEOUT                   ((uint32_t)0x00000004)        /*!<Command response timeout                      */
N#define  SDIO_STA_DTIMEOUT                   ((uint32_t)0x00000008)        /*!<Data timeout                                  */
N#define  SDIO_STA_TXUNDERR                   ((uint32_t)0x00000010)        /*!<Transmit FIFO underrun error                  */
N#define  SDIO_STA_RXOVERR                    ((uint32_t)0x00000020)        /*!<Received FIFO overrun error                   */
N#define  SDIO_STA_CMDREND                    ((uint32_t)0x00000040)        /*!<Command response received (CRC check passed)  */
N#define  SDIO_STA_CMDSENT                    ((uint32_t)0x00000080)        /*!<Command sent (no response required)           */
N#define  SDIO_STA_DATAEND                    ((uint32_t)0x00000100)        /*!<Data end (data counter, SDIDCOUNT, is zero)   */
N#define  SDIO_STA_STBITERR                   ((uint32_t)0x00000200)        /*!<Start bit not detected on all data signals in wide bus mode */
N#define  SDIO_STA_DBCKEND                    ((uint32_t)0x00000400)        /*!<Data block sent/received (CRC check passed)   */
N#define  SDIO_STA_CMDACT                     ((uint32_t)0x00000800)        /*!<Command transfer in progress                  */
N#define  SDIO_STA_TXACT                      ((uint32_t)0x00001000)        /*!<Data transmit in progress                     */
N#define  SDIO_STA_RXACT                      ((uint32_t)0x00002000)        /*!<Data receive in progress                      */
N#define  SDIO_STA_TXFIFOHE                   ((uint32_t)0x00004000)        /*!<Transmit FIFO Half Empty: at least 8 words can be written into the FIFO */
N#define  SDIO_STA_RXFIFOHF                   ((uint32_t)0x00008000)        /*!<Receive FIFO Half Full: there are at least 8 words in the FIFO */
N#define  SDIO_STA_TXFIFOF                    ((uint32_t)0x00010000)        /*!<Transmit FIFO full                            */
N#define  SDIO_STA_RXFIFOF                    ((uint32_t)0x00020000)        /*!<Receive FIFO full                             */
N#define  SDIO_STA_TXFIFOE                    ((uint32_t)0x00040000)        /*!<Transmit FIFO empty                           */
N#define  SDIO_STA_RXFIFOE                    ((uint32_t)0x00080000)        /*!<Receive FIFO empty                            */
N#define  SDIO_STA_TXDAVL                     ((uint32_t)0x00100000)        /*!<Data available in transmit FIFO               */
N#define  SDIO_STA_RXDAVL                     ((uint32_t)0x00200000)        /*!<Data available in receive FIFO                */
N#define  SDIO_STA_SDIOIT                     ((uint32_t)0x00400000)        /*!<SDIO interrupt received                       */
N#define  SDIO_STA_CEATAEND                   ((uint32_t)0x00800000)        /*!<CE-ATA command completion signal received for CMD61 */
N
N/*******************  Bit definition for SDIO_ICR register  *******************/
N#define  SDIO_ICR_CCRCFAILC                  ((uint32_t)0x00000001)        /*!<CCRCFAIL flag clear bit */
N#define  SDIO_ICR_DCRCFAILC                  ((uint32_t)0x00000002)        /*!<DCRCFAIL flag clear bit */
N#define  SDIO_ICR_CTIMEOUTC                  ((uint32_t)0x00000004)        /*!<CTIMEOUT flag clear bit */
N#define  SDIO_ICR_DTIMEOUTC                  ((uint32_t)0x00000008)        /*!<DTIMEOUT flag clear bit */
N#define  SDIO_ICR_TXUNDERRC                  ((uint32_t)0x00000010)        /*!<TXUNDERR flag clear bit */
N#define  SDIO_ICR_RXOVERRC                   ((uint32_t)0x00000020)        /*!<RXOVERR flag clear bit  */
N#define  SDIO_ICR_CMDRENDC                   ((uint32_t)0x00000040)        /*!<CMDREND flag clear bit  */
N#define  SDIO_ICR_CMDSENTC                   ((uint32_t)0x00000080)        /*!<CMDSENT flag clear bit  */
N#define  SDIO_ICR_DATAENDC                   ((uint32_t)0x00000100)        /*!<DATAEND flag clear bit  */
N#define  SDIO_ICR_STBITERRC                  ((uint32_t)0x00000200)        /*!<STBITERR flag clear bit */
N#define  SDIO_ICR_DBCKENDC                   ((uint32_t)0x00000400)        /*!<DBCKEND flag clear bit  */
N#define  SDIO_ICR_SDIOITC                    ((uint32_t)0x00400000)        /*!<SDIOIT flag clear bit   */
N#define  SDIO_ICR_CEATAENDC                  ((uint32_t)0x00800000)        /*!<CEATAEND flag clear bit */
N
N/******************  Bit definition for SDIO_MASK register  *******************/
N#define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!<Command CRC Fail Interrupt Enable          */
N#define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!<Data CRC Fail Interrupt Enable             */
N#define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!<Command TimeOut Interrupt Enable           */
N#define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!<Data TimeOut Interrupt Enable              */
N#define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!<Tx FIFO UnderRun Error Interrupt Enable    */
N#define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!<Rx FIFO OverRun Error Interrupt Enable     */
N#define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!<Command Response Received Interrupt Enable */
N#define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!<Command Sent Interrupt Enable              */
N#define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!<Data End Interrupt Enable                  */
N#define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!<Start Bit Error Interrupt Enable           */
N#define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!<Data Block End Interrupt Enable            */
N#define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!<CCommand Acting Interrupt Enable           */
N#define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!<Data Transmit Acting Interrupt Enable      */
N#define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!<Data receive acting interrupt enabled      */
N#define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!<Tx FIFO Half Empty interrupt Enable        */
N#define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!<Rx FIFO Half Full interrupt Enable         */
N#define  SDIO_MASK_TXFIFOFIE                 ((uint32_t)0x00010000)        /*!<Tx FIFO Full interrupt Enable              */
N#define  SDIO_MASK_RXFIFOFIE                 ((uint32_t)0x00020000)        /*!<Rx FIFO Full interrupt Enable              */
N#define  SDIO_MASK_TXFIFOEIE                 ((uint32_t)0x00040000)        /*!<Tx FIFO Empty interrupt Enable             */
N#define  SDIO_MASK_RXFIFOEIE                 ((uint32_t)0x00080000)        /*!<Rx FIFO Empty interrupt Enable             */
N#define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!<Data available in Tx FIFO interrupt Enable */
N#define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!<Data available in Rx FIFO interrupt Enable */
N#define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!<SDIO Mode Interrupt Received interrupt Enable */
N#define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!<CE-ATA command completion signal received Interrupt Enable */
N
N/*****************  Bit definition for SDIO_FIFOCNT register  *****************/
N#define  SDIO_FIFOCNT_FIFOCOUNT              ((uint32_t)0x00FFFFFF)        /*!<Remaining number of words to be written to or read from the FIFO */
N
N/******************  Bit definition for SDIO_FIFO register  *******************/
N#define  SDIO_FIFO_FIFODATA                  ((uint32_t)0xFFFFFFFF)        /*!<Receive and transmit FIFO data */
N
N/******************************************************************************/
N/*                                                                            */
N/*                        Serial Peripheral Interface                         */
N/*                                                                            */
N/******************************************************************************/
N/*******************  Bit definition for SPI_CR1 register  ********************/
N#define  SPI_CR1_CPHA                        ((uint16_t)0x0001)            /*!<Clock Phase      */
N#define  SPI_CR1_CPOL                        ((uint16_t)0x0002)            /*!<Clock Polarity   */
N#define  SPI_CR1_MSTR                        ((uint16_t)0x0004)            /*!<Master Selection */
N
N#define  SPI_CR1_BR                          ((uint16_t)0x0038)            /*!<BR[2:0] bits (Baud Rate Control) */
N#define  SPI_CR1_BR_0                        ((uint16_t)0x0008)            /*!<Bit 0 */
N#define  SPI_CR1_BR_1                        ((uint16_t)0x0010)            /*!<Bit 1 */
N#define  SPI_CR1_BR_2                        ((uint16_t)0x0020)            /*!<Bit 2 */
N
N#define  SPI_CR1_SPE                         ((uint16_t)0x0040)            /*!<SPI Enable                          */
N#define  SPI_CR1_LSBFIRST                    ((uint16_t)0x0080)            /*!<Frame Format                        */
N#define  SPI_CR1_SSI                         ((uint16_t)0x0100)            /*!<Internal slave select               */
N#define  SPI_CR1_SSM                         ((uint16_t)0x0200)            /*!<Software slave management           */
N#define  SPI_CR1_RXONLY                      ((uint16_t)0x0400)            /*!<Receive only                        */
N#define  SPI_CR1_DFF                         ((uint16_t)0x0800)            /*!<Data Frame Format                   */
N#define  SPI_CR1_CRCNEXT                     ((uint16_t)0x1000)            /*!<Transmit CRC next                   */
N#define  SPI_CR1_CRCEN                       ((uint16_t)0x2000)            /*!<Hardware CRC calculation enable     */
N#define  SPI_CR1_BIDIOE                      ((uint16_t)0x4000)            /*!<Output enable in bidirectional mode */
N#define  SPI_CR1_BIDIMODE                    ((uint16_t)0x8000)            /*!<Bidirectional data mode enable      */
N
N/*******************  Bit definition for SPI_CR2 register  ********************/
N#define  SPI_CR2_RXDMAEN                     ((uint8_t)0x01)               /*!<Rx Buffer DMA Enable                 */
N#define  SPI_CR2_TXDMAEN                     ((uint8_t)0x02)               /*!<Tx Buffer DMA Enable                 */
N#define  SPI_CR2_SSOE                        ((uint8_t)0x04)               /*!<SS Output Enable                     */
N#define  SPI_CR2_ERRIE                       ((uint8_t)0x20)               /*!<Error Interrupt Enable               */
N#define  SPI_CR2_RXNEIE                      ((uint8_t)0x40)               /*!<RX buffer Not Empty Interrupt Enable */
N#define  SPI_CR2_TXEIE                       ((uint8_t)0x80)               /*!<Tx buffer Empty Interrupt Enable     */
N
N/********************  Bit definition for SPI_SR register  ********************/
N#define  SPI_SR_RXNE                         ((uint8_t)0x01)               /*!<Receive buffer Not Empty */
N#define  SPI_SR_TXE                          ((uint8_t)0x02)               /*!<Transmit buffer Empty    */
N#define  SPI_SR_CHSIDE                       ((uint8_t)0x04)               /*!<Channel side             */
N#define  SPI_SR_UDR                          ((uint8_t)0x08)               /*!<Underrun flag            */
N#define  SPI_SR_CRCERR                       ((uint8_t)0x10)               /*!<CRC Error flag           */
N#define  SPI_SR_MODF                         ((uint8_t)0x20)               /*!<Mode fault               */
N#define  SPI_SR_OVR                          ((uint8_t)0x40)               /*!<Overrun flag             */
N#define  SPI_SR_BSY                          ((uint8_t)0x80)               /*!<Busy flag                */
N
N/********************  Bit definition for SPI_DR register  ********************/
N#define  SPI_DR_DR                           ((uint16_t)0xFFFF)            /*!<Data Register           */
N
N/*******************  Bit definition for SPI_CRCPR register  ******************/
N#define  SPI_CRCPR_CRCPOLY                   ((uint16_t)0xFFFF)            /*!<CRC polynomial register */
N
N/******************  Bit definition for SPI_RXCRCR register  ******************/
N#define  SPI_RXCRCR_RXCRC                    ((uint16_t)0xFFFF)            /*!<Rx CRC Register         */
N
N/******************  Bit definition for SPI_TXCRCR register  ******************/
N#define  SPI_TXCRCR_TXCRC                    ((uint16_t)0xFFFF)            /*!<Tx CRC Register         */
N
N/******************  Bit definition for SPI_I2SCFGR register  *****************/
N#define  SPI_I2SCFGR_CHLEN                   ((uint16_t)0x0001)            /*!<Channel length (number of bits per audio channel) */
N
N#define  SPI_I2SCFGR_DATLEN                  ((uint16_t)0x0006)            /*!<DATLEN[1:0] bits (Data length to be transferred)  */
N#define  SPI_I2SCFGR_DATLEN_0                ((uint16_t)0x0002)            /*!<Bit 0 */
N#define  SPI_I2SCFGR_DATLEN_1                ((uint16_t)0x0004)            /*!<Bit 1 */
N
N#define  SPI_I2SCFGR_CKPOL                   ((uint16_t)0x0008)            /*!<steady state clock polarity               */
N
N#define  SPI_I2SCFGR_I2SSTD                  ((uint16_t)0x0030)            /*!<I2SSTD[1:0] bits (I2S standard selection) */
N#define  SPI_I2SCFGR_I2SSTD_0                ((uint16_t)0x0010)            /*!<Bit 0 */
N#define  SPI_I2SCFGR_I2SSTD_1                ((uint16_t)0x0020)            /*!<Bit 1 */
N
N#define  SPI_I2SCFGR_PCMSYNC                 ((uint16_t)0x0080)            /*!<PCM frame synchronization                 */
N
N#define  SPI_I2SCFGR_I2SCFG                  ((uint16_t)0x0300)            /*!<I2SCFG[1:0] bits (I2S configuration mode) */
N#define  SPI_I2SCFGR_I2SCFG_0                ((uint16_t)0x0100)            /*!<Bit 0 */
N#define  SPI_I2SCFGR_I2SCFG_1                ((uint16_t)0x0200)            /*!<Bit 1 */
N
N#define  SPI_I2SCFGR_I2SE                    ((uint16_t)0x0400)            /*!<I2S Enable         */
N#define  SPI_I2SCFGR_I2SMOD                  ((uint16_t)0x0800)            /*!<I2S mode selection */
N
N/******************  Bit definition for SPI_I2SPR register  *******************/
N#define  SPI_I2SPR_I2SDIV                    ((uint16_t)0x00FF)            /*!<I2S Linear prescaler         */
N#define  SPI_I2SPR_ODD                       ((uint16_t)0x0100)            /*!<Odd factor for the prescaler */
N#define  SPI_I2SPR_MCKOE                     ((uint16_t)0x0200)            /*!<Master Clock Output Enable   */
N
N/******************************************************************************/
N/*                                                                            */
N/*                                 SYSCFG                                     */
N/*                                                                            */
N/******************************************************************************/
N/******************  Bit definition for SYSCFG_MEMRMP register  ***************/  
N#define SYSCFG_MEMRMP_MEM_MODE          ((uint32_t)0x00000007) /*!< SYSCFG_Memory Remap Config */
N#define SYSCFG_MEMRMP_MEM_MODE_0        ((uint32_t)0x00000001) /*!<Bit 0 */
N#define SYSCFG_MEMRMP_MEM_MODE_1        ((uint32_t)0x00000002) /*!<Bit 1 */
N#define SYSCFG_MEMRMP_MEM_MODE_2        ((uint32_t)0x00000004) /*!<Bit 2 */
N
N#define SYSCFG_MEMRMP_FB_MODE           ((uint32_t)0x00000100) /*!< User Flash Bank mode */
N
N#define SYSCFG_MEMRMP_SWP_FMC           ((uint32_t)0x00000C00) /*!< FMC memory mapping swap */
N#define SYSCFG_MEMRMP_SWP_FMC_0         ((uint32_t)0x00000400) /*!<Bit 0 */
N#define SYSCFG_MEMRMP_SWP_FMC_1         ((uint32_t)0x00000800) /*!<Bit 1 */
N
N
N/******************  Bit definition for SYSCFG_PMC register  ******************/
N#define SYSCFG_PMC_ADCxDC2              ((uint32_t)0x00070000) /*!< Refer to AN4073 on how to use this bit  */
N#define SYSCFG_PMC_ADC1DC2              ((uint32_t)0x00010000) /*!< Refer to AN4073 on how to use this bit  */
N#define SYSCFG_PMC_ADC2DC2              ((uint32_t)0x00020000) /*!< Refer to AN4073 on how to use this bit  */
N#define SYSCFG_PMC_ADC3DC2              ((uint32_t)0x00040000) /*!< Refer to AN4073 on how to use this bit  */
N
N#define SYSCFG_PMC_MII_RMII_SEL         ((uint32_t)0x00800000) /*!<Ethernet PHY interface selection */
N/* Old MII_RMII_SEL bit definition, maintained for legacy purpose */
N#define SYSCFG_PMC_MII_RMII             SYSCFG_PMC_MII_RMII_SEL
N
N/*****************  Bit definition for SYSCFG_EXTICR1 register  ***************/
N#define SYSCFG_EXTICR1_EXTI0            ((uint16_t)0x000F) /*!<EXTI 0 configuration */
N#define SYSCFG_EXTICR1_EXTI1            ((uint16_t)0x00F0) /*!<EXTI 1 configuration */
N#define SYSCFG_EXTICR1_EXTI2            ((uint16_t)0x0F00) /*!<EXTI 2 configuration */
N#define SYSCFG_EXTICR1_EXTI3            ((uint16_t)0xF000) /*!<EXTI 3 configuration */
N/** 
N  * @brief   EXTI0 configuration  
N  */ 
N#define SYSCFG_EXTICR1_EXTI0_PA         ((uint16_t)0x0000) /*!<PA[0] pin */
N#define SYSCFG_EXTICR1_EXTI0_PB         ((uint16_t)0x0001) /*!<PB[0] pin */
N#define SYSCFG_EXTICR1_EXTI0_PC         ((uint16_t)0x0002) /*!<PC[0] pin */
N#define SYSCFG_EXTICR1_EXTI0_PD         ((uint16_t)0x0003) /*!<PD[0] pin */
N#define SYSCFG_EXTICR1_EXTI0_PE         ((uint16_t)0x0004) /*!<PE[0] pin */
N#define SYSCFG_EXTICR1_EXTI0_PF         ((uint16_t)0x0005) /*!<PF[0] pin */
N#define SYSCFG_EXTICR1_EXTI0_PG         ((uint16_t)0x0006) /*!<PG[0] pin */
N#define SYSCFG_EXTICR1_EXTI0_PH         ((uint16_t)0x0007) /*!<PH[0] pin */
N#define SYSCFG_EXTICR1_EXTI0_PI         ((uint16_t)0x0008) /*!<PI[0] pin */
N#define SYSCFG_EXTICR1_EXTI0_PJ         ((uint16_t)0x0009) /*!<PJ[0] pin */
N#define SYSCFG_EXTICR1_EXTI0_PK         ((uint16_t)0x000A) /*!<PK[0] pin */
N
N/** 
N  * @brief   EXTI1 configuration  
N  */ 
N#define SYSCFG_EXTICR1_EXTI1_PA         ((uint16_t)0x0000) /*!<PA[1] pin */
N#define SYSCFG_EXTICR1_EXTI1_PB         ((uint16_t)0x0010) /*!<PB[1] pin */
N#define SYSCFG_EXTICR1_EXTI1_PC         ((uint16_t)0x0020) /*!<PC[1] pin */
N#define SYSCFG_EXTICR1_EXTI1_PD         ((uint16_t)0x0030) /*!<PD[1] pin */
N#define SYSCFG_EXTICR1_EXTI1_PE         ((uint16_t)0x0040) /*!<PE[1] pin */
N#define SYSCFG_EXTICR1_EXTI1_PF         ((uint16_t)0x0050) /*!<PF[1] pin */
N#define SYSCFG_EXTICR1_EXTI1_PG         ((uint16_t)0x0060) /*!<PG[1] pin */
N#define SYSCFG_EXTICR1_EXTI1_PH         ((uint16_t)0x0070) /*!<PH[1] pin */
N#define SYSCFG_EXTICR1_EXTI1_PI         ((uint16_t)0x0080) /*!<PI[1] pin */
N#define SYSCFG_EXTICR1_EXTI1_PJ         ((uint16_t)0x0090) /*!<PJ[1] pin */
N#define SYSCFG_EXTICR1_EXTI1_PK         ((uint16_t)0x00A0) /*!<PK[1] pin */
N
N/** 
N  * @brief   EXTI2 configuration  
N  */ 
N#define SYSCFG_EXTICR1_EXTI2_PA         ((uint16_t)0x0000) /*!<PA[2] pin */
N#define SYSCFG_EXTICR1_EXTI2_PB         ((uint16_t)0x0100) /*!<PB[2] pin */
N#define SYSCFG_EXTICR1_EXTI2_PC         ((uint16_t)0x0200) /*!<PC[2] pin */
N#define SYSCFG_EXTICR1_EXTI2_PD         ((uint16_t)0x0300) /*!<PD[2] pin */
N#define SYSCFG_EXTICR1_EXTI2_PE         ((uint16_t)0x0400) /*!<PE[2] pin */
N#define SYSCFG_EXTICR1_EXTI2_PF         ((uint16_t)0x0500) /*!<PF[2] pin */
N#define SYSCFG_EXTICR1_EXTI2_PG         ((uint16_t)0x0600) /*!<PG[2] pin */
N#define SYSCFG_EXTICR1_EXTI2_PH         ((uint16_t)0x0700) /*!<PH[2] pin */
N#define SYSCFG_EXTICR1_EXTI2_PI         ((uint16_t)0x0800) /*!<PI[2] pin */
N#define SYSCFG_EXTICR1_EXTI2_PJ         ((uint16_t)0x0900) /*!<PJ[2] pin */
N#define SYSCFG_EXTICR1_EXTI2_PK         ((uint16_t)0x0A00) /*!<PK[2] pin */
N
N/** 
N  * @brief   EXTI3 configuration  
N  */ 
N#define SYSCFG_EXTICR1_EXTI3_PA         ((uint16_t)0x0000) /*!<PA[3] pin */
N#define SYSCFG_EXTICR1_EXTI3_PB         ((uint16_t)0x1000) /*!<PB[3] pin */
N#define SYSCFG_EXTICR1_EXTI3_PC         ((uint16_t)0x2000) /*!<PC[3] pin */
N#define SYSCFG_EXTICR1_EXTI3_PD         ((uint16_t)0x3000) /*!<PD[3] pin */
N#define SYSCFG_EXTICR1_EXTI3_PE         ((uint16_t)0x4000) /*!<PE[3] pin */
N#define SYSCFG_EXTICR1_EXTI3_PF         ((uint16_t)0x5000) /*!<PF[3] pin */
N#define SYSCFG_EXTICR1_EXTI3_PG         ((uint16_t)0x6000) /*!<PG[3] pin */
N#define SYSCFG_EXTICR1_EXTI3_PH         ((uint16_t)0x7000) /*!<PH[3] pin */
N#define SYSCFG_EXTICR1_EXTI3_PI         ((uint16_t)0x8000) /*!<PI[3] pin */
N#define SYSCFG_EXTICR1_EXTI3_PJ         ((uint16_t)0x9000) /*!<PJ[3] pin */
N#define SYSCFG_EXTICR1_EXTI3_PK         ((uint16_t)0xA000) /*!<PK[3] pin */
N
N/*****************  Bit definition for SYSCFG_EXTICR2 register  ***************/
N#define SYSCFG_EXTICR2_EXTI4            ((uint16_t)0x000F) /*!<EXTI 4 configuration */
N#define SYSCFG_EXTICR2_EXTI5            ((uint16_t)0x00F0) /*!<EXTI 5 configuration */
N#define SYSCFG_EXTICR2_EXTI6            ((uint16_t)0x0F00) /*!<EXTI 6 configuration */
N#define SYSCFG_EXTICR2_EXTI7            ((uint16_t)0xF000) /*!<EXTI 7 configuration */
N/** 
N  * @brief   EXTI4 configuration  
N  */ 
N#define SYSCFG_EXTICR2_EXTI4_PA         ((uint16_t)0x0000) /*!<PA[4] pin */
N#define SYSCFG_EXTICR2_EXTI4_PB         ((uint16_t)0x0001) /*!<PB[4] pin */
N#define SYSCFG_EXTICR2_EXTI4_PC         ((uint16_t)0x0002) /*!<PC[4] pin */
N#define SYSCFG_EXTICR2_EXTI4_PD         ((uint16_t)0x0003) /*!<PD[4] pin */
N#define SYSCFG_EXTICR2_EXTI4_PE         ((uint16_t)0x0004) /*!<PE[4] pin */
N#define SYSCFG_EXTICR2_EXTI4_PF         ((uint16_t)0x0005) /*!<PF[4] pin */
N#define SYSCFG_EXTICR2_EXTI4_PG         ((uint16_t)0x0006) /*!<PG[4] pin */
N#define SYSCFG_EXTICR2_EXTI4_PH         ((uint16_t)0x0007) /*!<PH[4] pin */
N#define SYSCFG_EXTICR2_EXTI4_PI         ((uint16_t)0x0008) /*!<PI[4] pin */
N#define SYSCFG_EXTICR2_EXTI4_PJ         ((uint16_t)0x0009) /*!<PJ[4] pin */
N#define SYSCFG_EXTICR2_EXTI4_PK         ((uint16_t)0x000A) /*!<PK[4] pin */
N
N/** 
N  * @brief   EXTI5 configuration  
N  */ 
N#define SYSCFG_EXTICR2_EXTI5_PA         ((uint16_t)0x0000) /*!<PA[5] pin */
N#define SYSCFG_EXTICR2_EXTI5_PB         ((uint16_t)0x0010) /*!<PB[5] pin */
N#define SYSCFG_EXTICR2_EXTI5_PC         ((uint16_t)0x0020) /*!<PC[5] pin */
N#define SYSCFG_EXTICR2_EXTI5_PD         ((uint16_t)0x0030) /*!<PD[5] pin */
N#define SYSCFG_EXTICR2_EXTI5_PE         ((uint16_t)0x0040) /*!<PE[5] pin */
N#define SYSCFG_EXTICR2_EXTI5_PF         ((uint16_t)0x0050) /*!<PF[5] pin */
N#define SYSCFG_EXTICR2_EXTI5_PG         ((uint16_t)0x0060) /*!<PG[5] pin */
N#define SYSCFG_EXTICR2_EXTI5_PH         ((uint16_t)0x0070) /*!<PH[5] pin */
N#define SYSCFG_EXTICR2_EXTI5_PI         ((uint16_t)0x0080) /*!<PI[5] pin */
N#define SYSCFG_EXTICR2_EXTI5_PJ         ((uint16_t)0x0090) /*!<PJ[5] pin */
N#define SYSCFG_EXTICR2_EXTI5_PK         ((uint16_t)0x00A0) /*!<PK[5] pin */
N
N/** 
N  * @brief   EXTI6 configuration  
N  */ 
N#define SYSCFG_EXTICR2_EXTI6_PA         ((uint16_t)0x0000) /*!<PA[6] pin */
N#define SYSCFG_EXTICR2_EXTI6_PB         ((uint16_t)0x0100) /*!<PB[6] pin */
N#define SYSCFG_EXTICR2_EXTI6_PC         ((uint16_t)0x0200) /*!<PC[6] pin */
N#define SYSCFG_EXTICR2_EXTI6_PD         ((uint16_t)0x0300) /*!<PD[6] pin */
N#define SYSCFG_EXTICR2_EXTI6_PE         ((uint16_t)0x0400) /*!<PE[6] pin */
N#define SYSCFG_EXTICR2_EXTI6_PF         ((uint16_t)0x0500) /*!<PF[6] pin */
N#define SYSCFG_EXTICR2_EXTI6_PG         ((uint16_t)0x0600) /*!<PG[6] pin */
N#define SYSCFG_EXTICR2_EXTI6_PH         ((uint16_t)0x0700) /*!<PH[6] pin */
N#define SYSCFG_EXTICR2_EXTI6_PI         ((uint16_t)0x0800) /*!<PI[6] pin */
N#define SYSCFG_EXTICR2_EXTI6_PJ         ((uint16_t)0x0900) /*!<PJ[6] pin */
N#define SYSCFG_EXTICR2_EXTI6_PK         ((uint16_t)0x0A00) /*!<PK[6] pin */
N
N/** 
N  * @brief   EXTI7 configuration  
N  */ 
N#define SYSCFG_EXTICR2_EXTI7_PA         ((uint16_t)0x0000) /*!<PA[7] pin */
N#define SYSCFG_EXTICR2_EXTI7_PB         ((uint16_t)0x1000) /*!<PB[7] pin */
N#define SYSCFG_EXTICR2_EXTI7_PC         ((uint16_t)0x2000) /*!<PC[7] pin */
N#define SYSCFG_EXTICR2_EXTI7_PD         ((uint16_t)0x3000) /*!<PD[7] pin */
N#define SYSCFG_EXTICR2_EXTI7_PE         ((uint16_t)0x4000) /*!<PE[7] pin */
N#define SYSCFG_EXTICR2_EXTI7_PF         ((uint16_t)0x5000) /*!<PF[7] pin */
N#define SYSCFG_EXTICR2_EXTI7_PG         ((uint16_t)0x6000) /*!<PG[7] pin */
N#define SYSCFG_EXTICR2_EXTI7_PH         ((uint16_t)0x7000) /*!<PH[7] pin */
N#define SYSCFG_EXTICR2_EXTI7_PI         ((uint16_t)0x8000) /*!<PI[7] pin */
N#define SYSCFG_EXTICR2_EXTI7_PJ         ((uint16_t)0x9000) /*!<PJ[7] pin */
N#define SYSCFG_EXTICR2_EXTI7_PK         ((uint16_t)0xA000) /*!<PK[7] pin */
N
N/*****************  Bit definition for SYSCFG_EXTICR3 register  ***************/
N#define SYSCFG_EXTICR3_EXTI8            ((uint16_t)0x000F) /*!<EXTI 8 configuration */
N#define SYSCFG_EXTICR3_EXTI9            ((uint16_t)0x00F0) /*!<EXTI 9 configuration */
N#define SYSCFG_EXTICR3_EXTI10           ((uint16_t)0x0F00) /*!<EXTI 10 configuration */
N#define SYSCFG_EXTICR3_EXTI11           ((uint16_t)0xF000) /*!<EXTI 11 configuration */
N           
N/** 
N  * @brief   EXTI8 configuration  
N  */ 
N#define SYSCFG_EXTICR3_EXTI8_PA         ((uint16_t)0x0000) /*!<PA[8] pin */
N#define SYSCFG_EXTICR3_EXTI8_PB         ((uint16_t)0x0001) /*!<PB[8] pin */
N#define SYSCFG_EXTICR3_EXTI8_PC         ((uint16_t)0x0002) /*!<PC[8] pin */
N#define SYSCFG_EXTICR3_EXTI8_PD         ((uint16_t)0x0003) /*!<PD[8] pin */
N#define SYSCFG_EXTICR3_EXTI8_PE         ((uint16_t)0x0004) /*!<PE[8] pin */
N#define SYSCFG_EXTICR3_EXTI8_PF         ((uint16_t)0x0005) /*!<PF[8] pin */
N#define SYSCFG_EXTICR3_EXTI8_PG         ((uint16_t)0x0006) /*!<PG[8] pin */
N#define SYSCFG_EXTICR3_EXTI8_PH         ((uint16_t)0x0007) /*!<PH[8] pin */
N#define SYSCFG_EXTICR3_EXTI8_PI         ((uint16_t)0x0008) /*!<PI[8] pin */
N#define SYSCFG_EXTICR3_EXTI8_PJ         ((uint16_t)0x0009) /*!<PJ[8] pin */
N
N/** 
N  * @brief   EXTI9 configuration  
N  */ 
N#define SYSCFG_EXTICR3_EXTI9_PA         ((uint16_t)0x0000) /*!<PA[9] pin */
N#define SYSCFG_EXTICR3_EXTI9_PB         ((uint16_t)0x0010) /*!<PB[9] pin */
N#define SYSCFG_EXTICR3_EXTI9_PC         ((uint16_t)0x0020) /*!<PC[9] pin */
N#define SYSCFG_EXTICR3_EXTI9_PD         ((uint16_t)0x0030) /*!<PD[9] pin */
N#define SYSCFG_EXTICR3_EXTI9_PE         ((uint16_t)0x0040) /*!<PE[9] pin */
N#define SYSCFG_EXTICR3_EXTI9_PF         ((uint16_t)0x0050) /*!<PF[9] pin */
N#define SYSCFG_EXTICR3_EXTI9_PG         ((uint16_t)0x0060) /*!<PG[9] pin */
N#define SYSCFG_EXTICR3_EXTI9_PH         ((uint16_t)0x0070) /*!<PH[9] pin */
N#define SYSCFG_EXTICR3_EXTI9_PI         ((uint16_t)0x0080) /*!<PI[9] pin */
N#define SYSCFG_EXTICR3_EXTI9_PJ         ((uint16_t)0x0090) /*!<PJ[9] pin */
N
N/** 
N  * @brief   EXTI10 configuration  
N  */ 
N#define SYSCFG_EXTICR3_EXTI10_PA        ((uint16_t)0x0000) /*!<PA[10] pin */
N#define SYSCFG_EXTICR3_EXTI10_PB        ((uint16_t)0x0100) /*!<PB[10] pin */
N#define SYSCFG_EXTICR3_EXTI10_PC        ((uint16_t)0x0200) /*!<PC[10] pin */
N#define SYSCFG_EXTICR3_EXTI10_PD        ((uint16_t)0x0300) /*!<PD[10] pin */
N#define SYSCFG_EXTICR3_EXTI10_PE        ((uint16_t)0x0400) /*!<PE[10] pin */
N#define SYSCFG_EXTICR3_EXTI10_PF        ((uint16_t)0x0500) /*!<PF[10] pin */
N#define SYSCFG_EXTICR3_EXTI10_PG        ((uint16_t)0x0600) /*!<PG[10] pin */
N#define SYSCFG_EXTICR3_EXTI10_PH        ((uint16_t)0x0700) /*!<PH[10] pin */
N#define SYSCFG_EXTICR3_EXTI10_PI        ((uint16_t)0x0800) /*!<PI[10] pin */
N#define SYSCFG_EXTICR3_EXTI10_PJ        ((uint16_t)0x0900) /*!<PJ[10] pin */
N
N/** 
N  * @brief   EXTI11 configuration  
N  */ 
N#define SYSCFG_EXTICR3_EXTI11_PA        ((uint16_t)0x0000) /*!<PA[11] pin */
N#define SYSCFG_EXTICR3_EXTI11_PB        ((uint16_t)0x1000) /*!<PB[11] pin */
N#define SYSCFG_EXTICR3_EXTI11_PC        ((uint16_t)0x2000) /*!<PC[11] pin */
N#define SYSCFG_EXTICR3_EXTI11_PD        ((uint16_t)0x3000) /*!<PD[11] pin */
N#define SYSCFG_EXTICR3_EXTI11_PE        ((uint16_t)0x4000) /*!<PE[11] pin */
N#define SYSCFG_EXTICR3_EXTI11_PF        ((uint16_t)0x5000) /*!<PF[11] pin */
N#define SYSCFG_EXTICR3_EXTI11_PG        ((uint16_t)0x6000) /*!<PG[11] pin */
N#define SYSCFG_EXTICR3_EXTI11_PH        ((uint16_t)0x7000) /*!<PH[11] pin */
N#define SYSCFG_EXTICR3_EXTI11_PI        ((uint16_t)0x8000) /*!<PI[11] pin */
N#define SYSCFG_EXTICR3_EXTI11_PJ        ((uint16_t)0x9000) /*!<PJ[11] pin */
N
N/*****************  Bit definition for SYSCFG_EXTICR4 register  ***************/
N#define SYSCFG_EXTICR4_EXTI12           ((uint16_t)0x000F) /*!<EXTI 12 configuration */
N#define SYSCFG_EXTICR4_EXTI13           ((uint16_t)0x00F0) /*!<EXTI 13 configuration */
N#define SYSCFG_EXTICR4_EXTI14           ((uint16_t)0x0F00) /*!<EXTI 14 configuration */
N#define SYSCFG_EXTICR4_EXTI15           ((uint16_t)0xF000) /*!<EXTI 15 configuration */
N/** 
N  * @brief   EXTI12 configuration  
N  */ 
N#define SYSCFG_EXTICR4_EXTI12_PA        ((uint16_t)0x0000) /*!<PA[12] pin */
N#define SYSCFG_EXTICR4_EXTI12_PB        ((uint16_t)0x0001) /*!<PB[12] pin */
N#define SYSCFG_EXTICR4_EXTI12_PC        ((uint16_t)0x0002) /*!<PC[12] pin */
N#define SYSCFG_EXTICR4_EXTI12_PD        ((uint16_t)0x0003) /*!<PD[12] pin */
N#define SYSCFG_EXTICR4_EXTI12_PE        ((uint16_t)0x0004) /*!<PE[12] pin */
N#define SYSCFG_EXTICR4_EXTI12_PF        ((uint16_t)0x0005) /*!<PF[12] pin */
N#define SYSCFG_EXTICR4_EXTI12_PG        ((uint16_t)0x0006) /*!<PG[12] pin */
N#define SYSCFG_EXTICR4_EXTI12_PH        ((uint16_t)0x0007) /*!<PH[12] pin */
N#define SYSCFG_EXTICR4_EXTI12_PI        ((uint16_t)0x0008) /*!<PI[12] pin */
N#define SYSCFG_EXTICR4_EXTI12_PJ        ((uint16_t)0x0009) /*!<PJ[12] pin */
N
N/** 
N  * @brief   EXTI13 configuration  
N  */ 
N#define SYSCFG_EXTICR4_EXTI13_PA        ((uint16_t)0x0000) /*!<PA[13] pin */
N#define SYSCFG_EXTICR4_EXTI13_PB        ((uint16_t)0x0010) /*!<PB[13] pin */
N#define SYSCFG_EXTICR4_EXTI13_PC        ((uint16_t)0x0020) /*!<PC[13] pin */
N#define SYSCFG_EXTICR4_EXTI13_PD        ((uint16_t)0x0030) /*!<PD[13] pin */
N#define SYSCFG_EXTICR4_EXTI13_PE        ((uint16_t)0x0040) /*!<PE[13] pin */
N#define SYSCFG_EXTICR4_EXTI13_PF        ((uint16_t)0x0050) /*!<PF[13] pin */
N#define SYSCFG_EXTICR4_EXTI13_PG        ((uint16_t)0x0060) /*!<PG[13] pin */
N#define SYSCFG_EXTICR4_EXTI13_PH        ((uint16_t)0x0070) /*!<PH[13] pin */
N#define SYSCFG_EXTICR4_EXTI13_PI        ((uint16_t)0x0008) /*!<PI[13] pin */
N#define SYSCFG_EXTICR4_EXTI13_PJ        ((uint16_t)0x0009) /*!<PJ[13] pin */
N
N/** 
N  * @brief   EXTI14 configuration  
N  */ 
N#define SYSCFG_EXTICR4_EXTI14_PA        ((uint16_t)0x0000) /*!<PA[14] pin */
N#define SYSCFG_EXTICR4_EXTI14_PB        ((uint16_t)0x0100) /*!<PB[14] pin */
N#define SYSCFG_EXTICR4_EXTI14_PC        ((uint16_t)0x0200) /*!<PC[14] pin */
N#define SYSCFG_EXTICR4_EXTI14_PD        ((uint16_t)0x0300) /*!<PD[14] pin */
N#define SYSCFG_EXTICR4_EXTI14_PE        ((uint16_t)0x0400) /*!<PE[14] pin */
N#define SYSCFG_EXTICR4_EXTI14_PF        ((uint16_t)0x0500) /*!<PF[14] pin */
N#define SYSCFG_EXTICR4_EXTI14_PG        ((uint16_t)0x0600) /*!<PG[14] pin */
N#define SYSCFG_EXTICR4_EXTI14_PH        ((uint16_t)0x0700) /*!<PH[14] pin */
N#define SYSCFG_EXTICR4_EXTI14_PI        ((uint16_t)0x0800) /*!<PI[14] pin */
N#define SYSCFG_EXTICR4_EXTI14_PJ        ((uint16_t)0x0900) /*!<PJ[14] pin */
N
N/** 
N  * @brief   EXTI15 configuration  
N  */ 
N#define SYSCFG_EXTICR4_EXTI15_PA        ((uint16_t)0x0000) /*!<PA[15] pin */
N#define SYSCFG_EXTICR4_EXTI15_PB        ((uint16_t)0x1000) /*!<PB[15] pin */
N#define SYSCFG_EXTICR4_EXTI15_PC        ((uint16_t)0x2000) /*!<PC[15] pin */
N#define SYSCFG_EXTICR4_EXTI15_PD        ((uint16_t)0x3000) /*!<PD[15] pin */
N#define SYSCFG_EXTICR4_EXTI15_PE        ((uint16_t)0x4000) /*!<PE[15] pin */
N#define SYSCFG_EXTICR4_EXTI15_PF        ((uint16_t)0x5000) /*!<PF[15] pin */
N#define SYSCFG_EXTICR4_EXTI15_PG        ((uint16_t)0x6000) /*!<PG[15] pin */
N#define SYSCFG_EXTICR4_EXTI15_PH        ((uint16_t)0x7000) /*!<PH[15] pin */
N#define SYSCFG_EXTICR4_EXTI15_PI        ((uint16_t)0x8000) /*!<PI[15] pin */
N#define SYSCFG_EXTICR4_EXTI15_PJ        ((uint16_t)0x9000) /*!<PJ[15] pin */
N
N/******************  Bit definition for SYSCFG_CMPCR register  ****************/  
N#define SYSCFG_CMPCR_CMP_PD             ((uint32_t)0x00000001) /*!<Compensation cell ready flag */
N#define SYSCFG_CMPCR_READY              ((uint32_t)0x00000100) /*!<Compensation cell power-down */
N
N/******************************************************************************/
N/*                                                                            */
N/*                                    TIM                                     */
N/*                                                                            */
N/******************************************************************************/
N/*******************  Bit definition for TIM_CR1 register  ********************/
N#define  TIM_CR1_CEN                         ((uint16_t)0x0001)            /*!<Counter enable        */
N#define  TIM_CR1_UDIS                        ((uint16_t)0x0002)            /*!<Update disable        */
N#define  TIM_CR1_URS                         ((uint16_t)0x0004)            /*!<Update request source */
N#define  TIM_CR1_OPM                         ((uint16_t)0x0008)            /*!<One pulse mode        */
N#define  TIM_CR1_DIR                         ((uint16_t)0x0010)            /*!<Direction             */
N
N#define  TIM_CR1_CMS                         ((uint16_t)0x0060)            /*!<CMS[1:0] bits (Center-aligned mode selection) */
N#define  TIM_CR1_CMS_0                       ((uint16_t)0x0020)            /*!<Bit 0 */
N#define  TIM_CR1_CMS_1                       ((uint16_t)0x0040)            /*!<Bit 1 */
N
N#define  TIM_CR1_ARPE                        ((uint16_t)0x0080)            /*!<Auto-reload preload enable     */
N
N#define  TIM_CR1_CKD                         ((uint16_t)0x0300)            /*!<CKD[1:0] bits (clock division) */
N#define  TIM_CR1_CKD_0                       ((uint16_t)0x0100)            /*!<Bit 0 */
N#define  TIM_CR1_CKD_1                       ((uint16_t)0x0200)            /*!<Bit 1 */
N
N/*******************  Bit definition for TIM_CR2 register  ********************/
N#define  TIM_CR2_CCPC                        ((uint16_t)0x0001)            /*!<Capture/Compare Preloaded Control        */
N#define  TIM_CR2_CCUS                        ((uint16_t)0x0004)            /*!<Capture/Compare Control Update Selection */
N#define  TIM_CR2_CCDS                        ((uint16_t)0x0008)            /*!<Capture/Compare DMA Selection            */
N
N#define  TIM_CR2_MMS                         ((uint16_t)0x0070)            /*!<MMS[2:0] bits (Master Mode Selection) */
N#define  TIM_CR2_MMS_0                       ((uint16_t)0x0010)            /*!<Bit 0 */
N#define  TIM_CR2_MMS_1                       ((uint16_t)0x0020)            /*!<Bit 1 */
N#define  TIM_CR2_MMS_2                       ((uint16_t)0x0040)            /*!<Bit 2 */
N
N#define  TIM_CR2_TI1S                        ((uint16_t)0x0080)            /*!<TI1 Selection */
N#define  TIM_CR2_OIS1                        ((uint16_t)0x0100)            /*!<Output Idle state 1 (OC1 output)  */
N#define  TIM_CR2_OIS1N                       ((uint16_t)0x0200)            /*!<Output Idle state 1 (OC1N output) */
N#define  TIM_CR2_OIS2                        ((uint16_t)0x0400)            /*!<Output Idle state 2 (OC2 output)  */
N#define  TIM_CR2_OIS2N                       ((uint16_t)0x0800)            /*!<Output Idle state 2 (OC2N output) */
N#define  TIM_CR2_OIS3                        ((uint16_t)0x1000)            /*!<Output Idle state 3 (OC3 output)  */
N#define  TIM_CR2_OIS3N                       ((uint16_t)0x2000)            /*!<Output Idle state 3 (OC3N output) */
N#define  TIM_CR2_OIS4                        ((uint16_t)0x4000)            /*!<Output Idle state 4 (OC4 output)  */
N
N/*******************  Bit definition for TIM_SMCR register  *******************/
N#define  TIM_SMCR_SMS                        ((uint16_t)0x0007)            /*!<SMS[2:0] bits (Slave mode selection)    */
N#define  TIM_SMCR_SMS_0                      ((uint16_t)0x0001)            /*!<Bit 0 */
N#define  TIM_SMCR_SMS_1                      ((uint16_t)0x0002)            /*!<Bit 1 */
N#define  TIM_SMCR_SMS_2                      ((uint16_t)0x0004)            /*!<Bit 2 */
N
N#define  TIM_SMCR_TS                         ((uint16_t)0x0070)            /*!<TS[2:0] bits (Trigger selection)        */
N#define  TIM_SMCR_TS_0                       ((uint16_t)0x0010)            /*!<Bit 0 */
N#define  TIM_SMCR_TS_1                       ((uint16_t)0x0020)            /*!<Bit 1 */
N#define  TIM_SMCR_TS_2                       ((uint16_t)0x0040)            /*!<Bit 2 */
N
N#define  TIM_SMCR_MSM                        ((uint16_t)0x0080)            /*!<Master/slave mode                       */
N
N#define  TIM_SMCR_ETF                        ((uint16_t)0x0F00)            /*!<ETF[3:0] bits (External trigger filter) */
N#define  TIM_SMCR_ETF_0                      ((uint16_t)0x0100)            /*!<Bit 0 */
N#define  TIM_SMCR_ETF_1                      ((uint16_t)0x0200)            /*!<Bit 1 */
N#define  TIM_SMCR_ETF_2                      ((uint16_t)0x0400)            /*!<Bit 2 */
N#define  TIM_SMCR_ETF_3                      ((uint16_t)0x0800)            /*!<Bit 3 */
N
N#define  TIM_SMCR_ETPS                       ((uint16_t)0x3000)            /*!<ETPS[1:0] bits (External trigger prescaler) */
N#define  TIM_SMCR_ETPS_0                     ((uint16_t)0x1000)            /*!<Bit 0 */
N#define  TIM_SMCR_ETPS_1                     ((uint16_t)0x2000)            /*!<Bit 1 */
N
N#define  TIM_SMCR_ECE                        ((uint16_t)0x4000)            /*!<External clock enable     */
N#define  TIM_SMCR_ETP                        ((uint16_t)0x8000)            /*!<External trigger polarity */
N
N/*******************  Bit definition for TIM_DIER register  *******************/
N#define  TIM_DIER_UIE                        ((uint16_t)0x0001)            /*!<Update interrupt enable */
N#define  TIM_DIER_CC1IE                      ((uint16_t)0x0002)            /*!<Capture/Compare 1 interrupt enable   */
N#define  TIM_DIER_CC2IE                      ((uint16_t)0x0004)            /*!<Capture/Compare 2 interrupt enable   */
N#define  TIM_DIER_CC3IE                      ((uint16_t)0x0008)            /*!<Capture/Compare 3 interrupt enable   */
N#define  TIM_DIER_CC4IE                      ((uint16_t)0x0010)            /*!<Capture/Compare 4 interrupt enable   */
N#define  TIM_DIER_COMIE                      ((uint16_t)0x0020)            /*!<COM interrupt enable                 */
N#define  TIM_DIER_TIE                        ((uint16_t)0x0040)            /*!<Trigger interrupt enable             */
N#define  TIM_DIER_BIE                        ((uint16_t)0x0080)            /*!<Break interrupt enable               */
N#define  TIM_DIER_UDE                        ((uint16_t)0x0100)            /*!<Update DMA request enable            */
N#define  TIM_DIER_CC1DE                      ((uint16_t)0x0200)            /*!<Capture/Compare 1 DMA request enable */
N#define  TIM_DIER_CC2DE                      ((uint16_t)0x0400)            /*!<Capture/Compare 2 DMA request enable */
N#define  TIM_DIER_CC3DE                      ((uint16_t)0x0800)            /*!<Capture/Compare 3 DMA request enable */
N#define  TIM_DIER_CC4DE                      ((uint16_t)0x1000)            /*!<Capture/Compare 4 DMA request enable */
N#define  TIM_DIER_COMDE                      ((uint16_t)0x2000)            /*!<COM DMA request enable               */
N#define  TIM_DIER_TDE                        ((uint16_t)0x4000)            /*!<Trigger DMA request enable           */
N
N/********************  Bit definition for TIM_SR register  ********************/
N#define  TIM_SR_UIF                          ((uint16_t)0x0001)            /*!<Update interrupt Flag              */
N#define  TIM_SR_CC1IF                        ((uint16_t)0x0002)            /*!<Capture/Compare 1 interrupt Flag   */
N#define  TIM_SR_CC2IF                        ((uint16_t)0x0004)            /*!<Capture/Compare 2 interrupt Flag   */
N#define  TIM_SR_CC3IF                        ((uint16_t)0x0008)            /*!<Capture/Compare 3 interrupt Flag   */
N#define  TIM_SR_CC4IF                        ((uint16_t)0x0010)            /*!<Capture/Compare 4 interrupt Flag   */
N#define  TIM_SR_COMIF                        ((uint16_t)0x0020)            /*!<COM interrupt Flag                 */
N#define  TIM_SR_TIF                          ((uint16_t)0x0040)            /*!<Trigger interrupt Flag             */
N#define  TIM_SR_BIF                          ((uint16_t)0x0080)            /*!<Break interrupt Flag               */
N#define  TIM_SR_CC1OF                        ((uint16_t)0x0200)            /*!<Capture/Compare 1 Overcapture Flag */
N#define  TIM_SR_CC2OF                        ((uint16_t)0x0400)            /*!<Capture/Compare 2 Overcapture Flag */
N#define  TIM_SR_CC3OF                        ((uint16_t)0x0800)            /*!<Capture/Compare 3 Overcapture Flag */
N#define  TIM_SR_CC4OF                        ((uint16_t)0x1000)            /*!<Capture/Compare 4 Overcapture Flag */
N
N/*******************  Bit definition for TIM_EGR register  ********************/
N#define  TIM_EGR_UG                          ((uint8_t)0x01)               /*!<Update Generation                         */
N#define  TIM_EGR_CC1G                        ((uint8_t)0x02)               /*!<Capture/Compare 1 Generation              */
N#define  TIM_EGR_CC2G                        ((uint8_t)0x04)               /*!<Capture/Compare 2 Generation              */
N#define  TIM_EGR_CC3G                        ((uint8_t)0x08)               /*!<Capture/Compare 3 Generation              */
N#define  TIM_EGR_CC4G                        ((uint8_t)0x10)               /*!<Capture/Compare 4 Generation              */
N#define  TIM_EGR_COMG                        ((uint8_t)0x20)               /*!<Capture/Compare Control Update Generation */
N#define  TIM_EGR_TG                          ((uint8_t)0x40)               /*!<Trigger Generation                        */
N#define  TIM_EGR_BG                          ((uint8_t)0x80)               /*!<Break Generation                          */
N
N/******************  Bit definition for TIM_CCMR1 register  *******************/
N#define  TIM_CCMR1_CC1S                      ((uint16_t)0x0003)            /*!<CC1S[1:0] bits (Capture/Compare 1 Selection) */
N#define  TIM_CCMR1_CC1S_0                    ((uint16_t)0x0001)            /*!<Bit 0 */
N#define  TIM_CCMR1_CC1S_1                    ((uint16_t)0x0002)            /*!<Bit 1 */
N
N#define  TIM_CCMR1_OC1FE                     ((uint16_t)0x0004)            /*!<Output Compare 1 Fast enable                 */
N#define  TIM_CCMR1_OC1PE                     ((uint16_t)0x0008)            /*!<Output Compare 1 Preload enable              */
N
N#define  TIM_CCMR1_OC1M                      ((uint16_t)0x0070)            /*!<OC1M[2:0] bits (Output Compare 1 Mode)       */
N#define  TIM_CCMR1_OC1M_0                    ((uint16_t)0x0010)            /*!<Bit 0 */
N#define  TIM_CCMR1_OC1M_1                    ((uint16_t)0x0020)            /*!<Bit 1 */
N#define  TIM_CCMR1_OC1M_2                    ((uint16_t)0x0040)            /*!<Bit 2 */
N
N#define  TIM_CCMR1_OC1CE                     ((uint16_t)0x0080)            /*!<Output Compare 1Clear Enable                 */
N
N#define  TIM_CCMR1_CC2S                      ((uint16_t)0x0300)            /*!<CC2S[1:0] bits (Capture/Compare 2 Selection) */
N#define  TIM_CCMR1_CC2S_0                    ((uint16_t)0x0100)            /*!<Bit 0 */
N#define  TIM_CCMR1_CC2S_1                    ((uint16_t)0x0200)            /*!<Bit 1 */
N
N#define  TIM_CCMR1_OC2FE                     ((uint16_t)0x0400)            /*!<Output Compare 2 Fast enable                 */
N#define  TIM_CCMR1_OC2PE                     ((uint16_t)0x0800)            /*!<Output Compare 2 Preload enable              */
N
N#define  TIM_CCMR1_OC2M                      ((uint16_t)0x7000)            /*!<OC2M[2:0] bits (Output Compare 2 Mode)       */
N#define  TIM_CCMR1_OC2M_0                    ((uint16_t)0x1000)            /*!<Bit 0 */
N#define  TIM_CCMR1_OC2M_1                    ((uint16_t)0x2000)            /*!<Bit 1 */
N#define  TIM_CCMR1_OC2M_2                    ((uint16_t)0x4000)            /*!<Bit 2 */
N
N#define  TIM_CCMR1_OC2CE                     ((uint16_t)0x8000)            /*!<Output Compare 2 Clear Enable */
N
N/*----------------------------------------------------------------------------*/
N
N#define  TIM_CCMR1_IC1PSC                    ((uint16_t)0x000C)            /*!<IC1PSC[1:0] bits (Input Capture 1 Prescaler) */
N#define  TIM_CCMR1_IC1PSC_0                  ((uint16_t)0x0004)            /*!<Bit 0 */
N#define  TIM_CCMR1_IC1PSC_1                  ((uint16_t)0x0008)            /*!<Bit 1 */
N
N#define  TIM_CCMR1_IC1F                      ((uint16_t)0x00F0)            /*!<IC1F[3:0] bits (Input Capture 1 Filter)      */
N#define  TIM_CCMR1_IC1F_0                    ((uint16_t)0x0010)            /*!<Bit 0 */
N#define  TIM_CCMR1_IC1F_1                    ((uint16_t)0x0020)            /*!<Bit 1 */
N#define  TIM_CCMR1_IC1F_2                    ((uint16_t)0x0040)            /*!<Bit 2 */
N#define  TIM_CCMR1_IC1F_3                    ((uint16_t)0x0080)            /*!<Bit 3 */
N
N#define  TIM_CCMR1_IC2PSC                    ((uint16_t)0x0C00)            /*!<IC2PSC[1:0] bits (Input Capture 2 Prescaler)  */
N#define  TIM_CCMR1_IC2PSC_0                  ((uint16_t)0x0400)            /*!<Bit 0 */
N#define  TIM_CCMR1_IC2PSC_1                  ((uint16_t)0x0800)            /*!<Bit 1 */
N
N#define  TIM_CCMR1_IC2F                      ((uint16_t)0xF000)            /*!<IC2F[3:0] bits (Input Capture 2 Filter)       */
N#define  TIM_CCMR1_IC2F_0                    ((uint16_t)0x1000)            /*!<Bit 0 */
N#define  TIM_CCMR1_IC2F_1                    ((uint16_t)0x2000)            /*!<Bit 1 */
N#define  TIM_CCMR1_IC2F_2                    ((uint16_t)0x4000)            /*!<Bit 2 */
N#define  TIM_CCMR1_IC2F_3                    ((uint16_t)0x8000)            /*!<Bit 3 */
N
N/******************  Bit definition for TIM_CCMR2 register  *******************/
N#define  TIM_CCMR2_CC3S                      ((uint16_t)0x0003)            /*!<CC3S[1:0] bits (Capture/Compare 3 Selection)  */
N#define  TIM_CCMR2_CC3S_0                    ((uint16_t)0x0001)            /*!<Bit 0 */
N#define  TIM_CCMR2_CC3S_1                    ((uint16_t)0x0002)            /*!<Bit 1 */
N
N#define  TIM_CCMR2_OC3FE                     ((uint16_t)0x0004)            /*!<Output Compare 3 Fast enable           */
N#define  TIM_CCMR2_OC3PE                     ((uint16_t)0x0008)            /*!<Output Compare 3 Preload enable        */
N
N#define  TIM_CCMR2_OC3M                      ((uint16_t)0x0070)            /*!<OC3M[2:0] bits (Output Compare 3 Mode) */
N#define  TIM_CCMR2_OC3M_0                    ((uint16_t)0x0010)            /*!<Bit 0 */
N#define  TIM_CCMR2_OC3M_1                    ((uint16_t)0x0020)            /*!<Bit 1 */
N#define  TIM_CCMR2_OC3M_2                    ((uint16_t)0x0040)            /*!<Bit 2 */
N
N#define  TIM_CCMR2_OC3CE                     ((uint16_t)0x0080)            /*!<Output Compare 3 Clear Enable */
N
N#define  TIM_CCMR2_CC4S                      ((uint16_t)0x0300)            /*!<CC4S[1:0] bits (Capture/Compare 4 Selection) */
N#define  TIM_CCMR2_CC4S_0                    ((uint16_t)0x0100)            /*!<Bit 0 */
N#define  TIM_CCMR2_CC4S_1                    ((uint16_t)0x0200)            /*!<Bit 1 */
N
N#define  TIM_CCMR2_OC4FE                     ((uint16_t)0x0400)            /*!<Output Compare 4 Fast enable    */
N#define  TIM_CCMR2_OC4PE                     ((uint16_t)0x0800)            /*!<Output Compare 4 Preload enable */
N
N#define  TIM_CCMR2_OC4M                      ((uint16_t)0x7000)            /*!<OC4M[2:0] bits (Output Compare 4 Mode) */
N#define  TIM_CCMR2_OC4M_0                    ((uint16_t)0x1000)            /*!<Bit 0 */
N#define  TIM_CCMR2_OC4M_1                    ((uint16_t)0x2000)            /*!<Bit 1 */
N#define  TIM_CCMR2_OC4M_2                    ((uint16_t)0x4000)            /*!<Bit 2 */
N
N#define  TIM_CCMR2_OC4CE                     ((uint16_t)0x8000)            /*!<Output Compare 4 Clear Enable */
N
N/*----------------------------------------------------------------------------*/
N
N#define  TIM_CCMR2_IC3PSC                    ((uint16_t)0x000C)            /*!<IC3PSC[1:0] bits (Input Capture 3 Prescaler) */
N#define  TIM_CCMR2_IC3PSC_0                  ((uint16_t)0x0004)            /*!<Bit 0 */
N#define  TIM_CCMR2_IC3PSC_1                  ((uint16_t)0x0008)            /*!<Bit 1 */
N
N#define  TIM_CCMR2_IC3F                      ((uint16_t)0x00F0)            /*!<IC3F[3:0] bits (Input Capture 3 Filter) */
N#define  TIM_CCMR2_IC3F_0                    ((uint16_t)0x0010)            /*!<Bit 0 */
N#define  TIM_CCMR2_IC3F_1                    ((uint16_t)0x0020)            /*!<Bit 1 */
N#define  TIM_CCMR2_IC3F_2                    ((uint16_t)0x0040)            /*!<Bit 2 */
N#define  TIM_CCMR2_IC3F_3                    ((uint16_t)0x0080)            /*!<Bit 3 */
N
N#define  TIM_CCMR2_IC4PSC                    ((uint16_t)0x0C00)            /*!<IC4PSC[1:0] bits (Input Capture 4 Prescaler) */
N#define  TIM_CCMR2_IC4PSC_0                  ((uint16_t)0x0400)            /*!<Bit 0 */
N#define  TIM_CCMR2_IC4PSC_1                  ((uint16_t)0x0800)            /*!<Bit 1 */
N
N#define  TIM_CCMR2_IC4F                      ((uint16_t)0xF000)            /*!<IC4F[3:0] bits (Input Capture 4 Filter) */
N#define  TIM_CCMR2_IC4F_0                    ((uint16_t)0x1000)            /*!<Bit 0 */
N#define  TIM_CCMR2_IC4F_1                    ((uint16_t)0x2000)            /*!<Bit 1 */
N#define  TIM_CCMR2_IC4F_2                    ((uint16_t)0x4000)            /*!<Bit 2 */
N#define  TIM_CCMR2_IC4F_3                    ((uint16_t)0x8000)            /*!<Bit 3 */
N
N/*******************  Bit definition for TIM_CCER register  *******************/
N#define  TIM_CCER_CC1E                       ((uint16_t)0x0001)            /*!<Capture/Compare 1 output enable                 */
N#define  TIM_CCER_CC1P                       ((uint16_t)0x0002)            /*!<Capture/Compare 1 output Polarity               */
N#define  TIM_CCER_CC1NE                      ((uint16_t)0x0004)            /*!<Capture/Compare 1 Complementary output enable   */
N#define  TIM_CCER_CC1NP                      ((uint16_t)0x0008)            /*!<Capture/Compare 1 Complementary output Polarity */
N#define  TIM_CCER_CC2E                       ((uint16_t)0x0010)            /*!<Capture/Compare 2 output enable                 */
N#define  TIM_CCER_CC2P                       ((uint16_t)0x0020)            /*!<Capture/Compare 2 output Polarity               */
N#define  TIM_CCER_CC2NE                      ((uint16_t)0x0040)            /*!<Capture/Compare 2 Complementary output enable   */
N#define  TIM_CCER_CC2NP                      ((uint16_t)0x0080)            /*!<Capture/Compare 2 Complementary output Polarity */
N#define  TIM_CCER_CC3E                       ((uint16_t)0x0100)            /*!<Capture/Compare 3 output enable                 */
N#define  TIM_CCER_CC3P                       ((uint16_t)0x0200)            /*!<Capture/Compare 3 output Polarity               */
N#define  TIM_CCER_CC3NE                      ((uint16_t)0x0400)            /*!<Capture/Compare 3 Complementary output enable   */
N#define  TIM_CCER_CC3NP                      ((uint16_t)0x0800)            /*!<Capture/Compare 3 Complementary output Polarity */
N#define  TIM_CCER_CC4E                       ((uint16_t)0x1000)            /*!<Capture/Compare 4 output enable                 */
N#define  TIM_CCER_CC4P                       ((uint16_t)0x2000)            /*!<Capture/Compare 4 output Polarity               */
N#define  TIM_CCER_CC4NP                      ((uint16_t)0x8000)            /*!<Capture/Compare 4 Complementary output Polarity */
N
N/*******************  Bit definition for TIM_CNT register  ********************/
N#define  TIM_CNT_CNT                         ((uint16_t)0xFFFF)            /*!<Counter Value            */
N
N/*******************  Bit definition for TIM_PSC register  ********************/
N#define  TIM_PSC_PSC                         ((uint16_t)0xFFFF)            /*!<Prescaler Value          */
N
N/*******************  Bit definition for TIM_ARR register  ********************/
N#define  TIM_ARR_ARR                         ((uint16_t)0xFFFF)            /*!<actual auto-reload Value */
N
N/*******************  Bit definition for TIM_RCR register  ********************/
N#define  TIM_RCR_REP                         ((uint8_t)0xFF)               /*!<Repetition Counter Value */
N
N/*******************  Bit definition for TIM_CCR1 register  *******************/
N#define  TIM_CCR1_CCR1                       ((uint16_t)0xFFFF)            /*!<Capture/Compare 1 Value  */
N
N/*******************  Bit definition for TIM_CCR2 register  *******************/
N#define  TIM_CCR2_CCR2                       ((uint16_t)0xFFFF)            /*!<Capture/Compare 2 Value  */
N
N/*******************  Bit definition for TIM_CCR3 register  *******************/
N#define  TIM_CCR3_CCR3                       ((uint16_t)0xFFFF)            /*!<Capture/Compare 3 Value  */
N
N/*******************  Bit definition for TIM_CCR4 register  *******************/
N#define  TIM_CCR4_CCR4                       ((uint16_t)0xFFFF)            /*!<Capture/Compare 4 Value  */
N
N/*******************  Bit definition for TIM_BDTR register  *******************/
N#define  TIM_BDTR_DTG                        ((uint16_t)0x00FF)            /*!<DTG[0:7] bits (Dead-Time Generator set-up) */
N#define  TIM_BDTR_DTG_0                      ((uint16_t)0x0001)            /*!<Bit 0 */
N#define  TIM_BDTR_DTG_1                      ((uint16_t)0x0002)            /*!<Bit 1 */
N#define  TIM_BDTR_DTG_2                      ((uint16_t)0x0004)            /*!<Bit 2 */
N#define  TIM_BDTR_DTG_3                      ((uint16_t)0x0008)            /*!<Bit 3 */
N#define  TIM_BDTR_DTG_4                      ((uint16_t)0x0010)            /*!<Bit 4 */
N#define  TIM_BDTR_DTG_5                      ((uint16_t)0x0020)            /*!<Bit 5 */
N#define  TIM_BDTR_DTG_6                      ((uint16_t)0x0040)            /*!<Bit 6 */
N#define  TIM_BDTR_DTG_7                      ((uint16_t)0x0080)            /*!<Bit 7 */
N
N#define  TIM_BDTR_LOCK                       ((uint16_t)0x0300)            /*!<LOCK[1:0] bits (Lock Configuration) */
N#define  TIM_BDTR_LOCK_0                     ((uint16_t)0x0100)            /*!<Bit 0 */
N#define  TIM_BDTR_LOCK_1                     ((uint16_t)0x0200)            /*!<Bit 1 */
N
N#define  TIM_BDTR_OSSI                       ((uint16_t)0x0400)            /*!<Off-State Selection for Idle mode */
N#define  TIM_BDTR_OSSR                       ((uint16_t)0x0800)            /*!<Off-State Selection for Run mode  */
N#define  TIM_BDTR_BKE                        ((uint16_t)0x1000)            /*!<Break enable                      */
N#define  TIM_BDTR_BKP                        ((uint16_t)0x2000)            /*!<Break Polarity                    */
N#define  TIM_BDTR_AOE                        ((uint16_t)0x4000)            /*!<Automatic Output enable           */
N#define  TIM_BDTR_MOE                        ((uint16_t)0x8000)            /*!<Main Output enable                */
N
N/*******************  Bit definition for TIM_DCR register  ********************/
N#define  TIM_DCR_DBA                         ((uint16_t)0x001F)            /*!<DBA[4:0] bits (DMA Base Address) */
N#define  TIM_DCR_DBA_0                       ((uint16_t)0x0001)            /*!<Bit 0 */
N#define  TIM_DCR_DBA_1                       ((uint16_t)0x0002)            /*!<Bit 1 */
N#define  TIM_DCR_DBA_2                       ((uint16_t)0x0004)            /*!<Bit 2 */
N#define  TIM_DCR_DBA_3                       ((uint16_t)0x0008)            /*!<Bit 3 */
N#define  TIM_DCR_DBA_4                       ((uint16_t)0x0010)            /*!<Bit 4 */
N
N#define  TIM_DCR_DBL                         ((uint16_t)0x1F00)            /*!<DBL[4:0] bits (DMA Burst Length) */
N#define  TIM_DCR_DBL_0                       ((uint16_t)0x0100)            /*!<Bit 0 */
N#define  TIM_DCR_DBL_1                       ((uint16_t)0x0200)            /*!<Bit 1 */
N#define  TIM_DCR_DBL_2                       ((uint16_t)0x0400)            /*!<Bit 2 */
N#define  TIM_DCR_DBL_3                       ((uint16_t)0x0800)            /*!<Bit 3 */
N#define  TIM_DCR_DBL_4                       ((uint16_t)0x1000)            /*!<Bit 4 */
N
N/*******************  Bit definition for TIM_DMAR register  *******************/
N#define  TIM_DMAR_DMAB                       ((uint16_t)0xFFFF)            /*!<DMA register for burst accesses                    */
N
N/*******************  Bit definition for TIM_OR register  *********************/
N#define TIM_OR_TI4_RMP                       ((uint16_t)0x00C0)            /*!<TI4_RMP[1:0] bits (TIM5 Input 4 remap)             */
N#define TIM_OR_TI4_RMP_0                     ((uint16_t)0x0040)            /*!<Bit 0 */
N#define TIM_OR_TI4_RMP_1                     ((uint16_t)0x0080)            /*!<Bit 1 */
N#define TIM_OR_ITR1_RMP                      ((uint16_t)0x0C00)            /*!<ITR1_RMP[1:0] bits (TIM2 Internal trigger 1 remap) */
N#define TIM_OR_ITR1_RMP_0                    ((uint16_t)0x0400)            /*!<Bit 0 */
N#define TIM_OR_ITR1_RMP_1                    ((uint16_t)0x0800)            /*!<Bit 1 */
N
N
N/******************************************************************************/
N/*                                                                            */
N/*         Universal Synchronous Asynchronous Receiver Transmitter            */
N/*                                                                            */
N/******************************************************************************/
N/*******************  Bit definition for USART_SR register  *******************/
N#define  USART_SR_PE                         ((uint16_t)0x0001)            /*!<Parity Error                 */
N#define  USART_SR_FE                         ((uint16_t)0x0002)            /*!<Framing Error                */
N#define  USART_SR_NE                         ((uint16_t)0x0004)            /*!<Noise Error Flag             */
N#define  USART_SR_ORE                        ((uint16_t)0x0008)            /*!<OverRun Error                */
N#define  USART_SR_IDLE                       ((uint16_t)0x0010)            /*!<IDLE line detected           */
N#define  USART_SR_RXNE                       ((uint16_t)0x0020)            /*!<Read Data Register Not Empty */
N#define  USART_SR_TC                         ((uint16_t)0x0040)            /*!<Transmission Complete        */
N#define  USART_SR_TXE                        ((uint16_t)0x0080)            /*!<Transmit Data Register Empty */
N#define  USART_SR_LBD                        ((uint16_t)0x0100)            /*!<LIN Break Detection Flag     */
N#define  USART_SR_CTS                        ((uint16_t)0x0200)            /*!<CTS Flag                     */
N
N/*******************  Bit definition for USART_DR register  *******************/
N#define  USART_DR_DR                         ((uint16_t)0x01FF)            /*!<Data value */
N
N/******************  Bit definition for USART_BRR register  *******************/
N#define  USART_BRR_DIV_Fraction              ((uint16_t)0x000F)            /*!<Fraction of USARTDIV */
N#define  USART_BRR_DIV_Mantissa              ((uint16_t)0xFFF0)            /*!<Mantissa of USARTDIV */
N
N/******************  Bit definition for USART_CR1 register  *******************/
N#define  USART_CR1_SBK                       ((uint16_t)0x0001)            /*!<Send Break                             */
N#define  USART_CR1_RWU                       ((uint16_t)0x0002)            /*!<Receiver wakeup                        */
N#define  USART_CR1_RE                        ((uint16_t)0x0004)            /*!<Receiver Enable                        */
N#define  USART_CR1_TE                        ((uint16_t)0x0008)            /*!<Transmitter Enable                     */
N#define  USART_CR1_IDLEIE                    ((uint16_t)0x0010)            /*!<IDLE Interrupt Enable                  */
N#define  USART_CR1_RXNEIE                    ((uint16_t)0x0020)            /*!<RXNE Interrupt Enable                  */
N#define  USART_CR1_TCIE                      ((uint16_t)0x0040)            /*!<Transmission Complete Interrupt Enable */
N#define  USART_CR1_TXEIE                     ((uint16_t)0x0080)            /*!<PE Interrupt Enable                    */
N#define  USART_CR1_PEIE                      ((uint16_t)0x0100)            /*!<PE Interrupt Enable                    */
N#define  USART_CR1_PS                        ((uint16_t)0x0200)            /*!<Parity Selection                       */
N#define  USART_CR1_PCE                       ((uint16_t)0x0400)            /*!<Parity Control Enable                  */
N#define  USART_CR1_WAKE                      ((uint16_t)0x0800)            /*!<Wakeup method                          */
N#define  USART_CR1_M                         ((uint16_t)0x1000)            /*!<Word length                            */
N#define  USART_CR1_UE                        ((uint16_t)0x2000)            /*!<USART Enable                           */
N#define  USART_CR1_OVER8                     ((uint16_t)0x8000)            /*!<USART Oversampling by 8 enable         */
N
N/******************  Bit definition for USART_CR2 register  *******************/
N#define  USART_CR2_ADD                       ((uint16_t)0x000F)            /*!<Address of the USART node            */
N#define  USART_CR2_LBDL                      ((uint16_t)0x0020)            /*!<LIN Break Detection Length           */
N#define  USART_CR2_LBDIE                     ((uint16_t)0x0040)            /*!<LIN Break Detection Interrupt Enable */
N#define  USART_CR2_LBCL                      ((uint16_t)0x0100)            /*!<Last Bit Clock pulse                 */
N#define  USART_CR2_CPHA                      ((uint16_t)0x0200)            /*!<Clock Phase                          */
N#define  USART_CR2_CPOL                      ((uint16_t)0x0400)            /*!<Clock Polarity                       */
N#define  USART_CR2_CLKEN                     ((uint16_t)0x0800)            /*!<Clock Enable                         */
N
N#define  USART_CR2_STOP                      ((uint16_t)0x3000)            /*!<STOP[1:0] bits (STOP bits) */
N#define  USART_CR2_STOP_0                    ((uint16_t)0x1000)            /*!<Bit 0 */
N#define  USART_CR2_STOP_1                    ((uint16_t)0x2000)            /*!<Bit 1 */
N
N#define  USART_CR2_LINEN                     ((uint16_t)0x4000)            /*!<LIN mode enable */
N
N/******************  Bit definition for USART_CR3 register  *******************/
N#define  USART_CR3_EIE                       ((uint16_t)0x0001)            /*!<Error Interrupt Enable      */
N#define  USART_CR3_IREN                      ((uint16_t)0x0002)            /*!<IrDA mode Enable            */
N#define  USART_CR3_IRLP                      ((uint16_t)0x0004)            /*!<IrDA Low-Power              */
N#define  USART_CR3_HDSEL                     ((uint16_t)0x0008)            /*!<Half-Duplex Selection       */
N#define  USART_CR3_NACK                      ((uint16_t)0x0010)            /*!<Smartcard NACK enable       */
N#define  USART_CR3_SCEN                      ((uint16_t)0x0020)            /*!<Smartcard mode enable       */
N#define  USART_CR3_DMAR                      ((uint16_t)0x0040)            /*!<DMA Enable Receiver         */
N#define  USART_CR3_DMAT                      ((uint16_t)0x0080)            /*!<DMA Enable Transmitter      */
N#define  USART_CR3_RTSE                      ((uint16_t)0x0100)            /*!<RTS Enable                  */
N#define  USART_CR3_CTSE                      ((uint16_t)0x0200)            /*!<CTS Enable                  */
N#define  USART_CR3_CTSIE                     ((uint16_t)0x0400)            /*!<CTS Interrupt Enable        */
N#define  USART_CR3_ONEBIT                    ((uint16_t)0x0800)            /*!<USART One bit method enable */
N
N/******************  Bit definition for USART_GTPR register  ******************/
N#define  USART_GTPR_PSC                      ((uint16_t)0x00FF)            /*!<PSC[7:0] bits (Prescaler value) */
N#define  USART_GTPR_PSC_0                    ((uint16_t)0x0001)            /*!<Bit 0 */
N#define  USART_GTPR_PSC_1                    ((uint16_t)0x0002)            /*!<Bit 1 */
N#define  USART_GTPR_PSC_2                    ((uint16_t)0x0004)            /*!<Bit 2 */
N#define  USART_GTPR_PSC_3                    ((uint16_t)0x0008)            /*!<Bit 3 */
N#define  USART_GTPR_PSC_4                    ((uint16_t)0x0010)            /*!<Bit 4 */
N#define  USART_GTPR_PSC_5                    ((uint16_t)0x0020)            /*!<Bit 5 */
N#define  USART_GTPR_PSC_6                    ((uint16_t)0x0040)            /*!<Bit 6 */
N#define  USART_GTPR_PSC_7                    ((uint16_t)0x0080)            /*!<Bit 7 */
N
N#define  USART_GTPR_GT                       ((uint16_t)0xFF00)            /*!<Guard time value */
N
N/******************************************************************************/
N/*                                                                            */
N/*                            Window WATCHDOG                                 */
N/*                                                                            */
N/******************************************************************************/
N/*******************  Bit definition for WWDG_CR register  ********************/
N#define  WWDG_CR_T                           ((uint8_t)0x7F)               /*!<T[6:0] bits (7-Bit counter (MSB to LSB)) */
N#define  WWDG_CR_T0                          ((uint8_t)0x01)               /*!<Bit 0 */
N#define  WWDG_CR_T1                          ((uint8_t)0x02)               /*!<Bit 1 */
N#define  WWDG_CR_T2                          ((uint8_t)0x04)               /*!<Bit 2 */
N#define  WWDG_CR_T3                          ((uint8_t)0x08)               /*!<Bit 3 */
N#define  WWDG_CR_T4                          ((uint8_t)0x10)               /*!<Bit 4 */
N#define  WWDG_CR_T5                          ((uint8_t)0x20)               /*!<Bit 5 */
N#define  WWDG_CR_T6                          ((uint8_t)0x40)               /*!<Bit 6 */
N
N#define  WWDG_CR_WDGA                        ((uint8_t)0x80)               /*!<Activation bit */
N
N/*******************  Bit definition for WWDG_CFR register  *******************/
N#define  WWDG_CFR_W                          ((uint16_t)0x007F)            /*!<W[6:0] bits (7-bit window value) */
N#define  WWDG_CFR_W0                         ((uint16_t)0x0001)            /*!<Bit 0 */
N#define  WWDG_CFR_W1                         ((uint16_t)0x0002)            /*!<Bit 1 */
N#define  WWDG_CFR_W2                         ((uint16_t)0x0004)            /*!<Bit 2 */
N#define  WWDG_CFR_W3                         ((uint16_t)0x0008)            /*!<Bit 3 */
N#define  WWDG_CFR_W4                         ((uint16_t)0x0010)            /*!<Bit 4 */
N#define  WWDG_CFR_W5                         ((uint16_t)0x0020)            /*!<Bit 5 */
N#define  WWDG_CFR_W6                         ((uint16_t)0x0040)            /*!<Bit 6 */
N
N#define  WWDG_CFR_WDGTB                      ((uint16_t)0x0180)            /*!<WDGTB[1:0] bits (Timer Base) */
N#define  WWDG_CFR_WDGTB0                     ((uint16_t)0x0080)            /*!<Bit 0 */
N#define  WWDG_CFR_WDGTB1                     ((uint16_t)0x0100)            /*!<Bit 1 */
N
N#define  WWDG_CFR_EWI                        ((uint16_t)0x0200)            /*!<Early Wakeup Interrupt */
N
N/*******************  Bit definition for WWDG_SR register  ********************/
N#define  WWDG_SR_EWIF                        ((uint8_t)0x01)               /*!<Early Wakeup Interrupt Flag */
N
N
N/******************************************************************************/
N/*                                                                            */
N/*                                DBG                                         */
N/*                                                                            */
N/******************************************************************************/
N/********************  Bit definition for DBGMCU_IDCODE register  *************/
N#define  DBGMCU_IDCODE_DEV_ID                ((uint32_t)0x00000FFF)
N#define  DBGMCU_IDCODE_REV_ID                ((uint32_t)0xFFFF0000)
N
N/********************  Bit definition for DBGMCU_CR register  *****************/
N#define  DBGMCU_CR_DBG_SLEEP                 ((uint32_t)0x00000001)
N#define  DBGMCU_CR_DBG_STOP                  ((uint32_t)0x00000002)
N#define  DBGMCU_CR_DBG_STANDBY               ((uint32_t)0x00000004)
N#define  DBGMCU_CR_TRACE_IOEN                ((uint32_t)0x00000020)
N
N#define  DBGMCU_CR_TRACE_MODE                ((uint32_t)0x000000C0)
N#define  DBGMCU_CR_TRACE_MODE_0              ((uint32_t)0x00000040)/*!<Bit 0 */
N#define  DBGMCU_CR_TRACE_MODE_1              ((uint32_t)0x00000080)/*!<Bit 1 */
N
N/********************  Bit definition for DBGMCU_APB1_FZ register  ************/
N#define  DBGMCU_APB1_FZ_DBG_TIM2_STOP            ((uint32_t)0x00000001)
N#define  DBGMCU_APB1_FZ_DBG_TIM3_STOP            ((uint32_t)0x00000002)
N#define  DBGMCU_APB1_FZ_DBG_TIM4_STOP            ((uint32_t)0x00000004)
N#define  DBGMCU_APB1_FZ_DBG_TIM5_STOP            ((uint32_t)0x00000008)
N#define  DBGMCU_APB1_FZ_DBG_TIM6_STOP            ((uint32_t)0x00000010)
N#define  DBGMCU_APB1_FZ_DBG_TIM7_STOP            ((uint32_t)0x00000020)
N#define  DBGMCU_APB1_FZ_DBG_TIM12_STOP           ((uint32_t)0x00000040)
N#define  DBGMCU_APB1_FZ_DBG_TIM13_STOP           ((uint32_t)0x00000080)
N#define  DBGMCU_APB1_FZ_DBG_TIM14_STOP           ((uint32_t)0x00000100)
N#define  DBGMCU_APB1_FZ_DBG_RTC_STOP             ((uint32_t)0x00000400)
N#define  DBGMCU_APB1_FZ_DBG_WWDG_STOP            ((uint32_t)0x00000800)
N#define  DBGMCU_APB1_FZ_DBG_IWDG_STOP            ((uint32_t)0x00001000)
N#define  DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT   ((uint32_t)0x00200000)
N#define  DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT   ((uint32_t)0x00400000)
N#define  DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT   ((uint32_t)0x00800000)
N#define  DBGMCU_APB1_FZ_DBG_CAN1_STOP            ((uint32_t)0x02000000)
N#define  DBGMCU_APB1_FZ_DBG_CAN2_STOP            ((uint32_t)0x04000000)
N/* Old IWDGSTOP bit definition, maintained for legacy purpose */
N#define  DBGMCU_APB1_FZ_DBG_IWDEG_STOP           DBGMCU_APB1_FZ_DBG_IWDG_STOP
N
N/********************  Bit definition for DBGMCU_APB1_FZ register  ************/
N#define  DBGMCU_APB1_FZ_DBG_TIM1_STOP        ((uint32_t)0x00000001)
N#define  DBGMCU_APB1_FZ_DBG_TIM8_STOP        ((uint32_t)0x00000002)
N#define  DBGMCU_APB1_FZ_DBG_TIM9_STOP        ((uint32_t)0x00010000)
N#define  DBGMCU_APB1_FZ_DBG_TIM10_STOP       ((uint32_t)0x00020000)
N#define  DBGMCU_APB1_FZ_DBG_TIM11_STOP       ((uint32_t)0x00040000)
N
N/******************************************************************************/
N/*                                                                            */
N/*                Ethernet MAC Registers bits definitions                     */
N/*                                                                            */
N/******************************************************************************/
N/* Bit definition for Ethernet MAC Control Register register */
N#define ETH_MACCR_WD      ((uint32_t)0x00800000)  /* Watchdog disable */
N#define ETH_MACCR_JD      ((uint32_t)0x00400000)  /* Jabber disable */
N#define ETH_MACCR_IFG     ((uint32_t)0x000E0000)  /* Inter-frame gap */
N#define ETH_MACCR_IFG_96Bit     ((uint32_t)0x00000000)  /* Minimum IFG between frames during transmission is 96Bit */
N  #define ETH_MACCR_IFG_88Bit     ((uint32_t)0x00020000)  /* Minimum IFG between frames during transmission is 88Bit */
N  #define ETH_MACCR_IFG_80Bit     ((uint32_t)0x00040000)  /* Minimum IFG between frames during transmission is 80Bit */
N  #define ETH_MACCR_IFG_72Bit     ((uint32_t)0x00060000)  /* Minimum IFG between frames during transmission is 72Bit */
N  #define ETH_MACCR_IFG_64Bit     ((uint32_t)0x00080000)  /* Minimum IFG between frames during transmission is 64Bit */        
N  #define ETH_MACCR_IFG_56Bit     ((uint32_t)0x000A0000)  /* Minimum IFG between frames during transmission is 56Bit */
N  #define ETH_MACCR_IFG_48Bit     ((uint32_t)0x000C0000)  /* Minimum IFG between frames during transmission is 48Bit */
N  #define ETH_MACCR_IFG_40Bit     ((uint32_t)0x000E0000)  /* Minimum IFG between frames during transmission is 40Bit */              
N#define ETH_MACCR_CSD     ((uint32_t)0x00010000)  /* Carrier sense disable (during transmission) */
N#define ETH_MACCR_FES     ((uint32_t)0x00004000)  /* Fast ethernet speed */
N#define ETH_MACCR_ROD     ((uint32_t)0x00002000)  /* Receive own disable */
N#define ETH_MACCR_LM      ((uint32_t)0x00001000)  /* loopback mode */
N#define ETH_MACCR_DM      ((uint32_t)0x00000800)  /* Duplex mode */
N#define ETH_MACCR_IPCO    ((uint32_t)0x00000400)  /* IP Checksum offload */
N#define ETH_MACCR_RD      ((uint32_t)0x00000200)  /* Retry disable */
N#define ETH_MACCR_APCS    ((uint32_t)0x00000080)  /* Automatic Pad/CRC stripping */
N#define ETH_MACCR_BL      ((uint32_t)0x00000060)  /* Back-off limit: random integer number (r) of slot time delays before rescheduling
N                                                       a transmission attempt during retries after a collision: 0 =< r <2^k */
N  #define ETH_MACCR_BL_10    ((uint32_t)0x00000000)  /* k = min (n, 10) */
N  #define ETH_MACCR_BL_8     ((uint32_t)0x00000020)  /* k = min (n, 8) */
N  #define ETH_MACCR_BL_4     ((uint32_t)0x00000040)  /* k = min (n, 4) */
N  #define ETH_MACCR_BL_1     ((uint32_t)0x00000060)  /* k = min (n, 1) */ 
N#define ETH_MACCR_DC      ((uint32_t)0x00000010)  /* Defferal check */
N#define ETH_MACCR_TE      ((uint32_t)0x00000008)  /* Transmitter enable */
N#define ETH_MACCR_RE      ((uint32_t)0x00000004)  /* Receiver enable */
N
N/* Bit definition for Ethernet MAC Frame Filter Register */
N#define ETH_MACFFR_RA     ((uint32_t)0x80000000)  /* Receive all */ 
N#define ETH_MACFFR_HPF    ((uint32_t)0x00000400)  /* Hash or perfect filter */ 
N#define ETH_MACFFR_SAF    ((uint32_t)0x00000200)  /* Source address filter enable */ 
N#define ETH_MACFFR_SAIF   ((uint32_t)0x00000100)  /* SA inverse filtering */ 
N#define ETH_MACFFR_PCF    ((uint32_t)0x000000C0)  /* Pass control frames: 3 cases */
N  #define ETH_MACFFR_PCF_BlockAll                ((uint32_t)0x00000040)  /* MAC filters all control frames from reaching the application */
N  #define ETH_MACFFR_PCF_ForwardAll              ((uint32_t)0x00000080)  /* MAC forwards all control frames to application even if they fail the Address Filter */
N  #define ETH_MACFFR_PCF_ForwardPassedAddrFilter ((uint32_t)0x000000C0)  /* MAC forwards control frames that pass the Address Filter. */ 
N#define ETH_MACFFR_BFD    ((uint32_t)0x00000020)  /* Broadcast frame disable */ 
N#define ETH_MACFFR_PAM    ((uint32_t)0x00000010)  /* Pass all mutlicast */ 
N#define ETH_MACFFR_DAIF   ((uint32_t)0x00000008)  /* DA Inverse filtering */ 
N#define ETH_MACFFR_HM     ((uint32_t)0x00000004)  /* Hash multicast */ 
N#define ETH_MACFFR_HU     ((uint32_t)0x00000002)  /* Hash unicast */
N#define ETH_MACFFR_PM     ((uint32_t)0x00000001)  /* Promiscuous mode */
N
N/* Bit definition for Ethernet MAC Hash Table High Register */
N#define ETH_MACHTHR_HTH   ((uint32_t)0xFFFFFFFF)  /* Hash table high */
N
N/* Bit definition for Ethernet MAC Hash Table Low Register */
N#define ETH_MACHTLR_HTL   ((uint32_t)0xFFFFFFFF)  /* Hash table low */
N
N/* Bit definition for Ethernet MAC MII Address Register */
N#define ETH_MACMIIAR_PA   ((uint32_t)0x0000F800)  /* Physical layer address */ 
N#define ETH_MACMIIAR_MR   ((uint32_t)0x000007C0)  /* MII register in the selected PHY */ 
N#define ETH_MACMIIAR_CR   ((uint32_t)0x0000001C)  /* CR clock range: 6 cases */ 
N  #define ETH_MACMIIAR_CR_Div42   ((uint32_t)0x00000000)  /* HCLK:60-100 MHz; MDC clock= HCLK/42 */
N  #define ETH_MACMIIAR_CR_Div62   ((uint32_t)0x00000004)  /* HCLK:100-150 MHz; MDC clock= HCLK/62 */
N  #define ETH_MACMIIAR_CR_Div16   ((uint32_t)0x00000008)  /* HCLK:20-35 MHz; MDC clock= HCLK/16 */
N  #define ETH_MACMIIAR_CR_Div26   ((uint32_t)0x0000000C)  /* HCLK:35-60 MHz; MDC clock= HCLK/26 */
N  #define ETH_MACMIIAR_CR_Div102  ((uint32_t)0x00000010)  /* HCLK:150-168 MHz; MDC clock= HCLK/102 */  
N#define ETH_MACMIIAR_MW   ((uint32_t)0x00000002)  /* MII write */ 
N#define ETH_MACMIIAR_MB   ((uint32_t)0x00000001)  /* MII busy */ 
N  
N/* Bit definition for Ethernet MAC MII Data Register */
N#define ETH_MACMIIDR_MD   ((uint32_t)0x0000FFFF)  /* MII data: read/write data from/to PHY */
N
N/* Bit definition for Ethernet MAC Flow Control Register */
N#define ETH_MACFCR_PT     ((uint32_t)0xFFFF0000)  /* Pause time */
N#define ETH_MACFCR_ZQPD   ((uint32_t)0x00000080)  /* Zero-quanta pause disable */
N#define ETH_MACFCR_PLT    ((uint32_t)0x00000030)  /* Pause low threshold: 4 cases */
N  #define ETH_MACFCR_PLT_Minus4   ((uint32_t)0x00000000)  /* Pause time minus 4 slot times */
N  #define ETH_MACFCR_PLT_Minus28  ((uint32_t)0x00000010)  /* Pause time minus 28 slot times */
N  #define ETH_MACFCR_PLT_Minus144 ((uint32_t)0x00000020)  /* Pause time minus 144 slot times */
N  #define ETH_MACFCR_PLT_Minus256 ((uint32_t)0x00000030)  /* Pause time minus 256 slot times */      
N#define ETH_MACFCR_UPFD   ((uint32_t)0x00000008)  /* Unicast pause frame detect */
N#define ETH_MACFCR_RFCE   ((uint32_t)0x00000004)  /* Receive flow control enable */
N#define ETH_MACFCR_TFCE   ((uint32_t)0x00000002)  /* Transmit flow control enable */
N#define ETH_MACFCR_FCBBPA ((uint32_t)0x00000001)  /* Flow control busy/backpressure activate */
N
N/* Bit definition for Ethernet MAC VLAN Tag Register */
N#define ETH_MACVLANTR_VLANTC ((uint32_t)0x00010000)  /* 12-bit VLAN tag comparison */
N#define ETH_MACVLANTR_VLANTI ((uint32_t)0x0000FFFF)  /* VLAN tag identifier (for receive frames) */
N
N/* Bit definition for Ethernet MAC Remote Wake-UpFrame Filter Register */ 
N#define ETH_MACRWUFFR_D   ((uint32_t)0xFFFFFFFF)  /* Wake-up frame filter register data */
N/* Eight sequential Writes to this address (offset 0x28) will write all Wake-UpFrame Filter Registers.
N   Eight sequential Reads from this address (offset 0x28) will read all Wake-UpFrame Filter Registers. */
N/* Wake-UpFrame Filter Reg0 : Filter 0 Byte Mask
N   Wake-UpFrame Filter Reg1 : Filter 1 Byte Mask
N   Wake-UpFrame Filter Reg2 : Filter 2 Byte Mask
N   Wake-UpFrame Filter Reg3 : Filter 3 Byte Mask
N   Wake-UpFrame Filter Reg4 : RSVD - Filter3 Command - RSVD - Filter2 Command - 
N                              RSVD - Filter1 Command - RSVD - Filter0 Command
N   Wake-UpFrame Filter Re5 : Filter3 Offset - Filter2 Offset - Filter1 Offset - Filter0 Offset
N   Wake-UpFrame Filter Re6 : Filter1 CRC16 - Filter0 CRC16
N   Wake-UpFrame Filter Re7 : Filter3 CRC16 - Filter2 CRC16 */
N
N/* Bit definition for Ethernet MAC PMT Control and Status Register */ 
N#define ETH_MACPMTCSR_WFFRPR ((uint32_t)0x80000000)  /* Wake-Up Frame Filter Register Pointer Reset */
N#define ETH_MACPMTCSR_GU     ((uint32_t)0x00000200)  /* Global Unicast */
N#define ETH_MACPMTCSR_WFR    ((uint32_t)0x00000040)  /* Wake-Up Frame Received */
N#define ETH_MACPMTCSR_MPR    ((uint32_t)0x00000020)  /* Magic Packet Received */
N#define ETH_MACPMTCSR_WFE    ((uint32_t)0x00000004)  /* Wake-Up Frame Enable */
N#define ETH_MACPMTCSR_MPE    ((uint32_t)0x00000002)  /* Magic Packet Enable */
N#define ETH_MACPMTCSR_PD     ((uint32_t)0x00000001)  /* Power Down */
N
N/* Bit definition for Ethernet MAC Status Register */
N#define ETH_MACSR_TSTS      ((uint32_t)0x00000200)  /* Time stamp trigger status */
N#define ETH_MACSR_MMCTS     ((uint32_t)0x00000040)  /* MMC transmit status */
N#define ETH_MACSR_MMMCRS    ((uint32_t)0x00000020)  /* MMC receive status */
N#define ETH_MACSR_MMCS      ((uint32_t)0x00000010)  /* MMC status */
N#define ETH_MACSR_PMTS      ((uint32_t)0x00000008)  /* PMT status */
N
N/* Bit definition for Ethernet MAC Interrupt Mask Register */
N#define ETH_MACIMR_TSTIM     ((uint32_t)0x00000200)  /* Time stamp trigger interrupt mask */
N#define ETH_MACIMR_PMTIM     ((uint32_t)0x00000008)  /* PMT interrupt mask */
N
N/* Bit definition for Ethernet MAC Address0 High Register */
N#define ETH_MACA0HR_MACA0H   ((uint32_t)0x0000FFFF)  /* MAC address0 high */
N
N/* Bit definition for Ethernet MAC Address0 Low Register */
N#define ETH_MACA0LR_MACA0L   ((uint32_t)0xFFFFFFFF)  /* MAC address0 low */
N
N/* Bit definition for Ethernet MAC Address1 High Register */
N#define ETH_MACA1HR_AE       ((uint32_t)0x80000000)  /* Address enable */
N#define ETH_MACA1HR_SA       ((uint32_t)0x40000000)  /* Source address */
N#define ETH_MACA1HR_MBC      ((uint32_t)0x3F000000)  /* Mask byte control: bits to mask for comparison of the MAC Address bytes */
N  #define ETH_MACA1HR_MBC_HBits15_8    ((uint32_t)0x20000000)  /* Mask MAC Address high reg bits [15:8] */
N  #define ETH_MACA1HR_MBC_HBits7_0     ((uint32_t)0x10000000)  /* Mask MAC Address high reg bits [7:0] */
N  #define ETH_MACA1HR_MBC_LBits31_24   ((uint32_t)0x08000000)  /* Mask MAC Address low reg bits [31:24] */
N  #define ETH_MACA1HR_MBC_LBits23_16   ((uint32_t)0x04000000)  /* Mask MAC Address low reg bits [23:16] */
N  #define ETH_MACA1HR_MBC_LBits15_8    ((uint32_t)0x02000000)  /* Mask MAC Address low reg bits [15:8] */
N  #define ETH_MACA1HR_MBC_LBits7_0     ((uint32_t)0x01000000)  /* Mask MAC Address low reg bits [7:0] */ 
N#define ETH_MACA1HR_MACA1H   ((uint32_t)0x0000FFFF)  /* MAC address1 high */
N
N/* Bit definition for Ethernet MAC Address1 Low Register */
N#define ETH_MACA1LR_MACA1L   ((uint32_t)0xFFFFFFFF)  /* MAC address1 low */
N
N/* Bit definition for Ethernet MAC Address2 High Register */
N#define ETH_MACA2HR_AE       ((uint32_t)0x80000000)  /* Address enable */
N#define ETH_MACA2HR_SA       ((uint32_t)0x40000000)  /* Source address */
N#define ETH_MACA2HR_MBC      ((uint32_t)0x3F000000)  /* Mask byte control */
N  #define ETH_MACA2HR_MBC_HBits15_8    ((uint32_t)0x20000000)  /* Mask MAC Address high reg bits [15:8] */
N  #define ETH_MACA2HR_MBC_HBits7_0     ((uint32_t)0x10000000)  /* Mask MAC Address high reg bits [7:0] */
N  #define ETH_MACA2HR_MBC_LBits31_24   ((uint32_t)0x08000000)  /* Mask MAC Address low reg bits [31:24] */
N  #define ETH_MACA2HR_MBC_LBits23_16   ((uint32_t)0x04000000)  /* Mask MAC Address low reg bits [23:16] */
N  #define ETH_MACA2HR_MBC_LBits15_8    ((uint32_t)0x02000000)  /* Mask MAC Address low reg bits [15:8] */
N  #define ETH_MACA2HR_MBC_LBits7_0     ((uint32_t)0x01000000)  /* Mask MAC Address low reg bits [70] */
N#define ETH_MACA2HR_MACA2H   ((uint32_t)0x0000FFFF)  /* MAC address1 high */
N
N/* Bit definition for Ethernet MAC Address2 Low Register */
N#define ETH_MACA2LR_MACA2L   ((uint32_t)0xFFFFFFFF)  /* MAC address2 low */
N
N/* Bit definition for Ethernet MAC Address3 High Register */
N#define ETH_MACA3HR_AE       ((uint32_t)0x80000000)  /* Address enable */
N#define ETH_MACA3HR_SA       ((uint32_t)0x40000000)  /* Source address */
N#define ETH_MACA3HR_MBC      ((uint32_t)0x3F000000)  /* Mask byte control */
N  #define ETH_MACA3HR_MBC_HBits15_8    ((uint32_t)0x20000000)  /* Mask MAC Address high reg bits [15:8] */
N  #define ETH_MACA3HR_MBC_HBits7_0     ((uint32_t)0x10000000)  /* Mask MAC Address high reg bits [7:0] */
N  #define ETH_MACA3HR_MBC_LBits31_24   ((uint32_t)0x08000000)  /* Mask MAC Address low reg bits [31:24] */
N  #define ETH_MACA3HR_MBC_LBits23_16   ((uint32_t)0x04000000)  /* Mask MAC Address low reg bits [23:16] */
N  #define ETH_MACA3HR_MBC_LBits15_8    ((uint32_t)0x02000000)  /* Mask MAC Address low reg bits [15:8] */
N  #define ETH_MACA3HR_MBC_LBits7_0     ((uint32_t)0x01000000)  /* Mask MAC Address low reg bits [70] */
N#define ETH_MACA3HR_MACA3H   ((uint32_t)0x0000FFFF)  /* MAC address3 high */
N
N/* Bit definition for Ethernet MAC Address3 Low Register */
N#define ETH_MACA3LR_MACA3L   ((uint32_t)0xFFFFFFFF)  /* MAC address3 low */
N
N/******************************************************************************/
N/*                Ethernet MMC Registers bits definition                      */
N/******************************************************************************/
N
N/* Bit definition for Ethernet MMC Contol Register */
N#define ETH_MMCCR_MCFHP      ((uint32_t)0x00000020)  /* MMC counter Full-Half preset */
N#define ETH_MMCCR_MCP        ((uint32_t)0x00000010)  /* MMC counter preset */
N#define ETH_MMCCR_MCF        ((uint32_t)0x00000008)  /* MMC Counter Freeze */
N#define ETH_MMCCR_ROR        ((uint32_t)0x00000004)  /* Reset on Read */
N#define ETH_MMCCR_CSR        ((uint32_t)0x00000002)  /* Counter Stop Rollover */
N#define ETH_MMCCR_CR         ((uint32_t)0x00000001)  /* Counters Reset */
N
N/* Bit definition for Ethernet MMC Receive Interrupt Register */
N#define ETH_MMCRIR_RGUFS     ((uint32_t)0x00020000)  /* Set when Rx good unicast frames counter reaches half the maximum value */
N#define ETH_MMCRIR_RFAES     ((uint32_t)0x00000040)  /* Set when Rx alignment error counter reaches half the maximum value */
N#define ETH_MMCRIR_RFCES     ((uint32_t)0x00000020)  /* Set when Rx crc error counter reaches half the maximum value */
N
N/* Bit definition for Ethernet MMC Transmit Interrupt Register */
N#define ETH_MMCTIR_TGFS      ((uint32_t)0x00200000)  /* Set when Tx good frame count counter reaches half the maximum value */
N#define ETH_MMCTIR_TGFMSCS   ((uint32_t)0x00008000)  /* Set when Tx good multi col counter reaches half the maximum value */
N#define ETH_MMCTIR_TGFSCS    ((uint32_t)0x00004000)  /* Set when Tx good single col counter reaches half the maximum value */
N
N/* Bit definition for Ethernet MMC Receive Interrupt Mask Register */
N#define ETH_MMCRIMR_RGUFM    ((uint32_t)0x00020000)  /* Mask the interrupt when Rx good unicast frames counter reaches half the maximum value */
N#define ETH_MMCRIMR_RFAEM    ((uint32_t)0x00000040)  /* Mask the interrupt when when Rx alignment error counter reaches half the maximum value */
N#define ETH_MMCRIMR_RFCEM    ((uint32_t)0x00000020)  /* Mask the interrupt when Rx crc error counter reaches half the maximum value */
N
N/* Bit definition for Ethernet MMC Transmit Interrupt Mask Register */
N#define ETH_MMCTIMR_TGFM     ((uint32_t)0x00200000)  /* Mask the interrupt when Tx good frame count counter reaches half the maximum value */
N#define ETH_MMCTIMR_TGFMSCM  ((uint32_t)0x00008000)  /* Mask the interrupt when Tx good multi col counter reaches half the maximum value */
N#define ETH_MMCTIMR_TGFSCM   ((uint32_t)0x00004000)  /* Mask the interrupt when Tx good single col counter reaches half the maximum value */
N
N/* Bit definition for Ethernet MMC Transmitted Good Frames after Single Collision Counter Register */
N#define ETH_MMCTGFSCCR_TGFSCC     ((uint32_t)0xFFFFFFFF)  /* Number of successfully transmitted frames after a single collision in Half-duplex mode. */
N
N/* Bit definition for Ethernet MMC Transmitted Good Frames after More than a Single Collision Counter Register */
N#define ETH_MMCTGFMSCCR_TGFMSCC   ((uint32_t)0xFFFFFFFF)  /* Number of successfully transmitted frames after more than a single collision in Half-duplex mode. */
N
N/* Bit definition for Ethernet MMC Transmitted Good Frames Counter Register */
N#define ETH_MMCTGFCR_TGFC    ((uint32_t)0xFFFFFFFF)  /* Number of good frames transmitted. */
N
N/* Bit definition for Ethernet MMC Received Frames with CRC Error Counter Register */
N#define ETH_MMCRFCECR_RFCEC  ((uint32_t)0xFFFFFFFF)  /* Number of frames received with CRC error. */
N
N/* Bit definition for Ethernet MMC Received Frames with Alignement Error Counter Register */
N#define ETH_MMCRFAECR_RFAEC  ((uint32_t)0xFFFFFFFF)  /* Number of frames received with alignment (dribble) error */
N
N/* Bit definition for Ethernet MMC Received Good Unicast Frames Counter Register */
N#define ETH_MMCRGUFCR_RGUFC  ((uint32_t)0xFFFFFFFF)  /* Number of good unicast frames received. */
N
N/******************************************************************************/
N/*               Ethernet PTP Registers bits definition                       */
N/******************************************************************************/
N
N/* Bit definition for Ethernet PTP Time Stamp Contol Register */
N#define ETH_PTPTSCR_TSCNT       ((uint32_t)0x00030000)  /* Time stamp clock node type */
N#define ETH_PTPTSSR_TSSMRME     ((uint32_t)0x00008000)  /* Time stamp snapshot for message relevant to master enable */
N#define ETH_PTPTSSR_TSSEME      ((uint32_t)0x00004000)  /* Time stamp snapshot for event message enable */
N#define ETH_PTPTSSR_TSSIPV4FE   ((uint32_t)0x00002000)  /* Time stamp snapshot for IPv4 frames enable */
N#define ETH_PTPTSSR_TSSIPV6FE   ((uint32_t)0x00001000)  /* Time stamp snapshot for IPv6 frames enable */
N#define ETH_PTPTSSR_TSSPTPOEFE  ((uint32_t)0x00000800)  /* Time stamp snapshot for PTP over ethernet frames enable */
N#define ETH_PTPTSSR_TSPTPPSV2E  ((uint32_t)0x00000400)  /* Time stamp PTP packet snooping for version2 format enable */
N#define ETH_PTPTSSR_TSSSR       ((uint32_t)0x00000200)  /* Time stamp Sub-seconds rollover */
N#define ETH_PTPTSSR_TSSARFE     ((uint32_t)0x00000100)  /* Time stamp snapshot for all received frames enable */
N
N#define ETH_PTPTSCR_TSARU    ((uint32_t)0x00000020)  /* Addend register update */
N#define ETH_PTPTSCR_TSITE    ((uint32_t)0x00000010)  /* Time stamp interrupt trigger enable */
N#define ETH_PTPTSCR_TSSTU    ((uint32_t)0x00000008)  /* Time stamp update */
N#define ETH_PTPTSCR_TSSTI    ((uint32_t)0x00000004)  /* Time stamp initialize */
N#define ETH_PTPTSCR_TSFCU    ((uint32_t)0x00000002)  /* Time stamp fine or coarse update */
N#define ETH_PTPTSCR_TSE      ((uint32_t)0x00000001)  /* Time stamp enable */
N
N/* Bit definition for Ethernet PTP Sub-Second Increment Register */
N#define ETH_PTPSSIR_STSSI    ((uint32_t)0x000000FF)  /* System time Sub-second increment value */
N
N/* Bit definition for Ethernet PTP Time Stamp High Register */
N#define ETH_PTPTSHR_STS      ((uint32_t)0xFFFFFFFF)  /* System Time second */
N
N/* Bit definition for Ethernet PTP Time Stamp Low Register */
N#define ETH_PTPTSLR_STPNS    ((uint32_t)0x80000000)  /* System Time Positive or negative time */
N#define ETH_PTPTSLR_STSS     ((uint32_t)0x7FFFFFFF)  /* System Time sub-seconds */
N
N/* Bit definition for Ethernet PTP Time Stamp High Update Register */
N#define ETH_PTPTSHUR_TSUS    ((uint32_t)0xFFFFFFFF)  /* Time stamp update seconds */
N
N/* Bit definition for Ethernet PTP Time Stamp Low Update Register */
N#define ETH_PTPTSLUR_TSUPNS  ((uint32_t)0x80000000)  /* Time stamp update Positive or negative time */
N#define ETH_PTPTSLUR_TSUSS   ((uint32_t)0x7FFFFFFF)  /* Time stamp update sub-seconds */
N
N/* Bit definition for Ethernet PTP Time Stamp Addend Register */
N#define ETH_PTPTSAR_TSA      ((uint32_t)0xFFFFFFFF)  /* Time stamp addend */
N
N/* Bit definition for Ethernet PTP Target Time High Register */
N#define ETH_PTPTTHR_TTSH     ((uint32_t)0xFFFFFFFF)  /* Target time stamp high */
N
N/* Bit definition for Ethernet PTP Target Time Low Register */
N#define ETH_PTPTTLR_TTSL     ((uint32_t)0xFFFFFFFF)  /* Target time stamp low */
N
N/* Bit definition for Ethernet PTP Time Stamp Status Register */
N#define ETH_PTPTSSR_TSTTR    ((uint32_t)0x00000020)  /* Time stamp target time reached */
N#define ETH_PTPTSSR_TSSO     ((uint32_t)0x00000010)  /* Time stamp seconds overflow */
N
N/******************************************************************************/
N/*                 Ethernet DMA Registers bits definition                     */
N/******************************************************************************/
N
N/* Bit definition for Ethernet DMA Bus Mode Register */
N#define ETH_DMABMR_AAB       ((uint32_t)0x02000000)  /* Address-Aligned beats */
N#define ETH_DMABMR_FPM        ((uint32_t)0x01000000)  /* 4xPBL mode */
N#define ETH_DMABMR_USP       ((uint32_t)0x00800000)  /* Use separate PBL */
N#define ETH_DMABMR_RDP       ((uint32_t)0x007E0000)  /* RxDMA PBL */
N  #define ETH_DMABMR_RDP_1Beat    ((uint32_t)0x00020000)  /* maximum number of beats to be transferred in one RxDMA transaction is 1 */
N  #define ETH_DMABMR_RDP_2Beat    ((uint32_t)0x00040000)  /* maximum number of beats to be transferred in one RxDMA transaction is 2 */
N  #define ETH_DMABMR_RDP_4Beat    ((uint32_t)0x00080000)  /* maximum number of beats to be transferred in one RxDMA transaction is 4 */
N  #define ETH_DMABMR_RDP_8Beat    ((uint32_t)0x00100000)  /* maximum number of beats to be transferred in one RxDMA transaction is 8 */
N  #define ETH_DMABMR_RDP_16Beat   ((uint32_t)0x00200000)  /* maximum number of beats to be transferred in one RxDMA transaction is 16 */
N  #define ETH_DMABMR_RDP_32Beat   ((uint32_t)0x00400000)  /* maximum number of beats to be transferred in one RxDMA transaction is 32 */                
N  #define ETH_DMABMR_RDP_4xPBL_4Beat   ((uint32_t)0x01020000)  /* maximum number of beats to be transferred in one RxDMA transaction is 4 */
N  #define ETH_DMABMR_RDP_4xPBL_8Beat   ((uint32_t)0x01040000)  /* maximum number of beats to be transferred in one RxDMA transaction is 8 */
N  #define ETH_DMABMR_RDP_4xPBL_16Beat  ((uint32_t)0x01080000)  /* maximum number of beats to be transferred in one RxDMA transaction is 16 */
N  #define ETH_DMABMR_RDP_4xPBL_32Beat  ((uint32_t)0x01100000)  /* maximum number of beats to be transferred in one RxDMA transaction is 32 */
N  #define ETH_DMABMR_RDP_4xPBL_64Beat  ((uint32_t)0x01200000)  /* maximum number of beats to be transferred in one RxDMA transaction is 64 */
N  #define ETH_DMABMR_RDP_4xPBL_128Beat ((uint32_t)0x01400000)  /* maximum number of beats to be transferred in one RxDMA transaction is 128 */  
N#define ETH_DMABMR_FB        ((uint32_t)0x00010000)  /* Fixed Burst */
N#define ETH_DMABMR_RTPR      ((uint32_t)0x0000C000)  /* Rx Tx priority ratio */
N  #define ETH_DMABMR_RTPR_1_1     ((uint32_t)0x00000000)  /* Rx Tx priority ratio */
N  #define ETH_DMABMR_RTPR_2_1     ((uint32_t)0x00004000)  /* Rx Tx priority ratio */
N  #define ETH_DMABMR_RTPR_3_1     ((uint32_t)0x00008000)  /* Rx Tx priority ratio */
N  #define ETH_DMABMR_RTPR_4_1     ((uint32_t)0x0000C000)  /* Rx Tx priority ratio */  
N#define ETH_DMABMR_PBL    ((uint32_t)0x00003F00)  /* Programmable burst length */
N  #define ETH_DMABMR_PBL_1Beat    ((uint32_t)0x00000100)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 1 */
N  #define ETH_DMABMR_PBL_2Beat    ((uint32_t)0x00000200)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 2 */
N  #define ETH_DMABMR_PBL_4Beat    ((uint32_t)0x00000400)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 4 */
N  #define ETH_DMABMR_PBL_8Beat    ((uint32_t)0x00000800)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 8 */
N  #define ETH_DMABMR_PBL_16Beat   ((uint32_t)0x00001000)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 16 */
N  #define ETH_DMABMR_PBL_32Beat   ((uint32_t)0x00002000)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 32 */                
N  #define ETH_DMABMR_PBL_4xPBL_4Beat   ((uint32_t)0x01000100)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 4 */
N  #define ETH_DMABMR_PBL_4xPBL_8Beat   ((uint32_t)0x01000200)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 8 */
N  #define ETH_DMABMR_PBL_4xPBL_16Beat  ((uint32_t)0x01000400)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 16 */
N  #define ETH_DMABMR_PBL_4xPBL_32Beat  ((uint32_t)0x01000800)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 32 */
N  #define ETH_DMABMR_PBL_4xPBL_64Beat  ((uint32_t)0x01001000)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 64 */
N  #define ETH_DMABMR_PBL_4xPBL_128Beat ((uint32_t)0x01002000)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 128 */
N#define ETH_DMABMR_EDE       ((uint32_t)0x00000080)  /* Enhanced Descriptor Enable */
N#define ETH_DMABMR_DSL       ((uint32_t)0x0000007C)  /* Descriptor Skip Length */
N#define ETH_DMABMR_DA        ((uint32_t)0x00000002)  /* DMA arbitration scheme */
N#define ETH_DMABMR_SR        ((uint32_t)0x00000001)  /* Software reset */
N
N/* Bit definition for Ethernet DMA Transmit Poll Demand Register */
N#define ETH_DMATPDR_TPD      ((uint32_t)0xFFFFFFFF)  /* Transmit poll demand */
N
N/* Bit definition for Ethernet DMA Receive Poll Demand Register */
N#define ETH_DMARPDR_RPD      ((uint32_t)0xFFFFFFFF)  /* Receive poll demand  */
N
N/* Bit definition for Ethernet DMA Receive Descriptor List Address Register */
N#define ETH_DMARDLAR_SRL     ((uint32_t)0xFFFFFFFF)  /* Start of receive list */
N
N/* Bit definition for Ethernet DMA Transmit Descriptor List Address Register */
N#define ETH_DMATDLAR_STL     ((uint32_t)0xFFFFFFFF)  /* Start of transmit list */
N
N/* Bit definition for Ethernet DMA Status Register */
N#define ETH_DMASR_TSTS       ((uint32_t)0x20000000)  /* Time-stamp trigger status */
N#define ETH_DMASR_PMTS       ((uint32_t)0x10000000)  /* PMT status */
N#define ETH_DMASR_MMCS       ((uint32_t)0x08000000)  /* MMC status */
N#define ETH_DMASR_EBS        ((uint32_t)0x03800000)  /* Error bits status */
N  /* combination with EBS[2:0] for GetFlagStatus function */
N  #define ETH_DMASR_EBS_DescAccess      ((uint32_t)0x02000000)  /* Error bits 0-data buffer, 1-desc. access */
N  #define ETH_DMASR_EBS_ReadTransf      ((uint32_t)0x01000000)  /* Error bits 0-write trnsf, 1-read transfr */
N  #define ETH_DMASR_EBS_DataTransfTx    ((uint32_t)0x00800000)  /* Error bits 0-Rx DMA, 1-Tx DMA */
N#define ETH_DMASR_TPS         ((uint32_t)0x00700000)  /* Transmit process state */
N  #define ETH_DMASR_TPS_Stopped         ((uint32_t)0x00000000)  /* Stopped - Reset or Stop Tx Command issued  */
N  #define ETH_DMASR_TPS_Fetching        ((uint32_t)0x00100000)  /* Running - fetching the Tx descriptor */
N  #define ETH_DMASR_TPS_Waiting         ((uint32_t)0x00200000)  /* Running - waiting for status */
N  #define ETH_DMASR_TPS_Reading         ((uint32_t)0x00300000)  /* Running - reading the data from host memory */
N  #define ETH_DMASR_TPS_Suspended       ((uint32_t)0x00600000)  /* Suspended - Tx Descriptor unavailabe */
N  #define ETH_DMASR_TPS_Closing         ((uint32_t)0x00700000)  /* Running - closing Rx descriptor */
N#define ETH_DMASR_RPS         ((uint32_t)0x000E0000)  /* Receive process state */
N  #define ETH_DMASR_RPS_Stopped         ((uint32_t)0x00000000)  /* Stopped - Reset or Stop Rx Command issued */
N  #define ETH_DMASR_RPS_Fetching        ((uint32_t)0x00020000)  /* Running - fetching the Rx descriptor */
N  #define ETH_DMASR_RPS_Waiting         ((uint32_t)0x00060000)  /* Running - waiting for packet */
N  #define ETH_DMASR_RPS_Suspended       ((uint32_t)0x00080000)  /* Suspended - Rx Descriptor unavailable */
N  #define ETH_DMASR_RPS_Closing         ((uint32_t)0x000A0000)  /* Running - closing descriptor */
N  #define ETH_DMASR_RPS_Queuing         ((uint32_t)0x000E0000)  /* Running - queuing the recieve frame into host memory */
N#define ETH_DMASR_NIS        ((uint32_t)0x00010000)  /* Normal interrupt summary */
N#define ETH_DMASR_AIS        ((uint32_t)0x00008000)  /* Abnormal interrupt summary */
N#define ETH_DMASR_ERS        ((uint32_t)0x00004000)  /* Early receive status */
N#define ETH_DMASR_FBES       ((uint32_t)0x00002000)  /* Fatal bus error status */
N#define ETH_DMASR_ETS        ((uint32_t)0x00000400)  /* Early transmit status */
N#define ETH_DMASR_RWTS       ((uint32_t)0x00000200)  /* Receive watchdog timeout status */
N#define ETH_DMASR_RPSS       ((uint32_t)0x00000100)  /* Receive process stopped status */
N#define ETH_DMASR_RBUS       ((uint32_t)0x00000080)  /* Receive buffer unavailable status */
N#define ETH_DMASR_RS         ((uint32_t)0x00000040)  /* Receive status */
N#define ETH_DMASR_TUS        ((uint32_t)0x00000020)  /* Transmit underflow status */
N#define ETH_DMASR_ROS        ((uint32_t)0x00000010)  /* Receive overflow status */
N#define ETH_DMASR_TJTS       ((uint32_t)0x00000008)  /* Transmit jabber timeout status */
N#define ETH_DMASR_TBUS       ((uint32_t)0x00000004)  /* Transmit buffer unavailable status */
N#define ETH_DMASR_TPSS       ((uint32_t)0x00000002)  /* Transmit process stopped status */
N#define ETH_DMASR_TS         ((uint32_t)0x00000001)  /* Transmit status */
N
N/* Bit definition for Ethernet DMA Operation Mode Register */
N#define ETH_DMAOMR_DTCEFD    ((uint32_t)0x04000000)  /* Disable Dropping of TCP/IP checksum error frames */
N#define ETH_DMAOMR_RSF       ((uint32_t)0x02000000)  /* Receive store and forward */
N#define ETH_DMAOMR_DFRF      ((uint32_t)0x01000000)  /* Disable flushing of received frames */
N#define ETH_DMAOMR_TSF       ((uint32_t)0x00200000)  /* Transmit store and forward */
N#define ETH_DMAOMR_FTF       ((uint32_t)0x00100000)  /* Flush transmit FIFO */
N#define ETH_DMAOMR_TTC       ((uint32_t)0x0001C000)  /* Transmit threshold control */
N  #define ETH_DMAOMR_TTC_64Bytes       ((uint32_t)0x00000000)  /* threshold level of the MTL Transmit FIFO is 64 Bytes */
N  #define ETH_DMAOMR_TTC_128Bytes      ((uint32_t)0x00004000)  /* threshold level of the MTL Transmit FIFO is 128 Bytes */
N  #define ETH_DMAOMR_TTC_192Bytes      ((uint32_t)0x00008000)  /* threshold level of the MTL Transmit FIFO is 192 Bytes */
N  #define ETH_DMAOMR_TTC_256Bytes      ((uint32_t)0x0000C000)  /* threshold level of the MTL Transmit FIFO is 256 Bytes */
N  #define ETH_DMAOMR_TTC_40Bytes       ((uint32_t)0x00010000)  /* threshold level of the MTL Transmit FIFO is 40 Bytes */
N  #define ETH_DMAOMR_TTC_32Bytes       ((uint32_t)0x00014000)  /* threshold level of the MTL Transmit FIFO is 32 Bytes */
N  #define ETH_DMAOMR_TTC_24Bytes       ((uint32_t)0x00018000)  /* threshold level of the MTL Transmit FIFO is 24 Bytes */
N  #define ETH_DMAOMR_TTC_16Bytes       ((uint32_t)0x0001C000)  /* threshold level of the MTL Transmit FIFO is 16 Bytes */
N#define ETH_DMAOMR_ST        ((uint32_t)0x00002000)  /* Start/stop transmission command */
N#define ETH_DMAOMR_FEF       ((uint32_t)0x00000080)  /* Forward error frames */
N#define ETH_DMAOMR_FUGF      ((uint32_t)0x00000040)  /* Forward undersized good frames */
N#define ETH_DMAOMR_RTC       ((uint32_t)0x00000018)  /* receive threshold control */
N  #define ETH_DMAOMR_RTC_64Bytes       ((uint32_t)0x00000000)  /* threshold level of the MTL Receive FIFO is 64 Bytes */
N  #define ETH_DMAOMR_RTC_32Bytes       ((uint32_t)0x00000008)  /* threshold level of the MTL Receive FIFO is 32 Bytes */
N  #define ETH_DMAOMR_RTC_96Bytes       ((uint32_t)0x00000010)  /* threshold level of the MTL Receive FIFO is 96 Bytes */
N  #define ETH_DMAOMR_RTC_128Bytes      ((uint32_t)0x00000018)  /* threshold level of the MTL Receive FIFO is 128 Bytes */
N#define ETH_DMAOMR_OSF       ((uint32_t)0x00000004)  /* operate on second frame */
N#define ETH_DMAOMR_SR        ((uint32_t)0x00000002)  /* Start/stop receive */
N
N/* Bit definition for Ethernet DMA Interrupt Enable Register */
N#define ETH_DMAIER_NISE      ((uint32_t)0x00010000)  /* Normal interrupt summary enable */
N#define ETH_DMAIER_AISE      ((uint32_t)0x00008000)  /* Abnormal interrupt summary enable */
N#define ETH_DMAIER_ERIE      ((uint32_t)0x00004000)  /* Early receive interrupt enable */
N#define ETH_DMAIER_FBEIE     ((uint32_t)0x00002000)  /* Fatal bus error interrupt enable */
N#define ETH_DMAIER_ETIE      ((uint32_t)0x00000400)  /* Early transmit interrupt enable */
N#define ETH_DMAIER_RWTIE     ((uint32_t)0x00000200)  /* Receive watchdog timeout interrupt enable */
N#define ETH_DMAIER_RPSIE     ((uint32_t)0x00000100)  /* Receive process stopped interrupt enable */
N#define ETH_DMAIER_RBUIE     ((uint32_t)0x00000080)  /* Receive buffer unavailable interrupt enable */
N#define ETH_DMAIER_RIE       ((uint32_t)0x00000040)  /* Receive interrupt enable */
N#define ETH_DMAIER_TUIE      ((uint32_t)0x00000020)  /* Transmit Underflow interrupt enable */
N#define ETH_DMAIER_ROIE      ((uint32_t)0x00000010)  /* Receive Overflow interrupt enable */
N#define ETH_DMAIER_TJTIE     ((uint32_t)0x00000008)  /* Transmit jabber timeout interrupt enable */
N#define ETH_DMAIER_TBUIE     ((uint32_t)0x00000004)  /* Transmit buffer unavailable interrupt enable */
N#define ETH_DMAIER_TPSIE     ((uint32_t)0x00000002)  /* Transmit process stopped interrupt enable */
N#define ETH_DMAIER_TIE       ((uint32_t)0x00000001)  /* Transmit interrupt enable */
N
N/* Bit definition for Ethernet DMA Missed Frame and Buffer Overflow Counter Register */
N#define ETH_DMAMFBOCR_OFOC   ((uint32_t)0x10000000)  /* Overflow bit for FIFO overflow counter */
N#define ETH_DMAMFBOCR_MFA    ((uint32_t)0x0FFE0000)  /* Number of frames missed by the application */
N#define ETH_DMAMFBOCR_OMFC   ((uint32_t)0x00010000)  /* Overflow bit for missed frame counter */
N#define ETH_DMAMFBOCR_MFC    ((uint32_t)0x0000FFFF)  /* Number of frames missed by the controller */
N
N/* Bit definition for Ethernet DMA Current Host Transmit Descriptor Register */
N#define ETH_DMACHTDR_HTDAP   ((uint32_t)0xFFFFFFFF)  /* Host transmit descriptor address pointer */
N
N/* Bit definition for Ethernet DMA Current Host Receive Descriptor Register */
N#define ETH_DMACHRDR_HRDAP   ((uint32_t)0xFFFFFFFF)  /* Host receive descriptor address pointer */
N
N/* Bit definition for Ethernet DMA Current Host Transmit Buffer Address Register */
N#define ETH_DMACHTBAR_HTBAP  ((uint32_t)0xFFFFFFFF)  /* Host transmit buffer address pointer */
N
N/* Bit definition for Ethernet DMA Current Host Receive Buffer Address Register */
N#define ETH_DMACHRBAR_HRBAP  ((uint32_t)0xFFFFFFFF)  /* Host receive buffer address pointer */
N
N/**
N  *
N  */
N
N /**
N  * @}
N  */ 
N
N#ifdef USE_STDPERIPH_DRIVER
N  #include "stm32f4xx_conf.h"
L 1 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 1
N/*
N*********************************************************************************************************
N*
N*	模块名称 : STM32固件库配置文件。
N*	文件名称 : stm32f4xx_conf.h
N*	版    本 : V1.3.0
N*	说    明 :	这是ST固件库提供的文件。用户可以根据需要包含ST固件库的外设模块。为了方便我们包含了所有固件
N*				库模块。
N*
N*			   这个文件被 stm32f4xx.h 包含，因此在.c文件中只需要 include "stm32f10x.h"即可，不必单独
N* 			   #include stm32f10x_conf.h文件
N*
N*	Copyright (C), 2023-2024, 普林芯驰 www.spacetouch.co
N*
N*********************************************************************************************************
N*/
N
N/**
N  ******************************************************************************
N  * @file    Project/STM32F4xx_StdPeriph_Templates/stm32f4xx_conf.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    13-November-2013
N  * @brief   Library configuration file.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software
N  * distributed under the License is distributed on an "AS IS" BASIS,
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_CONF_H
N#define __STM32F4xx_CONF_H
N
N/* Includes ------------------------------------------------------------------*/
N/* Uncomment the line below to enable peripheral header file inclusion */
N#include "stm32f4xx_adc.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_adc.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_adc.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the ADC firmware 
N  *          library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_ADC_H
N#define __STM32F4xx_ADC_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
L 1 "..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\stm32f4xx.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer Header File. 
N  *          This file contains all the peripheral register's definitions, bits 
N  *          definitions and memory mapping for STM32F4xx devices.            
N  *            
N  *          The file is the unique include file that the application programmer
N  *          is using in the C source code, usually in main.c. This file contains:
N  *           - Configuration section that allows to select:
N  *              - The device used in the target application
N  *              - To use or not the peripheral抯 drivers in application code(i.e. 
N  *                code will be based on direct access to peripheral抯 registers 
N  *                rather than drivers API), this option is controlled by 
N  *                "#define USE_STDPERIPH_DRIVER"
N  *              - To change few application-specific parameters such as the HSE 
N  *                crystal frequency
N  *           - Data structures and the address mapping for all peripherals
N  *           - Peripheral's registers declarations and bits definition
N  *           - Macros to access peripheral抯 registers hardware
N  *  
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************  
N  */ 
N
N/** @addtogroup CMSIS
N  * @{
N  */
N
N/** @addtogroup stm32f4xx
N  * @{
N  */
N    
N#ifndef __STM32F4xx_H
S#define __STM32F4xx_H
S
S#ifdef __cplusplus
S extern "C" {
S#endif /* __cplusplus */
S  
S/** @addtogroup Library_configuration_section
S  * @{
S  */
S  
S/* Uncomment the line below according to the target STM32 device used in your
S   application 
S  */
S
S#if !defined (STM32F40_41xxx) && !defined (STM32F427_437xx) && !defined (STM32F429_439xx) && !defined (STM32F401xx)
S  /* #define STM32F40_41xxx */   /*!< STM32F405RG, STM32F405VG, STM32F405ZG, STM32F415RG, STM32F415VG, STM32F415ZG,  
S                                     STM32F407VG, STM32F407VE, STM32F407ZG, STM32F407ZE, STM32F407IG, STM32F407IE, 
S                                     STM32F417VG, STM32F417VE, STM32F417ZG, STM32F417ZE, STM32F417IG and STM32F417IE Devices */
S
S  /* #define STM32F427_437xx */   /*!< STM32F427VG, STM32F427VI, STM32F427ZG, STM32F427ZI, STM32F427IG, STM32F427II,  
S                                       STM32F437VG, STM32F437VI, STM32F437ZG, STM32F437ZI, STM32F437IG, STM32F437II Devices */
S                                    
S  /* #define STM32F429_439xx */   /*!< STM32F429VG, STM32F429VI, STM32F429ZG, STM32F429ZI, STM32F429BG, STM32F429BI,  
S                                       STM32F429NG, STM32F439NI, STM32F429IG, STM32F429II, STM32F439VG, STM32F439VI, 
S                                       STM32F439ZG, STM32F439ZI, STM32F439BG, STM32F439BI, STM32F439NG, STM32F439NI,
S                                       STM32F439IG and STM32F439II Devices */
S                                    
S  /* #define STM32F401xx */     /*!< STM32F401CB, STM32F401CC,  STM32F401RB, STM32F401RC, STM32F401VB, STM32F401VC  
S                                     STM32F401CD, STM32F401RD, STM32F401VD, STM32F401CExx, STM32F401RE, STM32F401VE Devices */  
S  
S#endif
S
S/* Old STM32F40XX definition, maintained for legacy purpose */
S#ifdef STM32F40XX
S  #define STM32F40_41xxx
S#endif /* STM32F40XX */
S
S/* Old STM32F427X definition, maintained for legacy purpose */
S#ifdef STM32F427X
S  #define STM32F427_437xx
S#endif /* STM32F427X */
S
S/*  Tip: To avoid modifying this file each time you need to switch between these
S        devices, you can define the device in your toolchain compiler preprocessor.
S  */
S
S#if !defined (STM32F40_41xxx) && !defined (STM32F427_437xx) && !defined (STM32F429_439xx) && !defined (STM32F401xx)
S #error "Please select first the target STM32F4xx device used in your application (in stm32f4xx.h file)"
S#endif
S
S#if !defined  (USE_STDPERIPH_DRIVER)
S/**
S * @brief Comment the line below if you will not use the peripherals drivers.
S   In this case, these drivers will not be included and the application code will 
S   be based on direct access to peripherals registers 
S   */
S  /*#define USE_STDPERIPH_DRIVER */
S#endif /* USE_STDPERIPH_DRIVER */
S
S/**
S * @brief In the following line adjust the value of External High Speed oscillator (HSE)
S   used in your application 
S   
S   Tip: To avoid modifying this file each time you need to use different HSE, you
S        can define the HSE value in your toolchain compiler preprocessor.
S  */           
S
S#if !defined  (HSE_VALUE) 
S  #define HSE_VALUE    ((uint32_t)8000000) /*!< Value of the External oscillator in Hz */
S  
S#endif /* HSE_VALUE */
S
S/**
S * @brief In the following line adjust the External High Speed oscillator (HSE) Startup 
S   Timeout value 
S   */
S#if !defined  (HSE_STARTUP_TIMEOUT) 
S  #define HSE_STARTUP_TIMEOUT    ((uint16_t)0x05000)   /*!< Time out for HSE start up */
S#endif /* HSE_STARTUP_TIMEOUT */   
S
S#if !defined  (HSI_VALUE)   
S  #define HSI_VALUE    ((uint32_t)16000000) /*!< Value of the Internal oscillator in Hz*/
S#endif /* HSI_VALUE */   
S
S/**
S * @brief STM32F4XX Standard Peripherals Library version number V1.3.0
S   */
S#define __STM32F4XX_STDPERIPH_VERSION_MAIN   (0x01) /*!< [31:24] main version */                                  
S#define __STM32F4XX_STDPERIPH_VERSION_SUB1   (0x03) /*!< [23:16] sub1 version */
S#define __STM32F4XX_STDPERIPH_VERSION_SUB2   (0x00) /*!< [15:8]  sub2 version */
S#define __STM32F4XX_STDPERIPH_VERSION_RC     (0x00) /*!< [7:0]  release candidate */ 
S#define __STM32F4XX_STDPERIPH_VERSION        ((__STM32F4XX_STDPERIPH_VERSION_MAIN << 24)\
S                                             |(__STM32F4XX_STDPERIPH_VERSION_SUB1 << 16)\
S                                             |(__STM32F4XX_STDPERIPH_VERSION_SUB2 << 8)\
S                                             |(__STM32F4XX_STDPERIPH_VERSION_RC))
X#define __STM32F4XX_STDPERIPH_VERSION        ((__STM32F4XX_STDPERIPH_VERSION_MAIN << 24)                                             |(__STM32F4XX_STDPERIPH_VERSION_SUB1 << 16)                                             |(__STM32F4XX_STDPERIPH_VERSION_SUB2 << 8)                                             |(__STM32F4XX_STDPERIPH_VERSION_RC))
S                                             
S/**
S  * @}
S  */
S
S/** @addtogroup Configuration_section_for_CMSIS
S  * @{
S  */
S
S/**
S * @brief Configuration of the Cortex-M4 Processor and Core Peripherals 
S */
S#define __CM4_REV                 0x0001  /*!< Core revision r0p1                            */
S#define __MPU_PRESENT             1       /*!< STM32F4XX provides an MPU                     */
S#define __NVIC_PRIO_BITS          4       /*!< STM32F4XX uses 4 Bits for the Priority Levels */
S#define __Vendor_SysTickConfig    0       /*!< Set to 1 if different SysTick Config is used  */
S#define __FPU_PRESENT             1       /*!< FPU present                                   */
S
S/**
S * @brief STM32F4XX Interrupt Number Definition, according to the selected device 
S *        in @ref Library_configuration_section 
S */
Stypedef enum IRQn
S{
S/******  Cortex-M4 Processor Exceptions Numbers ****************************************************************/
S  NonMaskableInt_IRQn         = -14,    /*!< 2 Non Maskable Interrupt                                          */
S  MemoryManagement_IRQn       = -12,    /*!< 4 Cortex-M4 Memory Management Interrupt                           */
S  BusFault_IRQn               = -11,    /*!< 5 Cortex-M4 Bus Fault Interrupt                                   */
S  UsageFault_IRQn             = -10,    /*!< 6 Cortex-M4 Usage Fault Interrupt                                 */
S  SVCall_IRQn                 = -5,     /*!< 11 Cortex-M4 SV Call Interrupt                                    */
S  DebugMonitor_IRQn           = -4,     /*!< 12 Cortex-M4 Debug Monitor Interrupt                              */
S  PendSV_IRQn                 = -2,     /*!< 14 Cortex-M4 Pend SV Interrupt                                    */
S  SysTick_IRQn                = -1,     /*!< 15 Cortex-M4 System Tick Interrupt                                */
S/******  STM32 specific Interrupt Numbers **********************************************************************/
S  WWDG_IRQn                   = 0,      /*!< Window WatchDog Interrupt                                         */
S  PVD_IRQn                    = 1,      /*!< PVD through EXTI Line detection Interrupt                         */
S  TAMP_STAMP_IRQn             = 2,      /*!< Tamper and TimeStamp interrupts through the EXTI line             */
S  RTC_WKUP_IRQn               = 3,      /*!< RTC Wakeup interrupt through the EXTI line                        */
S  FLASH_IRQn                  = 4,      /*!< FLASH global Interrupt                                            */
S  RCC_IRQn                    = 5,      /*!< RCC global Interrupt                                              */
S  EXTI0_IRQn                  = 6,      /*!< EXTI Line0 Interrupt                                              */
S  EXTI1_IRQn                  = 7,      /*!< EXTI Line1 Interrupt                                              */
S  EXTI2_IRQn                  = 8,      /*!< EXTI Line2 Interrupt                                              */
S  EXTI3_IRQn                  = 9,      /*!< EXTI Line3 Interrupt                                              */
S  EXTI4_IRQn                  = 10,     /*!< EXTI Line4 Interrupt                                              */
S  DMA1_Stream0_IRQn           = 11,     /*!< DMA1 Stream 0 global Interrupt                                    */
S  DMA1_Stream1_IRQn           = 12,     /*!< DMA1 Stream 1 global Interrupt                                    */
S  DMA1_Stream2_IRQn           = 13,     /*!< DMA1 Stream 2 global Interrupt                                    */
S  DMA1_Stream3_IRQn           = 14,     /*!< DMA1 Stream 3 global Interrupt                                    */
S  DMA1_Stream4_IRQn           = 15,     /*!< DMA1 Stream 4 global Interrupt                                    */
S  DMA1_Stream5_IRQn           = 16,     /*!< DMA1 Stream 5 global Interrupt                                    */
S  DMA1_Stream6_IRQn           = 17,     /*!< DMA1 Stream 6 global Interrupt                                    */
S  ADC_IRQn                    = 18,     /*!< ADC1, ADC2 and ADC3 global Interrupts                             */
S
S#if defined (STM32F40_41xxx)
S  CAN1_TX_IRQn                = 19,     /*!< CAN1 TX Interrupt                                                 */
S  CAN1_RX0_IRQn               = 20,     /*!< CAN1 RX0 Interrupt                                                */
S  CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                                */
S  CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                                */
S  EXTI9_5_IRQn                = 23,     /*!< External Line[9:5] Interrupts                                     */
S  TIM1_BRK_TIM9_IRQn          = 24,     /*!< TIM1 Break interrupt and TIM9 global interrupt                    */
S  TIM1_UP_TIM10_IRQn          = 25,     /*!< TIM1 Update Interrupt and TIM10 global interrupt                  */
S  TIM1_TRG_COM_TIM11_IRQn     = 26,     /*!< TIM1 Trigger and Commutation Interrupt and TIM11 global interrupt */
S  TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                                    */
S  TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                             */
S  TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                             */
S  TIM4_IRQn                   = 30,     /*!< TIM4 global Interrupt                                             */
S  I2C1_EV_IRQn                = 31,     /*!< I2C1 Event Interrupt                                              */
S  I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                              */
S  I2C2_EV_IRQn                = 33,     /*!< I2C2 Event Interrupt                                              */
S  I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                              */  
S  SPI1_IRQn                   = 35,     /*!< SPI1 global Interrupt                                             */
S  SPI2_IRQn                   = 36,     /*!< SPI2 global Interrupt                                             */
S  USART1_IRQn                 = 37,     /*!< USART1 global Interrupt                                           */
S  USART2_IRQn                 = 38,     /*!< USART2 global Interrupt                                           */
S  USART3_IRQn                 = 39,     /*!< USART3 global Interrupt                                           */
S  EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                                   */
S  RTC_Alarm_IRQn              = 41,     /*!< RTC Alarm (A and B) through EXTI Line Interrupt                   */
S  OTG_FS_WKUP_IRQn            = 42,     /*!< USB OTG FS Wakeup through EXTI line interrupt                     */    
S  TIM8_BRK_TIM12_IRQn         = 43,     /*!< TIM8 Break Interrupt and TIM12 global interrupt                   */
S  TIM8_UP_TIM13_IRQn          = 44,     /*!< TIM8 Update Interrupt and TIM13 global interrupt                  */
S  TIM8_TRG_COM_TIM14_IRQn     = 45,     /*!< TIM8 Trigger and Commutation Interrupt and TIM14 global interrupt */
S  TIM8_CC_IRQn                = 46,     /*!< TIM8 Capture Compare Interrupt                                    */
S  DMA1_Stream7_IRQn           = 47,     /*!< DMA1 Stream7 Interrupt                                            */
S  FSMC_IRQn                   = 48,     /*!< FSMC global Interrupt                                             */
S  SDIO_IRQn                   = 49,     /*!< SDIO global Interrupt                                             */
S  TIM5_IRQn                   = 50,     /*!< TIM5 global Interrupt                                             */
S  SPI3_IRQn                   = 51,     /*!< SPI3 global Interrupt                                             */
S  UART4_IRQn                  = 52,     /*!< UART4 global Interrupt                                            */
S  UART5_IRQn                  = 53,     /*!< UART5 global Interrupt                                            */
S  TIM6_DAC_IRQn               = 54,     /*!< TIM6 global and DAC1&2 underrun error  interrupts                 */
S  TIM7_IRQn                   = 55,     /*!< TIM7 global interrupt                                             */
S  DMA2_Stream0_IRQn           = 56,     /*!< DMA2 Stream 0 global Interrupt                                    */
S  DMA2_Stream1_IRQn           = 57,     /*!< DMA2 Stream 1 global Interrupt                                    */
S  DMA2_Stream2_IRQn           = 58,     /*!< DMA2 Stream 2 global Interrupt                                    */
S  DMA2_Stream3_IRQn           = 59,     /*!< DMA2 Stream 3 global Interrupt                                    */
S  DMA2_Stream4_IRQn           = 60,     /*!< DMA2 Stream 4 global Interrupt                                    */
S  ETH_IRQn                    = 61,     /*!< Ethernet global Interrupt                                         */
S  ETH_WKUP_IRQn               = 62,     /*!< Ethernet Wakeup through EXTI line Interrupt                       */
S  CAN2_TX_IRQn                = 63,     /*!< CAN2 TX Interrupt                                                 */
S  CAN2_RX0_IRQn               = 64,     /*!< CAN2 RX0 Interrupt                                                */
S  CAN2_RX1_IRQn               = 65,     /*!< CAN2 RX1 Interrupt                                                */
S  CAN2_SCE_IRQn               = 66,     /*!< CAN2 SCE Interrupt                                                */
S  OTG_FS_IRQn                 = 67,     /*!< USB OTG FS global Interrupt                                       */
S  DMA2_Stream5_IRQn           = 68,     /*!< DMA2 Stream 5 global interrupt                                    */
S  DMA2_Stream6_IRQn           = 69,     /*!< DMA2 Stream 6 global interrupt                                    */
S  DMA2_Stream7_IRQn           = 70,     /*!< DMA2 Stream 7 global interrupt                                    */
S  USART6_IRQn                 = 71,     /*!< USART6 global interrupt                                           */
S  I2C3_EV_IRQn                = 72,     /*!< I2C3 event interrupt                                              */
S  I2C3_ER_IRQn                = 73,     /*!< I2C3 error interrupt                                              */
S  OTG_HS_EP1_OUT_IRQn         = 74,     /*!< USB OTG HS End Point 1 Out global interrupt                       */
S  OTG_HS_EP1_IN_IRQn          = 75,     /*!< USB OTG HS End Point 1 In global interrupt                        */
S  OTG_HS_WKUP_IRQn            = 76,     /*!< USB OTG HS Wakeup through EXTI interrupt                          */
S  OTG_HS_IRQn                 = 77,     /*!< USB OTG HS global interrupt                                       */
S  DCMI_IRQn                   = 78,     /*!< DCMI global interrupt                                             */
S  CRYP_IRQn                   = 79,     /*!< CRYP crypto global interrupt                                      */
S  HASH_RNG_IRQn               = 80,     /*!< Hash and Rng global interrupt                                     */
S  FPU_IRQn                    = 81      /*!< FPU global interrupt                                              */
S#endif /* STM32F40_41xxx */
S
S#if defined (STM32F427_437xx)
S  CAN1_TX_IRQn                = 19,     /*!< CAN1 TX Interrupt                                                 */
S  CAN1_RX0_IRQn               = 20,     /*!< CAN1 RX0 Interrupt                                                */
S  CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                                */
S  CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                                */
S  EXTI9_5_IRQn                = 23,     /*!< External Line[9:5] Interrupts                                     */
S  TIM1_BRK_TIM9_IRQn          = 24,     /*!< TIM1 Break interrupt and TIM9 global interrupt                    */
S  TIM1_UP_TIM10_IRQn          = 25,     /*!< TIM1 Update Interrupt and TIM10 global interrupt                  */
S  TIM1_TRG_COM_TIM11_IRQn     = 26,     /*!< TIM1 Trigger and Commutation Interrupt and TIM11 global interrupt */
S  TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                                    */
S  TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                             */
S  TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                             */
S  TIM4_IRQn                   = 30,     /*!< TIM4 global Interrupt                                             */
S  I2C1_EV_IRQn                = 31,     /*!< I2C1 Event Interrupt                                              */
S  I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                              */
S  I2C2_EV_IRQn                = 33,     /*!< I2C2 Event Interrupt                                              */
S  I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                              */  
S  SPI1_IRQn                   = 35,     /*!< SPI1 global Interrupt                                             */
S  SPI2_IRQn                   = 36,     /*!< SPI2 global Interrupt                                             */
S  USART1_IRQn                 = 37,     /*!< USART1 global Interrupt                                           */
S  USART2_IRQn                 = 38,     /*!< USART2 global Interrupt                                           */
S  USART3_IRQn                 = 39,     /*!< USART3 global Interrupt                                           */
S  EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                                   */
S  RTC_Alarm_IRQn              = 41,     /*!< RTC Alarm (A and B) through EXTI Line Interrupt                   */
S  OTG_FS_WKUP_IRQn            = 42,     /*!< USB OTG FS Wakeup through EXTI line interrupt                     */    
S  TIM8_BRK_TIM12_IRQn         = 43,     /*!< TIM8 Break Interrupt and TIM12 global interrupt                   */
S  TIM8_UP_TIM13_IRQn          = 44,     /*!< TIM8 Update Interrupt and TIM13 global interrupt                  */
S  TIM8_TRG_COM_TIM14_IRQn     = 45,     /*!< TIM8 Trigger and Commutation Interrupt and TIM14 global interrupt */
S  TIM8_CC_IRQn                = 46,     /*!< TIM8 Capture Compare Interrupt                                    */
S  DMA1_Stream7_IRQn           = 47,     /*!< DMA1 Stream7 Interrupt                                            */
S  FMC_IRQn                    = 48,     /*!< FMC global Interrupt                                              */
S  SDIO_IRQn                   = 49,     /*!< SDIO global Interrupt                                             */
S  TIM5_IRQn                   = 50,     /*!< TIM5 global Interrupt                                             */
S  SPI3_IRQn                   = 51,     /*!< SPI3 global Interrupt                                             */
S  UART4_IRQn                  = 52,     /*!< UART4 global Interrupt                                            */
S  UART5_IRQn                  = 53,     /*!< UART5 global Interrupt                                            */
S  TIM6_DAC_IRQn               = 54,     /*!< TIM6 global and DAC1&2 underrun error  interrupts                 */
S  TIM7_IRQn                   = 55,     /*!< TIM7 global interrupt                                             */
S  DMA2_Stream0_IRQn           = 56,     /*!< DMA2 Stream 0 global Interrupt                                    */
S  DMA2_Stream1_IRQn           = 57,     /*!< DMA2 Stream 1 global Interrupt                                    */
S  DMA2_Stream2_IRQn           = 58,     /*!< DMA2 Stream 2 global Interrupt                                    */
S  DMA2_Stream3_IRQn           = 59,     /*!< DMA2 Stream 3 global Interrupt                                    */
S  DMA2_Stream4_IRQn           = 60,     /*!< DMA2 Stream 4 global Interrupt                                    */
S  ETH_IRQn                    = 61,     /*!< Ethernet global Interrupt                                         */
S  ETH_WKUP_IRQn               = 62,     /*!< Ethernet Wakeup through EXTI line Interrupt                       */
S  CAN2_TX_IRQn                = 63,     /*!< CAN2 TX Interrupt                                                 */
S  CAN2_RX0_IRQn               = 64,     /*!< CAN2 RX0 Interrupt                                                */
S  CAN2_RX1_IRQn               = 65,     /*!< CAN2 RX1 Interrupt                                                */
S  CAN2_SCE_IRQn               = 66,     /*!< CAN2 SCE Interrupt                                                */
S  OTG_FS_IRQn                 = 67,     /*!< USB OTG FS global Interrupt                                       */
S  DMA2_Stream5_IRQn           = 68,     /*!< DMA2 Stream 5 global interrupt                                    */
S  DMA2_Stream6_IRQn           = 69,     /*!< DMA2 Stream 6 global interrupt                                    */
S  DMA2_Stream7_IRQn           = 70,     /*!< DMA2 Stream 7 global interrupt                                    */
S  USART6_IRQn                 = 71,     /*!< USART6 global interrupt                                           */
S  I2C3_EV_IRQn                = 72,     /*!< I2C3 event interrupt                                              */
S  I2C3_ER_IRQn                = 73,     /*!< I2C3 error interrupt                                              */
S  OTG_HS_EP1_OUT_IRQn         = 74,     /*!< USB OTG HS End Point 1 Out global interrupt                       */
S  OTG_HS_EP1_IN_IRQn          = 75,     /*!< USB OTG HS End Point 1 In global interrupt                        */
S  OTG_HS_WKUP_IRQn            = 76,     /*!< USB OTG HS Wakeup through EXTI interrupt                          */
S  OTG_HS_IRQn                 = 77,     /*!< USB OTG HS global interrupt                                       */
S  DCMI_IRQn                   = 78,     /*!< DCMI global interrupt                                             */
S  CRYP_IRQn                   = 79,     /*!< CRYP crypto global interrupt                                      */
S  HASH_RNG_IRQn               = 80,     /*!< Hash and Rng global interrupt                                     */
S  FPU_IRQn                    = 81,     /*!< FPU global interrupt                                              */
S  UART7_IRQn                  = 82,     /*!< UART7 global interrupt                                            */
S  UART8_IRQn                  = 83,     /*!< UART8 global interrupt                                            */
S  SPI4_IRQn                   = 84,     /*!< SPI4 global Interrupt                                             */
S  SPI5_IRQn                   = 85,     /*!< SPI5 global Interrupt                                             */
S  SPI6_IRQn                   = 86,     /*!< SPI6 global Interrupt                                             */
S  SAI1_IRQn                   = 87,     /*!< SAI1 global Interrupt                                             */
S  DMA2D_IRQn                  = 90      /*!< DMA2D global Interrupt                                            */   
S#endif /* STM32F427_437xx */
S    
S#if defined (STM32F429_439xx)
S  CAN1_TX_IRQn                = 19,     /*!< CAN1 TX Interrupt                                                 */
S  CAN1_RX0_IRQn               = 20,     /*!< CAN1 RX0 Interrupt                                                */
S  CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                                */
S  CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                                */
S  EXTI9_5_IRQn                = 23,     /*!< External Line[9:5] Interrupts                                     */
S  TIM1_BRK_TIM9_IRQn          = 24,     /*!< TIM1 Break interrupt and TIM9 global interrupt                    */
S  TIM1_UP_TIM10_IRQn          = 25,     /*!< TIM1 Update Interrupt and TIM10 global interrupt                  */
S  TIM1_TRG_COM_TIM11_IRQn     = 26,     /*!< TIM1 Trigger and Commutation Interrupt and TIM11 global interrupt */
S  TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                                    */
S  TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                             */
S  TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                             */
S  TIM4_IRQn                   = 30,     /*!< TIM4 global Interrupt                                             */
S  I2C1_EV_IRQn                = 31,     /*!< I2C1 Event Interrupt                                              */
S  I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                              */
S  I2C2_EV_IRQn                = 33,     /*!< I2C2 Event Interrupt                                              */
S  I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                              */  
S  SPI1_IRQn                   = 35,     /*!< SPI1 global Interrupt                                             */
S  SPI2_IRQn                   = 36,     /*!< SPI2 global Interrupt                                             */
S  USART1_IRQn                 = 37,     /*!< USART1 global Interrupt                                           */
S  USART2_IRQn                 = 38,     /*!< USART2 global Interrupt                                           */
S  USART3_IRQn                 = 39,     /*!< USART3 global Interrupt                                           */
S  EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                                   */
S  RTC_Alarm_IRQn              = 41,     /*!< RTC Alarm (A and B) through EXTI Line Interrupt                   */
S  OTG_FS_WKUP_IRQn            = 42,     /*!< USB OTG FS Wakeup through EXTI line interrupt                     */    
S  TIM8_BRK_TIM12_IRQn         = 43,     /*!< TIM8 Break Interrupt and TIM12 global interrupt                   */
S  TIM8_UP_TIM13_IRQn          = 44,     /*!< TIM8 Update Interrupt and TIM13 global interrupt                  */
S  TIM8_TRG_COM_TIM14_IRQn     = 45,     /*!< TIM8 Trigger and Commutation Interrupt and TIM14 global interrupt */
S  TIM8_CC_IRQn                = 46,     /*!< TIM8 Capture Compare Interrupt                                    */
S  DMA1_Stream7_IRQn           = 47,     /*!< DMA1 Stream7 Interrupt                                            */
S  FMC_IRQn                    = 48,     /*!< FMC global Interrupt                                              */
S  SDIO_IRQn                   = 49,     /*!< SDIO global Interrupt                                             */
S  TIM5_IRQn                   = 50,     /*!< TIM5 global Interrupt                                             */
S  SPI3_IRQn                   = 51,     /*!< SPI3 global Interrupt                                             */
S  UART4_IRQn                  = 52,     /*!< UART4 global Interrupt                                            */
S  UART5_IRQn                  = 53,     /*!< UART5 global Interrupt                                            */
S  TIM6_DAC_IRQn               = 54,     /*!< TIM6 global and DAC1&2 underrun error  interrupts                 */
S  TIM7_IRQn                   = 55,     /*!< TIM7 global interrupt                                             */
S  DMA2_Stream0_IRQn           = 56,     /*!< DMA2 Stream 0 global Interrupt                                    */
S  DMA2_Stream1_IRQn           = 57,     /*!< DMA2 Stream 1 global Interrupt                                    */
S  DMA2_Stream2_IRQn           = 58,     /*!< DMA2 Stream 2 global Interrupt                                    */
S  DMA2_Stream3_IRQn           = 59,     /*!< DMA2 Stream 3 global Interrupt                                    */
S  DMA2_Stream4_IRQn           = 60,     /*!< DMA2 Stream 4 global Interrupt                                    */
S  ETH_IRQn                    = 61,     /*!< Ethernet global Interrupt                                         */
S  ETH_WKUP_IRQn               = 62,     /*!< Ethernet Wakeup through EXTI line Interrupt                       */
S  CAN2_TX_IRQn                = 63,     /*!< CAN2 TX Interrupt                                                 */
S  CAN2_RX0_IRQn               = 64,     /*!< CAN2 RX0 Interrupt                                                */
S  CAN2_RX1_IRQn               = 65,     /*!< CAN2 RX1 Interrupt                                                */
S  CAN2_SCE_IRQn               = 66,     /*!< CAN2 SCE Interrupt                                                */
S  OTG_FS_IRQn                 = 67,     /*!< USB OTG FS global Interrupt                                       */
S  DMA2_Stream5_IRQn           = 68,     /*!< DMA2 Stream 5 global interrupt                                    */
S  DMA2_Stream6_IRQn           = 69,     /*!< DMA2 Stream 6 global interrupt                                    */
S  DMA2_Stream7_IRQn           = 70,     /*!< DMA2 Stream 7 global interrupt                                    */
S  USART6_IRQn                 = 71,     /*!< USART6 global interrupt                                           */
S  I2C3_EV_IRQn                = 72,     /*!< I2C3 event interrupt                                              */
S  I2C3_ER_IRQn                = 73,     /*!< I2C3 error interrupt                                              */
S  OTG_HS_EP1_OUT_IRQn         = 74,     /*!< USB OTG HS End Point 1 Out global interrupt                       */
S  OTG_HS_EP1_IN_IRQn          = 75,     /*!< USB OTG HS End Point 1 In global interrupt                        */
S  OTG_HS_WKUP_IRQn            = 76,     /*!< USB OTG HS Wakeup through EXTI interrupt                          */
S  OTG_HS_IRQn                 = 77,     /*!< USB OTG HS global interrupt                                       */
S  DCMI_IRQn                   = 78,     /*!< DCMI global interrupt                                             */
S  CRYP_IRQn                   = 79,     /*!< CRYP crypto global interrupt                                      */
S  HASH_RNG_IRQn               = 80,     /*!< Hash and Rng global interrupt                                     */
S  FPU_IRQn                    = 81,     /*!< FPU global interrupt                                              */
S  UART7_IRQn                  = 82,     /*!< UART7 global interrupt                                            */
S  UART8_IRQn                  = 83,     /*!< UART8 global interrupt                                            */
S  SPI4_IRQn                   = 84,     /*!< SPI4 global Interrupt                                             */
S  SPI5_IRQn                   = 85,     /*!< SPI5 global Interrupt                                             */
S  SPI6_IRQn                   = 86,     /*!< SPI6 global Interrupt                                             */
S  SAI1_IRQn                   = 87,     /*!< SAI1 global Interrupt                                             */
S  LTDC_IRQn                   = 88,     /*!< LTDC global Interrupt                                             */
S  LTDC_ER_IRQn                = 89,     /*!< LTDC Error global Interrupt                                       */
S  DMA2D_IRQn                  = 90      /*!< DMA2D global Interrupt                                            */   
S#endif /* STM32F429_439xx */
S   
S#if defined (STM32F401xx)
S  EXTI9_5_IRQn                = 23,     /*!< External Line[9:5] Interrupts                                     */
S  TIM1_BRK_TIM9_IRQn          = 24,     /*!< TIM1 Break interrupt and TIM9 global interrupt                    */
S  TIM1_UP_TIM10_IRQn          = 25,     /*!< TIM1 Update Interrupt and TIM10 global interrupt                  */
S  TIM1_TRG_COM_TIM11_IRQn     = 26,     /*!< TIM1 Trigger and Commutation Interrupt and TIM11 global interrupt */
S  TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                                    */
S  TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                             */
S  TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                             */
S  TIM4_IRQn                   = 30,     /*!< TIM4 global Interrupt                                             */
S  I2C1_EV_IRQn                = 31,     /*!< I2C1 Event Interrupt                                              */
S  I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                              */
S  I2C2_EV_IRQn                = 33,     /*!< I2C2 Event Interrupt                                              */
S  I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                              */  
S  SPI1_IRQn                   = 35,     /*!< SPI1 global Interrupt                                             */
S  SPI2_IRQn                   = 36,     /*!< SPI2 global Interrupt                                             */
S  USART1_IRQn                 = 37,     /*!< USART1 global Interrupt                                           */
S  USART2_IRQn                 = 38,     /*!< USART2 global Interrupt                                           */
S  EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                                   */
S  RTC_Alarm_IRQn              = 41,     /*!< RTC Alarm (A and B) through EXTI Line Interrupt                   */
S  OTG_FS_WKUP_IRQn            = 42,     /*!< USB OTG FS Wakeup through EXTI line interrupt                     */  
S  DMA1_Stream7_IRQn           = 47,     /*!< DMA1 Stream7 Interrupt                                            */
S  SDIO_IRQn                   = 49,     /*!< SDIO global Interrupt                                             */
S  TIM5_IRQn                   = 50,     /*!< TIM5 global Interrupt                                             */
S  SPI3_IRQn                   = 51,     /*!< SPI3 global Interrupt                                             */
S  DMA2_Stream0_IRQn           = 56,     /*!< DMA2 Stream 0 global Interrupt                                    */
S  DMA2_Stream1_IRQn           = 57,     /*!< DMA2 Stream 1 global Interrupt                                    */
S  DMA2_Stream2_IRQn           = 58,     /*!< DMA2 Stream 2 global Interrupt                                    */
S  DMA2_Stream3_IRQn           = 59,     /*!< DMA2 Stream 3 global Interrupt                                    */
S  DMA2_Stream4_IRQn           = 60,     /*!< DMA2 Stream 4 global Interrupt                                    */
S  OTG_FS_IRQn                 = 67,     /*!< USB OTG FS global Interrupt                                       */
S  DMA2_Stream5_IRQn           = 68,     /*!< DMA2 Stream 5 global interrupt                                    */
S  DMA2_Stream6_IRQn           = 69,     /*!< DMA2 Stream 6 global interrupt                                    */
S  DMA2_Stream7_IRQn           = 70,     /*!< DMA2 Stream 7 global interrupt                                    */
S  USART6_IRQn                 = 71,     /*!< USART6 global interrupt                                           */
S  I2C3_EV_IRQn                = 72,     /*!< I2C3 event interrupt                                              */
S  I2C3_ER_IRQn                = 73,     /*!< I2C3 error interrupt                                              */
S  FPU_IRQn                    = 81,      /*!< FPU global interrupt                                             */
S  SPI4_IRQn                   = 84       /*!< SPI4 global Interrupt                                            */
S#endif /* STM32F401xx */
S
S} IRQn_Type;
S
S/**
S  * @}
S  */
S
S#include "core_cm4.h"             /* Cortex-M4 processor and core peripherals */
S#include "system_stm32f4xx.h"
S#include <stdint.h>
S
S/** @addtogroup Exported_types
S  * @{
S  */  
S/*!< STM32F10x Standard Peripheral Library old types (maintained for legacy purpose) */
Stypedef int32_t  s32;
Stypedef int16_t s16;
Stypedef int8_t  s8;
S
Stypedef const int32_t sc32;  /*!< Read Only */
Stypedef const int16_t sc16;  /*!< Read Only */
Stypedef const int8_t sc8;   /*!< Read Only */
S
Stypedef __IO int32_t  vs32;
Stypedef __IO int16_t  vs16;
Stypedef __IO int8_t   vs8;
S
Stypedef __I int32_t vsc32;  /*!< Read Only */
Stypedef __I int16_t vsc16;  /*!< Read Only */
Stypedef __I int8_t vsc8;   /*!< Read Only */
S
Stypedef uint32_t  u32;
Stypedef uint16_t u16;
Stypedef uint8_t  u8;
S
Stypedef const uint32_t uc32;  /*!< Read Only */
Stypedef const uint16_t uc16;  /*!< Read Only */
Stypedef const uint8_t uc8;   /*!< Read Only */
S
Stypedef __IO uint32_t  vu32;
Stypedef __IO uint16_t vu16;
Stypedef __IO uint8_t  vu8;
S
Stypedef __I uint32_t vuc32;  /*!< Read Only */
Stypedef __I uint16_t vuc16;  /*!< Read Only */
Stypedef __I uint8_t vuc8;   /*!< Read Only */
S
Stypedef enum {RESET = 0, SET = !RESET} FlagStatus, ITStatus;
S
Stypedef enum {DISABLE = 0, ENABLE = !DISABLE} FunctionalState;
S#define IS_FUNCTIONAL_STATE(STATE) (((STATE) == DISABLE) || ((STATE) == ENABLE))
S
Stypedef enum {ERROR = 0, SUCCESS = !ERROR} ErrorStatus;
S
S/**
S  * @}
S  */
S
S/** @addtogroup Peripheral_registers_structures
S  * @{
S  */   
S
S/** 
S  * @brief Analog to Digital Converter  
S  */
S
Stypedef struct
S{
S  __IO uint32_t SR;     /*!< ADC status register,                         Address offset: 0x00 */
S  __IO uint32_t CR1;    /*!< ADC control register 1,                      Address offset: 0x04 */      
S  __IO uint32_t CR2;    /*!< ADC control register 2,                      Address offset: 0x08 */
S  __IO uint32_t SMPR1;  /*!< ADC sample time register 1,                  Address offset: 0x0C */
S  __IO uint32_t SMPR2;  /*!< ADC sample time register 2,                  Address offset: 0x10 */
S  __IO uint32_t JOFR1;  /*!< ADC injected channel data offset register 1, Address offset: 0x14 */
S  __IO uint32_t JOFR2;  /*!< ADC injected channel data offset register 2, Address offset: 0x18 */
S  __IO uint32_t JOFR3;  /*!< ADC injected channel data offset register 3, Address offset: 0x1C */
S  __IO uint32_t JOFR4;  /*!< ADC injected channel data offset register 4, Address offset: 0x20 */
S  __IO uint32_t HTR;    /*!< ADC watchdog higher threshold register,      Address offset: 0x24 */
S  __IO uint32_t LTR;    /*!< ADC watchdog lower threshold register,       Address offset: 0x28 */
S  __IO uint32_t SQR1;   /*!< ADC regular sequence register 1,             Address offset: 0x2C */
S  __IO uint32_t SQR2;   /*!< ADC regular sequence register 2,             Address offset: 0x30 */
S  __IO uint32_t SQR3;   /*!< ADC regular sequence register 3,             Address offset: 0x34 */
S  __IO uint32_t JSQR;   /*!< ADC injected sequence register,              Address offset: 0x38*/
S  __IO uint32_t JDR1;   /*!< ADC injected data register 1,                Address offset: 0x3C */
S  __IO uint32_t JDR2;   /*!< ADC injected data register 2,                Address offset: 0x40 */
S  __IO uint32_t JDR3;   /*!< ADC injected data register 3,                Address offset: 0x44 */
S  __IO uint32_t JDR4;   /*!< ADC injected data register 4,                Address offset: 0x48 */
S  __IO uint32_t DR;     /*!< ADC regular data register,                   Address offset: 0x4C */
S} ADC_TypeDef;
S
Stypedef struct
S{
S  __IO uint32_t CSR;    /*!< ADC Common status register,                  Address offset: ADC1 base address + 0x300 */
S  __IO uint32_t CCR;    /*!< ADC common control register,                 Address offset: ADC1 base address + 0x304 */
S  __IO uint32_t CDR;    /*!< ADC common regular data register for dual
S                             AND triple modes,                            Address offset: ADC1 base address + 0x308 */
S} ADC_Common_TypeDef;
S
S
S/** 
S  * @brief Controller Area Network TxMailBox 
S  */
S
Stypedef struct
S{
S  __IO uint32_t TIR;  /*!< CAN TX mailbox identifier register */
S  __IO uint32_t TDTR; /*!< CAN mailbox data length control and time stamp register */
S  __IO uint32_t TDLR; /*!< CAN mailbox data low register */
S  __IO uint32_t TDHR; /*!< CAN mailbox data high register */
S} CAN_TxMailBox_TypeDef;
S
S/** 
S  * @brief Controller Area Network FIFOMailBox 
S  */
S  
Stypedef struct
S{
S  __IO uint32_t RIR;  /*!< CAN receive FIFO mailbox identifier register */
S  __IO uint32_t RDTR; /*!< CAN receive FIFO mailbox data length control and time stamp register */
S  __IO uint32_t RDLR; /*!< CAN receive FIFO mailbox data low register */
S  __IO uint32_t RDHR; /*!< CAN receive FIFO mailbox data high register */
S} CAN_FIFOMailBox_TypeDef;
S
S/** 
S  * @brief Controller Area Network FilterRegister 
S  */
S  
Stypedef struct
S{
S  __IO uint32_t FR1; /*!< CAN Filter bank register 1 */
S  __IO uint32_t FR2; /*!< CAN Filter bank register 1 */
S} CAN_FilterRegister_TypeDef;
S
S/** 
S  * @brief Controller Area Network 
S  */
S  
Stypedef struct
S{
S  __IO uint32_t              MCR;                 /*!< CAN master control register,         Address offset: 0x00          */
S  __IO uint32_t              MSR;                 /*!< CAN master status register,          Address offset: 0x04          */
S  __IO uint32_t              TSR;                 /*!< CAN transmit status register,        Address offset: 0x08          */
S  __IO uint32_t              RF0R;                /*!< CAN receive FIFO 0 register,         Address offset: 0x0C          */
S  __IO uint32_t              RF1R;                /*!< CAN receive FIFO 1 register,         Address offset: 0x10          */
S  __IO uint32_t              IER;                 /*!< CAN interrupt enable register,       Address offset: 0x14          */
S  __IO uint32_t              ESR;                 /*!< CAN error status register,           Address offset: 0x18          */
S  __IO uint32_t              BTR;                 /*!< CAN bit timing register,             Address offset: 0x1C          */
S  uint32_t                   RESERVED0[88];       /*!< Reserved, 0x020 - 0x17F                                            */
S  CAN_TxMailBox_TypeDef      sTxMailBox[3];       /*!< CAN Tx MailBox,                      Address offset: 0x180 - 0x1AC */
S  CAN_FIFOMailBox_TypeDef    sFIFOMailBox[2];     /*!< CAN FIFO MailBox,                    Address offset: 0x1B0 - 0x1CC */
S  uint32_t                   RESERVED1[12];       /*!< Reserved, 0x1D0 - 0x1FF                                            */
S  __IO uint32_t              FMR;                 /*!< CAN filter master register,          Address offset: 0x200         */
S  __IO uint32_t              FM1R;                /*!< CAN filter mode register,            Address offset: 0x204         */
S  uint32_t                   RESERVED2;           /*!< Reserved, 0x208                                                    */
S  __IO uint32_t              FS1R;                /*!< CAN filter scale register,           Address offset: 0x20C         */
S  uint32_t                   RESERVED3;           /*!< Reserved, 0x210                                                    */
S  __IO uint32_t              FFA1R;               /*!< CAN filter FIFO assignment register, Address offset: 0x214         */
S  uint32_t                   RESERVED4;           /*!< Reserved, 0x218                                                    */
S  __IO uint32_t              FA1R;                /*!< CAN filter activation register,      Address offset: 0x21C         */
S  uint32_t                   RESERVED5[8];        /*!< Reserved, 0x220-0x23F                                              */ 
S  CAN_FilterRegister_TypeDef sFilterRegister[28]; /*!< CAN Filter Register,                 Address offset: 0x240-0x31C   */
S} CAN_TypeDef;
S
S/** 
S  * @brief CRC calculation unit 
S  */
S
Stypedef struct
S{
S  __IO uint32_t DR;         /*!< CRC Data register,             Address offset: 0x00 */
S  __IO uint8_t  IDR;        /*!< CRC Independent data register, Address offset: 0x04 */
S  uint8_t       RESERVED0;  /*!< Reserved, 0x05                                      */
S  uint16_t      RESERVED1;  /*!< Reserved, 0x06                                      */
S  __IO uint32_t CR;         /*!< CRC Control register,          Address offset: 0x08 */
S} CRC_TypeDef;
S
S/** 
S  * @brief Digital to Analog Converter
S  */
S
Stypedef struct
S{
S  __IO uint32_t CR;       /*!< DAC control register,                                    Address offset: 0x00 */
S  __IO uint32_t SWTRIGR;  /*!< DAC software trigger register,                           Address offset: 0x04 */
S  __IO uint32_t DHR12R1;  /*!< DAC channel1 12-bit right-aligned data holding register, Address offset: 0x08 */
S  __IO uint32_t DHR12L1;  /*!< DAC channel1 12-bit left aligned data holding register,  Address offset: 0x0C */
S  __IO uint32_t DHR8R1;   /*!< DAC channel1 8-bit right aligned data holding register,  Address offset: 0x10 */
S  __IO uint32_t DHR12R2;  /*!< DAC channel2 12-bit right aligned data holding register, Address offset: 0x14 */
S  __IO uint32_t DHR12L2;  /*!< DAC channel2 12-bit left aligned data holding register,  Address offset: 0x18 */
S  __IO uint32_t DHR8R2;   /*!< DAC channel2 8-bit right-aligned data holding register,  Address offset: 0x1C */
S  __IO uint32_t DHR12RD;  /*!< Dual DAC 12-bit right-aligned data holding register,     Address offset: 0x20 */
S  __IO uint32_t DHR12LD;  /*!< DUAL DAC 12-bit left aligned data holding register,      Address offset: 0x24 */
S  __IO uint32_t DHR8RD;   /*!< DUAL DAC 8-bit right aligned data holding register,      Address offset: 0x28 */
S  __IO uint32_t DOR1;     /*!< DAC channel1 data output register,                       Address offset: 0x2C */
S  __IO uint32_t DOR2;     /*!< DAC channel2 data output register,                       Address offset: 0x30 */
S  __IO uint32_t SR;       /*!< DAC status register,                                     Address offset: 0x34 */
S} DAC_TypeDef;
S
S/** 
S  * @brief Debug MCU
S  */
S
Stypedef struct
S{
S  __IO uint32_t IDCODE;  /*!< MCU device ID code,               Address offset: 0x00 */
S  __IO uint32_t CR;      /*!< Debug MCU configuration register, Address offset: 0x04 */
S  __IO uint32_t APB1FZ;  /*!< Debug MCU APB1 freeze register,   Address offset: 0x08 */
S  __IO uint32_t APB2FZ;  /*!< Debug MCU APB2 freeze register,   Address offset: 0x0C */
S}DBGMCU_TypeDef;
S
S/** 
S  * @brief DCMI
S  */
S
Stypedef struct
S{
S  __IO uint32_t CR;       /*!< DCMI control register 1,                       Address offset: 0x00 */
S  __IO uint32_t SR;       /*!< DCMI status register,                          Address offset: 0x04 */
S  __IO uint32_t RISR;     /*!< DCMI raw interrupt status register,            Address offset: 0x08 */
S  __IO uint32_t IER;      /*!< DCMI interrupt enable register,                Address offset: 0x0C */
S  __IO uint32_t MISR;     /*!< DCMI masked interrupt status register,         Address offset: 0x10 */
S  __IO uint32_t ICR;      /*!< DCMI interrupt clear register,                 Address offset: 0x14 */
S  __IO uint32_t ESCR;     /*!< DCMI embedded synchronization code register,   Address offset: 0x18 */
S  __IO uint32_t ESUR;     /*!< DCMI embedded synchronization unmask register, Address offset: 0x1C */
S  __IO uint32_t CWSTRTR;  /*!< DCMI crop window start,                        Address offset: 0x20 */
S  __IO uint32_t CWSIZER;  /*!< DCMI crop window size,                         Address offset: 0x24 */
S  __IO uint32_t DR;       /*!< DCMI data register,                            Address offset: 0x28 */
S} DCMI_TypeDef;
S
S/** 
S  * @brief DMA Controller
S  */
S
Stypedef struct
S{
S  __IO uint32_t CR;     /*!< DMA stream x configuration register      */
S  __IO uint32_t NDTR;   /*!< DMA stream x number of data register     */
S  __IO uint32_t PAR;    /*!< DMA stream x peripheral address register */
S  __IO uint32_t M0AR;   /*!< DMA stream x memory 0 address register   */
S  __IO uint32_t M1AR;   /*!< DMA stream x memory 1 address register   */
S  __IO uint32_t FCR;    /*!< DMA stream x FIFO control register       */
S} DMA_Stream_TypeDef;
S
Stypedef struct
S{
S  __IO uint32_t LISR;   /*!< DMA low interrupt status register,      Address offset: 0x00 */
S  __IO uint32_t HISR;   /*!< DMA high interrupt status register,     Address offset: 0x04 */
S  __IO uint32_t LIFCR;  /*!< DMA low interrupt flag clear register,  Address offset: 0x08 */
S  __IO uint32_t HIFCR;  /*!< DMA high interrupt flag clear register, Address offset: 0x0C */
S} DMA_TypeDef;
S 
S/** 
S  * @brief DMA2D Controller
S  */
S
Stypedef struct
S{
S  __IO uint32_t CR;            /*!< DMA2D Control Register,                         Address offset: 0x00 */
S  __IO uint32_t ISR;           /*!< DMA2D Interrupt Status Register,                Address offset: 0x04 */
S  __IO uint32_t IFCR;          /*!< DMA2D Interrupt Flag Clear Register,            Address offset: 0x08 */
S  __IO uint32_t FGMAR;         /*!< DMA2D Foreground Memory Address Register,       Address offset: 0x0C */
S  __IO uint32_t FGOR;          /*!< DMA2D Foreground Offset Register,               Address offset: 0x10 */
S  __IO uint32_t BGMAR;         /*!< DMA2D Background Memory Address Register,       Address offset: 0x14 */
S  __IO uint32_t BGOR;          /*!< DMA2D Background Offset Register,               Address offset: 0x18 */
S  __IO uint32_t FGPFCCR;       /*!< DMA2D Foreground PFC Control Register,          Address offset: 0x1C */
S  __IO uint32_t FGCOLR;        /*!< DMA2D Foreground Color Register,                Address offset: 0x20 */
S  __IO uint32_t BGPFCCR;       /*!< DMA2D Background PFC Control Register,          Address offset: 0x24 */
S  __IO uint32_t BGCOLR;        /*!< DMA2D Background Color Register,                Address offset: 0x28 */
S  __IO uint32_t FGCMAR;        /*!< DMA2D Foreground CLUT Memory Address Register,  Address offset: 0x2C */
S  __IO uint32_t BGCMAR;        /*!< DMA2D Background CLUT Memory Address Register,  Address offset: 0x30 */
S  __IO uint32_t OPFCCR;        /*!< DMA2D Output PFC Control Register,              Address offset: 0x34 */
S  __IO uint32_t OCOLR;         /*!< DMA2D Output Color Register,                    Address offset: 0x38 */
S  __IO uint32_t OMAR;          /*!< DMA2D Output Memory Address Register,           Address offset: 0x3C */
S  __IO uint32_t OOR;           /*!< DMA2D Output Offset Register,                   Address offset: 0x40 */
S  __IO uint32_t NLR;           /*!< DMA2D Number of Line Register,                  Address offset: 0x44 */
S  __IO uint32_t LWR;           /*!< DMA2D Line Watermark Register,                  Address offset: 0x48 */
S  __IO uint32_t AMTCR;         /*!< DMA2D AHB Master Timer Configuration Register,  Address offset: 0x4C */
S  uint32_t      RESERVED[236]; /*!< Reserved, 0x50-0x3FF */
S  __IO uint32_t FGCLUT[256];   /*!< DMA2D Foreground CLUT,                          Address offset:400-7FF */
S  __IO uint32_t BGCLUT[256];   /*!< DMA2D Background CLUT,                          Address offset:800-BFF */
S} DMA2D_TypeDef;
S
S/** 
S  * @brief Ethernet MAC
S  */
S
Stypedef struct
S{
S  __IO uint32_t MACCR;
S  __IO uint32_t MACFFR;
S  __IO uint32_t MACHTHR;
S  __IO uint32_t MACHTLR;
S  __IO uint32_t MACMIIAR;
S  __IO uint32_t MACMIIDR;
S  __IO uint32_t MACFCR;
S  __IO uint32_t MACVLANTR;             /*    8 */
S  uint32_t      RESERVED0[2];
S  __IO uint32_t MACRWUFFR;             /*   11 */
S  __IO uint32_t MACPMTCSR;
S  uint32_t      RESERVED1[2];
S  __IO uint32_t MACSR;                 /*   15 */
S  __IO uint32_t MACIMR;
S  __IO uint32_t MACA0HR;
S  __IO uint32_t MACA0LR;
S  __IO uint32_t MACA1HR;
S  __IO uint32_t MACA1LR;
S  __IO uint32_t MACA2HR;
S  __IO uint32_t MACA2LR;
S  __IO uint32_t MACA3HR;
S  __IO uint32_t MACA3LR;               /*   24 */
S  uint32_t      RESERVED2[40];
S  __IO uint32_t MMCCR;                 /*   65 */
S  __IO uint32_t MMCRIR;
S  __IO uint32_t MMCTIR;
S  __IO uint32_t MMCRIMR;
S  __IO uint32_t MMCTIMR;               /*   69 */
S  uint32_t      RESERVED3[14];
S  __IO uint32_t MMCTGFSCCR;            /*   84 */
S  __IO uint32_t MMCTGFMSCCR;
S  uint32_t      RESERVED4[5];
S  __IO uint32_t MMCTGFCR;
S  uint32_t      RESERVED5[10];
S  __IO uint32_t MMCRFCECR;
S  __IO uint32_t MMCRFAECR;
S  uint32_t      RESERVED6[10];
S  __IO uint32_t MMCRGUFCR;
S  uint32_t      RESERVED7[334];
S  __IO uint32_t PTPTSCR;
S  __IO uint32_t PTPSSIR;
S  __IO uint32_t PTPTSHR;
S  __IO uint32_t PTPTSLR;
S  __IO uint32_t PTPTSHUR;
S  __IO uint32_t PTPTSLUR;
S  __IO uint32_t PTPTSAR;
S  __IO uint32_t PTPTTHR;
S  __IO uint32_t PTPTTLR;
S  __IO uint32_t RESERVED8;
S  __IO uint32_t PTPTSSR;
S  uint32_t      RESERVED9[565];
S  __IO uint32_t DMABMR;
S  __IO uint32_t DMATPDR;
S  __IO uint32_t DMARPDR;
S  __IO uint32_t DMARDLAR;
S  __IO uint32_t DMATDLAR;
S  __IO uint32_t DMASR;
S  __IO uint32_t DMAOMR;
S  __IO uint32_t DMAIER;
S  __IO uint32_t DMAMFBOCR;
S  __IO uint32_t DMARSWTR;
S  uint32_t      RESERVED10[8];
S  __IO uint32_t DMACHTDR;
S  __IO uint32_t DMACHRDR;
S  __IO uint32_t DMACHTBAR;
S  __IO uint32_t DMACHRBAR;
S} ETH_TypeDef;
S
S/** 
S  * @brief External Interrupt/Event Controller
S  */
S
Stypedef struct
S{
S  __IO uint32_t IMR;    /*!< EXTI Interrupt mask register,            Address offset: 0x00 */
S  __IO uint32_t EMR;    /*!< EXTI Event mask register,                Address offset: 0x04 */
S  __IO uint32_t RTSR;   /*!< EXTI Rising trigger selection register,  Address offset: 0x08 */
S  __IO uint32_t FTSR;   /*!< EXTI Falling trigger selection register, Address offset: 0x0C */
S  __IO uint32_t SWIER;  /*!< EXTI Software interrupt event register,  Address offset: 0x10 */
S  __IO uint32_t PR;     /*!< EXTI Pending register,                   Address offset: 0x14 */
S} EXTI_TypeDef;
S
S/** 
S  * @brief FLASH Registers
S  */
S
Stypedef struct
S{
S  __IO uint32_t ACR;      /*!< FLASH access control register,   Address offset: 0x00 */
S  __IO uint32_t KEYR;     /*!< FLASH key register,              Address offset: 0x04 */
S  __IO uint32_t OPTKEYR;  /*!< FLASH option key register,       Address offset: 0x08 */
S  __IO uint32_t SR;       /*!< FLASH status register,           Address offset: 0x0C */
S  __IO uint32_t CR;       /*!< FLASH control register,          Address offset: 0x10 */
S  __IO uint32_t OPTCR;    /*!< FLASH option control register ,  Address offset: 0x14 */
S  __IO uint32_t OPTCR1;   /*!< FLASH option control register 1, Address offset: 0x18 */
S} FLASH_TypeDef;
S
S#if defined (STM32F40_41xxx)
S/** 
S  * @brief Flexible Static Memory Controller
S  */
S
Stypedef struct
S{
S  __IO uint32_t BTCR[8];    /*!< NOR/PSRAM chip-select control register(BCR) and chip-select timing register(BTR), Address offset: 0x00-1C */   
S} FSMC_Bank1_TypeDef; 
S
S/** 
S  * @brief Flexible Static Memory Controller Bank1E
S  */
S  
Stypedef struct
S{
S  __IO uint32_t BWTR[7];    /*!< NOR/PSRAM write timing registers, Address offset: 0x104-0x11C */
S} FSMC_Bank1E_TypeDef;
S
S/** 
S  * @brief Flexible Static Memory Controller Bank2
S  */
S  
Stypedef struct
S{
S  __IO uint32_t PCR2;       /*!< NAND Flash control register 2,                       Address offset: 0x60 */
S  __IO uint32_t SR2;        /*!< NAND Flash FIFO status and interrupt register 2,     Address offset: 0x64 */
S  __IO uint32_t PMEM2;      /*!< NAND Flash Common memory space timing register 2,    Address offset: 0x68 */
S  __IO uint32_t PATT2;      /*!< NAND Flash Attribute memory space timing register 2, Address offset: 0x6C */
S  uint32_t      RESERVED0;  /*!< Reserved, 0x70                                                            */
S  __IO uint32_t ECCR2;      /*!< NAND Flash ECC result registers 2,                   Address offset: 0x74 */
S} FSMC_Bank2_TypeDef;
S
S/** 
S  * @brief Flexible Static Memory Controller Bank3
S  */
S  
Stypedef struct
S{
S  __IO uint32_t PCR3;       /*!< NAND Flash control register 3,                       Address offset: 0x80 */
S  __IO uint32_t SR3;        /*!< NAND Flash FIFO status and interrupt register 3,     Address offset: 0x84 */
S  __IO uint32_t PMEM3;      /*!< NAND Flash Common memory space timing register 3,    Address offset: 0x88 */
S  __IO uint32_t PATT3;      /*!< NAND Flash Attribute memory space timing register 3, Address offset: 0x8C */
S  uint32_t      RESERVED0;  /*!< Reserved, 0x90                                                            */
S  __IO uint32_t ECCR3;      /*!< NAND Flash ECC result registers 3,                   Address offset: 0x94 */
S} FSMC_Bank3_TypeDef;
S
S/** 
S  * @brief Flexible Static Memory Controller Bank4
S  */
S  
Stypedef struct
S{
S  __IO uint32_t PCR4;       /*!< PC Card  control register 4,                       Address offset: 0xA0 */
S  __IO uint32_t SR4;        /*!< PC Card  FIFO status and interrupt register 4,     Address offset: 0xA4 */
S  __IO uint32_t PMEM4;      /*!< PC Card  Common memory space timing register 4,    Address offset: 0xA8 */
S  __IO uint32_t PATT4;      /*!< PC Card  Attribute memory space timing register 4, Address offset: 0xAC */
S  __IO uint32_t PIO4;       /*!< PC Card  I/O space timing register 4,              Address offset: 0xB0 */
S} FSMC_Bank4_TypeDef; 
S#endif /* STM32F40_41xxx */
S
S#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
S/** 
S  * @brief Flexible Memory Controller
S  */
S
Stypedef struct
S{
S  __IO uint32_t BTCR[8];    /*!< NOR/PSRAM chip-select control register(BCR) and chip-select timing register(BTR), Address offset: 0x00-1C */   
S} FMC_Bank1_TypeDef; 
S
S/** 
S  * @brief Flexible Memory Controller Bank1E
S  */
S  
Stypedef struct
S{
S  __IO uint32_t BWTR[7];    /*!< NOR/PSRAM write timing registers, Address offset: 0x104-0x11C */
S} FMC_Bank1E_TypeDef;
S
S/** 
S  * @brief Flexible Memory Controller Bank2
S  */
S  
Stypedef struct
S{
S  __IO uint32_t PCR2;       /*!< NAND Flash control register 2,                       Address offset: 0x60 */
S  __IO uint32_t SR2;        /*!< NAND Flash FIFO status and interrupt register 2,     Address offset: 0x64 */
S  __IO uint32_t PMEM2;      /*!< NAND Flash Common memory space timing register 2,    Address offset: 0x68 */
S  __IO uint32_t PATT2;      /*!< NAND Flash Attribute memory space timing register 2, Address offset: 0x6C */
S  uint32_t      RESERVED0;  /*!< Reserved, 0x70                                                            */
S  __IO uint32_t ECCR2;      /*!< NAND Flash ECC result registers 2,                   Address offset: 0x74 */
S} FMC_Bank2_TypeDef;
S
S/** 
S  * @brief Flexible Memory Controller Bank3
S  */
S  
Stypedef struct
S{
S  __IO uint32_t PCR3;       /*!< NAND Flash control register 3,                       Address offset: 0x80 */
S  __IO uint32_t SR3;        /*!< NAND Flash FIFO status and interrupt register 3,     Address offset: 0x84 */
S  __IO uint32_t PMEM3;      /*!< NAND Flash Common memory space timing register 3,    Address offset: 0x88 */
S  __IO uint32_t PATT3;      /*!< NAND Flash Attribute memory space timing register 3, Address offset: 0x8C */
S  uint32_t      RESERVED0;  /*!< Reserved, 0x90                                                            */
S  __IO uint32_t ECCR3;      /*!< NAND Flash ECC result registers 3,                   Address offset: 0x94 */
S} FMC_Bank3_TypeDef;
S
S/** 
S  * @brief Flexible Memory Controller Bank4
S  */
S  
Stypedef struct
S{
S  __IO uint32_t PCR4;       /*!< PC Card  control register 4,                       Address offset: 0xA0 */
S  __IO uint32_t SR4;        /*!< PC Card  FIFO status and interrupt register 4,     Address offset: 0xA4 */
S  __IO uint32_t PMEM4;      /*!< PC Card  Common memory space timing register 4,    Address offset: 0xA8 */
S  __IO uint32_t PATT4;      /*!< PC Card  Attribute memory space timing register 4, Address offset: 0xAC */
S  __IO uint32_t PIO4;       /*!< PC Card  I/O space timing register 4,              Address offset: 0xB0 */
S} FMC_Bank4_TypeDef; 
S
S/** 
S  * @brief Flexible Memory Controller Bank5_6
S  */
S  
Stypedef struct
S{
S  __IO uint32_t SDCR[2];        /*!< SDRAM Control registers ,      Address offset: 0x140-0x144  */
S  __IO uint32_t SDTR[2];        /*!< SDRAM Timing registers ,       Address offset: 0x148-0x14C  */
S  __IO uint32_t SDCMR;       /*!< SDRAM Command Mode register,    Address offset: 0x150  */
S  __IO uint32_t SDRTR;       /*!< SDRAM Refresh Timer register,   Address offset: 0x154  */
S  __IO uint32_t SDSR;        /*!< SDRAM Status register,          Address offset: 0x158  */
S} FMC_Bank5_6_TypeDef; 
S#endif /* STM32F427_437xx ||  STM32F429_439xx */
S
S/** 
S  * @brief General Purpose I/O
S  */
S
Stypedef struct
S{
S  __IO uint32_t MODER;    /*!< GPIO port mode register,               Address offset: 0x00      */
S  __IO uint32_t OTYPER;   /*!< GPIO port output type register,        Address offset: 0x04      */
S  __IO uint32_t OSPEEDR;  /*!< GPIO port output speed register,       Address offset: 0x08      */
S  __IO uint32_t PUPDR;    /*!< GPIO port pull-up/pull-down register,  Address offset: 0x0C      */
S  __IO uint32_t IDR;      /*!< GPIO port input data register,         Address offset: 0x10      */
S  __IO uint32_t ODR;      /*!< GPIO port output data register,        Address offset: 0x14      */
S  __IO uint16_t BSRRL;    /*!< GPIO port bit set/reset low register,  Address offset: 0x18      */
S  __IO uint16_t BSRRH;    /*!< GPIO port bit set/reset high register, Address offset: 0x1A      */
S  __IO uint32_t LCKR;     /*!< GPIO port configuration lock register, Address offset: 0x1C      */
S  __IO uint32_t AFR[2];   /*!< GPIO alternate function registers,     Address offset: 0x20-0x24 */
S} GPIO_TypeDef;
S
S/** 
S  * @brief System configuration controller
S  */
S  
Stypedef struct
S{
S  __IO uint32_t MEMRMP;       /*!< SYSCFG memory remap register,                      Address offset: 0x00      */
S  __IO uint32_t PMC;          /*!< SYSCFG peripheral mode configuration register,     Address offset: 0x04      */
S  __IO uint32_t EXTICR[4];    /*!< SYSCFG external interrupt configuration registers, Address offset: 0x08-0x14 */
S  uint32_t      RESERVED[2];  /*!< Reserved, 0x18-0x1C                                                          */ 
S  __IO uint32_t CMPCR;        /*!< SYSCFG Compensation cell control register,         Address offset: 0x20      */
S} SYSCFG_TypeDef;
S
S/** 
S  * @brief Inter-integrated Circuit Interface
S  */
S
Stypedef struct
S{
S  __IO uint16_t CR1;        /*!< I2C Control register 1,     Address offset: 0x00 */
S  uint16_t      RESERVED0;  /*!< Reserved, 0x02                                   */
S  __IO uint16_t CR2;        /*!< I2C Control register 2,     Address offset: 0x04 */
S  uint16_t      RESERVED1;  /*!< Reserved, 0x06                                   */
S  __IO uint16_t OAR1;       /*!< I2C Own address register 1, Address offset: 0x08 */
S  uint16_t      RESERVED2;  /*!< Reserved, 0x0A                                   */
S  __IO uint16_t OAR2;       /*!< I2C Own address register 2, Address offset: 0x0C */
S  uint16_t      RESERVED3;  /*!< Reserved, 0x0E                                   */
S  __IO uint16_t DR;         /*!< I2C Data register,          Address offset: 0x10 */
S  uint16_t      RESERVED4;  /*!< Reserved, 0x12                                   */
S  __IO uint16_t SR1;        /*!< I2C Status register 1,      Address offset: 0x14 */
S  uint16_t      RESERVED5;  /*!< Reserved, 0x16                                   */
S  __IO uint16_t SR2;        /*!< I2C Status register 2,      Address offset: 0x18 */
S  uint16_t      RESERVED6;  /*!< Reserved, 0x1A                                   */
S  __IO uint16_t CCR;        /*!< I2C Clock control register, Address offset: 0x1C */
S  uint16_t      RESERVED7;  /*!< Reserved, 0x1E                                   */
S  __IO uint16_t TRISE;      /*!< I2C TRISE register,         Address offset: 0x20 */
S  uint16_t      RESERVED8;  /*!< Reserved, 0x22                                   */
S  __IO uint16_t FLTR;       /*!< I2C FLTR register,          Address offset: 0x24 */
S  uint16_t      RESERVED9;  /*!< Reserved, 0x26                                   */
S} I2C_TypeDef;
S
S/** 
S  * @brief Independent WATCHDOG
S  */
S
Stypedef struct
S{
S  __IO uint32_t KR;   /*!< IWDG Key register,       Address offset: 0x00 */
S  __IO uint32_t PR;   /*!< IWDG Prescaler register, Address offset: 0x04 */
S  __IO uint32_t RLR;  /*!< IWDG Reload register,    Address offset: 0x08 */
S  __IO uint32_t SR;   /*!< IWDG Status register,    Address offset: 0x0C */
S} IWDG_TypeDef;
S
S/** 
S  * @brief LCD-TFT Display Controller
S  */
S  
Stypedef struct
S{
S  uint32_t      RESERVED0[2];  /*!< Reserved, 0x00-0x04 */
S  __IO uint32_t SSCR;          /*!< LTDC Synchronization Size Configuration Register,    Address offset: 0x08 */
S  __IO uint32_t BPCR;          /*!< LTDC Back Porch Configuration Register,              Address offset: 0x0C */
S  __IO uint32_t AWCR;          /*!< LTDC Active Width Configuration Register,            Address offset: 0x10 */
S  __IO uint32_t TWCR;          /*!< LTDC Total Width Configuration Register,             Address offset: 0x14 */
S  __IO uint32_t GCR;           /*!< LTDC Global Control Register,                        Address offset: 0x18 */
S  uint32_t      RESERVED1[2];  /*!< Reserved, 0x1C-0x20 */
S  __IO uint32_t SRCR;          /*!< LTDC Shadow Reload Configuration Register,           Address offset: 0x24 */
S  uint32_t      RESERVED2[1];  /*!< Reserved, 0x28 */
S  __IO uint32_t BCCR;          /*!< LTDC Background Color Configuration Register,        Address offset: 0x2C */
S  uint32_t      RESERVED3[1];  /*!< Reserved, 0x30 */
S  __IO uint32_t IER;           /*!< LTDC Interrupt Enable Register,                      Address offset: 0x34 */
S  __IO uint32_t ISR;           /*!< LTDC Interrupt Status Register,                      Address offset: 0x38 */
S  __IO uint32_t ICR;           /*!< LTDC Interrupt Clear Register,                       Address offset: 0x3C */
S  __IO uint32_t LIPCR;         /*!< LTDC Line Interrupt Position Configuration Register, Address offset: 0x40 */
S  __IO uint32_t CPSR;          /*!< LTDC Current Position Status Register,               Address offset: 0x44 */
S  __IO uint32_t CDSR;         /*!< LTDC Current Display Status Register,                       Address offset: 0x48 */
S} LTDC_TypeDef;  
S
S/** 
S  * @brief LCD-TFT Display layer x Controller
S  */
S  
Stypedef struct
S{  
S  __IO uint32_t CR;            /*!< LTDC Layerx Control Register                                  Address offset: 0x84 */
S  __IO uint32_t WHPCR;         /*!< LTDC Layerx Window Horizontal Position Configuration Register Address offset: 0x88 */
S  __IO uint32_t WVPCR;         /*!< LTDC Layerx Window Vertical Position Configuration Register   Address offset: 0x8C */
S  __IO uint32_t CKCR;          /*!< LTDC Layerx Color Keying Configuration Register               Address offset: 0x90 */
S  __IO uint32_t PFCR;          /*!< LTDC Layerx Pixel Format Configuration Register               Address offset: 0x94 */
S  __IO uint32_t CACR;          /*!< LTDC Layerx Constant Alpha Configuration Register             Address offset: 0x98 */
S  __IO uint32_t DCCR;          /*!< LTDC Layerx Default Color Configuration Register              Address offset: 0x9C */
S  __IO uint32_t BFCR;          /*!< LTDC Layerx Blending Factors Configuration Register           Address offset: 0xA0 */
S  uint32_t      RESERVED0[2];  /*!< Reserved */
S  __IO uint32_t CFBAR;         /*!< LTDC Layerx Color Frame Buffer Address Register               Address offset: 0xAC */
S  __IO uint32_t CFBLR;         /*!< LTDC Layerx Color Frame Buffer Length Register                Address offset: 0xB0 */
S  __IO uint32_t CFBLNR;        /*!< LTDC Layerx ColorFrame Buffer Line Number Register            Address offset: 0xB4 */
S  uint32_t      RESERVED1[3];  /*!< Reserved */
S  __IO uint32_t CLUTWR;         /*!< LTDC Layerx CLUT Write Register                               Address offset: 0x144 */
S
S} LTDC_Layer_TypeDef;
S
S/** 
S  * @brief Power Control
S  */
S
Stypedef struct
S{
S  __IO uint32_t CR;   /*!< PWR power control register,        Address offset: 0x00 */
S  __IO uint32_t CSR;  /*!< PWR power control/status register, Address offset: 0x04 */
S} PWR_TypeDef;
S
S/** 
S  * @brief Reset and Clock Control
S  */
S
Stypedef struct
S{
S  __IO uint32_t CR;            /*!< RCC clock control register,                                  Address offset: 0x00 */
S  __IO uint32_t PLLCFGR;       /*!< RCC PLL configuration register,                              Address offset: 0x04 */
S  __IO uint32_t CFGR;          /*!< RCC clock configuration register,                            Address offset: 0x08 */
S  __IO uint32_t CIR;           /*!< RCC clock interrupt register,                                Address offset: 0x0C */
S  __IO uint32_t AHB1RSTR;      /*!< RCC AHB1 peripheral reset register,                          Address offset: 0x10 */
S  __IO uint32_t AHB2RSTR;      /*!< RCC AHB2 peripheral reset register,                          Address offset: 0x14 */
S  __IO uint32_t AHB3RSTR;      /*!< RCC AHB3 peripheral reset register,                          Address offset: 0x18 */
S  uint32_t      RESERVED0;     /*!< Reserved, 0x1C                                                                    */
S  __IO uint32_t APB1RSTR;      /*!< RCC APB1 peripheral reset register,                          Address offset: 0x20 */
S  __IO uint32_t APB2RSTR;      /*!< RCC APB2 peripheral reset register,                          Address offset: 0x24 */
S  uint32_t      RESERVED1[2];  /*!< Reserved, 0x28-0x2C                                                               */
S  __IO uint32_t AHB1ENR;       /*!< RCC AHB1 peripheral clock register,                          Address offset: 0x30 */
S  __IO uint32_t AHB2ENR;       /*!< RCC AHB2 peripheral clock register,                          Address offset: 0x34 */
S  __IO uint32_t AHB3ENR;       /*!< RCC AHB3 peripheral clock register,                          Address offset: 0x38 */
S  uint32_t      RESERVED2;     /*!< Reserved, 0x3C                                                                    */
S  __IO uint32_t APB1ENR;       /*!< RCC APB1 peripheral clock enable register,                   Address offset: 0x40 */
S  __IO uint32_t APB2ENR;       /*!< RCC APB2 peripheral clock enable register,                   Address offset: 0x44 */
S  uint32_t      RESERVED3[2];  /*!< Reserved, 0x48-0x4C                                                               */
S  __IO uint32_t AHB1LPENR;     /*!< RCC AHB1 peripheral clock enable in low power mode register, Address offset: 0x50 */
S  __IO uint32_t AHB2LPENR;     /*!< RCC AHB2 peripheral clock enable in low power mode register, Address offset: 0x54 */
S  __IO uint32_t AHB3LPENR;     /*!< RCC AHB3 peripheral clock enable in low power mode register, Address offset: 0x58 */
S  uint32_t      RESERVED4;     /*!< Reserved, 0x5C                                                                    */
S  __IO uint32_t APB1LPENR;     /*!< RCC APB1 peripheral clock enable in low power mode register, Address offset: 0x60 */
S  __IO uint32_t APB2LPENR;     /*!< RCC APB2 peripheral clock enable in low power mode register, Address offset: 0x64 */
S  uint32_t      RESERVED5[2];  /*!< Reserved, 0x68-0x6C                                                               */
S  __IO uint32_t BDCR;          /*!< RCC Backup domain control register,                          Address offset: 0x70 */
S  __IO uint32_t CSR;           /*!< RCC clock control & status register,                         Address offset: 0x74 */
S  uint32_t      RESERVED6[2];  /*!< Reserved, 0x78-0x7C                                                               */
S  __IO uint32_t SSCGR;         /*!< RCC spread spectrum clock generation register,               Address offset: 0x80 */
S  __IO uint32_t PLLI2SCFGR;    /*!< RCC PLLI2S configuration register,                           Address offset: 0x84 */
S  __IO uint32_t PLLSAICFGR;    /*!< RCC PLLSAI configuration register,                           Address offset: 0x88 */
S  __IO uint32_t DCKCFGR;       /*!< RCC Dedicated Clocks configuration register,                 Address offset: 0x8C */
S
S} RCC_TypeDef;
S
S/** 
S  * @brief Real-Time Clock
S  */
S
Stypedef struct
S{
S  __IO uint32_t TR;      /*!< RTC time register,                                        Address offset: 0x00 */
S  __IO uint32_t DR;      /*!< RTC date register,                                        Address offset: 0x04 */
S  __IO uint32_t CR;      /*!< RTC control register,                                     Address offset: 0x08 */
S  __IO uint32_t ISR;     /*!< RTC initialization and status register,                   Address offset: 0x0C */
S  __IO uint32_t PRER;    /*!< RTC prescaler register,                                   Address offset: 0x10 */
S  __IO uint32_t WUTR;    /*!< RTC wakeup timer register,                                Address offset: 0x14 */
S  __IO uint32_t CALIBR;  /*!< RTC calibration register,                                 Address offset: 0x18 */
S  __IO uint32_t ALRMAR;  /*!< RTC alarm A register,                                     Address offset: 0x1C */
S  __IO uint32_t ALRMBR;  /*!< RTC alarm B register,                                     Address offset: 0x20 */
S  __IO uint32_t WPR;     /*!< RTC write protection register,                            Address offset: 0x24 */
S  __IO uint32_t SSR;     /*!< RTC sub second register,                                  Address offset: 0x28 */
S  __IO uint32_t SHIFTR;  /*!< RTC shift control register,                               Address offset: 0x2C */
S  __IO uint32_t TSTR;    /*!< RTC time stamp time register,                             Address offset: 0x30 */
S  __IO uint32_t TSDR;    /*!< RTC time stamp date register,                             Address offset: 0x34 */
S  __IO uint32_t TSSSR;   /*!< RTC time-stamp sub second register,                       Address offset: 0x38 */
S  __IO uint32_t CALR;    /*!< RTC calibration register,                                 Address offset: 0x3C */
S  __IO uint32_t TAFCR;   /*!< RTC tamper and alternate function configuration register, Address offset: 0x40 */
S  __IO uint32_t ALRMASSR;/*!< RTC alarm A sub second register,                          Address offset: 0x44 */
S  __IO uint32_t ALRMBSSR;/*!< RTC alarm B sub second register,                          Address offset: 0x48 */
S  uint32_t RESERVED7;    /*!< Reserved, 0x4C                                                                 */
S  __IO uint32_t BKP0R;   /*!< RTC backup register 1,                                    Address offset: 0x50 */
S  __IO uint32_t BKP1R;   /*!< RTC backup register 1,                                    Address offset: 0x54 */
S  __IO uint32_t BKP2R;   /*!< RTC backup register 2,                                    Address offset: 0x58 */
S  __IO uint32_t BKP3R;   /*!< RTC backup register 3,                                    Address offset: 0x5C */
S  __IO uint32_t BKP4R;   /*!< RTC backup register 4,                                    Address offset: 0x60 */
S  __IO uint32_t BKP5R;   /*!< RTC backup register 5,                                    Address offset: 0x64 */
S  __IO uint32_t BKP6R;   /*!< RTC backup register 6,                                    Address offset: 0x68 */
S  __IO uint32_t BKP7R;   /*!< RTC backup register 7,                                    Address offset: 0x6C */
S  __IO uint32_t BKP8R;   /*!< RTC backup register 8,                                    Address offset: 0x70 */
S  __IO uint32_t BKP9R;   /*!< RTC backup register 9,                                    Address offset: 0x74 */
S  __IO uint32_t BKP10R;  /*!< RTC backup register 10,                                   Address offset: 0x78 */
S  __IO uint32_t BKP11R;  /*!< RTC backup register 11,                                   Address offset: 0x7C */
S  __IO uint32_t BKP12R;  /*!< RTC backup register 12,                                   Address offset: 0x80 */
S  __IO uint32_t BKP13R;  /*!< RTC backup register 13,                                   Address offset: 0x84 */
S  __IO uint32_t BKP14R;  /*!< RTC backup register 14,                                   Address offset: 0x88 */
S  __IO uint32_t BKP15R;  /*!< RTC backup register 15,                                   Address offset: 0x8C */
S  __IO uint32_t BKP16R;  /*!< RTC backup register 16,                                   Address offset: 0x90 */
S  __IO uint32_t BKP17R;  /*!< RTC backup register 17,                                   Address offset: 0x94 */
S  __IO uint32_t BKP18R;  /*!< RTC backup register 18,                                   Address offset: 0x98 */
S  __IO uint32_t BKP19R;  /*!< RTC backup register 19,                                   Address offset: 0x9C */
S} RTC_TypeDef;
S
S
S/** 
S  * @brief Serial Audio Interface
S  */
S  
Stypedef struct
S{
S  __IO uint32_t GCR;      /*!< SAI global configuration register,        Address offset: 0x00 */
S} SAI_TypeDef;
S
Stypedef struct
S{
S  __IO uint32_t CR1;      /*!< SAI block x configuration register 1,     Address offset: 0x04 */
S  __IO uint32_t CR2;      /*!< SAI block x configuration register 2,     Address offset: 0x08 */
S  __IO uint32_t FRCR;     /*!< SAI block x frame configuration register, Address offset: 0x0C */
S  __IO uint32_t SLOTR;    /*!< SAI block x slot register,                Address offset: 0x10 */
S  __IO uint32_t IMR;      /*!< SAI block x interrupt mask register,      Address offset: 0x14 */
S  __IO uint32_t SR;       /*!< SAI block x status register,              Address offset: 0x18 */
S  __IO uint32_t CLRFR;    /*!< SAI block x clear flag register,          Address offset: 0x1C */
S  __IO uint32_t DR;       /*!< SAI block x data register,                Address offset: 0x20 */
S} SAI_Block_TypeDef;
S
S/** 
S  * @brief SD host Interface
S  */
S
Stypedef struct
S{
S  __IO uint32_t POWER;          /*!< SDIO power control register,    Address offset: 0x00 */
S  __IO uint32_t CLKCR;          /*!< SDI clock control register,     Address offset: 0x04 */
S  __IO uint32_t ARG;            /*!< SDIO argument register,         Address offset: 0x08 */
S  __IO uint32_t CMD;            /*!< SDIO command register,          Address offset: 0x0C */
S  __I uint32_t  RESPCMD;        /*!< SDIO command response register, Address offset: 0x10 */
S  __I uint32_t  RESP1;          /*!< SDIO response 1 register,       Address offset: 0x14 */
S  __I uint32_t  RESP2;          /*!< SDIO response 2 register,       Address offset: 0x18 */
S  __I uint32_t  RESP3;          /*!< SDIO response 3 register,       Address offset: 0x1C */
S  __I uint32_t  RESP4;          /*!< SDIO response 4 register,       Address offset: 0x20 */
S  __IO uint32_t DTIMER;         /*!< SDIO data timer register,       Address offset: 0x24 */
S  __IO uint32_t DLEN;           /*!< SDIO data length register,      Address offset: 0x28 */
S  __IO uint32_t DCTRL;          /*!< SDIO data control register,     Address offset: 0x2C */
S  __I uint32_t  DCOUNT;         /*!< SDIO data counter register,     Address offset: 0x30 */
S  __I uint32_t  STA;            /*!< SDIO status register,           Address offset: 0x34 */
S  __IO uint32_t ICR;            /*!< SDIO interrupt clear register,  Address offset: 0x38 */
S  __IO uint32_t MASK;           /*!< SDIO mask register,             Address offset: 0x3C */
S  uint32_t      RESERVED0[2];   /*!< Reserved, 0x40-0x44                                  */
S  __I uint32_t  FIFOCNT;        /*!< SDIO FIFO counter register,     Address offset: 0x48 */
S  uint32_t      RESERVED1[13];  /*!< Reserved, 0x4C-0x7C                                  */
S  __IO uint32_t FIFO;           /*!< SDIO data FIFO register,        Address offset: 0x80 */
S} SDIO_TypeDef;
S
S/** 
S  * @brief Serial Peripheral Interface
S  */
S
Stypedef struct
S{
S  __IO uint16_t CR1;        /*!< SPI control register 1 (not used in I2S mode),      Address offset: 0x00 */
S  uint16_t      RESERVED0;  /*!< Reserved, 0x02                                                           */
S  __IO uint16_t CR2;        /*!< SPI control register 2,                             Address offset: 0x04 */
S  uint16_t      RESERVED1;  /*!< Reserved, 0x06                                                           */
S  __IO uint16_t SR;         /*!< SPI status register,                                Address offset: 0x08 */
S  uint16_t      RESERVED2;  /*!< Reserved, 0x0A                                                           */
S  __IO uint16_t DR;         /*!< SPI data register,                                  Address offset: 0x0C */
S  uint16_t      RESERVED3;  /*!< Reserved, 0x0E                                                           */
S  __IO uint16_t CRCPR;      /*!< SPI CRC polynomial register (not used in I2S mode), Address offset: 0x10 */
S  uint16_t      RESERVED4;  /*!< Reserved, 0x12                                                           */
S  __IO uint16_t RXCRCR;     /*!< SPI RX CRC register (not used in I2S mode),         Address offset: 0x14 */
S  uint16_t      RESERVED5;  /*!< Reserved, 0x16                                                           */
S  __IO uint16_t TXCRCR;     /*!< SPI TX CRC register (not used in I2S mode),         Address offset: 0x18 */
S  uint16_t      RESERVED6;  /*!< Reserved, 0x1A                                                           */
S  __IO uint16_t I2SCFGR;    /*!< SPI_I2S configuration register,                     Address offset: 0x1C */
S  uint16_t      RESERVED7;  /*!< Reserved, 0x1E                                                           */
S  __IO uint16_t I2SPR;      /*!< SPI_I2S prescaler register,                         Address offset: 0x20 */
S  uint16_t      RESERVED8;  /*!< Reserved, 0x22                                                           */
S} SPI_TypeDef;
S
S/** 
S  * @brief TIM
S  */
S
Stypedef struct
S{
S  __IO uint16_t CR1;         /*!< TIM control register 1,              Address offset: 0x00 */
S  uint16_t      RESERVED0;   /*!< Reserved, 0x02                                            */
S  __IO uint16_t CR2;         /*!< TIM control register 2,              Address offset: 0x04 */
S  uint16_t      RESERVED1;   /*!< Reserved, 0x06                                            */
S  __IO uint16_t SMCR;        /*!< TIM slave mode control register,     Address offset: 0x08 */
S  uint16_t      RESERVED2;   /*!< Reserved, 0x0A                                            */
S  __IO uint16_t DIER;        /*!< TIM DMA/interrupt enable register,   Address offset: 0x0C */
S  uint16_t      RESERVED3;   /*!< Reserved, 0x0E                                            */
S  __IO uint16_t SR;          /*!< TIM status register,                 Address offset: 0x10 */
S  uint16_t      RESERVED4;   /*!< Reserved, 0x12                                            */
S  __IO uint16_t EGR;         /*!< TIM event generation register,       Address offset: 0x14 */
S  uint16_t      RESERVED5;   /*!< Reserved, 0x16                                            */
S  __IO uint16_t CCMR1;       /*!< TIM capture/compare mode register 1, Address offset: 0x18 */
S  uint16_t      RESERVED6;   /*!< Reserved, 0x1A                                            */
S  __IO uint16_t CCMR2;       /*!< TIM capture/compare mode register 2, Address offset: 0x1C */
S  uint16_t      RESERVED7;   /*!< Reserved, 0x1E                                            */
S  __IO uint16_t CCER;        /*!< TIM capture/compare enable register, Address offset: 0x20 */
S  uint16_t      RESERVED8;   /*!< Reserved, 0x22                                            */
S  __IO uint32_t CNT;         /*!< TIM counter register,                Address offset: 0x24 */
S  __IO uint16_t PSC;         /*!< TIM prescaler,                       Address offset: 0x28 */
S  uint16_t      RESERVED9;   /*!< Reserved, 0x2A                                            */
S  __IO uint32_t ARR;         /*!< TIM auto-reload register,            Address offset: 0x2C */
S  __IO uint16_t RCR;         /*!< TIM repetition counter register,     Address offset: 0x30 */
S  uint16_t      RESERVED10;  /*!< Reserved, 0x32                                            */
S  __IO uint32_t CCR1;        /*!< TIM capture/compare register 1,      Address offset: 0x34 */
S  __IO uint32_t CCR2;        /*!< TIM capture/compare register 2,      Address offset: 0x38 */
S  __IO uint32_t CCR3;        /*!< TIM capture/compare register 3,      Address offset: 0x3C */
S  __IO uint32_t CCR4;        /*!< TIM capture/compare register 4,      Address offset: 0x40 */
S  __IO uint16_t BDTR;        /*!< TIM break and dead-time register,    Address offset: 0x44 */
S  uint16_t      RESERVED11;  /*!< Reserved, 0x46                                            */
S  __IO uint16_t DCR;         /*!< TIM DMA control register,            Address offset: 0x48 */
S  uint16_t      RESERVED12;  /*!< Reserved, 0x4A                                            */
S  __IO uint16_t DMAR;        /*!< TIM DMA address for full transfer,   Address offset: 0x4C */
S  uint16_t      RESERVED13;  /*!< Reserved, 0x4E                                            */
S  __IO uint16_t OR;          /*!< TIM option register,                 Address offset: 0x50 */
S  uint16_t      RESERVED14;  /*!< Reserved, 0x52                                            */
S} TIM_TypeDef;
S
S/** 
S  * @brief Universal Synchronous Asynchronous Receiver Transmitter
S  */
S 
Stypedef struct
S{
S  __IO uint16_t SR;         /*!< USART Status register,                   Address offset: 0x00 */
S  uint16_t      RESERVED0;  /*!< Reserved, 0x02                                                */
S  __IO uint16_t DR;         /*!< USART Data register,                     Address offset: 0x04 */
S  uint16_t      RESERVED1;  /*!< Reserved, 0x06                                                */
S  __IO uint16_t BRR;        /*!< USART Baud rate register,                Address offset: 0x08 */
S  uint16_t      RESERVED2;  /*!< Reserved, 0x0A                                                */
S  __IO uint16_t CR1;        /*!< USART Control register 1,                Address offset: 0x0C */
S  uint16_t      RESERVED3;  /*!< Reserved, 0x0E                                                */
S  __IO uint16_t CR2;        /*!< USART Control register 2,                Address offset: 0x10 */
S  uint16_t      RESERVED4;  /*!< Reserved, 0x12                                                */
S  __IO uint16_t CR3;        /*!< USART Control register 3,                Address offset: 0x14 */
S  uint16_t      RESERVED5;  /*!< Reserved, 0x16                                                */
S  __IO uint16_t GTPR;       /*!< USART Guard time and prescaler register, Address offset: 0x18 */
S  uint16_t      RESERVED6;  /*!< Reserved, 0x1A                                                */
S} USART_TypeDef;
S
S/** 
S  * @brief Window WATCHDOG
S  */
S
Stypedef struct
S{
S  __IO uint32_t CR;   /*!< WWDG Control register,       Address offset: 0x00 */
S  __IO uint32_t CFR;  /*!< WWDG Configuration register, Address offset: 0x04 */
S  __IO uint32_t SR;   /*!< WWDG Status register,        Address offset: 0x08 */
S} WWDG_TypeDef;
S
S/** 
S  * @brief Crypto Processor
S  */
S
Stypedef struct
S{
S  __IO uint32_t CR;         /*!< CRYP control register,                                    Address offset: 0x00 */
S  __IO uint32_t SR;         /*!< CRYP status register,                                     Address offset: 0x04 */
S  __IO uint32_t DR;         /*!< CRYP data input register,                                 Address offset: 0x08 */
S  __IO uint32_t DOUT;       /*!< CRYP data output register,                                Address offset: 0x0C */
S  __IO uint32_t DMACR;      /*!< CRYP DMA control register,                                Address offset: 0x10 */
S  __IO uint32_t IMSCR;      /*!< CRYP interrupt mask set/clear register,                   Address offset: 0x14 */
S  __IO uint32_t RISR;       /*!< CRYP raw interrupt status register,                       Address offset: 0x18 */
S  __IO uint32_t MISR;       /*!< CRYP masked interrupt status register,                    Address offset: 0x1C */
S  __IO uint32_t K0LR;       /*!< CRYP key left  register 0,                                Address offset: 0x20 */
S  __IO uint32_t K0RR;       /*!< CRYP key right register 0,                                Address offset: 0x24 */
S  __IO uint32_t K1LR;       /*!< CRYP key left  register 1,                                Address offset: 0x28 */
S  __IO uint32_t K1RR;       /*!< CRYP key right register 1,                                Address offset: 0x2C */
S  __IO uint32_t K2LR;       /*!< CRYP key left  register 2,                                Address offset: 0x30 */
S  __IO uint32_t K2RR;       /*!< CRYP key right register 2,                                Address offset: 0x34 */
S  __IO uint32_t K3LR;       /*!< CRYP key left  register 3,                                Address offset: 0x38 */
S  __IO uint32_t K3RR;       /*!< CRYP key right register 3,                                Address offset: 0x3C */
S  __IO uint32_t IV0LR;      /*!< CRYP initialization vector left-word  register 0,         Address offset: 0x40 */
S  __IO uint32_t IV0RR;      /*!< CRYP initialization vector right-word register 0,         Address offset: 0x44 */
S  __IO uint32_t IV1LR;      /*!< CRYP initialization vector left-word  register 1,         Address offset: 0x48 */
S  __IO uint32_t IV1RR;      /*!< CRYP initialization vector right-word register 1,         Address offset: 0x4C */
S  __IO uint32_t CSGCMCCM0R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 0,        Address offset: 0x50 */
S  __IO uint32_t CSGCMCCM1R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 1,        Address offset: 0x54 */
S  __IO uint32_t CSGCMCCM2R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 2,        Address offset: 0x58 */
S  __IO uint32_t CSGCMCCM3R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 3,        Address offset: 0x5C */
S  __IO uint32_t CSGCMCCM4R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 4,        Address offset: 0x60 */
S  __IO uint32_t CSGCMCCM5R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 5,        Address offset: 0x64 */
S  __IO uint32_t CSGCMCCM6R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 6,        Address offset: 0x68 */
S  __IO uint32_t CSGCMCCM7R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 7,        Address offset: 0x6C */
S  __IO uint32_t CSGCM0R;    /*!< CRYP GCM/GMAC context swap register 0,                    Address offset: 0x70 */
S  __IO uint32_t CSGCM1R;    /*!< CRYP GCM/GMAC context swap register 1,                    Address offset: 0x74 */
S  __IO uint32_t CSGCM2R;    /*!< CRYP GCM/GMAC context swap register 2,                    Address offset: 0x78 */
S  __IO uint32_t CSGCM3R;    /*!< CRYP GCM/GMAC context swap register 3,                    Address offset: 0x7C */
S  __IO uint32_t CSGCM4R;    /*!< CRYP GCM/GMAC context swap register 4,                    Address offset: 0x80 */
S  __IO uint32_t CSGCM5R;    /*!< CRYP GCM/GMAC context swap register 5,                    Address offset: 0x84 */
S  __IO uint32_t CSGCM6R;    /*!< CRYP GCM/GMAC context swap register 6,                    Address offset: 0x88 */
S  __IO uint32_t CSGCM7R;    /*!< CRYP GCM/GMAC context swap register 7,                    Address offset: 0x8C */
S} CRYP_TypeDef;
S
S/** 
S  * @brief HASH
S  */
S  
Stypedef struct 
S{
S  __IO uint32_t CR;               /*!< HASH control register,          Address offset: 0x00        */
S  __IO uint32_t DIN;              /*!< HASH data input register,       Address offset: 0x04        */
S  __IO uint32_t STR;              /*!< HASH start register,            Address offset: 0x08        */
S  __IO uint32_t HR[5];            /*!< HASH digest registers,          Address offset: 0x0C-0x1C   */
S  __IO uint32_t IMR;              /*!< HASH interrupt enable register, Address offset: 0x20        */
S  __IO uint32_t SR;               /*!< HASH status register,           Address offset: 0x24        */
S       uint32_t RESERVED[52];     /*!< Reserved, 0x28-0xF4                                         */
S  __IO uint32_t CSR[54];          /*!< HASH context swap registers,    Address offset: 0x0F8-0x1CC */
S} HASH_TypeDef;
S
S/** 
S  * @brief HASH_DIGEST
S  */
S  
Stypedef struct 
S{
S  __IO uint32_t HR[8];     /*!< HASH digest registers,          Address offset: 0x310-0x32C */ 
S} HASH_DIGEST_TypeDef;
S
S/** 
S  * @brief RNG
S  */
S  
Stypedef struct 
S{
S  __IO uint32_t CR;  /*!< RNG control register, Address offset: 0x00 */
S  __IO uint32_t SR;  /*!< RNG status register,  Address offset: 0x04 */
S  __IO uint32_t DR;  /*!< RNG data register,    Address offset: 0x08 */
S} RNG_TypeDef;
S
S/**
S  * @}
S  */
S  
S/** @addtogroup Peripheral_memory_map
S  * @{
S  */
S#define FLASH_BASE            ((uint32_t)0x08000000) /*!< FLASH(up to 1 MB) base address in the alias region                         */
S#define CCMDATARAM_BASE       ((uint32_t)0x10000000) /*!< CCM(core coupled memory) data RAM(64 KB) base address in the alias region  */
S#define SRAM1_BASE            ((uint32_t)0x20000000) /*!< SRAM1(112 KB) base address in the alias region                             */
S#define SRAM2_BASE            ((uint32_t)0x2001C000) /*!< SRAM2(16 KB) base address in the alias region                              */
S#define SRAM3_BASE            ((uint32_t)0x20020000) /*!< SRAM3(64 KB) base address in the alias region                              */
S#define PERIPH_BASE           ((uint32_t)0x40000000) /*!< Peripheral base address in the alias region                                */
S#define BKPSRAM_BASE          ((uint32_t)0x40024000) /*!< Backup SRAM(4 KB) base address in the alias region                         */
S
S#if defined (STM32F40_41xxx)
S#define FSMC_R_BASE           ((uint32_t)0xA0000000) /*!< FSMC registers base address                                                */
S#endif /* STM32F40_41xxx */
S
S#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
S#define FMC_R_BASE            ((uint32_t)0xA0000000) /*!< FMC registers base address                                                 */
S#endif /* STM32F427_437xx ||  STM32F429_439xx */
S
S#define CCMDATARAM_BB_BASE    ((uint32_t)0x12000000) /*!< CCM(core coupled memory) data RAM(64 KB) base address in the bit-band region  */
S#define SRAM1_BB_BASE         ((uint32_t)0x22000000) /*!< SRAM1(112 KB) base address in the bit-band region                             */
S#define SRAM2_BB_BASE         ((uint32_t)0x2201C000) /*!< SRAM2(16 KB) base address in the bit-band region                              */
S#define SRAM3_BB_BASE         ((uint32_t)0x22400000) /*!< SRAM3(64 KB) base address in the bit-band region                              */
S#define PERIPH_BB_BASE        ((uint32_t)0x42000000) /*!< Peripheral base address in the bit-band region                                */
S#define BKPSRAM_BB_BASE       ((uint32_t)0x42024000) /*!< Backup SRAM(4 KB) base address in the bit-band region                         */
S
S/* Legacy defines */
S#define SRAM_BASE             SRAM1_BASE
S#define SRAM_BB_BASE          SRAM1_BB_BASE
S
S
S/*!< Peripheral memory map */
S#define APB1PERIPH_BASE       PERIPH_BASE
S#define APB2PERIPH_BASE       (PERIPH_BASE + 0x00010000)
S#define AHB1PERIPH_BASE       (PERIPH_BASE + 0x00020000)
S#define AHB2PERIPH_BASE       (PERIPH_BASE + 0x10000000)
S
S/*!< APB1 peripherals */
S#define TIM2_BASE             (APB1PERIPH_BASE + 0x0000)
S#define TIM3_BASE             (APB1PERIPH_BASE + 0x0400)
S#define TIM4_BASE             (APB1PERIPH_BASE + 0x0800)
S#define TIM5_BASE             (APB1PERIPH_BASE + 0x0C00)
S#define TIM6_BASE             (APB1PERIPH_BASE + 0x1000)
S#define TIM7_BASE             (APB1PERIPH_BASE + 0x1400)
S#define TIM12_BASE            (APB1PERIPH_BASE + 0x1800)
S#define TIM13_BASE            (APB1PERIPH_BASE + 0x1C00)
S#define TIM14_BASE            (APB1PERIPH_BASE + 0x2000)
S#define RTC_BASE              (APB1PERIPH_BASE + 0x2800)
S#define WWDG_BASE             (APB1PERIPH_BASE + 0x2C00)
S#define IWDG_BASE             (APB1PERIPH_BASE + 0x3000)
S#define I2S2ext_BASE          (APB1PERIPH_BASE + 0x3400)
S#define SPI2_BASE             (APB1PERIPH_BASE + 0x3800)
S#define SPI3_BASE             (APB1PERIPH_BASE + 0x3C00)
S#define I2S3ext_BASE          (APB1PERIPH_BASE + 0x4000)
S#define USART2_BASE           (APB1PERIPH_BASE + 0x4400)
S#define USART3_BASE           (APB1PERIPH_BASE + 0x4800)
S#define UART4_BASE            (APB1PERIPH_BASE + 0x4C00)
S#define UART5_BASE            (APB1PERIPH_BASE + 0x5000)
S#define I2C1_BASE             (APB1PERIPH_BASE + 0x5400)
S#define I2C2_BASE             (APB1PERIPH_BASE + 0x5800)
S#define I2C3_BASE             (APB1PERIPH_BASE + 0x5C00)
S#define CAN1_BASE             (APB1PERIPH_BASE + 0x6400)
S#define CAN2_BASE             (APB1PERIPH_BASE + 0x6800)
S#define PWR_BASE              (APB1PERIPH_BASE + 0x7000)
S#define DAC_BASE              (APB1PERIPH_BASE + 0x7400)
S#define UART7_BASE            (APB1PERIPH_BASE + 0x7800)
S#define UART8_BASE            (APB1PERIPH_BASE + 0x7C00)
S
S/*!< APB2 peripherals */
S#define TIM1_BASE             (APB2PERIPH_BASE + 0x0000)
S#define TIM8_BASE             (APB2PERIPH_BASE + 0x0400)
S#define USART1_BASE           (APB2PERIPH_BASE + 0x1000)
S#define USART6_BASE           (APB2PERIPH_BASE + 0x1400)
S#define ADC1_BASE             (APB2PERIPH_BASE + 0x2000)
S#define ADC2_BASE             (APB2PERIPH_BASE + 0x2100)
S#define ADC3_BASE             (APB2PERIPH_BASE + 0x2200)
S#define ADC_BASE              (APB2PERIPH_BASE + 0x2300)
S#define SDIO_BASE             (APB2PERIPH_BASE + 0x2C00)
S#define SPI1_BASE             (APB2PERIPH_BASE + 0x3000)
S#define SPI4_BASE             (APB2PERIPH_BASE + 0x3400)
S#define SYSCFG_BASE           (APB2PERIPH_BASE + 0x3800)
S#define EXTI_BASE             (APB2PERIPH_BASE + 0x3C00)
S#define TIM9_BASE             (APB2PERIPH_BASE + 0x4000)
S#define TIM10_BASE            (APB2PERIPH_BASE + 0x4400)
S#define TIM11_BASE            (APB2PERIPH_BASE + 0x4800)
S#define SPI5_BASE             (APB2PERIPH_BASE + 0x5000)
S#define SPI6_BASE             (APB2PERIPH_BASE + 0x5400)
S#define SAI1_BASE             (APB2PERIPH_BASE + 0x5800)
S#define SAI1_Block_A_BASE     (SAI1_BASE + 0x004)
S#define SAI1_Block_B_BASE     (SAI1_BASE + 0x024)
S#define LTDC_BASE             (APB2PERIPH_BASE + 0x6800)
S#define LTDC_Layer1_BASE      (LTDC_BASE + 0x84)
S#define LTDC_Layer2_BASE      (LTDC_BASE + 0x104) 
S
S/*!< AHB1 peripherals */
S#define GPIOA_BASE            (AHB1PERIPH_BASE + 0x0000)
S#define GPIOB_BASE            (AHB1PERIPH_BASE + 0x0400)
S#define GPIOC_BASE            (AHB1PERIPH_BASE + 0x0800)
S#define GPIOD_BASE            (AHB1PERIPH_BASE + 0x0C00)
S#define GPIOE_BASE            (AHB1PERIPH_BASE + 0x1000)
S#define GPIOF_BASE            (AHB1PERIPH_BASE + 0x1400)
S#define GPIOG_BASE            (AHB1PERIPH_BASE + 0x1800)
S#define GPIOH_BASE            (AHB1PERIPH_BASE + 0x1C00)
S#define GPIOI_BASE            (AHB1PERIPH_BASE + 0x2000)
S#define GPIOJ_BASE            (AHB1PERIPH_BASE + 0x2400)
S#define GPIOK_BASE            (AHB1PERIPH_BASE + 0x2800)
S#define CRC_BASE              (AHB1PERIPH_BASE + 0x3000)
S#define RCC_BASE              (AHB1PERIPH_BASE + 0x3800)
S#define FLASH_R_BASE          (AHB1PERIPH_BASE + 0x3C00)
S#define DMA1_BASE             (AHB1PERIPH_BASE + 0x6000)
S#define DMA1_Stream0_BASE     (DMA1_BASE + 0x010)
S#define DMA1_Stream1_BASE     (DMA1_BASE + 0x028)
S#define DMA1_Stream2_BASE     (DMA1_BASE + 0x040)
S#define DMA1_Stream3_BASE     (DMA1_BASE + 0x058)
S#define DMA1_Stream4_BASE     (DMA1_BASE + 0x070)
S#define DMA1_Stream5_BASE     (DMA1_BASE + 0x088)
S#define DMA1_Stream6_BASE     (DMA1_BASE + 0x0A0)
S#define DMA1_Stream7_BASE     (DMA1_BASE + 0x0B8)
S#define DMA2_BASE             (AHB1PERIPH_BASE + 0x6400)
S#define DMA2_Stream0_BASE     (DMA2_BASE + 0x010)
S#define DMA2_Stream1_BASE     (DMA2_BASE + 0x028)
S#define DMA2_Stream2_BASE     (DMA2_BASE + 0x040)
S#define DMA2_Stream3_BASE     (DMA2_BASE + 0x058)
S#define DMA2_Stream4_BASE     (DMA2_BASE + 0x070)
S#define DMA2_Stream5_BASE     (DMA2_BASE + 0x088)
S#define DMA2_Stream6_BASE     (DMA2_BASE + 0x0A0)
S#define DMA2_Stream7_BASE     (DMA2_BASE + 0x0B8)
S#define ETH_BASE              (AHB1PERIPH_BASE + 0x8000)
S#define ETH_MAC_BASE          (ETH_BASE)
S#define ETH_MMC_BASE          (ETH_BASE + 0x0100)
S#define ETH_PTP_BASE          (ETH_BASE + 0x0700)
S#define ETH_DMA_BASE          (ETH_BASE + 0x1000)
S#define DMA2D_BASE            (AHB1PERIPH_BASE + 0xB000)
S
S/*!< AHB2 peripherals */
S#define DCMI_BASE             (AHB2PERIPH_BASE + 0x50000)
S#define CRYP_BASE             (AHB2PERIPH_BASE + 0x60000)
S#define HASH_BASE             (AHB2PERIPH_BASE + 0x60400)
S#define HASH_DIGEST_BASE      (AHB2PERIPH_BASE + 0x60710)
S#define RNG_BASE              (AHB2PERIPH_BASE + 0x60800)
S
S#if defined (STM32F40_41xxx)
S/*!< FSMC Bankx registers base address */
S#define FSMC_Bank1_R_BASE     (FSMC_R_BASE + 0x0000)
S#define FSMC_Bank1E_R_BASE    (FSMC_R_BASE + 0x0104)
S#define FSMC_Bank2_R_BASE     (FSMC_R_BASE + 0x0060)
S#define FSMC_Bank3_R_BASE     (FSMC_R_BASE + 0x0080)
S#define FSMC_Bank4_R_BASE     (FSMC_R_BASE + 0x00A0)
S#endif /* STM32F40_41xxx */
S
S#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
S/*!< FMC Bankx registers base address */
S#define FMC_Bank1_R_BASE      (FMC_R_BASE + 0x0000)
S#define FMC_Bank1E_R_BASE     (FMC_R_BASE + 0x0104)
S#define FMC_Bank2_R_BASE      (FMC_R_BASE + 0x0060)
S#define FMC_Bank3_R_BASE      (FMC_R_BASE + 0x0080)
S#define FMC_Bank4_R_BASE      (FMC_R_BASE + 0x00A0)
S#define FMC_Bank5_6_R_BASE    (FMC_R_BASE + 0x0140)
S#endif /* STM32F427_437xx ||  STM32F429_439xx */
S
S/* Debug MCU registers base address */
S#define DBGMCU_BASE           ((uint32_t )0xE0042000)
S
S/**
S  * @}
S  */
S  
S/** @addtogroup Peripheral_declaration
S  * @{
S  */  
S#define TIM2                ((TIM_TypeDef *) TIM2_BASE)
S#define TIM3                ((TIM_TypeDef *) TIM3_BASE)
S#define TIM4                ((TIM_TypeDef *) TIM4_BASE)
S#define TIM5                ((TIM_TypeDef *) TIM5_BASE)
S#define TIM6                ((TIM_TypeDef *) TIM6_BASE)
S#define TIM7                ((TIM_TypeDef *) TIM7_BASE)
S#define TIM12               ((TIM_TypeDef *) TIM12_BASE)
S#define TIM13               ((TIM_TypeDef *) TIM13_BASE)
S#define TIM14               ((TIM_TypeDef *) TIM14_BASE)
S#define RTC                 ((RTC_TypeDef *) RTC_BASE)
S#define WWDG                ((WWDG_TypeDef *) WWDG_BASE)
S#define IWDG                ((IWDG_TypeDef *) IWDG_BASE)
S#define I2S2ext             ((SPI_TypeDef *) I2S2ext_BASE)
S#define SPI2                ((SPI_TypeDef *) SPI2_BASE)
S#define SPI3                ((SPI_TypeDef *) SPI3_BASE)
S#define I2S3ext             ((SPI_TypeDef *) I2S3ext_BASE)
S#define USART2              ((USART_TypeDef *) USART2_BASE)
S#define USART3              ((USART_TypeDef *) USART3_BASE)
S#define UART4               ((USART_TypeDef *) UART4_BASE)
S#define UART5               ((USART_TypeDef *) UART5_BASE)
S#define I2C1                ((I2C_TypeDef *) I2C1_BASE)
S#define I2C2                ((I2C_TypeDef *) I2C2_BASE)
S#define I2C3                ((I2C_TypeDef *) I2C3_BASE)
S#define CAN1                ((CAN_TypeDef *) CAN1_BASE)
S#define CAN2                ((CAN_TypeDef *) CAN2_BASE)
S#define PWR                 ((PWR_TypeDef *) PWR_BASE)
S#define DAC                 ((DAC_TypeDef *) DAC_BASE)
S#define UART7               ((USART_TypeDef *) UART7_BASE)
S#define UART8               ((USART_TypeDef *) UART8_BASE)
S#define TIM1                ((TIM_TypeDef *) TIM1_BASE)
S#define TIM8                ((TIM_TypeDef *) TIM8_BASE)
S#define USART1              ((USART_TypeDef *) USART1_BASE)
S#define USART6              ((USART_TypeDef *) USART6_BASE)
S#define ADC                 ((ADC_Common_TypeDef *) ADC_BASE)
S#define ADC1                ((ADC_TypeDef *) ADC1_BASE)
S#define ADC2                ((ADC_TypeDef *) ADC2_BASE)
S#define ADC3                ((ADC_TypeDef *) ADC3_BASE)
S#define SDIO                ((SDIO_TypeDef *) SDIO_BASE)
S#define SPI1                ((SPI_TypeDef *) SPI1_BASE) 
S#define SPI4                ((SPI_TypeDef *) SPI4_BASE)
S#define SYSCFG              ((SYSCFG_TypeDef *) SYSCFG_BASE)
S#define EXTI                ((EXTI_TypeDef *) EXTI_BASE)
S#define TIM9                ((TIM_TypeDef *) TIM9_BASE)
S#define TIM10               ((TIM_TypeDef *) TIM10_BASE)
S#define TIM11               ((TIM_TypeDef *) TIM11_BASE)
S#define SPI5                ((SPI_TypeDef *) SPI5_BASE)
S#define SPI6                ((SPI_TypeDef *) SPI6_BASE)
S#define SAI1                ((SAI_TypeDef *) SAI1_BASE)
S#define SAI1_Block_A        ((SAI_Block_TypeDef *)SAI1_Block_A_BASE)
S#define SAI1_Block_B        ((SAI_Block_TypeDef *)SAI1_Block_B_BASE)
S#define LTDC                ((LTDC_TypeDef *)LTDC_BASE)
S#define LTDC_Layer1         ((LTDC_Layer_TypeDef *)LTDC_Layer1_BASE)
S#define LTDC_Layer2         ((LTDC_Layer_TypeDef *)LTDC_Layer2_BASE)
S#define GPIOA               ((GPIO_TypeDef *) GPIOA_BASE)
S#define GPIOB               ((GPIO_TypeDef *) GPIOB_BASE)
S#define GPIOC               ((GPIO_TypeDef *) GPIOC_BASE)
S#define GPIOD               ((GPIO_TypeDef *) GPIOD_BASE)
S#define GPIOE               ((GPIO_TypeDef *) GPIOE_BASE)
S#define GPIOF               ((GPIO_TypeDef *) GPIOF_BASE)
S#define GPIOG               ((GPIO_TypeDef *) GPIOG_BASE)
S#define GPIOH               ((GPIO_TypeDef *) GPIOH_BASE)
S#define GPIOI               ((GPIO_TypeDef *) GPIOI_BASE)
S#define GPIOJ               ((GPIO_TypeDef *) GPIOJ_BASE)
S#define GPIOK               ((GPIO_TypeDef *) GPIOK_BASE)
S#define CRC                 ((CRC_TypeDef *) CRC_BASE)
S#define RCC                 ((RCC_TypeDef *) RCC_BASE)
S#define FLASH               ((FLASH_TypeDef *) FLASH_R_BASE)
S#define DMA1                ((DMA_TypeDef *) DMA1_BASE)
S#define DMA1_Stream0        ((DMA_Stream_TypeDef *) DMA1_Stream0_BASE)
S#define DMA1_Stream1        ((DMA_Stream_TypeDef *) DMA1_Stream1_BASE)
S#define DMA1_Stream2        ((DMA_Stream_TypeDef *) DMA1_Stream2_BASE)
S#define DMA1_Stream3        ((DMA_Stream_TypeDef *) DMA1_Stream3_BASE)
S#define DMA1_Stream4        ((DMA_Stream_TypeDef *) DMA1_Stream4_BASE)
S#define DMA1_Stream5        ((DMA_Stream_TypeDef *) DMA1_Stream5_BASE)
S#define DMA1_Stream6        ((DMA_Stream_TypeDef *) DMA1_Stream6_BASE)
S#define DMA1_Stream7        ((DMA_Stream_TypeDef *) DMA1_Stream7_BASE)
S#define DMA2                ((DMA_TypeDef *) DMA2_BASE)
S#define DMA2_Stream0        ((DMA_Stream_TypeDef *) DMA2_Stream0_BASE)
S#define DMA2_Stream1        ((DMA_Stream_TypeDef *) DMA2_Stream1_BASE)
S#define DMA2_Stream2        ((DMA_Stream_TypeDef *) DMA2_Stream2_BASE)
S#define DMA2_Stream3        ((DMA_Stream_TypeDef *) DMA2_Stream3_BASE)
S#define DMA2_Stream4        ((DMA_Stream_TypeDef *) DMA2_Stream4_BASE)
S#define DMA2_Stream5        ((DMA_Stream_TypeDef *) DMA2_Stream5_BASE)
S#define DMA2_Stream6        ((DMA_Stream_TypeDef *) DMA2_Stream6_BASE)
S#define DMA2_Stream7        ((DMA_Stream_TypeDef *) DMA2_Stream7_BASE)
S#define ETH                 ((ETH_TypeDef *) ETH_BASE)  
S#define DMA2D               ((DMA2D_TypeDef *)DMA2D_BASE)
S#define DCMI                ((DCMI_TypeDef *) DCMI_BASE)
S#define CRYP                ((CRYP_TypeDef *) CRYP_BASE)
S#define HASH                ((HASH_TypeDef *) HASH_BASE)
S#define HASH_DIGEST         ((HASH_DIGEST_TypeDef *) HASH_DIGEST_BASE)
S#define RNG                 ((RNG_TypeDef *) RNG_BASE)
S
S#if defined (STM32F40_41xxx)
S#define FSMC_Bank1          ((FSMC_Bank1_TypeDef *) FSMC_Bank1_R_BASE)
S#define FSMC_Bank1E         ((FSMC_Bank1E_TypeDef *) FSMC_Bank1E_R_BASE)
S#define FSMC_Bank2          ((FSMC_Bank2_TypeDef *) FSMC_Bank2_R_BASE)
S#define FSMC_Bank3          ((FSMC_Bank3_TypeDef *) FSMC_Bank3_R_BASE)
S#define FSMC_Bank4          ((FSMC_Bank4_TypeDef *) FSMC_Bank4_R_BASE)
S#endif /* STM32F40_41xxx */
S
S#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
S#define FMC_Bank1           ((FMC_Bank1_TypeDef *) FMC_Bank1_R_BASE)
S#define FMC_Bank1E          ((FMC_Bank1E_TypeDef *) FMC_Bank1E_R_BASE)
S#define FMC_Bank2           ((FMC_Bank2_TypeDef *) FMC_Bank2_R_BASE)
S#define FMC_Bank3           ((FMC_Bank3_TypeDef *) FMC_Bank3_R_BASE)
S#define FMC_Bank4           ((FMC_Bank4_TypeDef *) FMC_Bank4_R_BASE)
S#define FMC_Bank5_6         ((FMC_Bank5_6_TypeDef *) FMC_Bank5_6_R_BASE)
S#endif /* STM32F427_437xx ||  STM32F429_439xx */
S
S#define DBGMCU              ((DBGMCU_TypeDef *) DBGMCU_BASE)
S
S/**
S  * @}
S  */
S
S/** @addtogroup Exported_constants
S  * @{
S  */
S  
S  /** @addtogroup Peripheral_Registers_Bits_Definition
S  * @{
S  */
S    
S/******************************************************************************/
S/*                         Peripheral Registers_Bits_Definition               */
S/******************************************************************************/
S
S/******************************************************************************/
S/*                                                                            */
S/*                        Analog to Digital Converter                         */
S/*                                                                            */
S/******************************************************************************/
S/********************  Bit definition for ADC_SR register  ********************/
S#define  ADC_SR_AWD                          ((uint8_t)0x01)               /*!<Analog watchdog flag               */
S#define  ADC_SR_EOC                          ((uint8_t)0x02)               /*!<End of conversion                  */
S#define  ADC_SR_JEOC                         ((uint8_t)0x04)               /*!<Injected channel end of conversion */
S#define  ADC_SR_JSTRT                        ((uint8_t)0x08)               /*!<Injected channel Start flag        */
S#define  ADC_SR_STRT                         ((uint8_t)0x10)               /*!<Regular channel Start flag         */
S#define  ADC_SR_OVR                          ((uint8_t)0x20)               /*!<Overrun flag                       */
S
S/*******************  Bit definition for ADC_CR1 register  ********************/
S#define  ADC_CR1_AWDCH                       ((uint32_t)0x0000001F)        /*!<AWDCH[4:0] bits (Analog watchdog channel select bits) */
S#define  ADC_CR1_AWDCH_0                     ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  ADC_CR1_AWDCH_1                     ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  ADC_CR1_AWDCH_2                     ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  ADC_CR1_AWDCH_3                     ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  ADC_CR1_AWDCH_4                     ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  ADC_CR1_EOCIE                       ((uint32_t)0x00000020)        /*!<Interrupt enable for EOC                              */
S#define  ADC_CR1_AWDIE                       ((uint32_t)0x00000040)        /*!<AAnalog Watchdog interrupt enable                     */
S#define  ADC_CR1_JEOCIE                      ((uint32_t)0x00000080)        /*!<Interrupt enable for injected channels                */
S#define  ADC_CR1_SCAN                        ((uint32_t)0x00000100)        /*!<Scan mode                                             */
S#define  ADC_CR1_AWDSGL                      ((uint32_t)0x00000200)        /*!<Enable the watchdog on a single channel in scan mode  */
S#define  ADC_CR1_JAUTO                       ((uint32_t)0x00000400)        /*!<Automatic injected group conversion                   */
S#define  ADC_CR1_DISCEN                      ((uint32_t)0x00000800)        /*!<Discontinuous mode on regular channels                */
S#define  ADC_CR1_JDISCEN                     ((uint32_t)0x00001000)        /*!<Discontinuous mode on injected channels               */
S#define  ADC_CR1_DISCNUM                     ((uint32_t)0x0000E000)        /*!<DISCNUM[2:0] bits (Discontinuous mode channel count)  */
S#define  ADC_CR1_DISCNUM_0                   ((uint32_t)0x00002000)        /*!<Bit 0 */
S#define  ADC_CR1_DISCNUM_1                   ((uint32_t)0x00004000)        /*!<Bit 1 */
S#define  ADC_CR1_DISCNUM_2                   ((uint32_t)0x00008000)        /*!<Bit 2 */
S#define  ADC_CR1_JAWDEN                      ((uint32_t)0x00400000)        /*!<Analog watchdog enable on injected channels           */
S#define  ADC_CR1_AWDEN                       ((uint32_t)0x00800000)        /*!<Analog watchdog enable on regular channels            */
S#define  ADC_CR1_RES                         ((uint32_t)0x03000000)        /*!<RES[2:0] bits (Resolution)                            */
S#define  ADC_CR1_RES_0                       ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  ADC_CR1_RES_1                       ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  ADC_CR1_OVRIE                       ((uint32_t)0x04000000)         /*!<overrun interrupt enable                              */
S  
S/*******************  Bit definition for ADC_CR2 register  ********************/
S#define  ADC_CR2_ADON                        ((uint32_t)0x00000001)        /*!<A/D Converter ON / OFF             */
S#define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!<Continuous Conversion              */
S#define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!<Direct Memory access mode          */
S#define  ADC_CR2_DDS                         ((uint32_t)0x00000200)        /*!<DMA disable selection (Single ADC) */
S#define  ADC_CR2_EOCS                        ((uint32_t)0x00000400)        /*!<End of conversion selection        */
S#define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!<Data Alignment                     */
S#define  ADC_CR2_JEXTSEL                     ((uint32_t)0x000F0000)        /*!<JEXTSEL[3:0] bits (External event select for injected group) */
S#define  ADC_CR2_JEXTSEL_0                   ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  ADC_CR2_JEXTSEL_1                   ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  ADC_CR2_JEXTSEL_2                   ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  ADC_CR2_JEXTSEL_3                   ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  ADC_CR2_JEXTEN                      ((uint32_t)0x00300000)        /*!<JEXTEN[1:0] bits (External Trigger Conversion mode for injected channelsp) */
S#define  ADC_CR2_JEXTEN_0                    ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  ADC_CR2_JEXTEN_1                    ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  ADC_CR2_JSWSTART                    ((uint32_t)0x00400000)        /*!<Start Conversion of injected channels */
S#define  ADC_CR2_EXTSEL                      ((uint32_t)0x0F000000)        /*!<EXTSEL[3:0] bits (External Event Select for regular group) */
S#define  ADC_CR2_EXTSEL_0                    ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  ADC_CR2_EXTSEL_1                    ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  ADC_CR2_EXTSEL_2                    ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  ADC_CR2_EXTSEL_3                    ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  ADC_CR2_EXTEN                       ((uint32_t)0x30000000)        /*!<EXTEN[1:0] bits (External Trigger Conversion mode for regular channelsp) */
S#define  ADC_CR2_EXTEN_0                     ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  ADC_CR2_EXTEN_1                     ((uint32_t)0x20000000)        /*!<Bit 1 */
S#define  ADC_CR2_SWSTART                     ((uint32_t)0x40000000)        /*!<Start Conversion of regular channels */
S
S/******************  Bit definition for ADC_SMPR1 register  *******************/
S#define  ADC_SMPR1_SMP10                     ((uint32_t)0x00000007)        /*!<SMP10[2:0] bits (Channel 10 Sample time selection) */
S#define  ADC_SMPR1_SMP10_0                   ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  ADC_SMPR1_SMP10_1                   ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  ADC_SMPR1_SMP10_2                   ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  ADC_SMPR1_SMP11                     ((uint32_t)0x00000038)        /*!<SMP11[2:0] bits (Channel 11 Sample time selection) */
S#define  ADC_SMPR1_SMP11_0                   ((uint32_t)0x00000008)        /*!<Bit 0 */
S#define  ADC_SMPR1_SMP11_1                   ((uint32_t)0x00000010)        /*!<Bit 1 */
S#define  ADC_SMPR1_SMP11_2                   ((uint32_t)0x00000020)        /*!<Bit 2 */
S#define  ADC_SMPR1_SMP12                     ((uint32_t)0x000001C0)        /*!<SMP12[2:0] bits (Channel 12 Sample time selection) */
S#define  ADC_SMPR1_SMP12_0                   ((uint32_t)0x00000040)        /*!<Bit 0 */
S#define  ADC_SMPR1_SMP12_1                   ((uint32_t)0x00000080)        /*!<Bit 1 */
S#define  ADC_SMPR1_SMP12_2                   ((uint32_t)0x00000100)        /*!<Bit 2 */
S#define  ADC_SMPR1_SMP13                     ((uint32_t)0x00000E00)        /*!<SMP13[2:0] bits (Channel 13 Sample time selection) */
S#define  ADC_SMPR1_SMP13_0                   ((uint32_t)0x00000200)        /*!<Bit 0 */
S#define  ADC_SMPR1_SMP13_1                   ((uint32_t)0x00000400)        /*!<Bit 1 */
S#define  ADC_SMPR1_SMP13_2                   ((uint32_t)0x00000800)        /*!<Bit 2 */
S#define  ADC_SMPR1_SMP14                     ((uint32_t)0x00007000)        /*!<SMP14[2:0] bits (Channel 14 Sample time selection) */
S#define  ADC_SMPR1_SMP14_0                   ((uint32_t)0x00001000)        /*!<Bit 0 */
S#define  ADC_SMPR1_SMP14_1                   ((uint32_t)0x00002000)        /*!<Bit 1 */
S#define  ADC_SMPR1_SMP14_2                   ((uint32_t)0x00004000)        /*!<Bit 2 */
S#define  ADC_SMPR1_SMP15                     ((uint32_t)0x00038000)        /*!<SMP15[2:0] bits (Channel 15 Sample time selection) */
S#define  ADC_SMPR1_SMP15_0                   ((uint32_t)0x00008000)        /*!<Bit 0 */
S#define  ADC_SMPR1_SMP15_1                   ((uint32_t)0x00010000)        /*!<Bit 1 */
S#define  ADC_SMPR1_SMP15_2                   ((uint32_t)0x00020000)        /*!<Bit 2 */
S#define  ADC_SMPR1_SMP16                     ((uint32_t)0x001C0000)        /*!<SMP16[2:0] bits (Channel 16 Sample time selection) */
S#define  ADC_SMPR1_SMP16_0                   ((uint32_t)0x00040000)        /*!<Bit 0 */
S#define  ADC_SMPR1_SMP16_1                   ((uint32_t)0x00080000)        /*!<Bit 1 */
S#define  ADC_SMPR1_SMP16_2                   ((uint32_t)0x00100000)        /*!<Bit 2 */
S#define  ADC_SMPR1_SMP17                     ((uint32_t)0x00E00000)        /*!<SMP17[2:0] bits (Channel 17 Sample time selection) */
S#define  ADC_SMPR1_SMP17_0                   ((uint32_t)0x00200000)        /*!<Bit 0 */
S#define  ADC_SMPR1_SMP17_1                   ((uint32_t)0x00400000)        /*!<Bit 1 */
S#define  ADC_SMPR1_SMP17_2                   ((uint32_t)0x00800000)        /*!<Bit 2 */
S#define  ADC_SMPR1_SMP18                     ((uint32_t)0x07000000)        /*!<SMP18[2:0] bits (Channel 18 Sample time selection) */
S#define  ADC_SMPR1_SMP18_0                   ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  ADC_SMPR1_SMP18_1                   ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  ADC_SMPR1_SMP18_2                   ((uint32_t)0x04000000)        /*!<Bit 2 */
S
S/******************  Bit definition for ADC_SMPR2 register  *******************/
S#define  ADC_SMPR2_SMP0                      ((uint32_t)0x00000007)        /*!<SMP0[2:0] bits (Channel 0 Sample time selection) */
S#define  ADC_SMPR2_SMP0_0                    ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  ADC_SMPR2_SMP0_1                    ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  ADC_SMPR2_SMP0_2                    ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  ADC_SMPR2_SMP1                      ((uint32_t)0x00000038)        /*!<SMP1[2:0] bits (Channel 1 Sample time selection) */
S#define  ADC_SMPR2_SMP1_0                    ((uint32_t)0x00000008)        /*!<Bit 0 */
S#define  ADC_SMPR2_SMP1_1                    ((uint32_t)0x00000010)        /*!<Bit 1 */
S#define  ADC_SMPR2_SMP1_2                    ((uint32_t)0x00000020)        /*!<Bit 2 */
S#define  ADC_SMPR2_SMP2                      ((uint32_t)0x000001C0)        /*!<SMP2[2:0] bits (Channel 2 Sample time selection) */
S#define  ADC_SMPR2_SMP2_0                    ((uint32_t)0x00000040)        /*!<Bit 0 */
S#define  ADC_SMPR2_SMP2_1                    ((uint32_t)0x00000080)        /*!<Bit 1 */
S#define  ADC_SMPR2_SMP2_2                    ((uint32_t)0x00000100)        /*!<Bit 2 */
S#define  ADC_SMPR2_SMP3                      ((uint32_t)0x00000E00)        /*!<SMP3[2:0] bits (Channel 3 Sample time selection) */
S#define  ADC_SMPR2_SMP3_0                    ((uint32_t)0x00000200)        /*!<Bit 0 */
S#define  ADC_SMPR2_SMP3_1                    ((uint32_t)0x00000400)        /*!<Bit 1 */
S#define  ADC_SMPR2_SMP3_2                    ((uint32_t)0x00000800)        /*!<Bit 2 */
S#define  ADC_SMPR2_SMP4                      ((uint32_t)0x00007000)        /*!<SMP4[2:0] bits (Channel 4 Sample time selection) */
S#define  ADC_SMPR2_SMP4_0                    ((uint32_t)0x00001000)        /*!<Bit 0 */
S#define  ADC_SMPR2_SMP4_1                    ((uint32_t)0x00002000)        /*!<Bit 1 */
S#define  ADC_SMPR2_SMP4_2                    ((uint32_t)0x00004000)        /*!<Bit 2 */
S#define  ADC_SMPR2_SMP5                      ((uint32_t)0x00038000)        /*!<SMP5[2:0] bits (Channel 5 Sample time selection) */
S#define  ADC_SMPR2_SMP5_0                    ((uint32_t)0x00008000)        /*!<Bit 0 */
S#define  ADC_SMPR2_SMP5_1                    ((uint32_t)0x00010000)        /*!<Bit 1 */
S#define  ADC_SMPR2_SMP5_2                    ((uint32_t)0x00020000)        /*!<Bit 2 */
S#define  ADC_SMPR2_SMP6                      ((uint32_t)0x001C0000)        /*!<SMP6[2:0] bits (Channel 6 Sample time selection) */
S#define  ADC_SMPR2_SMP6_0                    ((uint32_t)0x00040000)        /*!<Bit 0 */
S#define  ADC_SMPR2_SMP6_1                    ((uint32_t)0x00080000)        /*!<Bit 1 */
S#define  ADC_SMPR2_SMP6_2                    ((uint32_t)0x00100000)        /*!<Bit 2 */
S#define  ADC_SMPR2_SMP7                      ((uint32_t)0x00E00000)        /*!<SMP7[2:0] bits (Channel 7 Sample time selection) */
S#define  ADC_SMPR2_SMP7_0                    ((uint32_t)0x00200000)        /*!<Bit 0 */
S#define  ADC_SMPR2_SMP7_1                    ((uint32_t)0x00400000)        /*!<Bit 1 */
S#define  ADC_SMPR2_SMP7_2                    ((uint32_t)0x00800000)        /*!<Bit 2 */
S#define  ADC_SMPR2_SMP8                      ((uint32_t)0x07000000)        /*!<SMP8[2:0] bits (Channel 8 Sample time selection) */
S#define  ADC_SMPR2_SMP8_0                    ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  ADC_SMPR2_SMP8_1                    ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  ADC_SMPR2_SMP8_2                    ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  ADC_SMPR2_SMP9                      ((uint32_t)0x38000000)        /*!<SMP9[2:0] bits (Channel 9 Sample time selection) */
S#define  ADC_SMPR2_SMP9_0                    ((uint32_t)0x08000000)        /*!<Bit 0 */
S#define  ADC_SMPR2_SMP9_1                    ((uint32_t)0x10000000)        /*!<Bit 1 */
S#define  ADC_SMPR2_SMP9_2                    ((uint32_t)0x20000000)        /*!<Bit 2 */
S
S/******************  Bit definition for ADC_JOFR1 register  *******************/
S#define  ADC_JOFR1_JOFFSET1                  ((uint16_t)0x0FFF)            /*!<Data offset for injected channel 1 */
S
S/******************  Bit definition for ADC_JOFR2 register  *******************/
S#define  ADC_JOFR2_JOFFSET2                  ((uint16_t)0x0FFF)            /*!<Data offset for injected channel 2 */
S
S/******************  Bit definition for ADC_JOFR3 register  *******************/
S#define  ADC_JOFR3_JOFFSET3                  ((uint16_t)0x0FFF)            /*!<Data offset for injected channel 3 */
S
S/******************  Bit definition for ADC_JOFR4 register  *******************/
S#define  ADC_JOFR4_JOFFSET4                  ((uint16_t)0x0FFF)            /*!<Data offset for injected channel 4 */
S
S/*******************  Bit definition for ADC_HTR register  ********************/
S#define  ADC_HTR_HT                          ((uint16_t)0x0FFF)            /*!<Analog watchdog high threshold */
S
S/*******************  Bit definition for ADC_LTR register  ********************/
S#define  ADC_LTR_LT                          ((uint16_t)0x0FFF)            /*!<Analog watchdog low threshold */
S
S/*******************  Bit definition for ADC_SQR1 register  *******************/
S#define  ADC_SQR1_SQ13                       ((uint32_t)0x0000001F)        /*!<SQ13[4:0] bits (13th conversion in regular sequence) */
S#define  ADC_SQR1_SQ13_0                     ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  ADC_SQR1_SQ13_1                     ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  ADC_SQR1_SQ13_2                     ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  ADC_SQR1_SQ13_3                     ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  ADC_SQR1_SQ13_4                     ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  ADC_SQR1_SQ14                       ((uint32_t)0x000003E0)        /*!<SQ14[4:0] bits (14th conversion in regular sequence) */
S#define  ADC_SQR1_SQ14_0                     ((uint32_t)0x00000020)        /*!<Bit 0 */
S#define  ADC_SQR1_SQ14_1                     ((uint32_t)0x00000040)        /*!<Bit 1 */
S#define  ADC_SQR1_SQ14_2                     ((uint32_t)0x00000080)        /*!<Bit 2 */
S#define  ADC_SQR1_SQ14_3                     ((uint32_t)0x00000100)        /*!<Bit 3 */
S#define  ADC_SQR1_SQ14_4                     ((uint32_t)0x00000200)        /*!<Bit 4 */
S#define  ADC_SQR1_SQ15                       ((uint32_t)0x00007C00)        /*!<SQ15[4:0] bits (15th conversion in regular sequence) */
S#define  ADC_SQR1_SQ15_0                     ((uint32_t)0x00000400)        /*!<Bit 0 */
S#define  ADC_SQR1_SQ15_1                     ((uint32_t)0x00000800)        /*!<Bit 1 */
S#define  ADC_SQR1_SQ15_2                     ((uint32_t)0x00001000)        /*!<Bit 2 */
S#define  ADC_SQR1_SQ15_3                     ((uint32_t)0x00002000)        /*!<Bit 3 */
S#define  ADC_SQR1_SQ15_4                     ((uint32_t)0x00004000)        /*!<Bit 4 */
S#define  ADC_SQR1_SQ16                       ((uint32_t)0x000F8000)        /*!<SQ16[4:0] bits (16th conversion in regular sequence) */
S#define  ADC_SQR1_SQ16_0                     ((uint32_t)0x00008000)        /*!<Bit 0 */
S#define  ADC_SQR1_SQ16_1                     ((uint32_t)0x00010000)        /*!<Bit 1 */
S#define  ADC_SQR1_SQ16_2                     ((uint32_t)0x00020000)        /*!<Bit 2 */
S#define  ADC_SQR1_SQ16_3                     ((uint32_t)0x00040000)        /*!<Bit 3 */
S#define  ADC_SQR1_SQ16_4                     ((uint32_t)0x00080000)        /*!<Bit 4 */
S#define  ADC_SQR1_L                          ((uint32_t)0x00F00000)        /*!<L[3:0] bits (Regular channel sequence length) */
S#define  ADC_SQR1_L_0                        ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  ADC_SQR1_L_1                        ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  ADC_SQR1_L_2                        ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  ADC_SQR1_L_3                        ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S/*******************  Bit definition for ADC_SQR2 register  *******************/
S#define  ADC_SQR2_SQ7                        ((uint32_t)0x0000001F)        /*!<SQ7[4:0] bits (7th conversion in regular sequence) */
S#define  ADC_SQR2_SQ7_0                      ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  ADC_SQR2_SQ7_1                      ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  ADC_SQR2_SQ7_2                      ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  ADC_SQR2_SQ7_3                      ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  ADC_SQR2_SQ7_4                      ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  ADC_SQR2_SQ8                        ((uint32_t)0x000003E0)        /*!<SQ8[4:0] bits (8th conversion in regular sequence) */
S#define  ADC_SQR2_SQ8_0                      ((uint32_t)0x00000020)        /*!<Bit 0 */
S#define  ADC_SQR2_SQ8_1                      ((uint32_t)0x00000040)        /*!<Bit 1 */
S#define  ADC_SQR2_SQ8_2                      ((uint32_t)0x00000080)        /*!<Bit 2 */
S#define  ADC_SQR2_SQ8_3                      ((uint32_t)0x00000100)        /*!<Bit 3 */
S#define  ADC_SQR2_SQ8_4                      ((uint32_t)0x00000200)        /*!<Bit 4 */
S#define  ADC_SQR2_SQ9                        ((uint32_t)0x00007C00)        /*!<SQ9[4:0] bits (9th conversion in regular sequence) */
S#define  ADC_SQR2_SQ9_0                      ((uint32_t)0x00000400)        /*!<Bit 0 */
S#define  ADC_SQR2_SQ9_1                      ((uint32_t)0x00000800)        /*!<Bit 1 */
S#define  ADC_SQR2_SQ9_2                      ((uint32_t)0x00001000)        /*!<Bit 2 */
S#define  ADC_SQR2_SQ9_3                      ((uint32_t)0x00002000)        /*!<Bit 3 */
S#define  ADC_SQR2_SQ9_4                      ((uint32_t)0x00004000)        /*!<Bit 4 */
S#define  ADC_SQR2_SQ10                       ((uint32_t)0x000F8000)        /*!<SQ10[4:0] bits (10th conversion in regular sequence) */
S#define  ADC_SQR2_SQ10_0                     ((uint32_t)0x00008000)        /*!<Bit 0 */
S#define  ADC_SQR2_SQ10_1                     ((uint32_t)0x00010000)        /*!<Bit 1 */
S#define  ADC_SQR2_SQ10_2                     ((uint32_t)0x00020000)        /*!<Bit 2 */
S#define  ADC_SQR2_SQ10_3                     ((uint32_t)0x00040000)        /*!<Bit 3 */
S#define  ADC_SQR2_SQ10_4                     ((uint32_t)0x00080000)        /*!<Bit 4 */
S#define  ADC_SQR2_SQ11                       ((uint32_t)0x01F00000)        /*!<SQ11[4:0] bits (11th conversion in regular sequence) */
S#define  ADC_SQR2_SQ11_0                     ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  ADC_SQR2_SQ11_1                     ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  ADC_SQR2_SQ11_2                     ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  ADC_SQR2_SQ11_3                     ((uint32_t)0x00800000)        /*!<Bit 3 */
S#define  ADC_SQR2_SQ11_4                     ((uint32_t)0x01000000)        /*!<Bit 4 */
S#define  ADC_SQR2_SQ12                       ((uint32_t)0x3E000000)        /*!<SQ12[4:0] bits (12th conversion in regular sequence) */
S#define  ADC_SQR2_SQ12_0                     ((uint32_t)0x02000000)        /*!<Bit 0 */
S#define  ADC_SQR2_SQ12_1                     ((uint32_t)0x04000000)        /*!<Bit 1 */
S#define  ADC_SQR2_SQ12_2                     ((uint32_t)0x08000000)        /*!<Bit 2 */
S#define  ADC_SQR2_SQ12_3                     ((uint32_t)0x10000000)        /*!<Bit 3 */
S#define  ADC_SQR2_SQ12_4                     ((uint32_t)0x20000000)        /*!<Bit 4 */
S
S/*******************  Bit definition for ADC_SQR3 register  *******************/
S#define  ADC_SQR3_SQ1                        ((uint32_t)0x0000001F)        /*!<SQ1[4:0] bits (1st conversion in regular sequence) */
S#define  ADC_SQR3_SQ1_0                      ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  ADC_SQR3_SQ1_1                      ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  ADC_SQR3_SQ1_2                      ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  ADC_SQR3_SQ1_3                      ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  ADC_SQR3_SQ1_4                      ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  ADC_SQR3_SQ2                        ((uint32_t)0x000003E0)        /*!<SQ2[4:0] bits (2nd conversion in regular sequence) */
S#define  ADC_SQR3_SQ2_0                      ((uint32_t)0x00000020)        /*!<Bit 0 */
S#define  ADC_SQR3_SQ2_1                      ((uint32_t)0x00000040)        /*!<Bit 1 */
S#define  ADC_SQR3_SQ2_2                      ((uint32_t)0x00000080)        /*!<Bit 2 */
S#define  ADC_SQR3_SQ2_3                      ((uint32_t)0x00000100)        /*!<Bit 3 */
S#define  ADC_SQR3_SQ2_4                      ((uint32_t)0x00000200)        /*!<Bit 4 */
S#define  ADC_SQR3_SQ3                        ((uint32_t)0x00007C00)        /*!<SQ3[4:0] bits (3rd conversion in regular sequence) */
S#define  ADC_SQR3_SQ3_0                      ((uint32_t)0x00000400)        /*!<Bit 0 */
S#define  ADC_SQR3_SQ3_1                      ((uint32_t)0x00000800)        /*!<Bit 1 */
S#define  ADC_SQR3_SQ3_2                      ((uint32_t)0x00001000)        /*!<Bit 2 */
S#define  ADC_SQR3_SQ3_3                      ((uint32_t)0x00002000)        /*!<Bit 3 */
S#define  ADC_SQR3_SQ3_4                      ((uint32_t)0x00004000)        /*!<Bit 4 */
S#define  ADC_SQR3_SQ4                        ((uint32_t)0x000F8000)        /*!<SQ4[4:0] bits (4th conversion in regular sequence) */
S#define  ADC_SQR3_SQ4_0                      ((uint32_t)0x00008000)        /*!<Bit 0 */
S#define  ADC_SQR3_SQ4_1                      ((uint32_t)0x00010000)        /*!<Bit 1 */
S#define  ADC_SQR3_SQ4_2                      ((uint32_t)0x00020000)        /*!<Bit 2 */
S#define  ADC_SQR3_SQ4_3                      ((uint32_t)0x00040000)        /*!<Bit 3 */
S#define  ADC_SQR3_SQ4_4                      ((uint32_t)0x00080000)        /*!<Bit 4 */
S#define  ADC_SQR3_SQ5                        ((uint32_t)0x01F00000)        /*!<SQ5[4:0] bits (5th conversion in regular sequence) */
S#define  ADC_SQR3_SQ5_0                      ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  ADC_SQR3_SQ5_1                      ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  ADC_SQR3_SQ5_2                      ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  ADC_SQR3_SQ5_3                      ((uint32_t)0x00800000)        /*!<Bit 3 */
S#define  ADC_SQR3_SQ5_4                      ((uint32_t)0x01000000)        /*!<Bit 4 */
S#define  ADC_SQR3_SQ6                        ((uint32_t)0x3E000000)        /*!<SQ6[4:0] bits (6th conversion in regular sequence) */
S#define  ADC_SQR3_SQ6_0                      ((uint32_t)0x02000000)        /*!<Bit 0 */
S#define  ADC_SQR3_SQ6_1                      ((uint32_t)0x04000000)        /*!<Bit 1 */
S#define  ADC_SQR3_SQ6_2                      ((uint32_t)0x08000000)        /*!<Bit 2 */
S#define  ADC_SQR3_SQ6_3                      ((uint32_t)0x10000000)        /*!<Bit 3 */
S#define  ADC_SQR3_SQ6_4                      ((uint32_t)0x20000000)        /*!<Bit 4 */
S
S/*******************  Bit definition for ADC_JSQR register  *******************/
S#define  ADC_JSQR_JSQ1                       ((uint32_t)0x0000001F)        /*!<JSQ1[4:0] bits (1st conversion in injected sequence) */  
S#define  ADC_JSQR_JSQ1_0                     ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  ADC_JSQR_JSQ1_1                     ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  ADC_JSQR_JSQ1_2                     ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  ADC_JSQR_JSQ1_3                     ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  ADC_JSQR_JSQ1_4                     ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  ADC_JSQR_JSQ2                       ((uint32_t)0x000003E0)        /*!<JSQ2[4:0] bits (2nd conversion in injected sequence) */
S#define  ADC_JSQR_JSQ2_0                     ((uint32_t)0x00000020)        /*!<Bit 0 */
S#define  ADC_JSQR_JSQ2_1                     ((uint32_t)0x00000040)        /*!<Bit 1 */
S#define  ADC_JSQR_JSQ2_2                     ((uint32_t)0x00000080)        /*!<Bit 2 */
S#define  ADC_JSQR_JSQ2_3                     ((uint32_t)0x00000100)        /*!<Bit 3 */
S#define  ADC_JSQR_JSQ2_4                     ((uint32_t)0x00000200)        /*!<Bit 4 */
S#define  ADC_JSQR_JSQ3                       ((uint32_t)0x00007C00)        /*!<JSQ3[4:0] bits (3rd conversion in injected sequence) */
S#define  ADC_JSQR_JSQ3_0                     ((uint32_t)0x00000400)        /*!<Bit 0 */
S#define  ADC_JSQR_JSQ3_1                     ((uint32_t)0x00000800)        /*!<Bit 1 */
S#define  ADC_JSQR_JSQ3_2                     ((uint32_t)0x00001000)        /*!<Bit 2 */
S#define  ADC_JSQR_JSQ3_3                     ((uint32_t)0x00002000)        /*!<Bit 3 */
S#define  ADC_JSQR_JSQ3_4                     ((uint32_t)0x00004000)        /*!<Bit 4 */
S#define  ADC_JSQR_JSQ4                       ((uint32_t)0x000F8000)        /*!<JSQ4[4:0] bits (4th conversion in injected sequence) */
S#define  ADC_JSQR_JSQ4_0                     ((uint32_t)0x00008000)        /*!<Bit 0 */
S#define  ADC_JSQR_JSQ4_1                     ((uint32_t)0x00010000)        /*!<Bit 1 */
S#define  ADC_JSQR_JSQ4_2                     ((uint32_t)0x00020000)        /*!<Bit 2 */
S#define  ADC_JSQR_JSQ4_3                     ((uint32_t)0x00040000)        /*!<Bit 3 */
S#define  ADC_JSQR_JSQ4_4                     ((uint32_t)0x00080000)        /*!<Bit 4 */
S#define  ADC_JSQR_JL                         ((uint32_t)0x00300000)        /*!<JL[1:0] bits (Injected Sequence length) */
S#define  ADC_JSQR_JL_0                       ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  ADC_JSQR_JL_1                       ((uint32_t)0x00200000)        /*!<Bit 1 */
S
S/*******************  Bit definition for ADC_JDR1 register  *******************/
S#define  ADC_JDR1_JDATA                      ((uint16_t)0xFFFF)            /*!<Injected data */
S
S/*******************  Bit definition for ADC_JDR2 register  *******************/
S#define  ADC_JDR2_JDATA                      ((uint16_t)0xFFFF)            /*!<Injected data */
S
S/*******************  Bit definition for ADC_JDR3 register  *******************/
S#define  ADC_JDR3_JDATA                      ((uint16_t)0xFFFF)            /*!<Injected data */
S
S/*******************  Bit definition for ADC_JDR4 register  *******************/
S#define  ADC_JDR4_JDATA                      ((uint16_t)0xFFFF)            /*!<Injected data */
S
S/********************  Bit definition for ADC_DR register  ********************/
S#define  ADC_DR_DATA                         ((uint32_t)0x0000FFFF)        /*!<Regular data */
S#define  ADC_DR_ADC2DATA                     ((uint32_t)0xFFFF0000)        /*!<ADC2 data */
S
S/*******************  Bit definition for ADC_CSR register  ********************/
S#define  ADC_CSR_AWD1                        ((uint32_t)0x00000001)        /*!<ADC1 Analog watchdog flag */
S#define  ADC_CSR_EOC1                        ((uint32_t)0x00000002)        /*!<ADC1 End of conversion */
S#define  ADC_CSR_JEOC1                       ((uint32_t)0x00000004)        /*!<ADC1 Injected channel end of conversion */
S#define  ADC_CSR_JSTRT1                      ((uint32_t)0x00000008)        /*!<ADC1 Injected channel Start flag */
S#define  ADC_CSR_STRT1                       ((uint32_t)0x00000010)        /*!<ADC1 Regular channel Start flag */
S#define  ADC_CSR_DOVR1                       ((uint32_t)0x00000020)        /*!<ADC1 DMA overrun  flag */
S#define  ADC_CSR_AWD2                        ((uint32_t)0x00000100)        /*!<ADC2 Analog watchdog flag */
S#define  ADC_CSR_EOC2                        ((uint32_t)0x00000200)        /*!<ADC2 End of conversion */
S#define  ADC_CSR_JEOC2                       ((uint32_t)0x00000400)        /*!<ADC2 Injected channel end of conversion */
S#define  ADC_CSR_JSTRT2                      ((uint32_t)0x00000800)        /*!<ADC2 Injected channel Start flag */
S#define  ADC_CSR_STRT2                       ((uint32_t)0x00001000)        /*!<ADC2 Regular channel Start flag */
S#define  ADC_CSR_DOVR2                       ((uint32_t)0x00002000)        /*!<ADC2 DMA overrun  flag */
S#define  ADC_CSR_AWD3                        ((uint32_t)0x00010000)        /*!<ADC3 Analog watchdog flag */
S#define  ADC_CSR_EOC3                        ((uint32_t)0x00020000)        /*!<ADC3 End of conversion */
S#define  ADC_CSR_JEOC3                       ((uint32_t)0x00040000)        /*!<ADC3 Injected channel end of conversion */
S#define  ADC_CSR_JSTRT3                      ((uint32_t)0x00080000)        /*!<ADC3 Injected channel Start flag */
S#define  ADC_CSR_STRT3                       ((uint32_t)0x00100000)        /*!<ADC3 Regular channel Start flag */
S#define  ADC_CSR_DOVR3                       ((uint32_t)0x00200000)        /*!<ADC3 DMA overrun  flag */
S
S/*******************  Bit definition for ADC_CCR register  ********************/
S#define  ADC_CCR_MULTI                       ((uint32_t)0x0000001F)        /*!<MULTI[4:0] bits (Multi-ADC mode selection) */  
S#define  ADC_CCR_MULTI_0                     ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  ADC_CCR_MULTI_1                     ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  ADC_CCR_MULTI_2                     ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  ADC_CCR_MULTI_3                     ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  ADC_CCR_MULTI_4                     ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  ADC_CCR_DELAY                       ((uint32_t)0x00000F00)        /*!<DELAY[3:0] bits (Delay between 2 sampling phases) */  
S#define  ADC_CCR_DELAY_0                     ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  ADC_CCR_DELAY_1                     ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  ADC_CCR_DELAY_2                     ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  ADC_CCR_DELAY_3                     ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  ADC_CCR_DDS                         ((uint32_t)0x00002000)        /*!<DMA disable selection (Multi-ADC mode) */
S#define  ADC_CCR_DMA                         ((uint32_t)0x0000C000)        /*!<DMA[1:0] bits (Direct Memory Access mode for multimode) */  
S#define  ADC_CCR_DMA_0                       ((uint32_t)0x00004000)        /*!<Bit 0 */
S#define  ADC_CCR_DMA_1                       ((uint32_t)0x00008000)        /*!<Bit 1 */
S#define  ADC_CCR_ADCPRE                      ((uint32_t)0x00030000)        /*!<ADCPRE[1:0] bits (ADC prescaler) */  
S#define  ADC_CCR_ADCPRE_0                    ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  ADC_CCR_ADCPRE_1                    ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  ADC_CCR_VBATE                       ((uint32_t)0x00400000)        /*!<VBAT Enable */
S#define  ADC_CCR_TSVREFE                     ((uint32_t)0x00800000)        /*!<Temperature Sensor and VREFINT Enable */
S
S/*******************  Bit definition for ADC_CDR register  ********************/
S#define  ADC_CDR_DATA1                      ((uint32_t)0x0000FFFF)         /*!<1st data of a pair of regular conversions */
S#define  ADC_CDR_DATA2                      ((uint32_t)0xFFFF0000)         /*!<2nd data of a pair of regular conversions */
S
S/******************************************************************************/
S/*                                                                            */
S/*                         Controller Area Network                            */
S/*                                                                            */
S/******************************************************************************/
S/*!<CAN control and status registers */
S/*******************  Bit definition for CAN_MCR register  ********************/
S#define  CAN_MCR_INRQ                        ((uint16_t)0x0001)            /*!<Initialization Request */
S#define  CAN_MCR_SLEEP                       ((uint16_t)0x0002)            /*!<Sleep Mode Request */
S#define  CAN_MCR_TXFP                        ((uint16_t)0x0004)            /*!<Transmit FIFO Priority */
S#define  CAN_MCR_RFLM                        ((uint16_t)0x0008)            /*!<Receive FIFO Locked Mode */
S#define  CAN_MCR_NART                        ((uint16_t)0x0010)            /*!<No Automatic Retransmission */
S#define  CAN_MCR_AWUM                        ((uint16_t)0x0020)            /*!<Automatic Wakeup Mode */
S#define  CAN_MCR_ABOM                        ((uint16_t)0x0040)            /*!<Automatic Bus-Off Management */
S#define  CAN_MCR_TTCM                        ((uint16_t)0x0080)            /*!<Time Triggered Communication Mode */
S#define  CAN_MCR_RESET                       ((uint16_t)0x8000)            /*!<bxCAN software master reset */
S
S/*******************  Bit definition for CAN_MSR register  ********************/
S#define  CAN_MSR_INAK                        ((uint16_t)0x0001)            /*!<Initialization Acknowledge */
S#define  CAN_MSR_SLAK                        ((uint16_t)0x0002)            /*!<Sleep Acknowledge */
S#define  CAN_MSR_ERRI                        ((uint16_t)0x0004)            /*!<Error Interrupt */
S#define  CAN_MSR_WKUI                        ((uint16_t)0x0008)            /*!<Wakeup Interrupt */
S#define  CAN_MSR_SLAKI                       ((uint16_t)0x0010)            /*!<Sleep Acknowledge Interrupt */
S#define  CAN_MSR_TXM                         ((uint16_t)0x0100)            /*!<Transmit Mode */
S#define  CAN_MSR_RXM                         ((uint16_t)0x0200)            /*!<Receive Mode */
S#define  CAN_MSR_SAMP                        ((uint16_t)0x0400)            /*!<Last Sample Point */
S#define  CAN_MSR_RX                          ((uint16_t)0x0800)            /*!<CAN Rx Signal */
S
S/*******************  Bit definition for CAN_TSR register  ********************/
S#define  CAN_TSR_RQCP0                       ((uint32_t)0x00000001)        /*!<Request Completed Mailbox0 */
S#define  CAN_TSR_TXOK0                       ((uint32_t)0x00000002)        /*!<Transmission OK of Mailbox0 */
S#define  CAN_TSR_ALST0                       ((uint32_t)0x00000004)        /*!<Arbitration Lost for Mailbox0 */
S#define  CAN_TSR_TERR0                       ((uint32_t)0x00000008)        /*!<Transmission Error of Mailbox0 */
S#define  CAN_TSR_ABRQ0                       ((uint32_t)0x00000080)        /*!<Abort Request for Mailbox0 */
S#define  CAN_TSR_RQCP1                       ((uint32_t)0x00000100)        /*!<Request Completed Mailbox1 */
S#define  CAN_TSR_TXOK1                       ((uint32_t)0x00000200)        /*!<Transmission OK of Mailbox1 */
S#define  CAN_TSR_ALST1                       ((uint32_t)0x00000400)        /*!<Arbitration Lost for Mailbox1 */
S#define  CAN_TSR_TERR1                       ((uint32_t)0x00000800)        /*!<Transmission Error of Mailbox1 */
S#define  CAN_TSR_ABRQ1                       ((uint32_t)0x00008000)        /*!<Abort Request for Mailbox 1 */
S#define  CAN_TSR_RQCP2                       ((uint32_t)0x00010000)        /*!<Request Completed Mailbox2 */
S#define  CAN_TSR_TXOK2                       ((uint32_t)0x00020000)        /*!<Transmission OK of Mailbox 2 */
S#define  CAN_TSR_ALST2                       ((uint32_t)0x00040000)        /*!<Arbitration Lost for mailbox 2 */
S#define  CAN_TSR_TERR2                       ((uint32_t)0x00080000)        /*!<Transmission Error of Mailbox 2 */
S#define  CAN_TSR_ABRQ2                       ((uint32_t)0x00800000)        /*!<Abort Request for Mailbox 2 */
S#define  CAN_TSR_CODE                        ((uint32_t)0x03000000)        /*!<Mailbox Code */
S
S#define  CAN_TSR_TME                         ((uint32_t)0x1C000000)        /*!<TME[2:0] bits */
S#define  CAN_TSR_TME0                        ((uint32_t)0x04000000)        /*!<Transmit Mailbox 0 Empty */
S#define  CAN_TSR_TME1                        ((uint32_t)0x08000000)        /*!<Transmit Mailbox 1 Empty */
S#define  CAN_TSR_TME2                        ((uint32_t)0x10000000)        /*!<Transmit Mailbox 2 Empty */
S
S#define  CAN_TSR_LOW                         ((uint32_t)0xE0000000)        /*!<LOW[2:0] bits */
S#define  CAN_TSR_LOW0                        ((uint32_t)0x20000000)        /*!<Lowest Priority Flag for Mailbox 0 */
S#define  CAN_TSR_LOW1                        ((uint32_t)0x40000000)        /*!<Lowest Priority Flag for Mailbox 1 */
S#define  CAN_TSR_LOW2                        ((uint32_t)0x80000000)        /*!<Lowest Priority Flag for Mailbox 2 */
S
S/*******************  Bit definition for CAN_RF0R register  *******************/
S#define  CAN_RF0R_FMP0                       ((uint8_t)0x03)               /*!<FIFO 0 Message Pending */
S#define  CAN_RF0R_FULL0                      ((uint8_t)0x08)               /*!<FIFO 0 Full */
S#define  CAN_RF0R_FOVR0                      ((uint8_t)0x10)               /*!<FIFO 0 Overrun */
S#define  CAN_RF0R_RFOM0                      ((uint8_t)0x20)               /*!<Release FIFO 0 Output Mailbox */
S
S/*******************  Bit definition for CAN_RF1R register  *******************/
S#define  CAN_RF1R_FMP1                       ((uint8_t)0x03)               /*!<FIFO 1 Message Pending */
S#define  CAN_RF1R_FULL1                      ((uint8_t)0x08)               /*!<FIFO 1 Full */
S#define  CAN_RF1R_FOVR1                      ((uint8_t)0x10)               /*!<FIFO 1 Overrun */
S#define  CAN_RF1R_RFOM1                      ((uint8_t)0x20)               /*!<Release FIFO 1 Output Mailbox */
S
S/********************  Bit definition for CAN_IER register  *******************/
S#define  CAN_IER_TMEIE                       ((uint32_t)0x00000001)        /*!<Transmit Mailbox Empty Interrupt Enable */
S#define  CAN_IER_FMPIE0                      ((uint32_t)0x00000002)        /*!<FIFO Message Pending Interrupt Enable */
S#define  CAN_IER_FFIE0                       ((uint32_t)0x00000004)        /*!<FIFO Full Interrupt Enable */
S#define  CAN_IER_FOVIE0                      ((uint32_t)0x00000008)        /*!<FIFO Overrun Interrupt Enable */
S#define  CAN_IER_FMPIE1                      ((uint32_t)0x00000010)        /*!<FIFO Message Pending Interrupt Enable */
S#define  CAN_IER_FFIE1                       ((uint32_t)0x00000020)        /*!<FIFO Full Interrupt Enable */
S#define  CAN_IER_FOVIE1                      ((uint32_t)0x00000040)        /*!<FIFO Overrun Interrupt Enable */
S#define  CAN_IER_EWGIE                       ((uint32_t)0x00000100)        /*!<Error Warning Interrupt Enable */
S#define  CAN_IER_EPVIE                       ((uint32_t)0x00000200)        /*!<Error Passive Interrupt Enable */
S#define  CAN_IER_BOFIE                       ((uint32_t)0x00000400)        /*!<Bus-Off Interrupt Enable */
S#define  CAN_IER_LECIE                       ((uint32_t)0x00000800)        /*!<Last Error Code Interrupt Enable */
S#define  CAN_IER_ERRIE                       ((uint32_t)0x00008000)        /*!<Error Interrupt Enable */
S#define  CAN_IER_WKUIE                       ((uint32_t)0x00010000)        /*!<Wakeup Interrupt Enable */
S#define  CAN_IER_SLKIE                       ((uint32_t)0x00020000)        /*!<Sleep Interrupt Enable */
S
S/********************  Bit definition for CAN_ESR register  *******************/
S#define  CAN_ESR_EWGF                        ((uint32_t)0x00000001)        /*!<Error Warning Flag */
S#define  CAN_ESR_EPVF                        ((uint32_t)0x00000002)        /*!<Error Passive Flag */
S#define  CAN_ESR_BOFF                        ((uint32_t)0x00000004)        /*!<Bus-Off Flag */
S
S#define  CAN_ESR_LEC                         ((uint32_t)0x00000070)        /*!<LEC[2:0] bits (Last Error Code) */
S#define  CAN_ESR_LEC_0                       ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  CAN_ESR_LEC_1                       ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  CAN_ESR_LEC_2                       ((uint32_t)0x00000040)        /*!<Bit 2 */
S
S#define  CAN_ESR_TEC                         ((uint32_t)0x00FF0000)        /*!<Least significant byte of the 9-bit Transmit Error Counter */
S#define  CAN_ESR_REC                         ((uint32_t)0xFF000000)        /*!<Receive Error Counter */
S
S/*******************  Bit definition for CAN_BTR register  ********************/
S#define  CAN_BTR_BRP                         ((uint32_t)0x000003FF)        /*!<Baud Rate Prescaler */
S#define  CAN_BTR_TS1                         ((uint32_t)0x000F0000)        /*!<Time Segment 1 */
S#define  CAN_BTR_TS2                         ((uint32_t)0x00700000)        /*!<Time Segment 2 */
S#define  CAN_BTR_SJW                         ((uint32_t)0x03000000)        /*!<Resynchronization Jump Width */
S#define  CAN_BTR_LBKM                        ((uint32_t)0x40000000)        /*!<Loop Back Mode (Debug) */
S#define  CAN_BTR_SILM                        ((uint32_t)0x80000000)        /*!<Silent Mode */
S
S/*!<Mailbox registers */
S/******************  Bit definition for CAN_TI0R register  ********************/
S#define  CAN_TI0R_TXRQ                       ((uint32_t)0x00000001)        /*!<Transmit Mailbox Request */
S#define  CAN_TI0R_RTR                        ((uint32_t)0x00000002)        /*!<Remote Transmission Request */
S#define  CAN_TI0R_IDE                        ((uint32_t)0x00000004)        /*!<Identifier Extension */
S#define  CAN_TI0R_EXID                       ((uint32_t)0x001FFFF8)        /*!<Extended Identifier */
S#define  CAN_TI0R_STID                       ((uint32_t)0xFFE00000)        /*!<Standard Identifier or Extended Identifier */
S
S/******************  Bit definition for CAN_TDT0R register  *******************/
S#define  CAN_TDT0R_DLC                       ((uint32_t)0x0000000F)        /*!<Data Length Code */
S#define  CAN_TDT0R_TGT                       ((uint32_t)0x00000100)        /*!<Transmit Global Time */
S#define  CAN_TDT0R_TIME                      ((uint32_t)0xFFFF0000)        /*!<Message Time Stamp */
S
S/******************  Bit definition for CAN_TDL0R register  *******************/
S#define  CAN_TDL0R_DATA0                     ((uint32_t)0x000000FF)        /*!<Data byte 0 */
S#define  CAN_TDL0R_DATA1                     ((uint32_t)0x0000FF00)        /*!<Data byte 1 */
S#define  CAN_TDL0R_DATA2                     ((uint32_t)0x00FF0000)        /*!<Data byte 2 */
S#define  CAN_TDL0R_DATA3                     ((uint32_t)0xFF000000)        /*!<Data byte 3 */
S
S/******************  Bit definition for CAN_TDH0R register  *******************/
S#define  CAN_TDH0R_DATA4                     ((uint32_t)0x000000FF)        /*!<Data byte 4 */
S#define  CAN_TDH0R_DATA5                     ((uint32_t)0x0000FF00)        /*!<Data byte 5 */
S#define  CAN_TDH0R_DATA6                     ((uint32_t)0x00FF0000)        /*!<Data byte 6 */
S#define  CAN_TDH0R_DATA7                     ((uint32_t)0xFF000000)        /*!<Data byte 7 */
S
S/*******************  Bit definition for CAN_TI1R register  *******************/
S#define  CAN_TI1R_TXRQ                       ((uint32_t)0x00000001)        /*!<Transmit Mailbox Request */
S#define  CAN_TI1R_RTR                        ((uint32_t)0x00000002)        /*!<Remote Transmission Request */
S#define  CAN_TI1R_IDE                        ((uint32_t)0x00000004)        /*!<Identifier Extension */
S#define  CAN_TI1R_EXID                       ((uint32_t)0x001FFFF8)        /*!<Extended Identifier */
S#define  CAN_TI1R_STID                       ((uint32_t)0xFFE00000)        /*!<Standard Identifier or Extended Identifier */
S
S/*******************  Bit definition for CAN_TDT1R register  ******************/
S#define  CAN_TDT1R_DLC                       ((uint32_t)0x0000000F)        /*!<Data Length Code */
S#define  CAN_TDT1R_TGT                       ((uint32_t)0x00000100)        /*!<Transmit Global Time */
S#define  CAN_TDT1R_TIME                      ((uint32_t)0xFFFF0000)        /*!<Message Time Stamp */
S
S/*******************  Bit definition for CAN_TDL1R register  ******************/
S#define  CAN_TDL1R_DATA0                     ((uint32_t)0x000000FF)        /*!<Data byte 0 */
S#define  CAN_TDL1R_DATA1                     ((uint32_t)0x0000FF00)        /*!<Data byte 1 */
S#define  CAN_TDL1R_DATA2                     ((uint32_t)0x00FF0000)        /*!<Data byte 2 */
S#define  CAN_TDL1R_DATA3                     ((uint32_t)0xFF000000)        /*!<Data byte 3 */
S
S/*******************  Bit definition for CAN_TDH1R register  ******************/
S#define  CAN_TDH1R_DATA4                     ((uint32_t)0x000000FF)        /*!<Data byte 4 */
S#define  CAN_TDH1R_DATA5                     ((uint32_t)0x0000FF00)        /*!<Data byte 5 */
S#define  CAN_TDH1R_DATA6                     ((uint32_t)0x00FF0000)        /*!<Data byte 6 */
S#define  CAN_TDH1R_DATA7                     ((uint32_t)0xFF000000)        /*!<Data byte 7 */
S
S/*******************  Bit definition for CAN_TI2R register  *******************/
S#define  CAN_TI2R_TXRQ                       ((uint32_t)0x00000001)        /*!<Transmit Mailbox Request */
S#define  CAN_TI2R_RTR                        ((uint32_t)0x00000002)        /*!<Remote Transmission Request */
S#define  CAN_TI2R_IDE                        ((uint32_t)0x00000004)        /*!<Identifier Extension */
S#define  CAN_TI2R_EXID                       ((uint32_t)0x001FFFF8)        /*!<Extended identifier */
S#define  CAN_TI2R_STID                       ((uint32_t)0xFFE00000)        /*!<Standard Identifier or Extended Identifier */
S
S/*******************  Bit definition for CAN_TDT2R register  ******************/  
S#define  CAN_TDT2R_DLC                       ((uint32_t)0x0000000F)        /*!<Data Length Code */
S#define  CAN_TDT2R_TGT                       ((uint32_t)0x00000100)        /*!<Transmit Global Time */
S#define  CAN_TDT2R_TIME                      ((uint32_t)0xFFFF0000)        /*!<Message Time Stamp */
S
S/*******************  Bit definition for CAN_TDL2R register  ******************/
S#define  CAN_TDL2R_DATA0                     ((uint32_t)0x000000FF)        /*!<Data byte 0 */
S#define  CAN_TDL2R_DATA1                     ((uint32_t)0x0000FF00)        /*!<Data byte 1 */
S#define  CAN_TDL2R_DATA2                     ((uint32_t)0x00FF0000)        /*!<Data byte 2 */
S#define  CAN_TDL2R_DATA3                     ((uint32_t)0xFF000000)        /*!<Data byte 3 */
S
S/*******************  Bit definition for CAN_TDH2R register  ******************/
S#define  CAN_TDH2R_DATA4                     ((uint32_t)0x000000FF)        /*!<Data byte 4 */
S#define  CAN_TDH2R_DATA5                     ((uint32_t)0x0000FF00)        /*!<Data byte 5 */
S#define  CAN_TDH2R_DATA6                     ((uint32_t)0x00FF0000)        /*!<Data byte 6 */
S#define  CAN_TDH2R_DATA7                     ((uint32_t)0xFF000000)        /*!<Data byte 7 */
S
S/*******************  Bit definition for CAN_RI0R register  *******************/
S#define  CAN_RI0R_RTR                        ((uint32_t)0x00000002)        /*!<Remote Transmission Request */
S#define  CAN_RI0R_IDE                        ((uint32_t)0x00000004)        /*!<Identifier Extension */
S#define  CAN_RI0R_EXID                       ((uint32_t)0x001FFFF8)        /*!<Extended Identifier */
S#define  CAN_RI0R_STID                       ((uint32_t)0xFFE00000)        /*!<Standard Identifier or Extended Identifier */
S
S/*******************  Bit definition for CAN_RDT0R register  ******************/
S#define  CAN_RDT0R_DLC                       ((uint32_t)0x0000000F)        /*!<Data Length Code */
S#define  CAN_RDT0R_FMI                       ((uint32_t)0x0000FF00)        /*!<Filter Match Index */
S#define  CAN_RDT0R_TIME                      ((uint32_t)0xFFFF0000)        /*!<Message Time Stamp */
S
S/*******************  Bit definition for CAN_RDL0R register  ******************/
S#define  CAN_RDL0R_DATA0                     ((uint32_t)0x000000FF)        /*!<Data byte 0 */
S#define  CAN_RDL0R_DATA1                     ((uint32_t)0x0000FF00)        /*!<Data byte 1 */
S#define  CAN_RDL0R_DATA2                     ((uint32_t)0x00FF0000)        /*!<Data byte 2 */
S#define  CAN_RDL0R_DATA3                     ((uint32_t)0xFF000000)        /*!<Data byte 3 */
S
S/*******************  Bit definition for CAN_RDH0R register  ******************/
S#define  CAN_RDH0R_DATA4                     ((uint32_t)0x000000FF)        /*!<Data byte 4 */
S#define  CAN_RDH0R_DATA5                     ((uint32_t)0x0000FF00)        /*!<Data byte 5 */
S#define  CAN_RDH0R_DATA6                     ((uint32_t)0x00FF0000)        /*!<Data byte 6 */
S#define  CAN_RDH0R_DATA7                     ((uint32_t)0xFF000000)        /*!<Data byte 7 */
S
S/*******************  Bit definition for CAN_RI1R register  *******************/
S#define  CAN_RI1R_RTR                        ((uint32_t)0x00000002)        /*!<Remote Transmission Request */
S#define  CAN_RI1R_IDE                        ((uint32_t)0x00000004)        /*!<Identifier Extension */
S#define  CAN_RI1R_EXID                       ((uint32_t)0x001FFFF8)        /*!<Extended identifier */
S#define  CAN_RI1R_STID                       ((uint32_t)0xFFE00000)        /*!<Standard Identifier or Extended Identifier */
S
S/*******************  Bit definition for CAN_RDT1R register  ******************/
S#define  CAN_RDT1R_DLC                       ((uint32_t)0x0000000F)        /*!<Data Length Code */
S#define  CAN_RDT1R_FMI                       ((uint32_t)0x0000FF00)        /*!<Filter Match Index */
S#define  CAN_RDT1R_TIME                      ((uint32_t)0xFFFF0000)        /*!<Message Time Stamp */
S
S/*******************  Bit definition for CAN_RDL1R register  ******************/
S#define  CAN_RDL1R_DATA0                     ((uint32_t)0x000000FF)        /*!<Data byte 0 */
S#define  CAN_RDL1R_DATA1                     ((uint32_t)0x0000FF00)        /*!<Data byte 1 */
S#define  CAN_RDL1R_DATA2                     ((uint32_t)0x00FF0000)        /*!<Data byte 2 */
S#define  CAN_RDL1R_DATA3                     ((uint32_t)0xFF000000)        /*!<Data byte 3 */
S
S/*******************  Bit definition for CAN_RDH1R register  ******************/
S#define  CAN_RDH1R_DATA4                     ((uint32_t)0x000000FF)        /*!<Data byte 4 */
S#define  CAN_RDH1R_DATA5                     ((uint32_t)0x0000FF00)        /*!<Data byte 5 */
S#define  CAN_RDH1R_DATA6                     ((uint32_t)0x00FF0000)        /*!<Data byte 6 */
S#define  CAN_RDH1R_DATA7                     ((uint32_t)0xFF000000)        /*!<Data byte 7 */
S
S/*!<CAN filter registers */
S/*******************  Bit definition for CAN_FMR register  ********************/
S#define  CAN_FMR_FINIT                       ((uint8_t)0x01)               /*!<Filter Init Mode */
S
S/*******************  Bit definition for CAN_FM1R register  *******************/
S#define  CAN_FM1R_FBM                        ((uint16_t)0x3FFF)            /*!<Filter Mode */
S#define  CAN_FM1R_FBM0                       ((uint16_t)0x0001)            /*!<Filter Init Mode bit 0 */
S#define  CAN_FM1R_FBM1                       ((uint16_t)0x0002)            /*!<Filter Init Mode bit 1 */
S#define  CAN_FM1R_FBM2                       ((uint16_t)0x0004)            /*!<Filter Init Mode bit 2 */
S#define  CAN_FM1R_FBM3                       ((uint16_t)0x0008)            /*!<Filter Init Mode bit 3 */
S#define  CAN_FM1R_FBM4                       ((uint16_t)0x0010)            /*!<Filter Init Mode bit 4 */
S#define  CAN_FM1R_FBM5                       ((uint16_t)0x0020)            /*!<Filter Init Mode bit 5 */
S#define  CAN_FM1R_FBM6                       ((uint16_t)0x0040)            /*!<Filter Init Mode bit 6 */
S#define  CAN_FM1R_FBM7                       ((uint16_t)0x0080)            /*!<Filter Init Mode bit 7 */
S#define  CAN_FM1R_FBM8                       ((uint16_t)0x0100)            /*!<Filter Init Mode bit 8 */
S#define  CAN_FM1R_FBM9                       ((uint16_t)0x0200)            /*!<Filter Init Mode bit 9 */
S#define  CAN_FM1R_FBM10                      ((uint16_t)0x0400)            /*!<Filter Init Mode bit 10 */
S#define  CAN_FM1R_FBM11                      ((uint16_t)0x0800)            /*!<Filter Init Mode bit 11 */
S#define  CAN_FM1R_FBM12                      ((uint16_t)0x1000)            /*!<Filter Init Mode bit 12 */
S#define  CAN_FM1R_FBM13                      ((uint16_t)0x2000)            /*!<Filter Init Mode bit 13 */
S
S/*******************  Bit definition for CAN_FS1R register  *******************/
S#define  CAN_FS1R_FSC                        ((uint16_t)0x3FFF)            /*!<Filter Scale Configuration */
S#define  CAN_FS1R_FSC0                       ((uint16_t)0x0001)            /*!<Filter Scale Configuration bit 0 */
S#define  CAN_FS1R_FSC1                       ((uint16_t)0x0002)            /*!<Filter Scale Configuration bit 1 */
S#define  CAN_FS1R_FSC2                       ((uint16_t)0x0004)            /*!<Filter Scale Configuration bit 2 */
S#define  CAN_FS1R_FSC3                       ((uint16_t)0x0008)            /*!<Filter Scale Configuration bit 3 */
S#define  CAN_FS1R_FSC4                       ((uint16_t)0x0010)            /*!<Filter Scale Configuration bit 4 */
S#define  CAN_FS1R_FSC5                       ((uint16_t)0x0020)            /*!<Filter Scale Configuration bit 5 */
S#define  CAN_FS1R_FSC6                       ((uint16_t)0x0040)            /*!<Filter Scale Configuration bit 6 */
S#define  CAN_FS1R_FSC7                       ((uint16_t)0x0080)            /*!<Filter Scale Configuration bit 7 */
S#define  CAN_FS1R_FSC8                       ((uint16_t)0x0100)            /*!<Filter Scale Configuration bit 8 */
S#define  CAN_FS1R_FSC9                       ((uint16_t)0x0200)            /*!<Filter Scale Configuration bit 9 */
S#define  CAN_FS1R_FSC10                      ((uint16_t)0x0400)            /*!<Filter Scale Configuration bit 10 */
S#define  CAN_FS1R_FSC11                      ((uint16_t)0x0800)            /*!<Filter Scale Configuration bit 11 */
S#define  CAN_FS1R_FSC12                      ((uint16_t)0x1000)            /*!<Filter Scale Configuration bit 12 */
S#define  CAN_FS1R_FSC13                      ((uint16_t)0x2000)            /*!<Filter Scale Configuration bit 13 */
S
S/******************  Bit definition for CAN_FFA1R register  *******************/
S#define  CAN_FFA1R_FFA                       ((uint16_t)0x3FFF)            /*!<Filter FIFO Assignment */
S#define  CAN_FFA1R_FFA0                      ((uint16_t)0x0001)            /*!<Filter FIFO Assignment for Filter 0 */
S#define  CAN_FFA1R_FFA1                      ((uint16_t)0x0002)            /*!<Filter FIFO Assignment for Filter 1 */
S#define  CAN_FFA1R_FFA2                      ((uint16_t)0x0004)            /*!<Filter FIFO Assignment for Filter 2 */
S#define  CAN_FFA1R_FFA3                      ((uint16_t)0x0008)            /*!<Filter FIFO Assignment for Filter 3 */
S#define  CAN_FFA1R_FFA4                      ((uint16_t)0x0010)            /*!<Filter FIFO Assignment for Filter 4 */
S#define  CAN_FFA1R_FFA5                      ((uint16_t)0x0020)            /*!<Filter FIFO Assignment for Filter 5 */
S#define  CAN_FFA1R_FFA6                      ((uint16_t)0x0040)            /*!<Filter FIFO Assignment for Filter 6 */
S#define  CAN_FFA1R_FFA7                      ((uint16_t)0x0080)            /*!<Filter FIFO Assignment for Filter 7 */
S#define  CAN_FFA1R_FFA8                      ((uint16_t)0x0100)            /*!<Filter FIFO Assignment for Filter 8 */
S#define  CAN_FFA1R_FFA9                      ((uint16_t)0x0200)            /*!<Filter FIFO Assignment for Filter 9 */
S#define  CAN_FFA1R_FFA10                     ((uint16_t)0x0400)            /*!<Filter FIFO Assignment for Filter 10 */
S#define  CAN_FFA1R_FFA11                     ((uint16_t)0x0800)            /*!<Filter FIFO Assignment for Filter 11 */
S#define  CAN_FFA1R_FFA12                     ((uint16_t)0x1000)            /*!<Filter FIFO Assignment for Filter 12 */
S#define  CAN_FFA1R_FFA13                     ((uint16_t)0x2000)            /*!<Filter FIFO Assignment for Filter 13 */
S
S/*******************  Bit definition for CAN_FA1R register  *******************/
S#define  CAN_FA1R_FACT                       ((uint16_t)0x3FFF)            /*!<Filter Active */
S#define  CAN_FA1R_FACT0                      ((uint16_t)0x0001)            /*!<Filter 0 Active */
S#define  CAN_FA1R_FACT1                      ((uint16_t)0x0002)            /*!<Filter 1 Active */
S#define  CAN_FA1R_FACT2                      ((uint16_t)0x0004)            /*!<Filter 2 Active */
S#define  CAN_FA1R_FACT3                      ((uint16_t)0x0008)            /*!<Filter 3 Active */
S#define  CAN_FA1R_FACT4                      ((uint16_t)0x0010)            /*!<Filter 4 Active */
S#define  CAN_FA1R_FACT5                      ((uint16_t)0x0020)            /*!<Filter 5 Active */
S#define  CAN_FA1R_FACT6                      ((uint16_t)0x0040)            /*!<Filter 6 Active */
S#define  CAN_FA1R_FACT7                      ((uint16_t)0x0080)            /*!<Filter 7 Active */
S#define  CAN_FA1R_FACT8                      ((uint16_t)0x0100)            /*!<Filter 8 Active */
S#define  CAN_FA1R_FACT9                      ((uint16_t)0x0200)            /*!<Filter 9 Active */
S#define  CAN_FA1R_FACT10                     ((uint16_t)0x0400)            /*!<Filter 10 Active */
S#define  CAN_FA1R_FACT11                     ((uint16_t)0x0800)            /*!<Filter 11 Active */
S#define  CAN_FA1R_FACT12                     ((uint16_t)0x1000)            /*!<Filter 12 Active */
S#define  CAN_FA1R_FACT13                     ((uint16_t)0x2000)            /*!<Filter 13 Active */
S
S/*******************  Bit definition for CAN_F0R1 register  *******************/
S#define  CAN_F0R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F0R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F0R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F0R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F0R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F0R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F0R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F0R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F0R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F0R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F0R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F0R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F0R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F0R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F0R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F0R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F0R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F0R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F0R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F0R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F0R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F0R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F0R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F0R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F0R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F0R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F0R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F0R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F0R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F0R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F0R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F0R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F1R1 register  *******************/
S#define  CAN_F1R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F1R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F1R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F1R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F1R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F1R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F1R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F1R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F1R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F1R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F1R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F1R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F1R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F1R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F1R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F1R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F1R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F1R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F1R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F1R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F1R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F1R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F1R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F1R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F1R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F1R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F1R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F1R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F1R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F1R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F1R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F1R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F2R1 register  *******************/
S#define  CAN_F2R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F2R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F2R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F2R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F2R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F2R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F2R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F2R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F2R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F2R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F2R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F2R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F2R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F2R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F2R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F2R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F2R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F2R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F2R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F2R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F2R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F2R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F2R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F2R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F2R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F2R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F2R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F2R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F2R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F2R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F2R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F2R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F3R1 register  *******************/
S#define  CAN_F3R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F3R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F3R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F3R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F3R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F3R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F3R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F3R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F3R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F3R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F3R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F3R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F3R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F3R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F3R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F3R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F3R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F3R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F3R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F3R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F3R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F3R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F3R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F3R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F3R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F3R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F3R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F3R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F3R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F3R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F3R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F3R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F4R1 register  *******************/
S#define  CAN_F4R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F4R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F4R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F4R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F4R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F4R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F4R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F4R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F4R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F4R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F4R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F4R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F4R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F4R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F4R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F4R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F4R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F4R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F4R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F4R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F4R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F4R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F4R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F4R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F4R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F4R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F4R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F4R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F4R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F4R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F4R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F4R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F5R1 register  *******************/
S#define  CAN_F5R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F5R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F5R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F5R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F5R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F5R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F5R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F5R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F5R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F5R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F5R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F5R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F5R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F5R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F5R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F5R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F5R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F5R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F5R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F5R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F5R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F5R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F5R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F5R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F5R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F5R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F5R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F5R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F5R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F5R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F5R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F5R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F6R1 register  *******************/
S#define  CAN_F6R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F6R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F6R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F6R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F6R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F6R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F6R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F6R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F6R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F6R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F6R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F6R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F6R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F6R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F6R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F6R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F6R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F6R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F6R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F6R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F6R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F6R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F6R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F6R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F6R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F6R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F6R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F6R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F6R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F6R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F6R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F6R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F7R1 register  *******************/
S#define  CAN_F7R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F7R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F7R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F7R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F7R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F7R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F7R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F7R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F7R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F7R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F7R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F7R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F7R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F7R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F7R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F7R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F7R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F7R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F7R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F7R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F7R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F7R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F7R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F7R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F7R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F7R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F7R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F7R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F7R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F7R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F7R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F7R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F8R1 register  *******************/
S#define  CAN_F8R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F8R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F8R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F8R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F8R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F8R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F8R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F8R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F8R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F8R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F8R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F8R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F8R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F8R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F8R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F8R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F8R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F8R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F8R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F8R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F8R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F8R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F8R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F8R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F8R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F8R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F8R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F8R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F8R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F8R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F8R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F8R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F9R1 register  *******************/
S#define  CAN_F9R1_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F9R1_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F9R1_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F9R1_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F9R1_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F9R1_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F9R1_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F9R1_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F9R1_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F9R1_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F9R1_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F9R1_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F9R1_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F9R1_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F9R1_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F9R1_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F9R1_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F9R1_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F9R1_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F9R1_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F9R1_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F9R1_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F9R1_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F9R1_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F9R1_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F9R1_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F9R1_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F9R1_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F9R1_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F9R1_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F9R1_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F9R1_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F10R1 register  ******************/
S#define  CAN_F10R1_FB0                       ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F10R1_FB1                       ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F10R1_FB2                       ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F10R1_FB3                       ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F10R1_FB4                       ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F10R1_FB5                       ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F10R1_FB6                       ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F10R1_FB7                       ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F10R1_FB8                       ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F10R1_FB9                       ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F10R1_FB10                      ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F10R1_FB11                      ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F10R1_FB12                      ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F10R1_FB13                      ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F10R1_FB14                      ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F10R1_FB15                      ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F10R1_FB16                      ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F10R1_FB17                      ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F10R1_FB18                      ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F10R1_FB19                      ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F10R1_FB20                      ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F10R1_FB21                      ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F10R1_FB22                      ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F10R1_FB23                      ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F10R1_FB24                      ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F10R1_FB25                      ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F10R1_FB26                      ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F10R1_FB27                      ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F10R1_FB28                      ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F10R1_FB29                      ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F10R1_FB30                      ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F10R1_FB31                      ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F11R1 register  ******************/
S#define  CAN_F11R1_FB0                       ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F11R1_FB1                       ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F11R1_FB2                       ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F11R1_FB3                       ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F11R1_FB4                       ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F11R1_FB5                       ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F11R1_FB6                       ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F11R1_FB7                       ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F11R1_FB8                       ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F11R1_FB9                       ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F11R1_FB10                      ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F11R1_FB11                      ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F11R1_FB12                      ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F11R1_FB13                      ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F11R1_FB14                      ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F11R1_FB15                      ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F11R1_FB16                      ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F11R1_FB17                      ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F11R1_FB18                      ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F11R1_FB19                      ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F11R1_FB20                      ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F11R1_FB21                      ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F11R1_FB22                      ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F11R1_FB23                      ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F11R1_FB24                      ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F11R1_FB25                      ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F11R1_FB26                      ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F11R1_FB27                      ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F11R1_FB28                      ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F11R1_FB29                      ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F11R1_FB30                      ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F11R1_FB31                      ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F12R1 register  ******************/
S#define  CAN_F12R1_FB0                       ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F12R1_FB1                       ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F12R1_FB2                       ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F12R1_FB3                       ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F12R1_FB4                       ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F12R1_FB5                       ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F12R1_FB6                       ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F12R1_FB7                       ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F12R1_FB8                       ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F12R1_FB9                       ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F12R1_FB10                      ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F12R1_FB11                      ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F12R1_FB12                      ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F12R1_FB13                      ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F12R1_FB14                      ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F12R1_FB15                      ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F12R1_FB16                      ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F12R1_FB17                      ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F12R1_FB18                      ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F12R1_FB19                      ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F12R1_FB20                      ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F12R1_FB21                      ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F12R1_FB22                      ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F12R1_FB23                      ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F12R1_FB24                      ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F12R1_FB25                      ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F12R1_FB26                      ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F12R1_FB27                      ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F12R1_FB28                      ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F12R1_FB29                      ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F12R1_FB30                      ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F12R1_FB31                      ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F13R1 register  ******************/
S#define  CAN_F13R1_FB0                       ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F13R1_FB1                       ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F13R1_FB2                       ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F13R1_FB3                       ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F13R1_FB4                       ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F13R1_FB5                       ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F13R1_FB6                       ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F13R1_FB7                       ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F13R1_FB8                       ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F13R1_FB9                       ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F13R1_FB10                      ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F13R1_FB11                      ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F13R1_FB12                      ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F13R1_FB13                      ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F13R1_FB14                      ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F13R1_FB15                      ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F13R1_FB16                      ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F13R1_FB17                      ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F13R1_FB18                      ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F13R1_FB19                      ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F13R1_FB20                      ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F13R1_FB21                      ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F13R1_FB22                      ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F13R1_FB23                      ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F13R1_FB24                      ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F13R1_FB25                      ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F13R1_FB26                      ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F13R1_FB27                      ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F13R1_FB28                      ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F13R1_FB29                      ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F13R1_FB30                      ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F13R1_FB31                      ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F0R2 register  *******************/
S#define  CAN_F0R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F0R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F0R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F0R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F0R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F0R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F0R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F0R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F0R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F0R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F0R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F0R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F0R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F0R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F0R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F0R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F0R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F0R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F0R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F0R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F0R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F0R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F0R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F0R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F0R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F0R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F0R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F0R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F0R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F0R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F0R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F0R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F1R2 register  *******************/
S#define  CAN_F1R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F1R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F1R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F1R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F1R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F1R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F1R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F1R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F1R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F1R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F1R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F1R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F1R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F1R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F1R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F1R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F1R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F1R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F1R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F1R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F1R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F1R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F1R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F1R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F1R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F1R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F1R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F1R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F1R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F1R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F1R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F1R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F2R2 register  *******************/
S#define  CAN_F2R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F2R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F2R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F2R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F2R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F2R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F2R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F2R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F2R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F2R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F2R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F2R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F2R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F2R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F2R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F2R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F2R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F2R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F2R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F2R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F2R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F2R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F2R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F2R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F2R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F2R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F2R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F2R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F2R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F2R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F2R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F2R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F3R2 register  *******************/
S#define  CAN_F3R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F3R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F3R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F3R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F3R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F3R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F3R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F3R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F3R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F3R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F3R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F3R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F3R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F3R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F3R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F3R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F3R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F3R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F3R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F3R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F3R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F3R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F3R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F3R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F3R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F3R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F3R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F3R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F3R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F3R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F3R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F3R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F4R2 register  *******************/
S#define  CAN_F4R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F4R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F4R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F4R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F4R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F4R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F4R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F4R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F4R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F4R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F4R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F4R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F4R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F4R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F4R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F4R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F4R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F4R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F4R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F4R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F4R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F4R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F4R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F4R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F4R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F4R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F4R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F4R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F4R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F4R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F4R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F4R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F5R2 register  *******************/
S#define  CAN_F5R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F5R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F5R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F5R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F5R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F5R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F5R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F5R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F5R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F5R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F5R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F5R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F5R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F5R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F5R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F5R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F5R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F5R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F5R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F5R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F5R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F5R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F5R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F5R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F5R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F5R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F5R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F5R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F5R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F5R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F5R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F5R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F6R2 register  *******************/
S#define  CAN_F6R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F6R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F6R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F6R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F6R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F6R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F6R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F6R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F6R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F6R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F6R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F6R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F6R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F6R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F6R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F6R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F6R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F6R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F6R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F6R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F6R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F6R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F6R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F6R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F6R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F6R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F6R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F6R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F6R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F6R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F6R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F6R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F7R2 register  *******************/
S#define  CAN_F7R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F7R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F7R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F7R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F7R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F7R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F7R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F7R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F7R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F7R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F7R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F7R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F7R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F7R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F7R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F7R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F7R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F7R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F7R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F7R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F7R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F7R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F7R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F7R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F7R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F7R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F7R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F7R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F7R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F7R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F7R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F7R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F8R2 register  *******************/
S#define  CAN_F8R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F8R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F8R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F8R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F8R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F8R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F8R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F8R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F8R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F8R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F8R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F8R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F8R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F8R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F8R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F8R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F8R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F8R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F8R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F8R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F8R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F8R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F8R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F8R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F8R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F8R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F8R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F8R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F8R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F8R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F8R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F8R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F9R2 register  *******************/
S#define  CAN_F9R2_FB0                        ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F9R2_FB1                        ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F9R2_FB2                        ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F9R2_FB3                        ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F9R2_FB4                        ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F9R2_FB5                        ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F9R2_FB6                        ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F9R2_FB7                        ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F9R2_FB8                        ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F9R2_FB9                        ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F9R2_FB10                       ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F9R2_FB11                       ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F9R2_FB12                       ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F9R2_FB13                       ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F9R2_FB14                       ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F9R2_FB15                       ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F9R2_FB16                       ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F9R2_FB17                       ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F9R2_FB18                       ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F9R2_FB19                       ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F9R2_FB20                       ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F9R2_FB21                       ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F9R2_FB22                       ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F9R2_FB23                       ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F9R2_FB24                       ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F9R2_FB25                       ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F9R2_FB26                       ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F9R2_FB27                       ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F9R2_FB28                       ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F9R2_FB29                       ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F9R2_FB30                       ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F9R2_FB31                       ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F10R2 register  ******************/
S#define  CAN_F10R2_FB0                       ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F10R2_FB1                       ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F10R2_FB2                       ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F10R2_FB3                       ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F10R2_FB4                       ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F10R2_FB5                       ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F10R2_FB6                       ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F10R2_FB7                       ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F10R2_FB8                       ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F10R2_FB9                       ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F10R2_FB10                      ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F10R2_FB11                      ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F10R2_FB12                      ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F10R2_FB13                      ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F10R2_FB14                      ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F10R2_FB15                      ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F10R2_FB16                      ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F10R2_FB17                      ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F10R2_FB18                      ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F10R2_FB19                      ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F10R2_FB20                      ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F10R2_FB21                      ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F10R2_FB22                      ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F10R2_FB23                      ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F10R2_FB24                      ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F10R2_FB25                      ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F10R2_FB26                      ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F10R2_FB27                      ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F10R2_FB28                      ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F10R2_FB29                      ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F10R2_FB30                      ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F10R2_FB31                      ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F11R2 register  ******************/
S#define  CAN_F11R2_FB0                       ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F11R2_FB1                       ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F11R2_FB2                       ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F11R2_FB3                       ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F11R2_FB4                       ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F11R2_FB5                       ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F11R2_FB6                       ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F11R2_FB7                       ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F11R2_FB8                       ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F11R2_FB9                       ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F11R2_FB10                      ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F11R2_FB11                      ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F11R2_FB12                      ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F11R2_FB13                      ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F11R2_FB14                      ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F11R2_FB15                      ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F11R2_FB16                      ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F11R2_FB17                      ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F11R2_FB18                      ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F11R2_FB19                      ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F11R2_FB20                      ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F11R2_FB21                      ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F11R2_FB22                      ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F11R2_FB23                      ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F11R2_FB24                      ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F11R2_FB25                      ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F11R2_FB26                      ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F11R2_FB27                      ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F11R2_FB28                      ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F11R2_FB29                      ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F11R2_FB30                      ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F11R2_FB31                      ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F12R2 register  ******************/
S#define  CAN_F12R2_FB0                       ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F12R2_FB1                       ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F12R2_FB2                       ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F12R2_FB3                       ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F12R2_FB4                       ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F12R2_FB5                       ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F12R2_FB6                       ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F12R2_FB7                       ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F12R2_FB8                       ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F12R2_FB9                       ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F12R2_FB10                      ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F12R2_FB11                      ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F12R2_FB12                      ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F12R2_FB13                      ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F12R2_FB14                      ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F12R2_FB15                      ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F12R2_FB16                      ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F12R2_FB17                      ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F12R2_FB18                      ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F12R2_FB19                      ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F12R2_FB20                      ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F12R2_FB21                      ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F12R2_FB22                      ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F12R2_FB23                      ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F12R2_FB24                      ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F12R2_FB25                      ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F12R2_FB26                      ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F12R2_FB27                      ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F12R2_FB28                      ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F12R2_FB29                      ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F12R2_FB30                      ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F12R2_FB31                      ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/*******************  Bit definition for CAN_F13R2 register  ******************/
S#define  CAN_F13R2_FB0                       ((uint32_t)0x00000001)        /*!<Filter bit 0 */
S#define  CAN_F13R2_FB1                       ((uint32_t)0x00000002)        /*!<Filter bit 1 */
S#define  CAN_F13R2_FB2                       ((uint32_t)0x00000004)        /*!<Filter bit 2 */
S#define  CAN_F13R2_FB3                       ((uint32_t)0x00000008)        /*!<Filter bit 3 */
S#define  CAN_F13R2_FB4                       ((uint32_t)0x00000010)        /*!<Filter bit 4 */
S#define  CAN_F13R2_FB5                       ((uint32_t)0x00000020)        /*!<Filter bit 5 */
S#define  CAN_F13R2_FB6                       ((uint32_t)0x00000040)        /*!<Filter bit 6 */
S#define  CAN_F13R2_FB7                       ((uint32_t)0x00000080)        /*!<Filter bit 7 */
S#define  CAN_F13R2_FB8                       ((uint32_t)0x00000100)        /*!<Filter bit 8 */
S#define  CAN_F13R2_FB9                       ((uint32_t)0x00000200)        /*!<Filter bit 9 */
S#define  CAN_F13R2_FB10                      ((uint32_t)0x00000400)        /*!<Filter bit 10 */
S#define  CAN_F13R2_FB11                      ((uint32_t)0x00000800)        /*!<Filter bit 11 */
S#define  CAN_F13R2_FB12                      ((uint32_t)0x00001000)        /*!<Filter bit 12 */
S#define  CAN_F13R2_FB13                      ((uint32_t)0x00002000)        /*!<Filter bit 13 */
S#define  CAN_F13R2_FB14                      ((uint32_t)0x00004000)        /*!<Filter bit 14 */
S#define  CAN_F13R2_FB15                      ((uint32_t)0x00008000)        /*!<Filter bit 15 */
S#define  CAN_F13R2_FB16                      ((uint32_t)0x00010000)        /*!<Filter bit 16 */
S#define  CAN_F13R2_FB17                      ((uint32_t)0x00020000)        /*!<Filter bit 17 */
S#define  CAN_F13R2_FB18                      ((uint32_t)0x00040000)        /*!<Filter bit 18 */
S#define  CAN_F13R2_FB19                      ((uint32_t)0x00080000)        /*!<Filter bit 19 */
S#define  CAN_F13R2_FB20                      ((uint32_t)0x00100000)        /*!<Filter bit 20 */
S#define  CAN_F13R2_FB21                      ((uint32_t)0x00200000)        /*!<Filter bit 21 */
S#define  CAN_F13R2_FB22                      ((uint32_t)0x00400000)        /*!<Filter bit 22 */
S#define  CAN_F13R2_FB23                      ((uint32_t)0x00800000)        /*!<Filter bit 23 */
S#define  CAN_F13R2_FB24                      ((uint32_t)0x01000000)        /*!<Filter bit 24 */
S#define  CAN_F13R2_FB25                      ((uint32_t)0x02000000)        /*!<Filter bit 25 */
S#define  CAN_F13R2_FB26                      ((uint32_t)0x04000000)        /*!<Filter bit 26 */
S#define  CAN_F13R2_FB27                      ((uint32_t)0x08000000)        /*!<Filter bit 27 */
S#define  CAN_F13R2_FB28                      ((uint32_t)0x10000000)        /*!<Filter bit 28 */
S#define  CAN_F13R2_FB29                      ((uint32_t)0x20000000)        /*!<Filter bit 29 */
S#define  CAN_F13R2_FB30                      ((uint32_t)0x40000000)        /*!<Filter bit 30 */
S#define  CAN_F13R2_FB31                      ((uint32_t)0x80000000)        /*!<Filter bit 31 */
S
S/******************************************************************************/
S/*                                                                            */
S/*                          CRC calculation unit                              */
S/*                                                                            */
S/******************************************************************************/
S/*******************  Bit definition for CRC_DR register  *********************/
S#define  CRC_DR_DR                           ((uint32_t)0xFFFFFFFF) /*!< Data register bits */
S
S
S/*******************  Bit definition for CRC_IDR register  ********************/
S#define  CRC_IDR_IDR                         ((uint8_t)0xFF)        /*!< General-purpose 8-bit data register bits */
S
S
S/********************  Bit definition for CRC_CR register  ********************/
S#define  CRC_CR_RESET                        ((uint8_t)0x01)        /*!< RESET bit */
S
S/******************************************************************************/
S/*                                                                            */
S/*                            Crypto Processor                                */
S/*                                                                            */
S/******************************************************************************/
S/******************* Bits definition for CRYP_CR register  ********************/
S#define CRYP_CR_ALGODIR                      ((uint32_t)0x00000004)
S
S#define CRYP_CR_ALGOMODE                     ((uint32_t)0x00080038)
S#define CRYP_CR_ALGOMODE_0                   ((uint32_t)0x00000008)
S#define CRYP_CR_ALGOMODE_1                   ((uint32_t)0x00000010)
S#define CRYP_CR_ALGOMODE_2                   ((uint32_t)0x00000020)
S#define CRYP_CR_ALGOMODE_TDES_ECB            ((uint32_t)0x00000000)
S#define CRYP_CR_ALGOMODE_TDES_CBC            ((uint32_t)0x00000008)
S#define CRYP_CR_ALGOMODE_DES_ECB             ((uint32_t)0x00000010)
S#define CRYP_CR_ALGOMODE_DES_CBC             ((uint32_t)0x00000018)
S#define CRYP_CR_ALGOMODE_AES_ECB             ((uint32_t)0x00000020)
S#define CRYP_CR_ALGOMODE_AES_CBC             ((uint32_t)0x00000028)
S#define CRYP_CR_ALGOMODE_AES_CTR             ((uint32_t)0x00000030)
S#define CRYP_CR_ALGOMODE_AES_KEY             ((uint32_t)0x00000038)
S
S#define CRYP_CR_DATATYPE                     ((uint32_t)0x000000C0)
S#define CRYP_CR_DATATYPE_0                   ((uint32_t)0x00000040)
S#define CRYP_CR_DATATYPE_1                   ((uint32_t)0x00000080)
S#define CRYP_CR_KEYSIZE                      ((uint32_t)0x00000300)
S#define CRYP_CR_KEYSIZE_0                    ((uint32_t)0x00000100)
S#define CRYP_CR_KEYSIZE_1                    ((uint32_t)0x00000200)
S#define CRYP_CR_FFLUSH                       ((uint32_t)0x00004000)
S#define CRYP_CR_CRYPEN                       ((uint32_t)0x00008000)
S
S#define CRYP_CR_GCM_CCMPH                    ((uint32_t)0x00030000)
S#define CRYP_CR_GCM_CCMPH_0                  ((uint32_t)0x00010000)
S#define CRYP_CR_GCM_CCMPH_1                  ((uint32_t)0x00020000)
S#define CRYP_CR_ALGOMODE_3                   ((uint32_t)0x00080000) 
S
S/****************** Bits definition for CRYP_SR register  *********************/
S#define CRYP_SR_IFEM                         ((uint32_t)0x00000001)
S#define CRYP_SR_IFNF                         ((uint32_t)0x00000002)
S#define CRYP_SR_OFNE                         ((uint32_t)0x00000004)
S#define CRYP_SR_OFFU                         ((uint32_t)0x00000008)
S#define CRYP_SR_BUSY                         ((uint32_t)0x00000010)
S/****************** Bits definition for CRYP_DMACR register  ******************/
S#define CRYP_DMACR_DIEN                      ((uint32_t)0x00000001)
S#define CRYP_DMACR_DOEN                      ((uint32_t)0x00000002)
S/*****************  Bits definition for CRYP_IMSCR register  ******************/
S#define CRYP_IMSCR_INIM                      ((uint32_t)0x00000001)
S#define CRYP_IMSCR_OUTIM                     ((uint32_t)0x00000002)
S/****************** Bits definition for CRYP_RISR register  *******************/
S#define CRYP_RISR_OUTRIS                     ((uint32_t)0x00000001)
S#define CRYP_RISR_INRIS                      ((uint32_t)0x00000002)
S/****************** Bits definition for CRYP_MISR register  *******************/
S#define CRYP_MISR_INMIS                      ((uint32_t)0x00000001)
S#define CRYP_MISR_OUTMIS                     ((uint32_t)0x00000002)
S
S/******************************************************************************/
S/*                                                                            */
S/*                      Digital to Analog Converter                           */
S/*                                                                            */
S/******************************************************************************/
S/********************  Bit definition for DAC_CR register  ********************/
S#define  DAC_CR_EN1                          ((uint32_t)0x00000001)        /*!<DAC channel1 enable */
S#define  DAC_CR_BOFF1                        ((uint32_t)0x00000002)        /*!<DAC channel1 output buffer disable */
S#define  DAC_CR_TEN1                         ((uint32_t)0x00000004)        /*!<DAC channel1 Trigger enable */
S
S#define  DAC_CR_TSEL1                        ((uint32_t)0x00000038)        /*!<TSEL1[2:0] (DAC channel1 Trigger selection) */
S#define  DAC_CR_TSEL1_0                      ((uint32_t)0x00000008)        /*!<Bit 0 */
S#define  DAC_CR_TSEL1_1                      ((uint32_t)0x00000010)        /*!<Bit 1 */
S#define  DAC_CR_TSEL1_2                      ((uint32_t)0x00000020)        /*!<Bit 2 */
S
S#define  DAC_CR_WAVE1                        ((uint32_t)0x000000C0)        /*!<WAVE1[1:0] (DAC channel1 noise/triangle wave generation enable) */
S#define  DAC_CR_WAVE1_0                      ((uint32_t)0x00000040)        /*!<Bit 0 */
S#define  DAC_CR_WAVE1_1                      ((uint32_t)0x00000080)        /*!<Bit 1 */
S
S#define  DAC_CR_MAMP1                        ((uint32_t)0x00000F00)        /*!<MAMP1[3:0] (DAC channel1 Mask/Amplitude selector) */
S#define  DAC_CR_MAMP1_0                      ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  DAC_CR_MAMP1_1                      ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  DAC_CR_MAMP1_2                      ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  DAC_CR_MAMP1_3                      ((uint32_t)0x00000800)        /*!<Bit 3 */
S
S#define  DAC_CR_DMAEN1                       ((uint32_t)0x00001000)        /*!<DAC channel1 DMA enable */
S#define  DAC_CR_EN2                          ((uint32_t)0x00010000)        /*!<DAC channel2 enable */
S#define  DAC_CR_BOFF2                        ((uint32_t)0x00020000)        /*!<DAC channel2 output buffer disable */
S#define  DAC_CR_TEN2                         ((uint32_t)0x00040000)        /*!<DAC channel2 Trigger enable */
S
S#define  DAC_CR_TSEL2                        ((uint32_t)0x00380000)        /*!<TSEL2[2:0] (DAC channel2 Trigger selection) */
S#define  DAC_CR_TSEL2_0                      ((uint32_t)0x00080000)        /*!<Bit 0 */
S#define  DAC_CR_TSEL2_1                      ((uint32_t)0x00100000)        /*!<Bit 1 */
S#define  DAC_CR_TSEL2_2                      ((uint32_t)0x00200000)        /*!<Bit 2 */
S
S#define  DAC_CR_WAVE2                        ((uint32_t)0x00C00000)        /*!<WAVE2[1:0] (DAC channel2 noise/triangle wave generation enable) */
S#define  DAC_CR_WAVE2_0                      ((uint32_t)0x00400000)        /*!<Bit 0 */
S#define  DAC_CR_WAVE2_1                      ((uint32_t)0x00800000)        /*!<Bit 1 */
S
S#define  DAC_CR_MAMP2                        ((uint32_t)0x0F000000)        /*!<MAMP2[3:0] (DAC channel2 Mask/Amplitude selector) */
S#define  DAC_CR_MAMP2_0                      ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  DAC_CR_MAMP2_1                      ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  DAC_CR_MAMP2_2                      ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  DAC_CR_MAMP2_3                      ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  DAC_CR_DMAEN2                       ((uint32_t)0x10000000)        /*!<DAC channel2 DMA enabled */
S
S/*****************  Bit definition for DAC_SWTRIGR register  ******************/
S#define  DAC_SWTRIGR_SWTRIG1                 ((uint8_t)0x01)               /*!<DAC channel1 software trigger */
S#define  DAC_SWTRIGR_SWTRIG2                 ((uint8_t)0x02)               /*!<DAC channel2 software trigger */
S
S/*****************  Bit definition for DAC_DHR12R1 register  ******************/
S#define  DAC_DHR12R1_DACC1DHR                ((uint16_t)0x0FFF)            /*!<DAC channel1 12-bit Right aligned data */
S
S/*****************  Bit definition for DAC_DHR12L1 register  ******************/
S#define  DAC_DHR12L1_DACC1DHR                ((uint16_t)0xFFF0)            /*!<DAC channel1 12-bit Left aligned data */
S
S/******************  Bit definition for DAC_DHR8R1 register  ******************/
S#define  DAC_DHR8R1_DACC1DHR                 ((uint8_t)0xFF)               /*!<DAC channel1 8-bit Right aligned data */
S
S/*****************  Bit definition for DAC_DHR12R2 register  ******************/
S#define  DAC_DHR12R2_DACC2DHR                ((uint16_t)0x0FFF)            /*!<DAC channel2 12-bit Right aligned data */
S
S/*****************  Bit definition for DAC_DHR12L2 register  ******************/
S#define  DAC_DHR12L2_DACC2DHR                ((uint16_t)0xFFF0)            /*!<DAC channel2 12-bit Left aligned data */
S
S/******************  Bit definition for DAC_DHR8R2 register  ******************/
S#define  DAC_DHR8R2_DACC2DHR                 ((uint8_t)0xFF)               /*!<DAC channel2 8-bit Right aligned data */
S
S/*****************  Bit definition for DAC_DHR12RD register  ******************/
S#define  DAC_DHR12RD_DACC1DHR                ((uint32_t)0x00000FFF)        /*!<DAC channel1 12-bit Right aligned data */
S#define  DAC_DHR12RD_DACC2DHR                ((uint32_t)0x0FFF0000)        /*!<DAC channel2 12-bit Right aligned data */
S
S/*****************  Bit definition for DAC_DHR12LD register  ******************/
S#define  DAC_DHR12LD_DACC1DHR                ((uint32_t)0x0000FFF0)        /*!<DAC channel1 12-bit Left aligned data */
S#define  DAC_DHR12LD_DACC2DHR                ((uint32_t)0xFFF00000)        /*!<DAC channel2 12-bit Left aligned data */
S
S/******************  Bit definition for DAC_DHR8RD register  ******************/
S#define  DAC_DHR8RD_DACC1DHR                 ((uint16_t)0x00FF)            /*!<DAC channel1 8-bit Right aligned data */
S#define  DAC_DHR8RD_DACC2DHR                 ((uint16_t)0xFF00)            /*!<DAC channel2 8-bit Right aligned data */
S
S/*******************  Bit definition for DAC_DOR1 register  *******************/
S#define  DAC_DOR1_DACC1DOR                   ((uint16_t)0x0FFF)            /*!<DAC channel1 data output */
S
S/*******************  Bit definition for DAC_DOR2 register  *******************/
S#define  DAC_DOR2_DACC2DOR                   ((uint16_t)0x0FFF)            /*!<DAC channel2 data output */
S
S/********************  Bit definition for DAC_SR register  ********************/
S#define  DAC_SR_DMAUDR1                      ((uint32_t)0x00002000)        /*!<DAC channel1 DMA underrun flag */
S#define  DAC_SR_DMAUDR2                      ((uint32_t)0x20000000)        /*!<DAC channel2 DMA underrun flag */
S
S/******************************************************************************/
S/*                                                                            */
S/*                                 Debug MCU                                  */
S/*                                                                            */
S/******************************************************************************/
S
S/******************************************************************************/
S/*                                                                            */
S/*                                    DCMI                                    */
S/*                                                                            */
S/******************************************************************************/
S/********************  Bits definition for DCMI_CR register  ******************/
S#define DCMI_CR_CAPTURE                      ((uint32_t)0x00000001)
S#define DCMI_CR_CM                           ((uint32_t)0x00000002)
S#define DCMI_CR_CROP                         ((uint32_t)0x00000004)
S#define DCMI_CR_JPEG                         ((uint32_t)0x00000008)
S#define DCMI_CR_ESS                          ((uint32_t)0x00000010)
S#define DCMI_CR_PCKPOL                       ((uint32_t)0x00000020)
S#define DCMI_CR_HSPOL                        ((uint32_t)0x00000040)
S#define DCMI_CR_VSPOL                        ((uint32_t)0x00000080)
S#define DCMI_CR_FCRC_0                       ((uint32_t)0x00000100)
S#define DCMI_CR_FCRC_1                       ((uint32_t)0x00000200)
S#define DCMI_CR_EDM_0                        ((uint32_t)0x00000400)
S#define DCMI_CR_EDM_1                        ((uint32_t)0x00000800)
S#define DCMI_CR_CRE                          ((uint32_t)0x00001000)
S#define DCMI_CR_ENABLE                       ((uint32_t)0x00004000)
S
S/********************  Bits definition for DCMI_SR register  ******************/
S#define DCMI_SR_HSYNC                        ((uint32_t)0x00000001)
S#define DCMI_SR_VSYNC                        ((uint32_t)0x00000002)
S#define DCMI_SR_FNE                          ((uint32_t)0x00000004)
S
S/********************  Bits definition for DCMI_RISR register  ****************/
S#define DCMI_RISR_FRAME_RIS                  ((uint32_t)0x00000001)
S#define DCMI_RISR_OVF_RIS                    ((uint32_t)0x00000002)
S#define DCMI_RISR_ERR_RIS                    ((uint32_t)0x00000004)
S#define DCMI_RISR_VSYNC_RIS                  ((uint32_t)0x00000008)
S#define DCMI_RISR_LINE_RIS                   ((uint32_t)0x00000010)
S
S/********************  Bits definition for DCMI_IER register  *****************/
S#define DCMI_IER_FRAME_IE                    ((uint32_t)0x00000001)
S#define DCMI_IER_OVF_IE                      ((uint32_t)0x00000002)
S#define DCMI_IER_ERR_IE                      ((uint32_t)0x00000004)
S#define DCMI_IER_VSYNC_IE                    ((uint32_t)0x00000008)
S#define DCMI_IER_LINE_IE                     ((uint32_t)0x00000010)
S
S/********************  Bits definition for DCMI_MISR register  ****************/
S#define DCMI_MISR_FRAME_MIS                  ((uint32_t)0x00000001)
S#define DCMI_MISR_OVF_MIS                    ((uint32_t)0x00000002)
S#define DCMI_MISR_ERR_MIS                    ((uint32_t)0x00000004)
S#define DCMI_MISR_VSYNC_MIS                  ((uint32_t)0x00000008)
S#define DCMI_MISR_LINE_MIS                   ((uint32_t)0x00000010)
S
S/********************  Bits definition for DCMI_ICR register  *****************/
S#define DCMI_ICR_FRAME_ISC                   ((uint32_t)0x00000001)
S#define DCMI_ICR_OVF_ISC                     ((uint32_t)0x00000002)
S#define DCMI_ICR_ERR_ISC                     ((uint32_t)0x00000004)
S#define DCMI_ICR_VSYNC_ISC                   ((uint32_t)0x00000008)
S#define DCMI_ICR_LINE_ISC                    ((uint32_t)0x00000010)
S
S/******************************************************************************/
S/*                                                                            */
S/*                             DMA Controller                                 */
S/*                                                                            */
S/******************************************************************************/
S/********************  Bits definition for DMA_SxCR register  *****************/ 
S#define DMA_SxCR_CHSEL                       ((uint32_t)0x0E000000)
S#define DMA_SxCR_CHSEL_0                     ((uint32_t)0x02000000)
S#define DMA_SxCR_CHSEL_1                     ((uint32_t)0x04000000)
S#define DMA_SxCR_CHSEL_2                     ((uint32_t)0x08000000) 
S#define DMA_SxCR_MBURST                      ((uint32_t)0x01800000)
S#define DMA_SxCR_MBURST_0                    ((uint32_t)0x00800000)
S#define DMA_SxCR_MBURST_1                    ((uint32_t)0x01000000)
S#define DMA_SxCR_PBURST                      ((uint32_t)0x00600000)
S#define DMA_SxCR_PBURST_0                    ((uint32_t)0x00200000)
S#define DMA_SxCR_PBURST_1                    ((uint32_t)0x00400000)
S#define DMA_SxCR_ACK                         ((uint32_t)0x00100000)
S#define DMA_SxCR_CT                          ((uint32_t)0x00080000)  
S#define DMA_SxCR_DBM                         ((uint32_t)0x00040000)
S#define DMA_SxCR_PL                          ((uint32_t)0x00030000)
S#define DMA_SxCR_PL_0                        ((uint32_t)0x00010000)
S#define DMA_SxCR_PL_1                        ((uint32_t)0x00020000)
S#define DMA_SxCR_PINCOS                      ((uint32_t)0x00008000)
S#define DMA_SxCR_MSIZE                       ((uint32_t)0x00006000)
S#define DMA_SxCR_MSIZE_0                     ((uint32_t)0x00002000)
S#define DMA_SxCR_MSIZE_1                     ((uint32_t)0x00004000)
S#define DMA_SxCR_PSIZE                       ((uint32_t)0x00001800)
S#define DMA_SxCR_PSIZE_0                     ((uint32_t)0x00000800)
S#define DMA_SxCR_PSIZE_1                     ((uint32_t)0x00001000)
S#define DMA_SxCR_MINC                        ((uint32_t)0x00000400)
S#define DMA_SxCR_PINC                        ((uint32_t)0x00000200)
S#define DMA_SxCR_CIRC                        ((uint32_t)0x00000100)
S#define DMA_SxCR_DIR                         ((uint32_t)0x000000C0)
S#define DMA_SxCR_DIR_0                       ((uint32_t)0x00000040)
S#define DMA_SxCR_DIR_1                       ((uint32_t)0x00000080)
S#define DMA_SxCR_PFCTRL                      ((uint32_t)0x00000020)
S#define DMA_SxCR_TCIE                        ((uint32_t)0x00000010)
S#define DMA_SxCR_HTIE                        ((uint32_t)0x00000008)
S#define DMA_SxCR_TEIE                        ((uint32_t)0x00000004)
S#define DMA_SxCR_DMEIE                       ((uint32_t)0x00000002)
S#define DMA_SxCR_EN                          ((uint32_t)0x00000001)
S
S/********************  Bits definition for DMA_SxCNDTR register  **************/
S#define DMA_SxNDT                            ((uint32_t)0x0000FFFF)
S#define DMA_SxNDT_0                          ((uint32_t)0x00000001)
S#define DMA_SxNDT_1                          ((uint32_t)0x00000002)
S#define DMA_SxNDT_2                          ((uint32_t)0x00000004)
S#define DMA_SxNDT_3                          ((uint32_t)0x00000008)
S#define DMA_SxNDT_4                          ((uint32_t)0x00000010)
S#define DMA_SxNDT_5                          ((uint32_t)0x00000020)
S#define DMA_SxNDT_6                          ((uint32_t)0x00000040)
S#define DMA_SxNDT_7                          ((uint32_t)0x00000080)
S#define DMA_SxNDT_8                          ((uint32_t)0x00000100)
S#define DMA_SxNDT_9                          ((uint32_t)0x00000200)
S#define DMA_SxNDT_10                         ((uint32_t)0x00000400)
S#define DMA_SxNDT_11                         ((uint32_t)0x00000800)
S#define DMA_SxNDT_12                         ((uint32_t)0x00001000)
S#define DMA_SxNDT_13                         ((uint32_t)0x00002000)
S#define DMA_SxNDT_14                         ((uint32_t)0x00004000)
S#define DMA_SxNDT_15                         ((uint32_t)0x00008000)
S
S/********************  Bits definition for DMA_SxFCR register  ****************/ 
S#define DMA_SxFCR_FEIE                       ((uint32_t)0x00000080)
S#define DMA_SxFCR_FS                         ((uint32_t)0x00000038)
S#define DMA_SxFCR_FS_0                       ((uint32_t)0x00000008)
S#define DMA_SxFCR_FS_1                       ((uint32_t)0x00000010)
S#define DMA_SxFCR_FS_2                       ((uint32_t)0x00000020)
S#define DMA_SxFCR_DMDIS                      ((uint32_t)0x00000004)
S#define DMA_SxFCR_FTH                        ((uint32_t)0x00000003)
S#define DMA_SxFCR_FTH_0                      ((uint32_t)0x00000001)
S#define DMA_SxFCR_FTH_1                      ((uint32_t)0x00000002)
S
S/********************  Bits definition for DMA_LISR register  *****************/ 
S#define DMA_LISR_TCIF3                       ((uint32_t)0x08000000)
S#define DMA_LISR_HTIF3                       ((uint32_t)0x04000000)
S#define DMA_LISR_TEIF3                       ((uint32_t)0x02000000)
S#define DMA_LISR_DMEIF3                      ((uint32_t)0x01000000)
S#define DMA_LISR_FEIF3                       ((uint32_t)0x00400000)
S#define DMA_LISR_TCIF2                       ((uint32_t)0x00200000)
S#define DMA_LISR_HTIF2                       ((uint32_t)0x00100000)
S#define DMA_LISR_TEIF2                       ((uint32_t)0x00080000)
S#define DMA_LISR_DMEIF2                      ((uint32_t)0x00040000)
S#define DMA_LISR_FEIF2                       ((uint32_t)0x00010000)
S#define DMA_LISR_TCIF1                       ((uint32_t)0x00000800)
S#define DMA_LISR_HTIF1                       ((uint32_t)0x00000400)
S#define DMA_LISR_TEIF1                       ((uint32_t)0x00000200)
S#define DMA_LISR_DMEIF1                      ((uint32_t)0x00000100)
S#define DMA_LISR_FEIF1                       ((uint32_t)0x00000040)
S#define DMA_LISR_TCIF0                       ((uint32_t)0x00000020)
S#define DMA_LISR_HTIF0                       ((uint32_t)0x00000010)
S#define DMA_LISR_TEIF0                       ((uint32_t)0x00000008)
S#define DMA_LISR_DMEIF0                      ((uint32_t)0x00000004)
S#define DMA_LISR_FEIF0                       ((uint32_t)0x00000001)
S
S/********************  Bits definition for DMA_HISR register  *****************/ 
S#define DMA_HISR_TCIF7                       ((uint32_t)0x08000000)
S#define DMA_HISR_HTIF7                       ((uint32_t)0x04000000)
S#define DMA_HISR_TEIF7                       ((uint32_t)0x02000000)
S#define DMA_HISR_DMEIF7                      ((uint32_t)0x01000000)
S#define DMA_HISR_FEIF7                       ((uint32_t)0x00400000)
S#define DMA_HISR_TCIF6                       ((uint32_t)0x00200000)
S#define DMA_HISR_HTIF6                       ((uint32_t)0x00100000)
S#define DMA_HISR_TEIF6                       ((uint32_t)0x00080000)
S#define DMA_HISR_DMEIF6                      ((uint32_t)0x00040000)
S#define DMA_HISR_FEIF6                       ((uint32_t)0x00010000)
S#define DMA_HISR_TCIF5                       ((uint32_t)0x00000800)
S#define DMA_HISR_HTIF5                       ((uint32_t)0x00000400)
S#define DMA_HISR_TEIF5                       ((uint32_t)0x00000200)
S#define DMA_HISR_DMEIF5                      ((uint32_t)0x00000100)
S#define DMA_HISR_FEIF5                       ((uint32_t)0x00000040)
S#define DMA_HISR_TCIF4                       ((uint32_t)0x00000020)
S#define DMA_HISR_HTIF4                       ((uint32_t)0x00000010)
S#define DMA_HISR_TEIF4                       ((uint32_t)0x00000008)
S#define DMA_HISR_DMEIF4                      ((uint32_t)0x00000004)
S#define DMA_HISR_FEIF4                       ((uint32_t)0x00000001)
S
S/********************  Bits definition for DMA_LIFCR register  ****************/ 
S#define DMA_LIFCR_CTCIF3                     ((uint32_t)0x08000000)
S#define DMA_LIFCR_CHTIF3                     ((uint32_t)0x04000000)
S#define DMA_LIFCR_CTEIF3                     ((uint32_t)0x02000000)
S#define DMA_LIFCR_CDMEIF3                    ((uint32_t)0x01000000)
S#define DMA_LIFCR_CFEIF3                     ((uint32_t)0x00400000)
S#define DMA_LIFCR_CTCIF2                     ((uint32_t)0x00200000)
S#define DMA_LIFCR_CHTIF2                     ((uint32_t)0x00100000)
S#define DMA_LIFCR_CTEIF2                     ((uint32_t)0x00080000)
S#define DMA_LIFCR_CDMEIF2                    ((uint32_t)0x00040000)
S#define DMA_LIFCR_CFEIF2                     ((uint32_t)0x00010000)
S#define DMA_LIFCR_CTCIF1                     ((uint32_t)0x00000800)
S#define DMA_LIFCR_CHTIF1                     ((uint32_t)0x00000400)
S#define DMA_LIFCR_CTEIF1                     ((uint32_t)0x00000200)
S#define DMA_LIFCR_CDMEIF1                    ((uint32_t)0x00000100)
S#define DMA_LIFCR_CFEIF1                     ((uint32_t)0x00000040)
S#define DMA_LIFCR_CTCIF0                     ((uint32_t)0x00000020)
S#define DMA_LIFCR_CHTIF0                     ((uint32_t)0x00000010)
S#define DMA_LIFCR_CTEIF0                     ((uint32_t)0x00000008)
S#define DMA_LIFCR_CDMEIF0                    ((uint32_t)0x00000004)
S#define DMA_LIFCR_CFEIF0                     ((uint32_t)0x00000001)
S
S/********************  Bits definition for DMA_HIFCR  register  ****************/ 
S#define DMA_HIFCR_CTCIF7                     ((uint32_t)0x08000000)
S#define DMA_HIFCR_CHTIF7                     ((uint32_t)0x04000000)
S#define DMA_HIFCR_CTEIF7                     ((uint32_t)0x02000000)
S#define DMA_HIFCR_CDMEIF7                    ((uint32_t)0x01000000)
S#define DMA_HIFCR_CFEIF7                     ((uint32_t)0x00400000)
S#define DMA_HIFCR_CTCIF6                     ((uint32_t)0x00200000)
S#define DMA_HIFCR_CHTIF6                     ((uint32_t)0x00100000)
S#define DMA_HIFCR_CTEIF6                     ((uint32_t)0x00080000)
S#define DMA_HIFCR_CDMEIF6                    ((uint32_t)0x00040000)
S#define DMA_HIFCR_CFEIF6                     ((uint32_t)0x00010000)
S#define DMA_HIFCR_CTCIF5                     ((uint32_t)0x00000800)
S#define DMA_HIFCR_CHTIF5                     ((uint32_t)0x00000400)
S#define DMA_HIFCR_CTEIF5                     ((uint32_t)0x00000200)
S#define DMA_HIFCR_CDMEIF5                    ((uint32_t)0x00000100)
S#define DMA_HIFCR_CFEIF5                     ((uint32_t)0x00000040)
S#define DMA_HIFCR_CTCIF4                     ((uint32_t)0x00000020)
S#define DMA_HIFCR_CHTIF4                     ((uint32_t)0x00000010)
S#define DMA_HIFCR_CTEIF4                     ((uint32_t)0x00000008)
S#define DMA_HIFCR_CDMEIF4                    ((uint32_t)0x00000004)
S#define DMA_HIFCR_CFEIF4                     ((uint32_t)0x00000001)
S
S/******************************************************************************/
S/*                                                                            */
S/*                         AHB Master DMA2D Controller (DMA2D)                */
S/*                                                                            */
S/******************************************************************************/
S
S/********************  Bit definition for DMA2D_CR register  ******************/
S
S#define DMA2D_CR_START                     ((uint32_t)0x00000001)               /*!< Start transfer */
S#define DMA2D_CR_SUSP                      ((uint32_t)0x00000002)               /*!< Suspend transfer */
S#define DMA2D_CR_ABORT                     ((uint32_t)0x00000004)               /*!< Abort transfer */
S#define DMA2D_CR_TEIE                      ((uint32_t)0x00000100)               /*!< Transfer Error Interrupt Enable */
S#define DMA2D_CR_TCIE                      ((uint32_t)0x00000200)               /*!< Transfer Complete Interrupt Enable */
S#define DMA2D_CR_TWIE                      ((uint32_t)0x00000400)               /*!< Transfer Watermark Interrupt Enable */
S#define DMA2D_CR_CAEIE                     ((uint32_t)0x00000800)               /*!< CLUT Access Error Interrupt Enable */
S#define DMA2D_CR_CTCIE                     ((uint32_t)0x00001000)               /*!< CLUT Transfer Complete Interrupt Enable */
S#define DMA2D_CR_CEIE                      ((uint32_t)0x00002000)               /*!< Configuration Error Interrupt Enable */
S#define DMA2D_CR_MODE                      ((uint32_t)0x00030000)               /*!< DMA2D Mode */
S
S/********************  Bit definition for DMA2D_ISR register  *****************/
S
S#define DMA2D_ISR_TEIF                     ((uint32_t)0x00000001)               /*!< Transfer Error Interrupt Flag */
S#define DMA2D_ISR_TCIF                     ((uint32_t)0x00000002)               /*!< Transfer Complete Interrupt Flag */
S#define DMA2D_ISR_TWIF                     ((uint32_t)0x00000004)               /*!< Transfer Watermark Interrupt Flag */
S#define DMA2D_ISR_CAEIF                    ((uint32_t)0x00000008)               /*!< CLUT Access Error Interrupt Flag */
S#define DMA2D_ISR_CTCIF                    ((uint32_t)0x00000010)               /*!< CLUT Transfer Complete Interrupt Flag */
S#define DMA2D_ISR_CEIF                     ((uint32_t)0x00000020)               /*!< Configuration Error Interrupt Flag */
S
S/********************  Bit definition for DMA2D_IFSR register  ****************/
S
S#define DMA2D_IFSR_CTEIF                   ((uint32_t)0x00000001)               /*!< Clears Transfer Error Interrupt Flag */
S#define DMA2D_IFSR_CTCIF                   ((uint32_t)0x00000002)               /*!< Clears Transfer Complete Interrupt Flag */
S#define DMA2D_IFSR_CTWIF                   ((uint32_t)0x00000004)               /*!< Clears Transfer Watermark Interrupt Flag */
S#define DMA2D_IFSR_CCAEIF                  ((uint32_t)0x00000008)               /*!< Clears CLUT Access Error Interrupt Flag */
S#define DMA2D_IFSR_CCTCIF                  ((uint32_t)0x00000010)               /*!< Clears CLUT Transfer Complete Interrupt Flag */
S#define DMA2D_IFSR_CCEIF                   ((uint32_t)0x00000020)               /*!< Clears Configuration Error Interrupt Flag */
S
S/********************  Bit definition for DMA2D_FGMAR register  ***************/
S
S#define DMA2D_FGMAR_MA                     ((uint32_t)0xFFFFFFFF)               /*!< Memory Address */
S
S/********************  Bit definition for DMA2D_FGOR register  ****************/
S
S#define DMA2D_FGOR_LO                      ((uint32_t)0x00003FFF)               /*!< Line Offset */
S
S/********************  Bit definition for DMA2D_BGMAR register  ***************/
S
S#define DMA2D_BGMAR_MA                     ((uint32_t)0xFFFFFFFF)               /*!< Memory Address */
S
S/********************  Bit definition for DMA2D_BGOR register  ****************/
S
S#define DMA2D_BGOR_LO                      ((uint32_t)0x00003FFF)               /*!< Line Offset */
S
S/********************  Bit definition for DMA2D_FGPFCCR register  *************/
S
S#define DMA2D_FGPFCCR_CM                   ((uint32_t)0x0000000F)               /*!< Color mode */
S#define DMA2D_FGPFCCR_CCM                  ((uint32_t)0x00000010)               /*!< CLUT Color mode */
S#define DMA2D_FGPFCCR_START                ((uint32_t)0x00000020)               /*!< Start */
S#define DMA2D_FGPFCCR_CS                   ((uint32_t)0x0000FF00)               /*!< CLUT size */
S#define DMA2D_FGPFCCR_AM                   ((uint32_t)0x00030000)               /*!< Alpha mode */
S#define DMA2D_FGPFCCR_ALPHA                ((uint32_t)0xFF000000)               /*!< Alpha value */
S
S/********************  Bit definition for DMA2D_FGCOLR register  **************/
S
S#define DMA2D_FGCOLR_BLUE                  ((uint32_t)0x000000FF)               /*!< Blue Value */
S#define DMA2D_FGCOLR_GREEN                 ((uint32_t)0x0000FF00)               /*!< Green Value */
S#define DMA2D_FGCOLR_RED                   ((uint32_t)0x00FF0000)               /*!< Red Value */   
S
S/********************  Bit definition for DMA2D_BGPFCCR register  *************/
S
S#define DMA2D_BGPFCCR_CM                   ((uint32_t)0x0000000F)               /*!< Color mode */
S#define DMA2D_BGPFCCR_CCM                  ((uint32_t)0x00000010)               /*!< CLUT Color mode */
S#define DMA2D_BGPFCCR_START                ((uint32_t)0x00000020)               /*!< Start */
S#define DMA2D_BGPFCCR_CS                   ((uint32_t)0x0000FF00)               /*!< CLUT size */
S#define DMA2D_BGPFCCR_AM                   ((uint32_t)0x00030000)               /*!< Alpha Mode */
S#define DMA2D_BGPFCCR_ALPHA                ((uint32_t)0xFF000000)               /*!< Alpha value */
S
S/********************  Bit definition for DMA2D_BGCOLR register  **************/
S
S#define DMA2D_BGCOLR_BLUE                  ((uint32_t)0x000000FF)               /*!< Blue Value */
S#define DMA2D_BGCOLR_GREEN                 ((uint32_t)0x0000FF00)               /*!< Green Value */
S#define DMA2D_BGCOLR_RED                   ((uint32_t)0x00FF0000)               /*!< Red Value */
S
S/********************  Bit definition for DMA2D_FGCMAR register  **************/
S
S#define DMA2D_FGCMAR_MA                    ((uint32_t)0xFFFFFFFF)               /*!< Memory Address */
S
S/********************  Bit definition for DMA2D_BGCMAR register  **************/
S
S#define DMA2D_BGCMAR_MA                    ((uint32_t)0xFFFFFFFF)               /*!< Memory Address */
S
S/********************  Bit definition for DMA2D_OPFCCR register  **************/
S
S#define DMA2D_OPFCCR_CM                    ((uint32_t)0x00000007)               /*!< Color mode */
S
S/********************  Bit definition for DMA2D_OCOLR register  ***************/
S
S/*!<Mode_ARGB8888/RGB888 */
S
S#define DMA2D_OCOLR_BLUE_1                 ((uint32_t)0x000000FF)               /*!< BLUE Value */
S#define DMA2D_OCOLR_GREEN_1                ((uint32_t)0x0000FF00)               /*!< GREEN Value  */
S#define DMA2D_OCOLR_RED_1                  ((uint32_t)0x00FF0000)               /*!< Red Value */
S#define DMA2D_OCOLR_ALPHA_1                ((uint32_t)0xFF000000)               /*!< Alpha Channel Value */
S
S/*!<Mode_RGB565 */
S#define DMA2D_OCOLR_BLUE_2                 ((uint32_t)0x0000001F)               /*!< BLUE Value */
S#define DMA2D_OCOLR_GREEN_2                ((uint32_t)0x000007E0)               /*!< GREEN Value  */
S#define DMA2D_OCOLR_RED_2                  ((uint32_t)0x0000F800)               /*!< Red Value */
S
S/*!<Mode_ARGB1555 */
S#define DMA2D_OCOLR_BLUE_3                 ((uint32_t)0x0000001F)               /*!< BLUE Value */
S#define DMA2D_OCOLR_GREEN_3                ((uint32_t)0x000003E0)               /*!< GREEN Value  */
S#define DMA2D_OCOLR_RED_3                  ((uint32_t)0x00007C00)               /*!< Red Value */
S#define DMA2D_OCOLR_ALPHA_3                ((uint32_t)0x00008000)               /*!< Alpha Channel Value */
S
S/*!<Mode_ARGB4444 */
S#define DMA2D_OCOLR_BLUE_4                 ((uint32_t)0x0000000F)               /*!< BLUE Value */
S#define DMA2D_OCOLR_GREEN_4                ((uint32_t)0x000000F0)               /*!< GREEN Value  */
S#define DMA2D_OCOLR_RED_4                  ((uint32_t)0x00000F00)               /*!< Red Value */
S#define DMA2D_OCOLR_ALPHA_4                ((uint32_t)0x0000F000)               /*!< Alpha Channel Value */
S
S/********************  Bit definition for DMA2D_OMAR register  ****************/
S
S#define DMA2D_OMAR_MA                      ((uint32_t)0xFFFFFFFF)               /*!< Memory Address */
S
S/********************  Bit definition for DMA2D_OOR register  *****************/
S
S#define DMA2D_OOR_LO                       ((uint32_t)0x00003FFF)               /*!< Line Offset */
S
S/********************  Bit definition for DMA2D_NLR register  *****************/
S
S#define DMA2D_NLR_NL                       ((uint32_t)0x0000FFFF)               /*!< Number of Lines */
S#define DMA2D_NLR_PL                       ((uint32_t)0x3FFF0000)               /*!< Pixel per Lines */
S
S/********************  Bit definition for DMA2D_LWR register  *****************/
S
S#define DMA2D_LWR_LW                       ((uint32_t)0x0000FFFF)               /*!< Line Watermark */
S
S/********************  Bit definition for DMA2D_AMTCR register  ***************/
S
S#define DMA2D_AMTCR_EN                     ((uint32_t)0x00000001)               /*!< Enable */
S#define DMA2D_AMTCR_DT                     ((uint32_t)0x0000FF00)               /*!< Dead Time */
S
S
S
S/********************  Bit definition for DMA2D_FGCLUT register  **************/
S                                                                     
S/********************  Bit definition for DMA2D_BGCLUT register  **************/
S
S
S/******************************************************************************/
S/*                                                                            */
S/*                    External Interrupt/Event Controller                     */
S/*                                                                            */
S/******************************************************************************/
S/*******************  Bit definition for EXTI_IMR register  *******************/
S#define  EXTI_IMR_MR0                        ((uint32_t)0x00000001)        /*!< Interrupt Mask on line 0 */
S#define  EXTI_IMR_MR1                        ((uint32_t)0x00000002)        /*!< Interrupt Mask on line 1 */
S#define  EXTI_IMR_MR2                        ((uint32_t)0x00000004)        /*!< Interrupt Mask on line 2 */
S#define  EXTI_IMR_MR3                        ((uint32_t)0x00000008)        /*!< Interrupt Mask on line 3 */
S#define  EXTI_IMR_MR4                        ((uint32_t)0x00000010)        /*!< Interrupt Mask on line 4 */
S#define  EXTI_IMR_MR5                        ((uint32_t)0x00000020)        /*!< Interrupt Mask on line 5 */
S#define  EXTI_IMR_MR6                        ((uint32_t)0x00000040)        /*!< Interrupt Mask on line 6 */
S#define  EXTI_IMR_MR7                        ((uint32_t)0x00000080)        /*!< Interrupt Mask on line 7 */
S#define  EXTI_IMR_MR8                        ((uint32_t)0x00000100)        /*!< Interrupt Mask on line 8 */
S#define  EXTI_IMR_MR9                        ((uint32_t)0x00000200)        /*!< Interrupt Mask on line 9 */
S#define  EXTI_IMR_MR10                       ((uint32_t)0x00000400)        /*!< Interrupt Mask on line 10 */
S#define  EXTI_IMR_MR11                       ((uint32_t)0x00000800)        /*!< Interrupt Mask on line 11 */
S#define  EXTI_IMR_MR12                       ((uint32_t)0x00001000)        /*!< Interrupt Mask on line 12 */
S#define  EXTI_IMR_MR13                       ((uint32_t)0x00002000)        /*!< Interrupt Mask on line 13 */
S#define  EXTI_IMR_MR14                       ((uint32_t)0x00004000)        /*!< Interrupt Mask on line 14 */
S#define  EXTI_IMR_MR15                       ((uint32_t)0x00008000)        /*!< Interrupt Mask on line 15 */
S#define  EXTI_IMR_MR16                       ((uint32_t)0x00010000)        /*!< Interrupt Mask on line 16 */
S#define  EXTI_IMR_MR17                       ((uint32_t)0x00020000)        /*!< Interrupt Mask on line 17 */
S#define  EXTI_IMR_MR18                       ((uint32_t)0x00040000)        /*!< Interrupt Mask on line 18 */
S#define  EXTI_IMR_MR19                       ((uint32_t)0x00080000)        /*!< Interrupt Mask on line 19 */
S
S/*******************  Bit definition for EXTI_EMR register  *******************/
S#define  EXTI_EMR_MR0                        ((uint32_t)0x00000001)        /*!< Event Mask on line 0 */
S#define  EXTI_EMR_MR1                        ((uint32_t)0x00000002)        /*!< Event Mask on line 1 */
S#define  EXTI_EMR_MR2                        ((uint32_t)0x00000004)        /*!< Event Mask on line 2 */
S#define  EXTI_EMR_MR3                        ((uint32_t)0x00000008)        /*!< Event Mask on line 3 */
S#define  EXTI_EMR_MR4                        ((uint32_t)0x00000010)        /*!< Event Mask on line 4 */
S#define  EXTI_EMR_MR5                        ((uint32_t)0x00000020)        /*!< Event Mask on line 5 */
S#define  EXTI_EMR_MR6                        ((uint32_t)0x00000040)        /*!< Event Mask on line 6 */
S#define  EXTI_EMR_MR7                        ((uint32_t)0x00000080)        /*!< Event Mask on line 7 */
S#define  EXTI_EMR_MR8                        ((uint32_t)0x00000100)        /*!< Event Mask on line 8 */
S#define  EXTI_EMR_MR9                        ((uint32_t)0x00000200)        /*!< Event Mask on line 9 */
S#define  EXTI_EMR_MR10                       ((uint32_t)0x00000400)        /*!< Event Mask on line 10 */
S#define  EXTI_EMR_MR11                       ((uint32_t)0x00000800)        /*!< Event Mask on line 11 */
S#define  EXTI_EMR_MR12                       ((uint32_t)0x00001000)        /*!< Event Mask on line 12 */
S#define  EXTI_EMR_MR13                       ((uint32_t)0x00002000)        /*!< Event Mask on line 13 */
S#define  EXTI_EMR_MR14                       ((uint32_t)0x00004000)        /*!< Event Mask on line 14 */
S#define  EXTI_EMR_MR15                       ((uint32_t)0x00008000)        /*!< Event Mask on line 15 */
S#define  EXTI_EMR_MR16                       ((uint32_t)0x00010000)        /*!< Event Mask on line 16 */
S#define  EXTI_EMR_MR17                       ((uint32_t)0x00020000)        /*!< Event Mask on line 17 */
S#define  EXTI_EMR_MR18                       ((uint32_t)0x00040000)        /*!< Event Mask on line 18 */
S#define  EXTI_EMR_MR19                       ((uint32_t)0x00080000)        /*!< Event Mask on line 19 */
S
S/******************  Bit definition for EXTI_RTSR register  *******************/
S#define  EXTI_RTSR_TR0                       ((uint32_t)0x00000001)        /*!< Rising trigger event configuration bit of line 0 */
S#define  EXTI_RTSR_TR1                       ((uint32_t)0x00000002)        /*!< Rising trigger event configuration bit of line 1 */
S#define  EXTI_RTSR_TR2                       ((uint32_t)0x00000004)        /*!< Rising trigger event configuration bit of line 2 */
S#define  EXTI_RTSR_TR3                       ((uint32_t)0x00000008)        /*!< Rising trigger event configuration bit of line 3 */
S#define  EXTI_RTSR_TR4                       ((uint32_t)0x00000010)        /*!< Rising trigger event configuration bit of line 4 */
S#define  EXTI_RTSR_TR5                       ((uint32_t)0x00000020)        /*!< Rising trigger event configuration bit of line 5 */
S#define  EXTI_RTSR_TR6                       ((uint32_t)0x00000040)        /*!< Rising trigger event configuration bit of line 6 */
S#define  EXTI_RTSR_TR7                       ((uint32_t)0x00000080)        /*!< Rising trigger event configuration bit of line 7 */
S#define  EXTI_RTSR_TR8                       ((uint32_t)0x00000100)        /*!< Rising trigger event configuration bit of line 8 */
S#define  EXTI_RTSR_TR9                       ((uint32_t)0x00000200)        /*!< Rising trigger event configuration bit of line 9 */
S#define  EXTI_RTSR_TR10                      ((uint32_t)0x00000400)        /*!< Rising trigger event configuration bit of line 10 */
S#define  EXTI_RTSR_TR11                      ((uint32_t)0x00000800)        /*!< Rising trigger event configuration bit of line 11 */
S#define  EXTI_RTSR_TR12                      ((uint32_t)0x00001000)        /*!< Rising trigger event configuration bit of line 12 */
S#define  EXTI_RTSR_TR13                      ((uint32_t)0x00002000)        /*!< Rising trigger event configuration bit of line 13 */
S#define  EXTI_RTSR_TR14                      ((uint32_t)0x00004000)        /*!< Rising trigger event configuration bit of line 14 */
S#define  EXTI_RTSR_TR15                      ((uint32_t)0x00008000)        /*!< Rising trigger event configuration bit of line 15 */
S#define  EXTI_RTSR_TR16                      ((uint32_t)0x00010000)        /*!< Rising trigger event configuration bit of line 16 */
S#define  EXTI_RTSR_TR17                      ((uint32_t)0x00020000)        /*!< Rising trigger event configuration bit of line 17 */
S#define  EXTI_RTSR_TR18                      ((uint32_t)0x00040000)        /*!< Rising trigger event configuration bit of line 18 */
S#define  EXTI_RTSR_TR19                      ((uint32_t)0x00080000)        /*!< Rising trigger event configuration bit of line 19 */
S
S/******************  Bit definition for EXTI_FTSR register  *******************/
S#define  EXTI_FTSR_TR0                       ((uint32_t)0x00000001)        /*!< Falling trigger event configuration bit of line 0 */
S#define  EXTI_FTSR_TR1                       ((uint32_t)0x00000002)        /*!< Falling trigger event configuration bit of line 1 */
S#define  EXTI_FTSR_TR2                       ((uint32_t)0x00000004)        /*!< Falling trigger event configuration bit of line 2 */
S#define  EXTI_FTSR_TR3                       ((uint32_t)0x00000008)        /*!< Falling trigger event configuration bit of line 3 */
S#define  EXTI_FTSR_TR4                       ((uint32_t)0x00000010)        /*!< Falling trigger event configuration bit of line 4 */
S#define  EXTI_FTSR_TR5                       ((uint32_t)0x00000020)        /*!< Falling trigger event configuration bit of line 5 */
S#define  EXTI_FTSR_TR6                       ((uint32_t)0x00000040)        /*!< Falling trigger event configuration bit of line 6 */
S#define  EXTI_FTSR_TR7                       ((uint32_t)0x00000080)        /*!< Falling trigger event configuration bit of line 7 */
S#define  EXTI_FTSR_TR8                       ((uint32_t)0x00000100)        /*!< Falling trigger event configuration bit of line 8 */
S#define  EXTI_FTSR_TR9                       ((uint32_t)0x00000200)        /*!< Falling trigger event configuration bit of line 9 */
S#define  EXTI_FTSR_TR10                      ((uint32_t)0x00000400)        /*!< Falling trigger event configuration bit of line 10 */
S#define  EXTI_FTSR_TR11                      ((uint32_t)0x00000800)        /*!< Falling trigger event configuration bit of line 11 */
S#define  EXTI_FTSR_TR12                      ((uint32_t)0x00001000)        /*!< Falling trigger event configuration bit of line 12 */
S#define  EXTI_FTSR_TR13                      ((uint32_t)0x00002000)        /*!< Falling trigger event configuration bit of line 13 */
S#define  EXTI_FTSR_TR14                      ((uint32_t)0x00004000)        /*!< Falling trigger event configuration bit of line 14 */
S#define  EXTI_FTSR_TR15                      ((uint32_t)0x00008000)        /*!< Falling trigger event configuration bit of line 15 */
S#define  EXTI_FTSR_TR16                      ((uint32_t)0x00010000)        /*!< Falling trigger event configuration bit of line 16 */
S#define  EXTI_FTSR_TR17                      ((uint32_t)0x00020000)        /*!< Falling trigger event configuration bit of line 17 */
S#define  EXTI_FTSR_TR18                      ((uint32_t)0x00040000)        /*!< Falling trigger event configuration bit of line 18 */
S#define  EXTI_FTSR_TR19                      ((uint32_t)0x00080000)        /*!< Falling trigger event configuration bit of line 19 */
S
S/******************  Bit definition for EXTI_SWIER register  ******************/
S#define  EXTI_SWIER_SWIER0                   ((uint32_t)0x00000001)        /*!< Software Interrupt on line 0 */
S#define  EXTI_SWIER_SWIER1                   ((uint32_t)0x00000002)        /*!< Software Interrupt on line 1 */
S#define  EXTI_SWIER_SWIER2                   ((uint32_t)0x00000004)        /*!< Software Interrupt on line 2 */
S#define  EXTI_SWIER_SWIER3                   ((uint32_t)0x00000008)        /*!< Software Interrupt on line 3 */
S#define  EXTI_SWIER_SWIER4                   ((uint32_t)0x00000010)        /*!< Software Interrupt on line 4 */
S#define  EXTI_SWIER_SWIER5                   ((uint32_t)0x00000020)        /*!< Software Interrupt on line 5 */
S#define  EXTI_SWIER_SWIER6                   ((uint32_t)0x00000040)        /*!< Software Interrupt on line 6 */
S#define  EXTI_SWIER_SWIER7                   ((uint32_t)0x00000080)        /*!< Software Interrupt on line 7 */
S#define  EXTI_SWIER_SWIER8                   ((uint32_t)0x00000100)        /*!< Software Interrupt on line 8 */
S#define  EXTI_SWIER_SWIER9                   ((uint32_t)0x00000200)        /*!< Software Interrupt on line 9 */
S#define  EXTI_SWIER_SWIER10                  ((uint32_t)0x00000400)        /*!< Software Interrupt on line 10 */
S#define  EXTI_SWIER_SWIER11                  ((uint32_t)0x00000800)        /*!< Software Interrupt on line 11 */
S#define  EXTI_SWIER_SWIER12                  ((uint32_t)0x00001000)        /*!< Software Interrupt on line 12 */
S#define  EXTI_SWIER_SWIER13                  ((uint32_t)0x00002000)        /*!< Software Interrupt on line 13 */
S#define  EXTI_SWIER_SWIER14                  ((uint32_t)0x00004000)        /*!< Software Interrupt on line 14 */
S#define  EXTI_SWIER_SWIER15                  ((uint32_t)0x00008000)        /*!< Software Interrupt on line 15 */
S#define  EXTI_SWIER_SWIER16                  ((uint32_t)0x00010000)        /*!< Software Interrupt on line 16 */
S#define  EXTI_SWIER_SWIER17                  ((uint32_t)0x00020000)        /*!< Software Interrupt on line 17 */
S#define  EXTI_SWIER_SWIER18                  ((uint32_t)0x00040000)        /*!< Software Interrupt on line 18 */
S#define  EXTI_SWIER_SWIER19                  ((uint32_t)0x00080000)        /*!< Software Interrupt on line 19 */
S
S/*******************  Bit definition for EXTI_PR register  ********************/
S#define  EXTI_PR_PR0                         ((uint32_t)0x00000001)        /*!< Pending bit for line 0 */
S#define  EXTI_PR_PR1                         ((uint32_t)0x00000002)        /*!< Pending bit for line 1 */
S#define  EXTI_PR_PR2                         ((uint32_t)0x00000004)        /*!< Pending bit for line 2 */
S#define  EXTI_PR_PR3                         ((uint32_t)0x00000008)        /*!< Pending bit for line 3 */
S#define  EXTI_PR_PR4                         ((uint32_t)0x00000010)        /*!< Pending bit for line 4 */
S#define  EXTI_PR_PR5                         ((uint32_t)0x00000020)        /*!< Pending bit for line 5 */
S#define  EXTI_PR_PR6                         ((uint32_t)0x00000040)        /*!< Pending bit for line 6 */
S#define  EXTI_PR_PR7                         ((uint32_t)0x00000080)        /*!< Pending bit for line 7 */
S#define  EXTI_PR_PR8                         ((uint32_t)0x00000100)        /*!< Pending bit for line 8 */
S#define  EXTI_PR_PR9                         ((uint32_t)0x00000200)        /*!< Pending bit for line 9 */
S#define  EXTI_PR_PR10                        ((uint32_t)0x00000400)        /*!< Pending bit for line 10 */
S#define  EXTI_PR_PR11                        ((uint32_t)0x00000800)        /*!< Pending bit for line 11 */
S#define  EXTI_PR_PR12                        ((uint32_t)0x00001000)        /*!< Pending bit for line 12 */
S#define  EXTI_PR_PR13                        ((uint32_t)0x00002000)        /*!< Pending bit for line 13 */
S#define  EXTI_PR_PR14                        ((uint32_t)0x00004000)        /*!< Pending bit for line 14 */
S#define  EXTI_PR_PR15                        ((uint32_t)0x00008000)        /*!< Pending bit for line 15 */
S#define  EXTI_PR_PR16                        ((uint32_t)0x00010000)        /*!< Pending bit for line 16 */
S#define  EXTI_PR_PR17                        ((uint32_t)0x00020000)        /*!< Pending bit for line 17 */
S#define  EXTI_PR_PR18                        ((uint32_t)0x00040000)        /*!< Pending bit for line 18 */
S#define  EXTI_PR_PR19                        ((uint32_t)0x00080000)        /*!< Pending bit for line 19 */
S
S/******************************************************************************/
S/*                                                                            */
S/*                                    FLASH                                   */
S/*                                                                            */
S/******************************************************************************/
S/*******************  Bits definition for FLASH_ACR register  *****************/
S#define FLASH_ACR_LATENCY                    ((uint32_t)0x0000000F)
S#define FLASH_ACR_LATENCY_0WS                ((uint32_t)0x00000000)
S#define FLASH_ACR_LATENCY_1WS                ((uint32_t)0x00000001)
S#define FLASH_ACR_LATENCY_2WS                ((uint32_t)0x00000002)
S#define FLASH_ACR_LATENCY_3WS                ((uint32_t)0x00000003)
S#define FLASH_ACR_LATENCY_4WS                ((uint32_t)0x00000004)
S#define FLASH_ACR_LATENCY_5WS                ((uint32_t)0x00000005)
S#define FLASH_ACR_LATENCY_6WS                ((uint32_t)0x00000006)
S#define FLASH_ACR_LATENCY_7WS                ((uint32_t)0x00000007)
S#define FLASH_ACR_LATENCY_8WS                ((uint32_t)0x00000008)
S#define FLASH_ACR_LATENCY_9WS                ((uint32_t)0x00000009)
S#define FLASH_ACR_LATENCY_10WS               ((uint32_t)0x0000000A)
S#define FLASH_ACR_LATENCY_11WS               ((uint32_t)0x0000000B)
S#define FLASH_ACR_LATENCY_12WS               ((uint32_t)0x0000000C)
S#define FLASH_ACR_LATENCY_13WS               ((uint32_t)0x0000000D)
S#define FLASH_ACR_LATENCY_14WS               ((uint32_t)0x0000000E)
S#define FLASH_ACR_LATENCY_15WS               ((uint32_t)0x0000000F)
S
S#define FLASH_ACR_PRFTEN                     ((uint32_t)0x00000100)
S#define FLASH_ACR_ICEN                       ((uint32_t)0x00000200)
S#define FLASH_ACR_DCEN                       ((uint32_t)0x00000400)
S#define FLASH_ACR_ICRST                      ((uint32_t)0x00000800)
S#define FLASH_ACR_DCRST                      ((uint32_t)0x00001000)
S#define FLASH_ACR_BYTE0_ADDRESS              ((uint32_t)0x40023C00)
S#define FLASH_ACR_BYTE2_ADDRESS              ((uint32_t)0x40023C03)
S
S/*******************  Bits definition for FLASH_SR register  ******************/
S#define FLASH_SR_EOP                         ((uint32_t)0x00000001)
S#define FLASH_SR_SOP                         ((uint32_t)0x00000002)
S#define FLASH_SR_WRPERR                      ((uint32_t)0x00000010)
S#define FLASH_SR_PGAERR                      ((uint32_t)0x00000020)
S#define FLASH_SR_PGPERR                      ((uint32_t)0x00000040)
S#define FLASH_SR_PGSERR                      ((uint32_t)0x00000080)
S#define FLASH_SR_BSY                         ((uint32_t)0x00010000)
S
S/*******************  Bits definition for FLASH_CR register  ******************/
S#define FLASH_CR_PG                          ((uint32_t)0x00000001)
S#define FLASH_CR_SER                         ((uint32_t)0x00000002)
S#define FLASH_CR_MER                         ((uint32_t)0x00000004)
S#define FLASH_CR_MER1                        FLASH_CR_MER
S#define FLASH_CR_SNB                         ((uint32_t)0x000000F8)
S#define FLASH_CR_SNB_0                       ((uint32_t)0x00000008)
S#define FLASH_CR_SNB_1                       ((uint32_t)0x00000010)
S#define FLASH_CR_SNB_2                       ((uint32_t)0x00000020)
S#define FLASH_CR_SNB_3                       ((uint32_t)0x00000040)
S#define FLASH_CR_SNB_4                       ((uint32_t)0x00000040)
S#define FLASH_CR_PSIZE                       ((uint32_t)0x00000300)
S#define FLASH_CR_PSIZE_0                     ((uint32_t)0x00000100)
S#define FLASH_CR_PSIZE_1                     ((uint32_t)0x00000200)
S#define FLASH_CR_MER2                        ((uint32_t)0x00008000)
S#define FLASH_CR_STRT                        ((uint32_t)0x00010000)
S#define FLASH_CR_EOPIE                       ((uint32_t)0x01000000)
S#define FLASH_CR_LOCK                        ((uint32_t)0x80000000)
S
S/*******************  Bits definition for FLASH_OPTCR register  ***************/
S#define FLASH_OPTCR_OPTLOCK                 ((uint32_t)0x00000001)
S#define FLASH_OPTCR_OPTSTRT                 ((uint32_t)0x00000002)
S#define FLASH_OPTCR_BOR_LEV_0               ((uint32_t)0x00000004)
S#define FLASH_OPTCR_BOR_LEV_1               ((uint32_t)0x00000008)
S#define FLASH_OPTCR_BOR_LEV                 ((uint32_t)0x0000000C)
S#define FLASH_OPTCR_BFB2                    ((uint32_t)0x00000010)
S
S#define FLASH_OPTCR_WDG_SW                  ((uint32_t)0x00000020)
S#define FLASH_OPTCR_nRST_STOP               ((uint32_t)0x00000040)
S#define FLASH_OPTCR_nRST_STDBY              ((uint32_t)0x00000080)
S#define FLASH_OPTCR_RDP                     ((uint32_t)0x0000FF00)
S#define FLASH_OPTCR_RDP_0                   ((uint32_t)0x00000100)
S#define FLASH_OPTCR_RDP_1                   ((uint32_t)0x00000200)
S#define FLASH_OPTCR_RDP_2                   ((uint32_t)0x00000400)
S#define FLASH_OPTCR_RDP_3                   ((uint32_t)0x00000800)
S#define FLASH_OPTCR_RDP_4                   ((uint32_t)0x00001000)
S#define FLASH_OPTCR_RDP_5                   ((uint32_t)0x00002000)
S#define FLASH_OPTCR_RDP_6                   ((uint32_t)0x00004000)
S#define FLASH_OPTCR_RDP_7                   ((uint32_t)0x00008000)
S#define FLASH_OPTCR_nWRP                    ((uint32_t)0x0FFF0000)
S#define FLASH_OPTCR_nWRP_0                  ((uint32_t)0x00010000)
S#define FLASH_OPTCR_nWRP_1                  ((uint32_t)0x00020000)
S#define FLASH_OPTCR_nWRP_2                  ((uint32_t)0x00040000)
S#define FLASH_OPTCR_nWRP_3                  ((uint32_t)0x00080000)
S#define FLASH_OPTCR_nWRP_4                  ((uint32_t)0x00100000)
S#define FLASH_OPTCR_nWRP_5                  ((uint32_t)0x00200000)
S#define FLASH_OPTCR_nWRP_6                  ((uint32_t)0x00400000)
S#define FLASH_OPTCR_nWRP_7                  ((uint32_t)0x00800000)
S#define FLASH_OPTCR_nWRP_8                  ((uint32_t)0x01000000)
S#define FLASH_OPTCR_nWRP_9                  ((uint32_t)0x02000000)
S#define FLASH_OPTCR_nWRP_10                 ((uint32_t)0x04000000)
S#define FLASH_OPTCR_nWRP_11                 ((uint32_t)0x08000000)
S
S#define FLASH_OPTCR_DB1M                    ((uint32_t)0x40000000) 
S#define FLASH_OPTCR_SPRMOD                  ((uint32_t)0x80000000) 
S                                             
S/******************  Bits definition for FLASH_OPTCR1 register  ***************/
S#define FLASH_OPTCR1_nWRP                    ((uint32_t)0x0FFF0000)
S#define FLASH_OPTCR1_nWRP_0                  ((uint32_t)0x00010000)
S#define FLASH_OPTCR1_nWRP_1                  ((uint32_t)0x00020000)
S#define FLASH_OPTCR1_nWRP_2                  ((uint32_t)0x00040000)
S#define FLASH_OPTCR1_nWRP_3                  ((uint32_t)0x00080000)
S#define FLASH_OPTCR1_nWRP_4                  ((uint32_t)0x00100000)
S#define FLASH_OPTCR1_nWRP_5                  ((uint32_t)0x00200000)
S#define FLASH_OPTCR1_nWRP_6                  ((uint32_t)0x00400000)
S#define FLASH_OPTCR1_nWRP_7                  ((uint32_t)0x00800000)
S#define FLASH_OPTCR1_nWRP_8                  ((uint32_t)0x01000000)
S#define FLASH_OPTCR1_nWRP_9                  ((uint32_t)0x02000000)
S#define FLASH_OPTCR1_nWRP_10                 ((uint32_t)0x04000000)
S#define FLASH_OPTCR1_nWRP_11                 ((uint32_t)0x08000000)
S
S#if defined (STM32F40_41xxx)
S/******************************************************************************/
S/*                                                                            */
S/*                       Flexible Static Memory Controller                    */
S/*                                                                            */
S/******************************************************************************/
S/******************  Bit definition for FSMC_BCR1 register  *******************/
S#define  FSMC_BCR1_MBKEN                     ((uint32_t)0x00000001)        /*!<Memory bank enable bit                 */
S#define  FSMC_BCR1_MUXEN                     ((uint32_t)0x00000002)        /*!<Address/data multiplexing enable bit   */
S
S#define  FSMC_BCR1_MTYP                      ((uint32_t)0x0000000C)        /*!<MTYP[1:0] bits (Memory type)           */
S#define  FSMC_BCR1_MTYP_0                    ((uint32_t)0x00000004)        /*!<Bit 0 */
S#define  FSMC_BCR1_MTYP_1                    ((uint32_t)0x00000008)        /*!<Bit 1 */
S
S#define  FSMC_BCR1_MWID                      ((uint32_t)0x00000030)        /*!<MWID[1:0] bits (Memory data bus width) */
S#define  FSMC_BCR1_MWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FSMC_BCR1_MWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FSMC_BCR1_FACCEN                    ((uint32_t)0x00000040)        /*!<Flash access enable                    */
S#define  FSMC_BCR1_BURSTEN                   ((uint32_t)0x00000100)        /*!<Burst enable bit                       */
S#define  FSMC_BCR1_WAITPOL                   ((uint32_t)0x00000200)        /*!<Wait signal polarity bit               */
S#define  FSMC_BCR1_WRAPMOD                   ((uint32_t)0x00000400)        /*!<Wrapped burst mode support             */
S#define  FSMC_BCR1_WAITCFG                   ((uint32_t)0x00000800)        /*!<Wait timing configuration              */
S#define  FSMC_BCR1_WREN                      ((uint32_t)0x00001000)        /*!<Write enable bit                       */
S#define  FSMC_BCR1_WAITEN                    ((uint32_t)0x00002000)        /*!<Wait enable bit                        */
S#define  FSMC_BCR1_EXTMOD                    ((uint32_t)0x00004000)        /*!<Extended mode enable                   */
S#define  FSMC_BCR1_ASYNCWAIT                 ((uint32_t)0x00008000)        /*!<Asynchronous wait                      */
S#define  FSMC_BCR1_CBURSTRW                  ((uint32_t)0x00080000)        /*!<Write burst enable                     */
S
S/******************  Bit definition for FSMC_BCR2 register  *******************/
S#define  FSMC_BCR2_MBKEN                     ((uint32_t)0x00000001)        /*!<Memory bank enable bit                */
S#define  FSMC_BCR2_MUXEN                     ((uint32_t)0x00000002)        /*!<Address/data multiplexing enable bit   */
S
S#define  FSMC_BCR2_MTYP                      ((uint32_t)0x0000000C)        /*!<MTYP[1:0] bits (Memory type)           */
S#define  FSMC_BCR2_MTYP_0                    ((uint32_t)0x00000004)        /*!<Bit 0 */
S#define  FSMC_BCR2_MTYP_1                    ((uint32_t)0x00000008)        /*!<Bit 1 */
S
S#define  FSMC_BCR2_MWID                      ((uint32_t)0x00000030)        /*!<MWID[1:0] bits (Memory data bus width) */
S#define  FSMC_BCR2_MWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FSMC_BCR2_MWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FSMC_BCR2_FACCEN                    ((uint32_t)0x00000040)        /*!<Flash access enable                    */
S#define  FSMC_BCR2_BURSTEN                   ((uint32_t)0x00000100)        /*!<Burst enable bit                       */
S#define  FSMC_BCR2_WAITPOL                   ((uint32_t)0x00000200)        /*!<Wait signal polarity bit               */
S#define  FSMC_BCR2_WRAPMOD                   ((uint32_t)0x00000400)        /*!<Wrapped burst mode support             */
S#define  FSMC_BCR2_WAITCFG                   ((uint32_t)0x00000800)        /*!<Wait timing configuration              */
S#define  FSMC_BCR2_WREN                      ((uint32_t)0x00001000)        /*!<Write enable bit                       */
S#define  FSMC_BCR2_WAITEN                    ((uint32_t)0x00002000)        /*!<Wait enable bit                        */
S#define  FSMC_BCR2_EXTMOD                    ((uint32_t)0x00004000)        /*!<Extended mode enable                   */
S#define  FSMC_BCR2_ASYNCWAIT                 ((uint32_t)0x00008000)        /*!<Asynchronous wait                      */
S#define  FSMC_BCR2_CBURSTRW                  ((uint32_t)0x00080000)        /*!<Write burst enable                     */
S
S/******************  Bit definition for FSMC_BCR3 register  *******************/
S#define  FSMC_BCR3_MBKEN                     ((uint32_t)0x00000001)        /*!<Memory bank enable bit                 */
S#define  FSMC_BCR3_MUXEN                     ((uint32_t)0x00000002)        /*!<Address/data multiplexing enable bit   */
S
S#define  FSMC_BCR3_MTYP                      ((uint32_t)0x0000000C)        /*!<MTYP[1:0] bits (Memory type)           */
S#define  FSMC_BCR3_MTYP_0                    ((uint32_t)0x00000004)        /*!<Bit 0 */
S#define  FSMC_BCR3_MTYP_1                    ((uint32_t)0x00000008)        /*!<Bit 1 */
S
S#define  FSMC_BCR3_MWID                      ((uint32_t)0x00000030)        /*!<MWID[1:0] bits (Memory data bus width) */
S#define  FSMC_BCR3_MWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FSMC_BCR3_MWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FSMC_BCR3_FACCEN                    ((uint32_t)0x00000040)        /*!<Flash access enable                    */
S#define  FSMC_BCR3_BURSTEN                   ((uint32_t)0x00000100)        /*!<Burst enable bit                       */
S#define  FSMC_BCR3_WAITPOL                   ((uint32_t)0x00000200)        /*!<Wait signal polarity bit               */
S#define  FSMC_BCR3_WRAPMOD                   ((uint32_t)0x00000400)        /*!<Wrapped burst mode support             */
S#define  FSMC_BCR3_WAITCFG                   ((uint32_t)0x00000800)        /*!<Wait timing configuration              */
S#define  FSMC_BCR3_WREN                      ((uint32_t)0x00001000)        /*!<Write enable bit                       */
S#define  FSMC_BCR3_WAITEN                    ((uint32_t)0x00002000)        /*!<Wait enable bit                        */
S#define  FSMC_BCR3_EXTMOD                    ((uint32_t)0x00004000)        /*!<Extended mode enable                   */
S#define  FSMC_BCR3_ASYNCWAIT                 ((uint32_t)0x00008000)        /*!<Asynchronous wait                      */
S#define  FSMC_BCR3_CBURSTRW                  ((uint32_t)0x00080000)        /*!<Write burst enable                     */
S
S/******************  Bit definition for FSMC_BCR4 register  *******************/
S#define  FSMC_BCR4_MBKEN                     ((uint32_t)0x00000001)        /*!<Memory bank enable bit */
S#define  FSMC_BCR4_MUXEN                     ((uint32_t)0x00000002)        /*!<Address/data multiplexing enable bit   */
S
S#define  FSMC_BCR4_MTYP                      ((uint32_t)0x0000000C)        /*!<MTYP[1:0] bits (Memory type)           */
S#define  FSMC_BCR4_MTYP_0                    ((uint32_t)0x00000004)        /*!<Bit 0 */
S#define  FSMC_BCR4_MTYP_1                    ((uint32_t)0x00000008)        /*!<Bit 1 */
S
S#define  FSMC_BCR4_MWID                      ((uint32_t)0x00000030)        /*!<MWID[1:0] bits (Memory data bus width) */
S#define  FSMC_BCR4_MWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FSMC_BCR4_MWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FSMC_BCR4_FACCEN                    ((uint32_t)0x00000040)        /*!<Flash access enable                    */
S#define  FSMC_BCR4_BURSTEN                   ((uint32_t)0x00000100)        /*!<Burst enable bit                       */
S#define  FSMC_BCR4_WAITPOL                   ((uint32_t)0x00000200)        /*!<Wait signal polarity bit               */
S#define  FSMC_BCR4_WRAPMOD                   ((uint32_t)0x00000400)        /*!<Wrapped burst mode support             */
S#define  FSMC_BCR4_WAITCFG                   ((uint32_t)0x00000800)        /*!<Wait timing configuration              */
S#define  FSMC_BCR4_WREN                      ((uint32_t)0x00001000)        /*!<Write enable bit                       */
S#define  FSMC_BCR4_WAITEN                    ((uint32_t)0x00002000)        /*!<Wait enable bit                        */
S#define  FSMC_BCR4_EXTMOD                    ((uint32_t)0x00004000)        /*!<Extended mode enable                   */
S#define  FSMC_BCR4_ASYNCWAIT                 ((uint32_t)0x00008000)        /*!<Asynchronous wait                      */
S#define  FSMC_BCR4_CBURSTRW                  ((uint32_t)0x00080000)        /*!<Write burst enable                     */
S
S/******************  Bit definition for FSMC_BTR1 register  ******************/
S#define  FSMC_BTR1_ADDSET                    ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FSMC_BTR1_ADDSET_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FSMC_BTR1_ADDSET_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FSMC_BTR1_ADDSET_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FSMC_BTR1_ADDSET_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FSMC_BTR1_ADDHLD                    ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FSMC_BTR1_ADDHLD_0                  ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FSMC_BTR1_ADDHLD_1                  ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FSMC_BTR1_ADDHLD_2                  ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FSMC_BTR1_ADDHLD_3                  ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FSMC_BTR1_DATAST                    ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FSMC_BTR1_DATAST_0                  ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FSMC_BTR1_DATAST_1                  ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FSMC_BTR1_DATAST_2                  ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FSMC_BTR1_DATAST_3                  ((uint32_t)0x00000800)        /*!<Bit 3 */
S
S#define  FSMC_BTR1_BUSTURN                   ((uint32_t)0x000F0000)        /*!<BUSTURN[3:0] bits (Bus turnaround phase duration) */
S#define  FSMC_BTR1_BUSTURN_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FSMC_BTR1_BUSTURN_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FSMC_BTR1_BUSTURN_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FSMC_BTR1_BUSTURN_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
S
S#define  FSMC_BTR1_CLKDIV                    ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FSMC_BTR1_CLKDIV_0                  ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FSMC_BTR1_CLKDIV_1                  ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FSMC_BTR1_CLKDIV_2                  ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FSMC_BTR1_CLKDIV_3                  ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FSMC_BTR1_DATLAT                    ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FSMC_BTR1_DATLAT_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FSMC_BTR1_DATLAT_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FSMC_BTR1_DATLAT_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FSMC_BTR1_DATLAT_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FSMC_BTR1_ACCMOD                    ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FSMC_BTR1_ACCMOD_0                  ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FSMC_BTR1_ACCMOD_1                  ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FSMC_BTR2 register  *******************/
S#define  FSMC_BTR2_ADDSET                    ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FSMC_BTR2_ADDSET_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FSMC_BTR2_ADDSET_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FSMC_BTR2_ADDSET_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FSMC_BTR2_ADDSET_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FSMC_BTR2_ADDHLD                    ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FSMC_BTR2_ADDHLD_0                  ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FSMC_BTR2_ADDHLD_1                  ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FSMC_BTR2_ADDHLD_2                  ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FSMC_BTR2_ADDHLD_3                  ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FSMC_BTR2_DATAST                    ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FSMC_BTR2_DATAST_0                  ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FSMC_BTR2_DATAST_1                  ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FSMC_BTR2_DATAST_2                  ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FSMC_BTR2_DATAST_3                  ((uint32_t)0x00000800)        /*!<Bit 3 */
S
S#define  FSMC_BTR2_BUSTURN                   ((uint32_t)0x000F0000)        /*!<BUSTURN[3:0] bits (Bus turnaround phase duration) */
S#define  FSMC_BTR2_BUSTURN_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FSMC_BTR2_BUSTURN_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FSMC_BTR2_BUSTURN_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FSMC_BTR2_BUSTURN_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
S
S#define  FSMC_BTR2_CLKDIV                    ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FSMC_BTR2_CLKDIV_0                  ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FSMC_BTR2_CLKDIV_1                  ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FSMC_BTR2_CLKDIV_2                  ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FSMC_BTR2_CLKDIV_3                  ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FSMC_BTR2_DATLAT                    ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FSMC_BTR2_DATLAT_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FSMC_BTR2_DATLAT_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FSMC_BTR2_DATLAT_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FSMC_BTR2_DATLAT_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FSMC_BTR2_ACCMOD                    ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FSMC_BTR2_ACCMOD_0                  ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FSMC_BTR2_ACCMOD_1                  ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/*******************  Bit definition for FSMC_BTR3 register  *******************/
S#define  FSMC_BTR3_ADDSET                    ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FSMC_BTR3_ADDSET_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FSMC_BTR3_ADDSET_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FSMC_BTR3_ADDSET_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FSMC_BTR3_ADDSET_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FSMC_BTR3_ADDHLD                    ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FSMC_BTR3_ADDHLD_0                  ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FSMC_BTR3_ADDHLD_1                  ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FSMC_BTR3_ADDHLD_2                  ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FSMC_BTR3_ADDHLD_3                  ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FSMC_BTR3_DATAST                    ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FSMC_BTR3_DATAST_0                  ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FSMC_BTR3_DATAST_1                  ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FSMC_BTR3_DATAST_2                  ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FSMC_BTR3_DATAST_3                  ((uint32_t)0x00000800)        /*!<Bit 3 */
S
S#define  FSMC_BTR3_BUSTURN                   ((uint32_t)0x000F0000)        /*!<BUSTURN[3:0] bits (Bus turnaround phase duration) */
S#define  FSMC_BTR3_BUSTURN_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FSMC_BTR3_BUSTURN_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FSMC_BTR3_BUSTURN_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FSMC_BTR3_BUSTURN_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
S
S#define  FSMC_BTR3_CLKDIV                    ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FSMC_BTR3_CLKDIV_0                  ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FSMC_BTR3_CLKDIV_1                  ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FSMC_BTR3_CLKDIV_2                  ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FSMC_BTR3_CLKDIV_3                  ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FSMC_BTR3_DATLAT                    ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FSMC_BTR3_DATLAT_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FSMC_BTR3_DATLAT_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FSMC_BTR3_DATLAT_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FSMC_BTR3_DATLAT_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FSMC_BTR3_ACCMOD                    ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FSMC_BTR3_ACCMOD_0                  ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FSMC_BTR3_ACCMOD_1                  ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FSMC_BTR4 register  *******************/
S#define  FSMC_BTR4_ADDSET                    ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FSMC_BTR4_ADDSET_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FSMC_BTR4_ADDSET_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FSMC_BTR4_ADDSET_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FSMC_BTR4_ADDSET_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FSMC_BTR4_ADDHLD                    ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FSMC_BTR4_ADDHLD_0                  ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FSMC_BTR4_ADDHLD_1                  ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FSMC_BTR4_ADDHLD_2                  ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FSMC_BTR4_ADDHLD_3                  ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FSMC_BTR4_DATAST                    ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FSMC_BTR4_DATAST_0                  ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FSMC_BTR4_DATAST_1                  ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FSMC_BTR4_DATAST_2                  ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FSMC_BTR4_DATAST_3                  ((uint32_t)0x00000800)        /*!<Bit 3 */
S
S#define  FSMC_BTR4_BUSTURN                   ((uint32_t)0x000F0000)        /*!<BUSTURN[3:0] bits (Bus turnaround phase duration) */
S#define  FSMC_BTR4_BUSTURN_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FSMC_BTR4_BUSTURN_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FSMC_BTR4_BUSTURN_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FSMC_BTR4_BUSTURN_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
S
S#define  FSMC_BTR4_CLKDIV                    ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FSMC_BTR4_CLKDIV_0                  ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FSMC_BTR4_CLKDIV_1                  ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FSMC_BTR4_CLKDIV_2                  ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FSMC_BTR4_CLKDIV_3                  ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FSMC_BTR4_DATLAT                    ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FSMC_BTR4_DATLAT_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FSMC_BTR4_DATLAT_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FSMC_BTR4_DATLAT_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FSMC_BTR4_DATLAT_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FSMC_BTR4_ACCMOD                    ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FSMC_BTR4_ACCMOD_0                  ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FSMC_BTR4_ACCMOD_1                  ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FSMC_BWTR1 register  ******************/
S#define  FSMC_BWTR1_ADDSET                   ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FSMC_BWTR1_ADDSET_0                 ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FSMC_BWTR1_ADDSET_1                 ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FSMC_BWTR1_ADDSET_2                 ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FSMC_BWTR1_ADDSET_3                 ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FSMC_BWTR1_ADDHLD                   ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FSMC_BWTR1_ADDHLD_0                 ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FSMC_BWTR1_ADDHLD_1                 ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FSMC_BWTR1_ADDHLD_2                 ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FSMC_BWTR1_ADDHLD_3                 ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FSMC_BWTR1_DATAST                   ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FSMC_BWTR1_DATAST_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FSMC_BWTR1_DATAST_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FSMC_BWTR1_DATAST_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FSMC_BWTR1_DATAST_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
S
S#define  FSMC_BWTR1_CLKDIV                   ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FSMC_BWTR1_CLKDIV_0                 ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FSMC_BWTR1_CLKDIV_1                 ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FSMC_BWTR1_CLKDIV_2                 ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FSMC_BWTR1_CLKDIV_3                 ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FSMC_BWTR1_DATLAT                   ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FSMC_BWTR1_DATLAT_0                 ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FSMC_BWTR1_DATLAT_1                 ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FSMC_BWTR1_DATLAT_2                 ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FSMC_BWTR1_DATLAT_3                 ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FSMC_BWTR1_ACCMOD                   ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FSMC_BWTR1_ACCMOD_0                 ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FSMC_BWTR1_ACCMOD_1                 ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FSMC_BWTR2 register  ******************/
S#define  FSMC_BWTR2_ADDSET                   ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FSMC_BWTR2_ADDSET_0                 ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FSMC_BWTR2_ADDSET_1                 ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FSMC_BWTR2_ADDSET_2                 ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FSMC_BWTR2_ADDSET_3                 ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FSMC_BWTR2_ADDHLD                   ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FSMC_BWTR2_ADDHLD_0                 ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FSMC_BWTR2_ADDHLD_1                 ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FSMC_BWTR2_ADDHLD_2                 ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FSMC_BWTR2_ADDHLD_3                 ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FSMC_BWTR2_DATAST                   ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FSMC_BWTR2_DATAST_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FSMC_BWTR2_DATAST_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FSMC_BWTR2_DATAST_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FSMC_BWTR2_DATAST_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
S
S#define  FSMC_BWTR2_CLKDIV                   ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FSMC_BWTR2_CLKDIV_0                 ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FSMC_BWTR2_CLKDIV_1                 ((uint32_t)0x00200000)        /*!<Bit 1*/
S#define  FSMC_BWTR2_CLKDIV_2                 ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FSMC_BWTR2_CLKDIV_3                 ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FSMC_BWTR2_DATLAT                   ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FSMC_BWTR2_DATLAT_0                 ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FSMC_BWTR2_DATLAT_1                 ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FSMC_BWTR2_DATLAT_2                 ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FSMC_BWTR2_DATLAT_3                 ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FSMC_BWTR2_ACCMOD                   ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FSMC_BWTR2_ACCMOD_0                 ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FSMC_BWTR2_ACCMOD_1                 ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FSMC_BWTR3 register  ******************/
S#define  FSMC_BWTR3_ADDSET                   ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FSMC_BWTR3_ADDSET_0                 ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FSMC_BWTR3_ADDSET_1                 ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FSMC_BWTR3_ADDSET_2                 ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FSMC_BWTR3_ADDSET_3                 ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FSMC_BWTR3_ADDHLD                   ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FSMC_BWTR3_ADDHLD_0                 ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FSMC_BWTR3_ADDHLD_1                 ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FSMC_BWTR3_ADDHLD_2                 ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FSMC_BWTR3_ADDHLD_3                 ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FSMC_BWTR3_DATAST                   ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FSMC_BWTR3_DATAST_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FSMC_BWTR3_DATAST_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FSMC_BWTR3_DATAST_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FSMC_BWTR3_DATAST_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
S
S#define  FSMC_BWTR3_CLKDIV                   ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FSMC_BWTR3_CLKDIV_0                 ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FSMC_BWTR3_CLKDIV_1                 ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FSMC_BWTR3_CLKDIV_2                 ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FSMC_BWTR3_CLKDIV_3                 ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FSMC_BWTR3_DATLAT                   ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FSMC_BWTR3_DATLAT_0                 ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FSMC_BWTR3_DATLAT_1                 ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FSMC_BWTR3_DATLAT_2                 ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FSMC_BWTR3_DATLAT_3                 ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FSMC_BWTR3_ACCMOD                   ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FSMC_BWTR3_ACCMOD_0                 ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FSMC_BWTR3_ACCMOD_1                 ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FSMC_BWTR4 register  ******************/
S#define  FSMC_BWTR4_ADDSET                   ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FSMC_BWTR4_ADDSET_0                 ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FSMC_BWTR4_ADDSET_1                 ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FSMC_BWTR4_ADDSET_2                 ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FSMC_BWTR4_ADDSET_3                 ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FSMC_BWTR4_ADDHLD                   ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FSMC_BWTR4_ADDHLD_0                 ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FSMC_BWTR4_ADDHLD_1                 ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FSMC_BWTR4_ADDHLD_2                 ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FSMC_BWTR4_ADDHLD_3                 ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FSMC_BWTR4_DATAST                   ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FSMC_BWTR4_DATAST_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FSMC_BWTR4_DATAST_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FSMC_BWTR4_DATAST_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FSMC_BWTR4_DATAST_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
S
S#define  FSMC_BWTR4_CLKDIV                   ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FSMC_BWTR4_CLKDIV_0                 ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FSMC_BWTR4_CLKDIV_1                 ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FSMC_BWTR4_CLKDIV_2                 ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FSMC_BWTR4_CLKDIV_3                 ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FSMC_BWTR4_DATLAT                   ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FSMC_BWTR4_DATLAT_0                 ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FSMC_BWTR4_DATLAT_1                 ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FSMC_BWTR4_DATLAT_2                 ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FSMC_BWTR4_DATLAT_3                 ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FSMC_BWTR4_ACCMOD                   ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FSMC_BWTR4_ACCMOD_0                 ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FSMC_BWTR4_ACCMOD_1                 ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FSMC_PCR2 register  *******************/
S#define  FSMC_PCR2_PWAITEN                   ((uint32_t)0x00000002)        /*!<Wait feature enable bit */
S#define  FSMC_PCR2_PBKEN                     ((uint32_t)0x00000004)        /*!<PC Card/NAND Flash memory bank enable bit */
S#define  FSMC_PCR2_PTYP                      ((uint32_t)0x00000008)        /*!<Memory type */
S
S#define  FSMC_PCR2_PWID                      ((uint32_t)0x00000030)        /*!<PWID[1:0] bits (NAND Flash databus width) */
S#define  FSMC_PCR2_PWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FSMC_PCR2_PWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FSMC_PCR2_ECCEN                     ((uint32_t)0x00000040)        /*!<ECC computation logic enable bit */
S
S#define  FSMC_PCR2_TCLR                      ((uint32_t)0x00001E00)        /*!<TCLR[3:0] bits (CLE to RE delay) */
S#define  FSMC_PCR2_TCLR_0                    ((uint32_t)0x00000200)        /*!<Bit 0 */
S#define  FSMC_PCR2_TCLR_1                    ((uint32_t)0x00000400)        /*!<Bit 1 */
S#define  FSMC_PCR2_TCLR_2                    ((uint32_t)0x00000800)        /*!<Bit 2 */
S#define  FSMC_PCR2_TCLR_3                    ((uint32_t)0x00001000)        /*!<Bit 3 */
S
S#define  FSMC_PCR2_TAR                       ((uint32_t)0x0001E000)        /*!<TAR[3:0] bits (ALE to RE delay) */
S#define  FSMC_PCR2_TAR_0                     ((uint32_t)0x00002000)        /*!<Bit 0 */
S#define  FSMC_PCR2_TAR_1                     ((uint32_t)0x00004000)        /*!<Bit 1 */
S#define  FSMC_PCR2_TAR_2                     ((uint32_t)0x00008000)        /*!<Bit 2 */
S#define  FSMC_PCR2_TAR_3                     ((uint32_t)0x00010000)        /*!<Bit 3 */
S
S#define  FSMC_PCR2_ECCPS                     ((uint32_t)0x000E0000)        /*!<ECCPS[1:0] bits (ECC page size) */
S#define  FSMC_PCR2_ECCPS_0                   ((uint32_t)0x00020000)        /*!<Bit 0 */
S#define  FSMC_PCR2_ECCPS_1                   ((uint32_t)0x00040000)        /*!<Bit 1 */
S#define  FSMC_PCR2_ECCPS_2                   ((uint32_t)0x00080000)        /*!<Bit 2 */
S
S/******************  Bit definition for FSMC_PCR3 register  *******************/
S#define  FSMC_PCR3_PWAITEN                   ((uint32_t)0x00000002)        /*!<Wait feature enable bit */
S#define  FSMC_PCR3_PBKEN                     ((uint32_t)0x00000004)        /*!<PC Card/NAND Flash memory bank enable bit */
S#define  FSMC_PCR3_PTYP                      ((uint32_t)0x00000008)        /*!<Memory type */
S
S#define  FSMC_PCR3_PWID                      ((uint32_t)0x00000030)        /*!<PWID[1:0] bits (NAND Flash databus width) */
S#define  FSMC_PCR3_PWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FSMC_PCR3_PWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FSMC_PCR3_ECCEN                     ((uint32_t)0x00000040)        /*!<ECC computation logic enable bit */
S
S#define  FSMC_PCR3_TCLR                      ((uint32_t)0x00001E00)        /*!<TCLR[3:0] bits (CLE to RE delay) */
S#define  FSMC_PCR3_TCLR_0                    ((uint32_t)0x00000200)        /*!<Bit 0 */
S#define  FSMC_PCR3_TCLR_1                    ((uint32_t)0x00000400)        /*!<Bit 1 */
S#define  FSMC_PCR3_TCLR_2                    ((uint32_t)0x00000800)        /*!<Bit 2 */
S#define  FSMC_PCR3_TCLR_3                    ((uint32_t)0x00001000)        /*!<Bit 3 */
S
S#define  FSMC_PCR3_TAR                       ((uint32_t)0x0001E000)        /*!<TAR[3:0] bits (ALE to RE delay) */
S#define  FSMC_PCR3_TAR_0                     ((uint32_t)0x00002000)        /*!<Bit 0 */
S#define  FSMC_PCR3_TAR_1                     ((uint32_t)0x00004000)        /*!<Bit 1 */
S#define  FSMC_PCR3_TAR_2                     ((uint32_t)0x00008000)        /*!<Bit 2 */
S#define  FSMC_PCR3_TAR_3                     ((uint32_t)0x00010000)        /*!<Bit 3 */
S
S#define  FSMC_PCR3_ECCPS                     ((uint32_t)0x000E0000)        /*!<ECCPS[2:0] bits (ECC page size) */
S#define  FSMC_PCR3_ECCPS_0                   ((uint32_t)0x00020000)        /*!<Bit 0 */
S#define  FSMC_PCR3_ECCPS_1                   ((uint32_t)0x00040000)        /*!<Bit 1 */
S#define  FSMC_PCR3_ECCPS_2                   ((uint32_t)0x00080000)        /*!<Bit 2 */
S
S/******************  Bit definition for FSMC_PCR4 register  *******************/
S#define  FSMC_PCR4_PWAITEN                   ((uint32_t)0x00000002)        /*!<Wait feature enable bit */
S#define  FSMC_PCR4_PBKEN                     ((uint32_t)0x00000004)        /*!<PC Card/NAND Flash memory bank enable bit */
S#define  FSMC_PCR4_PTYP                      ((uint32_t)0x00000008)        /*!<Memory type */
S
S#define  FSMC_PCR4_PWID                      ((uint32_t)0x00000030)        /*!<PWID[1:0] bits (NAND Flash databus width) */
S#define  FSMC_PCR4_PWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FSMC_PCR4_PWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FSMC_PCR4_ECCEN                     ((uint32_t)0x00000040)        /*!<ECC computation logic enable bit */
S
S#define  FSMC_PCR4_TCLR                      ((uint32_t)0x00001E00)        /*!<TCLR[3:0] bits (CLE to RE delay) */
S#define  FSMC_PCR4_TCLR_0                    ((uint32_t)0x00000200)        /*!<Bit 0 */
S#define  FSMC_PCR4_TCLR_1                    ((uint32_t)0x00000400)        /*!<Bit 1 */
S#define  FSMC_PCR4_TCLR_2                    ((uint32_t)0x00000800)        /*!<Bit 2 */
S#define  FSMC_PCR4_TCLR_3                    ((uint32_t)0x00001000)        /*!<Bit 3 */
S
S#define  FSMC_PCR4_TAR                       ((uint32_t)0x0001E000)        /*!<TAR[3:0] bits (ALE to RE delay) */
S#define  FSMC_PCR4_TAR_0                     ((uint32_t)0x00002000)        /*!<Bit 0 */
S#define  FSMC_PCR4_TAR_1                     ((uint32_t)0x00004000)        /*!<Bit 1 */
S#define  FSMC_PCR4_TAR_2                     ((uint32_t)0x00008000)        /*!<Bit 2 */
S#define  FSMC_PCR4_TAR_3                     ((uint32_t)0x00010000)        /*!<Bit 3 */
S
S#define  FSMC_PCR4_ECCPS                     ((uint32_t)0x000E0000)        /*!<ECCPS[2:0] bits (ECC page size) */
S#define  FSMC_PCR4_ECCPS_0                   ((uint32_t)0x00020000)        /*!<Bit 0 */
S#define  FSMC_PCR4_ECCPS_1                   ((uint32_t)0x00040000)        /*!<Bit 1 */
S#define  FSMC_PCR4_ECCPS_2                   ((uint32_t)0x00080000)        /*!<Bit 2 */
S
S/*******************  Bit definition for FSMC_SR2 register  *******************/
S#define  FSMC_SR2_IRS                        ((uint8_t)0x01)               /*!<Interrupt Rising Edge status                */
S#define  FSMC_SR2_ILS                        ((uint8_t)0x02)               /*!<Interrupt Level status                      */
S#define  FSMC_SR2_IFS                        ((uint8_t)0x04)               /*!<Interrupt Falling Edge status               */
S#define  FSMC_SR2_IREN                       ((uint8_t)0x08)               /*!<Interrupt Rising Edge detection Enable bit  */
S#define  FSMC_SR2_ILEN                       ((uint8_t)0x10)               /*!<Interrupt Level detection Enable bit        */
S#define  FSMC_SR2_IFEN                       ((uint8_t)0x20)               /*!<Interrupt Falling Edge detection Enable bit */
S#define  FSMC_SR2_FEMPT                      ((uint8_t)0x40)               /*!<FIFO empty */
S
S/*******************  Bit definition for FSMC_SR3 register  *******************/
S#define  FSMC_SR3_IRS                        ((uint8_t)0x01)               /*!<Interrupt Rising Edge status                */
S#define  FSMC_SR3_ILS                        ((uint8_t)0x02)               /*!<Interrupt Level status                      */
S#define  FSMC_SR3_IFS                        ((uint8_t)0x04)               /*!<Interrupt Falling Edge status               */
S#define  FSMC_SR3_IREN                       ((uint8_t)0x08)               /*!<Interrupt Rising Edge detection Enable bit  */
S#define  FSMC_SR3_ILEN                       ((uint8_t)0x10)               /*!<Interrupt Level detection Enable bit        */
S#define  FSMC_SR3_IFEN                       ((uint8_t)0x20)               /*!<Interrupt Falling Edge detection Enable bit */
S#define  FSMC_SR3_FEMPT                      ((uint8_t)0x40)               /*!<FIFO empty */
S
S/*******************  Bit definition for FSMC_SR4 register  *******************/
S#define  FSMC_SR4_IRS                        ((uint8_t)0x01)               /*!<Interrupt Rising Edge status                 */
S#define  FSMC_SR4_ILS                        ((uint8_t)0x02)               /*!<Interrupt Level status                       */
S#define  FSMC_SR4_IFS                        ((uint8_t)0x04)               /*!<Interrupt Falling Edge status                */
S#define  FSMC_SR4_IREN                       ((uint8_t)0x08)               /*!<Interrupt Rising Edge detection Enable bit   */
S#define  FSMC_SR4_ILEN                       ((uint8_t)0x10)               /*!<Interrupt Level detection Enable bit         */
S#define  FSMC_SR4_IFEN                       ((uint8_t)0x20)               /*!<Interrupt Falling Edge detection Enable bit  */
S#define  FSMC_SR4_FEMPT                      ((uint8_t)0x40)               /*!<FIFO empty */
S
S/******************  Bit definition for FSMC_PMEM2 register  ******************/
S#define  FSMC_PMEM2_MEMSET2                  ((uint32_t)0x000000FF)        /*!<MEMSET2[7:0] bits (Common memory 2 setup time) */
S#define  FSMC_PMEM2_MEMSET2_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FSMC_PMEM2_MEMSET2_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FSMC_PMEM2_MEMSET2_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FSMC_PMEM2_MEMSET2_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FSMC_PMEM2_MEMSET2_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FSMC_PMEM2_MEMSET2_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FSMC_PMEM2_MEMSET2_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FSMC_PMEM2_MEMSET2_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FSMC_PMEM2_MEMWAIT2                 ((uint32_t)0x0000FF00)        /*!<MEMWAIT2[7:0] bits (Common memory 2 wait time) */
S#define  FSMC_PMEM2_MEMWAIT2_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FSMC_PMEM2_MEMWAIT2_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FSMC_PMEM2_MEMWAIT2_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FSMC_PMEM2_MEMWAIT2_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FSMC_PMEM2_MEMWAIT2_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FSMC_PMEM2_MEMWAIT2_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FSMC_PMEM2_MEMWAIT2_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FSMC_PMEM2_MEMWAIT2_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FSMC_PMEM2_MEMHOLD2                 ((uint32_t)0x00FF0000)        /*!<MEMHOLD2[7:0] bits (Common memory 2 hold time) */
S#define  FSMC_PMEM2_MEMHOLD2_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FSMC_PMEM2_MEMHOLD2_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FSMC_PMEM2_MEMHOLD2_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FSMC_PMEM2_MEMHOLD2_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FSMC_PMEM2_MEMHOLD2_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FSMC_PMEM2_MEMHOLD2_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FSMC_PMEM2_MEMHOLD2_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FSMC_PMEM2_MEMHOLD2_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FSMC_PMEM2_MEMHIZ2                  ((uint32_t)0xFF000000)        /*!<MEMHIZ2[7:0] bits (Common memory 2 databus HiZ time) */
S#define  FSMC_PMEM2_MEMHIZ2_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FSMC_PMEM2_MEMHIZ2_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FSMC_PMEM2_MEMHIZ2_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FSMC_PMEM2_MEMHIZ2_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FSMC_PMEM2_MEMHIZ2_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FSMC_PMEM2_MEMHIZ2_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FSMC_PMEM2_MEMHIZ2_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FSMC_PMEM2_MEMHIZ2_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FSMC_PMEM3 register  ******************/
S#define  FSMC_PMEM3_MEMSET3                  ((uint32_t)0x000000FF)        /*!<MEMSET3[7:0] bits (Common memory 3 setup time) */
S#define  FSMC_PMEM3_MEMSET3_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FSMC_PMEM3_MEMSET3_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FSMC_PMEM3_MEMSET3_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FSMC_PMEM3_MEMSET3_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FSMC_PMEM3_MEMSET3_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FSMC_PMEM3_MEMSET3_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FSMC_PMEM3_MEMSET3_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FSMC_PMEM3_MEMSET3_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FSMC_PMEM3_MEMWAIT3                 ((uint32_t)0x0000FF00)        /*!<MEMWAIT3[7:0] bits (Common memory 3 wait time) */
S#define  FSMC_PMEM3_MEMWAIT3_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FSMC_PMEM3_MEMWAIT3_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FSMC_PMEM3_MEMWAIT3_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FSMC_PMEM3_MEMWAIT3_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FSMC_PMEM3_MEMWAIT3_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FSMC_PMEM3_MEMWAIT3_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FSMC_PMEM3_MEMWAIT3_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FSMC_PMEM3_MEMWAIT3_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FSMC_PMEM3_MEMHOLD3                 ((uint32_t)0x00FF0000)        /*!<MEMHOLD3[7:0] bits (Common memory 3 hold time) */
S#define  FSMC_PMEM3_MEMHOLD3_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FSMC_PMEM3_MEMHOLD3_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FSMC_PMEM3_MEMHOLD3_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FSMC_PMEM3_MEMHOLD3_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FSMC_PMEM3_MEMHOLD3_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FSMC_PMEM3_MEMHOLD3_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FSMC_PMEM3_MEMHOLD3_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FSMC_PMEM3_MEMHOLD3_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FSMC_PMEM3_MEMHIZ3                  ((uint32_t)0xFF000000)        /*!<MEMHIZ3[7:0] bits (Common memory 3 databus HiZ time) */
S#define  FSMC_PMEM3_MEMHIZ3_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FSMC_PMEM3_MEMHIZ3_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FSMC_PMEM3_MEMHIZ3_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FSMC_PMEM3_MEMHIZ3_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FSMC_PMEM3_MEMHIZ3_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FSMC_PMEM3_MEMHIZ3_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FSMC_PMEM3_MEMHIZ3_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FSMC_PMEM3_MEMHIZ3_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FSMC_PMEM4 register  ******************/
S#define  FSMC_PMEM4_MEMSET4                  ((uint32_t)0x000000FF)        /*!<MEMSET4[7:0] bits (Common memory 4 setup time) */
S#define  FSMC_PMEM4_MEMSET4_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FSMC_PMEM4_MEMSET4_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FSMC_PMEM4_MEMSET4_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FSMC_PMEM4_MEMSET4_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FSMC_PMEM4_MEMSET4_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FSMC_PMEM4_MEMSET4_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FSMC_PMEM4_MEMSET4_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FSMC_PMEM4_MEMSET4_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FSMC_PMEM4_MEMWAIT4                 ((uint32_t)0x0000FF00)        /*!<MEMWAIT4[7:0] bits (Common memory 4 wait time) */
S#define  FSMC_PMEM4_MEMWAIT4_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FSMC_PMEM4_MEMWAIT4_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FSMC_PMEM4_MEMWAIT4_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FSMC_PMEM4_MEMWAIT4_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FSMC_PMEM4_MEMWAIT4_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FSMC_PMEM4_MEMWAIT4_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FSMC_PMEM4_MEMWAIT4_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FSMC_PMEM4_MEMWAIT4_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FSMC_PMEM4_MEMHOLD4                 ((uint32_t)0x00FF0000)        /*!<MEMHOLD4[7:0] bits (Common memory 4 hold time) */
S#define  FSMC_PMEM4_MEMHOLD4_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FSMC_PMEM4_MEMHOLD4_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FSMC_PMEM4_MEMHOLD4_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FSMC_PMEM4_MEMHOLD4_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FSMC_PMEM4_MEMHOLD4_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FSMC_PMEM4_MEMHOLD4_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FSMC_PMEM4_MEMHOLD4_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FSMC_PMEM4_MEMHOLD4_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FSMC_PMEM4_MEMHIZ4                  ((uint32_t)0xFF000000)        /*!<MEMHIZ4[7:0] bits (Common memory 4 databus HiZ time) */
S#define  FSMC_PMEM4_MEMHIZ4_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FSMC_PMEM4_MEMHIZ4_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FSMC_PMEM4_MEMHIZ4_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FSMC_PMEM4_MEMHIZ4_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FSMC_PMEM4_MEMHIZ4_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FSMC_PMEM4_MEMHIZ4_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FSMC_PMEM4_MEMHIZ4_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FSMC_PMEM4_MEMHIZ4_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FSMC_PATT2 register  ******************/
S#define  FSMC_PATT2_ATTSET2                  ((uint32_t)0x000000FF)        /*!<ATTSET2[7:0] bits (Attribute memory 2 setup time) */
S#define  FSMC_PATT2_ATTSET2_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FSMC_PATT2_ATTSET2_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FSMC_PATT2_ATTSET2_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FSMC_PATT2_ATTSET2_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FSMC_PATT2_ATTSET2_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FSMC_PATT2_ATTSET2_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FSMC_PATT2_ATTSET2_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FSMC_PATT2_ATTSET2_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FSMC_PATT2_ATTWAIT2                 ((uint32_t)0x0000FF00)        /*!<ATTWAIT2[7:0] bits (Attribute memory 2 wait time) */
S#define  FSMC_PATT2_ATTWAIT2_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FSMC_PATT2_ATTWAIT2_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FSMC_PATT2_ATTWAIT2_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FSMC_PATT2_ATTWAIT2_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FSMC_PATT2_ATTWAIT2_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FSMC_PATT2_ATTWAIT2_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FSMC_PATT2_ATTWAIT2_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FSMC_PATT2_ATTWAIT2_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FSMC_PATT2_ATTHOLD2                 ((uint32_t)0x00FF0000)        /*!<ATTHOLD2[7:0] bits (Attribute memory 2 hold time) */
S#define  FSMC_PATT2_ATTHOLD2_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FSMC_PATT2_ATTHOLD2_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FSMC_PATT2_ATTHOLD2_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FSMC_PATT2_ATTHOLD2_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FSMC_PATT2_ATTHOLD2_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FSMC_PATT2_ATTHOLD2_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FSMC_PATT2_ATTHOLD2_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FSMC_PATT2_ATTHOLD2_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FSMC_PATT2_ATTHIZ2                  ((uint32_t)0xFF000000)        /*!<ATTHIZ2[7:0] bits (Attribute memory 2 databus HiZ time) */
S#define  FSMC_PATT2_ATTHIZ2_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FSMC_PATT2_ATTHIZ2_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FSMC_PATT2_ATTHIZ2_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FSMC_PATT2_ATTHIZ2_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FSMC_PATT2_ATTHIZ2_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FSMC_PATT2_ATTHIZ2_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FSMC_PATT2_ATTHIZ2_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FSMC_PATT2_ATTHIZ2_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FSMC_PATT3 register  ******************/
S#define  FSMC_PATT3_ATTSET3                  ((uint32_t)0x000000FF)        /*!<ATTSET3[7:0] bits (Attribute memory 3 setup time) */
S#define  FSMC_PATT3_ATTSET3_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FSMC_PATT3_ATTSET3_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FSMC_PATT3_ATTSET3_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FSMC_PATT3_ATTSET3_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FSMC_PATT3_ATTSET3_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FSMC_PATT3_ATTSET3_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FSMC_PATT3_ATTSET3_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FSMC_PATT3_ATTSET3_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FSMC_PATT3_ATTWAIT3                 ((uint32_t)0x0000FF00)        /*!<ATTWAIT3[7:0] bits (Attribute memory 3 wait time) */
S#define  FSMC_PATT3_ATTWAIT3_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FSMC_PATT3_ATTWAIT3_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FSMC_PATT3_ATTWAIT3_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FSMC_PATT3_ATTWAIT3_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FSMC_PATT3_ATTWAIT3_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FSMC_PATT3_ATTWAIT3_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FSMC_PATT3_ATTWAIT3_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FSMC_PATT3_ATTWAIT3_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FSMC_PATT3_ATTHOLD3                 ((uint32_t)0x00FF0000)        /*!<ATTHOLD3[7:0] bits (Attribute memory 3 hold time) */
S#define  FSMC_PATT3_ATTHOLD3_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FSMC_PATT3_ATTHOLD3_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FSMC_PATT3_ATTHOLD3_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FSMC_PATT3_ATTHOLD3_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FSMC_PATT3_ATTHOLD3_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FSMC_PATT3_ATTHOLD3_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FSMC_PATT3_ATTHOLD3_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FSMC_PATT3_ATTHOLD3_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FSMC_PATT3_ATTHIZ3                  ((uint32_t)0xFF000000)        /*!<ATTHIZ3[7:0] bits (Attribute memory 3 databus HiZ time) */
S#define  FSMC_PATT3_ATTHIZ3_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FSMC_PATT3_ATTHIZ3_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FSMC_PATT3_ATTHIZ3_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FSMC_PATT3_ATTHIZ3_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FSMC_PATT3_ATTHIZ3_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FSMC_PATT3_ATTHIZ3_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FSMC_PATT3_ATTHIZ3_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FSMC_PATT3_ATTHIZ3_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FSMC_PATT4 register  ******************/
S#define  FSMC_PATT4_ATTSET4                  ((uint32_t)0x000000FF)        /*!<ATTSET4[7:0] bits (Attribute memory 4 setup time) */
S#define  FSMC_PATT4_ATTSET4_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FSMC_PATT4_ATTSET4_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FSMC_PATT4_ATTSET4_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FSMC_PATT4_ATTSET4_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FSMC_PATT4_ATTSET4_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FSMC_PATT4_ATTSET4_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FSMC_PATT4_ATTSET4_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FSMC_PATT4_ATTSET4_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FSMC_PATT4_ATTWAIT4                 ((uint32_t)0x0000FF00)        /*!<ATTWAIT4[7:0] bits (Attribute memory 4 wait time) */
S#define  FSMC_PATT4_ATTWAIT4_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FSMC_PATT4_ATTWAIT4_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FSMC_PATT4_ATTWAIT4_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FSMC_PATT4_ATTWAIT4_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FSMC_PATT4_ATTWAIT4_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FSMC_PATT4_ATTWAIT4_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FSMC_PATT4_ATTWAIT4_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FSMC_PATT4_ATTWAIT4_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FSMC_PATT4_ATTHOLD4                 ((uint32_t)0x00FF0000)        /*!<ATTHOLD4[7:0] bits (Attribute memory 4 hold time) */
S#define  FSMC_PATT4_ATTHOLD4_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FSMC_PATT4_ATTHOLD4_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FSMC_PATT4_ATTHOLD4_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FSMC_PATT4_ATTHOLD4_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FSMC_PATT4_ATTHOLD4_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FSMC_PATT4_ATTHOLD4_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FSMC_PATT4_ATTHOLD4_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FSMC_PATT4_ATTHOLD4_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FSMC_PATT4_ATTHIZ4                  ((uint32_t)0xFF000000)        /*!<ATTHIZ4[7:0] bits (Attribute memory 4 databus HiZ time) */
S#define  FSMC_PATT4_ATTHIZ4_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FSMC_PATT4_ATTHIZ4_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FSMC_PATT4_ATTHIZ4_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FSMC_PATT4_ATTHIZ4_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FSMC_PATT4_ATTHIZ4_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FSMC_PATT4_ATTHIZ4_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FSMC_PATT4_ATTHIZ4_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FSMC_PATT4_ATTHIZ4_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FSMC_PIO4 register  *******************/
S#define  FSMC_PIO4_IOSET4                    ((uint32_t)0x000000FF)        /*!<IOSET4[7:0] bits (I/O 4 setup time) */
S#define  FSMC_PIO4_IOSET4_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FSMC_PIO4_IOSET4_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FSMC_PIO4_IOSET4_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FSMC_PIO4_IOSET4_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FSMC_PIO4_IOSET4_4                  ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FSMC_PIO4_IOSET4_5                  ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FSMC_PIO4_IOSET4_6                  ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FSMC_PIO4_IOSET4_7                  ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FSMC_PIO4_IOWAIT4                   ((uint32_t)0x0000FF00)        /*!<IOWAIT4[7:0] bits (I/O 4 wait time) */
S#define  FSMC_PIO4_IOWAIT4_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FSMC_PIO4_IOWAIT4_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FSMC_PIO4_IOWAIT4_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FSMC_PIO4_IOWAIT4_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FSMC_PIO4_IOWAIT4_4                 ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FSMC_PIO4_IOWAIT4_5                 ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FSMC_PIO4_IOWAIT4_6                 ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FSMC_PIO4_IOWAIT4_7                 ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FSMC_PIO4_IOHOLD4                   ((uint32_t)0x00FF0000)        /*!<IOHOLD4[7:0] bits (I/O 4 hold time) */
S#define  FSMC_PIO4_IOHOLD4_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FSMC_PIO4_IOHOLD4_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FSMC_PIO4_IOHOLD4_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FSMC_PIO4_IOHOLD4_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FSMC_PIO4_IOHOLD4_4                 ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FSMC_PIO4_IOHOLD4_5                 ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FSMC_PIO4_IOHOLD4_6                 ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FSMC_PIO4_IOHOLD4_7                 ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FSMC_PIO4_IOHIZ4                    ((uint32_t)0xFF000000)        /*!<IOHIZ4[7:0] bits (I/O 4 databus HiZ time) */
S#define  FSMC_PIO4_IOHIZ4_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FSMC_PIO4_IOHIZ4_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FSMC_PIO4_IOHIZ4_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FSMC_PIO4_IOHIZ4_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FSMC_PIO4_IOHIZ4_4                  ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FSMC_PIO4_IOHIZ4_5                  ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FSMC_PIO4_IOHIZ4_6                  ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FSMC_PIO4_IOHIZ4_7                  ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FSMC_ECCR2 register  ******************/
S#define  FSMC_ECCR2_ECC2                     ((uint32_t)0xFFFFFFFF)        /*!<ECC result */
S
S/******************  Bit definition for FSMC_ECCR3 register  ******************/
S#define  FSMC_ECCR3_ECC3                     ((uint32_t)0xFFFFFFFF)        /*!<ECC result */
S#endif /* STM32F40_41xxx */
S
S#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
S/******************************************************************************/
S/*                                                                            */
S/*                          Flexible Memory Controller                        */
S/*                                                                            */
S/******************************************************************************/
S/******************  Bit definition for FMC_BCR1 register  *******************/
S#define  FMC_BCR1_MBKEN                     ((uint32_t)0x00000001)        /*!<Memory bank enable bit                 */
S#define  FMC_BCR1_MUXEN                     ((uint32_t)0x00000002)        /*!<Address/data multiplexing enable bit   */
S
S#define  FMC_BCR1_MTYP                      ((uint32_t)0x0000000C)        /*!<MTYP[1:0] bits (Memory type)           */
S#define  FMC_BCR1_MTYP_0                    ((uint32_t)0x00000004)        /*!<Bit 0 */
S#define  FMC_BCR1_MTYP_1                    ((uint32_t)0x00000008)        /*!<Bit 1 */
S
S#define  FMC_BCR1_MWID                      ((uint32_t)0x00000030)        /*!<MWID[1:0] bits (Memory data bus width) */
S#define  FMC_BCR1_MWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BCR1_MWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FMC_BCR1_FACCEN                    ((uint32_t)0x00000040)        /*!<Flash access enable        */
S#define  FMC_BCR1_BURSTEN                   ((uint32_t)0x00000100)        /*!<Burst enable bit           */
S#define  FMC_BCR1_WAITPOL                   ((uint32_t)0x00000200)        /*!<Wait signal polarity bit   */
S#define  FMC_BCR1_WRAPMOD                   ((uint32_t)0x00000400)        /*!<Wrapped burst mode support */
S#define  FMC_BCR1_WAITCFG                   ((uint32_t)0x00000800)        /*!<Wait timing configuration  */
S#define  FMC_BCR1_WREN                      ((uint32_t)0x00001000)        /*!<Write enable bit           */
S#define  FMC_BCR1_WAITEN                    ((uint32_t)0x00002000)        /*!<Wait enable bit            */
S#define  FMC_BCR1_EXTMOD                    ((uint32_t)0x00004000)        /*!<Extended mode enable       */
S#define  FMC_BCR1_ASYNCWAIT                 ((uint32_t)0x00008000)        /*!<Asynchronous wait          */
S#define  FMC_BCR1_CBURSTRW                  ((uint32_t)0x00080000)        /*!<Write burst enable         */
S#define  FMC_BCR1_CCLKEN                    ((uint32_t)0x00100000)        /*!<Continous clock enable     */
S
S/******************  Bit definition for FMC_BCR2 register  *******************/
S#define  FMC_BCR2_MBKEN                     ((uint32_t)0x00000001)        /*!<Memory bank enable bit                 */
S#define  FMC_BCR2_MUXEN                     ((uint32_t)0x00000002)        /*!<Address/data multiplexing enable bit   */
S
S#define  FMC_BCR2_MTYP                      ((uint32_t)0x0000000C)        /*!<MTYP[1:0] bits (Memory type)           */
S#define  FMC_BCR2_MTYP_0                    ((uint32_t)0x00000004)        /*!<Bit 0 */
S#define  FMC_BCR2_MTYP_1                    ((uint32_t)0x00000008)        /*!<Bit 1 */
S
S#define  FMC_BCR2_MWID                      ((uint32_t)0x00000030)        /*!<MWID[1:0] bits (Memory data bus width) */
S#define  FMC_BCR2_MWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BCR2_MWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FMC_BCR2_FACCEN                    ((uint32_t)0x00000040)        /*!<Flash access enable        */
S#define  FMC_BCR2_BURSTEN                   ((uint32_t)0x00000100)        /*!<Burst enable bit           */
S#define  FMC_BCR2_WAITPOL                   ((uint32_t)0x00000200)        /*!<Wait signal polarity bit   */
S#define  FMC_BCR2_WRAPMOD                   ((uint32_t)0x00000400)        /*!<Wrapped burst mode support */
S#define  FMC_BCR2_WAITCFG                   ((uint32_t)0x00000800)        /*!<Wait timing configuration  */
S#define  FMC_BCR2_WREN                      ((uint32_t)0x00001000)        /*!<Write enable bit           */
S#define  FMC_BCR2_WAITEN                    ((uint32_t)0x00002000)        /*!<Wait enable bit            */
S#define  FMC_BCR2_EXTMOD                    ((uint32_t)0x00004000)        /*!<Extended mode enable       */
S#define  FMC_BCR2_ASYNCWAIT                 ((uint32_t)0x00008000)        /*!<Asynchronous wait          */
S#define  FMC_BCR2_CBURSTRW                  ((uint32_t)0x00080000)        /*!<Write burst enable         */
S
S/******************  Bit definition for FMC_BCR3 register  *******************/
S#define  FMC_BCR3_MBKEN                     ((uint32_t)0x00000001)        /*!<Memory bank enable bit                 */
S#define  FMC_BCR3_MUXEN                     ((uint32_t)0x00000002)        /*!<Address/data multiplexing enable bit   */
S
S#define  FMC_BCR3_MTYP                      ((uint32_t)0x0000000C)        /*!<MTYP[1:0] bits (Memory type)           */
S#define  FMC_BCR3_MTYP_0                    ((uint32_t)0x00000004)        /*!<Bit 0 */
S#define  FMC_BCR3_MTYP_1                    ((uint32_t)0x00000008)        /*!<Bit 1 */
S
S#define  FMC_BCR3_MWID                      ((uint32_t)0x00000030)        /*!<MWID[1:0] bits (Memory data bus width) */
S#define  FMC_BCR3_MWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BCR3_MWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FMC_BCR3_FACCEN                    ((uint32_t)0x00000040)        /*!<Flash access enable        */
S#define  FMC_BCR3_BURSTEN                   ((uint32_t)0x00000100)        /*!<Burst enable bit           */
S#define  FMC_BCR3_WAITPOL                   ((uint32_t)0x00000200)        /*!<Wait signal polarity bit   */
S#define  FMC_BCR3_WRAPMOD                   ((uint32_t)0x00000400)        /*!<Wrapped burst mode support */
S#define  FMC_BCR3_WAITCFG                   ((uint32_t)0x00000800)        /*!<Wait timing configuration  */
S#define  FMC_BCR3_WREN                      ((uint32_t)0x00001000)        /*!<Write enable bit           */
S#define  FMC_BCR3_WAITEN                    ((uint32_t)0x00002000)        /*!<Wait enable bit            */
S#define  FMC_BCR3_EXTMOD                    ((uint32_t)0x00004000)        /*!<Extended mode enable       */
S#define  FMC_BCR3_ASYNCWAIT                 ((uint32_t)0x00008000)        /*!<Asynchronous wait          */
S#define  FMC_BCR3_CBURSTRW                  ((uint32_t)0x00080000)        /*!<Write burst enable         */
S
S/******************  Bit definition for FMC_BCR4 register  *******************/
S#define  FMC_BCR4_MBKEN                     ((uint32_t)0x00000001)        /*!<Memory bank enable bit                 */
S#define  FMC_BCR4_MUXEN                     ((uint32_t)0x00000002)        /*!<Address/data multiplexing enable bit   */
S
S#define  FMC_BCR4_MTYP                      ((uint32_t)0x0000000C)        /*!<MTYP[1:0] bits (Memory type)           */
S#define  FMC_BCR4_MTYP_0                    ((uint32_t)0x00000004)        /*!<Bit 0 */
S#define  FMC_BCR4_MTYP_1                    ((uint32_t)0x00000008)        /*!<Bit 1 */
S
S#define  FMC_BCR4_MWID                      ((uint32_t)0x00000030)        /*!<MWID[1:0] bits (Memory data bus width) */
S#define  FMC_BCR4_MWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BCR4_MWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FMC_BCR4_FACCEN                    ((uint32_t)0x00000040)        /*!<Flash access enable        */
S#define  FMC_BCR4_BURSTEN                   ((uint32_t)0x00000100)        /*!<Burst enable bit           */
S#define  FMC_BCR4_WAITPOL                   ((uint32_t)0x00000200)        /*!<Wait signal polarity bit   */
S#define  FMC_BCR4_WRAPMOD                   ((uint32_t)0x00000400)        /*!<Wrapped burst mode support */
S#define  FMC_BCR4_WAITCFG                   ((uint32_t)0x00000800)        /*!<Wait timing configuration  */
S#define  FMC_BCR4_WREN                      ((uint32_t)0x00001000)        /*!<Write enable bit           */
S#define  FMC_BCR4_WAITEN                    ((uint32_t)0x00002000)        /*!<Wait enable bit            */
S#define  FMC_BCR4_EXTMOD                    ((uint32_t)0x00004000)        /*!<Extended mode enable       */
S#define  FMC_BCR4_ASYNCWAIT                 ((uint32_t)0x00008000)        /*!<Asynchronous wait          */
S#define  FMC_BCR4_CBURSTRW                  ((uint32_t)0x00080000)        /*!<Write burst enable         */
S
S/******************  Bit definition for FMC_BTR1 register  ******************/
S#define  FMC_BTR1_ADDSET                    ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FMC_BTR1_ADDSET_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_BTR1_ADDSET_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_BTR1_ADDSET_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_BTR1_ADDSET_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FMC_BTR1_ADDHLD                    ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration)  */
S#define  FMC_BTR1_ADDHLD_0                  ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BTR1_ADDHLD_1                  ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_BTR1_ADDHLD_2                  ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_BTR1_ADDHLD_3                  ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_BTR1_DATAST                    ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FMC_BTR1_DATAST_0                  ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_BTR1_DATAST_1                  ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_BTR1_DATAST_2                  ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_BTR1_DATAST_3                  ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_BTR1_DATAST_4                  ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_BTR1_DATAST_5                  ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_BTR1_DATAST_6                  ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_BTR1_DATAST_7                  ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_BTR1_BUSTURN                   ((uint32_t)0x000F0000)        /*!<BUSTURN[3:0] bits (Bus turnaround phase duration) */
S#define  FMC_BTR1_BUSTURN_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_BTR1_BUSTURN_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_BTR1_BUSTURN_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_BTR1_BUSTURN_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
S
S#define  FMC_BTR1_CLKDIV                    ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FMC_BTR1_CLKDIV_0                  ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_BTR1_CLKDIV_1                  ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FMC_BTR1_CLKDIV_2                  ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FMC_BTR1_CLKDIV_3                  ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FMC_BTR1_DATLAT                    ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FMC_BTR1_DATLAT_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_BTR1_DATLAT_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_BTR1_DATLAT_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_BTR1_DATLAT_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FMC_BTR1_ACCMOD                    ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FMC_BTR1_ACCMOD_0                  ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FMC_BTR1_ACCMOD_1                  ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FMC_BTR2 register  *******************/
S#define  FMC_BTR2_ADDSET                    ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FMC_BTR2_ADDSET_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_BTR2_ADDSET_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_BTR2_ADDSET_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_BTR2_ADDSET_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FMC_BTR2_ADDHLD                    ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FMC_BTR2_ADDHLD_0                  ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BTR2_ADDHLD_1                  ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_BTR2_ADDHLD_2                  ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_BTR2_ADDHLD_3                  ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_BTR2_DATAST                    ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FMC_BTR2_DATAST_0                  ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_BTR2_DATAST_1                  ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_BTR2_DATAST_2                  ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_BTR2_DATAST_3                  ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_BTR2_DATAST_4                  ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_BTR2_DATAST_5                  ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_BTR2_DATAST_6                  ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_BTR2_DATAST_7                  ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_BTR2_BUSTURN                   ((uint32_t)0x000F0000)        /*!<BUSTURN[3:0] bits (Bus turnaround phase duration) */
S#define  FMC_BTR2_BUSTURN_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_BTR2_BUSTURN_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_BTR2_BUSTURN_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_BTR2_BUSTURN_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
S
S#define  FMC_BTR2_CLKDIV                    ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FMC_BTR2_CLKDIV_0                  ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_BTR2_CLKDIV_1                  ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FMC_BTR2_CLKDIV_2                  ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FMC_BTR2_CLKDIV_3                  ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FMC_BTR2_DATLAT                    ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FMC_BTR2_DATLAT_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_BTR2_DATLAT_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_BTR2_DATLAT_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_BTR2_DATLAT_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FMC_BTR2_ACCMOD                    ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FMC_BTR2_ACCMOD_0                  ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FMC_BTR2_ACCMOD_1                  ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/*******************  Bit definition for FMC_BTR3 register  *******************/
S#define  FMC_BTR3_ADDSET                    ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FMC_BTR3_ADDSET_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_BTR3_ADDSET_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_BTR3_ADDSET_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_BTR3_ADDSET_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FMC_BTR3_ADDHLD                    ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FMC_BTR3_ADDHLD_0                  ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BTR3_ADDHLD_1                  ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_BTR3_ADDHLD_2                  ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_BTR3_ADDHLD_3                  ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_BTR3_DATAST                    ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FMC_BTR3_DATAST_0                  ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_BTR3_DATAST_1                  ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_BTR3_DATAST_2                  ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_BTR3_DATAST_3                  ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_BTR3_DATAST_4                  ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_BTR3_DATAST_5                  ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_BTR3_DATAST_6                  ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_BTR3_DATAST_7                  ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_BTR3_BUSTURN                   ((uint32_t)0x000F0000)        /*!<BUSTURN[3:0] bits (Bus turnaround phase duration) */
S#define  FMC_BTR3_BUSTURN_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_BTR3_BUSTURN_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_BTR3_BUSTURN_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_BTR3_BUSTURN_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
S
S#define  FMC_BTR3_CLKDIV                    ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FMC_BTR3_CLKDIV_0                  ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_BTR3_CLKDIV_1                  ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FMC_BTR3_CLKDIV_2                  ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FMC_BTR3_CLKDIV_3                  ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FMC_BTR3_DATLAT                    ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FMC_BTR3_DATLAT_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_BTR3_DATLAT_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_BTR3_DATLAT_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_BTR3_DATLAT_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FMC_BTR3_ACCMOD                    ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FMC_BTR3_ACCMOD_0                  ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FMC_BTR3_ACCMOD_1                  ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FMC_BTR4 register  *******************/
S#define  FMC_BTR4_ADDSET                    ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FMC_BTR4_ADDSET_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_BTR4_ADDSET_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_BTR4_ADDSET_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_BTR4_ADDSET_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FMC_BTR4_ADDHLD                    ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FMC_BTR4_ADDHLD_0                  ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BTR4_ADDHLD_1                  ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_BTR4_ADDHLD_2                  ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_BTR4_ADDHLD_3                  ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_BTR4_DATAST                    ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FMC_BTR4_DATAST_0                  ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_BTR4_DATAST_1                  ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_BTR4_DATAST_2                  ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_BTR4_DATAST_3                  ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_BTR4_DATAST_4                  ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_BTR4_DATAST_5                  ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_BTR4_DATAST_6                  ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_BTR4_DATAST_7                  ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_BTR4_BUSTURN                   ((uint32_t)0x000F0000)        /*!<BUSTURN[3:0] bits (Bus turnaround phase duration) */
S#define  FMC_BTR4_BUSTURN_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_BTR4_BUSTURN_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_BTR4_BUSTURN_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_BTR4_BUSTURN_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
S
S#define  FMC_BTR4_CLKDIV                    ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FMC_BTR4_CLKDIV_0                  ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_BTR4_CLKDIV_1                  ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FMC_BTR4_CLKDIV_2                  ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FMC_BTR4_CLKDIV_3                  ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FMC_BTR4_DATLAT                    ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FMC_BTR4_DATLAT_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_BTR4_DATLAT_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_BTR4_DATLAT_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_BTR4_DATLAT_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FMC_BTR4_ACCMOD                    ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FMC_BTR4_ACCMOD_0                  ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FMC_BTR4_ACCMOD_1                  ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FMC_BWTR1 register  ******************/
S#define  FMC_BWTR1_ADDSET                   ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FMC_BWTR1_ADDSET_0                 ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_BWTR1_ADDSET_1                 ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_BWTR1_ADDSET_2                 ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_BWTR1_ADDSET_3                 ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FMC_BWTR1_ADDHLD                   ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FMC_BWTR1_ADDHLD_0                 ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BWTR1_ADDHLD_1                 ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_BWTR1_ADDHLD_2                 ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_BWTR1_ADDHLD_3                 ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_BWTR1_DATAST                   ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FMC_BWTR1_DATAST_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_BWTR1_DATAST_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_BWTR1_DATAST_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_BWTR1_DATAST_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_BWTR1_DATAST_4                 ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_BWTR1_DATAST_5                 ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_BWTR1_DATAST_6                 ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_BWTR1_DATAST_7                 ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_BWTR1_CLKDIV                   ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FMC_BWTR1_CLKDIV_0                 ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_BWTR1_CLKDIV_1                 ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FMC_BWTR1_CLKDIV_2                 ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FMC_BWTR1_CLKDIV_3                 ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FMC_BWTR1_DATLAT                   ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FMC_BWTR1_DATLAT_0                 ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_BWTR1_DATLAT_1                 ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_BWTR1_DATLAT_2                 ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_BWTR1_DATLAT_3                 ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FMC_BWTR1_ACCMOD                   ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FMC_BWTR1_ACCMOD_0                 ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FMC_BWTR1_ACCMOD_1                 ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FMC_BWTR2 register  ******************/
S#define  FMC_BWTR2_ADDSET                   ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FMC_BWTR2_ADDSET_0                 ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_BWTR2_ADDSET_1                 ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_BWTR2_ADDSET_2                 ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_BWTR2_ADDSET_3                 ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FMC_BWTR2_ADDHLD                   ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FMC_BWTR2_ADDHLD_0                 ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BWTR2_ADDHLD_1                 ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_BWTR2_ADDHLD_2                 ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_BWTR2_ADDHLD_3                 ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_BWTR2_DATAST                   ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FMC_BWTR2_DATAST_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_BWTR2_DATAST_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_BWTR2_DATAST_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_BWTR2_DATAST_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_BWTR2_DATAST_4                 ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_BWTR2_DATAST_5                 ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_BWTR2_DATAST_6                 ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_BWTR2_DATAST_7                 ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_BWTR2_CLKDIV                   ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FMC_BWTR2_CLKDIV_0                 ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_BWTR2_CLKDIV_1                 ((uint32_t)0x00200000)        /*!<Bit 1*/
S#define  FMC_BWTR2_CLKDIV_2                 ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FMC_BWTR2_CLKDIV_3                 ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FMC_BWTR2_DATLAT                   ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FMC_BWTR2_DATLAT_0                 ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_BWTR2_DATLAT_1                 ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_BWTR2_DATLAT_2                 ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_BWTR2_DATLAT_3                 ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FMC_BWTR2_ACCMOD                   ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FMC_BWTR2_ACCMOD_0                 ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FMC_BWTR2_ACCMOD_1                 ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FMC_BWTR3 register  ******************/
S#define  FMC_BWTR3_ADDSET                   ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FMC_BWTR3_ADDSET_0                 ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_BWTR3_ADDSET_1                 ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_BWTR3_ADDSET_2                 ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_BWTR3_ADDSET_3                 ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FMC_BWTR3_ADDHLD                   ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FMC_BWTR3_ADDHLD_0                 ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BWTR3_ADDHLD_1                 ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_BWTR3_ADDHLD_2                 ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_BWTR3_ADDHLD_3                 ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_BWTR3_DATAST                   ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FMC_BWTR3_DATAST_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_BWTR3_DATAST_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_BWTR3_DATAST_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_BWTR3_DATAST_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_BWTR3_DATAST_4                 ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_BWTR3_DATAST_5                 ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_BWTR3_DATAST_6                 ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_BWTR3_DATAST_7                 ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_BWTR3_CLKDIV                   ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FMC_BWTR3_CLKDIV_0                 ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_BWTR3_CLKDIV_1                 ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FMC_BWTR3_CLKDIV_2                 ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FMC_BWTR3_CLKDIV_3                 ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FMC_BWTR3_DATLAT                   ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FMC_BWTR3_DATLAT_0                 ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_BWTR3_DATLAT_1                 ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_BWTR3_DATLAT_2                 ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_BWTR3_DATLAT_3                 ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FMC_BWTR3_ACCMOD                   ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FMC_BWTR3_ACCMOD_0                 ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FMC_BWTR3_ACCMOD_1                 ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FMC_BWTR4 register  ******************/
S#define  FMC_BWTR4_ADDSET                   ((uint32_t)0x0000000F)        /*!<ADDSET[3:0] bits (Address setup phase duration) */
S#define  FMC_BWTR4_ADDSET_0                 ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_BWTR4_ADDSET_1                 ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_BWTR4_ADDSET_2                 ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_BWTR4_ADDSET_3                 ((uint32_t)0x00000008)        /*!<Bit 3 */
S
S#define  FMC_BWTR4_ADDHLD                   ((uint32_t)0x000000F0)        /*!<ADDHLD[3:0] bits (Address-hold phase duration) */
S#define  FMC_BWTR4_ADDHLD_0                 ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_BWTR4_ADDHLD_1                 ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_BWTR4_ADDHLD_2                 ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_BWTR4_ADDHLD_3                 ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_BWTR4_DATAST                   ((uint32_t)0x0000FF00)        /*!<DATAST [3:0] bits (Data-phase duration) */
S#define  FMC_BWTR4_DATAST_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_BWTR4_DATAST_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_BWTR4_DATAST_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_BWTR4_DATAST_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_BWTR4_DATAST_4                 ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_BWTR4_DATAST_5                 ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_BWTR4_DATAST_6                 ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_BWTR4_DATAST_7                 ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_BWTR4_CLKDIV                   ((uint32_t)0x00F00000)        /*!<CLKDIV[3:0] bits (Clock divide ratio) */
S#define  FMC_BWTR4_CLKDIV_0                 ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_BWTR4_CLKDIV_1                 ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FMC_BWTR4_CLKDIV_2                 ((uint32_t)0x00400000)        /*!<Bit 2 */
S#define  FMC_BWTR4_CLKDIV_3                 ((uint32_t)0x00800000)        /*!<Bit 3 */
S
S#define  FMC_BWTR4_DATLAT                   ((uint32_t)0x0F000000)        /*!<DATLA[3:0] bits (Data latency) */
S#define  FMC_BWTR4_DATLAT_0                 ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_BWTR4_DATLAT_1                 ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_BWTR4_DATLAT_2                 ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_BWTR4_DATLAT_3                 ((uint32_t)0x08000000)        /*!<Bit 3 */
S
S#define  FMC_BWTR4_ACCMOD                   ((uint32_t)0x30000000)        /*!<ACCMOD[1:0] bits (Access mode) */
S#define  FMC_BWTR4_ACCMOD_0                 ((uint32_t)0x10000000)        /*!<Bit 0 */
S#define  FMC_BWTR4_ACCMOD_1                 ((uint32_t)0x20000000)        /*!<Bit 1 */
S
S/******************  Bit definition for FMC_PCR2 register  *******************/
S#define  FMC_PCR2_PWAITEN                   ((uint32_t)0x00000002)        /*!<Wait feature enable bit                   */
S#define  FMC_PCR2_PBKEN                     ((uint32_t)0x00000004)        /*!<PC Card/NAND Flash memory bank enable bit */
S#define  FMC_PCR2_PTYP                      ((uint32_t)0x00000008)        /*!<Memory type                               */
S
S#define  FMC_PCR2_PWID                      ((uint32_t)0x00000030)        /*!<PWID[1:0] bits (NAND Flash databus width) */
S#define  FMC_PCR2_PWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_PCR2_PWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FMC_PCR2_ECCEN                     ((uint32_t)0x00000040)        /*!<ECC computation logic enable bit          */
S
S#define  FMC_PCR2_TCLR                      ((uint32_t)0x00001E00)        /*!<TCLR[3:0] bits (CLE to RE delay)          */
S#define  FMC_PCR2_TCLR_0                    ((uint32_t)0x00000200)        /*!<Bit 0 */
S#define  FMC_PCR2_TCLR_1                    ((uint32_t)0x00000400)        /*!<Bit 1 */
S#define  FMC_PCR2_TCLR_2                    ((uint32_t)0x00000800)        /*!<Bit 2 */
S#define  FMC_PCR2_TCLR_3                    ((uint32_t)0x00001000)        /*!<Bit 3 */
S
S#define  FMC_PCR2_TAR                       ((uint32_t)0x0001E000)        /*!<TAR[3:0] bits (ALE to RE delay)           */
S#define  FMC_PCR2_TAR_0                     ((uint32_t)0x00002000)        /*!<Bit 0 */
S#define  FMC_PCR2_TAR_1                     ((uint32_t)0x00004000)        /*!<Bit 1 */
S#define  FMC_PCR2_TAR_2                     ((uint32_t)0x00008000)        /*!<Bit 2 */
S#define  FMC_PCR2_TAR_3                     ((uint32_t)0x00010000)        /*!<Bit 3 */
S
S#define  FMC_PCR2_ECCPS                     ((uint32_t)0x000E0000)        /*!<ECCPS[1:0] bits (ECC page size)           */
S#define  FMC_PCR2_ECCPS_0                   ((uint32_t)0x00020000)        /*!<Bit 0 */
S#define  FMC_PCR2_ECCPS_1                   ((uint32_t)0x00040000)        /*!<Bit 1 */
S#define  FMC_PCR2_ECCPS_2                   ((uint32_t)0x00080000)        /*!<Bit 2 */
S
S/******************  Bit definition for FMC_PCR3 register  *******************/
S#define  FMC_PCR3_PWAITEN                   ((uint32_t)0x00000002)        /*!<Wait feature enable bit                   */
S#define  FMC_PCR3_PBKEN                     ((uint32_t)0x00000004)        /*!<PC Card/NAND Flash memory bank enable bit */
S#define  FMC_PCR3_PTYP                      ((uint32_t)0x00000008)        /*!<Memory type                               */
S
S#define  FMC_PCR3_PWID                      ((uint32_t)0x00000030)        /*!<PWID[1:0] bits (NAND Flash databus width) */
S#define  FMC_PCR3_PWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_PCR3_PWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FMC_PCR3_ECCEN                     ((uint32_t)0x00000040)        /*!<ECC computation logic enable bit          */
S
S#define  FMC_PCR3_TCLR                      ((uint32_t)0x00001E00)        /*!<TCLR[3:0] bits (CLE to RE delay)          */
S#define  FMC_PCR3_TCLR_0                    ((uint32_t)0x00000200)        /*!<Bit 0 */
S#define  FMC_PCR3_TCLR_1                    ((uint32_t)0x00000400)        /*!<Bit 1 */
S#define  FMC_PCR3_TCLR_2                    ((uint32_t)0x00000800)        /*!<Bit 2 */
S#define  FMC_PCR3_TCLR_3                    ((uint32_t)0x00001000)        /*!<Bit 3 */
S
S#define  FMC_PCR3_TAR                       ((uint32_t)0x0001E000)        /*!<TAR[3:0] bits (ALE to RE delay)           */
S#define  FMC_PCR3_TAR_0                     ((uint32_t)0x00002000)        /*!<Bit 0 */
S#define  FMC_PCR3_TAR_1                     ((uint32_t)0x00004000)        /*!<Bit 1 */
S#define  FMC_PCR3_TAR_2                     ((uint32_t)0x00008000)        /*!<Bit 2 */
S#define  FMC_PCR3_TAR_3                     ((uint32_t)0x00010000)        /*!<Bit 3 */
S
S#define  FMC_PCR3_ECCPS                     ((uint32_t)0x000E0000)        /*!<ECCPS[2:0] bits (ECC page size)           */
S#define  FMC_PCR3_ECCPS_0                   ((uint32_t)0x00020000)        /*!<Bit 0 */
S#define  FMC_PCR3_ECCPS_1                   ((uint32_t)0x00040000)        /*!<Bit 1 */
S#define  FMC_PCR3_ECCPS_2                   ((uint32_t)0x00080000)        /*!<Bit 2 */
S
S/******************  Bit definition for FMC_PCR4 register  *******************/
S#define  FMC_PCR4_PWAITEN                   ((uint32_t)0x00000002)        /*!<Wait feature enable bit                   */
S#define  FMC_PCR4_PBKEN                     ((uint32_t)0x00000004)        /*!<PC Card/NAND Flash memory bank enable bit */
S#define  FMC_PCR4_PTYP                      ((uint32_t)0x00000008)        /*!<Memory type                               */
S
S#define  FMC_PCR4_PWID                      ((uint32_t)0x00000030)        /*!<PWID[1:0] bits (NAND Flash databus width) */
S#define  FMC_PCR4_PWID_0                    ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_PCR4_PWID_1                    ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FMC_PCR4_ECCEN                     ((uint32_t)0x00000040)        /*!<ECC computation logic enable bit          */
S
S#define  FMC_PCR4_TCLR                      ((uint32_t)0x00001E00)        /*!<TCLR[3:0] bits (CLE to RE delay)          */
S#define  FMC_PCR4_TCLR_0                    ((uint32_t)0x00000200)        /*!<Bit 0 */
S#define  FMC_PCR4_TCLR_1                    ((uint32_t)0x00000400)        /*!<Bit 1 */
S#define  FMC_PCR4_TCLR_2                    ((uint32_t)0x00000800)        /*!<Bit 2 */
S#define  FMC_PCR4_TCLR_3                    ((uint32_t)0x00001000)        /*!<Bit 3 */
S
S#define  FMC_PCR4_TAR                       ((uint32_t)0x0001E000)        /*!<TAR[3:0] bits (ALE to RE delay)           */
S#define  FMC_PCR4_TAR_0                     ((uint32_t)0x00002000)        /*!<Bit 0 */
S#define  FMC_PCR4_TAR_1                     ((uint32_t)0x00004000)        /*!<Bit 1 */
S#define  FMC_PCR4_TAR_2                     ((uint32_t)0x00008000)        /*!<Bit 2 */
S#define  FMC_PCR4_TAR_3                     ((uint32_t)0x00010000)        /*!<Bit 3 */
S
S#define  FMC_PCR4_ECCPS                     ((uint32_t)0x000E0000)        /*!<ECCPS[2:0] bits (ECC page size)           */
S#define  FMC_PCR4_ECCPS_0                   ((uint32_t)0x00020000)        /*!<Bit 0 */
S#define  FMC_PCR4_ECCPS_1                   ((uint32_t)0x00040000)        /*!<Bit 1 */
S#define  FMC_PCR4_ECCPS_2                   ((uint32_t)0x00080000)        /*!<Bit 2 */
S
S/*******************  Bit definition for FMC_SR2 register  *******************/
S#define  FMC_SR2_IRS                        ((uint8_t)0x01)               /*!<Interrupt Rising Edge status                */
S#define  FMC_SR2_ILS                        ((uint8_t)0x02)               /*!<Interrupt Level status                      */
S#define  FMC_SR2_IFS                        ((uint8_t)0x04)               /*!<Interrupt Falling Edge status               */
S#define  FMC_SR2_IREN                       ((uint8_t)0x08)               /*!<Interrupt Rising Edge detection Enable bit  */
S#define  FMC_SR2_ILEN                       ((uint8_t)0x10)               /*!<Interrupt Level detection Enable bit        */
S#define  FMC_SR2_IFEN                       ((uint8_t)0x20)               /*!<Interrupt Falling Edge detection Enable bit */
S#define  FMC_SR2_FEMPT                      ((uint8_t)0x40)               /*!<FIFO empty                                  */
S
S/*******************  Bit definition for FMC_SR3 register  *******************/
S#define  FMC_SR3_IRS                        ((uint8_t)0x01)               /*!<Interrupt Rising Edge status                */
S#define  FMC_SR3_ILS                        ((uint8_t)0x02)               /*!<Interrupt Level status                      */
S#define  FMC_SR3_IFS                        ((uint8_t)0x04)               /*!<Interrupt Falling Edge status               */
S#define  FMC_SR3_IREN                       ((uint8_t)0x08)               /*!<Interrupt Rising Edge detection Enable bit  */
S#define  FMC_SR3_ILEN                       ((uint8_t)0x10)               /*!<Interrupt Level detection Enable bit        */
S#define  FMC_SR3_IFEN                       ((uint8_t)0x20)               /*!<Interrupt Falling Edge detection Enable bit */
S#define  FMC_SR3_FEMPT                      ((uint8_t)0x40)               /*!<FIFO empty                                  */
S
S/*******************  Bit definition for FMC_SR4 register  *******************/
S#define  FMC_SR4_IRS                        ((uint8_t)0x01)               /*!<Interrupt Rising Edge status                */
S#define  FMC_SR4_ILS                        ((uint8_t)0x02)               /*!<Interrupt Level status                      */
S#define  FMC_SR4_IFS                        ((uint8_t)0x04)               /*!<Interrupt Falling Edge status               */
S#define  FMC_SR4_IREN                       ((uint8_t)0x08)               /*!<Interrupt Rising Edge detection Enable bit  */
S#define  FMC_SR4_ILEN                       ((uint8_t)0x10)               /*!<Interrupt Level detection Enable bit        */
S#define  FMC_SR4_IFEN                       ((uint8_t)0x20)               /*!<Interrupt Falling Edge detection Enable bit */
S#define  FMC_SR4_FEMPT                      ((uint8_t)0x40)               /*!<FIFO empty                                  */
S
S/******************  Bit definition for FMC_PMEM2 register  ******************/
S#define  FMC_PMEM2_MEMSET2                  ((uint32_t)0x000000FF)        /*!<MEMSET2[7:0] bits (Common memory 2 setup time) */
S#define  FMC_PMEM2_MEMSET2_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_PMEM2_MEMSET2_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_PMEM2_MEMSET2_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_PMEM2_MEMSET2_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FMC_PMEM2_MEMSET2_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FMC_PMEM2_MEMSET2_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FMC_PMEM2_MEMSET2_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FMC_PMEM2_MEMSET2_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FMC_PMEM2_MEMWAIT2                 ((uint32_t)0x0000FF00)        /*!<MEMWAIT2[7:0] bits (Common memory 2 wait time) */
S#define  FMC_PMEM2_MEMWAIT2_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_PMEM2_MEMWAIT2_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_PMEM2_MEMWAIT2_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_PMEM2_MEMWAIT2_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_PMEM2_MEMWAIT2_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_PMEM2_MEMWAIT2_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_PMEM2_MEMWAIT2_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_PMEM2_MEMWAIT2_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_PMEM2_MEMHOLD2                 ((uint32_t)0x00FF0000)        /*!<MEMHOLD2[7:0] bits (Common memory 2 hold time) */
S#define  FMC_PMEM2_MEMHOLD2_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_PMEM2_MEMHOLD2_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_PMEM2_MEMHOLD2_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_PMEM2_MEMHOLD2_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FMC_PMEM2_MEMHOLD2_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FMC_PMEM2_MEMHOLD2_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FMC_PMEM2_MEMHOLD2_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FMC_PMEM2_MEMHOLD2_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FMC_PMEM2_MEMHIZ2                  ((uint32_t)0xFF000000)        /*!<MEMHIZ2[7:0] bits (Common memory 2 databus HiZ time) */
S#define  FMC_PMEM2_MEMHIZ2_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_PMEM2_MEMHIZ2_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_PMEM2_MEMHIZ2_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_PMEM2_MEMHIZ2_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FMC_PMEM2_MEMHIZ2_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FMC_PMEM2_MEMHIZ2_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FMC_PMEM2_MEMHIZ2_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FMC_PMEM2_MEMHIZ2_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FMC_PMEM3 register  ******************/
S#define  FMC_PMEM3_MEMSET3                  ((uint32_t)0x000000FF)        /*!<MEMSET3[7:0] bits (Common memory 3 setup time) */
S#define  FMC_PMEM3_MEMSET3_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_PMEM3_MEMSET3_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_PMEM3_MEMSET3_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_PMEM3_MEMSET3_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FMC_PMEM3_MEMSET3_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FMC_PMEM3_MEMSET3_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FMC_PMEM3_MEMSET3_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FMC_PMEM3_MEMSET3_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FMC_PMEM3_MEMWAIT3                 ((uint32_t)0x0000FF00)        /*!<MEMWAIT3[7:0] bits (Common memory 3 wait time) */
S#define  FMC_PMEM3_MEMWAIT3_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_PMEM3_MEMWAIT3_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_PMEM3_MEMWAIT3_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_PMEM3_MEMWAIT3_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_PMEM3_MEMWAIT3_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_PMEM3_MEMWAIT3_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_PMEM3_MEMWAIT3_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_PMEM3_MEMWAIT3_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_PMEM3_MEMHOLD3                 ((uint32_t)0x00FF0000)        /*!<MEMHOLD3[7:0] bits (Common memory 3 hold time) */
S#define  FMC_PMEM3_MEMHOLD3_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_PMEM3_MEMHOLD3_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_PMEM3_MEMHOLD3_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_PMEM3_MEMHOLD3_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FMC_PMEM3_MEMHOLD3_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FMC_PMEM3_MEMHOLD3_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FMC_PMEM3_MEMHOLD3_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FMC_PMEM3_MEMHOLD3_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FMC_PMEM3_MEMHIZ3                  ((uint32_t)0xFF000000)        /*!<MEMHIZ3[7:0] bits (Common memory 3 databus HiZ time) */
S#define  FMC_PMEM3_MEMHIZ3_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_PMEM3_MEMHIZ3_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_PMEM3_MEMHIZ3_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_PMEM3_MEMHIZ3_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FMC_PMEM3_MEMHIZ3_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FMC_PMEM3_MEMHIZ3_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FMC_PMEM3_MEMHIZ3_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FMC_PMEM3_MEMHIZ3_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FMC_PMEM4 register  ******************/
S#define  FMC_PMEM4_MEMSET4                  ((uint32_t)0x000000FF)        /*!<MEMSET4[7:0] bits (Common memory 4 setup time) */
S#define  FMC_PMEM4_MEMSET4_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_PMEM4_MEMSET4_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_PMEM4_MEMSET4_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_PMEM4_MEMSET4_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FMC_PMEM4_MEMSET4_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FMC_PMEM4_MEMSET4_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FMC_PMEM4_MEMSET4_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FMC_PMEM4_MEMSET4_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FMC_PMEM4_MEMWAIT4                 ((uint32_t)0x0000FF00)        /*!<MEMWAIT4[7:0] bits (Common memory 4 wait time) */
S#define  FMC_PMEM4_MEMWAIT4_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_PMEM4_MEMWAIT4_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_PMEM4_MEMWAIT4_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_PMEM4_MEMWAIT4_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_PMEM4_MEMWAIT4_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_PMEM4_MEMWAIT4_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_PMEM4_MEMWAIT4_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_PMEM4_MEMWAIT4_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_PMEM4_MEMHOLD4                 ((uint32_t)0x00FF0000)        /*!<MEMHOLD4[7:0] bits (Common memory 4 hold time) */
S#define  FMC_PMEM4_MEMHOLD4_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_PMEM4_MEMHOLD4_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_PMEM4_MEMHOLD4_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_PMEM4_MEMHOLD4_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FMC_PMEM4_MEMHOLD4_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FMC_PMEM4_MEMHOLD4_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FMC_PMEM4_MEMHOLD4_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FMC_PMEM4_MEMHOLD4_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FMC_PMEM4_MEMHIZ4                  ((uint32_t)0xFF000000)        /*!<MEMHIZ4[7:0] bits (Common memory 4 databus HiZ time) */
S#define  FMC_PMEM4_MEMHIZ4_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_PMEM4_MEMHIZ4_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_PMEM4_MEMHIZ4_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_PMEM4_MEMHIZ4_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FMC_PMEM4_MEMHIZ4_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FMC_PMEM4_MEMHIZ4_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FMC_PMEM4_MEMHIZ4_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FMC_PMEM4_MEMHIZ4_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FMC_PATT2 register  ******************/
S#define  FMC_PATT2_ATTSET2                  ((uint32_t)0x000000FF)        /*!<ATTSET2[7:0] bits (Attribute memory 2 setup time) */
S#define  FMC_PATT2_ATTSET2_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_PATT2_ATTSET2_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_PATT2_ATTSET2_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_PATT2_ATTSET2_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FMC_PATT2_ATTSET2_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FMC_PATT2_ATTSET2_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FMC_PATT2_ATTSET2_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FMC_PATT2_ATTSET2_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FMC_PATT2_ATTWAIT2                 ((uint32_t)0x0000FF00)        /*!<ATTWAIT2[7:0] bits (Attribute memory 2 wait time) */
S#define  FMC_PATT2_ATTWAIT2_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_PATT2_ATTWAIT2_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_PATT2_ATTWAIT2_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_PATT2_ATTWAIT2_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_PATT2_ATTWAIT2_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_PATT2_ATTWAIT2_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_PATT2_ATTWAIT2_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_PATT2_ATTWAIT2_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_PATT2_ATTHOLD2                 ((uint32_t)0x00FF0000)        /*!<ATTHOLD2[7:0] bits (Attribute memory 2 hold time) */
S#define  FMC_PATT2_ATTHOLD2_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_PATT2_ATTHOLD2_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_PATT2_ATTHOLD2_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_PATT2_ATTHOLD2_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FMC_PATT2_ATTHOLD2_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FMC_PATT2_ATTHOLD2_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FMC_PATT2_ATTHOLD2_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FMC_PATT2_ATTHOLD2_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FMC_PATT2_ATTHIZ2                  ((uint32_t)0xFF000000)        /*!<ATTHIZ2[7:0] bits (Attribute memory 2 databus HiZ time) */
S#define  FMC_PATT2_ATTHIZ2_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_PATT2_ATTHIZ2_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_PATT2_ATTHIZ2_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_PATT2_ATTHIZ2_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FMC_PATT2_ATTHIZ2_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FMC_PATT2_ATTHIZ2_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FMC_PATT2_ATTHIZ2_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FMC_PATT2_ATTHIZ2_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FMC_PATT3 register  ******************/
S#define  FMC_PATT3_ATTSET3                  ((uint32_t)0x000000FF)        /*!<ATTSET3[7:0] bits (Attribute memory 3 setup time) */
S#define  FMC_PATT3_ATTSET3_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_PATT3_ATTSET3_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_PATT3_ATTSET3_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_PATT3_ATTSET3_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FMC_PATT3_ATTSET3_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FMC_PATT3_ATTSET3_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FMC_PATT3_ATTSET3_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FMC_PATT3_ATTSET3_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FMC_PATT3_ATTWAIT3                 ((uint32_t)0x0000FF00)        /*!<ATTWAIT3[7:0] bits (Attribute memory 3 wait time) */
S#define  FMC_PATT3_ATTWAIT3_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_PATT3_ATTWAIT3_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_PATT3_ATTWAIT3_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_PATT3_ATTWAIT3_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_PATT3_ATTWAIT3_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_PATT3_ATTWAIT3_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_PATT3_ATTWAIT3_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_PATT3_ATTWAIT3_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_PATT3_ATTHOLD3                 ((uint32_t)0x00FF0000)        /*!<ATTHOLD3[7:0] bits (Attribute memory 3 hold time) */
S#define  FMC_PATT3_ATTHOLD3_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_PATT3_ATTHOLD3_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_PATT3_ATTHOLD3_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_PATT3_ATTHOLD3_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FMC_PATT3_ATTHOLD3_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FMC_PATT3_ATTHOLD3_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FMC_PATT3_ATTHOLD3_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FMC_PATT3_ATTHOLD3_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FMC_PATT3_ATTHIZ3                  ((uint32_t)0xFF000000)        /*!<ATTHIZ3[7:0] bits (Attribute memory 3 databus HiZ time) */
S#define  FMC_PATT3_ATTHIZ3_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_PATT3_ATTHIZ3_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_PATT3_ATTHIZ3_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_PATT3_ATTHIZ3_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FMC_PATT3_ATTHIZ3_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FMC_PATT3_ATTHIZ3_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FMC_PATT3_ATTHIZ3_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FMC_PATT3_ATTHIZ3_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FMC_PATT4 register  ******************/
S#define  FMC_PATT4_ATTSET4                  ((uint32_t)0x000000FF)        /*!<ATTSET4[7:0] bits (Attribute memory 4 setup time) */
S#define  FMC_PATT4_ATTSET4_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_PATT4_ATTSET4_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_PATT4_ATTSET4_2                ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_PATT4_ATTSET4_3                ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FMC_PATT4_ATTSET4_4                ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FMC_PATT4_ATTSET4_5                ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FMC_PATT4_ATTSET4_6                ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FMC_PATT4_ATTSET4_7                ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FMC_PATT4_ATTWAIT4                 ((uint32_t)0x0000FF00)        /*!<ATTWAIT4[7:0] bits (Attribute memory 4 wait time) */
S#define  FMC_PATT4_ATTWAIT4_0               ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_PATT4_ATTWAIT4_1               ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_PATT4_ATTWAIT4_2               ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_PATT4_ATTWAIT4_3               ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_PATT4_ATTWAIT4_4               ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_PATT4_ATTWAIT4_5               ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_PATT4_ATTWAIT4_6               ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_PATT4_ATTWAIT4_7               ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_PATT4_ATTHOLD4                 ((uint32_t)0x00FF0000)        /*!<ATTHOLD4[7:0] bits (Attribute memory 4 hold time) */
S#define  FMC_PATT4_ATTHOLD4_0               ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_PATT4_ATTHOLD4_1               ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_PATT4_ATTHOLD4_2               ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_PATT4_ATTHOLD4_3               ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FMC_PATT4_ATTHOLD4_4               ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FMC_PATT4_ATTHOLD4_5               ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FMC_PATT4_ATTHOLD4_6               ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FMC_PATT4_ATTHOLD4_7               ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FMC_PATT4_ATTHIZ4                  ((uint32_t)0xFF000000)        /*!<ATTHIZ4[7:0] bits (Attribute memory 4 databus HiZ time) */
S#define  FMC_PATT4_ATTHIZ4_0                ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_PATT4_ATTHIZ4_1                ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_PATT4_ATTHIZ4_2                ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_PATT4_ATTHIZ4_3                ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FMC_PATT4_ATTHIZ4_4                ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FMC_PATT4_ATTHIZ4_5                ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FMC_PATT4_ATTHIZ4_6                ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FMC_PATT4_ATTHIZ4_7                ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FMC_PIO4 register  *******************/
S#define  FMC_PIO4_IOSET4                    ((uint32_t)0x000000FF)        /*!<IOSET4[7:0] bits (I/O 4 setup time) */
S#define  FMC_PIO4_IOSET4_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_PIO4_IOSET4_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_PIO4_IOSET4_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_PIO4_IOSET4_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  FMC_PIO4_IOSET4_4                  ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  FMC_PIO4_IOSET4_5                  ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  FMC_PIO4_IOSET4_6                  ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  FMC_PIO4_IOSET4_7                  ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  FMC_PIO4_IOWAIT4                   ((uint32_t)0x0000FF00)        /*!<IOWAIT4[7:0] bits (I/O 4 wait time) */
S#define  FMC_PIO4_IOWAIT4_0                 ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_PIO4_IOWAIT4_1                 ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_PIO4_IOWAIT4_2                 ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_PIO4_IOWAIT4_3                 ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  FMC_PIO4_IOWAIT4_4                 ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  FMC_PIO4_IOWAIT4_5                 ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  FMC_PIO4_IOWAIT4_6                 ((uint32_t)0x00004000)        /*!<Bit 6 */
S#define  FMC_PIO4_IOWAIT4_7                 ((uint32_t)0x00008000)        /*!<Bit 7 */
S
S#define  FMC_PIO4_IOHOLD4                   ((uint32_t)0x00FF0000)        /*!<IOHOLD4[7:0] bits (I/O 4 hold time) */
S#define  FMC_PIO4_IOHOLD4_0                 ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_PIO4_IOHOLD4_1                 ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_PIO4_IOHOLD4_2                 ((uint32_t)0x00040000)        /*!<Bit 2 */
S#define  FMC_PIO4_IOHOLD4_3                 ((uint32_t)0x00080000)        /*!<Bit 3 */
S#define  FMC_PIO4_IOHOLD4_4                 ((uint32_t)0x00100000)        /*!<Bit 4 */
S#define  FMC_PIO4_IOHOLD4_5                 ((uint32_t)0x00200000)        /*!<Bit 5 */
S#define  FMC_PIO4_IOHOLD4_6                 ((uint32_t)0x00400000)        /*!<Bit 6 */
S#define  FMC_PIO4_IOHOLD4_7                 ((uint32_t)0x00800000)        /*!<Bit 7 */
S
S#define  FMC_PIO4_IOHIZ4                    ((uint32_t)0xFF000000)        /*!<IOHIZ4[7:0] bits (I/O 4 databus HiZ time) */
S#define  FMC_PIO4_IOHIZ4_0                  ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_PIO4_IOHIZ4_1                  ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_PIO4_IOHIZ4_2                  ((uint32_t)0x04000000)        /*!<Bit 2 */
S#define  FMC_PIO4_IOHIZ4_3                  ((uint32_t)0x08000000)        /*!<Bit 3 */
S#define  FMC_PIO4_IOHIZ4_4                  ((uint32_t)0x10000000)        /*!<Bit 4 */
S#define  FMC_PIO4_IOHIZ4_5                  ((uint32_t)0x20000000)        /*!<Bit 5 */
S#define  FMC_PIO4_IOHIZ4_6                  ((uint32_t)0x40000000)        /*!<Bit 6 */
S#define  FMC_PIO4_IOHIZ4_7                  ((uint32_t)0x80000000)        /*!<Bit 7 */
S
S/******************  Bit definition for FMC_ECCR2 register  ******************/
S#define  FMC_ECCR2_ECC2                     ((uint32_t)0xFFFFFFFF)        /*!<ECC result */
S
S/******************  Bit definition for FMC_ECCR3 register  ******************/
S#define  FMC_ECCR3_ECC3                     ((uint32_t)0xFFFFFFFF)        /*!<ECC result */
S
S/******************  Bit definition for FMC_SDCR1 register  ******************/
S#define  FMC_SDCR1_NC                       ((uint32_t)0x00000003)        /*!<NC[1:0] bits (Number of column bits) */
S#define  FMC_SDCR1_NC_0                     ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_SDCR1_NC_1                     ((uint32_t)0x00000002)        /*!<Bit 1 */
S
S#define  FMC_SDCR1_NR                       ((uint32_t)0x0000000C)        /*!<NR[1:0] bits (Number of row bits) */
S#define  FMC_SDCR1_NR_0                     ((uint32_t)0x00000004)        /*!<Bit 0 */
S#define  FMC_SDCR1_NR_1                     ((uint32_t)0x00000008)        /*!<Bit 1 */
S
S#define  FMC_SDCR1_MWID                     ((uint32_t)0x00000030)        /*!<NR[1:0] bits (Number of row bits) */
S#define  FMC_SDCR1_MWID_0                   ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_SDCR1_MWID_1                   ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FMC_SDCR1_NB                       ((uint32_t)0x00000040)        /*!<Number of internal bank */
S
S#define  FMC_SDCR1_CAS                      ((uint32_t)0x00000180)        /*!<CAS[1:0] bits (CAS latency) */
S#define  FMC_SDCR1_CAS_0                    ((uint32_t)0x00000080)        /*!<Bit 0 */
S#define  FMC_SDCR1_CAS_1                    ((uint32_t)0x00000100)        /*!<Bit 1 */
S
S#define  FMC_SDCR1_WP                       ((uint32_t)0x00000200)        /*!<Write protection */
S
S#define  FMC_SDCR1_SDCLK                    ((uint32_t)0x00000C00)        /*!<SDRAM clock configuration */
S#define  FMC_SDCR1_SDCLK_0                  ((uint32_t)0x00000400)        /*!<Bit 0 */
S#define  FMC_SDCR1_SDCLK_1                  ((uint32_t)0x00000800)        /*!<Bit 1 */
S
S#define  FMC_SDCR1_RBURST                   ((uint32_t)0x00001000)        /*!<Read burst */
S
S#define  FMC_SDCR1_RPIPE                    ((uint32_t)0x00006000)        /*!<Write protection */
S#define  FMC_SDCR1_RPIPE_0                  ((uint32_t)0x00002000)        /*!<Bit 0 */
S#define  FMC_SDCR1_RPIPE_1                  ((uint32_t)0x00004000)        /*!<Bit 1 */
S
S/******************  Bit definition for FMC_SDCR2 register  ******************/
S#define  FMC_SDCR2_NC                       ((uint32_t)0x00000003)        /*!<NC[1:0] bits (Number of column bits) */
S#define  FMC_SDCR2_NC_0                     ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_SDCR2_NC_1                     ((uint32_t)0x00000002)        /*!<Bit 1 */
S
S#define  FMC_SDCR2_NR                       ((uint32_t)0x0000000C)        /*!<NR[1:0] bits (Number of row bits) */
S#define  FMC_SDCR2_NR_0                     ((uint32_t)0x00000004)        /*!<Bit 0 */
S#define  FMC_SDCR2_NR_1                     ((uint32_t)0x00000008)        /*!<Bit 1 */
S
S#define  FMC_SDCR2_MWID                     ((uint32_t)0x00000030)        /*!<NR[1:0] bits (Number of row bits) */
S#define  FMC_SDCR2_MWID_0                   ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_SDCR2_MWID_1                   ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S#define  FMC_SDCR2_NB                       ((uint32_t)0x00000040)        /*!<Number of internal bank */
S
S#define  FMC_SDCR2_CAS                      ((uint32_t)0x00000180)        /*!<CAS[1:0] bits (CAS latency) */
S#define  FMC_SDCR2_CAS_0                    ((uint32_t)0x00000080)        /*!<Bit 0 */
S#define  FMC_SDCR2_CAS_1                    ((uint32_t)0x00000100)        /*!<Bit 1 */
S
S#define  FMC_SDCR2_WP                       ((uint32_t)0x00000200)        /*!<Write protection */
S
S#define  FMC_SDCR2_SDCLK                    ((uint32_t)0x00000C00)        /*!<SDCLK[1:0] (SDRAM clock configuration) */
S#define  FMC_SDCR2_SDCLK_0                  ((uint32_t)0x00000400)        /*!<Bit 0 */
S#define  FMC_SDCR2_SDCLK_1                  ((uint32_t)0x00000800)        /*!<Bit 1 */
S
S#define  FMC_SDCR2_RBURST                   ((uint32_t)0x00001000)        /*!<Read burst */
S
S#define  FMC_SDCR2_RPIPE                    ((uint32_t)0x00006000)        /*!<RPIPE[1:0](Read pipe) */
S#define  FMC_SDCR2_RPIPE_0                  ((uint32_t)0x00002000)        /*!<Bit 0 */
S#define  FMC_SDCR2_RPIPE_1                  ((uint32_t)0x00004000)        /*!<Bit 1 */
S
S/******************  Bit definition for FMC_SDTR1 register  ******************/
S#define  FMC_SDTR1_TMRD                     ((uint32_t)0x0000000F)        /*!<TMRD[3:0] bits (Load mode register to active) */
S#define  FMC_SDTR1_TMRD_0                   ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_SDTR1_TMRD_1                   ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_SDTR1_TMRD_2                   ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_SDTR1_TMRD_3                   ((uint32_t)0x00000008)        /*!<Bit 3 */
S                                            
S#define  FMC_SDTR1_TXSR                     ((uint32_t)0x000000F0)        /*!<TXSR[3:0] bits (Exit self refresh) */
S#define  FMC_SDTR1_TXSR_0                   ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_SDTR1_TXSR_1                   ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_SDTR1_TXSR_2                   ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_SDTR1_TXSR_3                   ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_SDTR1_TRAS                     ((uint32_t)0x00000F00)        /*!<TRAS[3:0] bits (Self refresh time) */
S#define  FMC_SDTR1_TRAS_0                   ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_SDTR1_TRAS_1                   ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_SDTR1_TRAS_2                   ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_SDTR1_TRAS_3                   ((uint32_t)0x00000800)        /*!<Bit 3 */
S
S#define  FMC_SDTR1_TRC                      ((uint32_t)0x0000F000)        /*!<TRC[2:0] bits (Row cycle delay) */
S#define  FMC_SDTR1_TRC_0                    ((uint32_t)0x00001000)        /*!<Bit 0 */
S#define  FMC_SDTR1_TRC_1                    ((uint32_t)0x00002000)        /*!<Bit 1 */
S#define  FMC_SDTR1_TRC_2                    ((uint32_t)0x00004000)        /*!<Bit 2 */
S
S#define  FMC_SDTR1_TWR                      ((uint32_t)0x000F0000)        /*!<TRC[2:0] bits (Write recovery delay) */
S#define  FMC_SDTR1_TWR_0                    ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_SDTR1_TWR_1                    ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_SDTR1_TWR_2                    ((uint32_t)0x00040000)        /*!<Bit 2 */
S
S#define  FMC_SDTR1_TRP                      ((uint32_t)0x00F00000)        /*!<TRP[2:0] bits (Row precharge delay) */
S#define  FMC_SDTR1_TRP_0                    ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_SDTR1_TRP_1                    ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FMC_SDTR1_TRP_2                    ((uint32_t)0x00400000)        /*!<Bit 2 */
S
S#define  FMC_SDTR1_TRCD                     ((uint32_t)0x0F000000)        /*!<TRP[2:0] bits (Row to column delay) */
S#define  FMC_SDTR1_TRCD_0                   ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_SDTR1_TRCD_1                   ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_SDTR1_TRCD_2                   ((uint32_t)0x04000000)        /*!<Bit 2 */
S
S/******************  Bit definition for FMC_SDTR2 register  ******************/
S#define  FMC_SDTR2_TMRD                     ((uint32_t)0x0000000F)        /*!<TMRD[3:0] bits (Load mode register to active) */
S#define  FMC_SDTR2_TMRD_0                   ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_SDTR2_TMRD_1                   ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_SDTR2_TMRD_2                   ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  FMC_SDTR2_TMRD_3                   ((uint32_t)0x00000008)        /*!<Bit 3 */
S                                            
S#define  FMC_SDTR2_TXSR                     ((uint32_t)0x000000F0)        /*!<TXSR[3:0] bits (Exit self refresh) */
S#define  FMC_SDTR2_TXSR_0                   ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  FMC_SDTR2_TXSR_1                   ((uint32_t)0x00000020)        /*!<Bit 1 */
S#define  FMC_SDTR2_TXSR_2                   ((uint32_t)0x00000040)        /*!<Bit 2 */
S#define  FMC_SDTR2_TXSR_3                   ((uint32_t)0x00000080)        /*!<Bit 3 */
S
S#define  FMC_SDTR2_TRAS                     ((uint32_t)0x00000F00)        /*!<TRAS[3:0] bits (Self refresh time) */
S#define  FMC_SDTR2_TRAS_0                   ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  FMC_SDTR2_TRAS_1                   ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  FMC_SDTR2_TRAS_2                   ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  FMC_SDTR2_TRAS_3                   ((uint32_t)0x00000800)        /*!<Bit 3 */
S
S#define  FMC_SDTR2_TRC                      ((uint32_t)0x0000F000)        /*!<TRC[2:0] bits (Row cycle delay) */
S#define  FMC_SDTR2_TRC_0                    ((uint32_t)0x00001000)        /*!<Bit 0 */
S#define  FMC_SDTR2_TRC_1                    ((uint32_t)0x00002000)        /*!<Bit 1 */
S#define  FMC_SDTR2_TRC_2                    ((uint32_t)0x00004000)        /*!<Bit 2 */
S
S#define  FMC_SDTR2_TWR                      ((uint32_t)0x000F0000)        /*!<TRC[2:0] bits (Write recovery delay) */
S#define  FMC_SDTR2_TWR_0                    ((uint32_t)0x00010000)        /*!<Bit 0 */
S#define  FMC_SDTR2_TWR_1                    ((uint32_t)0x00020000)        /*!<Bit 1 */
S#define  FMC_SDTR2_TWR_2                    ((uint32_t)0x00040000)        /*!<Bit 2 */
S
S#define  FMC_SDTR2_TRP                      ((uint32_t)0x00F00000)        /*!<TRP[2:0] bits (Row precharge delay) */
S#define  FMC_SDTR2_TRP_0                    ((uint32_t)0x00100000)        /*!<Bit 0 */
S#define  FMC_SDTR2_TRP_1                    ((uint32_t)0x00200000)        /*!<Bit 1 */
S#define  FMC_SDTR2_TRP_2                    ((uint32_t)0x00400000)        /*!<Bit 2 */
S
S#define  FMC_SDTR2_TRCD                     ((uint32_t)0x0F000000)        /*!<TRP[2:0] bits (Row to column delay) */
S#define  FMC_SDTR2_TRCD_0                   ((uint32_t)0x01000000)        /*!<Bit 0 */
S#define  FMC_SDTR2_TRCD_1                   ((uint32_t)0x02000000)        /*!<Bit 1 */
S#define  FMC_SDTR2_TRCD_2                   ((uint32_t)0x04000000)        /*!<Bit 2 */
S
S/******************  Bit definition for FMC_SDCMR register  ******************/
S#define  FMC_SDCMR_MODE                     ((uint32_t)0x00000007)        /*!<MODE[2:0] bits (Command mode) */
S#define  FMC_SDCMR_MODE_0                   ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  FMC_SDCMR_MODE_1                   ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  FMC_SDCMR_MODE_2                   ((uint32_t)0x00000003)        /*!<Bit 2 */
S                                            
S#define  FMC_SDCMR_CTB2                     ((uint32_t)0x00000008)        /*!<Command target 2 */
S
S#define  FMC_SDCMR_CTB1                     ((uint32_t)0x00000010)        /*!<Command target 1 */
S
S#define  FMC_SDCMR_NRFS                     ((uint32_t)0x000001E0)        /*!<NRFS[3:0] bits (Number of auto-refresh) */
S#define  FMC_SDCMR_NRFS_0                   ((uint32_t)0x00000020)        /*!<Bit 0 */
S#define  FMC_SDCMR_NRFS_1                   ((uint32_t)0x00000040)        /*!<Bit 1 */
S#define  FMC_SDCMR_NRFS_2                   ((uint32_t)0x00000080)        /*!<Bit 2 */
S#define  FMC_SDCMR_NRFS_3                   ((uint32_t)0x00000100)        /*!<Bit 3 */
S
S#define  FMC_SDCMR_MRD                      ((uint32_t)0x003FFE00)        /*!<MRD[12:0] bits (Mode register definition) */
S
S/******************  Bit definition for FMC_SDRTR register  ******************/
S#define  FMC_SDRTR_CRE                      ((uint32_t)0x00000001)        /*!<Clear refresh error flag */
S
S#define  FMC_SDRTR_COUNT                    ((uint32_t)0x00003FFE)        /*!<COUNT[12:0] bits (Refresh timer count) */
S
S#define  FMC_SDRTR_REIE                     ((uint32_t)0x00004000)        /*!<RES interupt enable */
S
S/******************  Bit definition for FMC_SDSR register  ******************/
S#define  FMC_SDSR_RE                        ((uint32_t)0x00000001)        /*!<Refresh error flag */
S
S#define  FMC_SDSR_MODES1                    ((uint32_t)0x00000006)        /*!<MODES1[1:0]bits (Status mode for bank 1) */
S#define  FMC_SDSR_MODES1_0                  ((uint32_t)0x00000002)        /*!<Bit 0 */
S#define  FMC_SDSR_MODES1_1                  ((uint32_t)0x00000004)        /*!<Bit 1 */
S
S#define  FMC_SDSR_MODES2                    ((uint32_t)0x00000018)        /*!<MODES2[1:0]bits (Status mode for bank 2) */
S#define  FMC_SDSR_MODES2_0                  ((uint32_t)0x00000008)        /*!<Bit 0 */
S#define  FMC_SDSR_MODES2_1                  ((uint32_t)0x00000010)        /*!<Bit 1 */
S
S#define  FMC_SDSR_BUSY                      ((uint32_t)0x00000020)        /*!<Busy status */
S
S#endif /* STM32F427_437xx ||  STM32F429_439xx */
S
S/******************************************************************************/
S/*                                                                            */
S/*                            General Purpose I/O                             */
S/*                                                                            */
S/******************************************************************************/
S/******************  Bits definition for GPIO_MODER register  *****************/
S#define GPIO_MODER_MODER0                    ((uint32_t)0x00000003)
S#define GPIO_MODER_MODER0_0                  ((uint32_t)0x00000001)
S#define GPIO_MODER_MODER0_1                  ((uint32_t)0x00000002)
S
S#define GPIO_MODER_MODER1                    ((uint32_t)0x0000000C)
S#define GPIO_MODER_MODER1_0                  ((uint32_t)0x00000004)
S#define GPIO_MODER_MODER1_1                  ((uint32_t)0x00000008)
S
S#define GPIO_MODER_MODER2                    ((uint32_t)0x00000030)
S#define GPIO_MODER_MODER2_0                  ((uint32_t)0x00000010)
S#define GPIO_MODER_MODER2_1                  ((uint32_t)0x00000020)
S
S#define GPIO_MODER_MODER3                    ((uint32_t)0x000000C0)
S#define GPIO_MODER_MODER3_0                  ((uint32_t)0x00000040)
S#define GPIO_MODER_MODER3_1                  ((uint32_t)0x00000080)
S
S#define GPIO_MODER_MODER4                    ((uint32_t)0x00000300)
S#define GPIO_MODER_MODER4_0                  ((uint32_t)0x00000100)
S#define GPIO_MODER_MODER4_1                  ((uint32_t)0x00000200)
S
S#define GPIO_MODER_MODER5                    ((uint32_t)0x00000C00)
S#define GPIO_MODER_MODER5_0                  ((uint32_t)0x00000400)
S#define GPIO_MODER_MODER5_1                  ((uint32_t)0x00000800)
S
S#define GPIO_MODER_MODER6                    ((uint32_t)0x00003000)
S#define GPIO_MODER_MODER6_0                  ((uint32_t)0x00001000)
S#define GPIO_MODER_MODER6_1                  ((uint32_t)0x00002000)
S
S#define GPIO_MODER_MODER7                    ((uint32_t)0x0000C000)
S#define GPIO_MODER_MODER7_0                  ((uint32_t)0x00004000)
S#define GPIO_MODER_MODER7_1                  ((uint32_t)0x00008000)
S
S#define GPIO_MODER_MODER8                    ((uint32_t)0x00030000)
S#define GPIO_MODER_MODER8_0                  ((uint32_t)0x00010000)
S#define GPIO_MODER_MODER8_1                  ((uint32_t)0x00020000)
S
S#define GPIO_MODER_MODER9                    ((uint32_t)0x000C0000)
S#define GPIO_MODER_MODER9_0                  ((uint32_t)0x00040000)
S#define GPIO_MODER_MODER9_1                  ((uint32_t)0x00080000)
S
S#define GPIO_MODER_MODER10                   ((uint32_t)0x00300000)
S#define GPIO_MODER_MODER10_0                 ((uint32_t)0x00100000)
S#define GPIO_MODER_MODER10_1                 ((uint32_t)0x00200000)
S
S#define GPIO_MODER_MODER11                   ((uint32_t)0x00C00000)
S#define GPIO_MODER_MODER11_0                 ((uint32_t)0x00400000)
S#define GPIO_MODER_MODER11_1                 ((uint32_t)0x00800000)
S
S#define GPIO_MODER_MODER12                   ((uint32_t)0x03000000)
S#define GPIO_MODER_MODER12_0                 ((uint32_t)0x01000000)
S#define GPIO_MODER_MODER12_1                 ((uint32_t)0x02000000)
S
S#define GPIO_MODER_MODER13                   ((uint32_t)0x0C000000)
S#define GPIO_MODER_MODER13_0                 ((uint32_t)0x04000000)
S#define GPIO_MODER_MODER13_1                 ((uint32_t)0x08000000)
S
S#define GPIO_MODER_MODER14                   ((uint32_t)0x30000000)
S#define GPIO_MODER_MODER14_0                 ((uint32_t)0x10000000)
S#define GPIO_MODER_MODER14_1                 ((uint32_t)0x20000000)
S
S#define GPIO_MODER_MODER15                   ((uint32_t)0xC0000000)
S#define GPIO_MODER_MODER15_0                 ((uint32_t)0x40000000)
S#define GPIO_MODER_MODER15_1                 ((uint32_t)0x80000000)
S
S/******************  Bits definition for GPIO_OTYPER register  ****************/
S#define GPIO_OTYPER_OT_0                     ((uint32_t)0x00000001)
S#define GPIO_OTYPER_OT_1                     ((uint32_t)0x00000002)
S#define GPIO_OTYPER_OT_2                     ((uint32_t)0x00000004)
S#define GPIO_OTYPER_OT_3                     ((uint32_t)0x00000008)
S#define GPIO_OTYPER_OT_4                     ((uint32_t)0x00000010)
S#define GPIO_OTYPER_OT_5                     ((uint32_t)0x00000020)
S#define GPIO_OTYPER_OT_6                     ((uint32_t)0x00000040)
S#define GPIO_OTYPER_OT_7                     ((uint32_t)0x00000080)
S#define GPIO_OTYPER_OT_8                     ((uint32_t)0x00000100)
S#define GPIO_OTYPER_OT_9                     ((uint32_t)0x00000200)
S#define GPIO_OTYPER_OT_10                    ((uint32_t)0x00000400)
S#define GPIO_OTYPER_OT_11                    ((uint32_t)0x00000800)
S#define GPIO_OTYPER_OT_12                    ((uint32_t)0x00001000)
S#define GPIO_OTYPER_OT_13                    ((uint32_t)0x00002000)
S#define GPIO_OTYPER_OT_14                    ((uint32_t)0x00004000)
S#define GPIO_OTYPER_OT_15                    ((uint32_t)0x00008000)
S
S/******************  Bits definition for GPIO_OSPEEDR register  ***************/
S#define GPIO_OSPEEDER_OSPEEDR0               ((uint32_t)0x00000003)
S#define GPIO_OSPEEDER_OSPEEDR0_0             ((uint32_t)0x00000001)
S#define GPIO_OSPEEDER_OSPEEDR0_1             ((uint32_t)0x00000002)
S
S#define GPIO_OSPEEDER_OSPEEDR1               ((uint32_t)0x0000000C)
S#define GPIO_OSPEEDER_OSPEEDR1_0             ((uint32_t)0x00000004)
S#define GPIO_OSPEEDER_OSPEEDR1_1             ((uint32_t)0x00000008)
S
S#define GPIO_OSPEEDER_OSPEEDR2               ((uint32_t)0x00000030)
S#define GPIO_OSPEEDER_OSPEEDR2_0             ((uint32_t)0x00000010)
S#define GPIO_OSPEEDER_OSPEEDR2_1             ((uint32_t)0x00000020)
S
S#define GPIO_OSPEEDER_OSPEEDR3               ((uint32_t)0x000000C0)
S#define GPIO_OSPEEDER_OSPEEDR3_0             ((uint32_t)0x00000040)
S#define GPIO_OSPEEDER_OSPEEDR3_1             ((uint32_t)0x00000080)
S
S#define GPIO_OSPEEDER_OSPEEDR4               ((uint32_t)0x00000300)
S#define GPIO_OSPEEDER_OSPEEDR4_0             ((uint32_t)0x00000100)
S#define GPIO_OSPEEDER_OSPEEDR4_1             ((uint32_t)0x00000200)
S
S#define GPIO_OSPEEDER_OSPEEDR5               ((uint32_t)0x00000C00)
S#define GPIO_OSPEEDER_OSPEEDR5_0             ((uint32_t)0x00000400)
S#define GPIO_OSPEEDER_OSPEEDR5_1             ((uint32_t)0x00000800)
S
S#define GPIO_OSPEEDER_OSPEEDR6               ((uint32_t)0x00003000)
S#define GPIO_OSPEEDER_OSPEEDR6_0             ((uint32_t)0x00001000)
S#define GPIO_OSPEEDER_OSPEEDR6_1             ((uint32_t)0x00002000)
S
S#define GPIO_OSPEEDER_OSPEEDR7               ((uint32_t)0x0000C000)
S#define GPIO_OSPEEDER_OSPEEDR7_0             ((uint32_t)0x00004000)
S#define GPIO_OSPEEDER_OSPEEDR7_1             ((uint32_t)0x00008000)
S
S#define GPIO_OSPEEDER_OSPEEDR8               ((uint32_t)0x00030000)
S#define GPIO_OSPEEDER_OSPEEDR8_0             ((uint32_t)0x00010000)
S#define GPIO_OSPEEDER_OSPEEDR8_1             ((uint32_t)0x00020000)
S
S#define GPIO_OSPEEDER_OSPEEDR9               ((uint32_t)0x000C0000)
S#define GPIO_OSPEEDER_OSPEEDR9_0             ((uint32_t)0x00040000)
S#define GPIO_OSPEEDER_OSPEEDR9_1             ((uint32_t)0x00080000)
S
S#define GPIO_OSPEEDER_OSPEEDR10              ((uint32_t)0x00300000)
S#define GPIO_OSPEEDER_OSPEEDR10_0            ((uint32_t)0x00100000)
S#define GPIO_OSPEEDER_OSPEEDR10_1            ((uint32_t)0x00200000)
S
S#define GPIO_OSPEEDER_OSPEEDR11              ((uint32_t)0x00C00000)
S#define GPIO_OSPEEDER_OSPEEDR11_0            ((uint32_t)0x00400000)
S#define GPIO_OSPEEDER_OSPEEDR11_1            ((uint32_t)0x00800000)
S
S#define GPIO_OSPEEDER_OSPEEDR12              ((uint32_t)0x03000000)
S#define GPIO_OSPEEDER_OSPEEDR12_0            ((uint32_t)0x01000000)
S#define GPIO_OSPEEDER_OSPEEDR12_1            ((uint32_t)0x02000000)
S
S#define GPIO_OSPEEDER_OSPEEDR13              ((uint32_t)0x0C000000)
S#define GPIO_OSPEEDER_OSPEEDR13_0            ((uint32_t)0x04000000)
S#define GPIO_OSPEEDER_OSPEEDR13_1            ((uint32_t)0x08000000)
S
S#define GPIO_OSPEEDER_OSPEEDR14              ((uint32_t)0x30000000)
S#define GPIO_OSPEEDER_OSPEEDR14_0            ((uint32_t)0x10000000)
S#define GPIO_OSPEEDER_OSPEEDR14_1            ((uint32_t)0x20000000)
S
S#define GPIO_OSPEEDER_OSPEEDR15              ((uint32_t)0xC0000000)
S#define GPIO_OSPEEDER_OSPEEDR15_0            ((uint32_t)0x40000000)
S#define GPIO_OSPEEDER_OSPEEDR15_1            ((uint32_t)0x80000000)
S
S/******************  Bits definition for GPIO_PUPDR register  *****************/
S#define GPIO_PUPDR_PUPDR0                    ((uint32_t)0x00000003)
S#define GPIO_PUPDR_PUPDR0_0                  ((uint32_t)0x00000001)
S#define GPIO_PUPDR_PUPDR0_1                  ((uint32_t)0x00000002)
S
S#define GPIO_PUPDR_PUPDR1                    ((uint32_t)0x0000000C)
S#define GPIO_PUPDR_PUPDR1_0                  ((uint32_t)0x00000004)
S#define GPIO_PUPDR_PUPDR1_1                  ((uint32_t)0x00000008)
S
S#define GPIO_PUPDR_PUPDR2                    ((uint32_t)0x00000030)
S#define GPIO_PUPDR_PUPDR2_0                  ((uint32_t)0x00000010)
S#define GPIO_PUPDR_PUPDR2_1                  ((uint32_t)0x00000020)
S
S#define GPIO_PUPDR_PUPDR3                    ((uint32_t)0x000000C0)
S#define GPIO_PUPDR_PUPDR3_0                  ((uint32_t)0x00000040)
S#define GPIO_PUPDR_PUPDR3_1                  ((uint32_t)0x00000080)
S
S#define GPIO_PUPDR_PUPDR4                    ((uint32_t)0x00000300)
S#define GPIO_PUPDR_PUPDR4_0                  ((uint32_t)0x00000100)
S#define GPIO_PUPDR_PUPDR4_1                  ((uint32_t)0x00000200)
S
S#define GPIO_PUPDR_PUPDR5                    ((uint32_t)0x00000C00)
S#define GPIO_PUPDR_PUPDR5_0                  ((uint32_t)0x00000400)
S#define GPIO_PUPDR_PUPDR5_1                  ((uint32_t)0x00000800)
S
S#define GPIO_PUPDR_PUPDR6                    ((uint32_t)0x00003000)
S#define GPIO_PUPDR_PUPDR6_0                  ((uint32_t)0x00001000)
S#define GPIO_PUPDR_PUPDR6_1                  ((uint32_t)0x00002000)
S
S#define GPIO_PUPDR_PUPDR7                    ((uint32_t)0x0000C000)
S#define GPIO_PUPDR_PUPDR7_0                  ((uint32_t)0x00004000)
S#define GPIO_PUPDR_PUPDR7_1                  ((uint32_t)0x00008000)
S
S#define GPIO_PUPDR_PUPDR8                    ((uint32_t)0x00030000)
S#define GPIO_PUPDR_PUPDR8_0                  ((uint32_t)0x00010000)
S#define GPIO_PUPDR_PUPDR8_1                  ((uint32_t)0x00020000)
S
S#define GPIO_PUPDR_PUPDR9                    ((uint32_t)0x000C0000)
S#define GPIO_PUPDR_PUPDR9_0                  ((uint32_t)0x00040000)
S#define GPIO_PUPDR_PUPDR9_1                  ((uint32_t)0x00080000)
S
S#define GPIO_PUPDR_PUPDR10                   ((uint32_t)0x00300000)
S#define GPIO_PUPDR_PUPDR10_0                 ((uint32_t)0x00100000)
S#define GPIO_PUPDR_PUPDR10_1                 ((uint32_t)0x00200000)
S
S#define GPIO_PUPDR_PUPDR11                   ((uint32_t)0x00C00000)
S#define GPIO_PUPDR_PUPDR11_0                 ((uint32_t)0x00400000)
S#define GPIO_PUPDR_PUPDR11_1                 ((uint32_t)0x00800000)
S
S#define GPIO_PUPDR_PUPDR12                   ((uint32_t)0x03000000)
S#define GPIO_PUPDR_PUPDR12_0                 ((uint32_t)0x01000000)
S#define GPIO_PUPDR_PUPDR12_1                 ((uint32_t)0x02000000)
S
S#define GPIO_PUPDR_PUPDR13                   ((uint32_t)0x0C000000)
S#define GPIO_PUPDR_PUPDR13_0                 ((uint32_t)0x04000000)
S#define GPIO_PUPDR_PUPDR13_1                 ((uint32_t)0x08000000)
S
S#define GPIO_PUPDR_PUPDR14                   ((uint32_t)0x30000000)
S#define GPIO_PUPDR_PUPDR14_0                 ((uint32_t)0x10000000)
S#define GPIO_PUPDR_PUPDR14_1                 ((uint32_t)0x20000000)
S
S#define GPIO_PUPDR_PUPDR15                   ((uint32_t)0xC0000000)
S#define GPIO_PUPDR_PUPDR15_0                 ((uint32_t)0x40000000)
S#define GPIO_PUPDR_PUPDR15_1                 ((uint32_t)0x80000000)
S
S/******************  Bits definition for GPIO_IDR register  *******************/
S#define GPIO_IDR_IDR_0                       ((uint32_t)0x00000001)
S#define GPIO_IDR_IDR_1                       ((uint32_t)0x00000002)
S#define GPIO_IDR_IDR_2                       ((uint32_t)0x00000004)
S#define GPIO_IDR_IDR_3                       ((uint32_t)0x00000008)
S#define GPIO_IDR_IDR_4                       ((uint32_t)0x00000010)
S#define GPIO_IDR_IDR_5                       ((uint32_t)0x00000020)
S#define GPIO_IDR_IDR_6                       ((uint32_t)0x00000040)
S#define GPIO_IDR_IDR_7                       ((uint32_t)0x00000080)
S#define GPIO_IDR_IDR_8                       ((uint32_t)0x00000100)
S#define GPIO_IDR_IDR_9                       ((uint32_t)0x00000200)
S#define GPIO_IDR_IDR_10                      ((uint32_t)0x00000400)
S#define GPIO_IDR_IDR_11                      ((uint32_t)0x00000800)
S#define GPIO_IDR_IDR_12                      ((uint32_t)0x00001000)
S#define GPIO_IDR_IDR_13                      ((uint32_t)0x00002000)
S#define GPIO_IDR_IDR_14                      ((uint32_t)0x00004000)
S#define GPIO_IDR_IDR_15                      ((uint32_t)0x00008000)
S/* Old GPIO_IDR register bits definition, maintained for legacy purpose */
S#define GPIO_OTYPER_IDR_0                    GPIO_IDR_IDR_0
S#define GPIO_OTYPER_IDR_1                    GPIO_IDR_IDR_1
S#define GPIO_OTYPER_IDR_2                    GPIO_IDR_IDR_2
S#define GPIO_OTYPER_IDR_3                    GPIO_IDR_IDR_3
S#define GPIO_OTYPER_IDR_4                    GPIO_IDR_IDR_4
S#define GPIO_OTYPER_IDR_5                    GPIO_IDR_IDR_5
S#define GPIO_OTYPER_IDR_6                    GPIO_IDR_IDR_6
S#define GPIO_OTYPER_IDR_7                    GPIO_IDR_IDR_7
S#define GPIO_OTYPER_IDR_8                    GPIO_IDR_IDR_8
S#define GPIO_OTYPER_IDR_9                    GPIO_IDR_IDR_9
S#define GPIO_OTYPER_IDR_10                   GPIO_IDR_IDR_10
S#define GPIO_OTYPER_IDR_11                   GPIO_IDR_IDR_11
S#define GPIO_OTYPER_IDR_12                   GPIO_IDR_IDR_12
S#define GPIO_OTYPER_IDR_13                   GPIO_IDR_IDR_13
S#define GPIO_OTYPER_IDR_14                   GPIO_IDR_IDR_14
S#define GPIO_OTYPER_IDR_15                   GPIO_IDR_IDR_15
S
S/******************  Bits definition for GPIO_ODR register  *******************/
S#define GPIO_ODR_ODR_0                       ((uint32_t)0x00000001)
S#define GPIO_ODR_ODR_1                       ((uint32_t)0x00000002)
S#define GPIO_ODR_ODR_2                       ((uint32_t)0x00000004)
S#define GPIO_ODR_ODR_3                       ((uint32_t)0x00000008)
S#define GPIO_ODR_ODR_4                       ((uint32_t)0x00000010)
S#define GPIO_ODR_ODR_5                       ((uint32_t)0x00000020)
S#define GPIO_ODR_ODR_6                       ((uint32_t)0x00000040)
S#define GPIO_ODR_ODR_7                       ((uint32_t)0x00000080)
S#define GPIO_ODR_ODR_8                       ((uint32_t)0x00000100)
S#define GPIO_ODR_ODR_9                       ((uint32_t)0x00000200)
S#define GPIO_ODR_ODR_10                      ((uint32_t)0x00000400)
S#define GPIO_ODR_ODR_11                      ((uint32_t)0x00000800)
S#define GPIO_ODR_ODR_12                      ((uint32_t)0x00001000)
S#define GPIO_ODR_ODR_13                      ((uint32_t)0x00002000)
S#define GPIO_ODR_ODR_14                      ((uint32_t)0x00004000)
S#define GPIO_ODR_ODR_15                      ((uint32_t)0x00008000)
S/* Old GPIO_ODR register bits definition, maintained for legacy purpose */
S#define GPIO_OTYPER_ODR_0                    GPIO_ODR_ODR_0
S#define GPIO_OTYPER_ODR_1                    GPIO_ODR_ODR_1
S#define GPIO_OTYPER_ODR_2                    GPIO_ODR_ODR_2
S#define GPIO_OTYPER_ODR_3                    GPIO_ODR_ODR_3
S#define GPIO_OTYPER_ODR_4                    GPIO_ODR_ODR_4
S#define GPIO_OTYPER_ODR_5                    GPIO_ODR_ODR_5
S#define GPIO_OTYPER_ODR_6                    GPIO_ODR_ODR_6
S#define GPIO_OTYPER_ODR_7                    GPIO_ODR_ODR_7
S#define GPIO_OTYPER_ODR_8                    GPIO_ODR_ODR_8
S#define GPIO_OTYPER_ODR_9                    GPIO_ODR_ODR_9
S#define GPIO_OTYPER_ODR_10                   GPIO_ODR_ODR_10
S#define GPIO_OTYPER_ODR_11                   GPIO_ODR_ODR_11
S#define GPIO_OTYPER_ODR_12                   GPIO_ODR_ODR_12
S#define GPIO_OTYPER_ODR_13                   GPIO_ODR_ODR_13
S#define GPIO_OTYPER_ODR_14                   GPIO_ODR_ODR_14
S#define GPIO_OTYPER_ODR_15                   GPIO_ODR_ODR_15
S
S/******************  Bits definition for GPIO_BSRR register  ******************/
S#define GPIO_BSRR_BS_0                       ((uint32_t)0x00000001)
S#define GPIO_BSRR_BS_1                       ((uint32_t)0x00000002)
S#define GPIO_BSRR_BS_2                       ((uint32_t)0x00000004)
S#define GPIO_BSRR_BS_3                       ((uint32_t)0x00000008)
S#define GPIO_BSRR_BS_4                       ((uint32_t)0x00000010)
S#define GPIO_BSRR_BS_5                       ((uint32_t)0x00000020)
S#define GPIO_BSRR_BS_6                       ((uint32_t)0x00000040)
S#define GPIO_BSRR_BS_7                       ((uint32_t)0x00000080)
S#define GPIO_BSRR_BS_8                       ((uint32_t)0x00000100)
S#define GPIO_BSRR_BS_9                       ((uint32_t)0x00000200)
S#define GPIO_BSRR_BS_10                      ((uint32_t)0x00000400)
S#define GPIO_BSRR_BS_11                      ((uint32_t)0x00000800)
S#define GPIO_BSRR_BS_12                      ((uint32_t)0x00001000)
S#define GPIO_BSRR_BS_13                      ((uint32_t)0x00002000)
S#define GPIO_BSRR_BS_14                      ((uint32_t)0x00004000)
S#define GPIO_BSRR_BS_15                      ((uint32_t)0x00008000)
S#define GPIO_BSRR_BR_0                       ((uint32_t)0x00010000)
S#define GPIO_BSRR_BR_1                       ((uint32_t)0x00020000)
S#define GPIO_BSRR_BR_2                       ((uint32_t)0x00040000)
S#define GPIO_BSRR_BR_3                       ((uint32_t)0x00080000)
S#define GPIO_BSRR_BR_4                       ((uint32_t)0x00100000)
S#define GPIO_BSRR_BR_5                       ((uint32_t)0x00200000)
S#define GPIO_BSRR_BR_6                       ((uint32_t)0x00400000)
S#define GPIO_BSRR_BR_7                       ((uint32_t)0x00800000)
S#define GPIO_BSRR_BR_8                       ((uint32_t)0x01000000)
S#define GPIO_BSRR_BR_9                       ((uint32_t)0x02000000)
S#define GPIO_BSRR_BR_10                      ((uint32_t)0x04000000)
S#define GPIO_BSRR_BR_11                      ((uint32_t)0x08000000)
S#define GPIO_BSRR_BR_12                      ((uint32_t)0x10000000)
S#define GPIO_BSRR_BR_13                      ((uint32_t)0x20000000)
S#define GPIO_BSRR_BR_14                      ((uint32_t)0x40000000)
S#define GPIO_BSRR_BR_15                      ((uint32_t)0x80000000)
S
S/******************************************************************************/
S/*                                                                            */
S/*                                    HASH                                    */
S/*                                                                            */
S/******************************************************************************/
S/******************  Bits definition for HASH_CR register  ********************/
S#define HASH_CR_INIT                         ((uint32_t)0x00000004)
S#define HASH_CR_DMAE                         ((uint32_t)0x00000008)
S#define HASH_CR_DATATYPE                     ((uint32_t)0x00000030)
S#define HASH_CR_DATATYPE_0                   ((uint32_t)0x00000010)
S#define HASH_CR_DATATYPE_1                   ((uint32_t)0x00000020)
S#define HASH_CR_MODE                         ((uint32_t)0x00000040)
S#define HASH_CR_ALGO                         ((uint32_t)0x00040080)
S#define HASH_CR_ALGO_0                       ((uint32_t)0x00000080)
S#define HASH_CR_ALGO_1                       ((uint32_t)0x00040000)
S#define HASH_CR_NBW                          ((uint32_t)0x00000F00)
S#define HASH_CR_NBW_0                        ((uint32_t)0x00000100)
S#define HASH_CR_NBW_1                        ((uint32_t)0x00000200)
S#define HASH_CR_NBW_2                        ((uint32_t)0x00000400)
S#define HASH_CR_NBW_3                        ((uint32_t)0x00000800)
S#define HASH_CR_DINNE                        ((uint32_t)0x00001000)
S#define HASH_CR_MDMAT                        ((uint32_t)0x00002000)
S#define HASH_CR_LKEY                         ((uint32_t)0x00010000)
S
S/******************  Bits definition for HASH_STR register  *******************/
S#define HASH_STR_NBW                         ((uint32_t)0x0000001F)
S#define HASH_STR_NBW_0                       ((uint32_t)0x00000001)
S#define HASH_STR_NBW_1                       ((uint32_t)0x00000002)
S#define HASH_STR_NBW_2                       ((uint32_t)0x00000004)
S#define HASH_STR_NBW_3                       ((uint32_t)0x00000008)
S#define HASH_STR_NBW_4                       ((uint32_t)0x00000010)
S#define HASH_STR_DCAL                        ((uint32_t)0x00000100)
S
S/******************  Bits definition for HASH_IMR register  *******************/
S#define HASH_IMR_DINIM                       ((uint32_t)0x00000001)
S#define HASH_IMR_DCIM                        ((uint32_t)0x00000002)
S
S/******************  Bits definition for HASH_SR register  ********************/
S#define HASH_SR_DINIS                        ((uint32_t)0x00000001)
S#define HASH_SR_DCIS                         ((uint32_t)0x00000002)
S#define HASH_SR_DMAS                         ((uint32_t)0x00000004)
S#define HASH_SR_BUSY                         ((uint32_t)0x00000008)
S
S/******************************************************************************/
S/*                                                                            */
S/*                      Inter-integrated Circuit Interface                    */
S/*                                                                            */
S/******************************************************************************/
S/*******************  Bit definition for I2C_CR1 register  ********************/
S#define  I2C_CR1_PE                          ((uint16_t)0x0001)            /*!<Peripheral Enable                             */
S#define  I2C_CR1_SMBUS                       ((uint16_t)0x0002)            /*!<SMBus Mode                                    */
S#define  I2C_CR1_SMBTYPE                     ((uint16_t)0x0008)            /*!<SMBus Type                                    */
S#define  I2C_CR1_ENARP                       ((uint16_t)0x0010)            /*!<ARP Enable                                    */
S#define  I2C_CR1_ENPEC                       ((uint16_t)0x0020)            /*!<PEC Enable                                    */
S#define  I2C_CR1_ENGC                        ((uint16_t)0x0040)            /*!<General Call Enable                           */
S#define  I2C_CR1_NOSTRETCH                   ((uint16_t)0x0080)            /*!<Clock Stretching Disable (Slave mode)         */
S#define  I2C_CR1_START                       ((uint16_t)0x0100)            /*!<Start Generation                              */
S#define  I2C_CR1_STOP                        ((uint16_t)0x0200)            /*!<Stop Generation                               */
S#define  I2C_CR1_ACK                         ((uint16_t)0x0400)            /*!<Acknowledge Enable                            */
S#define  I2C_CR1_POS                         ((uint16_t)0x0800)            /*!<Acknowledge/PEC Position (for data reception) */
S#define  I2C_CR1_PEC                         ((uint16_t)0x1000)            /*!<Packet Error Checking                         */
S#define  I2C_CR1_ALERT                       ((uint16_t)0x2000)            /*!<SMBus Alert                                   */
S#define  I2C_CR1_SWRST                       ((uint16_t)0x8000)            /*!<Software Reset                                */
S
S/*******************  Bit definition for I2C_CR2 register  ********************/
S#define  I2C_CR2_FREQ                        ((uint16_t)0x003F)            /*!<FREQ[5:0] bits (Peripheral Clock Frequency)   */
S#define  I2C_CR2_FREQ_0                      ((uint16_t)0x0001)            /*!<Bit 0 */
S#define  I2C_CR2_FREQ_1                      ((uint16_t)0x0002)            /*!<Bit 1 */
S#define  I2C_CR2_FREQ_2                      ((uint16_t)0x0004)            /*!<Bit 2 */
S#define  I2C_CR2_FREQ_3                      ((uint16_t)0x0008)            /*!<Bit 3 */
S#define  I2C_CR2_FREQ_4                      ((uint16_t)0x0010)            /*!<Bit 4 */
S#define  I2C_CR2_FREQ_5                      ((uint16_t)0x0020)            /*!<Bit 5 */
S
S#define  I2C_CR2_ITERREN                     ((uint16_t)0x0100)            /*!<Error Interrupt Enable  */
S#define  I2C_CR2_ITEVTEN                     ((uint16_t)0x0200)            /*!<Event Interrupt Enable  */
S#define  I2C_CR2_ITBUFEN                     ((uint16_t)0x0400)            /*!<Buffer Interrupt Enable */
S#define  I2C_CR2_DMAEN                       ((uint16_t)0x0800)            /*!<DMA Requests Enable     */
S#define  I2C_CR2_LAST                        ((uint16_t)0x1000)            /*!<DMA Last Transfer       */
S
S/*******************  Bit definition for I2C_OAR1 register  *******************/
S#define  I2C_OAR1_ADD1_7                     ((uint16_t)0x00FE)            /*!<Interface Address */
S#define  I2C_OAR1_ADD8_9                     ((uint16_t)0x0300)            /*!<Interface Address */
S
S#define  I2C_OAR1_ADD0                       ((uint16_t)0x0001)            /*!<Bit 0 */
S#define  I2C_OAR1_ADD1                       ((uint16_t)0x0002)            /*!<Bit 1 */
S#define  I2C_OAR1_ADD2                       ((uint16_t)0x0004)            /*!<Bit 2 */
S#define  I2C_OAR1_ADD3                       ((uint16_t)0x0008)            /*!<Bit 3 */
S#define  I2C_OAR1_ADD4                       ((uint16_t)0x0010)            /*!<Bit 4 */
S#define  I2C_OAR1_ADD5                       ((uint16_t)0x0020)            /*!<Bit 5 */
S#define  I2C_OAR1_ADD6                       ((uint16_t)0x0040)            /*!<Bit 6 */
S#define  I2C_OAR1_ADD7                       ((uint16_t)0x0080)            /*!<Bit 7 */
S#define  I2C_OAR1_ADD8                       ((uint16_t)0x0100)            /*!<Bit 8 */
S#define  I2C_OAR1_ADD9                       ((uint16_t)0x0200)            /*!<Bit 9 */
S
S#define  I2C_OAR1_ADDMODE                    ((uint16_t)0x8000)            /*!<Addressing Mode (Slave mode) */
S
S/*******************  Bit definition for I2C_OAR2 register  *******************/
S#define  I2C_OAR2_ENDUAL                     ((uint8_t)0x01)               /*!<Dual addressing mode enable */
S#define  I2C_OAR2_ADD2                       ((uint8_t)0xFE)               /*!<Interface address           */
S
S/********************  Bit definition for I2C_DR register  ********************/
S#define  I2C_DR_DR                           ((uint8_t)0xFF)               /*!<8-bit Data Register         */
S
S/*******************  Bit definition for I2C_SR1 register  ********************/
S#define  I2C_SR1_SB                          ((uint16_t)0x0001)            /*!<Start Bit (Master mode)                         */
S#define  I2C_SR1_ADDR                        ((uint16_t)0x0002)            /*!<Address sent (master mode)/matched (slave mode) */
S#define  I2C_SR1_BTF                         ((uint16_t)0x0004)            /*!<Byte Transfer Finished                          */
S#define  I2C_SR1_ADD10                       ((uint16_t)0x0008)            /*!<10-bit header sent (Master mode)                */
S#define  I2C_SR1_STOPF                       ((uint16_t)0x0010)            /*!<Stop detection (Slave mode)                     */
S#define  I2C_SR1_RXNE                        ((uint16_t)0x0040)            /*!<Data Register not Empty (receivers)             */
S#define  I2C_SR1_TXE                         ((uint16_t)0x0080)            /*!<Data Register Empty (transmitters)              */
S#define  I2C_SR1_BERR                        ((uint16_t)0x0100)            /*!<Bus Error                                       */
S#define  I2C_SR1_ARLO                        ((uint16_t)0x0200)            /*!<Arbitration Lost (master mode)                  */
S#define  I2C_SR1_AF                          ((uint16_t)0x0400)            /*!<Acknowledge Failure                             */
S#define  I2C_SR1_OVR                         ((uint16_t)0x0800)            /*!<Overrun/Underrun                                */
S#define  I2C_SR1_PECERR                      ((uint16_t)0x1000)            /*!<PEC Error in reception                          */
S#define  I2C_SR1_TIMEOUT                     ((uint16_t)0x4000)            /*!<Timeout or Tlow Error                           */
S#define  I2C_SR1_SMBALERT                    ((uint16_t)0x8000)            /*!<SMBus Alert                                     */
S
S/*******************  Bit definition for I2C_SR2 register  ********************/
S#define  I2C_SR2_MSL                         ((uint16_t)0x0001)            /*!<Master/Slave                              */
S#define  I2C_SR2_BUSY                        ((uint16_t)0x0002)            /*!<Bus Busy                                  */
S#define  I2C_SR2_TRA                         ((uint16_t)0x0004)            /*!<Transmitter/Receiver                      */
S#define  I2C_SR2_GENCALL                     ((uint16_t)0x0010)            /*!<General Call Address (Slave mode)         */
S#define  I2C_SR2_SMBDEFAULT                  ((uint16_t)0x0020)            /*!<SMBus Device Default Address (Slave mode) */
S#define  I2C_SR2_SMBHOST                     ((uint16_t)0x0040)            /*!<SMBus Host Header (Slave mode)            */
S#define  I2C_SR2_DUALF                       ((uint16_t)0x0080)            /*!<Dual Flag (Slave mode)                    */
S#define  I2C_SR2_PEC                         ((uint16_t)0xFF00)            /*!<Packet Error Checking Register            */
S
S/*******************  Bit definition for I2C_CCR register  ********************/
S#define  I2C_CCR_CCR                         ((uint16_t)0x0FFF)            /*!<Clock Control Register in Fast/Standard mode (Master mode) */
S#define  I2C_CCR_DUTY                        ((uint16_t)0x4000)            /*!<Fast Mode Duty Cycle                                       */
S#define  I2C_CCR_FS                          ((uint16_t)0x8000)            /*!<I2C Master Mode Selection                                  */
S
S/******************  Bit definition for I2C_TRISE register  *******************/
S#define  I2C_TRISE_TRISE                     ((uint8_t)0x3F)               /*!<Maximum Rise Time in Fast/Standard mode (Master mode) */
S
S/******************  Bit definition for I2C_FLTR register  *******************/
S#define  I2C_FLTR_DNF                     ((uint8_t)0x0F)                  /*!<Digital Noise Filter */
S#define  I2C_FLTR_ANOFF                   ((uint8_t)0x10)                  /*!<Analog Noise Filter OFF */
S
S/******************************************************************************/
S/*                                                                            */
S/*                           Independent WATCHDOG                             */
S/*                                                                            */
S/******************************************************************************/
S/*******************  Bit definition for IWDG_KR register  ********************/
S#define  IWDG_KR_KEY                         ((uint16_t)0xFFFF)            /*!<Key value (write only, read 0000h)  */
S
S/*******************  Bit definition for IWDG_PR register  ********************/
S#define  IWDG_PR_PR                          ((uint8_t)0x07)               /*!<PR[2:0] (Prescaler divider)         */
S#define  IWDG_PR_PR_0                        ((uint8_t)0x01)               /*!<Bit 0 */
S#define  IWDG_PR_PR_1                        ((uint8_t)0x02)               /*!<Bit 1 */
S#define  IWDG_PR_PR_2                        ((uint8_t)0x04)               /*!<Bit 2 */
S
S/*******************  Bit definition for IWDG_RLR register  *******************/
S#define  IWDG_RLR_RL                         ((uint16_t)0x0FFF)            /*!<Watchdog counter reload value        */
S
S/*******************  Bit definition for IWDG_SR register  ********************/
S#define  IWDG_SR_PVU                         ((uint8_t)0x01)               /*!<Watchdog prescaler value update      */
S#define  IWDG_SR_RVU                         ((uint8_t)0x02)               /*!<Watchdog counter reload value update */
S
S/******************************************************************************/
S/*                                                                            */
S/*                      LCD-TFT Display Controller (LTDC)                     */
S/*                                                                            */
S/******************************************************************************/
S
S/********************  Bit definition for LTDC_SSCR register  *****************/
S
S#define LTDC_SSCR_VSH                       ((uint32_t)0x000007FF)              /*!< Vertical Synchronization Height */
S#define LTDC_SSCR_HSW                       ((uint32_t)0x0FFF0000)              /*!< Horizontal Synchronization Width */
S
S/********************  Bit definition for LTDC_BPCR register  *****************/
S
S#define LTDC_BPCR_AVBP                      ((uint32_t)0x000007FF)              /*!< Accumulated Vertical Back Porch */
S#define LTDC_BPCR_AHBP                      ((uint32_t)0x0FFF0000)              /*!< Accumulated Horizontal Back Porch */
S
S/********************  Bit definition for LTDC_AWCR register  *****************/
S
S#define LTDC_AWCR_AAH                       ((uint32_t)0x000007FF)              /*!< Accumulated Active heigh */
S#define LTDC_AWCR_AAW                       ((uint32_t)0x0FFF0000)              /*!< Accumulated Active Width */
S
S/********************  Bit definition for LTDC_TWCR register  *****************/
S
S#define LTDC_TWCR_TOTALH                    ((uint32_t)0x000007FF)              /*!< Total Heigh */
S#define LTDC_TWCR_TOTALW                    ((uint32_t)0x0FFF0000)              /*!< Total Width */
S
S/********************  Bit definition for LTDC_GCR register  ******************/
S
S#define LTDC_GCR_LTDCEN                     ((uint32_t)0x00000001)              /*!< LCD-TFT controller enable bit */
S#define LTDC_GCR_DBW                        ((uint32_t)0x00000070)              /*!< Dither Blue Width */
S#define LTDC_GCR_DGW                        ((uint32_t)0x00000700)              /*!< Dither Green Width */
S#define LTDC_GCR_DRW                        ((uint32_t)0x00007000)              /*!< Dither Red Width */
S#define LTDC_GCR_DTEN                       ((uint32_t)0x00010000)              /*!< Dither Enable */
S#define LTDC_GCR_PCPOL                      ((uint32_t)0x10000000)              /*!< Pixel Clock Polarity */
S#define LTDC_GCR_DEPOL                      ((uint32_t)0x20000000)              /*!< Data Enable Polarity */
S#define LTDC_GCR_VSPOL                      ((uint32_t)0x40000000)              /*!< Vertical Synchronization Polarity */
S#define LTDC_GCR_HSPOL                      ((uint32_t)0x80000000)              /*!< Horizontal Synchronization Polarity */
S
S/********************  Bit definition for LTDC_SRCR register  *****************/
S
S#define LTDC_SRCR_IMR                      ((uint32_t)0x00000001)               /*!< Immediate Reload */
S#define LTDC_SRCR_VBR                      ((uint32_t)0x00000002)               /*!< Vertical Blanking Reload */
S
S/********************  Bit definition for LTDC_BCCR register  *****************/
S
S#define LTDC_BCCR_BCBLUE                    ((uint32_t)0x000000FF)              /*!< Background Blue value */
S#define LTDC_BCCR_BCGREEN                   ((uint32_t)0x0000FF00)              /*!< Background Green value */
S#define LTDC_BCCR_BCRED                     ((uint32_t)0x00FF0000)              /*!< Background Red value */
S
S/********************  Bit definition for LTDC_IER register  ******************/
S
S#define LTDC_IER_LIE                        ((uint32_t)0x00000001)              /*!< Line Interrupt Enable */
S#define LTDC_IER_FUIE                       ((uint32_t)0x00000002)              /*!< FIFO Underrun Interrupt Enable */
S#define LTDC_IER_TERRIE                     ((uint32_t)0x00000004)              /*!< Transfer Error Interrupt Enable */
S#define LTDC_IER_RRIE                       ((uint32_t)0x00000008)              /*!< Register Reload interrupt enable */
S
S/********************  Bit definition for LTDC_ISR register  ******************/
S
S#define LTDC_ISR_LIF                        ((uint32_t)0x00000001)              /*!< Line Interrupt Flag */
S#define LTDC_ISR_FUIF                       ((uint32_t)0x00000002)              /*!< FIFO Underrun Interrupt Flag */
S#define LTDC_ISR_TERRIF                     ((uint32_t)0x00000004)              /*!< Transfer Error Interrupt Flag */
S#define LTDC_ISR_RRIF                       ((uint32_t)0x00000008)              /*!< Register Reload interrupt Flag */
S
S/********************  Bit definition for LTDC_ICR register  ******************/
S
S#define LTDC_ICR_CLIF                       ((uint32_t)0x00000001)              /*!< Clears the Line Interrupt Flag */
S#define LTDC_ICR_CFUIF                      ((uint32_t)0x00000002)              /*!< Clears the FIFO Underrun Interrupt Flag */
S#define LTDC_ICR_CTERRIF                    ((uint32_t)0x00000004)              /*!< Clears the Transfer Error Interrupt Flag */
S#define LTDC_ICR_CRRIF                      ((uint32_t)0x00000008)              /*!< Clears Register Reload interrupt Flag */
S
S/********************  Bit definition for LTDC_LIPCR register  ****************/
S
S#define LTDC_LIPCR_LIPOS                    ((uint32_t)0x000007FF)              /*!< Line Interrupt Position */
S
S/********************  Bit definition for LTDC_CPSR register  *****************/
S
S#define LTDC_CPSR_CYPOS                     ((uint32_t)0x0000FFFF)              /*!< Current Y Position */
S#define LTDC_CPSR_CXPOS                     ((uint32_t)0xFFFF0000)              /*!< Current X Position */
S
S/********************  Bit definition for LTDC_CDSR register  *****************/
S
S#define LTDC_CDSR_VDES                      ((uint32_t)0x00000001)              /*!< Vertical Data Enable Status */
S#define LTDC_CDSR_HDES                      ((uint32_t)0x00000002)              /*!< Horizontal Data Enable Status */
S#define LTDC_CDSR_VSYNCS                    ((uint32_t)0x00000004)              /*!< Vertical Synchronization Status */
S#define LTDC_CDSR_HSYNCS                    ((uint32_t)0x00000008)              /*!< Horizontal Synchronization Status */
S
S/********************  Bit definition for LTDC_LxCR register  *****************/
S
S#define LTDC_LxCR_LEN                       ((uint32_t)0x00000001)              /*!< Layer Enable */
S#define LTDC_LxCR_COLKEN                    ((uint32_t)0x00000002)              /*!< Color Keying Enable */
S#define LTDC_LxCR_CLUTEN                    ((uint32_t)0x00000010)              /*!< Color Lockup Table Enable */
S
S/********************  Bit definition for LTDC_LxWHPCR register  **************/
S
S#define LTDC_LxWHPCR_WHSTPOS                ((uint32_t)0x00000FFF)              /*!< Window Horizontal Start Position */
S#define LTDC_LxWHPCR_WHSPPOS                ((uint32_t)0xFFFF0000)              /*!< Window Horizontal Stop Position */
S
S/********************  Bit definition for LTDC_LxWVPCR register  **************/
S
S#define LTDC_LxWVPCR_WVSTPOS                ((uint32_t)0x00000FFF)              /*!< Window Vertical Start Position */
S#define LTDC_LxWVPCR_WVSPPOS                ((uint32_t)0xFFFF0000)              /*!< Window Vertical Stop Position */
S
S/********************  Bit definition for LTDC_LxCKCR register  ***************/
S
S#define LTDC_LxCKCR_CKBLUE                  ((uint32_t)0x000000FF)              /*!< Color Key Blue value */
S#define LTDC_LxCKCR_CKGREEN                 ((uint32_t)0x0000FF00)              /*!< Color Key Green value */
S#define LTDC_LxCKCR_CKRED                   ((uint32_t)0x00FF0000)              /*!< Color Key Red value */
S
S/********************  Bit definition for LTDC_LxPFCR register  ***************/
S
S#define LTDC_LxPFCR_PF                      ((uint32_t)0x00000007)              /*!< Pixel Format */
S
S/********************  Bit definition for LTDC_LxCACR register  ***************/
S
S#define LTDC_LxCACR_CONSTA                  ((uint32_t)0x000000FF)              /*!< Constant Alpha */
S
S/********************  Bit definition for LTDC_LxDCCR register  ***************/
S
S#define LTDC_LxDCCR_DCBLUE                  ((uint32_t)0x000000FF)              /*!< Default Color Blue */
S#define LTDC_LxDCCR_DCGREEN                 ((uint32_t)0x0000FF00)              /*!< Default Color Green */
S#define LTDC_LxDCCR_DCRED                   ((uint32_t)0x00FF0000)              /*!< Default Color Red */
S#define LTDC_LxDCCR_DCALPHA                 ((uint32_t)0xFF000000)              /*!< Default Color Alpha */
S                                
S/********************  Bit definition for LTDC_LxBFCR register  ***************/
S
S#define LTDC_LxBFCR_BF2                     ((uint32_t)0x00000007)              /*!< Blending Factor 2 */
S#define LTDC_LxBFCR_BF1                     ((uint32_t)0x00000700)              /*!< Blending Factor 1 */
S
S/********************  Bit definition for LTDC_LxCFBAR register  **************/
S
S#define LTDC_LxCFBAR_CFBADD                 ((uint32_t)0xFFFFFFFF)              /*!< Color Frame Buffer Start Address */
S
S/********************  Bit definition for LTDC_LxCFBLR register  **************/
S
S#define LTDC_LxCFBLR_CFBLL                  ((uint32_t)0x00001FFF)              /*!< Color Frame Buffer Line Length */
S#define LTDC_LxCFBLR_CFBP                   ((uint32_t)0x1FFF0000)              /*!< Color Frame Buffer Pitch in bytes */
S
S/********************  Bit definition for LTDC_LxCFBLNR register  *************/
S
S#define LTDC_LxCFBLNR_CFBLNBR               ((uint32_t)0x000007FF)              /*!< Frame Buffer Line Number */
S
S/********************  Bit definition for LTDC_LxCLUTWR register  *************/
S
S#define LTDC_LxCLUTWR_BLUE                  ((uint32_t)0x000000FF)              /*!< Blue value */
S#define LTDC_LxCLUTWR_GREEN                 ((uint32_t)0x0000FF00)              /*!< Green value */
S#define LTDC_LxCLUTWR_RED                   ((uint32_t)0x00FF0000)              /*!< Red value */
S#define LTDC_LxCLUTWR_CLUTADD               ((uint32_t)0xFF000000)              /*!< CLUT address */
S
S/******************************************************************************/
S/*                                                                            */
S/*                             Power Control                                  */
S/*                                                                            */
S/******************************************************************************/
S/********************  Bit definition for PWR_CR register  ********************/
S#define  PWR_CR_LPDS                         ((uint32_t)0x00000001)     /*!< Low-Power Deepsleep                 */
S#define  PWR_CR_PDDS                         ((uint32_t)0x00000002)     /*!< Power Down Deepsleep                */
S#define  PWR_CR_CWUF                         ((uint32_t)0x00000004)     /*!< Clear Wakeup Flag                   */
S#define  PWR_CR_CSBF                         ((uint32_t)0x00000008)     /*!< Clear Standby Flag                  */
S#define  PWR_CR_PVDE                         ((uint32_t)0x00000010)     /*!< Power Voltage Detector Enable       */
S
S#define  PWR_CR_PLS                          ((uint32_t)0x000000E0)     /*!< PLS[2:0] bits (PVD Level Selection) */
S#define  PWR_CR_PLS_0                        ((uint32_t)0x00000020)     /*!< Bit 0 */
S#define  PWR_CR_PLS_1                        ((uint32_t)0x00000040)     /*!< Bit 1 */
S#define  PWR_CR_PLS_2                        ((uint32_t)0x00000080)     /*!< Bit 2 */
S
S/*!< PVD level configuration */
S#define  PWR_CR_PLS_LEV0                     ((uint32_t)0x00000000)     /*!< PVD level 0 */
S#define  PWR_CR_PLS_LEV1                     ((uint32_t)0x00000020)     /*!< PVD level 1 */
S#define  PWR_CR_PLS_LEV2                     ((uint32_t)0x00000040)     /*!< PVD level 2 */
S#define  PWR_CR_PLS_LEV3                     ((uint32_t)0x00000060)     /*!< PVD level 3 */
S#define  PWR_CR_PLS_LEV4                     ((uint32_t)0x00000080)     /*!< PVD level 4 */
S#define  PWR_CR_PLS_LEV5                     ((uint32_t)0x000000A0)     /*!< PVD level 5 */
S#define  PWR_CR_PLS_LEV6                     ((uint32_t)0x000000C0)     /*!< PVD level 6 */
S#define  PWR_CR_PLS_LEV7                     ((uint32_t)0x000000E0)     /*!< PVD level 7 */
S
S#define  PWR_CR_DBP                          ((uint32_t)0x00000100)     /*!< Disable Backup Domain write protection                     */
S#define  PWR_CR_FPDS                         ((uint32_t)0x00000200)     /*!< Flash power down in Stop mode                              */
S#define  PWR_CR_LPUDS                        ((uint32_t)0x00000400)     /*!< Low-Power Regulator in Stop under-drive mode               */
S#define  PWR_CR_MRUDS                        ((uint32_t)0x00000800)     /*!< Main regulator in Stop under-drive mode                    */
S
S#define  PWR_CR_ADCDC1                       ((uint32_t)0x00002000)     /*!< Refer to AN4073 on how to use this bit */ 
S
S#define  PWR_CR_VOS                          ((uint32_t)0x0000C000)     /*!< VOS[1:0] bits (Regulator voltage scaling output selection) */
S#define  PWR_CR_VOS_0                        ((uint32_t)0x00004000)     /*!< Bit 0 */
S#define  PWR_CR_VOS_1                        ((uint32_t)0x00008000)     /*!< Bit 1 */
S
S#define  PWR_CR_ODEN                         ((uint32_t)0x00010000)     /*!< Over Drive enable                   */
S#define  PWR_CR_ODSWEN                       ((uint32_t)0x00020000)     /*!< Over Drive switch enabled           */
S#define  PWR_CR_UDEN                         ((uint32_t)0x000C0000)     /*!< Under Drive enable in stop mode     */
S#define  PWR_CR_UDEN_0                       ((uint32_t)0x00040000)     /*!< Bit 0                               */
S#define  PWR_CR_UDEN_1                       ((uint32_t)0x00080000)     /*!< Bit 1                               */
S
S/* Legacy define */
S#define  PWR_CR_PMODE                        PWR_CR_VOS
S
S/*******************  Bit definition for PWR_CSR register  ********************/
S#define  PWR_CSR_WUF                         ((uint32_t)0x00000001)     /*!< Wakeup Flag                                      */
S#define  PWR_CSR_SBF                         ((uint32_t)0x00000002)     /*!< Standby Flag                                     */
S#define  PWR_CSR_PVDO                        ((uint32_t)0x00000004)     /*!< PVD Output                                       */
S#define  PWR_CSR_BRR                         ((uint32_t)0x00000008)     /*!< Backup regulator ready                           */
S#define  PWR_CSR_EWUP                        ((uint32_t)0x00000100)     /*!< Enable WKUP pin                                  */
S#define  PWR_CSR_BRE                         ((uint32_t)0x00000200)     /*!< Backup regulator enable                          */
S#define  PWR_CSR_VOSRDY                      ((uint32_t)0x00004000)     /*!< Regulator voltage scaling output selection ready */
S#define  PWR_CSR_ODRDY                       ((uint32_t)0x00010000)     /*!< Over Drive generator ready                       */
S#define  PWR_CSR_ODSWRDY                     ((uint32_t)0x00020000)     /*!< Over Drive Switch ready                          */
S#define  PWR_CSR_UDSWRDY                     ((uint32_t)0x000C0000)     /*!< Under Drive ready                                */
S
S/* Legacy define */
S#define  PWR_CSR_REGRDY                      PWR_CSR_VOSRDY
S
S/******************************************************************************/
S/*                                                                            */
S/*                         Reset and Clock Control                            */
S/*                                                                            */
S/******************************************************************************/
S/********************  Bit definition for RCC_CR register  ********************/
S#define  RCC_CR_HSION                        ((uint32_t)0x00000001)
S#define  RCC_CR_HSIRDY                       ((uint32_t)0x00000002)
S
S#define  RCC_CR_HSITRIM                      ((uint32_t)0x000000F8)
S#define  RCC_CR_HSITRIM_0                    ((uint32_t)0x00000008)/*!<Bit 0 */
S#define  RCC_CR_HSITRIM_1                    ((uint32_t)0x00000010)/*!<Bit 1 */
S#define  RCC_CR_HSITRIM_2                    ((uint32_t)0x00000020)/*!<Bit 2 */
S#define  RCC_CR_HSITRIM_3                    ((uint32_t)0x00000040)/*!<Bit 3 */
S#define  RCC_CR_HSITRIM_4                    ((uint32_t)0x00000080)/*!<Bit 4 */
S
S#define  RCC_CR_HSICAL                       ((uint32_t)0x0000FF00)
S#define  RCC_CR_HSICAL_0                     ((uint32_t)0x00000100)/*!<Bit 0 */
S#define  RCC_CR_HSICAL_1                     ((uint32_t)0x00000200)/*!<Bit 1 */
S#define  RCC_CR_HSICAL_2                     ((uint32_t)0x00000400)/*!<Bit 2 */
S#define  RCC_CR_HSICAL_3                     ((uint32_t)0x00000800)/*!<Bit 3 */
S#define  RCC_CR_HSICAL_4                     ((uint32_t)0x00001000)/*!<Bit 4 */
S#define  RCC_CR_HSICAL_5                     ((uint32_t)0x00002000)/*!<Bit 5 */
S#define  RCC_CR_HSICAL_6                     ((uint32_t)0x00004000)/*!<Bit 6 */
S#define  RCC_CR_HSICAL_7                     ((uint32_t)0x00008000)/*!<Bit 7 */
S
S#define  RCC_CR_HSEON                        ((uint32_t)0x00010000)
S#define  RCC_CR_HSERDY                       ((uint32_t)0x00020000)
S#define  RCC_CR_HSEBYP                       ((uint32_t)0x00040000)
S#define  RCC_CR_CSSON                        ((uint32_t)0x00080000)
S#define  RCC_CR_PLLON                        ((uint32_t)0x01000000)
S#define  RCC_CR_PLLRDY                       ((uint32_t)0x02000000)
S#define  RCC_CR_PLLI2SON                     ((uint32_t)0x04000000)
S#define  RCC_CR_PLLI2SRDY                    ((uint32_t)0x08000000)
S#define  RCC_CR_PLLSAION                     ((uint32_t)0x10000000)
S#define  RCC_CR_PLLSAIRDY                    ((uint32_t)0x20000000)
S
S/********************  Bit definition for RCC_PLLCFGR register  ***************/
S#define  RCC_PLLCFGR_PLLM                    ((uint32_t)0x0000003F)
S#define  RCC_PLLCFGR_PLLM_0                  ((uint32_t)0x00000001)
S#define  RCC_PLLCFGR_PLLM_1                  ((uint32_t)0x00000002)
S#define  RCC_PLLCFGR_PLLM_2                  ((uint32_t)0x00000004)
S#define  RCC_PLLCFGR_PLLM_3                  ((uint32_t)0x00000008)
S#define  RCC_PLLCFGR_PLLM_4                  ((uint32_t)0x00000010)
S#define  RCC_PLLCFGR_PLLM_5                  ((uint32_t)0x00000020)
S
S#define  RCC_PLLCFGR_PLLN                     ((uint32_t)0x00007FC0)
S#define  RCC_PLLCFGR_PLLN_0                   ((uint32_t)0x00000040)
S#define  RCC_PLLCFGR_PLLN_1                   ((uint32_t)0x00000080)
S#define  RCC_PLLCFGR_PLLN_2                   ((uint32_t)0x00000100)
S#define  RCC_PLLCFGR_PLLN_3                   ((uint32_t)0x00000200)
S#define  RCC_PLLCFGR_PLLN_4                   ((uint32_t)0x00000400)
S#define  RCC_PLLCFGR_PLLN_5                   ((uint32_t)0x00000800)
S#define  RCC_PLLCFGR_PLLN_6                   ((uint32_t)0x00001000)
S#define  RCC_PLLCFGR_PLLN_7                   ((uint32_t)0x00002000)
S#define  RCC_PLLCFGR_PLLN_8                   ((uint32_t)0x00004000)
S
S#define  RCC_PLLCFGR_PLLP                    ((uint32_t)0x00030000)
S#define  RCC_PLLCFGR_PLLP_0                  ((uint32_t)0x00010000)
S#define  RCC_PLLCFGR_PLLP_1                  ((uint32_t)0x00020000)
S
S#define  RCC_PLLCFGR_PLLSRC                  ((uint32_t)0x00400000)
S#define  RCC_PLLCFGR_PLLSRC_HSE              ((uint32_t)0x00400000)
S#define  RCC_PLLCFGR_PLLSRC_HSI              ((uint32_t)0x00000000)
S
S#define  RCC_PLLCFGR_PLLQ                    ((uint32_t)0x0F000000)
S#define  RCC_PLLCFGR_PLLQ_0                  ((uint32_t)0x01000000)
S#define  RCC_PLLCFGR_PLLQ_1                  ((uint32_t)0x02000000)
S#define  RCC_PLLCFGR_PLLQ_2                  ((uint32_t)0x04000000)
S#define  RCC_PLLCFGR_PLLQ_3                  ((uint32_t)0x08000000)
S
S/********************  Bit definition for RCC_CFGR register  ******************/
S/*!< SW configuration */
S#define  RCC_CFGR_SW                         ((uint32_t)0x00000003)        /*!< SW[1:0] bits (System clock Switch) */
S#define  RCC_CFGR_SW_0                       ((uint32_t)0x00000001)        /*!< Bit 0 */
S#define  RCC_CFGR_SW_1                       ((uint32_t)0x00000002)        /*!< Bit 1 */
S
S#define  RCC_CFGR_SW_HSI                     ((uint32_t)0x00000000)        /*!< HSI selected as system clock */
S#define  RCC_CFGR_SW_HSE                     ((uint32_t)0x00000001)        /*!< HSE selected as system clock */
S#define  RCC_CFGR_SW_PLL                     ((uint32_t)0x00000002)        /*!< PLL selected as system clock */
S
S/*!< SWS configuration */
S#define  RCC_CFGR_SWS                        ((uint32_t)0x0000000C)        /*!< SWS[1:0] bits (System Clock Switch Status) */
S#define  RCC_CFGR_SWS_0                      ((uint32_t)0x00000004)        /*!< Bit 0 */
S#define  RCC_CFGR_SWS_1                      ((uint32_t)0x00000008)        /*!< Bit 1 */
S
S#define  RCC_CFGR_SWS_HSI                    ((uint32_t)0x00000000)        /*!< HSI oscillator used as system clock */
S#define  RCC_CFGR_SWS_HSE                    ((uint32_t)0x00000004)        /*!< HSE oscillator used as system clock */
S#define  RCC_CFGR_SWS_PLL                    ((uint32_t)0x00000008)        /*!< PLL used as system clock */
S
S/*!< HPRE configuration */
S#define  RCC_CFGR_HPRE                       ((uint32_t)0x000000F0)        /*!< HPRE[3:0] bits (AHB prescaler) */
S#define  RCC_CFGR_HPRE_0                     ((uint32_t)0x00000010)        /*!< Bit 0 */
S#define  RCC_CFGR_HPRE_1                     ((uint32_t)0x00000020)        /*!< Bit 1 */
S#define  RCC_CFGR_HPRE_2                     ((uint32_t)0x00000040)        /*!< Bit 2 */
S#define  RCC_CFGR_HPRE_3                     ((uint32_t)0x00000080)        /*!< Bit 3 */
S
S#define  RCC_CFGR_HPRE_DIV1                  ((uint32_t)0x00000000)        /*!< SYSCLK not divided */
S#define  RCC_CFGR_HPRE_DIV2                  ((uint32_t)0x00000080)        /*!< SYSCLK divided by 2 */
S#define  RCC_CFGR_HPRE_DIV4                  ((uint32_t)0x00000090)        /*!< SYSCLK divided by 4 */
S#define  RCC_CFGR_HPRE_DIV8                  ((uint32_t)0x000000A0)        /*!< SYSCLK divided by 8 */
S#define  RCC_CFGR_HPRE_DIV16                 ((uint32_t)0x000000B0)        /*!< SYSCLK divided by 16 */
S#define  RCC_CFGR_HPRE_DIV64                 ((uint32_t)0x000000C0)        /*!< SYSCLK divided by 64 */
S#define  RCC_CFGR_HPRE_DIV128                ((uint32_t)0x000000D0)        /*!< SYSCLK divided by 128 */
S#define  RCC_CFGR_HPRE_DIV256                ((uint32_t)0x000000E0)        /*!< SYSCLK divided by 256 */
S#define  RCC_CFGR_HPRE_DIV512                ((uint32_t)0x000000F0)        /*!< SYSCLK divided by 512 */
S
S/*!< PPRE1 configuration */
S#define  RCC_CFGR_PPRE1                      ((uint32_t)0x00001C00)        /*!< PRE1[2:0] bits (APB1 prescaler) */
S#define  RCC_CFGR_PPRE1_0                    ((uint32_t)0x00000400)        /*!< Bit 0 */
S#define  RCC_CFGR_PPRE1_1                    ((uint32_t)0x00000800)        /*!< Bit 1 */
S#define  RCC_CFGR_PPRE1_2                    ((uint32_t)0x00001000)        /*!< Bit 2 */
S
S#define  RCC_CFGR_PPRE1_DIV1                 ((uint32_t)0x00000000)        /*!< HCLK not divided */
S#define  RCC_CFGR_PPRE1_DIV2                 ((uint32_t)0x00001000)        /*!< HCLK divided by 2 */
S#define  RCC_CFGR_PPRE1_DIV4                 ((uint32_t)0x00001400)        /*!< HCLK divided by 4 */
S#define  RCC_CFGR_PPRE1_DIV8                 ((uint32_t)0x00001800)        /*!< HCLK divided by 8 */
S#define  RCC_CFGR_PPRE1_DIV16                ((uint32_t)0x00001C00)        /*!< HCLK divided by 16 */
S
S/*!< PPRE2 configuration */
S#define  RCC_CFGR_PPRE2                      ((uint32_t)0x0000E000)        /*!< PRE2[2:0] bits (APB2 prescaler) */
S#define  RCC_CFGR_PPRE2_0                    ((uint32_t)0x00002000)        /*!< Bit 0 */
S#define  RCC_CFGR_PPRE2_1                    ((uint32_t)0x00004000)        /*!< Bit 1 */
S#define  RCC_CFGR_PPRE2_2                    ((uint32_t)0x00008000)        /*!< Bit 2 */
S
S#define  RCC_CFGR_PPRE2_DIV1                 ((uint32_t)0x00000000)        /*!< HCLK not divided */
S#define  RCC_CFGR_PPRE2_DIV2                 ((uint32_t)0x00008000)        /*!< HCLK divided by 2 */
S#define  RCC_CFGR_PPRE2_DIV4                 ((uint32_t)0x0000A000)        /*!< HCLK divided by 4 */
S#define  RCC_CFGR_PPRE2_DIV8                 ((uint32_t)0x0000C000)        /*!< HCLK divided by 8 */
S#define  RCC_CFGR_PPRE2_DIV16                ((uint32_t)0x0000E000)        /*!< HCLK divided by 16 */
S
S/*!< RTCPRE configuration */
S#define  RCC_CFGR_RTCPRE                     ((uint32_t)0x001F0000)
S#define  RCC_CFGR_RTCPRE_0                   ((uint32_t)0x00010000)
S#define  RCC_CFGR_RTCPRE_1                   ((uint32_t)0x00020000)
S#define  RCC_CFGR_RTCPRE_2                   ((uint32_t)0x00040000)
S#define  RCC_CFGR_RTCPRE_3                   ((uint32_t)0x00080000)
S#define  RCC_CFGR_RTCPRE_4                   ((uint32_t)0x00100000)
S
S/*!< MCO1 configuration */
S#define  RCC_CFGR_MCO1                       ((uint32_t)0x00600000)
S#define  RCC_CFGR_MCO1_0                     ((uint32_t)0x00200000)
S#define  RCC_CFGR_MCO1_1                     ((uint32_t)0x00400000)
S
S#define  RCC_CFGR_I2SSRC                     ((uint32_t)0x00800000)
S
S#define  RCC_CFGR_MCO1PRE                    ((uint32_t)0x07000000)
S#define  RCC_CFGR_MCO1PRE_0                  ((uint32_t)0x01000000)
S#define  RCC_CFGR_MCO1PRE_1                  ((uint32_t)0x02000000)
S#define  RCC_CFGR_MCO1PRE_2                  ((uint32_t)0x04000000)
S
S#define  RCC_CFGR_MCO2PRE                    ((uint32_t)0x38000000)
S#define  RCC_CFGR_MCO2PRE_0                  ((uint32_t)0x08000000)
S#define  RCC_CFGR_MCO2PRE_1                  ((uint32_t)0x10000000)
S#define  RCC_CFGR_MCO2PRE_2                  ((uint32_t)0x20000000)
S
S#define  RCC_CFGR_MCO2                       ((uint32_t)0xC0000000)
S#define  RCC_CFGR_MCO2_0                     ((uint32_t)0x40000000)
S#define  RCC_CFGR_MCO2_1                     ((uint32_t)0x80000000)
S
S/********************  Bit definition for RCC_CIR register  *******************/
S#define  RCC_CIR_LSIRDYF                     ((uint32_t)0x00000001)
S#define  RCC_CIR_LSERDYF                     ((uint32_t)0x00000002)
S#define  RCC_CIR_HSIRDYF                     ((uint32_t)0x00000004)
S#define  RCC_CIR_HSERDYF                     ((uint32_t)0x00000008)
S#define  RCC_CIR_PLLRDYF                     ((uint32_t)0x00000010)
S#define  RCC_CIR_PLLI2SRDYF                  ((uint32_t)0x00000020)
S#define  RCC_CIR_PLLSAIRDYF                  ((uint32_t)0x00000040)
S#define  RCC_CIR_CSSF                        ((uint32_t)0x00000080)
S#define  RCC_CIR_LSIRDYIE                    ((uint32_t)0x00000100)
S#define  RCC_CIR_LSERDYIE                    ((uint32_t)0x00000200)
S#define  RCC_CIR_HSIRDYIE                    ((uint32_t)0x00000400)
S#define  RCC_CIR_HSERDYIE                    ((uint32_t)0x00000800)
S#define  RCC_CIR_PLLRDYIE                    ((uint32_t)0x00001000)
S#define  RCC_CIR_PLLI2SRDYIE                 ((uint32_t)0x00002000)
S#define  RCC_CIR_PLLSAIRDYIE                 ((uint32_t)0x00004000)
S#define  RCC_CIR_LSIRDYC                     ((uint32_t)0x00010000)
S#define  RCC_CIR_LSERDYC                     ((uint32_t)0x00020000)
S#define  RCC_CIR_HSIRDYC                     ((uint32_t)0x00040000)
S#define  RCC_CIR_HSERDYC                     ((uint32_t)0x00080000)
S#define  RCC_CIR_PLLRDYC                     ((uint32_t)0x00100000)
S#define  RCC_CIR_PLLI2SRDYC                  ((uint32_t)0x00200000)
S#define  RCC_CIR_PLLSAIRDYC                  ((uint32_t)0x00400000)
S#define  RCC_CIR_CSSC                        ((uint32_t)0x00800000)
S
S/********************  Bit definition for RCC_AHB1RSTR register  **************/
S#define  RCC_AHB1RSTR_GPIOARST               ((uint32_t)0x00000001)
S#define  RCC_AHB1RSTR_GPIOBRST               ((uint32_t)0x00000002)
S#define  RCC_AHB1RSTR_GPIOCRST               ((uint32_t)0x00000004)
S#define  RCC_AHB1RSTR_GPIODRST               ((uint32_t)0x00000008)
S#define  RCC_AHB1RSTR_GPIOERST               ((uint32_t)0x00000010)
S#define  RCC_AHB1RSTR_GPIOFRST               ((uint32_t)0x00000020)
S#define  RCC_AHB1RSTR_GPIOGRST               ((uint32_t)0x00000040)
S#define  RCC_AHB1RSTR_GPIOHRST               ((uint32_t)0x00000080)
S#define  RCC_AHB1RSTR_GPIOIRST               ((uint32_t)0x00000100)
S#define  RCC_AHB1RSTR_GPIOJRST               ((uint32_t)0x00000200)
S#define  RCC_AHB1RSTR_GPIOKRST               ((uint32_t)0x00000400)
S#define  RCC_AHB1RSTR_CRCRST                 ((uint32_t)0x00001000)
S#define  RCC_AHB1RSTR_DMA1RST                ((uint32_t)0x00200000)
S#define  RCC_AHB1RSTR_DMA2RST                ((uint32_t)0x00400000)
S#define  RCC_AHB1RSTR_DMA2DRST               ((uint32_t)0x00800000)
S#define  RCC_AHB1RSTR_ETHMACRST              ((uint32_t)0x02000000)
S#define  RCC_AHB1RSTR_OTGHRST                ((uint32_t)0x10000000)
S
S/********************  Bit definition for RCC_AHB2RSTR register  **************/
S#define  RCC_AHB2RSTR_DCMIRST                ((uint32_t)0x00000001)
S#define  RCC_AHB2RSTR_CRYPRST                ((uint32_t)0x00000010)
S#define  RCC_AHB2RSTR_HASHRST                ((uint32_t)0x00000020)
S /* maintained for legacy purpose */
S #define  RCC_AHB2RSTR_HSAHRST                RCC_AHB2RSTR_HASHRST
S#define  RCC_AHB2RSTR_RNGRST                 ((uint32_t)0x00000040)
S#define  RCC_AHB2RSTR_OTGFSRST               ((uint32_t)0x00000080)
S
S/********************  Bit definition for RCC_AHB3RSTR register  **************/
S#if defined(STM32F40_41xxx)
S#define  RCC_AHB3RSTR_FSMCRST                ((uint32_t)0x00000001)
S#endif /* STM32F40_41xxx */
S
S#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
S#define  RCC_AHB3RSTR_FMCRST                ((uint32_t)0x00000001)
S#endif /* STM32F427_437xx ||  STM32F429_439xx */
S/********************  Bit definition for RCC_APB1RSTR register  **************/
S#define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)
S#define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)
S#define  RCC_APB1RSTR_TIM4RST                ((uint32_t)0x00000004)
S#define  RCC_APB1RSTR_TIM5RST                ((uint32_t)0x00000008)
S#define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)
S#define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)
S#define  RCC_APB1RSTR_TIM12RST               ((uint32_t)0x00000040)
S#define  RCC_APB1RSTR_TIM13RST               ((uint32_t)0x00000080)
S#define  RCC_APB1RSTR_TIM14RST               ((uint32_t)0x00000100)
S#define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)
S#define  RCC_APB1RSTR_SPI2RST                ((uint32_t)0x00004000)
S#define  RCC_APB1RSTR_SPI3RST                ((uint32_t)0x00008000)
S#define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)
S#define  RCC_APB1RSTR_USART3RST              ((uint32_t)0x00040000)
S#define  RCC_APB1RSTR_UART4RST               ((uint32_t)0x00080000)
S#define  RCC_APB1RSTR_UART5RST               ((uint32_t)0x00100000)
S#define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)
S#define  RCC_APB1RSTR_I2C2RST                ((uint32_t)0x00400000)
S#define  RCC_APB1RSTR_I2C3RST                ((uint32_t)0x00800000)
S#define  RCC_APB1RSTR_CAN1RST                ((uint32_t)0x02000000)
S#define  RCC_APB1RSTR_CAN2RST                ((uint32_t)0x04000000)
S#define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)
S#define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)
S#define  RCC_APB1RSTR_UART7RST               ((uint32_t)0x40000000)
S#define  RCC_APB1RSTR_UART8RST               ((uint32_t)0x80000000)
S
S/********************  Bit definition for RCC_APB2RSTR register  **************/
S#define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000001)
S#define  RCC_APB2RSTR_TIM8RST                ((uint32_t)0x00000002)
S#define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00000010)
S#define  RCC_APB2RSTR_USART6RST              ((uint32_t)0x00000020)
S#define  RCC_APB2RSTR_ADCRST                 ((uint32_t)0x00000100)
S#define  RCC_APB2RSTR_SDIORST                ((uint32_t)0x00000800)
S#define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)
S#define  RCC_APB2RSTR_SPI4RST                ((uint32_t)0x00002000)
S#define  RCC_APB2RSTR_SYSCFGRST              ((uint32_t)0x00004000)
S#define  RCC_APB2RSTR_TIM9RST                ((uint32_t)0x00010000)
S#define  RCC_APB2RSTR_TIM10RST               ((uint32_t)0x00020000)
S#define  RCC_APB2RSTR_TIM11RST               ((uint32_t)0x00040000)
S#define  RCC_APB2RSTR_SPI5RST                ((uint32_t)0x00100000)
S#define  RCC_APB2RSTR_SPI6RST                ((uint32_t)0x00200000)
S#define  RCC_APB2RSTR_SAI1RST                ((uint32_t)0x00400000)
S#define  RCC_APB2RSTR_LTDCRST                ((uint32_t)0x04000000)
S
S/* Old SPI1RST bit definition, maintained for legacy purpose */
S#define  RCC_APB2RSTR_SPI1                   RCC_APB2RSTR_SPI1RST
S
S/********************  Bit definition for RCC_AHB1ENR register  ***************/
S#define  RCC_AHB1ENR_GPIOAEN                 ((uint32_t)0x00000001)
S#define  RCC_AHB1ENR_GPIOBEN                 ((uint32_t)0x00000002)
S#define  RCC_AHB1ENR_GPIOCEN                 ((uint32_t)0x00000004)
S#define  RCC_AHB1ENR_GPIODEN                 ((uint32_t)0x00000008)
S#define  RCC_AHB1ENR_GPIOEEN                 ((uint32_t)0x00000010)
S#define  RCC_AHB1ENR_GPIOFEN                 ((uint32_t)0x00000020)
S#define  RCC_AHB1ENR_GPIOGEN                 ((uint32_t)0x00000040)
S#define  RCC_AHB1ENR_GPIOHEN                 ((uint32_t)0x00000080)
S#define  RCC_AHB1ENR_GPIOIEN                 ((uint32_t)0x00000100)
S#define  RCC_AHB1ENR_GPIOJEN                 ((uint32_t)0x00000200)
S#define  RCC_AHB1ENR_GPIOKEN                 ((uint32_t)0x00000400)
S#define  RCC_AHB1ENR_CRCEN                   ((uint32_t)0x00001000)
S#define  RCC_AHB1ENR_BKPSRAMEN               ((uint32_t)0x00040000)
S#define  RCC_AHB1ENR_CCMDATARAMEN            ((uint32_t)0x00100000)
S#define  RCC_AHB1ENR_DMA1EN                  ((uint32_t)0x00200000)
S#define  RCC_AHB1ENR_DMA2EN                  ((uint32_t)0x00400000)
S#define  RCC_AHB1ENR_DMA2DEN                 ((uint32_t)0x00800000)
S#define  RCC_AHB1ENR_ETHMACEN                ((uint32_t)0x02000000)
S#define  RCC_AHB1ENR_ETHMACTXEN              ((uint32_t)0x04000000)
S#define  RCC_AHB1ENR_ETHMACRXEN              ((uint32_t)0x08000000)
S#define  RCC_AHB1ENR_ETHMACPTPEN             ((uint32_t)0x10000000)
S#define  RCC_AHB1ENR_OTGHSEN                 ((uint32_t)0x20000000)
S#define  RCC_AHB1ENR_OTGHSULPIEN             ((uint32_t)0x40000000)
S
S/********************  Bit definition for RCC_AHB2ENR register  ***************/
S#define  RCC_AHB2ENR_DCMIEN                  ((uint32_t)0x00000001)
S#define  RCC_AHB2ENR_CRYPEN                  ((uint32_t)0x00000010)
S#define  RCC_AHB2ENR_HASHEN                  ((uint32_t)0x00000020)
S#define  RCC_AHB2ENR_RNGEN                   ((uint32_t)0x00000040)
S#define  RCC_AHB2ENR_OTGFSEN                 ((uint32_t)0x00000080)
S
S/********************  Bit definition for RCC_AHB3ENR register  ***************/
S
S#if defined(STM32F40_41xxx)
S#define  RCC_AHB3ENR_FSMCEN                  ((uint32_t)0x00000001)
S#endif /* STM32F40_41xxx */
S
S#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
S#define  RCC_AHB3ENR_FMCEN                  ((uint32_t)0x00000001)
S#endif /* STM32F427_437xx ||  STM32F429_439xx */
S
S/********************  Bit definition for RCC_APB1ENR register  ***************/
S#define  RCC_APB1ENR_TIM2EN                  ((uint32_t)0x00000001)
S#define  RCC_APB1ENR_TIM3EN                  ((uint32_t)0x00000002)
S#define  RCC_APB1ENR_TIM4EN                  ((uint32_t)0x00000004)
S#define  RCC_APB1ENR_TIM5EN                  ((uint32_t)0x00000008)
S#define  RCC_APB1ENR_TIM6EN                  ((uint32_t)0x00000010)
S#define  RCC_APB1ENR_TIM7EN                  ((uint32_t)0x00000020)
S#define  RCC_APB1ENR_TIM12EN                 ((uint32_t)0x00000040)
S#define  RCC_APB1ENR_TIM13EN                 ((uint32_t)0x00000080)
S#define  RCC_APB1ENR_TIM14EN                 ((uint32_t)0x00000100)
S#define  RCC_APB1ENR_WWDGEN                  ((uint32_t)0x00000800)
S#define  RCC_APB1ENR_SPI2EN                  ((uint32_t)0x00004000)
S#define  RCC_APB1ENR_SPI3EN                  ((uint32_t)0x00008000)
S#define  RCC_APB1ENR_USART2EN                ((uint32_t)0x00020000)
S#define  RCC_APB1ENR_USART3EN                ((uint32_t)0x00040000)
S#define  RCC_APB1ENR_UART4EN                 ((uint32_t)0x00080000)
S#define  RCC_APB1ENR_UART5EN                 ((uint32_t)0x00100000)
S#define  RCC_APB1ENR_I2C1EN                  ((uint32_t)0x00200000)
S#define  RCC_APB1ENR_I2C2EN                  ((uint32_t)0x00400000)
S#define  RCC_APB1ENR_I2C3EN                  ((uint32_t)0x00800000)
S#define  RCC_APB1ENR_CAN1EN                  ((uint32_t)0x02000000)
S#define  RCC_APB1ENR_CAN2EN                  ((uint32_t)0x04000000)
S#define  RCC_APB1ENR_PWREN                   ((uint32_t)0x10000000)
S#define  RCC_APB1ENR_DACEN                   ((uint32_t)0x20000000)
S#define  RCC_APB1ENR_UART7EN                 ((uint32_t)0x40000000)
S#define  RCC_APB1ENR_UART8EN                 ((uint32_t)0x80000000)
S
S/********************  Bit definition for RCC_APB2ENR register  ***************/
S#define  RCC_APB2ENR_TIM1EN                  ((uint32_t)0x00000001)
S#define  RCC_APB2ENR_TIM8EN                  ((uint32_t)0x00000002)
S#define  RCC_APB2ENR_USART1EN                ((uint32_t)0x00000010)
S#define  RCC_APB2ENR_USART6EN                ((uint32_t)0x00000020)
S#define  RCC_APB2ENR_ADC1EN                  ((uint32_t)0x00000100)
S#define  RCC_APB2ENR_ADC2EN                  ((uint32_t)0x00000200)
S#define  RCC_APB2ENR_ADC3EN                  ((uint32_t)0x00000400)
S#define  RCC_APB2ENR_SDIOEN                  ((uint32_t)0x00000800)
S#define  RCC_APB2ENR_SPI1EN                  ((uint32_t)0x00001000)
S#define  RCC_APB2ENR_SPI4EN                  ((uint32_t)0x00002000)
S#define  RCC_APB2ENR_SYSCFGEN                ((uint32_t)0x00004000)
S#define  RCC_APB2ENR_TIM9EN                  ((uint32_t)0x00010000)
S#define  RCC_APB2ENR_TIM10EN                 ((uint32_t)0x00020000)
S#define  RCC_APB2ENR_TIM11EN                 ((uint32_t)0x00040000)
S#define  RCC_APB2ENR_SPI5EN                  ((uint32_t)0x00100000)
S#define  RCC_APB2ENR_SPI6EN                  ((uint32_t)0x00200000)
S#define  RCC_APB2ENR_SAI1EN                  ((uint32_t)0x00400000)
S#define  RCC_APB2ENR_LTDCEN                  ((uint32_t)0x04000000)
S
S/********************  Bit definition for RCC_AHB1LPENR register  *************/
S#define  RCC_AHB1LPENR_GPIOALPEN             ((uint32_t)0x00000001)
S#define  RCC_AHB1LPENR_GPIOBLPEN             ((uint32_t)0x00000002)
S#define  RCC_AHB1LPENR_GPIOCLPEN             ((uint32_t)0x00000004)
S#define  RCC_AHB1LPENR_GPIODLPEN             ((uint32_t)0x00000008)
S#define  RCC_AHB1LPENR_GPIOELPEN             ((uint32_t)0x00000010)
S#define  RCC_AHB1LPENR_GPIOFLPEN             ((uint32_t)0x00000020)
S#define  RCC_AHB1LPENR_GPIOGLPEN             ((uint32_t)0x00000040)
S#define  RCC_AHB1LPENR_GPIOHLPEN             ((uint32_t)0x00000080)
S#define  RCC_AHB1LPENR_GPIOILPEN             ((uint32_t)0x00000100)
S#define  RCC_AHB1LPENR_GPIOJLPEN             ((uint32_t)0x00000200)
S#define  RCC_AHB1LPENR_GPIOKLPEN             ((uint32_t)0x00000400)
S#define  RCC_AHB1LPENR_CRCLPEN               ((uint32_t)0x00001000)
S#define  RCC_AHB1LPENR_FLITFLPEN             ((uint32_t)0x00008000)
S#define  RCC_AHB1LPENR_SRAM1LPEN             ((uint32_t)0x00010000)
S#define  RCC_AHB1LPENR_SRAM2LPEN             ((uint32_t)0x00020000)
S#define  RCC_AHB1LPENR_BKPSRAMLPEN           ((uint32_t)0x00040000)
S#define  RCC_AHB1LPENR_SRAM3LPEN             ((uint32_t)0x00080000)
S#define  RCC_AHB1LPENR_DMA1LPEN              ((uint32_t)0x00200000)
S#define  RCC_AHB1LPENR_DMA2LPEN              ((uint32_t)0x00400000)
S#define  RCC_AHB1LPENR_DMA2DLPEN             ((uint32_t)0x00800000)
S#define  RCC_AHB1LPENR_ETHMACLPEN            ((uint32_t)0x02000000)
S#define  RCC_AHB1LPENR_ETHMACTXLPEN          ((uint32_t)0x04000000)
S#define  RCC_AHB1LPENR_ETHMACRXLPEN          ((uint32_t)0x08000000)
S#define  RCC_AHB1LPENR_ETHMACPTPLPEN         ((uint32_t)0x10000000)
S#define  RCC_AHB1LPENR_OTGHSLPEN             ((uint32_t)0x20000000)
S#define  RCC_AHB1LPENR_OTGHSULPILPEN         ((uint32_t)0x40000000)
S
S/********************  Bit definition for RCC_AHB2LPENR register  *************/
S#define  RCC_AHB2LPENR_DCMILPEN              ((uint32_t)0x00000001)
S#define  RCC_AHB2LPENR_CRYPLPEN              ((uint32_t)0x00000010)
S#define  RCC_AHB2LPENR_HASHLPEN              ((uint32_t)0x00000020)
S#define  RCC_AHB2LPENR_RNGLPEN               ((uint32_t)0x00000040)
S#define  RCC_AHB2LPENR_OTGFSLPEN             ((uint32_t)0x00000080)
S
S/********************  Bit definition for RCC_AHB3LPENR register  *************/
S#if defined(STM32F40_41xxx)
S#define  RCC_AHB3LPENR_FSMCLPEN              ((uint32_t)0x00000001)
S#endif /* STM32F40_41xxx */
S
S#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
S#define  RCC_AHB3LPENR_FMCLPEN              ((uint32_t)0x00000001)
S#endif /* STM32F427_437xx ||  STM32F429_439xx */
S
S/********************  Bit definition for RCC_APB1LPENR register  *************/
S#define  RCC_APB1LPENR_TIM2LPEN              ((uint32_t)0x00000001)
S#define  RCC_APB1LPENR_TIM3LPEN              ((uint32_t)0x00000002)
S#define  RCC_APB1LPENR_TIM4LPEN              ((uint32_t)0x00000004)
S#define  RCC_APB1LPENR_TIM5LPEN              ((uint32_t)0x00000008)
S#define  RCC_APB1LPENR_TIM6LPEN              ((uint32_t)0x00000010)
S#define  RCC_APB1LPENR_TIM7LPEN              ((uint32_t)0x00000020)
S#define  RCC_APB1LPENR_TIM12LPEN             ((uint32_t)0x00000040)
S#define  RCC_APB1LPENR_TIM13LPEN             ((uint32_t)0x00000080)
S#define  RCC_APB1LPENR_TIM14LPEN             ((uint32_t)0x00000100)
S#define  RCC_APB1LPENR_WWDGLPEN              ((uint32_t)0x00000800)
S#define  RCC_APB1LPENR_SPI2LPEN              ((uint32_t)0x00004000)
S#define  RCC_APB1LPENR_SPI3LPEN              ((uint32_t)0x00008000)
S#define  RCC_APB1LPENR_USART2LPEN            ((uint32_t)0x00020000)
S#define  RCC_APB1LPENR_USART3LPEN            ((uint32_t)0x00040000)
S#define  RCC_APB1LPENR_UART4LPEN             ((uint32_t)0x00080000)
S#define  RCC_APB1LPENR_UART5LPEN             ((uint32_t)0x00100000)
S#define  RCC_APB1LPENR_I2C1LPEN              ((uint32_t)0x00200000)
S#define  RCC_APB1LPENR_I2C2LPEN              ((uint32_t)0x00400000)
S#define  RCC_APB1LPENR_I2C3LPEN              ((uint32_t)0x00800000)
S#define  RCC_APB1LPENR_CAN1LPEN              ((uint32_t)0x02000000)
S#define  RCC_APB1LPENR_CAN2LPEN              ((uint32_t)0x04000000)
S#define  RCC_APB1LPENR_PWRLPEN               ((uint32_t)0x10000000)
S#define  RCC_APB1LPENR_DACLPEN               ((uint32_t)0x20000000)
S#define  RCC_APB1LPENR_UART7LPEN             ((uint32_t)0x40000000)
S#define  RCC_APB1LPENR_UART8LPEN             ((uint32_t)0x80000000)
S
S/********************  Bit definition for RCC_APB2LPENR register  *************/
S#define  RCC_APB2LPENR_TIM1LPEN              ((uint32_t)0x00000001)
S#define  RCC_APB2LPENR_TIM8LPEN              ((uint32_t)0x00000002)
S#define  RCC_APB2LPENR_USART1LPEN            ((uint32_t)0x00000010)
S#define  RCC_APB2LPENR_USART6LPEN            ((uint32_t)0x00000020)
S#define  RCC_APB2LPENR_ADC1LPEN              ((uint32_t)0x00000100)
S#define  RCC_APB2LPENR_ADC2PEN               ((uint32_t)0x00000200)
S#define  RCC_APB2LPENR_ADC3LPEN              ((uint32_t)0x00000400)
S#define  RCC_APB2LPENR_SDIOLPEN              ((uint32_t)0x00000800)
S#define  RCC_APB2LPENR_SPI1LPEN              ((uint32_t)0x00001000)
S#define  RCC_APB2LPENR_SPI4LPEN              ((uint32_t)0x00002000)
S#define  RCC_APB2LPENR_SYSCFGLPEN            ((uint32_t)0x00004000)
S#define  RCC_APB2LPENR_TIM9LPEN              ((uint32_t)0x00010000)
S#define  RCC_APB2LPENR_TIM10LPEN             ((uint32_t)0x00020000)
S#define  RCC_APB2LPENR_TIM11LPEN             ((uint32_t)0x00040000)
S#define  RCC_APB2LPENR_SPI5LPEN              ((uint32_t)0x00100000)
S#define  RCC_APB2LPENR_SPI6LPEN              ((uint32_t)0x00200000)
S#define  RCC_APB2LPENR_SAI1LPEN              ((uint32_t)0x00400000)
S#define  RCC_APB2LPENR_LTDCLPEN              ((uint32_t)0x04000000)
S
S/********************  Bit definition for RCC_BDCR register  ******************/
S#define  RCC_BDCR_LSEON                      ((uint32_t)0x00000001)
S#define  RCC_BDCR_LSERDY                     ((uint32_t)0x00000002)
S#define  RCC_BDCR_LSEBYP                     ((uint32_t)0x00000004)
S
S#define  RCC_BDCR_RTCSEL                    ((uint32_t)0x00000300)
S#define  RCC_BDCR_RTCSEL_0                  ((uint32_t)0x00000100)
S#define  RCC_BDCR_RTCSEL_1                  ((uint32_t)0x00000200)
S
S#define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)
S#define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)
S
S/********************  Bit definition for RCC_CSR register  *******************/
S#define  RCC_CSR_LSION                       ((uint32_t)0x00000001)
S#define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)
S#define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)
S#define  RCC_CSR_BORRSTF                     ((uint32_t)0x02000000)
S#define  RCC_CSR_PADRSTF                     ((uint32_t)0x04000000)
S#define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)
S#define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)
S#define  RCC_CSR_WDGRSTF                     ((uint32_t)0x20000000)
S#define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)
S#define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)
S
S/********************  Bit definition for RCC_SSCGR register  *****************/
S#define  RCC_SSCGR_MODPER                    ((uint32_t)0x00001FFF)
S#define  RCC_SSCGR_INCSTEP                   ((uint32_t)0x0FFFE000)
S#define  RCC_SSCGR_SPREADSEL                 ((uint32_t)0x40000000)
S#define  RCC_SSCGR_SSCGEN                    ((uint32_t)0x80000000)
S
S/********************  Bit definition for RCC_PLLI2SCFGR register  ************/
S#define  RCC_PLLI2SCFGR_PLLI2SN              ((uint32_t)0x00007FC0)
S#define  RCC_PLLI2SCFGR_PLLI2SQ              ((uint32_t)0x0F000000)
S#define  RCC_PLLI2SCFGR_PLLI2SR              ((uint32_t)0x70000000)
S
S/********************  Bit definition for RCC_PLLSAICFGR register  ************/
S#define  RCC_PLLSAICFGR_PLLI2SN              ((uint32_t)0x00007FC0)
S#define  RCC_PLLSAICFGR_PLLI2SQ              ((uint32_t)0x0F000000)
S#define  RCC_PLLSAICFGR_PLLI2SR              ((uint32_t)0x70000000)
S
S/********************  Bit definition for RCC_DCKCFGR register  ***************/
S#define  RCC_DCKCFGR_PLLI2SDIVQ              ((uint32_t)0x0000001F)
S#define  RCC_DCKCFGR_PLLSAIDIVQ              ((uint32_t)0x00001F00)
S#define  RCC_DCKCFGR_PLLSAIDIVR              ((uint32_t)0x00030000)
S#define  RCC_DCKCFGR_SAI1ASRC                ((uint32_t)0x00300000)
S#define  RCC_DCKCFGR_SAI1BSRC                ((uint32_t)0x00C00000)
S#define  RCC_DCKCFGR_TIMPRE                  ((uint32_t)0x01000000)
S
S
S/******************************************************************************/
S/*                                                                            */
S/*                                    RNG                                     */
S/*                                                                            */
S/******************************************************************************/
S/********************  Bits definition for RNG_CR register  *******************/
S#define RNG_CR_RNGEN                         ((uint32_t)0x00000004)
S#define RNG_CR_IE                            ((uint32_t)0x00000008)
S
S/********************  Bits definition for RNG_SR register  *******************/
S#define RNG_SR_DRDY                          ((uint32_t)0x00000001)
S#define RNG_SR_CECS                          ((uint32_t)0x00000002)
S#define RNG_SR_SECS                          ((uint32_t)0x00000004)
S#define RNG_SR_CEIS                          ((uint32_t)0x00000020)
S#define RNG_SR_SEIS                          ((uint32_t)0x00000040)
S
S/******************************************************************************/
S/*                                                                            */
S/*                           Real-Time Clock (RTC)                            */
S/*                                                                            */
S/******************************************************************************/
S/********************  Bits definition for RTC_TR register  *******************/
S#define RTC_TR_PM                            ((uint32_t)0x00400000)
S#define RTC_TR_HT                            ((uint32_t)0x00300000)
S#define RTC_TR_HT_0                          ((uint32_t)0x00100000)
S#define RTC_TR_HT_1                          ((uint32_t)0x00200000)
S#define RTC_TR_HU                            ((uint32_t)0x000F0000)
S#define RTC_TR_HU_0                          ((uint32_t)0x00010000)
S#define RTC_TR_HU_1                          ((uint32_t)0x00020000)
S#define RTC_TR_HU_2                          ((uint32_t)0x00040000)
S#define RTC_TR_HU_3                          ((uint32_t)0x00080000)
S#define RTC_TR_MNT                           ((uint32_t)0x00007000)
S#define RTC_TR_MNT_0                         ((uint32_t)0x00001000)
S#define RTC_TR_MNT_1                         ((uint32_t)0x00002000)
S#define RTC_TR_MNT_2                         ((uint32_t)0x00004000)
S#define RTC_TR_MNU                           ((uint32_t)0x00000F00)
S#define RTC_TR_MNU_0                         ((uint32_t)0x00000100)
S#define RTC_TR_MNU_1                         ((uint32_t)0x00000200)
S#define RTC_TR_MNU_2                         ((uint32_t)0x00000400)
S#define RTC_TR_MNU_3                         ((uint32_t)0x00000800)
S#define RTC_TR_ST                            ((uint32_t)0x00000070)
S#define RTC_TR_ST_0                          ((uint32_t)0x00000010)
S#define RTC_TR_ST_1                          ((uint32_t)0x00000020)
S#define RTC_TR_ST_2                          ((uint32_t)0x00000040)
S#define RTC_TR_SU                            ((uint32_t)0x0000000F)
S#define RTC_TR_SU_0                          ((uint32_t)0x00000001)
S#define RTC_TR_SU_1                          ((uint32_t)0x00000002)
S#define RTC_TR_SU_2                          ((uint32_t)0x00000004)
S#define RTC_TR_SU_3                          ((uint32_t)0x00000008)
S
S/********************  Bits definition for RTC_DR register  *******************/
S#define RTC_DR_YT                            ((uint32_t)0x00F00000)
S#define RTC_DR_YT_0                          ((uint32_t)0x00100000)
S#define RTC_DR_YT_1                          ((uint32_t)0x00200000)
S#define RTC_DR_YT_2                          ((uint32_t)0x00400000)
S#define RTC_DR_YT_3                          ((uint32_t)0x00800000)
S#define RTC_DR_YU                            ((uint32_t)0x000F0000)
S#define RTC_DR_YU_0                          ((uint32_t)0x00010000)
S#define RTC_DR_YU_1                          ((uint32_t)0x00020000)
S#define RTC_DR_YU_2                          ((uint32_t)0x00040000)
S#define RTC_DR_YU_3                          ((uint32_t)0x00080000)
S#define RTC_DR_WDU                           ((uint32_t)0x0000E000)
S#define RTC_DR_WDU_0                         ((uint32_t)0x00002000)
S#define RTC_DR_WDU_1                         ((uint32_t)0x00004000)
S#define RTC_DR_WDU_2                         ((uint32_t)0x00008000)
S#define RTC_DR_MT                            ((uint32_t)0x00001000)
S#define RTC_DR_MU                            ((uint32_t)0x00000F00)
S#define RTC_DR_MU_0                          ((uint32_t)0x00000100)
S#define RTC_DR_MU_1                          ((uint32_t)0x00000200)
S#define RTC_DR_MU_2                          ((uint32_t)0x00000400)
S#define RTC_DR_MU_3                          ((uint32_t)0x00000800)
S#define RTC_DR_DT                            ((uint32_t)0x00000030)
S#define RTC_DR_DT_0                          ((uint32_t)0x00000010)
S#define RTC_DR_DT_1                          ((uint32_t)0x00000020)
S#define RTC_DR_DU                            ((uint32_t)0x0000000F)
S#define RTC_DR_DU_0                          ((uint32_t)0x00000001)
S#define RTC_DR_DU_1                          ((uint32_t)0x00000002)
S#define RTC_DR_DU_2                          ((uint32_t)0x00000004)
S#define RTC_DR_DU_3                          ((uint32_t)0x00000008)
S
S/********************  Bits definition for RTC_CR register  *******************/
S#define RTC_CR_COE                           ((uint32_t)0x00800000)
S#define RTC_CR_OSEL                          ((uint32_t)0x00600000)
S#define RTC_CR_OSEL_0                        ((uint32_t)0x00200000)
S#define RTC_CR_OSEL_1                        ((uint32_t)0x00400000)
S#define RTC_CR_POL                           ((uint32_t)0x00100000)
S#define RTC_CR_COSEL                         ((uint32_t)0x00080000)
S#define RTC_CR_BCK                           ((uint32_t)0x00040000)
S#define RTC_CR_SUB1H                         ((uint32_t)0x00020000)
S#define RTC_CR_ADD1H                         ((uint32_t)0x00010000)
S#define RTC_CR_TSIE                          ((uint32_t)0x00008000)
S#define RTC_CR_WUTIE                         ((uint32_t)0x00004000)
S#define RTC_CR_ALRBIE                        ((uint32_t)0x00002000)
S#define RTC_CR_ALRAIE                        ((uint32_t)0x00001000)
S#define RTC_CR_TSE                           ((uint32_t)0x00000800)
S#define RTC_CR_WUTE                          ((uint32_t)0x00000400)
S#define RTC_CR_ALRBE                         ((uint32_t)0x00000200)
S#define RTC_CR_ALRAE                         ((uint32_t)0x00000100)
S#define RTC_CR_DCE                           ((uint32_t)0x00000080)
S#define RTC_CR_FMT                           ((uint32_t)0x00000040)
S#define RTC_CR_BYPSHAD                       ((uint32_t)0x00000020)
S#define RTC_CR_REFCKON                       ((uint32_t)0x00000010)
S#define RTC_CR_TSEDGE                        ((uint32_t)0x00000008)
S#define RTC_CR_WUCKSEL                       ((uint32_t)0x00000007)
S#define RTC_CR_WUCKSEL_0                     ((uint32_t)0x00000001)
S#define RTC_CR_WUCKSEL_1                     ((uint32_t)0x00000002)
S#define RTC_CR_WUCKSEL_2                     ((uint32_t)0x00000004)
S
S/********************  Bits definition for RTC_ISR register  ******************/
S#define RTC_ISR_RECALPF                      ((uint32_t)0x00010000)
S#define RTC_ISR_TAMP1F                       ((uint32_t)0x00002000)
S#define RTC_ISR_TSOVF                        ((uint32_t)0x00001000)
S#define RTC_ISR_TSF                          ((uint32_t)0x00000800)
S#define RTC_ISR_WUTF                         ((uint32_t)0x00000400)
S#define RTC_ISR_ALRBF                        ((uint32_t)0x00000200)
S#define RTC_ISR_ALRAF                        ((uint32_t)0x00000100)
S#define RTC_ISR_INIT                         ((uint32_t)0x00000080)
S#define RTC_ISR_INITF                        ((uint32_t)0x00000040)
S#define RTC_ISR_RSF                          ((uint32_t)0x00000020)
S#define RTC_ISR_INITS                        ((uint32_t)0x00000010)
S#define RTC_ISR_SHPF                         ((uint32_t)0x00000008)
S#define RTC_ISR_WUTWF                        ((uint32_t)0x00000004)
S#define RTC_ISR_ALRBWF                       ((uint32_t)0x00000002)
S#define RTC_ISR_ALRAWF                       ((uint32_t)0x00000001)
S
S/********************  Bits definition for RTC_PRER register  *****************/
S#define RTC_PRER_PREDIV_A                    ((uint32_t)0x007F0000)
S#define RTC_PRER_PREDIV_S                    ((uint32_t)0x00001FFF)
S
S/********************  Bits definition for RTC_WUTR register  *****************/
S#define RTC_WUTR_WUT                         ((uint32_t)0x0000FFFF)
S
S/********************  Bits definition for RTC_CALIBR register  ***************/
S#define RTC_CALIBR_DCS                       ((uint32_t)0x00000080)
S#define RTC_CALIBR_DC                        ((uint32_t)0x0000001F)
S
S/********************  Bits definition for RTC_ALRMAR register  ***************/
S#define RTC_ALRMAR_MSK4                      ((uint32_t)0x80000000)
S#define RTC_ALRMAR_WDSEL                     ((uint32_t)0x40000000)
S#define RTC_ALRMAR_DT                        ((uint32_t)0x30000000)
S#define RTC_ALRMAR_DT_0                      ((uint32_t)0x10000000)
S#define RTC_ALRMAR_DT_1                      ((uint32_t)0x20000000)
S#define RTC_ALRMAR_DU                        ((uint32_t)0x0F000000)
S#define RTC_ALRMAR_DU_0                      ((uint32_t)0x01000000)
S#define RTC_ALRMAR_DU_1                      ((uint32_t)0x02000000)
S#define RTC_ALRMAR_DU_2                      ((uint32_t)0x04000000)
S#define RTC_ALRMAR_DU_3                      ((uint32_t)0x08000000)
S#define RTC_ALRMAR_MSK3                      ((uint32_t)0x00800000)
S#define RTC_ALRMAR_PM                        ((uint32_t)0x00400000)
S#define RTC_ALRMAR_HT                        ((uint32_t)0x00300000)
S#define RTC_ALRMAR_HT_0                      ((uint32_t)0x00100000)
S#define RTC_ALRMAR_HT_1                      ((uint32_t)0x00200000)
S#define RTC_ALRMAR_HU                        ((uint32_t)0x000F0000)
S#define RTC_ALRMAR_HU_0                      ((uint32_t)0x00010000)
S#define RTC_ALRMAR_HU_1                      ((uint32_t)0x00020000)
S#define RTC_ALRMAR_HU_2                      ((uint32_t)0x00040000)
S#define RTC_ALRMAR_HU_3                      ((uint32_t)0x00080000)
S#define RTC_ALRMAR_MSK2                      ((uint32_t)0x00008000)
S#define RTC_ALRMAR_MNT                       ((uint32_t)0x00007000)
S#define RTC_ALRMAR_MNT_0                     ((uint32_t)0x00001000)
S#define RTC_ALRMAR_MNT_1                     ((uint32_t)0x00002000)
S#define RTC_ALRMAR_MNT_2                     ((uint32_t)0x00004000)
S#define RTC_ALRMAR_MNU                       ((uint32_t)0x00000F00)
S#define RTC_ALRMAR_MNU_0                     ((uint32_t)0x00000100)
S#define RTC_ALRMAR_MNU_1                     ((uint32_t)0x00000200)
S#define RTC_ALRMAR_MNU_2                     ((uint32_t)0x00000400)
S#define RTC_ALRMAR_MNU_3                     ((uint32_t)0x00000800)
S#define RTC_ALRMAR_MSK1                      ((uint32_t)0x00000080)
S#define RTC_ALRMAR_ST                        ((uint32_t)0x00000070)
S#define RTC_ALRMAR_ST_0                      ((uint32_t)0x00000010)
S#define RTC_ALRMAR_ST_1                      ((uint32_t)0x00000020)
S#define RTC_ALRMAR_ST_2                      ((uint32_t)0x00000040)
S#define RTC_ALRMAR_SU                        ((uint32_t)0x0000000F)
S#define RTC_ALRMAR_SU_0                      ((uint32_t)0x00000001)
S#define RTC_ALRMAR_SU_1                      ((uint32_t)0x00000002)
S#define RTC_ALRMAR_SU_2                      ((uint32_t)0x00000004)
S#define RTC_ALRMAR_SU_3                      ((uint32_t)0x00000008)
S
S/********************  Bits definition for RTC_ALRMBR register  ***************/
S#define RTC_ALRMBR_MSK4                      ((uint32_t)0x80000000)
S#define RTC_ALRMBR_WDSEL                     ((uint32_t)0x40000000)
S#define RTC_ALRMBR_DT                        ((uint32_t)0x30000000)
S#define RTC_ALRMBR_DT_0                      ((uint32_t)0x10000000)
S#define RTC_ALRMBR_DT_1                      ((uint32_t)0x20000000)
S#define RTC_ALRMBR_DU                        ((uint32_t)0x0F000000)
S#define RTC_ALRMBR_DU_0                      ((uint32_t)0x01000000)
S#define RTC_ALRMBR_DU_1                      ((uint32_t)0x02000000)
S#define RTC_ALRMBR_DU_2                      ((uint32_t)0x04000000)
S#define RTC_ALRMBR_DU_3                      ((uint32_t)0x08000000)
S#define RTC_ALRMBR_MSK3                      ((uint32_t)0x00800000)
S#define RTC_ALRMBR_PM                        ((uint32_t)0x00400000)
S#define RTC_ALRMBR_HT                        ((uint32_t)0x00300000)
S#define RTC_ALRMBR_HT_0                      ((uint32_t)0x00100000)
S#define RTC_ALRMBR_HT_1                      ((uint32_t)0x00200000)
S#define RTC_ALRMBR_HU                        ((uint32_t)0x000F0000)
S#define RTC_ALRMBR_HU_0                      ((uint32_t)0x00010000)
S#define RTC_ALRMBR_HU_1                      ((uint32_t)0x00020000)
S#define RTC_ALRMBR_HU_2                      ((uint32_t)0x00040000)
S#define RTC_ALRMBR_HU_3                      ((uint32_t)0x00080000)
S#define RTC_ALRMBR_MSK2                      ((uint32_t)0x00008000)
S#define RTC_ALRMBR_MNT                       ((uint32_t)0x00007000)
S#define RTC_ALRMBR_MNT_0                     ((uint32_t)0x00001000)
S#define RTC_ALRMBR_MNT_1                     ((uint32_t)0x00002000)
S#define RTC_ALRMBR_MNT_2                     ((uint32_t)0x00004000)
S#define RTC_ALRMBR_MNU                       ((uint32_t)0x00000F00)
S#define RTC_ALRMBR_MNU_0                     ((uint32_t)0x00000100)
S#define RTC_ALRMBR_MNU_1                     ((uint32_t)0x00000200)
S#define RTC_ALRMBR_MNU_2                     ((uint32_t)0x00000400)
S#define RTC_ALRMBR_MNU_3                     ((uint32_t)0x00000800)
S#define RTC_ALRMBR_MSK1                      ((uint32_t)0x00000080)
S#define RTC_ALRMBR_ST                        ((uint32_t)0x00000070)
S#define RTC_ALRMBR_ST_0                      ((uint32_t)0x00000010)
S#define RTC_ALRMBR_ST_1                      ((uint32_t)0x00000020)
S#define RTC_ALRMBR_ST_2                      ((uint32_t)0x00000040)
S#define RTC_ALRMBR_SU                        ((uint32_t)0x0000000F)
S#define RTC_ALRMBR_SU_0                      ((uint32_t)0x00000001)
S#define RTC_ALRMBR_SU_1                      ((uint32_t)0x00000002)
S#define RTC_ALRMBR_SU_2                      ((uint32_t)0x00000004)
S#define RTC_ALRMBR_SU_3                      ((uint32_t)0x00000008)
S
S/********************  Bits definition for RTC_WPR register  ******************/
S#define RTC_WPR_KEY                          ((uint32_t)0x000000FF)
S
S/********************  Bits definition for RTC_SSR register  ******************/
S#define RTC_SSR_SS                           ((uint32_t)0x0000FFFF)
S
S/********************  Bits definition for RTC_SHIFTR register  ***************/
S#define RTC_SHIFTR_SUBFS                     ((uint32_t)0x00007FFF)
S#define RTC_SHIFTR_ADD1S                     ((uint32_t)0x80000000)
S
S/********************  Bits definition for RTC_TSTR register  *****************/
S#define RTC_TSTR_PM                          ((uint32_t)0x00400000)
S#define RTC_TSTR_HT                          ((uint32_t)0x00300000)
S#define RTC_TSTR_HT_0                        ((uint32_t)0x00100000)
S#define RTC_TSTR_HT_1                        ((uint32_t)0x00200000)
S#define RTC_TSTR_HU                          ((uint32_t)0x000F0000)
S#define RTC_TSTR_HU_0                        ((uint32_t)0x00010000)
S#define RTC_TSTR_HU_1                        ((uint32_t)0x00020000)
S#define RTC_TSTR_HU_2                        ((uint32_t)0x00040000)
S#define RTC_TSTR_HU_3                        ((uint32_t)0x00080000)
S#define RTC_TSTR_MNT                         ((uint32_t)0x00007000)
S#define RTC_TSTR_MNT_0                       ((uint32_t)0x00001000)
S#define RTC_TSTR_MNT_1                       ((uint32_t)0x00002000)
S#define RTC_TSTR_MNT_2                       ((uint32_t)0x00004000)
S#define RTC_TSTR_MNU                         ((uint32_t)0x00000F00)
S#define RTC_TSTR_MNU_0                       ((uint32_t)0x00000100)
S#define RTC_TSTR_MNU_1                       ((uint32_t)0x00000200)
S#define RTC_TSTR_MNU_2                       ((uint32_t)0x00000400)
S#define RTC_TSTR_MNU_3                       ((uint32_t)0x00000800)
S#define RTC_TSTR_ST                          ((uint32_t)0x00000070)
S#define RTC_TSTR_ST_0                        ((uint32_t)0x00000010)
S#define RTC_TSTR_ST_1                        ((uint32_t)0x00000020)
S#define RTC_TSTR_ST_2                        ((uint32_t)0x00000040)
S#define RTC_TSTR_SU                          ((uint32_t)0x0000000F)
S#define RTC_TSTR_SU_0                        ((uint32_t)0x00000001)
S#define RTC_TSTR_SU_1                        ((uint32_t)0x00000002)
S#define RTC_TSTR_SU_2                        ((uint32_t)0x00000004)
S#define RTC_TSTR_SU_3                        ((uint32_t)0x00000008)
S
S/********************  Bits definition for RTC_TSDR register  *****************/
S#define RTC_TSDR_WDU                         ((uint32_t)0x0000E000)
S#define RTC_TSDR_WDU_0                       ((uint32_t)0x00002000)
S#define RTC_TSDR_WDU_1                       ((uint32_t)0x00004000)
S#define RTC_TSDR_WDU_2                       ((uint32_t)0x00008000)
S#define RTC_TSDR_MT                          ((uint32_t)0x00001000)
S#define RTC_TSDR_MU                          ((uint32_t)0x00000F00)
S#define RTC_TSDR_MU_0                        ((uint32_t)0x00000100)
S#define RTC_TSDR_MU_1                        ((uint32_t)0x00000200)
S#define RTC_TSDR_MU_2                        ((uint32_t)0x00000400)
S#define RTC_TSDR_MU_3                        ((uint32_t)0x00000800)
S#define RTC_TSDR_DT                          ((uint32_t)0x00000030)
S#define RTC_TSDR_DT_0                        ((uint32_t)0x00000010)
S#define RTC_TSDR_DT_1                        ((uint32_t)0x00000020)
S#define RTC_TSDR_DU                          ((uint32_t)0x0000000F)
S#define RTC_TSDR_DU_0                        ((uint32_t)0x00000001)
S#define RTC_TSDR_DU_1                        ((uint32_t)0x00000002)
S#define RTC_TSDR_DU_2                        ((uint32_t)0x00000004)
S#define RTC_TSDR_DU_3                        ((uint32_t)0x00000008)
S
S/********************  Bits definition for RTC_TSSSR register  ****************/
S#define RTC_TSSSR_SS                         ((uint32_t)0x0000FFFF)
S
S/********************  Bits definition for RTC_CAL register  *****************/
S#define RTC_CALR_CALP                        ((uint32_t)0x00008000)
S#define RTC_CALR_CALW8                       ((uint32_t)0x00004000)
S#define RTC_CALR_CALW16                      ((uint32_t)0x00002000)
S#define RTC_CALR_CALM                        ((uint32_t)0x000001FF)
S#define RTC_CALR_CALM_0                      ((uint32_t)0x00000001)
S#define RTC_CALR_CALM_1                      ((uint32_t)0x00000002)
S#define RTC_CALR_CALM_2                      ((uint32_t)0x00000004)
S#define RTC_CALR_CALM_3                      ((uint32_t)0x00000008)
S#define RTC_CALR_CALM_4                      ((uint32_t)0x00000010)
S#define RTC_CALR_CALM_5                      ((uint32_t)0x00000020)
S#define RTC_CALR_CALM_6                      ((uint32_t)0x00000040)
S#define RTC_CALR_CALM_7                      ((uint32_t)0x00000080)
S#define RTC_CALR_CALM_8                      ((uint32_t)0x00000100)
S
S/********************  Bits definition for RTC_TAFCR register  ****************/
S#define RTC_TAFCR_ALARMOUTTYPE               ((uint32_t)0x00040000)
S#define RTC_TAFCR_TSINSEL                    ((uint32_t)0x00020000)
S#define RTC_TAFCR_TAMPINSEL                  ((uint32_t)0x00010000)
S#define RTC_TAFCR_TAMPPUDIS                  ((uint32_t)0x00008000)
S#define RTC_TAFCR_TAMPPRCH                   ((uint32_t)0x00006000)
S#define RTC_TAFCR_TAMPPRCH_0                 ((uint32_t)0x00002000)
S#define RTC_TAFCR_TAMPPRCH_1                 ((uint32_t)0x00004000)
S#define RTC_TAFCR_TAMPFLT                    ((uint32_t)0x00001800)
S#define RTC_TAFCR_TAMPFLT_0                  ((uint32_t)0x00000800)
S#define RTC_TAFCR_TAMPFLT_1                  ((uint32_t)0x00001000)
S#define RTC_TAFCR_TAMPFREQ                   ((uint32_t)0x00000700)
S#define RTC_TAFCR_TAMPFREQ_0                 ((uint32_t)0x00000100)
S#define RTC_TAFCR_TAMPFREQ_1                 ((uint32_t)0x00000200)
S#define RTC_TAFCR_TAMPFREQ_2                 ((uint32_t)0x00000400)
S#define RTC_TAFCR_TAMPTS                     ((uint32_t)0x00000080)
S#define RTC_TAFCR_TAMPIE                     ((uint32_t)0x00000004)
S#define RTC_TAFCR_TAMP1TRG                   ((uint32_t)0x00000002)
S#define RTC_TAFCR_TAMP1E                     ((uint32_t)0x00000001)
S
S/********************  Bits definition for RTC_ALRMASSR register  *************/
S#define RTC_ALRMASSR_MASKSS                  ((uint32_t)0x0F000000)
S#define RTC_ALRMASSR_MASKSS_0                ((uint32_t)0x01000000)
S#define RTC_ALRMASSR_MASKSS_1                ((uint32_t)0x02000000)
S#define RTC_ALRMASSR_MASKSS_2                ((uint32_t)0x04000000)
S#define RTC_ALRMASSR_MASKSS_3                ((uint32_t)0x08000000)
S#define RTC_ALRMASSR_SS                      ((uint32_t)0x00007FFF)
S
S/********************  Bits definition for RTC_ALRMBSSR register  *************/
S#define RTC_ALRMBSSR_MASKSS                  ((uint32_t)0x0F000000)
S#define RTC_ALRMBSSR_MASKSS_0                ((uint32_t)0x01000000)
S#define RTC_ALRMBSSR_MASKSS_1                ((uint32_t)0x02000000)
S#define RTC_ALRMBSSR_MASKSS_2                ((uint32_t)0x04000000)
S#define RTC_ALRMBSSR_MASKSS_3                ((uint32_t)0x08000000)
S#define RTC_ALRMBSSR_SS                      ((uint32_t)0x00007FFF)
S
S/********************  Bits definition for RTC_BKP0R register  ****************/
S#define RTC_BKP0R                            ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP1R register  ****************/
S#define RTC_BKP1R                            ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP2R register  ****************/
S#define RTC_BKP2R                            ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP3R register  ****************/
S#define RTC_BKP3R                            ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP4R register  ****************/
S#define RTC_BKP4R                            ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP5R register  ****************/
S#define RTC_BKP5R                            ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP6R register  ****************/
S#define RTC_BKP6R                            ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP7R register  ****************/
S#define RTC_BKP7R                            ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP8R register  ****************/
S#define RTC_BKP8R                            ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP9R register  ****************/
S#define RTC_BKP9R                            ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP10R register  ***************/
S#define RTC_BKP10R                           ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP11R register  ***************/
S#define RTC_BKP11R                           ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP12R register  ***************/
S#define RTC_BKP12R                           ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP13R register  ***************/
S#define RTC_BKP13R                           ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP14R register  ***************/
S#define RTC_BKP14R                           ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP15R register  ***************/
S#define RTC_BKP15R                           ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP16R register  ***************/
S#define RTC_BKP16R                           ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP17R register  ***************/
S#define RTC_BKP17R                           ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP18R register  ***************/
S#define RTC_BKP18R                           ((uint32_t)0xFFFFFFFF)
S
S/********************  Bits definition for RTC_BKP19R register  ***************/
S#define RTC_BKP19R                           ((uint32_t)0xFFFFFFFF)
S
S/******************************************************************************/
S/*                                                                            */
S/*                          Serial Audio Interface                            */
S/*                                                                            */
S/******************************************************************************/
S/********************  Bit definition for SAI_GCR register  *******************/
S#define  SAI_GCR_SYNCIN                  ((uint32_t)0x00000003)        /*!<SYNCIN[1:0] bits (Synchronization Inputs)   */
S#define  SAI_GCR_SYNCIN_0                ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  SAI_GCR_SYNCIN_1                ((uint32_t)0x00000002)        /*!<Bit 1 */
S
S#define  SAI_GCR_SYNCOUT                 ((uint32_t)0x00000030)        /*!<SYNCOUT[1:0] bits (Synchronization Outputs) */
S#define  SAI_GCR_SYNCOUT_0               ((uint32_t)0x00000010)        /*!<Bit 0 */
S#define  SAI_GCR_SYNCOUT_1               ((uint32_t)0x00000020)        /*!<Bit 1 */
S
S/*******************  Bit definition for SAI_xCR1 register  *******************/
S#define  SAI_xCR1_MODE                    ((uint32_t)0x00000003)        /*!<MODE[1:0] bits (Audio Block Mode)           */
S#define  SAI_xCR1_MODE_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  SAI_xCR1_MODE_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
S
S#define  SAI_xCR1_PRTCFG                  ((uint32_t)0x0000000C)        /*!<PRTCFG[1:0] bits (Protocol Configuration)   */
S#define  SAI_xCR1_PRTCFG_0                ((uint32_t)0x00000004)        /*!<Bit 0 */
S#define  SAI_xCR1_PRTCFG_1                ((uint32_t)0x00000008)        /*!<Bit 1 */
S
S#define  SAI_xCR1_DS                      ((uint32_t)0x000000E0)        /*!<DS[1:0] bits (Data Size) */
S#define  SAI_xCR1_DS_0                    ((uint32_t)0x00000020)        /*!<Bit 0 */
S#define  SAI_xCR1_DS_1                    ((uint32_t)0x00000040)        /*!<Bit 1 */
S#define  SAI_xCR1_DS_2                    ((uint32_t)0x00000080)        /*!<Bit 2 */
S
S#define  SAI_xCR1_LSBFIRST                ((uint32_t)0x00000100)        /*!<LSB First Configuration  */
S#define  SAI_xCR1_CKSTR                   ((uint32_t)0x00000200)        /*!<ClocK STRobing edge      */
S
S#define  SAI_xCR1_SYNCEN                  ((uint32_t)0x00000C00)        /*!<SYNCEN[1:0](SYNChronization ENable) */
S#define  SAI_xCR1_SYNCEN_0                ((uint32_t)0x00000400)        /*!<Bit 0 */
S#define  SAI_xCR1_SYNCEN_1                ((uint32_t)0x00000800)        /*!<Bit 1 */
S
S#define  SAI_xCR1_MONO                    ((uint32_t)0x00001000)        /*!<Mono mode                  */
S#define  SAI_xCR1_OUTDRIV                 ((uint32_t)0x00002000)        /*!<Output Drive               */
S#define  SAI_xCR1_SAIEN                   ((uint32_t)0x00010000)        /*!<Audio Block enable         */
S#define  SAI_xCR1_DMAEN                   ((uint32_t)0x00020000)        /*!<DMA enable                 */
S#define  SAI_xCR1_NODIV                   ((uint32_t)0x00080000)        /*!<No Divider Configuration   */
S
S#define  SAI_xCR1_MCKDIV                  ((uint32_t)0x00780000)        /*!<MCKDIV[3:0] (Master ClocK Divider)  */
S#define  SAI_xCR1_MCKDIV_0                ((uint32_t)0x00080000)        /*!<Bit 0  */
S#define  SAI_xCR1_MCKDIV_1                ((uint32_t)0x00100000)        /*!<Bit 1  */
S#define  SAI_xCR1_MCKDIV_2                ((uint32_t)0x00200000)        /*!<Bit 2  */
S#define  SAI_xCR1_MCKDIV_3                ((uint32_t)0x00400000)        /*!<Bit 3  */
S
S/*******************  Bit definition for SAI_xCR2 register  *******************/
S#define  SAI_xCR2_FTH                     ((uint32_t)0x00000003)        /*!<FTH[1:0](Fifo THreshold)  */
S#define  SAI_xCR2_FTH_0                   ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  SAI_xCR2_FTH_1                   ((uint32_t)0x00000002)        /*!<Bit 1 */
S
S#define  SAI_xCR2_FFLUSH                  ((uint32_t)0x00000008)        /*!<Fifo FLUSH                       */
S#define  SAI_xCR2_TRIS                    ((uint32_t)0x00000010)        /*!<TRIState Management on data line */
S#define  SAI_xCR2_MUTE                    ((uint32_t)0x00000020)        /*!<Mute mode                        */
S#define  SAI_xCR2_MUTEVAL                 ((uint32_t)0x00000040)        /*!<Muate value                      */
S
S#define  SAI_xCR2_MUTECNT                  ((uint32_t)0x00001F80)       /*!<MUTECNT[5:0] (MUTE counter) */
S#define  SAI_xCR2_MUTECNT_0               ((uint32_t)0x00000080)        /*!<Bit 0 */
S#define  SAI_xCR2_MUTECNT_1               ((uint32_t)0x00000100)        /*!<Bit 1 */
S#define  SAI_xCR2_MUTECNT_2               ((uint32_t)0x00000200)        /*!<Bit 2 */
S#define  SAI_xCR2_MUTECNT_3               ((uint32_t)0x00000400)        /*!<Bit 3 */
S#define  SAI_xCR2_MUTECNT_4               ((uint32_t)0x00000800)        /*!<Bit 4 */
S#define  SAI_xCR2_MUTECNT_5               ((uint32_t)0x00001000)        /*!<Bit 5 */
S
S#define  SAI_xCR2_CPL                     ((uint32_t)0x00080000)        /*!< Complement Bit             */
S
S#define  SAI_xCR2_COMP                    ((uint32_t)0x0000C000)        /*!<COMP[1:0] (Companding mode) */
S#define  SAI_xCR2_COMP_0                  ((uint32_t)0x00004000)        /*!<Bit 0 */
S#define  SAI_xCR2_COMP_1                  ((uint32_t)0x00008000)        /*!<Bit 1 */
S
S/******************  Bit definition for SAI_xFRCR register  *******************/
S#define  SAI_xFRCR_FRL                    ((uint32_t)0x000000FF)        /*!<FRL[1:0](Frame length)  */
S#define  SAI_xFRCR_FRL_0                  ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  SAI_xFRCR_FRL_1                  ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  SAI_xFRCR_FRL_2                  ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  SAI_xFRCR_FRL_3                  ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  SAI_xFRCR_FRL_4                  ((uint32_t)0x00000010)        /*!<Bit 4 */
S#define  SAI_xFRCR_FRL_5                  ((uint32_t)0x00000020)        /*!<Bit 5 */
S#define  SAI_xFRCR_FRL_6                  ((uint32_t)0x00000040)        /*!<Bit 6 */
S#define  SAI_xFRCR_FRL_7                  ((uint32_t)0x00000080)        /*!<Bit 7 */
S
S#define  SAI_xFRCR_FSALL                  ((uint32_t)0x00007F00)        /*!<FRL[1:0] (Frame synchronization active level length)  */
S#define  SAI_xFRCR_FSALL_0                ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  SAI_xFRCR_FSALL_1                ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  SAI_xFRCR_FSALL_2                ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  SAI_xFRCR_FSALL_3                ((uint32_t)0x00000800)        /*!<Bit 3 */
S#define  SAI_xFRCR_FSALL_4                ((uint32_t)0x00001000)        /*!<Bit 4 */
S#define  SAI_xFRCR_FSALL_5                ((uint32_t)0x00002000)        /*!<Bit 5 */
S#define  SAI_xFRCR_FSALL_6                ((uint32_t)0x00004000)        /*!<Bit 6 */
S
S#define  SAI_xFRCR_FSDEF                  ((uint32_t)0x00010000)        /*!< Frame Synchronization Definition */
S#define  SAI_xFRCR_FSPO                   ((uint32_t)0x00020000)        /*!<Frame Synchronization POLarity    */
S#define  SAI_xFRCR_FSOFF                  ((uint32_t)0x00040000)        /*!<Frame Synchronization OFFset      */
S
S/******************  Bit definition for SAI_xSLOTR register  *******************/
S#define  SAI_xSLOTR_FBOFF                 ((uint32_t)0x0000001F)        /*!<FRL[4:0](First Bit Offset)  */
S#define  SAI_xSLOTR_FBOFF_0               ((uint32_t)0x00000001)        /*!<Bit 0 */
S#define  SAI_xSLOTR_FBOFF_1               ((uint32_t)0x00000002)        /*!<Bit 1 */
S#define  SAI_xSLOTR_FBOFF_2               ((uint32_t)0x00000004)        /*!<Bit 2 */
S#define  SAI_xSLOTR_FBOFF_3               ((uint32_t)0x00000008)        /*!<Bit 3 */
S#define  SAI_xSLOTR_FBOFF_4               ((uint32_t)0x00000010)        /*!<Bit 4 */
S                                     
S#define  SAI_xSLOTR_SLOTSZ                ((uint32_t)0x000000C0)        /*!<SLOTSZ[1:0] (Slot size)  */
S#define  SAI_xSLOTR_SLOTSZ_0              ((uint32_t)0x00000040)        /*!<Bit 0 */
S#define  SAI_xSLOTR_SLOTSZ_1              ((uint32_t)0x00000080)        /*!<Bit 1 */
S
S#define  SAI_xSLOTR_NBSLOT                ((uint32_t)0x00000F00)        /*!<NBSLOT[3:0] (Number of Slot in audio Frame)  */
S#define  SAI_xSLOTR_NBSLOT_0              ((uint32_t)0x00000100)        /*!<Bit 0 */
S#define  SAI_xSLOTR_NBSLOT_1              ((uint32_t)0x00000200)        /*!<Bit 1 */
S#define  SAI_xSLOTR_NBSLOT_2              ((uint32_t)0x00000400)        /*!<Bit 2 */
S#define  SAI_xSLOTR_NBSLOT_3              ((uint32_t)0x00000800)        /*!<Bit 3 */
S
S#define  SAI_xSLOTR_SLOTEN                ((uint32_t)0xFFFF0000)        /*!<SLOTEN[15:0] (Slot Enable)  */
S
S/*******************  Bit definition for SAI_xIMR register  *******************/
S#define  SAI_xIMR_OVRUDRIE                ((uint32_t)0x00000001)        /*!<Overrun underrun interrupt enable                              */
S#define  SAI_xIMR_MUTEDETIE               ((uint32_t)0x00000002)        /*!<Mute detection interrupt enable                                */
S#define  SAI_xIMR_WCKCFGIE                ((uint32_t)0x00000004)        /*!<Wrong Clock Configuration interrupt enable                     */
S#define  SAI_xIMR_FREQIE                  ((uint32_t)0x00000008)        /*!<FIFO request interrupt enable                                  */
S#define  SAI_xIMR_CNRDYIE                 ((uint32_t)0x00000010)        /*!<Codec not ready interrupt enable                               */
S#define  SAI_xIMR_AFSDETIE                ((uint32_t)0x00000020)        /*!<Anticipated frame synchronization detection interrupt enable   */
S#define  SAI_xIMR_LFSDETIE                ((uint32_t)0x00000040)        /*!<Late frame synchronization detection interrupt enable          */
S
S/********************  Bit definition for SAI_xSR register  *******************/
S#define  SAI_xSR_OVRUDR                   ((uint32_t)0x00000001)         /*!<Overrun underrun                               */
S#define  SAI_xSR_MUTEDET                  ((uint32_t)0x00000002)         /*!<Mute detection                                 */
S#define  SAI_xSR_WCKCFG                   ((uint32_t)0x00000004)         /*!<Wrong Clock Configuration                      */
S#define  SAI_xSR_FREQ                     ((uint32_t)0x00000008)         /*!<FIFO request                                   */
S#define  SAI_xSR_CNRDY                    ((uint32_t)0x00000010)         /*!<Codec not ready                                */
S#define  SAI_xSR_AFSDET                   ((uint32_t)0x00000020)         /*!<Anticipated frame synchronization detection    */
S#define  SAI_xSR_LFSDET                   ((uint32_t)0x00000040)         /*!<Late frame synchronization detection           */
S
S#define  SAI_xSR_FLVL                     ((uint32_t)0x00070000)         /*!<FLVL[2:0] (FIFO Level Threshold)               */
S#define  SAI_xSR_FLVL_0                   ((uint32_t)0x00010000)         /*!<Bit 0 */
S#define  SAI_xSR_FLVL_1                   ((uint32_t)0x00020000)         /*!<Bit 1 */
S#define  SAI_xSR_FLVL_2                   ((uint32_t)0x00030000)         /*!<Bit 2 */
S
S/******************  Bit definition for SAI_xCLRFR register  ******************/
S#define  SAI_xCLRFR_COVRUDR               ((uint32_t)0x00000001)        /*!<Clear Overrun underrun                               */
S#define  SAI_xCLRFR_CMUTEDET              ((uint32_t)0x00000002)        /*!<Clear Mute detection                                 */
S#define  SAI_xCLRFR_CWCKCFG               ((uint32_t)0x00000004)        /*!<Clear Wrong Clock Configuration                      */
S#define  SAI_xCLRFR_CFREQ                 ((uint32_t)0x00000008)        /*!<Clear FIFO request                                   */
S#define  SAI_xCLRFR_CCNRDY                ((uint32_t)0x00000010)        /*!<Clear Codec not ready                                */
S#define  SAI_xCLRFR_CAFSDET               ((uint32_t)0x00000020)        /*!<Clear Anticipated frame synchronization detection    */
S#define  SAI_xCLRFR_CLFSDET               ((uint32_t)0x00000040)        /*!<Clear Late frame synchronization detection           */
S
S/******************  Bit definition for SAI_xDR register  ******************/
S#define  SAI_xDR_DATA                     ((uint32_t)0xFFFFFFFF)        
S
S/******************************************************************************/
S/*                                                                            */
S/*                          SD host Interface                                 */
S/*                                                                            */
S/******************************************************************************/
S/******************  Bit definition for SDIO_POWER register  ******************/
S#define  SDIO_POWER_PWRCTRL                  ((uint8_t)0x03)               /*!<PWRCTRL[1:0] bits (Power supply control bits) */
S#define  SDIO_POWER_PWRCTRL_0                ((uint8_t)0x01)               /*!<Bit 0 */
S#define  SDIO_POWER_PWRCTRL_1                ((uint8_t)0x02)               /*!<Bit 1 */
S
S/******************  Bit definition for SDIO_CLKCR register  ******************/
S#define  SDIO_CLKCR_CLKDIV                   ((uint16_t)0x00FF)            /*!<Clock divide factor             */
S#define  SDIO_CLKCR_CLKEN                    ((uint16_t)0x0100)            /*!<Clock enable bit                */
S#define  SDIO_CLKCR_PWRSAV                   ((uint16_t)0x0200)            /*!<Power saving configuration bit  */
S#define  SDIO_CLKCR_BYPASS                   ((uint16_t)0x0400)            /*!<Clock divider bypass enable bit */
S
S#define  SDIO_CLKCR_WIDBUS                   ((uint16_t)0x1800)            /*!<WIDBUS[1:0] bits (Wide bus mode enable bit) */
S#define  SDIO_CLKCR_WIDBUS_0                 ((uint16_t)0x0800)            /*!<Bit 0 */
S#define  SDIO_CLKCR_WIDBUS_1                 ((uint16_t)0x1000)            /*!<Bit 1 */
S
S#define  SDIO_CLKCR_NEGEDGE                  ((uint16_t)0x2000)            /*!<SDIO_CK dephasing selection bit */
S#define  SDIO_CLKCR_HWFC_EN                  ((uint16_t)0x4000)            /*!<HW Flow Control enable          */
S
S/*******************  Bit definition for SDIO_ARG register  *******************/
S#define  SDIO_ARG_CMDARG                     ((uint32_t)0xFFFFFFFF)            /*!<Command argument */
S
S/*******************  Bit definition for SDIO_CMD register  *******************/
S#define  SDIO_CMD_CMDINDEX                   ((uint16_t)0x003F)            /*!<Command Index                               */
S
S#define  SDIO_CMD_WAITRESP                   ((uint16_t)0x00C0)            /*!<WAITRESP[1:0] bits (Wait for response bits) */
S#define  SDIO_CMD_WAITRESP_0                 ((uint16_t)0x0040)            /*!< Bit 0 */
S#define  SDIO_CMD_WAITRESP_1                 ((uint16_t)0x0080)            /*!< Bit 1 */
S
S#define  SDIO_CMD_WAITINT                    ((uint16_t)0x0100)            /*!<CPSM Waits for Interrupt Request                               */
S#define  SDIO_CMD_WAITPEND                   ((uint16_t)0x0200)            /*!<CPSM Waits for ends of data transfer (CmdPend internal signal) */
S#define  SDIO_CMD_CPSMEN                     ((uint16_t)0x0400)            /*!<Command path state machine (CPSM) Enable bit                   */
S#define  SDIO_CMD_SDIOSUSPEND                ((uint16_t)0x0800)            /*!<SD I/O suspend command                                         */
S#define  SDIO_CMD_ENCMDCOMPL                 ((uint16_t)0x1000)            /*!<Enable CMD completion                                          */
S#define  SDIO_CMD_NIEN                       ((uint16_t)0x2000)            /*!<Not Interrupt Enable */
S#define  SDIO_CMD_CEATACMD                   ((uint16_t)0x4000)            /*!<CE-ATA command       */
S
S/*****************  Bit definition for SDIO_RESPCMD register  *****************/
S#define  SDIO_RESPCMD_RESPCMD                ((uint8_t)0x3F)               /*!<Response command index */
S
S/******************  Bit definition for SDIO_RESP0 register  ******************/
S#define  SDIO_RESP0_CARDSTATUS0              ((uint32_t)0xFFFFFFFF)        /*!<Card Status */
S
S/******************  Bit definition for SDIO_RESP1 register  ******************/
S#define  SDIO_RESP1_CARDSTATUS1              ((uint32_t)0xFFFFFFFF)        /*!<Card Status */
S
S/******************  Bit definition for SDIO_RESP2 register  ******************/
S#define  SDIO_RESP2_CARDSTATUS2              ((uint32_t)0xFFFFFFFF)        /*!<Card Status */
S
S/******************  Bit definition for SDIO_RESP3 register  ******************/
S#define  SDIO_RESP3_CARDSTATUS3              ((uint32_t)0xFFFFFFFF)        /*!<Card Status */
S
S/******************  Bit definition for SDIO_RESP4 register  ******************/
S#define  SDIO_RESP4_CARDSTATUS4              ((uint32_t)0xFFFFFFFF)        /*!<Card Status */
S
S/******************  Bit definition for SDIO_DTIMER register  *****************/
S#define  SDIO_DTIMER_DATATIME                ((uint32_t)0xFFFFFFFF)        /*!<Data timeout period. */
S
S/******************  Bit definition for SDIO_DLEN register  *******************/
S#define  SDIO_DLEN_DATALENGTH                ((uint32_t)0x01FFFFFF)        /*!<Data length value    */
S
S/******************  Bit definition for SDIO_DCTRL register  ******************/
S#define  SDIO_DCTRL_DTEN                     ((uint16_t)0x0001)            /*!<Data transfer enabled bit         */
S#define  SDIO_DCTRL_DTDIR                    ((uint16_t)0x0002)            /*!<Data transfer direction selection */
S#define  SDIO_DCTRL_DTMODE                   ((uint16_t)0x0004)            /*!<Data transfer mode selection      */
S#define  SDIO_DCTRL_DMAEN                    ((uint16_t)0x0008)            /*!<DMA enabled bit                   */
S
S#define  SDIO_DCTRL_DBLOCKSIZE               ((uint16_t)0x00F0)            /*!<DBLOCKSIZE[3:0] bits (Data block size) */
S#define  SDIO_DCTRL_DBLOCKSIZE_0             ((uint16_t)0x0010)            /*!<Bit 0 */
S#define  SDIO_DCTRL_DBLOCKSIZE_1             ((uint16_t)0x0020)            /*!<Bit 1 */
S#define  SDIO_DCTRL_DBLOCKSIZE_2             ((uint16_t)0x0040)            /*!<Bit 2 */
S#define  SDIO_DCTRL_DBLOCKSIZE_3             ((uint16_t)0x0080)            /*!<Bit 3 */
S
S#define  SDIO_DCTRL_RWSTART                  ((uint16_t)0x0100)            /*!<Read wait start         */
S#define  SDIO_DCTRL_RWSTOP                   ((uint16_t)0x0200)            /*!<Read wait stop          */
S#define  SDIO_DCTRL_RWMOD                    ((uint16_t)0x0400)            /*!<Read wait mode          */
S#define  SDIO_DCTRL_SDIOEN                   ((uint16_t)0x0800)            /*!<SD I/O enable functions */
S
S/******************  Bit definition for SDIO_DCOUNT register  *****************/
S#define  SDIO_DCOUNT_DATACOUNT               ((uint32_t)0x01FFFFFF)        /*!<Data count value */
S
S/******************  Bit definition for SDIO_STA register  ********************/
S#define  SDIO_STA_CCRCFAIL                   ((uint32_t)0x00000001)        /*!<Command response received (CRC check failed)  */
S#define  SDIO_STA_DCRCFAIL                   ((uint32_t)0x00000002)        /*!<Data block sent/received (CRC check failed)   */
S#define  SDIO_STA_CTIMEOUT                   ((uint32_t)0x00000004)        /*!<Command response timeout                      */
S#define  SDIO_STA_DTIMEOUT                   ((uint32_t)0x00000008)        /*!<Data timeout                                  */
S#define  SDIO_STA_TXUNDERR                   ((uint32_t)0x00000010)        /*!<Transmit FIFO underrun error                  */
S#define  SDIO_STA_RXOVERR                    ((uint32_t)0x00000020)        /*!<Received FIFO overrun error                   */
S#define  SDIO_STA_CMDREND                    ((uint32_t)0x00000040)        /*!<Command response received (CRC check passed)  */
S#define  SDIO_STA_CMDSENT                    ((uint32_t)0x00000080)        /*!<Command sent (no response required)           */
S#define  SDIO_STA_DATAEND                    ((uint32_t)0x00000100)        /*!<Data end (data counter, SDIDCOUNT, is zero)   */
S#define  SDIO_STA_STBITERR                   ((uint32_t)0x00000200)        /*!<Start bit not detected on all data signals in wide bus mode */
S#define  SDIO_STA_DBCKEND                    ((uint32_t)0x00000400)        /*!<Data block sent/received (CRC check passed)   */
S#define  SDIO_STA_CMDACT                     ((uint32_t)0x00000800)        /*!<Command transfer in progress                  */
S#define  SDIO_STA_TXACT                      ((uint32_t)0x00001000)        /*!<Data transmit in progress                     */
S#define  SDIO_STA_RXACT                      ((uint32_t)0x00002000)        /*!<Data receive in progress                      */
S#define  SDIO_STA_TXFIFOHE                   ((uint32_t)0x00004000)        /*!<Transmit FIFO Half Empty: at least 8 words can be written into the FIFO */
S#define  SDIO_STA_RXFIFOHF                   ((uint32_t)0x00008000)        /*!<Receive FIFO Half Full: there are at least 8 words in the FIFO */
S#define  SDIO_STA_TXFIFOF                    ((uint32_t)0x00010000)        /*!<Transmit FIFO full                            */
S#define  SDIO_STA_RXFIFOF                    ((uint32_t)0x00020000)        /*!<Receive FIFO full                             */
S#define  SDIO_STA_TXFIFOE                    ((uint32_t)0x00040000)        /*!<Transmit FIFO empty                           */
S#define  SDIO_STA_RXFIFOE                    ((uint32_t)0x00080000)        /*!<Receive FIFO empty                            */
S#define  SDIO_STA_TXDAVL                     ((uint32_t)0x00100000)        /*!<Data available in transmit FIFO               */
S#define  SDIO_STA_RXDAVL                     ((uint32_t)0x00200000)        /*!<Data available in receive FIFO                */
S#define  SDIO_STA_SDIOIT                     ((uint32_t)0x00400000)        /*!<SDIO interrupt received                       */
S#define  SDIO_STA_CEATAEND                   ((uint32_t)0x00800000)        /*!<CE-ATA command completion signal received for CMD61 */
S
S/*******************  Bit definition for SDIO_ICR register  *******************/
S#define  SDIO_ICR_CCRCFAILC                  ((uint32_t)0x00000001)        /*!<CCRCFAIL flag clear bit */
S#define  SDIO_ICR_DCRCFAILC                  ((uint32_t)0x00000002)        /*!<DCRCFAIL flag clear bit */
S#define  SDIO_ICR_CTIMEOUTC                  ((uint32_t)0x00000004)        /*!<CTIMEOUT flag clear bit */
S#define  SDIO_ICR_DTIMEOUTC                  ((uint32_t)0x00000008)        /*!<DTIMEOUT flag clear bit */
S#define  SDIO_ICR_TXUNDERRC                  ((uint32_t)0x00000010)        /*!<TXUNDERR flag clear bit */
S#define  SDIO_ICR_RXOVERRC                   ((uint32_t)0x00000020)        /*!<RXOVERR flag clear bit  */
S#define  SDIO_ICR_CMDRENDC                   ((uint32_t)0x00000040)        /*!<CMDREND flag clear bit  */
S#define  SDIO_ICR_CMDSENTC                   ((uint32_t)0x00000080)        /*!<CMDSENT flag clear bit  */
S#define  SDIO_ICR_DATAENDC                   ((uint32_t)0x00000100)        /*!<DATAEND flag clear bit  */
S#define  SDIO_ICR_STBITERRC                  ((uint32_t)0x00000200)        /*!<STBITERR flag clear bit */
S#define  SDIO_ICR_DBCKENDC                   ((uint32_t)0x00000400)        /*!<DBCKEND flag clear bit  */
S#define  SDIO_ICR_SDIOITC                    ((uint32_t)0x00400000)        /*!<SDIOIT flag clear bit   */
S#define  SDIO_ICR_CEATAENDC                  ((uint32_t)0x00800000)        /*!<CEATAEND flag clear bit */
S
S/******************  Bit definition for SDIO_MASK register  *******************/
S#define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!<Command CRC Fail Interrupt Enable          */
S#define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!<Data CRC Fail Interrupt Enable             */
S#define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!<Command TimeOut Interrupt Enable           */
S#define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!<Data TimeOut Interrupt Enable              */
S#define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!<Tx FIFO UnderRun Error Interrupt Enable    */
S#define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!<Rx FIFO OverRun Error Interrupt Enable     */
S#define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!<Command Response Received Interrupt Enable */
S#define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!<Command Sent Interrupt Enable              */
S#define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!<Data End Interrupt Enable                  */
S#define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!<Start Bit Error Interrupt Enable           */
S#define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!<Data Block End Interrupt Enable            */
S#define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!<CCommand Acting Interrupt Enable           */
S#define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!<Data Transmit Acting Interrupt Enable      */
S#define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!<Data receive acting interrupt enabled      */
S#define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!<Tx FIFO Half Empty interrupt Enable        */
S#define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!<Rx FIFO Half Full interrupt Enable         */
S#define  SDIO_MASK_TXFIFOFIE                 ((uint32_t)0x00010000)        /*!<Tx FIFO Full interrupt Enable              */
S#define  SDIO_MASK_RXFIFOFIE                 ((uint32_t)0x00020000)        /*!<Rx FIFO Full interrupt Enable              */
S#define  SDIO_MASK_TXFIFOEIE                 ((uint32_t)0x00040000)        /*!<Tx FIFO Empty interrupt Enable             */
S#define  SDIO_MASK_RXFIFOEIE                 ((uint32_t)0x00080000)        /*!<Rx FIFO Empty interrupt Enable             */
S#define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!<Data available in Tx FIFO interrupt Enable */
S#define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!<Data available in Rx FIFO interrupt Enable */
S#define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!<SDIO Mode Interrupt Received interrupt Enable */
S#define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!<CE-ATA command completion signal received Interrupt Enable */
S
S/*****************  Bit definition for SDIO_FIFOCNT register  *****************/
S#define  SDIO_FIFOCNT_FIFOCOUNT              ((uint32_t)0x00FFFFFF)        /*!<Remaining number of words to be written to or read from the FIFO */
S
S/******************  Bit definition for SDIO_FIFO register  *******************/
S#define  SDIO_FIFO_FIFODATA                  ((uint32_t)0xFFFFFFFF)        /*!<Receive and transmit FIFO data */
S
S/******************************************************************************/
S/*                                                                            */
S/*                        Serial Peripheral Interface                         */
S/*                                                                            */
S/******************************************************************************/
S/*******************  Bit definition for SPI_CR1 register  ********************/
S#define  SPI_CR1_CPHA                        ((uint16_t)0x0001)            /*!<Clock Phase      */
S#define  SPI_CR1_CPOL                        ((uint16_t)0x0002)            /*!<Clock Polarity   */
S#define  SPI_CR1_MSTR                        ((uint16_t)0x0004)            /*!<Master Selection */
S
S#define  SPI_CR1_BR                          ((uint16_t)0x0038)            /*!<BR[2:0] bits (Baud Rate Control) */
S#define  SPI_CR1_BR_0                        ((uint16_t)0x0008)            /*!<Bit 0 */
S#define  SPI_CR1_BR_1                        ((uint16_t)0x0010)            /*!<Bit 1 */
S#define  SPI_CR1_BR_2                        ((uint16_t)0x0020)            /*!<Bit 2 */
S
S#define  SPI_CR1_SPE                         ((uint16_t)0x0040)            /*!<SPI Enable                          */
S#define  SPI_CR1_LSBFIRST                    ((uint16_t)0x0080)            /*!<Frame Format                        */
S#define  SPI_CR1_SSI                         ((uint16_t)0x0100)            /*!<Internal slave select               */
S#define  SPI_CR1_SSM                         ((uint16_t)0x0200)            /*!<Software slave management           */
S#define  SPI_CR1_RXONLY                      ((uint16_t)0x0400)            /*!<Receive only                        */
S#define  SPI_CR1_DFF                         ((uint16_t)0x0800)            /*!<Data Frame Format                   */
S#define  SPI_CR1_CRCNEXT                     ((uint16_t)0x1000)            /*!<Transmit CRC next                   */
S#define  SPI_CR1_CRCEN                       ((uint16_t)0x2000)            /*!<Hardware CRC calculation enable     */
S#define  SPI_CR1_BIDIOE                      ((uint16_t)0x4000)            /*!<Output enable in bidirectional mode */
S#define  SPI_CR1_BIDIMODE                    ((uint16_t)0x8000)            /*!<Bidirectional data mode enable      */
S
S/*******************  Bit definition for SPI_CR2 register  ********************/
S#define  SPI_CR2_RXDMAEN                     ((uint8_t)0x01)               /*!<Rx Buffer DMA Enable                 */
S#define  SPI_CR2_TXDMAEN                     ((uint8_t)0x02)               /*!<Tx Buffer DMA Enable                 */
S#define  SPI_CR2_SSOE                        ((uint8_t)0x04)               /*!<SS Output Enable                     */
S#define  SPI_CR2_ERRIE                       ((uint8_t)0x20)               /*!<Error Interrupt Enable               */
S#define  SPI_CR2_RXNEIE                      ((uint8_t)0x40)               /*!<RX buffer Not Empty Interrupt Enable */
S#define  SPI_CR2_TXEIE                       ((uint8_t)0x80)               /*!<Tx buffer Empty Interrupt Enable     */
S
S/********************  Bit definition for SPI_SR register  ********************/
S#define  SPI_SR_RXNE                         ((uint8_t)0x01)               /*!<Receive buffer Not Empty */
S#define  SPI_SR_TXE                          ((uint8_t)0x02)               /*!<Transmit buffer Empty    */
S#define  SPI_SR_CHSIDE                       ((uint8_t)0x04)               /*!<Channel side             */
S#define  SPI_SR_UDR                          ((uint8_t)0x08)               /*!<Underrun flag            */
S#define  SPI_SR_CRCERR                       ((uint8_t)0x10)               /*!<CRC Error flag           */
S#define  SPI_SR_MODF                         ((uint8_t)0x20)               /*!<Mode fault               */
S#define  SPI_SR_OVR                          ((uint8_t)0x40)               /*!<Overrun flag             */
S#define  SPI_SR_BSY                          ((uint8_t)0x80)               /*!<Busy flag                */
S
S/********************  Bit definition for SPI_DR register  ********************/
S#define  SPI_DR_DR                           ((uint16_t)0xFFFF)            /*!<Data Register           */
S
S/*******************  Bit definition for SPI_CRCPR register  ******************/
S#define  SPI_CRCPR_CRCPOLY                   ((uint16_t)0xFFFF)            /*!<CRC polynomial register */
S
S/******************  Bit definition for SPI_RXCRCR register  ******************/
S#define  SPI_RXCRCR_RXCRC                    ((uint16_t)0xFFFF)            /*!<Rx CRC Register         */
S
S/******************  Bit definition for SPI_TXCRCR register  ******************/
S#define  SPI_TXCRCR_TXCRC                    ((uint16_t)0xFFFF)            /*!<Tx CRC Register         */
S
S/******************  Bit definition for SPI_I2SCFGR register  *****************/
S#define  SPI_I2SCFGR_CHLEN                   ((uint16_t)0x0001)            /*!<Channel length (number of bits per audio channel) */
S
S#define  SPI_I2SCFGR_DATLEN                  ((uint16_t)0x0006)            /*!<DATLEN[1:0] bits (Data length to be transferred)  */
S#define  SPI_I2SCFGR_DATLEN_0                ((uint16_t)0x0002)            /*!<Bit 0 */
S#define  SPI_I2SCFGR_DATLEN_1                ((uint16_t)0x0004)            /*!<Bit 1 */
S
S#define  SPI_I2SCFGR_CKPOL                   ((uint16_t)0x0008)            /*!<steady state clock polarity               */
S
S#define  SPI_I2SCFGR_I2SSTD                  ((uint16_t)0x0030)            /*!<I2SSTD[1:0] bits (I2S standard selection) */
S#define  SPI_I2SCFGR_I2SSTD_0                ((uint16_t)0x0010)            /*!<Bit 0 */
S#define  SPI_I2SCFGR_I2SSTD_1                ((uint16_t)0x0020)            /*!<Bit 1 */
S
S#define  SPI_I2SCFGR_PCMSYNC                 ((uint16_t)0x0080)            /*!<PCM frame synchronization                 */
S
S#define  SPI_I2SCFGR_I2SCFG                  ((uint16_t)0x0300)            /*!<I2SCFG[1:0] bits (I2S configuration mode) */
S#define  SPI_I2SCFGR_I2SCFG_0                ((uint16_t)0x0100)            /*!<Bit 0 */
S#define  SPI_I2SCFGR_I2SCFG_1                ((uint16_t)0x0200)            /*!<Bit 1 */
S
S#define  SPI_I2SCFGR_I2SE                    ((uint16_t)0x0400)            /*!<I2S Enable         */
S#define  SPI_I2SCFGR_I2SMOD                  ((uint16_t)0x0800)            /*!<I2S mode selection */
S
S/******************  Bit definition for SPI_I2SPR register  *******************/
S#define  SPI_I2SPR_I2SDIV                    ((uint16_t)0x00FF)            /*!<I2S Linear prescaler         */
S#define  SPI_I2SPR_ODD                       ((uint16_t)0x0100)            /*!<Odd factor for the prescaler */
S#define  SPI_I2SPR_MCKOE                     ((uint16_t)0x0200)            /*!<Master Clock Output Enable   */
S
S/******************************************************************************/
S/*                                                                            */
S/*                                 SYSCFG                                     */
S/*                                                                            */
S/******************************************************************************/
S/******************  Bit definition for SYSCFG_MEMRMP register  ***************/  
S#define SYSCFG_MEMRMP_MEM_MODE          ((uint32_t)0x00000007) /*!< SYSCFG_Memory Remap Config */
S#define SYSCFG_MEMRMP_MEM_MODE_0        ((uint32_t)0x00000001) /*!<Bit 0 */
S#define SYSCFG_MEMRMP_MEM_MODE_1        ((uint32_t)0x00000002) /*!<Bit 1 */
S#define SYSCFG_MEMRMP_MEM_MODE_2        ((uint32_t)0x00000004) /*!<Bit 2 */
S
S#define SYSCFG_MEMRMP_FB_MODE           ((uint32_t)0x00000100) /*!< User Flash Bank mode */
S
S#define SYSCFG_MEMRMP_SWP_FMC           ((uint32_t)0x00000C00) /*!< FMC memory mapping swap */
S#define SYSCFG_MEMRMP_SWP_FMC_0         ((uint32_t)0x00000400) /*!<Bit 0 */
S#define SYSCFG_MEMRMP_SWP_FMC_1         ((uint32_t)0x00000800) /*!<Bit 1 */
S
S
S/******************  Bit definition for SYSCFG_PMC register  ******************/
S#define SYSCFG_PMC_ADCxDC2              ((uint32_t)0x00070000) /*!< Refer to AN4073 on how to use this bit  */
S#define SYSCFG_PMC_ADC1DC2              ((uint32_t)0x00010000) /*!< Refer to AN4073 on how to use this bit  */
S#define SYSCFG_PMC_ADC2DC2              ((uint32_t)0x00020000) /*!< Refer to AN4073 on how to use this bit  */
S#define SYSCFG_PMC_ADC3DC2              ((uint32_t)0x00040000) /*!< Refer to AN4073 on how to use this bit  */
S
S#define SYSCFG_PMC_MII_RMII_SEL         ((uint32_t)0x00800000) /*!<Ethernet PHY interface selection */
S/* Old MII_RMII_SEL bit definition, maintained for legacy purpose */
S#define SYSCFG_PMC_MII_RMII             SYSCFG_PMC_MII_RMII_SEL
S
S/*****************  Bit definition for SYSCFG_EXTICR1 register  ***************/
S#define SYSCFG_EXTICR1_EXTI0            ((uint16_t)0x000F) /*!<EXTI 0 configuration */
S#define SYSCFG_EXTICR1_EXTI1            ((uint16_t)0x00F0) /*!<EXTI 1 configuration */
S#define SYSCFG_EXTICR1_EXTI2            ((uint16_t)0x0F00) /*!<EXTI 2 configuration */
S#define SYSCFG_EXTICR1_EXTI3            ((uint16_t)0xF000) /*!<EXTI 3 configuration */
S/** 
S  * @brief   EXTI0 configuration  
S  */ 
S#define SYSCFG_EXTICR1_EXTI0_PA         ((uint16_t)0x0000) /*!<PA[0] pin */
S#define SYSCFG_EXTICR1_EXTI0_PB         ((uint16_t)0x0001) /*!<PB[0] pin */
S#define SYSCFG_EXTICR1_EXTI0_PC         ((uint16_t)0x0002) /*!<PC[0] pin */
S#define SYSCFG_EXTICR1_EXTI0_PD         ((uint16_t)0x0003) /*!<PD[0] pin */
S#define SYSCFG_EXTICR1_EXTI0_PE         ((uint16_t)0x0004) /*!<PE[0] pin */
S#define SYSCFG_EXTICR1_EXTI0_PF         ((uint16_t)0x0005) /*!<PF[0] pin */
S#define SYSCFG_EXTICR1_EXTI0_PG         ((uint16_t)0x0006) /*!<PG[0] pin */
S#define SYSCFG_EXTICR1_EXTI0_PH         ((uint16_t)0x0007) /*!<PH[0] pin */
S#define SYSCFG_EXTICR1_EXTI0_PI         ((uint16_t)0x0008) /*!<PI[0] pin */
S#define SYSCFG_EXTICR1_EXTI0_PJ         ((uint16_t)0x0009) /*!<PJ[0] pin */
S#define SYSCFG_EXTICR1_EXTI0_PK         ((uint16_t)0x000A) /*!<PK[0] pin */
S
S/** 
S  * @brief   EXTI1 configuration  
S  */ 
S#define SYSCFG_EXTICR1_EXTI1_PA         ((uint16_t)0x0000) /*!<PA[1] pin */
S#define SYSCFG_EXTICR1_EXTI1_PB         ((uint16_t)0x0010) /*!<PB[1] pin */
S#define SYSCFG_EXTICR1_EXTI1_PC         ((uint16_t)0x0020) /*!<PC[1] pin */
S#define SYSCFG_EXTICR1_EXTI1_PD         ((uint16_t)0x0030) /*!<PD[1] pin */
S#define SYSCFG_EXTICR1_EXTI1_PE         ((uint16_t)0x0040) /*!<PE[1] pin */
S#define SYSCFG_EXTICR1_EXTI1_PF         ((uint16_t)0x0050) /*!<PF[1] pin */
S#define SYSCFG_EXTICR1_EXTI1_PG         ((uint16_t)0x0060) /*!<PG[1] pin */
S#define SYSCFG_EXTICR1_EXTI1_PH         ((uint16_t)0x0070) /*!<PH[1] pin */
S#define SYSCFG_EXTICR1_EXTI1_PI         ((uint16_t)0x0080) /*!<PI[1] pin */
S#define SYSCFG_EXTICR1_EXTI1_PJ         ((uint16_t)0x0090) /*!<PJ[1] pin */
S#define SYSCFG_EXTICR1_EXTI1_PK         ((uint16_t)0x00A0) /*!<PK[1] pin */
S
S/** 
S  * @brief   EXTI2 configuration  
S  */ 
S#define SYSCFG_EXTICR1_EXTI2_PA         ((uint16_t)0x0000) /*!<PA[2] pin */
S#define SYSCFG_EXTICR1_EXTI2_PB         ((uint16_t)0x0100) /*!<PB[2] pin */
S#define SYSCFG_EXTICR1_EXTI2_PC         ((uint16_t)0x0200) /*!<PC[2] pin */
S#define SYSCFG_EXTICR1_EXTI2_PD         ((uint16_t)0x0300) /*!<PD[2] pin */
S#define SYSCFG_EXTICR1_EXTI2_PE         ((uint16_t)0x0400) /*!<PE[2] pin */
S#define SYSCFG_EXTICR1_EXTI2_PF         ((uint16_t)0x0500) /*!<PF[2] pin */
S#define SYSCFG_EXTICR1_EXTI2_PG         ((uint16_t)0x0600) /*!<PG[2] pin */
S#define SYSCFG_EXTICR1_EXTI2_PH         ((uint16_t)0x0700) /*!<PH[2] pin */
S#define SYSCFG_EXTICR1_EXTI2_PI         ((uint16_t)0x0800) /*!<PI[2] pin */
S#define SYSCFG_EXTICR1_EXTI2_PJ         ((uint16_t)0x0900) /*!<PJ[2] pin */
S#define SYSCFG_EXTICR1_EXTI2_PK         ((uint16_t)0x0A00) /*!<PK[2] pin */
S
S/** 
S  * @brief   EXTI3 configuration  
S  */ 
S#define SYSCFG_EXTICR1_EXTI3_PA         ((uint16_t)0x0000) /*!<PA[3] pin */
S#define SYSCFG_EXTICR1_EXTI3_PB         ((uint16_t)0x1000) /*!<PB[3] pin */
S#define SYSCFG_EXTICR1_EXTI3_PC         ((uint16_t)0x2000) /*!<PC[3] pin */
S#define SYSCFG_EXTICR1_EXTI3_PD         ((uint16_t)0x3000) /*!<PD[3] pin */
S#define SYSCFG_EXTICR1_EXTI3_PE         ((uint16_t)0x4000) /*!<PE[3] pin */
S#define SYSCFG_EXTICR1_EXTI3_PF         ((uint16_t)0x5000) /*!<PF[3] pin */
S#define SYSCFG_EXTICR1_EXTI3_PG         ((uint16_t)0x6000) /*!<PG[3] pin */
S#define SYSCFG_EXTICR1_EXTI3_PH         ((uint16_t)0x7000) /*!<PH[3] pin */
S#define SYSCFG_EXTICR1_EXTI3_PI         ((uint16_t)0x8000) /*!<PI[3] pin */
S#define SYSCFG_EXTICR1_EXTI3_PJ         ((uint16_t)0x9000) /*!<PJ[3] pin */
S#define SYSCFG_EXTICR1_EXTI3_PK         ((uint16_t)0xA000) /*!<PK[3] pin */
S
S/*****************  Bit definition for SYSCFG_EXTICR2 register  ***************/
S#define SYSCFG_EXTICR2_EXTI4            ((uint16_t)0x000F) /*!<EXTI 4 configuration */
S#define SYSCFG_EXTICR2_EXTI5            ((uint16_t)0x00F0) /*!<EXTI 5 configuration */
S#define SYSCFG_EXTICR2_EXTI6            ((uint16_t)0x0F00) /*!<EXTI 6 configuration */
S#define SYSCFG_EXTICR2_EXTI7            ((uint16_t)0xF000) /*!<EXTI 7 configuration */
S/** 
S  * @brief   EXTI4 configuration  
S  */ 
S#define SYSCFG_EXTICR2_EXTI4_PA         ((uint16_t)0x0000) /*!<PA[4] pin */
S#define SYSCFG_EXTICR2_EXTI4_PB         ((uint16_t)0x0001) /*!<PB[4] pin */
S#define SYSCFG_EXTICR2_EXTI4_PC         ((uint16_t)0x0002) /*!<PC[4] pin */
S#define SYSCFG_EXTICR2_EXTI4_PD         ((uint16_t)0x0003) /*!<PD[4] pin */
S#define SYSCFG_EXTICR2_EXTI4_PE         ((uint16_t)0x0004) /*!<PE[4] pin */
S#define SYSCFG_EXTICR2_EXTI4_PF         ((uint16_t)0x0005) /*!<PF[4] pin */
S#define SYSCFG_EXTICR2_EXTI4_PG         ((uint16_t)0x0006) /*!<PG[4] pin */
S#define SYSCFG_EXTICR2_EXTI4_PH         ((uint16_t)0x0007) /*!<PH[4] pin */
S#define SYSCFG_EXTICR2_EXTI4_PI         ((uint16_t)0x0008) /*!<PI[4] pin */
S#define SYSCFG_EXTICR2_EXTI4_PJ         ((uint16_t)0x0009) /*!<PJ[4] pin */
S#define SYSCFG_EXTICR2_EXTI4_PK         ((uint16_t)0x000A) /*!<PK[4] pin */
S
S/** 
S  * @brief   EXTI5 configuration  
S  */ 
S#define SYSCFG_EXTICR2_EXTI5_PA         ((uint16_t)0x0000) /*!<PA[5] pin */
S#define SYSCFG_EXTICR2_EXTI5_PB         ((uint16_t)0x0010) /*!<PB[5] pin */
S#define SYSCFG_EXTICR2_EXTI5_PC         ((uint16_t)0x0020) /*!<PC[5] pin */
S#define SYSCFG_EXTICR2_EXTI5_PD         ((uint16_t)0x0030) /*!<PD[5] pin */
S#define SYSCFG_EXTICR2_EXTI5_PE         ((uint16_t)0x0040) /*!<PE[5] pin */
S#define SYSCFG_EXTICR2_EXTI5_PF         ((uint16_t)0x0050) /*!<PF[5] pin */
S#define SYSCFG_EXTICR2_EXTI5_PG         ((uint16_t)0x0060) /*!<PG[5] pin */
S#define SYSCFG_EXTICR2_EXTI5_PH         ((uint16_t)0x0070) /*!<PH[5] pin */
S#define SYSCFG_EXTICR2_EXTI5_PI         ((uint16_t)0x0080) /*!<PI[5] pin */
S#define SYSCFG_EXTICR2_EXTI5_PJ         ((uint16_t)0x0090) /*!<PJ[5] pin */
S#define SYSCFG_EXTICR2_EXTI5_PK         ((uint16_t)0x00A0) /*!<PK[5] pin */
S
S/** 
S  * @brief   EXTI6 configuration  
S  */ 
S#define SYSCFG_EXTICR2_EXTI6_PA         ((uint16_t)0x0000) /*!<PA[6] pin */
S#define SYSCFG_EXTICR2_EXTI6_PB         ((uint16_t)0x0100) /*!<PB[6] pin */
S#define SYSCFG_EXTICR2_EXTI6_PC         ((uint16_t)0x0200) /*!<PC[6] pin */
S#define SYSCFG_EXTICR2_EXTI6_PD         ((uint16_t)0x0300) /*!<PD[6] pin */
S#define SYSCFG_EXTICR2_EXTI6_PE         ((uint16_t)0x0400) /*!<PE[6] pin */
S#define SYSCFG_EXTICR2_EXTI6_PF         ((uint16_t)0x0500) /*!<PF[6] pin */
S#define SYSCFG_EXTICR2_EXTI6_PG         ((uint16_t)0x0600) /*!<PG[6] pin */
S#define SYSCFG_EXTICR2_EXTI6_PH         ((uint16_t)0x0700) /*!<PH[6] pin */
S#define SYSCFG_EXTICR2_EXTI6_PI         ((uint16_t)0x0800) /*!<PI[6] pin */
S#define SYSCFG_EXTICR2_EXTI6_PJ         ((uint16_t)0x0900) /*!<PJ[6] pin */
S#define SYSCFG_EXTICR2_EXTI6_PK         ((uint16_t)0x0A00) /*!<PK[6] pin */
S
S/** 
S  * @brief   EXTI7 configuration  
S  */ 
S#define SYSCFG_EXTICR2_EXTI7_PA         ((uint16_t)0x0000) /*!<PA[7] pin */
S#define SYSCFG_EXTICR2_EXTI7_PB         ((uint16_t)0x1000) /*!<PB[7] pin */
S#define SYSCFG_EXTICR2_EXTI7_PC         ((uint16_t)0x2000) /*!<PC[7] pin */
S#define SYSCFG_EXTICR2_EXTI7_PD         ((uint16_t)0x3000) /*!<PD[7] pin */
S#define SYSCFG_EXTICR2_EXTI7_PE         ((uint16_t)0x4000) /*!<PE[7] pin */
S#define SYSCFG_EXTICR2_EXTI7_PF         ((uint16_t)0x5000) /*!<PF[7] pin */
S#define SYSCFG_EXTICR2_EXTI7_PG         ((uint16_t)0x6000) /*!<PG[7] pin */
S#define SYSCFG_EXTICR2_EXTI7_PH         ((uint16_t)0x7000) /*!<PH[7] pin */
S#define SYSCFG_EXTICR2_EXTI7_PI         ((uint16_t)0x8000) /*!<PI[7] pin */
S#define SYSCFG_EXTICR2_EXTI7_PJ         ((uint16_t)0x9000) /*!<PJ[7] pin */
S#define SYSCFG_EXTICR2_EXTI7_PK         ((uint16_t)0xA000) /*!<PK[7] pin */
S
S/*****************  Bit definition for SYSCFG_EXTICR3 register  ***************/
S#define SYSCFG_EXTICR3_EXTI8            ((uint16_t)0x000F) /*!<EXTI 8 configuration */
S#define SYSCFG_EXTICR3_EXTI9            ((uint16_t)0x00F0) /*!<EXTI 9 configuration */
S#define SYSCFG_EXTICR3_EXTI10           ((uint16_t)0x0F00) /*!<EXTI 10 configuration */
S#define SYSCFG_EXTICR3_EXTI11           ((uint16_t)0xF000) /*!<EXTI 11 configuration */
S           
S/** 
S  * @brief   EXTI8 configuration  
S  */ 
S#define SYSCFG_EXTICR3_EXTI8_PA         ((uint16_t)0x0000) /*!<PA[8] pin */
S#define SYSCFG_EXTICR3_EXTI8_PB         ((uint16_t)0x0001) /*!<PB[8] pin */
S#define SYSCFG_EXTICR3_EXTI8_PC         ((uint16_t)0x0002) /*!<PC[8] pin */
S#define SYSCFG_EXTICR3_EXTI8_PD         ((uint16_t)0x0003) /*!<PD[8] pin */
S#define SYSCFG_EXTICR3_EXTI8_PE         ((uint16_t)0x0004) /*!<PE[8] pin */
S#define SYSCFG_EXTICR3_EXTI8_PF         ((uint16_t)0x0005) /*!<PF[8] pin */
S#define SYSCFG_EXTICR3_EXTI8_PG         ((uint16_t)0x0006) /*!<PG[8] pin */
S#define SYSCFG_EXTICR3_EXTI8_PH         ((uint16_t)0x0007) /*!<PH[8] pin */
S#define SYSCFG_EXTICR3_EXTI8_PI         ((uint16_t)0x0008) /*!<PI[8] pin */
S#define SYSCFG_EXTICR3_EXTI8_PJ         ((uint16_t)0x0009) /*!<PJ[8] pin */
S
S/** 
S  * @brief   EXTI9 configuration  
S  */ 
S#define SYSCFG_EXTICR3_EXTI9_PA         ((uint16_t)0x0000) /*!<PA[9] pin */
S#define SYSCFG_EXTICR3_EXTI9_PB         ((uint16_t)0x0010) /*!<PB[9] pin */
S#define SYSCFG_EXTICR3_EXTI9_PC         ((uint16_t)0x0020) /*!<PC[9] pin */
S#define SYSCFG_EXTICR3_EXTI9_PD         ((uint16_t)0x0030) /*!<PD[9] pin */
S#define SYSCFG_EXTICR3_EXTI9_PE         ((uint16_t)0x0040) /*!<PE[9] pin */
S#define SYSCFG_EXTICR3_EXTI9_PF         ((uint16_t)0x0050) /*!<PF[9] pin */
S#define SYSCFG_EXTICR3_EXTI9_PG         ((uint16_t)0x0060) /*!<PG[9] pin */
S#define SYSCFG_EXTICR3_EXTI9_PH         ((uint16_t)0x0070) /*!<PH[9] pin */
S#define SYSCFG_EXTICR3_EXTI9_PI         ((uint16_t)0x0080) /*!<PI[9] pin */
S#define SYSCFG_EXTICR3_EXTI9_PJ         ((uint16_t)0x0090) /*!<PJ[9] pin */
S
S/** 
S  * @brief   EXTI10 configuration  
S  */ 
S#define SYSCFG_EXTICR3_EXTI10_PA        ((uint16_t)0x0000) /*!<PA[10] pin */
S#define SYSCFG_EXTICR3_EXTI10_PB        ((uint16_t)0x0100) /*!<PB[10] pin */
S#define SYSCFG_EXTICR3_EXTI10_PC        ((uint16_t)0x0200) /*!<PC[10] pin */
S#define SYSCFG_EXTICR3_EXTI10_PD        ((uint16_t)0x0300) /*!<PD[10] pin */
S#define SYSCFG_EXTICR3_EXTI10_PE        ((uint16_t)0x0400) /*!<PE[10] pin */
S#define SYSCFG_EXTICR3_EXTI10_PF        ((uint16_t)0x0500) /*!<PF[10] pin */
S#define SYSCFG_EXTICR3_EXTI10_PG        ((uint16_t)0x0600) /*!<PG[10] pin */
S#define SYSCFG_EXTICR3_EXTI10_PH        ((uint16_t)0x0700) /*!<PH[10] pin */
S#define SYSCFG_EXTICR3_EXTI10_PI        ((uint16_t)0x0800) /*!<PI[10] pin */
S#define SYSCFG_EXTICR3_EXTI10_PJ        ((uint16_t)0x0900) /*!<PJ[10] pin */
S
S/** 
S  * @brief   EXTI11 configuration  
S  */ 
S#define SYSCFG_EXTICR3_EXTI11_PA        ((uint16_t)0x0000) /*!<PA[11] pin */
S#define SYSCFG_EXTICR3_EXTI11_PB        ((uint16_t)0x1000) /*!<PB[11] pin */
S#define SYSCFG_EXTICR3_EXTI11_PC        ((uint16_t)0x2000) /*!<PC[11] pin */
S#define SYSCFG_EXTICR3_EXTI11_PD        ((uint16_t)0x3000) /*!<PD[11] pin */
S#define SYSCFG_EXTICR3_EXTI11_PE        ((uint16_t)0x4000) /*!<PE[11] pin */
S#define SYSCFG_EXTICR3_EXTI11_PF        ((uint16_t)0x5000) /*!<PF[11] pin */
S#define SYSCFG_EXTICR3_EXTI11_PG        ((uint16_t)0x6000) /*!<PG[11] pin */
S#define SYSCFG_EXTICR3_EXTI11_PH        ((uint16_t)0x7000) /*!<PH[11] pin */
S#define SYSCFG_EXTICR3_EXTI11_PI        ((uint16_t)0x8000) /*!<PI[11] pin */
S#define SYSCFG_EXTICR3_EXTI11_PJ        ((uint16_t)0x9000) /*!<PJ[11] pin */
S
S/*****************  Bit definition for SYSCFG_EXTICR4 register  ***************/
S#define SYSCFG_EXTICR4_EXTI12           ((uint16_t)0x000F) /*!<EXTI 12 configuration */
S#define SYSCFG_EXTICR4_EXTI13           ((uint16_t)0x00F0) /*!<EXTI 13 configuration */
S#define SYSCFG_EXTICR4_EXTI14           ((uint16_t)0x0F00) /*!<EXTI 14 configuration */
S#define SYSCFG_EXTICR4_EXTI15           ((uint16_t)0xF000) /*!<EXTI 15 configuration */
S/** 
S  * @brief   EXTI12 configuration  
S  */ 
S#define SYSCFG_EXTICR4_EXTI12_PA        ((uint16_t)0x0000) /*!<PA[12] pin */
S#define SYSCFG_EXTICR4_EXTI12_PB        ((uint16_t)0x0001) /*!<PB[12] pin */
S#define SYSCFG_EXTICR4_EXTI12_PC        ((uint16_t)0x0002) /*!<PC[12] pin */
S#define SYSCFG_EXTICR4_EXTI12_PD        ((uint16_t)0x0003) /*!<PD[12] pin */
S#define SYSCFG_EXTICR4_EXTI12_PE        ((uint16_t)0x0004) /*!<PE[12] pin */
S#define SYSCFG_EXTICR4_EXTI12_PF        ((uint16_t)0x0005) /*!<PF[12] pin */
S#define SYSCFG_EXTICR4_EXTI12_PG        ((uint16_t)0x0006) /*!<PG[12] pin */
S#define SYSCFG_EXTICR4_EXTI12_PH        ((uint16_t)0x0007) /*!<PH[12] pin */
S#define SYSCFG_EXTICR4_EXTI12_PI        ((uint16_t)0x0008) /*!<PI[12] pin */
S#define SYSCFG_EXTICR4_EXTI12_PJ        ((uint16_t)0x0009) /*!<PJ[12] pin */
S
S/** 
S  * @brief   EXTI13 configuration  
S  */ 
S#define SYSCFG_EXTICR4_EXTI13_PA        ((uint16_t)0x0000) /*!<PA[13] pin */
S#define SYSCFG_EXTICR4_EXTI13_PB        ((uint16_t)0x0010) /*!<PB[13] pin */
S#define SYSCFG_EXTICR4_EXTI13_PC        ((uint16_t)0x0020) /*!<PC[13] pin */
S#define SYSCFG_EXTICR4_EXTI13_PD        ((uint16_t)0x0030) /*!<PD[13] pin */
S#define SYSCFG_EXTICR4_EXTI13_PE        ((uint16_t)0x0040) /*!<PE[13] pin */
S#define SYSCFG_EXTICR4_EXTI13_PF        ((uint16_t)0x0050) /*!<PF[13] pin */
S#define SYSCFG_EXTICR4_EXTI13_PG        ((uint16_t)0x0060) /*!<PG[13] pin */
S#define SYSCFG_EXTICR4_EXTI13_PH        ((uint16_t)0x0070) /*!<PH[13] pin */
S#define SYSCFG_EXTICR4_EXTI13_PI        ((uint16_t)0x0008) /*!<PI[13] pin */
S#define SYSCFG_EXTICR4_EXTI13_PJ        ((uint16_t)0x0009) /*!<PJ[13] pin */
S
S/** 
S  * @brief   EXTI14 configuration  
S  */ 
S#define SYSCFG_EXTICR4_EXTI14_PA        ((uint16_t)0x0000) /*!<PA[14] pin */
S#define SYSCFG_EXTICR4_EXTI14_PB        ((uint16_t)0x0100) /*!<PB[14] pin */
S#define SYSCFG_EXTICR4_EXTI14_PC        ((uint16_t)0x0200) /*!<PC[14] pin */
S#define SYSCFG_EXTICR4_EXTI14_PD        ((uint16_t)0x0300) /*!<PD[14] pin */
S#define SYSCFG_EXTICR4_EXTI14_PE        ((uint16_t)0x0400) /*!<PE[14] pin */
S#define SYSCFG_EXTICR4_EXTI14_PF        ((uint16_t)0x0500) /*!<PF[14] pin */
S#define SYSCFG_EXTICR4_EXTI14_PG        ((uint16_t)0x0600) /*!<PG[14] pin */
S#define SYSCFG_EXTICR4_EXTI14_PH        ((uint16_t)0x0700) /*!<PH[14] pin */
S#define SYSCFG_EXTICR4_EXTI14_PI        ((uint16_t)0x0800) /*!<PI[14] pin */
S#define SYSCFG_EXTICR4_EXTI14_PJ        ((uint16_t)0x0900) /*!<PJ[14] pin */
S
S/** 
S  * @brief   EXTI15 configuration  
S  */ 
S#define SYSCFG_EXTICR4_EXTI15_PA        ((uint16_t)0x0000) /*!<PA[15] pin */
S#define SYSCFG_EXTICR4_EXTI15_PB        ((uint16_t)0x1000) /*!<PB[15] pin */
S#define SYSCFG_EXTICR4_EXTI15_PC        ((uint16_t)0x2000) /*!<PC[15] pin */
S#define SYSCFG_EXTICR4_EXTI15_PD        ((uint16_t)0x3000) /*!<PD[15] pin */
S#define SYSCFG_EXTICR4_EXTI15_PE        ((uint16_t)0x4000) /*!<PE[15] pin */
S#define SYSCFG_EXTICR4_EXTI15_PF        ((uint16_t)0x5000) /*!<PF[15] pin */
S#define SYSCFG_EXTICR4_EXTI15_PG        ((uint16_t)0x6000) /*!<PG[15] pin */
S#define SYSCFG_EXTICR4_EXTI15_PH        ((uint16_t)0x7000) /*!<PH[15] pin */
S#define SYSCFG_EXTICR4_EXTI15_PI        ((uint16_t)0x8000) /*!<PI[15] pin */
S#define SYSCFG_EXTICR4_EXTI15_PJ        ((uint16_t)0x9000) /*!<PJ[15] pin */
S
S/******************  Bit definition for SYSCFG_CMPCR register  ****************/  
S#define SYSCFG_CMPCR_CMP_PD             ((uint32_t)0x00000001) /*!<Compensation cell ready flag */
S#define SYSCFG_CMPCR_READY              ((uint32_t)0x00000100) /*!<Compensation cell power-down */
S
S/******************************************************************************/
S/*                                                                            */
S/*                                    TIM                                     */
S/*                                                                            */
S/******************************************************************************/
S/*******************  Bit definition for TIM_CR1 register  ********************/
S#define  TIM_CR1_CEN                         ((uint16_t)0x0001)            /*!<Counter enable        */
S#define  TIM_CR1_UDIS                        ((uint16_t)0x0002)            /*!<Update disable        */
S#define  TIM_CR1_URS                         ((uint16_t)0x0004)            /*!<Update request source */
S#define  TIM_CR1_OPM                         ((uint16_t)0x0008)            /*!<One pulse mode        */
S#define  TIM_CR1_DIR                         ((uint16_t)0x0010)            /*!<Direction             */
S
S#define  TIM_CR1_CMS                         ((uint16_t)0x0060)            /*!<CMS[1:0] bits (Center-aligned mode selection) */
S#define  TIM_CR1_CMS_0                       ((uint16_t)0x0020)            /*!<Bit 0 */
S#define  TIM_CR1_CMS_1                       ((uint16_t)0x0040)            /*!<Bit 1 */
S
S#define  TIM_CR1_ARPE                        ((uint16_t)0x0080)            /*!<Auto-reload preload enable     */
S
S#define  TIM_CR1_CKD                         ((uint16_t)0x0300)            /*!<CKD[1:0] bits (clock division) */
S#define  TIM_CR1_CKD_0                       ((uint16_t)0x0100)            /*!<Bit 0 */
S#define  TIM_CR1_CKD_1                       ((uint16_t)0x0200)            /*!<Bit 1 */
S
S/*******************  Bit definition for TIM_CR2 register  ********************/
S#define  TIM_CR2_CCPC                        ((uint16_t)0x0001)            /*!<Capture/Compare Preloaded Control        */
S#define  TIM_CR2_CCUS                        ((uint16_t)0x0004)            /*!<Capture/Compare Control Update Selection */
S#define  TIM_CR2_CCDS                        ((uint16_t)0x0008)            /*!<Capture/Compare DMA Selection            */
S
S#define  TIM_CR2_MMS                         ((uint16_t)0x0070)            /*!<MMS[2:0] bits (Master Mode Selection) */
S#define  TIM_CR2_MMS_0                       ((uint16_t)0x0010)            /*!<Bit 0 */
S#define  TIM_CR2_MMS_1                       ((uint16_t)0x0020)            /*!<Bit 1 */
S#define  TIM_CR2_MMS_2                       ((uint16_t)0x0040)            /*!<Bit 2 */
S
S#define  TIM_CR2_TI1S                        ((uint16_t)0x0080)            /*!<TI1 Selection */
S#define  TIM_CR2_OIS1                        ((uint16_t)0x0100)            /*!<Output Idle state 1 (OC1 output)  */
S#define  TIM_CR2_OIS1N                       ((uint16_t)0x0200)            /*!<Output Idle state 1 (OC1N output) */
S#define  TIM_CR2_OIS2                        ((uint16_t)0x0400)            /*!<Output Idle state 2 (OC2 output)  */
S#define  TIM_CR2_OIS2N                       ((uint16_t)0x0800)            /*!<Output Idle state 2 (OC2N output) */
S#define  TIM_CR2_OIS3                        ((uint16_t)0x1000)            /*!<Output Idle state 3 (OC3 output)  */
S#define  TIM_CR2_OIS3N                       ((uint16_t)0x2000)            /*!<Output Idle state 3 (OC3N output) */
S#define  TIM_CR2_OIS4                        ((uint16_t)0x4000)            /*!<Output Idle state 4 (OC4 output)  */
S
S/*******************  Bit definition for TIM_SMCR register  *******************/
S#define  TIM_SMCR_SMS                        ((uint16_t)0x0007)            /*!<SMS[2:0] bits (Slave mode selection)    */
S#define  TIM_SMCR_SMS_0                      ((uint16_t)0x0001)            /*!<Bit 0 */
S#define  TIM_SMCR_SMS_1                      ((uint16_t)0x0002)            /*!<Bit 1 */
S#define  TIM_SMCR_SMS_2                      ((uint16_t)0x0004)            /*!<Bit 2 */
S
S#define  TIM_SMCR_TS                         ((uint16_t)0x0070)            /*!<TS[2:0] bits (Trigger selection)        */
S#define  TIM_SMCR_TS_0                       ((uint16_t)0x0010)            /*!<Bit 0 */
S#define  TIM_SMCR_TS_1                       ((uint16_t)0x0020)            /*!<Bit 1 */
S#define  TIM_SMCR_TS_2                       ((uint16_t)0x0040)            /*!<Bit 2 */
S
S#define  TIM_SMCR_MSM                        ((uint16_t)0x0080)            /*!<Master/slave mode                       */
S
S#define  TIM_SMCR_ETF                        ((uint16_t)0x0F00)            /*!<ETF[3:0] bits (External trigger filter) */
S#define  TIM_SMCR_ETF_0                      ((uint16_t)0x0100)            /*!<Bit 0 */
S#define  TIM_SMCR_ETF_1                      ((uint16_t)0x0200)            /*!<Bit 1 */
S#define  TIM_SMCR_ETF_2                      ((uint16_t)0x0400)            /*!<Bit 2 */
S#define  TIM_SMCR_ETF_3                      ((uint16_t)0x0800)            /*!<Bit 3 */
S
S#define  TIM_SMCR_ETPS                       ((uint16_t)0x3000)            /*!<ETPS[1:0] bits (External trigger prescaler) */
S#define  TIM_SMCR_ETPS_0                     ((uint16_t)0x1000)            /*!<Bit 0 */
S#define  TIM_SMCR_ETPS_1                     ((uint16_t)0x2000)            /*!<Bit 1 */
S
S#define  TIM_SMCR_ECE                        ((uint16_t)0x4000)            /*!<External clock enable     */
S#define  TIM_SMCR_ETP                        ((uint16_t)0x8000)            /*!<External trigger polarity */
S
S/*******************  Bit definition for TIM_DIER register  *******************/
S#define  TIM_DIER_UIE                        ((uint16_t)0x0001)            /*!<Update interrupt enable */
S#define  TIM_DIER_CC1IE                      ((uint16_t)0x0002)            /*!<Capture/Compare 1 interrupt enable   */
S#define  TIM_DIER_CC2IE                      ((uint16_t)0x0004)            /*!<Capture/Compare 2 interrupt enable   */
S#define  TIM_DIER_CC3IE                      ((uint16_t)0x0008)            /*!<Capture/Compare 3 interrupt enable   */
S#define  TIM_DIER_CC4IE                      ((uint16_t)0x0010)            /*!<Capture/Compare 4 interrupt enable   */
S#define  TIM_DIER_COMIE                      ((uint16_t)0x0020)            /*!<COM interrupt enable                 */
S#define  TIM_DIER_TIE                        ((uint16_t)0x0040)            /*!<Trigger interrupt enable             */
S#define  TIM_DIER_BIE                        ((uint16_t)0x0080)            /*!<Break interrupt enable               */
S#define  TIM_DIER_UDE                        ((uint16_t)0x0100)            /*!<Update DMA request enable            */
S#define  TIM_DIER_CC1DE                      ((uint16_t)0x0200)            /*!<Capture/Compare 1 DMA request enable */
S#define  TIM_DIER_CC2DE                      ((uint16_t)0x0400)            /*!<Capture/Compare 2 DMA request enable */
S#define  TIM_DIER_CC3DE                      ((uint16_t)0x0800)            /*!<Capture/Compare 3 DMA request enable */
S#define  TIM_DIER_CC4DE                      ((uint16_t)0x1000)            /*!<Capture/Compare 4 DMA request enable */
S#define  TIM_DIER_COMDE                      ((uint16_t)0x2000)            /*!<COM DMA request enable               */
S#define  TIM_DIER_TDE                        ((uint16_t)0x4000)            /*!<Trigger DMA request enable           */
S
S/********************  Bit definition for TIM_SR register  ********************/
S#define  TIM_SR_UIF                          ((uint16_t)0x0001)            /*!<Update interrupt Flag              */
S#define  TIM_SR_CC1IF                        ((uint16_t)0x0002)            /*!<Capture/Compare 1 interrupt Flag   */
S#define  TIM_SR_CC2IF                        ((uint16_t)0x0004)            /*!<Capture/Compare 2 interrupt Flag   */
S#define  TIM_SR_CC3IF                        ((uint16_t)0x0008)            /*!<Capture/Compare 3 interrupt Flag   */
S#define  TIM_SR_CC4IF                        ((uint16_t)0x0010)            /*!<Capture/Compare 4 interrupt Flag   */
S#define  TIM_SR_COMIF                        ((uint16_t)0x0020)            /*!<COM interrupt Flag                 */
S#define  TIM_SR_TIF                          ((uint16_t)0x0040)            /*!<Trigger interrupt Flag             */
S#define  TIM_SR_BIF                          ((uint16_t)0x0080)            /*!<Break interrupt Flag               */
S#define  TIM_SR_CC1OF                        ((uint16_t)0x0200)            /*!<Capture/Compare 1 Overcapture Flag */
S#define  TIM_SR_CC2OF                        ((uint16_t)0x0400)            /*!<Capture/Compare 2 Overcapture Flag */
S#define  TIM_SR_CC3OF                        ((uint16_t)0x0800)            /*!<Capture/Compare 3 Overcapture Flag */
S#define  TIM_SR_CC4OF                        ((uint16_t)0x1000)            /*!<Capture/Compare 4 Overcapture Flag */
S
S/*******************  Bit definition for TIM_EGR register  ********************/
S#define  TIM_EGR_UG                          ((uint8_t)0x01)               /*!<Update Generation                         */
S#define  TIM_EGR_CC1G                        ((uint8_t)0x02)               /*!<Capture/Compare 1 Generation              */
S#define  TIM_EGR_CC2G                        ((uint8_t)0x04)               /*!<Capture/Compare 2 Generation              */
S#define  TIM_EGR_CC3G                        ((uint8_t)0x08)               /*!<Capture/Compare 3 Generation              */
S#define  TIM_EGR_CC4G                        ((uint8_t)0x10)               /*!<Capture/Compare 4 Generation              */
S#define  TIM_EGR_COMG                        ((uint8_t)0x20)               /*!<Capture/Compare Control Update Generation */
S#define  TIM_EGR_TG                          ((uint8_t)0x40)               /*!<Trigger Generation                        */
S#define  TIM_EGR_BG                          ((uint8_t)0x80)               /*!<Break Generation                          */
S
S/******************  Bit definition for TIM_CCMR1 register  *******************/
S#define  TIM_CCMR1_CC1S                      ((uint16_t)0x0003)            /*!<CC1S[1:0] bits (Capture/Compare 1 Selection) */
S#define  TIM_CCMR1_CC1S_0                    ((uint16_t)0x0001)            /*!<Bit 0 */
S#define  TIM_CCMR1_CC1S_1                    ((uint16_t)0x0002)            /*!<Bit 1 */
S
S#define  TIM_CCMR1_OC1FE                     ((uint16_t)0x0004)            /*!<Output Compare 1 Fast enable                 */
S#define  TIM_CCMR1_OC1PE                     ((uint16_t)0x0008)            /*!<Output Compare 1 Preload enable              */
S
S#define  TIM_CCMR1_OC1M                      ((uint16_t)0x0070)            /*!<OC1M[2:0] bits (Output Compare 1 Mode)       */
S#define  TIM_CCMR1_OC1M_0                    ((uint16_t)0x0010)            /*!<Bit 0 */
S#define  TIM_CCMR1_OC1M_1                    ((uint16_t)0x0020)            /*!<Bit 1 */
S#define  TIM_CCMR1_OC1M_2                    ((uint16_t)0x0040)            /*!<Bit 2 */
S
S#define  TIM_CCMR1_OC1CE                     ((uint16_t)0x0080)            /*!<Output Compare 1Clear Enable                 */
S
S#define  TIM_CCMR1_CC2S                      ((uint16_t)0x0300)            /*!<CC2S[1:0] bits (Capture/Compare 2 Selection) */
S#define  TIM_CCMR1_CC2S_0                    ((uint16_t)0x0100)            /*!<Bit 0 */
S#define  TIM_CCMR1_CC2S_1                    ((uint16_t)0x0200)            /*!<Bit 1 */
S
S#define  TIM_CCMR1_OC2FE                     ((uint16_t)0x0400)            /*!<Output Compare 2 Fast enable                 */
S#define  TIM_CCMR1_OC2PE                     ((uint16_t)0x0800)            /*!<Output Compare 2 Preload enable              */
S
S#define  TIM_CCMR1_OC2M                      ((uint16_t)0x7000)            /*!<OC2M[2:0] bits (Output Compare 2 Mode)       */
S#define  TIM_CCMR1_OC2M_0                    ((uint16_t)0x1000)            /*!<Bit 0 */
S#define  TIM_CCMR1_OC2M_1                    ((uint16_t)0x2000)            /*!<Bit 1 */
S#define  TIM_CCMR1_OC2M_2                    ((uint16_t)0x4000)            /*!<Bit 2 */
S
S#define  TIM_CCMR1_OC2CE                     ((uint16_t)0x8000)            /*!<Output Compare 2 Clear Enable */
S
S/*----------------------------------------------------------------------------*/
S
S#define  TIM_CCMR1_IC1PSC                    ((uint16_t)0x000C)            /*!<IC1PSC[1:0] bits (Input Capture 1 Prescaler) */
S#define  TIM_CCMR1_IC1PSC_0                  ((uint16_t)0x0004)            /*!<Bit 0 */
S#define  TIM_CCMR1_IC1PSC_1                  ((uint16_t)0x0008)            /*!<Bit 1 */
S
S#define  TIM_CCMR1_IC1F                      ((uint16_t)0x00F0)            /*!<IC1F[3:0] bits (Input Capture 1 Filter)      */
S#define  TIM_CCMR1_IC1F_0                    ((uint16_t)0x0010)            /*!<Bit 0 */
S#define  TIM_CCMR1_IC1F_1                    ((uint16_t)0x0020)            /*!<Bit 1 */
S#define  TIM_CCMR1_IC1F_2                    ((uint16_t)0x0040)            /*!<Bit 2 */
S#define  TIM_CCMR1_IC1F_3                    ((uint16_t)0x0080)            /*!<Bit 3 */
S
S#define  TIM_CCMR1_IC2PSC                    ((uint16_t)0x0C00)            /*!<IC2PSC[1:0] bits (Input Capture 2 Prescaler)  */
S#define  TIM_CCMR1_IC2PSC_0                  ((uint16_t)0x0400)            /*!<Bit 0 */
S#define  TIM_CCMR1_IC2PSC_1                  ((uint16_t)0x0800)            /*!<Bit 1 */
S
S#define  TIM_CCMR1_IC2F                      ((uint16_t)0xF000)            /*!<IC2F[3:0] bits (Input Capture 2 Filter)       */
S#define  TIM_CCMR1_IC2F_0                    ((uint16_t)0x1000)            /*!<Bit 0 */
S#define  TIM_CCMR1_IC2F_1                    ((uint16_t)0x2000)            /*!<Bit 1 */
S#define  TIM_CCMR1_IC2F_2                    ((uint16_t)0x4000)            /*!<Bit 2 */
S#define  TIM_CCMR1_IC2F_3                    ((uint16_t)0x8000)            /*!<Bit 3 */
S
S/******************  Bit definition for TIM_CCMR2 register  *******************/
S#define  TIM_CCMR2_CC3S                      ((uint16_t)0x0003)            /*!<CC3S[1:0] bits (Capture/Compare 3 Selection)  */
S#define  TIM_CCMR2_CC3S_0                    ((uint16_t)0x0001)            /*!<Bit 0 */
S#define  TIM_CCMR2_CC3S_1                    ((uint16_t)0x0002)            /*!<Bit 1 */
S
S#define  TIM_CCMR2_OC3FE                     ((uint16_t)0x0004)            /*!<Output Compare 3 Fast enable           */
S#define  TIM_CCMR2_OC3PE                     ((uint16_t)0x0008)            /*!<Output Compare 3 Preload enable        */
S
S#define  TIM_CCMR2_OC3M                      ((uint16_t)0x0070)            /*!<OC3M[2:0] bits (Output Compare 3 Mode) */
S#define  TIM_CCMR2_OC3M_0                    ((uint16_t)0x0010)            /*!<Bit 0 */
S#define  TIM_CCMR2_OC3M_1                    ((uint16_t)0x0020)            /*!<Bit 1 */
S#define  TIM_CCMR2_OC3M_2                    ((uint16_t)0x0040)            /*!<Bit 2 */
S
S#define  TIM_CCMR2_OC3CE                     ((uint16_t)0x0080)            /*!<Output Compare 3 Clear Enable */
S
S#define  TIM_CCMR2_CC4S                      ((uint16_t)0x0300)            /*!<CC4S[1:0] bits (Capture/Compare 4 Selection) */
S#define  TIM_CCMR2_CC4S_0                    ((uint16_t)0x0100)            /*!<Bit 0 */
S#define  TIM_CCMR2_CC4S_1                    ((uint16_t)0x0200)            /*!<Bit 1 */
S
S#define  TIM_CCMR2_OC4FE                     ((uint16_t)0x0400)            /*!<Output Compare 4 Fast enable    */
S#define  TIM_CCMR2_OC4PE                     ((uint16_t)0x0800)            /*!<Output Compare 4 Preload enable */
S
S#define  TIM_CCMR2_OC4M                      ((uint16_t)0x7000)            /*!<OC4M[2:0] bits (Output Compare 4 Mode) */
S#define  TIM_CCMR2_OC4M_0                    ((uint16_t)0x1000)            /*!<Bit 0 */
S#define  TIM_CCMR2_OC4M_1                    ((uint16_t)0x2000)            /*!<Bit 1 */
S#define  TIM_CCMR2_OC4M_2                    ((uint16_t)0x4000)            /*!<Bit 2 */
S
S#define  TIM_CCMR2_OC4CE                     ((uint16_t)0x8000)            /*!<Output Compare 4 Clear Enable */
S
S/*----------------------------------------------------------------------------*/
S
S#define  TIM_CCMR2_IC3PSC                    ((uint16_t)0x000C)            /*!<IC3PSC[1:0] bits (Input Capture 3 Prescaler) */
S#define  TIM_CCMR2_IC3PSC_0                  ((uint16_t)0x0004)            /*!<Bit 0 */
S#define  TIM_CCMR2_IC3PSC_1                  ((uint16_t)0x0008)            /*!<Bit 1 */
S
S#define  TIM_CCMR2_IC3F                      ((uint16_t)0x00F0)            /*!<IC3F[3:0] bits (Input Capture 3 Filter) */
S#define  TIM_CCMR2_IC3F_0                    ((uint16_t)0x0010)            /*!<Bit 0 */
S#define  TIM_CCMR2_IC3F_1                    ((uint16_t)0x0020)            /*!<Bit 1 */
S#define  TIM_CCMR2_IC3F_2                    ((uint16_t)0x0040)            /*!<Bit 2 */
S#define  TIM_CCMR2_IC3F_3                    ((uint16_t)0x0080)            /*!<Bit 3 */
S
S#define  TIM_CCMR2_IC4PSC                    ((uint16_t)0x0C00)            /*!<IC4PSC[1:0] bits (Input Capture 4 Prescaler) */
S#define  TIM_CCMR2_IC4PSC_0                  ((uint16_t)0x0400)            /*!<Bit 0 */
S#define  TIM_CCMR2_IC4PSC_1                  ((uint16_t)0x0800)            /*!<Bit 1 */
S
S#define  TIM_CCMR2_IC4F                      ((uint16_t)0xF000)            /*!<IC4F[3:0] bits (Input Capture 4 Filter) */
S#define  TIM_CCMR2_IC4F_0                    ((uint16_t)0x1000)            /*!<Bit 0 */
S#define  TIM_CCMR2_IC4F_1                    ((uint16_t)0x2000)            /*!<Bit 1 */
S#define  TIM_CCMR2_IC4F_2                    ((uint16_t)0x4000)            /*!<Bit 2 */
S#define  TIM_CCMR2_IC4F_3                    ((uint16_t)0x8000)            /*!<Bit 3 */
S
S/*******************  Bit definition for TIM_CCER register  *******************/
S#define  TIM_CCER_CC1E                       ((uint16_t)0x0001)            /*!<Capture/Compare 1 output enable                 */
S#define  TIM_CCER_CC1P                       ((uint16_t)0x0002)            /*!<Capture/Compare 1 output Polarity               */
S#define  TIM_CCER_CC1NE                      ((uint16_t)0x0004)            /*!<Capture/Compare 1 Complementary output enable   */
S#define  TIM_CCER_CC1NP                      ((uint16_t)0x0008)            /*!<Capture/Compare 1 Complementary output Polarity */
S#define  TIM_CCER_CC2E                       ((uint16_t)0x0010)            /*!<Capture/Compare 2 output enable                 */
S#define  TIM_CCER_CC2P                       ((uint16_t)0x0020)            /*!<Capture/Compare 2 output Polarity               */
S#define  TIM_CCER_CC2NE                      ((uint16_t)0x0040)            /*!<Capture/Compare 2 Complementary output enable   */
S#define  TIM_CCER_CC2NP                      ((uint16_t)0x0080)            /*!<Capture/Compare 2 Complementary output Polarity */
S#define  TIM_CCER_CC3E                       ((uint16_t)0x0100)            /*!<Capture/Compare 3 output enable                 */
S#define  TIM_CCER_CC3P                       ((uint16_t)0x0200)            /*!<Capture/Compare 3 output Polarity               */
S#define  TIM_CCER_CC3NE                      ((uint16_t)0x0400)            /*!<Capture/Compare 3 Complementary output enable   */
S#define  TIM_CCER_CC3NP                      ((uint16_t)0x0800)            /*!<Capture/Compare 3 Complementary output Polarity */
S#define  TIM_CCER_CC4E                       ((uint16_t)0x1000)            /*!<Capture/Compare 4 output enable                 */
S#define  TIM_CCER_CC4P                       ((uint16_t)0x2000)            /*!<Capture/Compare 4 output Polarity               */
S#define  TIM_CCER_CC4NP                      ((uint16_t)0x8000)            /*!<Capture/Compare 4 Complementary output Polarity */
S
S/*******************  Bit definition for TIM_CNT register  ********************/
S#define  TIM_CNT_CNT                         ((uint16_t)0xFFFF)            /*!<Counter Value            */
S
S/*******************  Bit definition for TIM_PSC register  ********************/
S#define  TIM_PSC_PSC                         ((uint16_t)0xFFFF)            /*!<Prescaler Value          */
S
S/*******************  Bit definition for TIM_ARR register  ********************/
S#define  TIM_ARR_ARR                         ((uint16_t)0xFFFF)            /*!<actual auto-reload Value */
S
S/*******************  Bit definition for TIM_RCR register  ********************/
S#define  TIM_RCR_REP                         ((uint8_t)0xFF)               /*!<Repetition Counter Value */
S
S/*******************  Bit definition for TIM_CCR1 register  *******************/
S#define  TIM_CCR1_CCR1                       ((uint16_t)0xFFFF)            /*!<Capture/Compare 1 Value  */
S
S/*******************  Bit definition for TIM_CCR2 register  *******************/
S#define  TIM_CCR2_CCR2                       ((uint16_t)0xFFFF)            /*!<Capture/Compare 2 Value  */
S
S/*******************  Bit definition for TIM_CCR3 register  *******************/
S#define  TIM_CCR3_CCR3                       ((uint16_t)0xFFFF)            /*!<Capture/Compare 3 Value  */
S
S/*******************  Bit definition for TIM_CCR4 register  *******************/
S#define  TIM_CCR4_CCR4                       ((uint16_t)0xFFFF)            /*!<Capture/Compare 4 Value  */
S
S/*******************  Bit definition for TIM_BDTR register  *******************/
S#define  TIM_BDTR_DTG                        ((uint16_t)0x00FF)            /*!<DTG[0:7] bits (Dead-Time Generator set-up) */
S#define  TIM_BDTR_DTG_0                      ((uint16_t)0x0001)            /*!<Bit 0 */
S#define  TIM_BDTR_DTG_1                      ((uint16_t)0x0002)            /*!<Bit 1 */
S#define  TIM_BDTR_DTG_2                      ((uint16_t)0x0004)            /*!<Bit 2 */
S#define  TIM_BDTR_DTG_3                      ((uint16_t)0x0008)            /*!<Bit 3 */
S#define  TIM_BDTR_DTG_4                      ((uint16_t)0x0010)            /*!<Bit 4 */
S#define  TIM_BDTR_DTG_5                      ((uint16_t)0x0020)            /*!<Bit 5 */
S#define  TIM_BDTR_DTG_6                      ((uint16_t)0x0040)            /*!<Bit 6 */
S#define  TIM_BDTR_DTG_7                      ((uint16_t)0x0080)            /*!<Bit 7 */
S
S#define  TIM_BDTR_LOCK                       ((uint16_t)0x0300)            /*!<LOCK[1:0] bits (Lock Configuration) */
S#define  TIM_BDTR_LOCK_0                     ((uint16_t)0x0100)            /*!<Bit 0 */
S#define  TIM_BDTR_LOCK_1                     ((uint16_t)0x0200)            /*!<Bit 1 */
S
S#define  TIM_BDTR_OSSI                       ((uint16_t)0x0400)            /*!<Off-State Selection for Idle mode */
S#define  TIM_BDTR_OSSR                       ((uint16_t)0x0800)            /*!<Off-State Selection for Run mode  */
S#define  TIM_BDTR_BKE                        ((uint16_t)0x1000)            /*!<Break enable                      */
S#define  TIM_BDTR_BKP                        ((uint16_t)0x2000)            /*!<Break Polarity                    */
S#define  TIM_BDTR_AOE                        ((uint16_t)0x4000)            /*!<Automatic Output enable           */
S#define  TIM_BDTR_MOE                        ((uint16_t)0x8000)            /*!<Main Output enable                */
S
S/*******************  Bit definition for TIM_DCR register  ********************/
S#define  TIM_DCR_DBA                         ((uint16_t)0x001F)            /*!<DBA[4:0] bits (DMA Base Address) */
S#define  TIM_DCR_DBA_0                       ((uint16_t)0x0001)            /*!<Bit 0 */
S#define  TIM_DCR_DBA_1                       ((uint16_t)0x0002)            /*!<Bit 1 */
S#define  TIM_DCR_DBA_2                       ((uint16_t)0x0004)            /*!<Bit 2 */
S#define  TIM_DCR_DBA_3                       ((uint16_t)0x0008)            /*!<Bit 3 */
S#define  TIM_DCR_DBA_4                       ((uint16_t)0x0010)            /*!<Bit 4 */
S
S#define  TIM_DCR_DBL                         ((uint16_t)0x1F00)            /*!<DBL[4:0] bits (DMA Burst Length) */
S#define  TIM_DCR_DBL_0                       ((uint16_t)0x0100)            /*!<Bit 0 */
S#define  TIM_DCR_DBL_1                       ((uint16_t)0x0200)            /*!<Bit 1 */
S#define  TIM_DCR_DBL_2                       ((uint16_t)0x0400)            /*!<Bit 2 */
S#define  TIM_DCR_DBL_3                       ((uint16_t)0x0800)            /*!<Bit 3 */
S#define  TIM_DCR_DBL_4                       ((uint16_t)0x1000)            /*!<Bit 4 */
S
S/*******************  Bit definition for TIM_DMAR register  *******************/
S#define  TIM_DMAR_DMAB                       ((uint16_t)0xFFFF)            /*!<DMA register for burst accesses                    */
S
S/*******************  Bit definition for TIM_OR register  *********************/
S#define TIM_OR_TI4_RMP                       ((uint16_t)0x00C0)            /*!<TI4_RMP[1:0] bits (TIM5 Input 4 remap)             */
S#define TIM_OR_TI4_RMP_0                     ((uint16_t)0x0040)            /*!<Bit 0 */
S#define TIM_OR_TI4_RMP_1                     ((uint16_t)0x0080)            /*!<Bit 1 */
S#define TIM_OR_ITR1_RMP                      ((uint16_t)0x0C00)            /*!<ITR1_RMP[1:0] bits (TIM2 Internal trigger 1 remap) */
S#define TIM_OR_ITR1_RMP_0                    ((uint16_t)0x0400)            /*!<Bit 0 */
S#define TIM_OR_ITR1_RMP_1                    ((uint16_t)0x0800)            /*!<Bit 1 */
S
S
S/******************************************************************************/
S/*                                                                            */
S/*         Universal Synchronous Asynchronous Receiver Transmitter            */
S/*                                                                            */
S/******************************************************************************/
S/*******************  Bit definition for USART_SR register  *******************/
S#define  USART_SR_PE                         ((uint16_t)0x0001)            /*!<Parity Error                 */
S#define  USART_SR_FE                         ((uint16_t)0x0002)            /*!<Framing Error                */
S#define  USART_SR_NE                         ((uint16_t)0x0004)            /*!<Noise Error Flag             */
S#define  USART_SR_ORE                        ((uint16_t)0x0008)            /*!<OverRun Error                */
S#define  USART_SR_IDLE                       ((uint16_t)0x0010)            /*!<IDLE line detected           */
S#define  USART_SR_RXNE                       ((uint16_t)0x0020)            /*!<Read Data Register Not Empty */
S#define  USART_SR_TC                         ((uint16_t)0x0040)            /*!<Transmission Complete        */
S#define  USART_SR_TXE                        ((uint16_t)0x0080)            /*!<Transmit Data Register Empty */
S#define  USART_SR_LBD                        ((uint16_t)0x0100)            /*!<LIN Break Detection Flag     */
S#define  USART_SR_CTS                        ((uint16_t)0x0200)            /*!<CTS Flag                     */
S
S/*******************  Bit definition for USART_DR register  *******************/
S#define  USART_DR_DR                         ((uint16_t)0x01FF)            /*!<Data value */
S
S/******************  Bit definition for USART_BRR register  *******************/
S#define  USART_BRR_DIV_Fraction              ((uint16_t)0x000F)            /*!<Fraction of USARTDIV */
S#define  USART_BRR_DIV_Mantissa              ((uint16_t)0xFFF0)            /*!<Mantissa of USARTDIV */
S
S/******************  Bit definition for USART_CR1 register  *******************/
S#define  USART_CR1_SBK                       ((uint16_t)0x0001)            /*!<Send Break                             */
S#define  USART_CR1_RWU                       ((uint16_t)0x0002)            /*!<Receiver wakeup                        */
S#define  USART_CR1_RE                        ((uint16_t)0x0004)            /*!<Receiver Enable                        */
S#define  USART_CR1_TE                        ((uint16_t)0x0008)            /*!<Transmitter Enable                     */
S#define  USART_CR1_IDLEIE                    ((uint16_t)0x0010)            /*!<IDLE Interrupt Enable                  */
S#define  USART_CR1_RXNEIE                    ((uint16_t)0x0020)            /*!<RXNE Interrupt Enable                  */
S#define  USART_CR1_TCIE                      ((uint16_t)0x0040)            /*!<Transmission Complete Interrupt Enable */
S#define  USART_CR1_TXEIE                     ((uint16_t)0x0080)            /*!<PE Interrupt Enable                    */
S#define  USART_CR1_PEIE                      ((uint16_t)0x0100)            /*!<PE Interrupt Enable                    */
S#define  USART_CR1_PS                        ((uint16_t)0x0200)            /*!<Parity Selection                       */
S#define  USART_CR1_PCE                       ((uint16_t)0x0400)            /*!<Parity Control Enable                  */
S#define  USART_CR1_WAKE                      ((uint16_t)0x0800)            /*!<Wakeup method                          */
S#define  USART_CR1_M                         ((uint16_t)0x1000)            /*!<Word length                            */
S#define  USART_CR1_UE                        ((uint16_t)0x2000)            /*!<USART Enable                           */
S#define  USART_CR1_OVER8                     ((uint16_t)0x8000)            /*!<USART Oversampling by 8 enable         */
S
S/******************  Bit definition for USART_CR2 register  *******************/
S#define  USART_CR2_ADD                       ((uint16_t)0x000F)            /*!<Address of the USART node            */
S#define  USART_CR2_LBDL                      ((uint16_t)0x0020)            /*!<LIN Break Detection Length           */
S#define  USART_CR2_LBDIE                     ((uint16_t)0x0040)            /*!<LIN Break Detection Interrupt Enable */
S#define  USART_CR2_LBCL                      ((uint16_t)0x0100)            /*!<Last Bit Clock pulse                 */
S#define  USART_CR2_CPHA                      ((uint16_t)0x0200)            /*!<Clock Phase                          */
S#define  USART_CR2_CPOL                      ((uint16_t)0x0400)            /*!<Clock Polarity                       */
S#define  USART_CR2_CLKEN                     ((uint16_t)0x0800)            /*!<Clock Enable                         */
S
S#define  USART_CR2_STOP                      ((uint16_t)0x3000)            /*!<STOP[1:0] bits (STOP bits) */
S#define  USART_CR2_STOP_0                    ((uint16_t)0x1000)            /*!<Bit 0 */
S#define  USART_CR2_STOP_1                    ((uint16_t)0x2000)            /*!<Bit 1 */
S
S#define  USART_CR2_LINEN                     ((uint16_t)0x4000)            /*!<LIN mode enable */
S
S/******************  Bit definition for USART_CR3 register  *******************/
S#define  USART_CR3_EIE                       ((uint16_t)0x0001)            /*!<Error Interrupt Enable      */
S#define  USART_CR3_IREN                      ((uint16_t)0x0002)            /*!<IrDA mode Enable            */
S#define  USART_CR3_IRLP                      ((uint16_t)0x0004)            /*!<IrDA Low-Power              */
S#define  USART_CR3_HDSEL                     ((uint16_t)0x0008)            /*!<Half-Duplex Selection       */
S#define  USART_CR3_NACK                      ((uint16_t)0x0010)            /*!<Smartcard NACK enable       */
S#define  USART_CR3_SCEN                      ((uint16_t)0x0020)            /*!<Smartcard mode enable       */
S#define  USART_CR3_DMAR                      ((uint16_t)0x0040)            /*!<DMA Enable Receiver         */
S#define  USART_CR3_DMAT                      ((uint16_t)0x0080)            /*!<DMA Enable Transmitter      */
S#define  USART_CR3_RTSE                      ((uint16_t)0x0100)            /*!<RTS Enable                  */
S#define  USART_CR3_CTSE                      ((uint16_t)0x0200)            /*!<CTS Enable                  */
S#define  USART_CR3_CTSIE                     ((uint16_t)0x0400)            /*!<CTS Interrupt Enable        */
S#define  USART_CR3_ONEBIT                    ((uint16_t)0x0800)            /*!<USART One bit method enable */
S
S/******************  Bit definition for USART_GTPR register  ******************/
S#define  USART_GTPR_PSC                      ((uint16_t)0x00FF)            /*!<PSC[7:0] bits (Prescaler value) */
S#define  USART_GTPR_PSC_0                    ((uint16_t)0x0001)            /*!<Bit 0 */
S#define  USART_GTPR_PSC_1                    ((uint16_t)0x0002)            /*!<Bit 1 */
S#define  USART_GTPR_PSC_2                    ((uint16_t)0x0004)            /*!<Bit 2 */
S#define  USART_GTPR_PSC_3                    ((uint16_t)0x0008)            /*!<Bit 3 */
S#define  USART_GTPR_PSC_4                    ((uint16_t)0x0010)            /*!<Bit 4 */
S#define  USART_GTPR_PSC_5                    ((uint16_t)0x0020)            /*!<Bit 5 */
S#define  USART_GTPR_PSC_6                    ((uint16_t)0x0040)            /*!<Bit 6 */
S#define  USART_GTPR_PSC_7                    ((uint16_t)0x0080)            /*!<Bit 7 */
S
S#define  USART_GTPR_GT                       ((uint16_t)0xFF00)            /*!<Guard time value */
S
S/******************************************************************************/
S/*                                                                            */
S/*                            Window WATCHDOG                                 */
S/*                                                                            */
S/******************************************************************************/
S/*******************  Bit definition for WWDG_CR register  ********************/
S#define  WWDG_CR_T                           ((uint8_t)0x7F)               /*!<T[6:0] bits (7-Bit counter (MSB to LSB)) */
S#define  WWDG_CR_T0                          ((uint8_t)0x01)               /*!<Bit 0 */
S#define  WWDG_CR_T1                          ((uint8_t)0x02)               /*!<Bit 1 */
S#define  WWDG_CR_T2                          ((uint8_t)0x04)               /*!<Bit 2 */
S#define  WWDG_CR_T3                          ((uint8_t)0x08)               /*!<Bit 3 */
S#define  WWDG_CR_T4                          ((uint8_t)0x10)               /*!<Bit 4 */
S#define  WWDG_CR_T5                          ((uint8_t)0x20)               /*!<Bit 5 */
S#define  WWDG_CR_T6                          ((uint8_t)0x40)               /*!<Bit 6 */
S
S#define  WWDG_CR_WDGA                        ((uint8_t)0x80)               /*!<Activation bit */
S
S/*******************  Bit definition for WWDG_CFR register  *******************/
S#define  WWDG_CFR_W                          ((uint16_t)0x007F)            /*!<W[6:0] bits (7-bit window value) */
S#define  WWDG_CFR_W0                         ((uint16_t)0x0001)            /*!<Bit 0 */
S#define  WWDG_CFR_W1                         ((uint16_t)0x0002)            /*!<Bit 1 */
S#define  WWDG_CFR_W2                         ((uint16_t)0x0004)            /*!<Bit 2 */
S#define  WWDG_CFR_W3                         ((uint16_t)0x0008)            /*!<Bit 3 */
S#define  WWDG_CFR_W4                         ((uint16_t)0x0010)            /*!<Bit 4 */
S#define  WWDG_CFR_W5                         ((uint16_t)0x0020)            /*!<Bit 5 */
S#define  WWDG_CFR_W6                         ((uint16_t)0x0040)            /*!<Bit 6 */
S
S#define  WWDG_CFR_WDGTB                      ((uint16_t)0x0180)            /*!<WDGTB[1:0] bits (Timer Base) */
S#define  WWDG_CFR_WDGTB0                     ((uint16_t)0x0080)            /*!<Bit 0 */
S#define  WWDG_CFR_WDGTB1                     ((uint16_t)0x0100)            /*!<Bit 1 */
S
S#define  WWDG_CFR_EWI                        ((uint16_t)0x0200)            /*!<Early Wakeup Interrupt */
S
S/*******************  Bit definition for WWDG_SR register  ********************/
S#define  WWDG_SR_EWIF                        ((uint8_t)0x01)               /*!<Early Wakeup Interrupt Flag */
S
S
S/******************************************************************************/
S/*                                                                            */
S/*                                DBG                                         */
S/*                                                                            */
S/******************************************************************************/
S/********************  Bit definition for DBGMCU_IDCODE register  *************/
S#define  DBGMCU_IDCODE_DEV_ID                ((uint32_t)0x00000FFF)
S#define  DBGMCU_IDCODE_REV_ID                ((uint32_t)0xFFFF0000)
S
S/********************  Bit definition for DBGMCU_CR register  *****************/
S#define  DBGMCU_CR_DBG_SLEEP                 ((uint32_t)0x00000001)
S#define  DBGMCU_CR_DBG_STOP                  ((uint32_t)0x00000002)
S#define  DBGMCU_CR_DBG_STANDBY               ((uint32_t)0x00000004)
S#define  DBGMCU_CR_TRACE_IOEN                ((uint32_t)0x00000020)
S
S#define  DBGMCU_CR_TRACE_MODE                ((uint32_t)0x000000C0)
S#define  DBGMCU_CR_TRACE_MODE_0              ((uint32_t)0x00000040)/*!<Bit 0 */
S#define  DBGMCU_CR_TRACE_MODE_1              ((uint32_t)0x00000080)/*!<Bit 1 */
S
S/********************  Bit definition for DBGMCU_APB1_FZ register  ************/
S#define  DBGMCU_APB1_FZ_DBG_TIM2_STOP            ((uint32_t)0x00000001)
S#define  DBGMCU_APB1_FZ_DBG_TIM3_STOP            ((uint32_t)0x00000002)
S#define  DBGMCU_APB1_FZ_DBG_TIM4_STOP            ((uint32_t)0x00000004)
S#define  DBGMCU_APB1_FZ_DBG_TIM5_STOP            ((uint32_t)0x00000008)
S#define  DBGMCU_APB1_FZ_DBG_TIM6_STOP            ((uint32_t)0x00000010)
S#define  DBGMCU_APB1_FZ_DBG_TIM7_STOP            ((uint32_t)0x00000020)
S#define  DBGMCU_APB1_FZ_DBG_TIM12_STOP           ((uint32_t)0x00000040)
S#define  DBGMCU_APB1_FZ_DBG_TIM13_STOP           ((uint32_t)0x00000080)
S#define  DBGMCU_APB1_FZ_DBG_TIM14_STOP           ((uint32_t)0x00000100)
S#define  DBGMCU_APB1_FZ_DBG_RTC_STOP             ((uint32_t)0x00000400)
S#define  DBGMCU_APB1_FZ_DBG_WWDG_STOP            ((uint32_t)0x00000800)
S#define  DBGMCU_APB1_FZ_DBG_IWDG_STOP            ((uint32_t)0x00001000)
S#define  DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT   ((uint32_t)0x00200000)
S#define  DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT   ((uint32_t)0x00400000)
S#define  DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT   ((uint32_t)0x00800000)
S#define  DBGMCU_APB1_FZ_DBG_CAN1_STOP            ((uint32_t)0x02000000)
S#define  DBGMCU_APB1_FZ_DBG_CAN2_STOP            ((uint32_t)0x04000000)
S/* Old IWDGSTOP bit definition, maintained for legacy purpose */
S#define  DBGMCU_APB1_FZ_DBG_IWDEG_STOP           DBGMCU_APB1_FZ_DBG_IWDG_STOP
S
S/********************  Bit definition for DBGMCU_APB1_FZ register  ************/
S#define  DBGMCU_APB1_FZ_DBG_TIM1_STOP        ((uint32_t)0x00000001)
S#define  DBGMCU_APB1_FZ_DBG_TIM8_STOP        ((uint32_t)0x00000002)
S#define  DBGMCU_APB1_FZ_DBG_TIM9_STOP        ((uint32_t)0x00010000)
S#define  DBGMCU_APB1_FZ_DBG_TIM10_STOP       ((uint32_t)0x00020000)
S#define  DBGMCU_APB1_FZ_DBG_TIM11_STOP       ((uint32_t)0x00040000)
S
S/******************************************************************************/
S/*                                                                            */
S/*                Ethernet MAC Registers bits definitions                     */
S/*                                                                            */
S/******************************************************************************/
S/* Bit definition for Ethernet MAC Control Register register */
S#define ETH_MACCR_WD      ((uint32_t)0x00800000)  /* Watchdog disable */
S#define ETH_MACCR_JD      ((uint32_t)0x00400000)  /* Jabber disable */
S#define ETH_MACCR_IFG     ((uint32_t)0x000E0000)  /* Inter-frame gap */
S#define ETH_MACCR_IFG_96Bit     ((uint32_t)0x00000000)  /* Minimum IFG between frames during transmission is 96Bit */
S  #define ETH_MACCR_IFG_88Bit     ((uint32_t)0x00020000)  /* Minimum IFG between frames during transmission is 88Bit */
S  #define ETH_MACCR_IFG_80Bit     ((uint32_t)0x00040000)  /* Minimum IFG between frames during transmission is 80Bit */
S  #define ETH_MACCR_IFG_72Bit     ((uint32_t)0x00060000)  /* Minimum IFG between frames during transmission is 72Bit */
S  #define ETH_MACCR_IFG_64Bit     ((uint32_t)0x00080000)  /* Minimum IFG between frames during transmission is 64Bit */        
S  #define ETH_MACCR_IFG_56Bit     ((uint32_t)0x000A0000)  /* Minimum IFG between frames during transmission is 56Bit */
S  #define ETH_MACCR_IFG_48Bit     ((uint32_t)0x000C0000)  /* Minimum IFG between frames during transmission is 48Bit */
S  #define ETH_MACCR_IFG_40Bit     ((uint32_t)0x000E0000)  /* Minimum IFG between frames during transmission is 40Bit */              
S#define ETH_MACCR_CSD     ((uint32_t)0x00010000)  /* Carrier sense disable (during transmission) */
S#define ETH_MACCR_FES     ((uint32_t)0x00004000)  /* Fast ethernet speed */
S#define ETH_MACCR_ROD     ((uint32_t)0x00002000)  /* Receive own disable */
S#define ETH_MACCR_LM      ((uint32_t)0x00001000)  /* loopback mode */
S#define ETH_MACCR_DM      ((uint32_t)0x00000800)  /* Duplex mode */
S#define ETH_MACCR_IPCO    ((uint32_t)0x00000400)  /* IP Checksum offload */
S#define ETH_MACCR_RD      ((uint32_t)0x00000200)  /* Retry disable */
S#define ETH_MACCR_APCS    ((uint32_t)0x00000080)  /* Automatic Pad/CRC stripping */
S#define ETH_MACCR_BL      ((uint32_t)0x00000060)  /* Back-off limit: random integer number (r) of slot time delays before rescheduling
S                                                       a transmission attempt during retries after a collision: 0 =< r <2^k */
S  #define ETH_MACCR_BL_10    ((uint32_t)0x00000000)  /* k = min (n, 10) */
S  #define ETH_MACCR_BL_8     ((uint32_t)0x00000020)  /* k = min (n, 8) */
S  #define ETH_MACCR_BL_4     ((uint32_t)0x00000040)  /* k = min (n, 4) */
S  #define ETH_MACCR_BL_1     ((uint32_t)0x00000060)  /* k = min (n, 1) */ 
S#define ETH_MACCR_DC      ((uint32_t)0x00000010)  /* Defferal check */
S#define ETH_MACCR_TE      ((uint32_t)0x00000008)  /* Transmitter enable */
S#define ETH_MACCR_RE      ((uint32_t)0x00000004)  /* Receiver enable */
S
S/* Bit definition for Ethernet MAC Frame Filter Register */
S#define ETH_MACFFR_RA     ((uint32_t)0x80000000)  /* Receive all */ 
S#define ETH_MACFFR_HPF    ((uint32_t)0x00000400)  /* Hash or perfect filter */ 
S#define ETH_MACFFR_SAF    ((uint32_t)0x00000200)  /* Source address filter enable */ 
S#define ETH_MACFFR_SAIF   ((uint32_t)0x00000100)  /* SA inverse filtering */ 
S#define ETH_MACFFR_PCF    ((uint32_t)0x000000C0)  /* Pass control frames: 3 cases */
S  #define ETH_MACFFR_PCF_BlockAll                ((uint32_t)0x00000040)  /* MAC filters all control frames from reaching the application */
S  #define ETH_MACFFR_PCF_ForwardAll              ((uint32_t)0x00000080)  /* MAC forwards all control frames to application even if they fail the Address Filter */
S  #define ETH_MACFFR_PCF_ForwardPassedAddrFilter ((uint32_t)0x000000C0)  /* MAC forwards control frames that pass the Address Filter. */ 
S#define ETH_MACFFR_BFD    ((uint32_t)0x00000020)  /* Broadcast frame disable */ 
S#define ETH_MACFFR_PAM    ((uint32_t)0x00000010)  /* Pass all mutlicast */ 
S#define ETH_MACFFR_DAIF   ((uint32_t)0x00000008)  /* DA Inverse filtering */ 
S#define ETH_MACFFR_HM     ((uint32_t)0x00000004)  /* Hash multicast */ 
S#define ETH_MACFFR_HU     ((uint32_t)0x00000002)  /* Hash unicast */
S#define ETH_MACFFR_PM     ((uint32_t)0x00000001)  /* Promiscuous mode */
S
S/* Bit definition for Ethernet MAC Hash Table High Register */
S#define ETH_MACHTHR_HTH   ((uint32_t)0xFFFFFFFF)  /* Hash table high */
S
S/* Bit definition for Ethernet MAC Hash Table Low Register */
S#define ETH_MACHTLR_HTL   ((uint32_t)0xFFFFFFFF)  /* Hash table low */
S
S/* Bit definition for Ethernet MAC MII Address Register */
S#define ETH_MACMIIAR_PA   ((uint32_t)0x0000F800)  /* Physical layer address */ 
S#define ETH_MACMIIAR_MR   ((uint32_t)0x000007C0)  /* MII register in the selected PHY */ 
S#define ETH_MACMIIAR_CR   ((uint32_t)0x0000001C)  /* CR clock range: 6 cases */ 
S  #define ETH_MACMIIAR_CR_Div42   ((uint32_t)0x00000000)  /* HCLK:60-100 MHz; MDC clock= HCLK/42 */
S  #define ETH_MACMIIAR_CR_Div62   ((uint32_t)0x00000004)  /* HCLK:100-150 MHz; MDC clock= HCLK/62 */
S  #define ETH_MACMIIAR_CR_Div16   ((uint32_t)0x00000008)  /* HCLK:20-35 MHz; MDC clock= HCLK/16 */
S  #define ETH_MACMIIAR_CR_Div26   ((uint32_t)0x0000000C)  /* HCLK:35-60 MHz; MDC clock= HCLK/26 */
S  #define ETH_MACMIIAR_CR_Div102  ((uint32_t)0x00000010)  /* HCLK:150-168 MHz; MDC clock= HCLK/102 */  
S#define ETH_MACMIIAR_MW   ((uint32_t)0x00000002)  /* MII write */ 
S#define ETH_MACMIIAR_MB   ((uint32_t)0x00000001)  /* MII busy */ 
S  
S/* Bit definition for Ethernet MAC MII Data Register */
S#define ETH_MACMIIDR_MD   ((uint32_t)0x0000FFFF)  /* MII data: read/write data from/to PHY */
S
S/* Bit definition for Ethernet MAC Flow Control Register */
S#define ETH_MACFCR_PT     ((uint32_t)0xFFFF0000)  /* Pause time */
S#define ETH_MACFCR_ZQPD   ((uint32_t)0x00000080)  /* Zero-quanta pause disable */
S#define ETH_MACFCR_PLT    ((uint32_t)0x00000030)  /* Pause low threshold: 4 cases */
S  #define ETH_MACFCR_PLT_Minus4   ((uint32_t)0x00000000)  /* Pause time minus 4 slot times */
S  #define ETH_MACFCR_PLT_Minus28  ((uint32_t)0x00000010)  /* Pause time minus 28 slot times */
S  #define ETH_MACFCR_PLT_Minus144 ((uint32_t)0x00000020)  /* Pause time minus 144 slot times */
S  #define ETH_MACFCR_PLT_Minus256 ((uint32_t)0x00000030)  /* Pause time minus 256 slot times */      
S#define ETH_MACFCR_UPFD   ((uint32_t)0x00000008)  /* Unicast pause frame detect */
S#define ETH_MACFCR_RFCE   ((uint32_t)0x00000004)  /* Receive flow control enable */
S#define ETH_MACFCR_TFCE   ((uint32_t)0x00000002)  /* Transmit flow control enable */
S#define ETH_MACFCR_FCBBPA ((uint32_t)0x00000001)  /* Flow control busy/backpressure activate */
S
S/* Bit definition for Ethernet MAC VLAN Tag Register */
S#define ETH_MACVLANTR_VLANTC ((uint32_t)0x00010000)  /* 12-bit VLAN tag comparison */
S#define ETH_MACVLANTR_VLANTI ((uint32_t)0x0000FFFF)  /* VLAN tag identifier (for receive frames) */
S
S/* Bit definition for Ethernet MAC Remote Wake-UpFrame Filter Register */ 
S#define ETH_MACRWUFFR_D   ((uint32_t)0xFFFFFFFF)  /* Wake-up frame filter register data */
S/* Eight sequential Writes to this address (offset 0x28) will write all Wake-UpFrame Filter Registers.
S   Eight sequential Reads from this address (offset 0x28) will read all Wake-UpFrame Filter Registers. */
S/* Wake-UpFrame Filter Reg0 : Filter 0 Byte Mask
S   Wake-UpFrame Filter Reg1 : Filter 1 Byte Mask
S   Wake-UpFrame Filter Reg2 : Filter 2 Byte Mask
S   Wake-UpFrame Filter Reg3 : Filter 3 Byte Mask
S   Wake-UpFrame Filter Reg4 : RSVD - Filter3 Command - RSVD - Filter2 Command - 
S                              RSVD - Filter1 Command - RSVD - Filter0 Command
S   Wake-UpFrame Filter Re5 : Filter3 Offset - Filter2 Offset - Filter1 Offset - Filter0 Offset
S   Wake-UpFrame Filter Re6 : Filter1 CRC16 - Filter0 CRC16
S   Wake-UpFrame Filter Re7 : Filter3 CRC16 - Filter2 CRC16 */
S
S/* Bit definition for Ethernet MAC PMT Control and Status Register */ 
S#define ETH_MACPMTCSR_WFFRPR ((uint32_t)0x80000000)  /* Wake-Up Frame Filter Register Pointer Reset */
S#define ETH_MACPMTCSR_GU     ((uint32_t)0x00000200)  /* Global Unicast */
S#define ETH_MACPMTCSR_WFR    ((uint32_t)0x00000040)  /* Wake-Up Frame Received */
S#define ETH_MACPMTCSR_MPR    ((uint32_t)0x00000020)  /* Magic Packet Received */
S#define ETH_MACPMTCSR_WFE    ((uint32_t)0x00000004)  /* Wake-Up Frame Enable */
S#define ETH_MACPMTCSR_MPE    ((uint32_t)0x00000002)  /* Magic Packet Enable */
S#define ETH_MACPMTCSR_PD     ((uint32_t)0x00000001)  /* Power Down */
S
S/* Bit definition for Ethernet MAC Status Register */
S#define ETH_MACSR_TSTS      ((uint32_t)0x00000200)  /* Time stamp trigger status */
S#define ETH_MACSR_MMCTS     ((uint32_t)0x00000040)  /* MMC transmit status */
S#define ETH_MACSR_MMMCRS    ((uint32_t)0x00000020)  /* MMC receive status */
S#define ETH_MACSR_MMCS      ((uint32_t)0x00000010)  /* MMC status */
S#define ETH_MACSR_PMTS      ((uint32_t)0x00000008)  /* PMT status */
S
S/* Bit definition for Ethernet MAC Interrupt Mask Register */
S#define ETH_MACIMR_TSTIM     ((uint32_t)0x00000200)  /* Time stamp trigger interrupt mask */
S#define ETH_MACIMR_PMTIM     ((uint32_t)0x00000008)  /* PMT interrupt mask */
S
S/* Bit definition for Ethernet MAC Address0 High Register */
S#define ETH_MACA0HR_MACA0H   ((uint32_t)0x0000FFFF)  /* MAC address0 high */
S
S/* Bit definition for Ethernet MAC Address0 Low Register */
S#define ETH_MACA0LR_MACA0L   ((uint32_t)0xFFFFFFFF)  /* MAC address0 low */
S
S/* Bit definition for Ethernet MAC Address1 High Register */
S#define ETH_MACA1HR_AE       ((uint32_t)0x80000000)  /* Address enable */
S#define ETH_MACA1HR_SA       ((uint32_t)0x40000000)  /* Source address */
S#define ETH_MACA1HR_MBC      ((uint32_t)0x3F000000)  /* Mask byte control: bits to mask for comparison of the MAC Address bytes */
S  #define ETH_MACA1HR_MBC_HBits15_8    ((uint32_t)0x20000000)  /* Mask MAC Address high reg bits [15:8] */
S  #define ETH_MACA1HR_MBC_HBits7_0     ((uint32_t)0x10000000)  /* Mask MAC Address high reg bits [7:0] */
S  #define ETH_MACA1HR_MBC_LBits31_24   ((uint32_t)0x08000000)  /* Mask MAC Address low reg bits [31:24] */
S  #define ETH_MACA1HR_MBC_LBits23_16   ((uint32_t)0x04000000)  /* Mask MAC Address low reg bits [23:16] */
S  #define ETH_MACA1HR_MBC_LBits15_8    ((uint32_t)0x02000000)  /* Mask MAC Address low reg bits [15:8] */
S  #define ETH_MACA1HR_MBC_LBits7_0     ((uint32_t)0x01000000)  /* Mask MAC Address low reg bits [7:0] */ 
S#define ETH_MACA1HR_MACA1H   ((uint32_t)0x0000FFFF)  /* MAC address1 high */
S
S/* Bit definition for Ethernet MAC Address1 Low Register */
S#define ETH_MACA1LR_MACA1L   ((uint32_t)0xFFFFFFFF)  /* MAC address1 low */
S
S/* Bit definition for Ethernet MAC Address2 High Register */
S#define ETH_MACA2HR_AE       ((uint32_t)0x80000000)  /* Address enable */
S#define ETH_MACA2HR_SA       ((uint32_t)0x40000000)  /* Source address */
S#define ETH_MACA2HR_MBC      ((uint32_t)0x3F000000)  /* Mask byte control */
S  #define ETH_MACA2HR_MBC_HBits15_8    ((uint32_t)0x20000000)  /* Mask MAC Address high reg bits [15:8] */
S  #define ETH_MACA2HR_MBC_HBits7_0     ((uint32_t)0x10000000)  /* Mask MAC Address high reg bits [7:0] */
S  #define ETH_MACA2HR_MBC_LBits31_24   ((uint32_t)0x08000000)  /* Mask MAC Address low reg bits [31:24] */
S  #define ETH_MACA2HR_MBC_LBits23_16   ((uint32_t)0x04000000)  /* Mask MAC Address low reg bits [23:16] */
S  #define ETH_MACA2HR_MBC_LBits15_8    ((uint32_t)0x02000000)  /* Mask MAC Address low reg bits [15:8] */
S  #define ETH_MACA2HR_MBC_LBits7_0     ((uint32_t)0x01000000)  /* Mask MAC Address low reg bits [70] */
S#define ETH_MACA2HR_MACA2H   ((uint32_t)0x0000FFFF)  /* MAC address1 high */
S
S/* Bit definition for Ethernet MAC Address2 Low Register */
S#define ETH_MACA2LR_MACA2L   ((uint32_t)0xFFFFFFFF)  /* MAC address2 low */
S
S/* Bit definition for Ethernet MAC Address3 High Register */
S#define ETH_MACA3HR_AE       ((uint32_t)0x80000000)  /* Address enable */
S#define ETH_MACA3HR_SA       ((uint32_t)0x40000000)  /* Source address */
S#define ETH_MACA3HR_MBC      ((uint32_t)0x3F000000)  /* Mask byte control */
S  #define ETH_MACA3HR_MBC_HBits15_8    ((uint32_t)0x20000000)  /* Mask MAC Address high reg bits [15:8] */
S  #define ETH_MACA3HR_MBC_HBits7_0     ((uint32_t)0x10000000)  /* Mask MAC Address high reg bits [7:0] */
S  #define ETH_MACA3HR_MBC_LBits31_24   ((uint32_t)0x08000000)  /* Mask MAC Address low reg bits [31:24] */
S  #define ETH_MACA3HR_MBC_LBits23_16   ((uint32_t)0x04000000)  /* Mask MAC Address low reg bits [23:16] */
S  #define ETH_MACA3HR_MBC_LBits15_8    ((uint32_t)0x02000000)  /* Mask MAC Address low reg bits [15:8] */
S  #define ETH_MACA3HR_MBC_LBits7_0     ((uint32_t)0x01000000)  /* Mask MAC Address low reg bits [70] */
S#define ETH_MACA3HR_MACA3H   ((uint32_t)0x0000FFFF)  /* MAC address3 high */
S
S/* Bit definition for Ethernet MAC Address3 Low Register */
S#define ETH_MACA3LR_MACA3L   ((uint32_t)0xFFFFFFFF)  /* MAC address3 low */
S
S/******************************************************************************/
S/*                Ethernet MMC Registers bits definition                      */
S/******************************************************************************/
S
S/* Bit definition for Ethernet MMC Contol Register */
S#define ETH_MMCCR_MCFHP      ((uint32_t)0x00000020)  /* MMC counter Full-Half preset */
S#define ETH_MMCCR_MCP        ((uint32_t)0x00000010)  /* MMC counter preset */
S#define ETH_MMCCR_MCF        ((uint32_t)0x00000008)  /* MMC Counter Freeze */
S#define ETH_MMCCR_ROR        ((uint32_t)0x00000004)  /* Reset on Read */
S#define ETH_MMCCR_CSR        ((uint32_t)0x00000002)  /* Counter Stop Rollover */
S#define ETH_MMCCR_CR         ((uint32_t)0x00000001)  /* Counters Reset */
S
S/* Bit definition for Ethernet MMC Receive Interrupt Register */
S#define ETH_MMCRIR_RGUFS     ((uint32_t)0x00020000)  /* Set when Rx good unicast frames counter reaches half the maximum value */
S#define ETH_MMCRIR_RFAES     ((uint32_t)0x00000040)  /* Set when Rx alignment error counter reaches half the maximum value */
S#define ETH_MMCRIR_RFCES     ((uint32_t)0x00000020)  /* Set when Rx crc error counter reaches half the maximum value */
S
S/* Bit definition for Ethernet MMC Transmit Interrupt Register */
S#define ETH_MMCTIR_TGFS      ((uint32_t)0x00200000)  /* Set when Tx good frame count counter reaches half the maximum value */
S#define ETH_MMCTIR_TGFMSCS   ((uint32_t)0x00008000)  /* Set when Tx good multi col counter reaches half the maximum value */
S#define ETH_MMCTIR_TGFSCS    ((uint32_t)0x00004000)  /* Set when Tx good single col counter reaches half the maximum value */
S
S/* Bit definition for Ethernet MMC Receive Interrupt Mask Register */
S#define ETH_MMCRIMR_RGUFM    ((uint32_t)0x00020000)  /* Mask the interrupt when Rx good unicast frames counter reaches half the maximum value */
S#define ETH_MMCRIMR_RFAEM    ((uint32_t)0x00000040)  /* Mask the interrupt when when Rx alignment error counter reaches half the maximum value */
S#define ETH_MMCRIMR_RFCEM    ((uint32_t)0x00000020)  /* Mask the interrupt when Rx crc error counter reaches half the maximum value */
S
S/* Bit definition for Ethernet MMC Transmit Interrupt Mask Register */
S#define ETH_MMCTIMR_TGFM     ((uint32_t)0x00200000)  /* Mask the interrupt when Tx good frame count counter reaches half the maximum value */
S#define ETH_MMCTIMR_TGFMSCM  ((uint32_t)0x00008000)  /* Mask the interrupt when Tx good multi col counter reaches half the maximum value */
S#define ETH_MMCTIMR_TGFSCM   ((uint32_t)0x00004000)  /* Mask the interrupt when Tx good single col counter reaches half the maximum value */
S
S/* Bit definition for Ethernet MMC Transmitted Good Frames after Single Collision Counter Register */
S#define ETH_MMCTGFSCCR_TGFSCC     ((uint32_t)0xFFFFFFFF)  /* Number of successfully transmitted frames after a single collision in Half-duplex mode. */
S
S/* Bit definition for Ethernet MMC Transmitted Good Frames after More than a Single Collision Counter Register */
S#define ETH_MMCTGFMSCCR_TGFMSCC   ((uint32_t)0xFFFFFFFF)  /* Number of successfully transmitted frames after more than a single collision in Half-duplex mode. */
S
S/* Bit definition for Ethernet MMC Transmitted Good Frames Counter Register */
S#define ETH_MMCTGFCR_TGFC    ((uint32_t)0xFFFFFFFF)  /* Number of good frames transmitted. */
S
S/* Bit definition for Ethernet MMC Received Frames with CRC Error Counter Register */
S#define ETH_MMCRFCECR_RFCEC  ((uint32_t)0xFFFFFFFF)  /* Number of frames received with CRC error. */
S
S/* Bit definition for Ethernet MMC Received Frames with Alignement Error Counter Register */
S#define ETH_MMCRFAECR_RFAEC  ((uint32_t)0xFFFFFFFF)  /* Number of frames received with alignment (dribble) error */
S
S/* Bit definition for Ethernet MMC Received Good Unicast Frames Counter Register */
S#define ETH_MMCRGUFCR_RGUFC  ((uint32_t)0xFFFFFFFF)  /* Number of good unicast frames received. */
S
S/******************************************************************************/
S/*               Ethernet PTP Registers bits definition                       */
S/******************************************************************************/
S
S/* Bit definition for Ethernet PTP Time Stamp Contol Register */
S#define ETH_PTPTSCR_TSCNT       ((uint32_t)0x00030000)  /* Time stamp clock node type */
S#define ETH_PTPTSSR_TSSMRME     ((uint32_t)0x00008000)  /* Time stamp snapshot for message relevant to master enable */
S#define ETH_PTPTSSR_TSSEME      ((uint32_t)0x00004000)  /* Time stamp snapshot for event message enable */
S#define ETH_PTPTSSR_TSSIPV4FE   ((uint32_t)0x00002000)  /* Time stamp snapshot for IPv4 frames enable */
S#define ETH_PTPTSSR_TSSIPV6FE   ((uint32_t)0x00001000)  /* Time stamp snapshot for IPv6 frames enable */
S#define ETH_PTPTSSR_TSSPTPOEFE  ((uint32_t)0x00000800)  /* Time stamp snapshot for PTP over ethernet frames enable */
S#define ETH_PTPTSSR_TSPTPPSV2E  ((uint32_t)0x00000400)  /* Time stamp PTP packet snooping for version2 format enable */
S#define ETH_PTPTSSR_TSSSR       ((uint32_t)0x00000200)  /* Time stamp Sub-seconds rollover */
S#define ETH_PTPTSSR_TSSARFE     ((uint32_t)0x00000100)  /* Time stamp snapshot for all received frames enable */
S
S#define ETH_PTPTSCR_TSARU    ((uint32_t)0x00000020)  /* Addend register update */
S#define ETH_PTPTSCR_TSITE    ((uint32_t)0x00000010)  /* Time stamp interrupt trigger enable */
S#define ETH_PTPTSCR_TSSTU    ((uint32_t)0x00000008)  /* Time stamp update */
S#define ETH_PTPTSCR_TSSTI    ((uint32_t)0x00000004)  /* Time stamp initialize */
S#define ETH_PTPTSCR_TSFCU    ((uint32_t)0x00000002)  /* Time stamp fine or coarse update */
S#define ETH_PTPTSCR_TSE      ((uint32_t)0x00000001)  /* Time stamp enable */
S
S/* Bit definition for Ethernet PTP Sub-Second Increment Register */
S#define ETH_PTPSSIR_STSSI    ((uint32_t)0x000000FF)  /* System time Sub-second increment value */
S
S/* Bit definition for Ethernet PTP Time Stamp High Register */
S#define ETH_PTPTSHR_STS      ((uint32_t)0xFFFFFFFF)  /* System Time second */
S
S/* Bit definition for Ethernet PTP Time Stamp Low Register */
S#define ETH_PTPTSLR_STPNS    ((uint32_t)0x80000000)  /* System Time Positive or negative time */
S#define ETH_PTPTSLR_STSS     ((uint32_t)0x7FFFFFFF)  /* System Time sub-seconds */
S
S/* Bit definition for Ethernet PTP Time Stamp High Update Register */
S#define ETH_PTPTSHUR_TSUS    ((uint32_t)0xFFFFFFFF)  /* Time stamp update seconds */
S
S/* Bit definition for Ethernet PTP Time Stamp Low Update Register */
S#define ETH_PTPTSLUR_TSUPNS  ((uint32_t)0x80000000)  /* Time stamp update Positive or negative time */
S#define ETH_PTPTSLUR_TSUSS   ((uint32_t)0x7FFFFFFF)  /* Time stamp update sub-seconds */
S
S/* Bit definition for Ethernet PTP Time Stamp Addend Register */
S#define ETH_PTPTSAR_TSA      ((uint32_t)0xFFFFFFFF)  /* Time stamp addend */
S
S/* Bit definition for Ethernet PTP Target Time High Register */
S#define ETH_PTPTTHR_TTSH     ((uint32_t)0xFFFFFFFF)  /* Target time stamp high */
S
S/* Bit definition for Ethernet PTP Target Time Low Register */
S#define ETH_PTPTTLR_TTSL     ((uint32_t)0xFFFFFFFF)  /* Target time stamp low */
S
S/* Bit definition for Ethernet PTP Time Stamp Status Register */
S#define ETH_PTPTSSR_TSTTR    ((uint32_t)0x00000020)  /* Time stamp target time reached */
S#define ETH_PTPTSSR_TSSO     ((uint32_t)0x00000010)  /* Time stamp seconds overflow */
S
S/******************************************************************************/
S/*                 Ethernet DMA Registers bits definition                     */
S/******************************************************************************/
S
S/* Bit definition for Ethernet DMA Bus Mode Register */
S#define ETH_DMABMR_AAB       ((uint32_t)0x02000000)  /* Address-Aligned beats */
S#define ETH_DMABMR_FPM        ((uint32_t)0x01000000)  /* 4xPBL mode */
S#define ETH_DMABMR_USP       ((uint32_t)0x00800000)  /* Use separate PBL */
S#define ETH_DMABMR_RDP       ((uint32_t)0x007E0000)  /* RxDMA PBL */
S  #define ETH_DMABMR_RDP_1Beat    ((uint32_t)0x00020000)  /* maximum number of beats to be transferred in one RxDMA transaction is 1 */
S  #define ETH_DMABMR_RDP_2Beat    ((uint32_t)0x00040000)  /* maximum number of beats to be transferred in one RxDMA transaction is 2 */
S  #define ETH_DMABMR_RDP_4Beat    ((uint32_t)0x00080000)  /* maximum number of beats to be transferred in one RxDMA transaction is 4 */
S  #define ETH_DMABMR_RDP_8Beat    ((uint32_t)0x00100000)  /* maximum number of beats to be transferred in one RxDMA transaction is 8 */
S  #define ETH_DMABMR_RDP_16Beat   ((uint32_t)0x00200000)  /* maximum number of beats to be transferred in one RxDMA transaction is 16 */
S  #define ETH_DMABMR_RDP_32Beat   ((uint32_t)0x00400000)  /* maximum number of beats to be transferred in one RxDMA transaction is 32 */                
S  #define ETH_DMABMR_RDP_4xPBL_4Beat   ((uint32_t)0x01020000)  /* maximum number of beats to be transferred in one RxDMA transaction is 4 */
S  #define ETH_DMABMR_RDP_4xPBL_8Beat   ((uint32_t)0x01040000)  /* maximum number of beats to be transferred in one RxDMA transaction is 8 */
S  #define ETH_DMABMR_RDP_4xPBL_16Beat  ((uint32_t)0x01080000)  /* maximum number of beats to be transferred in one RxDMA transaction is 16 */
S  #define ETH_DMABMR_RDP_4xPBL_32Beat  ((uint32_t)0x01100000)  /* maximum number of beats to be transferred in one RxDMA transaction is 32 */
S  #define ETH_DMABMR_RDP_4xPBL_64Beat  ((uint32_t)0x01200000)  /* maximum number of beats to be transferred in one RxDMA transaction is 64 */
S  #define ETH_DMABMR_RDP_4xPBL_128Beat ((uint32_t)0x01400000)  /* maximum number of beats to be transferred in one RxDMA transaction is 128 */  
S#define ETH_DMABMR_FB        ((uint32_t)0x00010000)  /* Fixed Burst */
S#define ETH_DMABMR_RTPR      ((uint32_t)0x0000C000)  /* Rx Tx priority ratio */
S  #define ETH_DMABMR_RTPR_1_1     ((uint32_t)0x00000000)  /* Rx Tx priority ratio */
S  #define ETH_DMABMR_RTPR_2_1     ((uint32_t)0x00004000)  /* Rx Tx priority ratio */
S  #define ETH_DMABMR_RTPR_3_1     ((uint32_t)0x00008000)  /* Rx Tx priority ratio */
S  #define ETH_DMABMR_RTPR_4_1     ((uint32_t)0x0000C000)  /* Rx Tx priority ratio */  
S#define ETH_DMABMR_PBL    ((uint32_t)0x00003F00)  /* Programmable burst length */
S  #define ETH_DMABMR_PBL_1Beat    ((uint32_t)0x00000100)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 1 */
S  #define ETH_DMABMR_PBL_2Beat    ((uint32_t)0x00000200)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 2 */
S  #define ETH_DMABMR_PBL_4Beat    ((uint32_t)0x00000400)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 4 */
S  #define ETH_DMABMR_PBL_8Beat    ((uint32_t)0x00000800)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 8 */
S  #define ETH_DMABMR_PBL_16Beat   ((uint32_t)0x00001000)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 16 */
S  #define ETH_DMABMR_PBL_32Beat   ((uint32_t)0x00002000)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 32 */                
S  #define ETH_DMABMR_PBL_4xPBL_4Beat   ((uint32_t)0x01000100)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 4 */
S  #define ETH_DMABMR_PBL_4xPBL_8Beat   ((uint32_t)0x01000200)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 8 */
S  #define ETH_DMABMR_PBL_4xPBL_16Beat  ((uint32_t)0x01000400)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 16 */
S  #define ETH_DMABMR_PBL_4xPBL_32Beat  ((uint32_t)0x01000800)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 32 */
S  #define ETH_DMABMR_PBL_4xPBL_64Beat  ((uint32_t)0x01001000)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 64 */
S  #define ETH_DMABMR_PBL_4xPBL_128Beat ((uint32_t)0x01002000)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 128 */
S#define ETH_DMABMR_EDE       ((uint32_t)0x00000080)  /* Enhanced Descriptor Enable */
S#define ETH_DMABMR_DSL       ((uint32_t)0x0000007C)  /* Descriptor Skip Length */
S#define ETH_DMABMR_DA        ((uint32_t)0x00000002)  /* DMA arbitration scheme */
S#define ETH_DMABMR_SR        ((uint32_t)0x00000001)  /* Software reset */
S
S/* Bit definition for Ethernet DMA Transmit Poll Demand Register */
S#define ETH_DMATPDR_TPD      ((uint32_t)0xFFFFFFFF)  /* Transmit poll demand */
S
S/* Bit definition for Ethernet DMA Receive Poll Demand Register */
S#define ETH_DMARPDR_RPD      ((uint32_t)0xFFFFFFFF)  /* Receive poll demand  */
S
S/* Bit definition for Ethernet DMA Receive Descriptor List Address Register */
S#define ETH_DMARDLAR_SRL     ((uint32_t)0xFFFFFFFF)  /* Start of receive list */
S
S/* Bit definition for Ethernet DMA Transmit Descriptor List Address Register */
S#define ETH_DMATDLAR_STL     ((uint32_t)0xFFFFFFFF)  /* Start of transmit list */
S
S/* Bit definition for Ethernet DMA Status Register */
S#define ETH_DMASR_TSTS       ((uint32_t)0x20000000)  /* Time-stamp trigger status */
S#define ETH_DMASR_PMTS       ((uint32_t)0x10000000)  /* PMT status */
S#define ETH_DMASR_MMCS       ((uint32_t)0x08000000)  /* MMC status */
S#define ETH_DMASR_EBS        ((uint32_t)0x03800000)  /* Error bits status */
S  /* combination with EBS[2:0] for GetFlagStatus function */
S  #define ETH_DMASR_EBS_DescAccess      ((uint32_t)0x02000000)  /* Error bits 0-data buffer, 1-desc. access */
S  #define ETH_DMASR_EBS_ReadTransf      ((uint32_t)0x01000000)  /* Error bits 0-write trnsf, 1-read transfr */
S  #define ETH_DMASR_EBS_DataTransfTx    ((uint32_t)0x00800000)  /* Error bits 0-Rx DMA, 1-Tx DMA */
S#define ETH_DMASR_TPS         ((uint32_t)0x00700000)  /* Transmit process state */
S  #define ETH_DMASR_TPS_Stopped         ((uint32_t)0x00000000)  /* Stopped - Reset or Stop Tx Command issued  */
S  #define ETH_DMASR_TPS_Fetching        ((uint32_t)0x00100000)  /* Running - fetching the Tx descriptor */
S  #define ETH_DMASR_TPS_Waiting         ((uint32_t)0x00200000)  /* Running - waiting for status */
S  #define ETH_DMASR_TPS_Reading         ((uint32_t)0x00300000)  /* Running - reading the data from host memory */
S  #define ETH_DMASR_TPS_Suspended       ((uint32_t)0x00600000)  /* Suspended - Tx Descriptor unavailabe */
S  #define ETH_DMASR_TPS_Closing         ((uint32_t)0x00700000)  /* Running - closing Rx descriptor */
S#define ETH_DMASR_RPS         ((uint32_t)0x000E0000)  /* Receive process state */
S  #define ETH_DMASR_RPS_Stopped         ((uint32_t)0x00000000)  /* Stopped - Reset or Stop Rx Command issued */
S  #define ETH_DMASR_RPS_Fetching        ((uint32_t)0x00020000)  /* Running - fetching the Rx descriptor */
S  #define ETH_DMASR_RPS_Waiting         ((uint32_t)0x00060000)  /* Running - waiting for packet */
S  #define ETH_DMASR_RPS_Suspended       ((uint32_t)0x00080000)  /* Suspended - Rx Descriptor unavailable */
S  #define ETH_DMASR_RPS_Closing         ((uint32_t)0x000A0000)  /* Running - closing descriptor */
S  #define ETH_DMASR_RPS_Queuing         ((uint32_t)0x000E0000)  /* Running - queuing the recieve frame into host memory */
S#define ETH_DMASR_NIS        ((uint32_t)0x00010000)  /* Normal interrupt summary */
S#define ETH_DMASR_AIS        ((uint32_t)0x00008000)  /* Abnormal interrupt summary */
S#define ETH_DMASR_ERS        ((uint32_t)0x00004000)  /* Early receive status */
S#define ETH_DMASR_FBES       ((uint32_t)0x00002000)  /* Fatal bus error status */
S#define ETH_DMASR_ETS        ((uint32_t)0x00000400)  /* Early transmit status */
S#define ETH_DMASR_RWTS       ((uint32_t)0x00000200)  /* Receive watchdog timeout status */
S#define ETH_DMASR_RPSS       ((uint32_t)0x00000100)  /* Receive process stopped status */
S#define ETH_DMASR_RBUS       ((uint32_t)0x00000080)  /* Receive buffer unavailable status */
S#define ETH_DMASR_RS         ((uint32_t)0x00000040)  /* Receive status */
S#define ETH_DMASR_TUS        ((uint32_t)0x00000020)  /* Transmit underflow status */
S#define ETH_DMASR_ROS        ((uint32_t)0x00000010)  /* Receive overflow status */
S#define ETH_DMASR_TJTS       ((uint32_t)0x00000008)  /* Transmit jabber timeout status */
S#define ETH_DMASR_TBUS       ((uint32_t)0x00000004)  /* Transmit buffer unavailable status */
S#define ETH_DMASR_TPSS       ((uint32_t)0x00000002)  /* Transmit process stopped status */
S#define ETH_DMASR_TS         ((uint32_t)0x00000001)  /* Transmit status */
S
S/* Bit definition for Ethernet DMA Operation Mode Register */
S#define ETH_DMAOMR_DTCEFD    ((uint32_t)0x04000000)  /* Disable Dropping of TCP/IP checksum error frames */
S#define ETH_DMAOMR_RSF       ((uint32_t)0x02000000)  /* Receive store and forward */
S#define ETH_DMAOMR_DFRF      ((uint32_t)0x01000000)  /* Disable flushing of received frames */
S#define ETH_DMAOMR_TSF       ((uint32_t)0x00200000)  /* Transmit store and forward */
S#define ETH_DMAOMR_FTF       ((uint32_t)0x00100000)  /* Flush transmit FIFO */
S#define ETH_DMAOMR_TTC       ((uint32_t)0x0001C000)  /* Transmit threshold control */
S  #define ETH_DMAOMR_TTC_64Bytes       ((uint32_t)0x00000000)  /* threshold level of the MTL Transmit FIFO is 64 Bytes */
S  #define ETH_DMAOMR_TTC_128Bytes      ((uint32_t)0x00004000)  /* threshold level of the MTL Transmit FIFO is 128 Bytes */
S  #define ETH_DMAOMR_TTC_192Bytes      ((uint32_t)0x00008000)  /* threshold level of the MTL Transmit FIFO is 192 Bytes */
S  #define ETH_DMAOMR_TTC_256Bytes      ((uint32_t)0x0000C000)  /* threshold level of the MTL Transmit FIFO is 256 Bytes */
S  #define ETH_DMAOMR_TTC_40Bytes       ((uint32_t)0x00010000)  /* threshold level of the MTL Transmit FIFO is 40 Bytes */
S  #define ETH_DMAOMR_TTC_32Bytes       ((uint32_t)0x00014000)  /* threshold level of the MTL Transmit FIFO is 32 Bytes */
S  #define ETH_DMAOMR_TTC_24Bytes       ((uint32_t)0x00018000)  /* threshold level of the MTL Transmit FIFO is 24 Bytes */
S  #define ETH_DMAOMR_TTC_16Bytes       ((uint32_t)0x0001C000)  /* threshold level of the MTL Transmit FIFO is 16 Bytes */
S#define ETH_DMAOMR_ST        ((uint32_t)0x00002000)  /* Start/stop transmission command */
S#define ETH_DMAOMR_FEF       ((uint32_t)0x00000080)  /* Forward error frames */
S#define ETH_DMAOMR_FUGF      ((uint32_t)0x00000040)  /* Forward undersized good frames */
S#define ETH_DMAOMR_RTC       ((uint32_t)0x00000018)  /* receive threshold control */
S  #define ETH_DMAOMR_RTC_64Bytes       ((uint32_t)0x00000000)  /* threshold level of the MTL Receive FIFO is 64 Bytes */
S  #define ETH_DMAOMR_RTC_32Bytes       ((uint32_t)0x00000008)  /* threshold level of the MTL Receive FIFO is 32 Bytes */
S  #define ETH_DMAOMR_RTC_96Bytes       ((uint32_t)0x00000010)  /* threshold level of the MTL Receive FIFO is 96 Bytes */
S  #define ETH_DMAOMR_RTC_128Bytes      ((uint32_t)0x00000018)  /* threshold level of the MTL Receive FIFO is 128 Bytes */
S#define ETH_DMAOMR_OSF       ((uint32_t)0x00000004)  /* operate on second frame */
S#define ETH_DMAOMR_SR        ((uint32_t)0x00000002)  /* Start/stop receive */
S
S/* Bit definition for Ethernet DMA Interrupt Enable Register */
S#define ETH_DMAIER_NISE      ((uint32_t)0x00010000)  /* Normal interrupt summary enable */
S#define ETH_DMAIER_AISE      ((uint32_t)0x00008000)  /* Abnormal interrupt summary enable */
S#define ETH_DMAIER_ERIE      ((uint32_t)0x00004000)  /* Early receive interrupt enable */
S#define ETH_DMAIER_FBEIE     ((uint32_t)0x00002000)  /* Fatal bus error interrupt enable */
S#define ETH_DMAIER_ETIE      ((uint32_t)0x00000400)  /* Early transmit interrupt enable */
S#define ETH_DMAIER_RWTIE     ((uint32_t)0x00000200)  /* Receive watchdog timeout interrupt enable */
S#define ETH_DMAIER_RPSIE     ((uint32_t)0x00000100)  /* Receive process stopped interrupt enable */
S#define ETH_DMAIER_RBUIE     ((uint32_t)0x00000080)  /* Receive buffer unavailable interrupt enable */
S#define ETH_DMAIER_RIE       ((uint32_t)0x00000040)  /* Receive interrupt enable */
S#define ETH_DMAIER_TUIE      ((uint32_t)0x00000020)  /* Transmit Underflow interrupt enable */
S#define ETH_DMAIER_ROIE      ((uint32_t)0x00000010)  /* Receive Overflow interrupt enable */
S#define ETH_DMAIER_TJTIE     ((uint32_t)0x00000008)  /* Transmit jabber timeout interrupt enable */
S#define ETH_DMAIER_TBUIE     ((uint32_t)0x00000004)  /* Transmit buffer unavailable interrupt enable */
S#define ETH_DMAIER_TPSIE     ((uint32_t)0x00000002)  /* Transmit process stopped interrupt enable */
S#define ETH_DMAIER_TIE       ((uint32_t)0x00000001)  /* Transmit interrupt enable */
S
S/* Bit definition for Ethernet DMA Missed Frame and Buffer Overflow Counter Register */
S#define ETH_DMAMFBOCR_OFOC   ((uint32_t)0x10000000)  /* Overflow bit for FIFO overflow counter */
S#define ETH_DMAMFBOCR_MFA    ((uint32_t)0x0FFE0000)  /* Number of frames missed by the application */
S#define ETH_DMAMFBOCR_OMFC   ((uint32_t)0x00010000)  /* Overflow bit for missed frame counter */
S#define ETH_DMAMFBOCR_MFC    ((uint32_t)0x0000FFFF)  /* Number of frames missed by the controller */
S
S/* Bit definition for Ethernet DMA Current Host Transmit Descriptor Register */
S#define ETH_DMACHTDR_HTDAP   ((uint32_t)0xFFFFFFFF)  /* Host transmit descriptor address pointer */
S
S/* Bit definition for Ethernet DMA Current Host Receive Descriptor Register */
S#define ETH_DMACHRDR_HRDAP   ((uint32_t)0xFFFFFFFF)  /* Host receive descriptor address pointer */
S
S/* Bit definition for Ethernet DMA Current Host Transmit Buffer Address Register */
S#define ETH_DMACHTBAR_HTBAP  ((uint32_t)0xFFFFFFFF)  /* Host transmit buffer address pointer */
S
S/* Bit definition for Ethernet DMA Current Host Receive Buffer Address Register */
S#define ETH_DMACHRBAR_HRBAP  ((uint32_t)0xFFFFFFFF)  /* Host receive buffer address pointer */
S
S/**
S  *
S  */
S
S /**
S  * @}
S  */ 
S
S#ifdef USE_STDPERIPH_DRIVER
S  #include "stm32f4xx_conf.h"
S#endif /* USE_STDPERIPH_DRIVER */
S
S/** @addtogroup Exported_macro
S  * @{
S  */
S
S#define SET_BIT(REG, BIT)     ((REG) |= (BIT))
S
S#define CLEAR_BIT(REG, BIT)   ((REG) &= ~(BIT))
S
S#define READ_BIT(REG, BIT)    ((REG) & (BIT))
S
S#define CLEAR_REG(REG)        ((REG) = (0x0))
S
S#define WRITE_REG(REG, VAL)   ((REG) = (VAL))
S
S#define READ_REG(REG)         ((REG))
S
S#define MODIFY_REG(REG, CLEARMASK, SETMASK)  WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))
S
S/**
S  * @}
S  */
S
S#ifdef __cplusplus
S}
S#endif /* __cplusplus */
S
N#endif /* __STM32F4xx_H */
N
N/**
N  * @}
N  */
N
N  /**
N  * @}
N  */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 39 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_adc.h" 2
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup ADC
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/
N
N/** 
N  * @brief   ADC Init structure definition  
N  */ 
Ntypedef struct
N{
N  uint32_t ADC_Resolution;                /*!< Configures the ADC resolution dual mode. 
N                                               This parameter can be a value of @ref ADC_resolution */                                   
N  FunctionalState ADC_ScanConvMode;       /*!< Specifies whether the conversion 
N                                               is performed in Scan (multichannels) 
N                                               or Single (one channel) mode.
N                                               This parameter can be set to ENABLE or DISABLE */ 
N  FunctionalState ADC_ContinuousConvMode; /*!< Specifies whether the conversion 
N                                               is performed in Continuous or Single mode.
N                                               This parameter can be set to ENABLE or DISABLE. */
N  uint32_t ADC_ExternalTrigConvEdge;      /*!< Select the external trigger edge and
N                                               enable the trigger of a regular group. 
N                                               This parameter can be a value of 
N                                               @ref ADC_external_trigger_edge_for_regular_channels_conversion */
N  uint32_t ADC_ExternalTrigConv;          /*!< Select the external event used to trigger 
N                                               the start of conversion of a regular group.
N                                               This parameter can be a value of 
N                                               @ref ADC_extrenal_trigger_sources_for_regular_channels_conversion */
N  uint32_t ADC_DataAlign;                 /*!< Specifies whether the ADC data  alignment
N                                               is left or right. This parameter can be 
N                                               a value of @ref ADC_data_align */
N  uint8_t  ADC_NbrOfConversion;           /*!< Specifies the number of ADC conversions
N                                               that will be done using the sequencer for
N                                               regular channel group.
N                                               This parameter must range from 1 to 16. */
N}ADC_InitTypeDef;
N  
N/** 
N  * @brief   ADC Common Init structure definition  
N  */ 
Ntypedef struct 
N{
N  uint32_t ADC_Mode;                      /*!< Configures the ADC to operate in 
N                                               independent or multi mode. 
N                                               This parameter can be a value of @ref ADC_Common_mode */                                              
N  uint32_t ADC_Prescaler;                 /*!< Select the frequency of the clock 
N                                               to the ADC. The clock is common for all the ADCs.
N                                               This parameter can be a value of @ref ADC_Prescaler */
N  uint32_t ADC_DMAAccessMode;             /*!< Configures the Direct memory access 
N                                              mode for multi ADC mode.
N                                               This parameter can be a value of 
N                                               @ref ADC_Direct_memory_access_mode_for_multi_mode */
N  uint32_t ADC_TwoSamplingDelay;          /*!< Configures the Delay between 2 sampling phases.
N                                               This parameter can be a value of 
N                                               @ref ADC_delay_between_2_sampling_phases */
N  
N}ADC_CommonInitTypeDef;
N
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup ADC_Exported_Constants
N  * @{
N  */ 
N#define IS_ADC_ALL_PERIPH(PERIPH) (((PERIPH) == ADC1) || \
N                                   ((PERIPH) == ADC2) || \
N                                   ((PERIPH) == ADC3))  
X#define IS_ADC_ALL_PERIPH(PERIPH) (((PERIPH) == ADC1) ||                                    ((PERIPH) == ADC2) ||                                    ((PERIPH) == ADC3))  
N
N/** @defgroup ADC_Common_mode 
N  * @{
N  */ 
N#define ADC_Mode_Independent                       ((uint32_t)0x00000000)       
N#define ADC_DualMode_RegSimult_InjecSimult         ((uint32_t)0x00000001)
N#define ADC_DualMode_RegSimult_AlterTrig           ((uint32_t)0x00000002)
N#define ADC_DualMode_InjecSimult                   ((uint32_t)0x00000005)
N#define ADC_DualMode_RegSimult                     ((uint32_t)0x00000006)
N#define ADC_DualMode_Interl                        ((uint32_t)0x00000007)
N#define ADC_DualMode_AlterTrig                     ((uint32_t)0x00000009)
N#define ADC_TripleMode_RegSimult_InjecSimult       ((uint32_t)0x00000011)
N#define ADC_TripleMode_RegSimult_AlterTrig         ((uint32_t)0x00000012)
N#define ADC_TripleMode_InjecSimult                 ((uint32_t)0x00000015)
N#define ADC_TripleMode_RegSimult                   ((uint32_t)0x00000016)
N#define ADC_TripleMode_Interl                      ((uint32_t)0x00000017)
N#define ADC_TripleMode_AlterTrig                   ((uint32_t)0x00000019)
N#define IS_ADC_MODE(MODE) (((MODE) == ADC_Mode_Independent) || \
N                           ((MODE) == ADC_DualMode_RegSimult_InjecSimult) || \
N                           ((MODE) == ADC_DualMode_RegSimult_AlterTrig) || \
N                           ((MODE) == ADC_DualMode_InjecSimult) || \
N                           ((MODE) == ADC_DualMode_RegSimult) || \
N                           ((MODE) == ADC_DualMode_Interl) || \
N                           ((MODE) == ADC_DualMode_AlterTrig) || \
N                           ((MODE) == ADC_TripleMode_RegSimult_InjecSimult) || \
N                           ((MODE) == ADC_TripleMode_RegSimult_AlterTrig) || \
N                           ((MODE) == ADC_TripleMode_InjecSimult) || \
N                           ((MODE) == ADC_TripleMode_RegSimult) || \
N                           ((MODE) == ADC_TripleMode_Interl) || \
N                           ((MODE) == ADC_TripleMode_AlterTrig))
X#define IS_ADC_MODE(MODE) (((MODE) == ADC_Mode_Independent) ||                            ((MODE) == ADC_DualMode_RegSimult_InjecSimult) ||                            ((MODE) == ADC_DualMode_RegSimult_AlterTrig) ||                            ((MODE) == ADC_DualMode_InjecSimult) ||                            ((MODE) == ADC_DualMode_RegSimult) ||                            ((MODE) == ADC_DualMode_Interl) ||                            ((MODE) == ADC_DualMode_AlterTrig) ||                            ((MODE) == ADC_TripleMode_RegSimult_InjecSimult) ||                            ((MODE) == ADC_TripleMode_RegSimult_AlterTrig) ||                            ((MODE) == ADC_TripleMode_InjecSimult) ||                            ((MODE) == ADC_TripleMode_RegSimult) ||                            ((MODE) == ADC_TripleMode_Interl) ||                            ((MODE) == ADC_TripleMode_AlterTrig))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_Prescaler 
N  * @{
N  */ 
N#define ADC_Prescaler_Div2                         ((uint32_t)0x00000000)
N#define ADC_Prescaler_Div4                         ((uint32_t)0x00010000)
N#define ADC_Prescaler_Div6                         ((uint32_t)0x00020000)
N#define ADC_Prescaler_Div8                         ((uint32_t)0x00030000)
N#define IS_ADC_PRESCALER(PRESCALER) (((PRESCALER) == ADC_Prescaler_Div2) || \
N                                     ((PRESCALER) == ADC_Prescaler_Div4) || \
N                                     ((PRESCALER) == ADC_Prescaler_Div6) || \
N                                     ((PRESCALER) == ADC_Prescaler_Div8))
X#define IS_ADC_PRESCALER(PRESCALER) (((PRESCALER) == ADC_Prescaler_Div2) ||                                      ((PRESCALER) == ADC_Prescaler_Div4) ||                                      ((PRESCALER) == ADC_Prescaler_Div6) ||                                      ((PRESCALER) == ADC_Prescaler_Div8))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_Direct_memory_access_mode_for_multi_mode 
N  * @{
N  */ 
N#define ADC_DMAAccessMode_Disabled      ((uint32_t)0x00000000)     /* DMA mode disabled */
N#define ADC_DMAAccessMode_1             ((uint32_t)0x00004000)     /* DMA mode 1 enabled (2 / 3 half-words one by one - 1 then 2 then 3)*/
N#define ADC_DMAAccessMode_2             ((uint32_t)0x00008000)     /* DMA mode 2 enabled (2 / 3 half-words by pairs - 2&1 then 1&3 then 3&2)*/
N#define ADC_DMAAccessMode_3             ((uint32_t)0x0000C000)     /* DMA mode 3 enabled (2 / 3 bytes by pairs - 2&1 then 1&3 then 3&2) */
N#define IS_ADC_DMA_ACCESS_MODE(MODE) (((MODE) == ADC_DMAAccessMode_Disabled) || \
N                                      ((MODE) == ADC_DMAAccessMode_1) || \
N                                      ((MODE) == ADC_DMAAccessMode_2) || \
N                                      ((MODE) == ADC_DMAAccessMode_3))
X#define IS_ADC_DMA_ACCESS_MODE(MODE) (((MODE) == ADC_DMAAccessMode_Disabled) ||                                       ((MODE) == ADC_DMAAccessMode_1) ||                                       ((MODE) == ADC_DMAAccessMode_2) ||                                       ((MODE) == ADC_DMAAccessMode_3))
N                                     
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_delay_between_2_sampling_phases 
N  * @{
N  */ 
N#define ADC_TwoSamplingDelay_5Cycles               ((uint32_t)0x00000000)
N#define ADC_TwoSamplingDelay_6Cycles               ((uint32_t)0x00000100)
N#define ADC_TwoSamplingDelay_7Cycles               ((uint32_t)0x00000200)
N#define ADC_TwoSamplingDelay_8Cycles               ((uint32_t)0x00000300)
N#define ADC_TwoSamplingDelay_9Cycles               ((uint32_t)0x00000400)
N#define ADC_TwoSamplingDelay_10Cycles              ((uint32_t)0x00000500)
N#define ADC_TwoSamplingDelay_11Cycles              ((uint32_t)0x00000600)
N#define ADC_TwoSamplingDelay_12Cycles              ((uint32_t)0x00000700)
N#define ADC_TwoSamplingDelay_13Cycles              ((uint32_t)0x00000800)
N#define ADC_TwoSamplingDelay_14Cycles              ((uint32_t)0x00000900)
N#define ADC_TwoSamplingDelay_15Cycles              ((uint32_t)0x00000A00)
N#define ADC_TwoSamplingDelay_16Cycles              ((uint32_t)0x00000B00)
N#define ADC_TwoSamplingDelay_17Cycles              ((uint32_t)0x00000C00)
N#define ADC_TwoSamplingDelay_18Cycles              ((uint32_t)0x00000D00)
N#define ADC_TwoSamplingDelay_19Cycles              ((uint32_t)0x00000E00)
N#define ADC_TwoSamplingDelay_20Cycles              ((uint32_t)0x00000F00)
N#define IS_ADC_SAMPLING_DELAY(DELAY) (((DELAY) == ADC_TwoSamplingDelay_5Cycles) || \
N                                      ((DELAY) == ADC_TwoSamplingDelay_6Cycles) || \
N                                      ((DELAY) == ADC_TwoSamplingDelay_7Cycles) || \
N                                      ((DELAY) == ADC_TwoSamplingDelay_8Cycles) || \
N                                      ((DELAY) == ADC_TwoSamplingDelay_9Cycles) || \
N                                      ((DELAY) == ADC_TwoSamplingDelay_10Cycles) || \
N                                      ((DELAY) == ADC_TwoSamplingDelay_11Cycles) || \
N                                      ((DELAY) == ADC_TwoSamplingDelay_12Cycles) || \
N                                      ((DELAY) == ADC_TwoSamplingDelay_13Cycles) || \
N                                      ((DELAY) == ADC_TwoSamplingDelay_14Cycles) || \
N                                      ((DELAY) == ADC_TwoSamplingDelay_15Cycles) || \
N                                      ((DELAY) == ADC_TwoSamplingDelay_16Cycles) || \
N                                      ((DELAY) == ADC_TwoSamplingDelay_17Cycles) || \
N                                      ((DELAY) == ADC_TwoSamplingDelay_18Cycles) || \
N                                      ((DELAY) == ADC_TwoSamplingDelay_19Cycles) || \
N                                      ((DELAY) == ADC_TwoSamplingDelay_20Cycles))
X#define IS_ADC_SAMPLING_DELAY(DELAY) (((DELAY) == ADC_TwoSamplingDelay_5Cycles) ||                                       ((DELAY) == ADC_TwoSamplingDelay_6Cycles) ||                                       ((DELAY) == ADC_TwoSamplingDelay_7Cycles) ||                                       ((DELAY) == ADC_TwoSamplingDelay_8Cycles) ||                                       ((DELAY) == ADC_TwoSamplingDelay_9Cycles) ||                                       ((DELAY) == ADC_TwoSamplingDelay_10Cycles) ||                                       ((DELAY) == ADC_TwoSamplingDelay_11Cycles) ||                                       ((DELAY) == ADC_TwoSamplingDelay_12Cycles) ||                                       ((DELAY) == ADC_TwoSamplingDelay_13Cycles) ||                                       ((DELAY) == ADC_TwoSamplingDelay_14Cycles) ||                                       ((DELAY) == ADC_TwoSamplingDelay_15Cycles) ||                                       ((DELAY) == ADC_TwoSamplingDelay_16Cycles) ||                                       ((DELAY) == ADC_TwoSamplingDelay_17Cycles) ||                                       ((DELAY) == ADC_TwoSamplingDelay_18Cycles) ||                                       ((DELAY) == ADC_TwoSamplingDelay_19Cycles) ||                                       ((DELAY) == ADC_TwoSamplingDelay_20Cycles))
N                                     
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_resolution 
N  * @{
N  */ 
N#define ADC_Resolution_12b                         ((uint32_t)0x00000000)
N#define ADC_Resolution_10b                         ((uint32_t)0x01000000)
N#define ADC_Resolution_8b                          ((uint32_t)0x02000000)
N#define ADC_Resolution_6b                          ((uint32_t)0x03000000)
N#define IS_ADC_RESOLUTION(RESOLUTION) (((RESOLUTION) == ADC_Resolution_12b) || \
N                                       ((RESOLUTION) == ADC_Resolution_10b) || \
N                                       ((RESOLUTION) == ADC_Resolution_8b) || \
N                                       ((RESOLUTION) == ADC_Resolution_6b))
X#define IS_ADC_RESOLUTION(RESOLUTION) (((RESOLUTION) == ADC_Resolution_12b) ||                                        ((RESOLUTION) == ADC_Resolution_10b) ||                                        ((RESOLUTION) == ADC_Resolution_8b) ||                                        ((RESOLUTION) == ADC_Resolution_6b))
N                                      
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_external_trigger_edge_for_regular_channels_conversion 
N  * @{
N  */ 
N#define ADC_ExternalTrigConvEdge_None          ((uint32_t)0x00000000)
N#define ADC_ExternalTrigConvEdge_Rising        ((uint32_t)0x10000000)
N#define ADC_ExternalTrigConvEdge_Falling       ((uint32_t)0x20000000)
N#define ADC_ExternalTrigConvEdge_RisingFalling ((uint32_t)0x30000000)
N#define IS_ADC_EXT_TRIG_EDGE(EDGE) (((EDGE) == ADC_ExternalTrigConvEdge_None) || \
N                             ((EDGE) == ADC_ExternalTrigConvEdge_Rising) || \
N                             ((EDGE) == ADC_ExternalTrigConvEdge_Falling) || \
N                             ((EDGE) == ADC_ExternalTrigConvEdge_RisingFalling))
X#define IS_ADC_EXT_TRIG_EDGE(EDGE) (((EDGE) == ADC_ExternalTrigConvEdge_None) ||                              ((EDGE) == ADC_ExternalTrigConvEdge_Rising) ||                              ((EDGE) == ADC_ExternalTrigConvEdge_Falling) ||                              ((EDGE) == ADC_ExternalTrigConvEdge_RisingFalling))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_extrenal_trigger_sources_for_regular_channels_conversion 
N  * @{
N  */ 
N#define ADC_ExternalTrigConv_T1_CC1                ((uint32_t)0x00000000)
N#define ADC_ExternalTrigConv_T1_CC2                ((uint32_t)0x01000000)
N#define ADC_ExternalTrigConv_T1_CC3                ((uint32_t)0x02000000)
N#define ADC_ExternalTrigConv_T2_CC2                ((uint32_t)0x03000000)
N#define ADC_ExternalTrigConv_T2_CC3                ((uint32_t)0x04000000)
N#define ADC_ExternalTrigConv_T2_CC4                ((uint32_t)0x05000000)
N#define ADC_ExternalTrigConv_T2_TRGO               ((uint32_t)0x06000000)
N#define ADC_ExternalTrigConv_T3_CC1                ((uint32_t)0x07000000)
N#define ADC_ExternalTrigConv_T3_TRGO               ((uint32_t)0x08000000)
N#define ADC_ExternalTrigConv_T4_CC4                ((uint32_t)0x09000000)
N#define ADC_ExternalTrigConv_T5_CC1                ((uint32_t)0x0A000000)
N#define ADC_ExternalTrigConv_T5_CC2                ((uint32_t)0x0B000000)
N#define ADC_ExternalTrigConv_T5_CC3                ((uint32_t)0x0C000000)
N#define ADC_ExternalTrigConv_T8_CC1                ((uint32_t)0x0D000000)
N#define ADC_ExternalTrigConv_T8_TRGO               ((uint32_t)0x0E000000)
N#define ADC_ExternalTrigConv_Ext_IT11              ((uint32_t)0x0F000000)
N#define IS_ADC_EXT_TRIG(REGTRIG) (((REGTRIG) == ADC_ExternalTrigConv_T1_CC1) || \
N                                  ((REGTRIG) == ADC_ExternalTrigConv_T1_CC2) || \
N                                  ((REGTRIG) == ADC_ExternalTrigConv_T1_CC3) || \
N                                  ((REGTRIG) == ADC_ExternalTrigConv_T2_CC2) || \
N                                  ((REGTRIG) == ADC_ExternalTrigConv_T2_CC3) || \
N                                  ((REGTRIG) == ADC_ExternalTrigConv_T2_CC4) || \
N                                  ((REGTRIG) == ADC_ExternalTrigConv_T2_TRGO) || \
N                                  ((REGTRIG) == ADC_ExternalTrigConv_T3_CC1) || \
N                                  ((REGTRIG) == ADC_ExternalTrigConv_T3_TRGO) || \
N                                  ((REGTRIG) == ADC_ExternalTrigConv_T4_CC4) || \
N                                  ((REGTRIG) == ADC_ExternalTrigConv_T5_CC1) || \
N                                  ((REGTRIG) == ADC_ExternalTrigConv_T5_CC2) || \
N                                  ((REGTRIG) == ADC_ExternalTrigConv_T5_CC3) || \
N                                  ((REGTRIG) == ADC_ExternalTrigConv_T8_CC1) || \
N                                  ((REGTRIG) == ADC_ExternalTrigConv_T8_TRGO) || \
N                                  ((REGTRIG) == ADC_ExternalTrigConv_Ext_IT11))
X#define IS_ADC_EXT_TRIG(REGTRIG) (((REGTRIG) == ADC_ExternalTrigConv_T1_CC1) ||                                   ((REGTRIG) == ADC_ExternalTrigConv_T1_CC2) ||                                   ((REGTRIG) == ADC_ExternalTrigConv_T1_CC3) ||                                   ((REGTRIG) == ADC_ExternalTrigConv_T2_CC2) ||                                   ((REGTRIG) == ADC_ExternalTrigConv_T2_CC3) ||                                   ((REGTRIG) == ADC_ExternalTrigConv_T2_CC4) ||                                   ((REGTRIG) == ADC_ExternalTrigConv_T2_TRGO) ||                                   ((REGTRIG) == ADC_ExternalTrigConv_T3_CC1) ||                                   ((REGTRIG) == ADC_ExternalTrigConv_T3_TRGO) ||                                   ((REGTRIG) == ADC_ExternalTrigConv_T4_CC4) ||                                   ((REGTRIG) == ADC_ExternalTrigConv_T5_CC1) ||                                   ((REGTRIG) == ADC_ExternalTrigConv_T5_CC2) ||                                   ((REGTRIG) == ADC_ExternalTrigConv_T5_CC3) ||                                   ((REGTRIG) == ADC_ExternalTrigConv_T8_CC1) ||                                   ((REGTRIG) == ADC_ExternalTrigConv_T8_TRGO) ||                                   ((REGTRIG) == ADC_ExternalTrigConv_Ext_IT11))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_data_align 
N  * @{
N  */ 
N#define ADC_DataAlign_Right                        ((uint32_t)0x00000000)
N#define ADC_DataAlign_Left                         ((uint32_t)0x00000800)
N#define IS_ADC_DATA_ALIGN(ALIGN) (((ALIGN) == ADC_DataAlign_Right) || \
N                                  ((ALIGN) == ADC_DataAlign_Left))
X#define IS_ADC_DATA_ALIGN(ALIGN) (((ALIGN) == ADC_DataAlign_Right) ||                                   ((ALIGN) == ADC_DataAlign_Left))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_channels 
N  * @{
N  */ 
N#define ADC_Channel_0                               ((uint8_t)0x00)
N#define ADC_Channel_1                               ((uint8_t)0x01)
N#define ADC_Channel_2                               ((uint8_t)0x02)
N#define ADC_Channel_3                               ((uint8_t)0x03)
N#define ADC_Channel_4                               ((uint8_t)0x04)
N#define ADC_Channel_5                               ((uint8_t)0x05)
N#define ADC_Channel_6                               ((uint8_t)0x06)
N#define ADC_Channel_7                               ((uint8_t)0x07)
N#define ADC_Channel_8                               ((uint8_t)0x08)
N#define ADC_Channel_9                               ((uint8_t)0x09)
N#define ADC_Channel_10                              ((uint8_t)0x0A)
N#define ADC_Channel_11                              ((uint8_t)0x0B)
N#define ADC_Channel_12                              ((uint8_t)0x0C)
N#define ADC_Channel_13                              ((uint8_t)0x0D)
N#define ADC_Channel_14                              ((uint8_t)0x0E)
N#define ADC_Channel_15                              ((uint8_t)0x0F)
N#define ADC_Channel_16                              ((uint8_t)0x10)
N#define ADC_Channel_17                              ((uint8_t)0x11)
N#define ADC_Channel_18                              ((uint8_t)0x12)
N
N#if defined (STM32F40_41xxx)
X#if 1L
N#define ADC_Channel_TempSensor                      ((uint8_t)ADC_Channel_16)
N#endif /* STM32F40_41xxx */
N
N#if defined (STM32F427_437xx) || defined (STM32F429_439xx) || defined (STM32F401xx)
X#if 0L || 0L || 0L
S#define ADC_Channel_TempSensor                      ((uint8_t)ADC_Channel_18)
N#endif /* STM32F427_437xx || STM32F429_439xx || STM32F401xx */
N
N#define ADC_Channel_Vrefint                         ((uint8_t)ADC_Channel_17)
N#define ADC_Channel_Vbat                            ((uint8_t)ADC_Channel_18)
N
N#define IS_ADC_CHANNEL(CHANNEL) (((CHANNEL) == ADC_Channel_0) || \
N                                 ((CHANNEL) == ADC_Channel_1) || \
N                                 ((CHANNEL) == ADC_Channel_2) || \
N                                 ((CHANNEL) == ADC_Channel_3) || \
N                                 ((CHANNEL) == ADC_Channel_4) || \
N                                 ((CHANNEL) == ADC_Channel_5) || \
N                                 ((CHANNEL) == ADC_Channel_6) || \
N                                 ((CHANNEL) == ADC_Channel_7) || \
N                                 ((CHANNEL) == ADC_Channel_8) || \
N                                 ((CHANNEL) == ADC_Channel_9) || \
N                                 ((CHANNEL) == ADC_Channel_10) || \
N                                 ((CHANNEL) == ADC_Channel_11) || \
N                                 ((CHANNEL) == ADC_Channel_12) || \
N                                 ((CHANNEL) == ADC_Channel_13) || \
N                                 ((CHANNEL) == ADC_Channel_14) || \
N                                 ((CHANNEL) == ADC_Channel_15) || \
N                                 ((CHANNEL) == ADC_Channel_16) || \
N                                 ((CHANNEL) == ADC_Channel_17) || \
N                                 ((CHANNEL) == ADC_Channel_18))
X#define IS_ADC_CHANNEL(CHANNEL) (((CHANNEL) == ADC_Channel_0) ||                                  ((CHANNEL) == ADC_Channel_1) ||                                  ((CHANNEL) == ADC_Channel_2) ||                                  ((CHANNEL) == ADC_Channel_3) ||                                  ((CHANNEL) == ADC_Channel_4) ||                                  ((CHANNEL) == ADC_Channel_5) ||                                  ((CHANNEL) == ADC_Channel_6) ||                                  ((CHANNEL) == ADC_Channel_7) ||                                  ((CHANNEL) == ADC_Channel_8) ||                                  ((CHANNEL) == ADC_Channel_9) ||                                  ((CHANNEL) == ADC_Channel_10) ||                                  ((CHANNEL) == ADC_Channel_11) ||                                  ((CHANNEL) == ADC_Channel_12) ||                                  ((CHANNEL) == ADC_Channel_13) ||                                  ((CHANNEL) == ADC_Channel_14) ||                                  ((CHANNEL) == ADC_Channel_15) ||                                  ((CHANNEL) == ADC_Channel_16) ||                                  ((CHANNEL) == ADC_Channel_17) ||                                  ((CHANNEL) == ADC_Channel_18))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_sampling_times 
N  * @{
N  */ 
N#define ADC_SampleTime_3Cycles                    ((uint8_t)0x00)
N#define ADC_SampleTime_15Cycles                   ((uint8_t)0x01)
N#define ADC_SampleTime_28Cycles                   ((uint8_t)0x02)
N#define ADC_SampleTime_56Cycles                   ((uint8_t)0x03)
N#define ADC_SampleTime_84Cycles                   ((uint8_t)0x04)
N#define ADC_SampleTime_112Cycles                  ((uint8_t)0x05)
N#define ADC_SampleTime_144Cycles                  ((uint8_t)0x06)
N#define ADC_SampleTime_480Cycles                  ((uint8_t)0x07)
N#define IS_ADC_SAMPLE_TIME(TIME) (((TIME) == ADC_SampleTime_3Cycles) || \
N                                  ((TIME) == ADC_SampleTime_15Cycles) || \
N                                  ((TIME) == ADC_SampleTime_28Cycles) || \
N                                  ((TIME) == ADC_SampleTime_56Cycles) || \
N                                  ((TIME) == ADC_SampleTime_84Cycles) || \
N                                  ((TIME) == ADC_SampleTime_112Cycles) || \
N                                  ((TIME) == ADC_SampleTime_144Cycles) || \
N                                  ((TIME) == ADC_SampleTime_480Cycles))
X#define IS_ADC_SAMPLE_TIME(TIME) (((TIME) == ADC_SampleTime_3Cycles) ||                                   ((TIME) == ADC_SampleTime_15Cycles) ||                                   ((TIME) == ADC_SampleTime_28Cycles) ||                                   ((TIME) == ADC_SampleTime_56Cycles) ||                                   ((TIME) == ADC_SampleTime_84Cycles) ||                                   ((TIME) == ADC_SampleTime_112Cycles) ||                                   ((TIME) == ADC_SampleTime_144Cycles) ||                                   ((TIME) == ADC_SampleTime_480Cycles))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_external_trigger_edge_for_injected_channels_conversion 
N  * @{
N  */ 
N#define ADC_ExternalTrigInjecConvEdge_None          ((uint32_t)0x00000000)
N#define ADC_ExternalTrigInjecConvEdge_Rising        ((uint32_t)0x00100000)
N#define ADC_ExternalTrigInjecConvEdge_Falling       ((uint32_t)0x00200000)
N#define ADC_ExternalTrigInjecConvEdge_RisingFalling ((uint32_t)0x00300000)
N#define IS_ADC_EXT_INJEC_TRIG_EDGE(EDGE) (((EDGE) == ADC_ExternalTrigInjecConvEdge_None) || \
N                                          ((EDGE) == ADC_ExternalTrigInjecConvEdge_Rising) || \
N                                          ((EDGE) == ADC_ExternalTrigInjecConvEdge_Falling) || \
N                                          ((EDGE) == ADC_ExternalTrigInjecConvEdge_RisingFalling))
X#define IS_ADC_EXT_INJEC_TRIG_EDGE(EDGE) (((EDGE) == ADC_ExternalTrigInjecConvEdge_None) ||                                           ((EDGE) == ADC_ExternalTrigInjecConvEdge_Rising) ||                                           ((EDGE) == ADC_ExternalTrigInjecConvEdge_Falling) ||                                           ((EDGE) == ADC_ExternalTrigInjecConvEdge_RisingFalling))
N                                            
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_extrenal_trigger_sources_for_injected_channels_conversion 
N  * @{
N  */ 
N#define ADC_ExternalTrigInjecConv_T1_CC4            ((uint32_t)0x00000000)
N#define ADC_ExternalTrigInjecConv_T1_TRGO           ((uint32_t)0x00010000)
N#define ADC_ExternalTrigInjecConv_T2_CC1            ((uint32_t)0x00020000)
N#define ADC_ExternalTrigInjecConv_T2_TRGO           ((uint32_t)0x00030000)
N#define ADC_ExternalTrigInjecConv_T3_CC2            ((uint32_t)0x00040000)
N#define ADC_ExternalTrigInjecConv_T3_CC4            ((uint32_t)0x00050000)
N#define ADC_ExternalTrigInjecConv_T4_CC1            ((uint32_t)0x00060000)
N#define ADC_ExternalTrigInjecConv_T4_CC2            ((uint32_t)0x00070000)
N#define ADC_ExternalTrigInjecConv_T4_CC3            ((uint32_t)0x00080000)
N#define ADC_ExternalTrigInjecConv_T4_TRGO           ((uint32_t)0x00090000)
N#define ADC_ExternalTrigInjecConv_T5_CC4            ((uint32_t)0x000A0000)
N#define ADC_ExternalTrigInjecConv_T5_TRGO           ((uint32_t)0x000B0000)
N#define ADC_ExternalTrigInjecConv_T8_CC2            ((uint32_t)0x000C0000)
N#define ADC_ExternalTrigInjecConv_T8_CC3            ((uint32_t)0x000D0000)
N#define ADC_ExternalTrigInjecConv_T8_CC4            ((uint32_t)0x000E0000)
N#define ADC_ExternalTrigInjecConv_Ext_IT15          ((uint32_t)0x000F0000)
N#define IS_ADC_EXT_INJEC_TRIG(INJTRIG) (((INJTRIG) == ADC_ExternalTrigInjecConv_T1_CC4) || \
N                                        ((INJTRIG) == ADC_ExternalTrigInjecConv_T1_TRGO) || \
N                                        ((INJTRIG) == ADC_ExternalTrigInjecConv_T2_CC1) || \
N                                        ((INJTRIG) == ADC_ExternalTrigInjecConv_T2_TRGO) || \
N                                        ((INJTRIG) == ADC_ExternalTrigInjecConv_T3_CC2) || \
N                                        ((INJTRIG) == ADC_ExternalTrigInjecConv_T3_CC4) || \
N                                        ((INJTRIG) == ADC_ExternalTrigInjecConv_T4_CC1) || \
N                                        ((INJTRIG) == ADC_ExternalTrigInjecConv_T4_CC2) || \
N                                        ((INJTRIG) == ADC_ExternalTrigInjecConv_T4_CC3) || \
N                                        ((INJTRIG) == ADC_ExternalTrigInjecConv_T4_TRGO) || \
N                                        ((INJTRIG) == ADC_ExternalTrigInjecConv_T5_CC4) || \
N                                        ((INJTRIG) == ADC_ExternalTrigInjecConv_T5_TRGO) || \
N                                        ((INJTRIG) == ADC_ExternalTrigInjecConv_T8_CC2) || \
N                                        ((INJTRIG) == ADC_ExternalTrigInjecConv_T8_CC3) || \
N                                        ((INJTRIG) == ADC_ExternalTrigInjecConv_T8_CC4) || \
N                                        ((INJTRIG) == ADC_ExternalTrigInjecConv_Ext_IT15))
X#define IS_ADC_EXT_INJEC_TRIG(INJTRIG) (((INJTRIG) == ADC_ExternalTrigInjecConv_T1_CC4) ||                                         ((INJTRIG) == ADC_ExternalTrigInjecConv_T1_TRGO) ||                                         ((INJTRIG) == ADC_ExternalTrigInjecConv_T2_CC1) ||                                         ((INJTRIG) == ADC_ExternalTrigInjecConv_T2_TRGO) ||                                         ((INJTRIG) == ADC_ExternalTrigInjecConv_T3_CC2) ||                                         ((INJTRIG) == ADC_ExternalTrigInjecConv_T3_CC4) ||                                         ((INJTRIG) == ADC_ExternalTrigInjecConv_T4_CC1) ||                                         ((INJTRIG) == ADC_ExternalTrigInjecConv_T4_CC2) ||                                         ((INJTRIG) == ADC_ExternalTrigInjecConv_T4_CC3) ||                                         ((INJTRIG) == ADC_ExternalTrigInjecConv_T4_TRGO) ||                                         ((INJTRIG) == ADC_ExternalTrigInjecConv_T5_CC4) ||                                         ((INJTRIG) == ADC_ExternalTrigInjecConv_T5_TRGO) ||                                         ((INJTRIG) == ADC_ExternalTrigInjecConv_T8_CC2) ||                                         ((INJTRIG) == ADC_ExternalTrigInjecConv_T8_CC3) ||                                         ((INJTRIG) == ADC_ExternalTrigInjecConv_T8_CC4) ||                                         ((INJTRIG) == ADC_ExternalTrigInjecConv_Ext_IT15))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_injected_channel_selection 
N  * @{
N  */ 
N#define ADC_InjectedChannel_1                       ((uint8_t)0x14)
N#define ADC_InjectedChannel_2                       ((uint8_t)0x18)
N#define ADC_InjectedChannel_3                       ((uint8_t)0x1C)
N#define ADC_InjectedChannel_4                       ((uint8_t)0x20)
N#define IS_ADC_INJECTED_CHANNEL(CHANNEL) (((CHANNEL) == ADC_InjectedChannel_1) || \
N                                          ((CHANNEL) == ADC_InjectedChannel_2) || \
N                                          ((CHANNEL) == ADC_InjectedChannel_3) || \
N                                          ((CHANNEL) == ADC_InjectedChannel_4))
X#define IS_ADC_INJECTED_CHANNEL(CHANNEL) (((CHANNEL) == ADC_InjectedChannel_1) ||                                           ((CHANNEL) == ADC_InjectedChannel_2) ||                                           ((CHANNEL) == ADC_InjectedChannel_3) ||                                           ((CHANNEL) == ADC_InjectedChannel_4))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_analog_watchdog_selection 
N  * @{
N  */ 
N#define ADC_AnalogWatchdog_SingleRegEnable         ((uint32_t)0x00800200)
N#define ADC_AnalogWatchdog_SingleInjecEnable       ((uint32_t)0x00400200)
N#define ADC_AnalogWatchdog_SingleRegOrInjecEnable  ((uint32_t)0x00C00200)
N#define ADC_AnalogWatchdog_AllRegEnable            ((uint32_t)0x00800000)
N#define ADC_AnalogWatchdog_AllInjecEnable          ((uint32_t)0x00400000)
N#define ADC_AnalogWatchdog_AllRegAllInjecEnable    ((uint32_t)0x00C00000)
N#define ADC_AnalogWatchdog_None                    ((uint32_t)0x00000000)
N#define IS_ADC_ANALOG_WATCHDOG(WATCHDOG) (((WATCHDOG) == ADC_AnalogWatchdog_SingleRegEnable) || \
N                                          ((WATCHDOG) == ADC_AnalogWatchdog_SingleInjecEnable) || \
N                                          ((WATCHDOG) == ADC_AnalogWatchdog_SingleRegOrInjecEnable) || \
N                                          ((WATCHDOG) == ADC_AnalogWatchdog_AllRegEnable) || \
N                                          ((WATCHDOG) == ADC_AnalogWatchdog_AllInjecEnable) || \
N                                          ((WATCHDOG) == ADC_AnalogWatchdog_AllRegAllInjecEnable) || \
N                                          ((WATCHDOG) == ADC_AnalogWatchdog_None))
X#define IS_ADC_ANALOG_WATCHDOG(WATCHDOG) (((WATCHDOG) == ADC_AnalogWatchdog_SingleRegEnable) ||                                           ((WATCHDOG) == ADC_AnalogWatchdog_SingleInjecEnable) ||                                           ((WATCHDOG) == ADC_AnalogWatchdog_SingleRegOrInjecEnable) ||                                           ((WATCHDOG) == ADC_AnalogWatchdog_AllRegEnable) ||                                           ((WATCHDOG) == ADC_AnalogWatchdog_AllInjecEnable) ||                                           ((WATCHDOG) == ADC_AnalogWatchdog_AllRegAllInjecEnable) ||                                           ((WATCHDOG) == ADC_AnalogWatchdog_None))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_interrupts_definition 
N  * @{
N  */ 
N#define ADC_IT_EOC                                 ((uint16_t)0x0205)  
N#define ADC_IT_AWD                                 ((uint16_t)0x0106)  
N#define ADC_IT_JEOC                                ((uint16_t)0x0407)  
N#define ADC_IT_OVR                                 ((uint16_t)0x201A)  
N#define IS_ADC_IT(IT) (((IT) == ADC_IT_EOC) || ((IT) == ADC_IT_AWD) || \
N                       ((IT) == ADC_IT_JEOC)|| ((IT) == ADC_IT_OVR)) 
X#define IS_ADC_IT(IT) (((IT) == ADC_IT_EOC) || ((IT) == ADC_IT_AWD) ||                        ((IT) == ADC_IT_JEOC)|| ((IT) == ADC_IT_OVR)) 
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_flags_definition 
N  * @{
N  */ 
N#define ADC_FLAG_AWD                               ((uint8_t)0x01)
N#define ADC_FLAG_EOC                               ((uint8_t)0x02)
N#define ADC_FLAG_JEOC                              ((uint8_t)0x04)
N#define ADC_FLAG_JSTRT                             ((uint8_t)0x08)
N#define ADC_FLAG_STRT                              ((uint8_t)0x10)
N#define ADC_FLAG_OVR                               ((uint8_t)0x20)   
N  
N#define IS_ADC_CLEAR_FLAG(FLAG) ((((FLAG) & (uint8_t)0xC0) == 0x00) && ((FLAG) != 0x00))   
N#define IS_ADC_GET_FLAG(FLAG) (((FLAG) == ADC_FLAG_AWD) || \
N                               ((FLAG) == ADC_FLAG_EOC) || \
N                               ((FLAG) == ADC_FLAG_JEOC) || \
N                               ((FLAG)== ADC_FLAG_JSTRT) || \
N                               ((FLAG) == ADC_FLAG_STRT) || \
N                               ((FLAG)== ADC_FLAG_OVR))     
X#define IS_ADC_GET_FLAG(FLAG) (((FLAG) == ADC_FLAG_AWD) ||                                ((FLAG) == ADC_FLAG_EOC) ||                                ((FLAG) == ADC_FLAG_JEOC) ||                                ((FLAG)== ADC_FLAG_JSTRT) ||                                ((FLAG) == ADC_FLAG_STRT) ||                                ((FLAG)== ADC_FLAG_OVR))     
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_thresholds 
N  * @{
N  */ 
N#define IS_ADC_THRESHOLD(THRESHOLD) ((THRESHOLD) <= 0xFFF)
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_injected_offset 
N  * @{
N  */ 
N#define IS_ADC_OFFSET(OFFSET) ((OFFSET) <= 0xFFF)
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_injected_length 
N  * @{
N  */ 
N#define IS_ADC_INJECTED_LENGTH(LENGTH) (((LENGTH) >= 0x1) && ((LENGTH) <= 0x4))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_injected_rank 
N  * @{
N  */ 
N#define IS_ADC_INJECTED_RANK(RANK) (((RANK) >= 0x1) && ((RANK) <= 0x4))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_regular_length 
N  * @{
N  */ 
N#define IS_ADC_REGULAR_LENGTH(LENGTH) (((LENGTH) >= 0x1) && ((LENGTH) <= 0x10))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_regular_rank 
N  * @{
N  */ 
N#define IS_ADC_REGULAR_RANK(RANK) (((RANK) >= 0x1) && ((RANK) <= 0x10))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup ADC_regular_discontinuous_mode_number 
N  * @{
N  */ 
N#define IS_ADC_REGULAR_DISC_NUMBER(NUMBER) (((NUMBER) >= 0x1) && ((NUMBER) <= 0x8))
N/**
N  * @}
N  */ 
N
N
N/**
N  * @}
N  */ 
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/  
N
N/*  Function used to set the ADC configuration to the default reset state *****/  
Nvoid ADC_DeInit(void);
N
N/* Initialization and Configuration functions *********************************/
Nvoid ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct);
Nvoid ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct);
Nvoid ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct);
Nvoid ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct);
Nvoid ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState);
N
N/* Analog Watchdog configuration functions ************************************/
Nvoid ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog);
Nvoid ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,uint16_t LowThreshold);
Nvoid ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel);
N
N/* Temperature Sensor, Vrefint and VBAT management functions ******************/
Nvoid ADC_TempSensorVrefintCmd(FunctionalState NewState);
Nvoid ADC_VBATCmd(FunctionalState NewState);
N
N/* Regular Channels Configuration functions ***********************************/
Nvoid ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime);
Nvoid ADC_SoftwareStartConv(ADC_TypeDef* ADCx);
NFlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx);
Nvoid ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
Nvoid ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
Nvoid ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number);
Nvoid ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
Nuint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx);
Nuint32_t ADC_GetMultiModeConversionValue(void);
N
N/* Regular Channels DMA Configuration functions *******************************/
Nvoid ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState);
Nvoid ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
Nvoid ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState);
N
N/* Injected channels Configuration functions **********************************/
Nvoid ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime);
Nvoid ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length);
Nvoid ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset);
Nvoid ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv);
Nvoid ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge);
Nvoid ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx);
NFlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx);
Nvoid ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
Nvoid ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
Nuint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel);
N
N/* Interrupts and flags management functions **********************************/
Nvoid ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState);
NFlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG);
Nvoid ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG);
NITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT);
Nvoid ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__STM32F4xx_ADC_H */
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 52 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_crc.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_crc.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_crc.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the CRC firmware 
N  *          library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_CRC_H
N#define __STM32F4xx_CRC_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup CRC
N  * @{
N  */
N
N/* Exported types ------------------------------------------------------------*/
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup CRC_Exported_Constants
N  * @{
N  */
N
N/**
N  * @}
N  */
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/  
N
Nvoid CRC_ResetDR(void);
Nuint32_t CRC_CalcCRC(uint32_t Data);
Nuint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength);
Nuint32_t CRC_GetCRC(void);
Nvoid CRC_SetIDRegister(uint8_t IDValue);
Nuint8_t CRC_GetIDRegister(void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32F4xx_CRC_H */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 53 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_dbgmcu.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_dbgmcu.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_dbgmcu.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the DBGMCU firmware library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_DBGMCU_H
N#define __STM32F4xx_DBGMCU_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup DBGMCU
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup DBGMCU_Exported_Constants
N  * @{
N  */ 
N#define DBGMCU_SLEEP                 ((uint32_t)0x00000001)
N#define DBGMCU_STOP                  ((uint32_t)0x00000002)
N#define DBGMCU_STANDBY               ((uint32_t)0x00000004)
N#define IS_DBGMCU_PERIPH(PERIPH) ((((PERIPH) & 0xFFFFFFF8) == 0x00) && ((PERIPH) != 0x00))
N
N#define DBGMCU_TIM2_STOP             ((uint32_t)0x00000001)
N#define DBGMCU_TIM3_STOP             ((uint32_t)0x00000002)
N#define DBGMCU_TIM4_STOP             ((uint32_t)0x00000004)
N#define DBGMCU_TIM5_STOP             ((uint32_t)0x00000008)
N#define DBGMCU_TIM6_STOP             ((uint32_t)0x00000010)
N#define DBGMCU_TIM7_STOP             ((uint32_t)0x00000020)
N#define DBGMCU_TIM12_STOP            ((uint32_t)0x00000040)
N#define DBGMCU_TIM13_STOP            ((uint32_t)0x00000080)
N#define DBGMCU_TIM14_STOP            ((uint32_t)0x00000100)
N#define DBGMCU_RTC_STOP              ((uint32_t)0x00000400)
N#define DBGMCU_WWDG_STOP             ((uint32_t)0x00000800)
N#define DBGMCU_IWDG_STOP             ((uint32_t)0x00001000)
N#define DBGMCU_I2C1_SMBUS_TIMEOUT    ((uint32_t)0x00200000)
N#define DBGMCU_I2C2_SMBUS_TIMEOUT    ((uint32_t)0x00400000)
N#define DBGMCU_I2C3_SMBUS_TIMEOUT    ((uint32_t)0x00800000)
N#define DBGMCU_CAN1_STOP             ((uint32_t)0x02000000)
N#define DBGMCU_CAN2_STOP             ((uint32_t)0x04000000)
N#define IS_DBGMCU_APB1PERIPH(PERIPH) ((((PERIPH) & 0xF91FE200) == 0x00) && ((PERIPH) != 0x00))
N
N#define DBGMCU_TIM1_STOP             ((uint32_t)0x00000001)
N#define DBGMCU_TIM8_STOP             ((uint32_t)0x00000002)
N#define DBGMCU_TIM9_STOP             ((uint32_t)0x00010000)
N#define DBGMCU_TIM10_STOP            ((uint32_t)0x00020000)
N#define DBGMCU_TIM11_STOP            ((uint32_t)0x00040000)
N#define IS_DBGMCU_APB2PERIPH(PERIPH) ((((PERIPH) & 0xFFF8FFFC) == 0x00) && ((PERIPH) != 0x00))
N/**
N  * @}
N  */ 
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/ 
Nuint32_t DBGMCU_GetREVID(void);
Nuint32_t DBGMCU_GetDEVID(void);
Nvoid DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState);
Nvoid DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState);
Nvoid DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32F4xx_DBGMCU_H */
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 54 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_dma.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_dma.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_dma.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the DMA firmware 
N  *          library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************  
N  */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_DMA_H
N#define __STM32F4xx_DMA_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup DMA
N  * @{
N  */
N
N/* Exported types ------------------------------------------------------------*/
N
N/** 
N  * @brief  DMA Init structure definition
N  */
N
Ntypedef struct
N{
N  uint32_t DMA_Channel;            /*!< Specifies the channel used for the specified stream. 
N                                        This parameter can be a value of @ref DMA_channel */
N 
N  uint32_t DMA_PeripheralBaseAddr; /*!< Specifies the peripheral base address for DMAy Streamx. */
N
N  uint32_t DMA_Memory0BaseAddr;    /*!< Specifies the memory 0 base address for DMAy Streamx. 
N                                        This memory is the default memory used when double buffer mode is
N                                        not enabled. */
N
N  uint32_t DMA_DIR;                /*!< Specifies if the data will be transferred from memory to peripheral, 
N                                        from memory to memory or from peripheral to memory.
N                                        This parameter can be a value of @ref DMA_data_transfer_direction */
N
N  uint32_t DMA_BufferSize;         /*!< Specifies the buffer size, in data unit, of the specified Stream. 
N                                        The data unit is equal to the configuration set in DMA_PeripheralDataSize
N                                        or DMA_MemoryDataSize members depending in the transfer direction. */
N
N  uint32_t DMA_PeripheralInc;      /*!< Specifies whether the Peripheral address register should be incremented or not.
N                                        This parameter can be a value of @ref DMA_peripheral_incremented_mode */
N
N  uint32_t DMA_MemoryInc;          /*!< Specifies whether the memory address register should be incremented or not.
N                                        This parameter can be a value of @ref DMA_memory_incremented_mode */
N
N  uint32_t DMA_PeripheralDataSize; /*!< Specifies the Peripheral data width.
N                                        This parameter can be a value of @ref DMA_peripheral_data_size */
N
N  uint32_t DMA_MemoryDataSize;     /*!< Specifies the Memory data width.
N                                        This parameter can be a value of @ref DMA_memory_data_size */
N
N  uint32_t DMA_Mode;               /*!< Specifies the operation mode of the DMAy Streamx.
N                                        This parameter can be a value of @ref DMA_circular_normal_mode
N                                        @note The circular buffer mode cannot be used if the memory-to-memory
N                                              data transfer is configured on the selected Stream */
N
N  uint32_t DMA_Priority;           /*!< Specifies the software priority for the DMAy Streamx.
N                                        This parameter can be a value of @ref DMA_priority_level */
N
N  uint32_t DMA_FIFOMode;          /*!< Specifies if the FIFO mode or Direct mode will be used for the specified Stream.
N                                        This parameter can be a value of @ref DMA_fifo_direct_mode
N                                        @note The Direct mode (FIFO mode disabled) cannot be used if the 
N                                               memory-to-memory data transfer is configured on the selected Stream */
N
N  uint32_t DMA_FIFOThreshold;      /*!< Specifies the FIFO threshold level.
N                                        This parameter can be a value of @ref DMA_fifo_threshold_level */
N
N  uint32_t DMA_MemoryBurst;        /*!< Specifies the Burst transfer configuration for the memory transfers. 
N                                        It specifies the amount of data to be transferred in a single non interruptable 
N                                        transaction. This parameter can be a value of @ref DMA_memory_burst 
N                                        @note The burst mode is possible only if the address Increment mode is enabled. */
N
N  uint32_t DMA_PeripheralBurst;    /*!< Specifies the Burst transfer configuration for the peripheral transfers. 
N                                        It specifies the amount of data to be transferred in a single non interruptable 
N                                        transaction. This parameter can be a value of @ref DMA_peripheral_burst
N                                        @note The burst mode is possible only if the address Increment mode is enabled. */  
N}DMA_InitTypeDef;
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup DMA_Exported_Constants
N  * @{
N  */
N
N#define IS_DMA_ALL_PERIPH(PERIPH) (((PERIPH) == DMA1_Stream0) || \
N                                   ((PERIPH) == DMA1_Stream1) || \
N                                   ((PERIPH) == DMA1_Stream2) || \
N                                   ((PERIPH) == DMA1_Stream3) || \
N                                   ((PERIPH) == DMA1_Stream4) || \
N                                   ((PERIPH) == DMA1_Stream5) || \
N                                   ((PERIPH) == DMA1_Stream6) || \
N                                   ((PERIPH) == DMA1_Stream7) || \
N                                   ((PERIPH) == DMA2_Stream0) || \
N                                   ((PERIPH) == DMA2_Stream1) || \
N                                   ((PERIPH) == DMA2_Stream2) || \
N                                   ((PERIPH) == DMA2_Stream3) || \
N                                   ((PERIPH) == DMA2_Stream4) || \
N                                   ((PERIPH) == DMA2_Stream5) || \
N                                   ((PERIPH) == DMA2_Stream6) || \
N                                   ((PERIPH) == DMA2_Stream7))
X#define IS_DMA_ALL_PERIPH(PERIPH) (((PERIPH) == DMA1_Stream0) ||                                    ((PERIPH) == DMA1_Stream1) ||                                    ((PERIPH) == DMA1_Stream2) ||                                    ((PERIPH) == DMA1_Stream3) ||                                    ((PERIPH) == DMA1_Stream4) ||                                    ((PERIPH) == DMA1_Stream5) ||                                    ((PERIPH) == DMA1_Stream6) ||                                    ((PERIPH) == DMA1_Stream7) ||                                    ((PERIPH) == DMA2_Stream0) ||                                    ((PERIPH) == DMA2_Stream1) ||                                    ((PERIPH) == DMA2_Stream2) ||                                    ((PERIPH) == DMA2_Stream3) ||                                    ((PERIPH) == DMA2_Stream4) ||                                    ((PERIPH) == DMA2_Stream5) ||                                    ((PERIPH) == DMA2_Stream6) ||                                    ((PERIPH) == DMA2_Stream7))
N
N#define IS_DMA_ALL_CONTROLLER(CONTROLLER) (((CONTROLLER) == DMA1) || \
N                                           ((CONTROLLER) == DMA2))
X#define IS_DMA_ALL_CONTROLLER(CONTROLLER) (((CONTROLLER) == DMA1) ||                                            ((CONTROLLER) == DMA2))
N
N/** @defgroup DMA_channel 
N  * @{
N  */ 
N#define DMA_Channel_0                     ((uint32_t)0x00000000)
N#define DMA_Channel_1                     ((uint32_t)0x02000000)
N#define DMA_Channel_2                     ((uint32_t)0x04000000)
N#define DMA_Channel_3                     ((uint32_t)0x06000000)
N#define DMA_Channel_4                     ((uint32_t)0x08000000)
N#define DMA_Channel_5                     ((uint32_t)0x0A000000)
N#define DMA_Channel_6                     ((uint32_t)0x0C000000)
N#define DMA_Channel_7                     ((uint32_t)0x0E000000)
N
N#define IS_DMA_CHANNEL(CHANNEL) (((CHANNEL) == DMA_Channel_0) || \
N                                 ((CHANNEL) == DMA_Channel_1) || \
N                                 ((CHANNEL) == DMA_Channel_2) || \
N                                 ((CHANNEL) == DMA_Channel_3) || \
N                                 ((CHANNEL) == DMA_Channel_4) || \
N                                 ((CHANNEL) == DMA_Channel_5) || \
N                                 ((CHANNEL) == DMA_Channel_6) || \
N                                 ((CHANNEL) == DMA_Channel_7))
X#define IS_DMA_CHANNEL(CHANNEL) (((CHANNEL) == DMA_Channel_0) ||                                  ((CHANNEL) == DMA_Channel_1) ||                                  ((CHANNEL) == DMA_Channel_2) ||                                  ((CHANNEL) == DMA_Channel_3) ||                                  ((CHANNEL) == DMA_Channel_4) ||                                  ((CHANNEL) == DMA_Channel_5) ||                                  ((CHANNEL) == DMA_Channel_6) ||                                  ((CHANNEL) == DMA_Channel_7))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_data_transfer_direction 
N  * @{
N  */ 
N#define DMA_DIR_PeripheralToMemory        ((uint32_t)0x00000000)
N#define DMA_DIR_MemoryToPeripheral        ((uint32_t)0x00000040) 
N#define DMA_DIR_MemoryToMemory            ((uint32_t)0x00000080)
N
N#define IS_DMA_DIRECTION(DIRECTION) (((DIRECTION) == DMA_DIR_PeripheralToMemory ) || \
N                                     ((DIRECTION) == DMA_DIR_MemoryToPeripheral)  || \
N                                     ((DIRECTION) == DMA_DIR_MemoryToMemory)) 
X#define IS_DMA_DIRECTION(DIRECTION) (((DIRECTION) == DMA_DIR_PeripheralToMemory ) ||                                      ((DIRECTION) == DMA_DIR_MemoryToPeripheral)  ||                                      ((DIRECTION) == DMA_DIR_MemoryToMemory)) 
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_data_buffer_size 
N  * @{
N  */ 
N#define IS_DMA_BUFFER_SIZE(SIZE) (((SIZE) >= 0x1) && ((SIZE) < 0x10000))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_peripheral_incremented_mode 
N  * @{
N  */ 
N#define DMA_PeripheralInc_Enable          ((uint32_t)0x00000200)
N#define DMA_PeripheralInc_Disable         ((uint32_t)0x00000000)
N
N#define IS_DMA_PERIPHERAL_INC_STATE(STATE) (((STATE) == DMA_PeripheralInc_Enable) || \
N                                            ((STATE) == DMA_PeripheralInc_Disable))
X#define IS_DMA_PERIPHERAL_INC_STATE(STATE) (((STATE) == DMA_PeripheralInc_Enable) ||                                             ((STATE) == DMA_PeripheralInc_Disable))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_memory_incremented_mode 
N  * @{
N  */ 
N#define DMA_MemoryInc_Enable              ((uint32_t)0x00000400)
N#define DMA_MemoryInc_Disable             ((uint32_t)0x00000000)
N
N#define IS_DMA_MEMORY_INC_STATE(STATE) (((STATE) == DMA_MemoryInc_Enable) || \
N                                        ((STATE) == DMA_MemoryInc_Disable))
X#define IS_DMA_MEMORY_INC_STATE(STATE) (((STATE) == DMA_MemoryInc_Enable) ||                                         ((STATE) == DMA_MemoryInc_Disable))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_peripheral_data_size 
N  * @{
N  */ 
N#define DMA_PeripheralDataSize_Byte       ((uint32_t)0x00000000) 
N#define DMA_PeripheralDataSize_HalfWord   ((uint32_t)0x00000800) 
N#define DMA_PeripheralDataSize_Word       ((uint32_t)0x00001000)
N
N#define IS_DMA_PERIPHERAL_DATA_SIZE(SIZE) (((SIZE) == DMA_PeripheralDataSize_Byte)  || \
N                                           ((SIZE) == DMA_PeripheralDataSize_HalfWord) || \
N                                           ((SIZE) == DMA_PeripheralDataSize_Word))
X#define IS_DMA_PERIPHERAL_DATA_SIZE(SIZE) (((SIZE) == DMA_PeripheralDataSize_Byte)  ||                                            ((SIZE) == DMA_PeripheralDataSize_HalfWord) ||                                            ((SIZE) == DMA_PeripheralDataSize_Word))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_memory_data_size 
N  * @{
N  */ 
N#define DMA_MemoryDataSize_Byte           ((uint32_t)0x00000000) 
N#define DMA_MemoryDataSize_HalfWord       ((uint32_t)0x00002000) 
N#define DMA_MemoryDataSize_Word           ((uint32_t)0x00004000)
N
N#define IS_DMA_MEMORY_DATA_SIZE(SIZE) (((SIZE) == DMA_MemoryDataSize_Byte)  || \
N                                       ((SIZE) == DMA_MemoryDataSize_HalfWord) || \
N                                       ((SIZE) == DMA_MemoryDataSize_Word ))
X#define IS_DMA_MEMORY_DATA_SIZE(SIZE) (((SIZE) == DMA_MemoryDataSize_Byte)  ||                                        ((SIZE) == DMA_MemoryDataSize_HalfWord) ||                                        ((SIZE) == DMA_MemoryDataSize_Word ))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_circular_normal_mode 
N  * @{
N  */ 
N#define DMA_Mode_Normal                   ((uint32_t)0x00000000) 
N#define DMA_Mode_Circular                 ((uint32_t)0x00000100)
N
N#define IS_DMA_MODE(MODE) (((MODE) == DMA_Mode_Normal ) || \
N                           ((MODE) == DMA_Mode_Circular)) 
X#define IS_DMA_MODE(MODE) (((MODE) == DMA_Mode_Normal ) ||                            ((MODE) == DMA_Mode_Circular)) 
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_priority_level 
N  * @{
N  */ 
N#define DMA_Priority_Low                  ((uint32_t)0x00000000)
N#define DMA_Priority_Medium               ((uint32_t)0x00010000) 
N#define DMA_Priority_High                 ((uint32_t)0x00020000)
N#define DMA_Priority_VeryHigh             ((uint32_t)0x00030000)
N
N#define IS_DMA_PRIORITY(PRIORITY) (((PRIORITY) == DMA_Priority_Low )   || \
N                                   ((PRIORITY) == DMA_Priority_Medium) || \
N                                   ((PRIORITY) == DMA_Priority_High)   || \
N                                   ((PRIORITY) == DMA_Priority_VeryHigh)) 
X#define IS_DMA_PRIORITY(PRIORITY) (((PRIORITY) == DMA_Priority_Low )   ||                                    ((PRIORITY) == DMA_Priority_Medium) ||                                    ((PRIORITY) == DMA_Priority_High)   ||                                    ((PRIORITY) == DMA_Priority_VeryHigh)) 
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_fifo_direct_mode 
N  * @{
N  */ 
N#define DMA_FIFOMode_Disable              ((uint32_t)0x00000000) 
N#define DMA_FIFOMode_Enable               ((uint32_t)0x00000004)
N
N#define IS_DMA_FIFO_MODE_STATE(STATE) (((STATE) == DMA_FIFOMode_Disable ) || \
N                                       ((STATE) == DMA_FIFOMode_Enable)) 
X#define IS_DMA_FIFO_MODE_STATE(STATE) (((STATE) == DMA_FIFOMode_Disable ) ||                                        ((STATE) == DMA_FIFOMode_Enable)) 
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_fifo_threshold_level 
N  * @{
N  */ 
N#define DMA_FIFOThreshold_1QuarterFull    ((uint32_t)0x00000000)
N#define DMA_FIFOThreshold_HalfFull        ((uint32_t)0x00000001) 
N#define DMA_FIFOThreshold_3QuartersFull   ((uint32_t)0x00000002)
N#define DMA_FIFOThreshold_Full            ((uint32_t)0x00000003)
N
N#define IS_DMA_FIFO_THRESHOLD(THRESHOLD) (((THRESHOLD) == DMA_FIFOThreshold_1QuarterFull ) || \
N                                          ((THRESHOLD) == DMA_FIFOThreshold_HalfFull)      || \
N                                          ((THRESHOLD) == DMA_FIFOThreshold_3QuartersFull) || \
N                                          ((THRESHOLD) == DMA_FIFOThreshold_Full)) 
X#define IS_DMA_FIFO_THRESHOLD(THRESHOLD) (((THRESHOLD) == DMA_FIFOThreshold_1QuarterFull ) ||                                           ((THRESHOLD) == DMA_FIFOThreshold_HalfFull)      ||                                           ((THRESHOLD) == DMA_FIFOThreshold_3QuartersFull) ||                                           ((THRESHOLD) == DMA_FIFOThreshold_Full)) 
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_memory_burst 
N  * @{
N  */ 
N#define DMA_MemoryBurst_Single            ((uint32_t)0x00000000)
N#define DMA_MemoryBurst_INC4              ((uint32_t)0x00800000)  
N#define DMA_MemoryBurst_INC8              ((uint32_t)0x01000000)
N#define DMA_MemoryBurst_INC16             ((uint32_t)0x01800000)
N
N#define IS_DMA_MEMORY_BURST(BURST) (((BURST) == DMA_MemoryBurst_Single) || \
N                                    ((BURST) == DMA_MemoryBurst_INC4)  || \
N                                    ((BURST) == DMA_MemoryBurst_INC8)  || \
N                                    ((BURST) == DMA_MemoryBurst_INC16))
X#define IS_DMA_MEMORY_BURST(BURST) (((BURST) == DMA_MemoryBurst_Single) ||                                     ((BURST) == DMA_MemoryBurst_INC4)  ||                                     ((BURST) == DMA_MemoryBurst_INC8)  ||                                     ((BURST) == DMA_MemoryBurst_INC16))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_peripheral_burst 
N  * @{
N  */ 
N#define DMA_PeripheralBurst_Single        ((uint32_t)0x00000000)
N#define DMA_PeripheralBurst_INC4          ((uint32_t)0x00200000)  
N#define DMA_PeripheralBurst_INC8          ((uint32_t)0x00400000)
N#define DMA_PeripheralBurst_INC16         ((uint32_t)0x00600000)
N
N#define IS_DMA_PERIPHERAL_BURST(BURST) (((BURST) == DMA_PeripheralBurst_Single) || \
N                                        ((BURST) == DMA_PeripheralBurst_INC4)  || \
N                                        ((BURST) == DMA_PeripheralBurst_INC8)  || \
N                                        ((BURST) == DMA_PeripheralBurst_INC16))
X#define IS_DMA_PERIPHERAL_BURST(BURST) (((BURST) == DMA_PeripheralBurst_Single) ||                                         ((BURST) == DMA_PeripheralBurst_INC4)  ||                                         ((BURST) == DMA_PeripheralBurst_INC8)  ||                                         ((BURST) == DMA_PeripheralBurst_INC16))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_fifo_status_level 
N  * @{
N  */
N#define DMA_FIFOStatus_Less1QuarterFull   ((uint32_t)0x00000000 << 3)
N#define DMA_FIFOStatus_1QuarterFull       ((uint32_t)0x00000001 << 3)
N#define DMA_FIFOStatus_HalfFull           ((uint32_t)0x00000002 << 3) 
N#define DMA_FIFOStatus_3QuartersFull      ((uint32_t)0x00000003 << 3)
N#define DMA_FIFOStatus_Empty              ((uint32_t)0x00000004 << 3)
N#define DMA_FIFOStatus_Full               ((uint32_t)0x00000005 << 3)
N
N#define IS_DMA_FIFO_STATUS(STATUS) (((STATUS) == DMA_FIFOStatus_Less1QuarterFull ) || \
N                                    ((STATUS) == DMA_FIFOStatus_HalfFull)          || \
N                                    ((STATUS) == DMA_FIFOStatus_1QuarterFull)      || \
N                                    ((STATUS) == DMA_FIFOStatus_3QuartersFull)     || \
N                                    ((STATUS) == DMA_FIFOStatus_Full)              || \
N                                    ((STATUS) == DMA_FIFOStatus_Empty)) 
X#define IS_DMA_FIFO_STATUS(STATUS) (((STATUS) == DMA_FIFOStatus_Less1QuarterFull ) ||                                     ((STATUS) == DMA_FIFOStatus_HalfFull)          ||                                     ((STATUS) == DMA_FIFOStatus_1QuarterFull)      ||                                     ((STATUS) == DMA_FIFOStatus_3QuartersFull)     ||                                     ((STATUS) == DMA_FIFOStatus_Full)              ||                                     ((STATUS) == DMA_FIFOStatus_Empty)) 
N/**
N  * @}
N  */ 
N
N/** @defgroup DMA_flags_definition 
N  * @{
N  */
N#define DMA_FLAG_FEIF0                    ((uint32_t)0x10800001)
N#define DMA_FLAG_DMEIF0                   ((uint32_t)0x10800004)
N#define DMA_FLAG_TEIF0                    ((uint32_t)0x10000008)
N#define DMA_FLAG_HTIF0                    ((uint32_t)0x10000010)
N#define DMA_FLAG_TCIF0                    ((uint32_t)0x10000020)
N#define DMA_FLAG_FEIF1                    ((uint32_t)0x10000040)
N#define DMA_FLAG_DMEIF1                   ((uint32_t)0x10000100)
N#define DMA_FLAG_TEIF1                    ((uint32_t)0x10000200)
N#define DMA_FLAG_HTIF1                    ((uint32_t)0x10000400)
N#define DMA_FLAG_TCIF1                    ((uint32_t)0x10000800)
N#define DMA_FLAG_FEIF2                    ((uint32_t)0x10010000)
N#define DMA_FLAG_DMEIF2                   ((uint32_t)0x10040000)
N#define DMA_FLAG_TEIF2                    ((uint32_t)0x10080000)
N#define DMA_FLAG_HTIF2                    ((uint32_t)0x10100000)
N#define DMA_FLAG_TCIF2                    ((uint32_t)0x10200000)
N#define DMA_FLAG_FEIF3                    ((uint32_t)0x10400000)
N#define DMA_FLAG_DMEIF3                   ((uint32_t)0x11000000)
N#define DMA_FLAG_TEIF3                    ((uint32_t)0x12000000)
N#define DMA_FLAG_HTIF3                    ((uint32_t)0x14000000)
N#define DMA_FLAG_TCIF3                    ((uint32_t)0x18000000)
N#define DMA_FLAG_FEIF4                    ((uint32_t)0x20000001)
N#define DMA_FLAG_DMEIF4                   ((uint32_t)0x20000004)
N#define DMA_FLAG_TEIF4                    ((uint32_t)0x20000008)
N#define DMA_FLAG_HTIF4                    ((uint32_t)0x20000010)
N#define DMA_FLAG_TCIF4                    ((uint32_t)0x20000020)
N#define DMA_FLAG_FEIF5                    ((uint32_t)0x20000040)
N#define DMA_FLAG_DMEIF5                   ((uint32_t)0x20000100)
N#define DMA_FLAG_TEIF5                    ((uint32_t)0x20000200)
N#define DMA_FLAG_HTIF5                    ((uint32_t)0x20000400)
N#define DMA_FLAG_TCIF5                    ((uint32_t)0x20000800)
N#define DMA_FLAG_FEIF6                    ((uint32_t)0x20010000)
N#define DMA_FLAG_DMEIF6                   ((uint32_t)0x20040000)
N#define DMA_FLAG_TEIF6                    ((uint32_t)0x20080000)
N#define DMA_FLAG_HTIF6                    ((uint32_t)0x20100000)
N#define DMA_FLAG_TCIF6                    ((uint32_t)0x20200000)
N#define DMA_FLAG_FEIF7                    ((uint32_t)0x20400000)
N#define DMA_FLAG_DMEIF7                   ((uint32_t)0x21000000)
N#define DMA_FLAG_TEIF7                    ((uint32_t)0x22000000)
N#define DMA_FLAG_HTIF7                    ((uint32_t)0x24000000)
N#define DMA_FLAG_TCIF7                    ((uint32_t)0x28000000)
N
N#define IS_DMA_CLEAR_FLAG(FLAG) ((((FLAG) & 0x30000000) != 0x30000000) && (((FLAG) & 0x30000000) != 0) && \
N                                 (((FLAG) & 0xC002F082) == 0x00) && ((FLAG) != 0x00))
X#define IS_DMA_CLEAR_FLAG(FLAG) ((((FLAG) & 0x30000000) != 0x30000000) && (((FLAG) & 0x30000000) != 0) &&                                  (((FLAG) & 0xC002F082) == 0x00) && ((FLAG) != 0x00))
N
N#define IS_DMA_GET_FLAG(FLAG) (((FLAG) == DMA_FLAG_TCIF0)  || ((FLAG) == DMA_FLAG_HTIF0)  || \
N                               ((FLAG) == DMA_FLAG_TEIF0)  || ((FLAG) == DMA_FLAG_DMEIF0) || \
N                               ((FLAG) == DMA_FLAG_FEIF0)  || ((FLAG) == DMA_FLAG_TCIF1)  || \
N                               ((FLAG) == DMA_FLAG_HTIF1)  || ((FLAG) == DMA_FLAG_TEIF1)  || \
N                               ((FLAG) == DMA_FLAG_DMEIF1) || ((FLAG) == DMA_FLAG_FEIF1)  || \
N                               ((FLAG) == DMA_FLAG_TCIF2)  || ((FLAG) == DMA_FLAG_HTIF2)  || \
N                               ((FLAG) == DMA_FLAG_TEIF2)  || ((FLAG) == DMA_FLAG_DMEIF2) || \
N                               ((FLAG) == DMA_FLAG_FEIF2)  || ((FLAG) == DMA_FLAG_TCIF3)  || \
N                               ((FLAG) == DMA_FLAG_HTIF3)  || ((FLAG) == DMA_FLAG_TEIF3)  || \
N                               ((FLAG) == DMA_FLAG_DMEIF3) || ((FLAG) == DMA_FLAG_FEIF3)  || \
N                               ((FLAG) == DMA_FLAG_TCIF4)  || ((FLAG) == DMA_FLAG_HTIF4)  || \
N                               ((FLAG) == DMA_FLAG_TEIF4)  || ((FLAG) == DMA_FLAG_DMEIF4) || \
N                               ((FLAG) == DMA_FLAG_FEIF4)  || ((FLAG) == DMA_FLAG_TCIF5)  || \
N                               ((FLAG) == DMA_FLAG_HTIF5)  || ((FLAG) == DMA_FLAG_TEIF5)  || \
N                               ((FLAG) == DMA_FLAG_DMEIF5) || ((FLAG) == DMA_FLAG_FEIF5)  || \
N                               ((FLAG) == DMA_FLAG_TCIF6)  || ((FLAG) == DMA_FLAG_HTIF6)  || \
N                               ((FLAG) == DMA_FLAG_TEIF6)  || ((FLAG) == DMA_FLAG_DMEIF6) || \
N                               ((FLAG) == DMA_FLAG_FEIF6)  || ((FLAG) == DMA_FLAG_TCIF7)  || \
N                               ((FLAG) == DMA_FLAG_HTIF7)  || ((FLAG) == DMA_FLAG_TEIF7)  || \
N                               ((FLAG) == DMA_FLAG_DMEIF7) || ((FLAG) == DMA_FLAG_FEIF7))
X#define IS_DMA_GET_FLAG(FLAG) (((FLAG) == DMA_FLAG_TCIF0)  || ((FLAG) == DMA_FLAG_HTIF0)  ||                                ((FLAG) == DMA_FLAG_TEIF0)  || ((FLAG) == DMA_FLAG_DMEIF0) ||                                ((FLAG) == DMA_FLAG_FEIF0)  || ((FLAG) == DMA_FLAG_TCIF1)  ||                                ((FLAG) == DMA_FLAG_HTIF1)  || ((FLAG) == DMA_FLAG_TEIF1)  ||                                ((FLAG) == DMA_FLAG_DMEIF1) || ((FLAG) == DMA_FLAG_FEIF1)  ||                                ((FLAG) == DMA_FLAG_TCIF2)  || ((FLAG) == DMA_FLAG_HTIF2)  ||                                ((FLAG) == DMA_FLAG_TEIF2)  || ((FLAG) == DMA_FLAG_DMEIF2) ||                                ((FLAG) == DMA_FLAG_FEIF2)  || ((FLAG) == DMA_FLAG_TCIF3)  ||                                ((FLAG) == DMA_FLAG_HTIF3)  || ((FLAG) == DMA_FLAG_TEIF3)  ||                                ((FLAG) == DMA_FLAG_DMEIF3) || ((FLAG) == DMA_FLAG_FEIF3)  ||                                ((FLAG) == DMA_FLAG_TCIF4)  || ((FLAG) == DMA_FLAG_HTIF4)  ||                                ((FLAG) == DMA_FLAG_TEIF4)  || ((FLAG) == DMA_FLAG_DMEIF4) ||                                ((FLAG) == DMA_FLAG_FEIF4)  || ((FLAG) == DMA_FLAG_TCIF5)  ||                                ((FLAG) == DMA_FLAG_HTIF5)  || ((FLAG) == DMA_FLAG_TEIF5)  ||                                ((FLAG) == DMA_FLAG_DMEIF5) || ((FLAG) == DMA_FLAG_FEIF5)  ||                                ((FLAG) == DMA_FLAG_TCIF6)  || ((FLAG) == DMA_FLAG_HTIF6)  ||                                ((FLAG) == DMA_FLAG_TEIF6)  || ((FLAG) == DMA_FLAG_DMEIF6) ||                                ((FLAG) == DMA_FLAG_FEIF6)  || ((FLAG) == DMA_FLAG_TCIF7)  ||                                ((FLAG) == DMA_FLAG_HTIF7)  || ((FLAG) == DMA_FLAG_TEIF7)  ||                                ((FLAG) == DMA_FLAG_DMEIF7) || ((FLAG) == DMA_FLAG_FEIF7))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_interrupt_enable_definitions 
N  * @{
N  */ 
N#define DMA_IT_TC                         ((uint32_t)0x00000010)
N#define DMA_IT_HT                         ((uint32_t)0x00000008)
N#define DMA_IT_TE                         ((uint32_t)0x00000004)
N#define DMA_IT_DME                        ((uint32_t)0x00000002)
N#define DMA_IT_FE                         ((uint32_t)0x00000080)
N
N#define IS_DMA_CONFIG_IT(IT) ((((IT) & 0xFFFFFF61) == 0x00) && ((IT) != 0x00))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_interrupts_definitions 
N  * @{
N  */ 
N#define DMA_IT_FEIF0                      ((uint32_t)0x90000001)
N#define DMA_IT_DMEIF0                     ((uint32_t)0x10001004)
N#define DMA_IT_TEIF0                      ((uint32_t)0x10002008)
N#define DMA_IT_HTIF0                      ((uint32_t)0x10004010)
N#define DMA_IT_TCIF0                      ((uint32_t)0x10008020)
N#define DMA_IT_FEIF1                      ((uint32_t)0x90000040)
N#define DMA_IT_DMEIF1                     ((uint32_t)0x10001100)
N#define DMA_IT_TEIF1                      ((uint32_t)0x10002200)
N#define DMA_IT_HTIF1                      ((uint32_t)0x10004400)
N#define DMA_IT_TCIF1                      ((uint32_t)0x10008800)
N#define DMA_IT_FEIF2                      ((uint32_t)0x90010000)
N#define DMA_IT_DMEIF2                     ((uint32_t)0x10041000)
N#define DMA_IT_TEIF2                      ((uint32_t)0x10082000)
N#define DMA_IT_HTIF2                      ((uint32_t)0x10104000)
N#define DMA_IT_TCIF2                      ((uint32_t)0x10208000)
N#define DMA_IT_FEIF3                      ((uint32_t)0x90400000)
N#define DMA_IT_DMEIF3                     ((uint32_t)0x11001000)
N#define DMA_IT_TEIF3                      ((uint32_t)0x12002000)
N#define DMA_IT_HTIF3                      ((uint32_t)0x14004000)
N#define DMA_IT_TCIF3                      ((uint32_t)0x18008000)
N#define DMA_IT_FEIF4                      ((uint32_t)0xA0000001)
N#define DMA_IT_DMEIF4                     ((uint32_t)0x20001004)
N#define DMA_IT_TEIF4                      ((uint32_t)0x20002008)
N#define DMA_IT_HTIF4                      ((uint32_t)0x20004010)
N#define DMA_IT_TCIF4                      ((uint32_t)0x20008020)
N#define DMA_IT_FEIF5                      ((uint32_t)0xA0000040)
N#define DMA_IT_DMEIF5                     ((uint32_t)0x20001100)
N#define DMA_IT_TEIF5                      ((uint32_t)0x20002200)
N#define DMA_IT_HTIF5                      ((uint32_t)0x20004400)
N#define DMA_IT_TCIF5                      ((uint32_t)0x20008800)
N#define DMA_IT_FEIF6                      ((uint32_t)0xA0010000)
N#define DMA_IT_DMEIF6                     ((uint32_t)0x20041000)
N#define DMA_IT_TEIF6                      ((uint32_t)0x20082000)
N#define DMA_IT_HTIF6                      ((uint32_t)0x20104000)
N#define DMA_IT_TCIF6                      ((uint32_t)0x20208000)
N#define DMA_IT_FEIF7                      ((uint32_t)0xA0400000)
N#define DMA_IT_DMEIF7                     ((uint32_t)0x21001000)
N#define DMA_IT_TEIF7                      ((uint32_t)0x22002000)
N#define DMA_IT_HTIF7                      ((uint32_t)0x24004000)
N#define DMA_IT_TCIF7                      ((uint32_t)0x28008000)
N
N#define IS_DMA_CLEAR_IT(IT) ((((IT) & 0x30000000) != 0x30000000) && \
N                             (((IT) & 0x30000000) != 0) && ((IT) != 0x00) && \
N                             (((IT) & 0x40820082) == 0x00))
X#define IS_DMA_CLEAR_IT(IT) ((((IT) & 0x30000000) != 0x30000000) &&                              (((IT) & 0x30000000) != 0) && ((IT) != 0x00) &&                              (((IT) & 0x40820082) == 0x00))
N
N#define IS_DMA_GET_IT(IT) (((IT) == DMA_IT_TCIF0) || ((IT) == DMA_IT_HTIF0)  || \
N                           ((IT) == DMA_IT_TEIF0) || ((IT) == DMA_IT_DMEIF0) || \
N                           ((IT) == DMA_IT_FEIF0) || ((IT) == DMA_IT_TCIF1)  || \
N                           ((IT) == DMA_IT_HTIF1) || ((IT) == DMA_IT_TEIF1)  || \
N                           ((IT) == DMA_IT_DMEIF1)|| ((IT) == DMA_IT_FEIF1)  || \
N                           ((IT) == DMA_IT_TCIF2) || ((IT) == DMA_IT_HTIF2)  || \
N                           ((IT) == DMA_IT_TEIF2) || ((IT) == DMA_IT_DMEIF2) || \
N                           ((IT) == DMA_IT_FEIF2) || ((IT) == DMA_IT_TCIF3)  || \
N                           ((IT) == DMA_IT_HTIF3) || ((IT) == DMA_IT_TEIF3)  || \
N                           ((IT) == DMA_IT_DMEIF3)|| ((IT) == DMA_IT_FEIF3)  || \
N                           ((IT) == DMA_IT_TCIF4) || ((IT) == DMA_IT_HTIF4)  || \
N                           ((IT) == DMA_IT_TEIF4) || ((IT) == DMA_IT_DMEIF4) || \
N                           ((IT) == DMA_IT_FEIF4) || ((IT) == DMA_IT_TCIF5)  || \
N                           ((IT) == DMA_IT_HTIF5) || ((IT) == DMA_IT_TEIF5)  || \
N                           ((IT) == DMA_IT_DMEIF5)|| ((IT) == DMA_IT_FEIF5)  || \
N                           ((IT) == DMA_IT_TCIF6) || ((IT) == DMA_IT_HTIF6)  || \
N                           ((IT) == DMA_IT_TEIF6) || ((IT) == DMA_IT_DMEIF6) || \
N                           ((IT) == DMA_IT_FEIF6) || ((IT) == DMA_IT_TCIF7)  || \
N                           ((IT) == DMA_IT_HTIF7) || ((IT) == DMA_IT_TEIF7)  || \
N                           ((IT) == DMA_IT_DMEIF7)|| ((IT) == DMA_IT_FEIF7))
X#define IS_DMA_GET_IT(IT) (((IT) == DMA_IT_TCIF0) || ((IT) == DMA_IT_HTIF0)  ||                            ((IT) == DMA_IT_TEIF0) || ((IT) == DMA_IT_DMEIF0) ||                            ((IT) == DMA_IT_FEIF0) || ((IT) == DMA_IT_TCIF1)  ||                            ((IT) == DMA_IT_HTIF1) || ((IT) == DMA_IT_TEIF1)  ||                            ((IT) == DMA_IT_DMEIF1)|| ((IT) == DMA_IT_FEIF1)  ||                            ((IT) == DMA_IT_TCIF2) || ((IT) == DMA_IT_HTIF2)  ||                            ((IT) == DMA_IT_TEIF2) || ((IT) == DMA_IT_DMEIF2) ||                            ((IT) == DMA_IT_FEIF2) || ((IT) == DMA_IT_TCIF3)  ||                            ((IT) == DMA_IT_HTIF3) || ((IT) == DMA_IT_TEIF3)  ||                            ((IT) == DMA_IT_DMEIF3)|| ((IT) == DMA_IT_FEIF3)  ||                            ((IT) == DMA_IT_TCIF4) || ((IT) == DMA_IT_HTIF4)  ||                            ((IT) == DMA_IT_TEIF4) || ((IT) == DMA_IT_DMEIF4) ||                            ((IT) == DMA_IT_FEIF4) || ((IT) == DMA_IT_TCIF5)  ||                            ((IT) == DMA_IT_HTIF5) || ((IT) == DMA_IT_TEIF5)  ||                            ((IT) == DMA_IT_DMEIF5)|| ((IT) == DMA_IT_FEIF5)  ||                            ((IT) == DMA_IT_TCIF6) || ((IT) == DMA_IT_HTIF6)  ||                            ((IT) == DMA_IT_TEIF6) || ((IT) == DMA_IT_DMEIF6) ||                            ((IT) == DMA_IT_FEIF6) || ((IT) == DMA_IT_TCIF7)  ||                            ((IT) == DMA_IT_HTIF7) || ((IT) == DMA_IT_TEIF7)  ||                            ((IT) == DMA_IT_DMEIF7)|| ((IT) == DMA_IT_FEIF7))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_peripheral_increment_offset 
N  * @{
N  */ 
N#define DMA_PINCOS_Psize                  ((uint32_t)0x00000000)
N#define DMA_PINCOS_WordAligned            ((uint32_t)0x00008000)
N
N#define IS_DMA_PINCOS_SIZE(SIZE) (((SIZE) == DMA_PINCOS_Psize) || \
N                                  ((SIZE) == DMA_PINCOS_WordAligned))
X#define IS_DMA_PINCOS_SIZE(SIZE) (((SIZE) == DMA_PINCOS_Psize) ||                                   ((SIZE) == DMA_PINCOS_WordAligned))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_flow_controller_definitions 
N  * @{
N  */ 
N#define DMA_FlowCtrl_Memory               ((uint32_t)0x00000000)
N#define DMA_FlowCtrl_Peripheral           ((uint32_t)0x00000020)
N
N#define IS_DMA_FLOW_CTRL(CTRL) (((CTRL) == DMA_FlowCtrl_Memory) || \
N                                ((CTRL) == DMA_FlowCtrl_Peripheral))
X#define IS_DMA_FLOW_CTRL(CTRL) (((CTRL) == DMA_FlowCtrl_Memory) ||                                 ((CTRL) == DMA_FlowCtrl_Peripheral))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DMA_memory_targets_definitions 
N  * @{
N  */ 
N#define DMA_Memory_0                      ((uint32_t)0x00000000)
N#define DMA_Memory_1                      ((uint32_t)0x00080000)
N
N#define IS_DMA_CURRENT_MEM(MEM) (((MEM) == DMA_Memory_0) || ((MEM) == DMA_Memory_1))
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/ 
N
N/*  Function used to set the DMA configuration to the default reset state *****/ 
Nvoid DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx);
N
N/* Initialization and Configuration functions *********************************/
Nvoid DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct);
Nvoid DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct);
Nvoid DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState);
N
N/* Optional Configuration functions *******************************************/
Nvoid DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos);
Nvoid DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl);
N
N/* Data Counter functions *****************************************************/
Nvoid DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter);
Nuint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx);
N
N/* Double Buffer mode functions ***********************************************/
Nvoid DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
N                                uint32_t DMA_CurrentMemory);
Nvoid DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState);
Nvoid DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
N                            uint32_t DMA_MemoryTarget);
Nuint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx);
N
N/* Interrupts and flags management functions **********************************/
NFunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx);
Nuint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx);
NFlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
Nvoid DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
Nvoid DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState);
NITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
Nvoid DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__STM32F4xx_DMA_H */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 55 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_exti.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_exti.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_exti.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the EXTI firmware
N  *          library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_EXTI_H
N#define __STM32F4xx_EXTI_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup EXTI
N  * @{
N  */
N
N/* Exported types ------------------------------------------------------------*/
N
N/** 
N  * @brief  EXTI mode enumeration  
N  */
N
Ntypedef enum
N{
N  EXTI_Mode_Interrupt = 0x00,
N  EXTI_Mode_Event = 0x04
N}EXTIMode_TypeDef;
N
N#define IS_EXTI_MODE(MODE) (((MODE) == EXTI_Mode_Interrupt) || ((MODE) == EXTI_Mode_Event))
N
N/** 
N  * @brief  EXTI Trigger enumeration  
N  */
N
Ntypedef enum
N{
N  EXTI_Trigger_Rising = 0x08,
N  EXTI_Trigger_Falling = 0x0C,  
N  EXTI_Trigger_Rising_Falling = 0x10
N}EXTITrigger_TypeDef;
N
N#define IS_EXTI_TRIGGER(TRIGGER) (((TRIGGER) == EXTI_Trigger_Rising) || \
N                                  ((TRIGGER) == EXTI_Trigger_Falling) || \
N                                  ((TRIGGER) == EXTI_Trigger_Rising_Falling))
X#define IS_EXTI_TRIGGER(TRIGGER) (((TRIGGER) == EXTI_Trigger_Rising) ||                                   ((TRIGGER) == EXTI_Trigger_Falling) ||                                   ((TRIGGER) == EXTI_Trigger_Rising_Falling))
N/** 
N  * @brief  EXTI Init Structure definition  
N  */
N
Ntypedef struct
N{
N  uint32_t EXTI_Line;               /*!< Specifies the EXTI lines to be enabled or disabled.
N                                         This parameter can be any combination value of @ref EXTI_Lines */
N   
N  EXTIMode_TypeDef EXTI_Mode;       /*!< Specifies the mode for the EXTI lines.
N                                         This parameter can be a value of @ref EXTIMode_TypeDef */
N
N  EXTITrigger_TypeDef EXTI_Trigger; /*!< Specifies the trigger signal active edge for the EXTI lines.
N                                         This parameter can be a value of @ref EXTITrigger_TypeDef */
N
N  FunctionalState EXTI_LineCmd;     /*!< Specifies the new state of the selected EXTI lines.
N                                         This parameter can be set either to ENABLE or DISABLE */ 
N}EXTI_InitTypeDef;
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup EXTI_Exported_Constants
N  * @{
N  */
N
N/** @defgroup EXTI_Lines 
N  * @{
N  */
N
N#define EXTI_Line0       ((uint32_t)0x00001)     /*!< External interrupt line 0 */
N#define EXTI_Line1       ((uint32_t)0x00002)     /*!< External interrupt line 1 */
N#define EXTI_Line2       ((uint32_t)0x00004)     /*!< External interrupt line 2 */
N#define EXTI_Line3       ((uint32_t)0x00008)     /*!< External interrupt line 3 */
N#define EXTI_Line4       ((uint32_t)0x00010)     /*!< External interrupt line 4 */
N#define EXTI_Line5       ((uint32_t)0x00020)     /*!< External interrupt line 5 */
N#define EXTI_Line6       ((uint32_t)0x00040)     /*!< External interrupt line 6 */
N#define EXTI_Line7       ((uint32_t)0x00080)     /*!< External interrupt line 7 */
N#define EXTI_Line8       ((uint32_t)0x00100)     /*!< External interrupt line 8 */
N#define EXTI_Line9       ((uint32_t)0x00200)     /*!< External interrupt line 9 */
N#define EXTI_Line10      ((uint32_t)0x00400)     /*!< External interrupt line 10 */
N#define EXTI_Line11      ((uint32_t)0x00800)     /*!< External interrupt line 11 */
N#define EXTI_Line12      ((uint32_t)0x01000)     /*!< External interrupt line 12 */
N#define EXTI_Line13      ((uint32_t)0x02000)     /*!< External interrupt line 13 */
N#define EXTI_Line14      ((uint32_t)0x04000)     /*!< External interrupt line 14 */
N#define EXTI_Line15      ((uint32_t)0x08000)     /*!< External interrupt line 15 */
N#define EXTI_Line16      ((uint32_t)0x10000)     /*!< External interrupt line 16 Connected to the PVD Output */
N#define EXTI_Line17      ((uint32_t)0x20000)     /*!< External interrupt line 17 Connected to the RTC Alarm event */
N#define EXTI_Line18      ((uint32_t)0x40000)     /*!< External interrupt line 18 Connected to the USB OTG FS Wakeup from suspend event */                                    
N#define EXTI_Line19      ((uint32_t)0x80000)     /*!< External interrupt line 19 Connected to the Ethernet Wakeup event */
N#define EXTI_Line20      ((uint32_t)0x00100000)  /*!< External interrupt line 20 Connected to the USB OTG HS (configured in FS) Wakeup event  */
N#define EXTI_Line21      ((uint32_t)0x00200000)  /*!< External interrupt line 21 Connected to the RTC Tamper and Time Stamp events */                                               
N#define EXTI_Line22      ((uint32_t)0x00400000)  /*!< External interrupt line 22 Connected to the RTC Wakeup event */                                               
N                                          
N#define IS_EXTI_LINE(LINE) ((((LINE) & (uint32_t)0xFF800000) == 0x00) && ((LINE) != (uint16_t)0x00))
N
N#define IS_GET_EXTI_LINE(LINE) (((LINE) == EXTI_Line0) || ((LINE) == EXTI_Line1) || \
N                                ((LINE) == EXTI_Line2) || ((LINE) == EXTI_Line3) || \
N                                ((LINE) == EXTI_Line4) || ((LINE) == EXTI_Line5) || \
N                                ((LINE) == EXTI_Line6) || ((LINE) == EXTI_Line7) || \
N                                ((LINE) == EXTI_Line8) || ((LINE) == EXTI_Line9) || \
N                                ((LINE) == EXTI_Line10) || ((LINE) == EXTI_Line11) || \
N                                ((LINE) == EXTI_Line12) || ((LINE) == EXTI_Line13) || \
N                                ((LINE) == EXTI_Line14) || ((LINE) == EXTI_Line15) || \
N                                ((LINE) == EXTI_Line16) || ((LINE) == EXTI_Line17) || \
N                                ((LINE) == EXTI_Line18) || ((LINE) == EXTI_Line19) || \
N                                ((LINE) == EXTI_Line20) || ((LINE) == EXTI_Line21) ||\
N                                ((LINE) == EXTI_Line22))
X#define IS_GET_EXTI_LINE(LINE) (((LINE) == EXTI_Line0) || ((LINE) == EXTI_Line1) ||                                 ((LINE) == EXTI_Line2) || ((LINE) == EXTI_Line3) ||                                 ((LINE) == EXTI_Line4) || ((LINE) == EXTI_Line5) ||                                 ((LINE) == EXTI_Line6) || ((LINE) == EXTI_Line7) ||                                 ((LINE) == EXTI_Line8) || ((LINE) == EXTI_Line9) ||                                 ((LINE) == EXTI_Line10) || ((LINE) == EXTI_Line11) ||                                 ((LINE) == EXTI_Line12) || ((LINE) == EXTI_Line13) ||                                 ((LINE) == EXTI_Line14) || ((LINE) == EXTI_Line15) ||                                 ((LINE) == EXTI_Line16) || ((LINE) == EXTI_Line17) ||                                 ((LINE) == EXTI_Line18) || ((LINE) == EXTI_Line19) ||                                 ((LINE) == EXTI_Line20) || ((LINE) == EXTI_Line21) ||                                ((LINE) == EXTI_Line22))
N                    
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/
N
N/*  Function used to set the EXTI configuration to the default reset state *****/
Nvoid EXTI_DeInit(void);
N
N/* Initialization and Configuration functions *********************************/
Nvoid EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct);
Nvoid EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct);
Nvoid EXTI_GenerateSWInterrupt(uint32_t EXTI_Line);
N
N/* Interrupts and flags management functions **********************************/
NFlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line);
Nvoid EXTI_ClearFlag(uint32_t EXTI_Line);
NITStatus EXTI_GetITStatus(uint32_t EXTI_Line);
Nvoid EXTI_ClearITPendingBit(uint32_t EXTI_Line);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32F4xx_EXTI_H */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 56 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_flash.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_flash.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_flash.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the FLASH 
N  *          firmware library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_FLASH_H
N#define __STM32F4xx_FLASH_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup FLASH
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/
N/** 
N  * @brief FLASH Status  
N  */ 
Ntypedef enum
N{ 
N  FLASH_BUSY = 1,
N  FLASH_ERROR_RD,
N  FLASH_ERROR_PGS,
N  FLASH_ERROR_PGP,
N  FLASH_ERROR_PGA,
N  FLASH_ERROR_WRP,
N  FLASH_ERROR_PROGRAM,
N  FLASH_ERROR_OPERATION,
N  FLASH_COMPLETE
N}FLASH_Status;
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup FLASH_Exported_Constants
N  * @{
N  */  
N
N/** @defgroup Flash_Latency 
N  * @{
N  */ 
N#define FLASH_Latency_0                ((uint8_t)0x0000)  /*!< FLASH Zero Latency cycle      */
N#define FLASH_Latency_1                ((uint8_t)0x0001)  /*!< FLASH One Latency cycle       */
N#define FLASH_Latency_2                ((uint8_t)0x0002)  /*!< FLASH Two Latency cycles      */
N#define FLASH_Latency_3                ((uint8_t)0x0003)  /*!< FLASH Three Latency cycles    */
N#define FLASH_Latency_4                ((uint8_t)0x0004)  /*!< FLASH Four Latency cycles     */
N#define FLASH_Latency_5                ((uint8_t)0x0005)  /*!< FLASH Five Latency cycles     */
N#define FLASH_Latency_6                ((uint8_t)0x0006)  /*!< FLASH Six Latency cycles      */
N#define FLASH_Latency_7                ((uint8_t)0x0007)  /*!< FLASH Seven Latency cycles    */
N#define FLASH_Latency_8                ((uint8_t)0x0008)  /*!< FLASH Eight Latency cycles    */
N#define FLASH_Latency_9                ((uint8_t)0x0009)  /*!< FLASH Nine Latency cycles     */
N#define FLASH_Latency_10               ((uint8_t)0x000A)  /*!< FLASH Ten Latency cycles      */
N#define FLASH_Latency_11               ((uint8_t)0x000B)  /*!< FLASH Eleven Latency cycles   */
N#define FLASH_Latency_12               ((uint8_t)0x000C)  /*!< FLASH Twelve Latency cycles   */
N#define FLASH_Latency_13               ((uint8_t)0x000D)  /*!< FLASH Thirteen Latency cycles */
N#define FLASH_Latency_14               ((uint8_t)0x000E)  /*!< FLASH Fourteen Latency cycles */
N#define FLASH_Latency_15               ((uint8_t)0x000F)  /*!< FLASH Fifteen Latency cycles  */
N
N
N#define IS_FLASH_LATENCY(LATENCY) (((LATENCY) == FLASH_Latency_0)  || \
N                                   ((LATENCY) == FLASH_Latency_1)  || \
N                                   ((LATENCY) == FLASH_Latency_2)  || \
N                                   ((LATENCY) == FLASH_Latency_3)  || \
N                                   ((LATENCY) == FLASH_Latency_4)  || \
N                                   ((LATENCY) == FLASH_Latency_5)  || \
N                                   ((LATENCY) == FLASH_Latency_6)  || \
N                                   ((LATENCY) == FLASH_Latency_7)  || \
N                                   ((LATENCY) == FLASH_Latency_8)  || \
N                                   ((LATENCY) == FLASH_Latency_9)  || \
N                                   ((LATENCY) == FLASH_Latency_10) || \
N                                   ((LATENCY) == FLASH_Latency_11) || \
N                                   ((LATENCY) == FLASH_Latency_12) || \
N                                   ((LATENCY) == FLASH_Latency_13) || \
N                                   ((LATENCY) == FLASH_Latency_14) || \
N                                   ((LATENCY) == FLASH_Latency_15))
X#define IS_FLASH_LATENCY(LATENCY) (((LATENCY) == FLASH_Latency_0)  ||                                    ((LATENCY) == FLASH_Latency_1)  ||                                    ((LATENCY) == FLASH_Latency_2)  ||                                    ((LATENCY) == FLASH_Latency_3)  ||                                    ((LATENCY) == FLASH_Latency_4)  ||                                    ((LATENCY) == FLASH_Latency_5)  ||                                    ((LATENCY) == FLASH_Latency_6)  ||                                    ((LATENCY) == FLASH_Latency_7)  ||                                    ((LATENCY) == FLASH_Latency_8)  ||                                    ((LATENCY) == FLASH_Latency_9)  ||                                    ((LATENCY) == FLASH_Latency_10) ||                                    ((LATENCY) == FLASH_Latency_11) ||                                    ((LATENCY) == FLASH_Latency_12) ||                                    ((LATENCY) == FLASH_Latency_13) ||                                    ((LATENCY) == FLASH_Latency_14) ||                                    ((LATENCY) == FLASH_Latency_15))
N/**
N  * @}
N  */ 
N
N/** @defgroup FLASH_Voltage_Range 
N  * @{
N  */ 
N#define VoltageRange_1        ((uint8_t)0x00)  /*!< Device operating range: 1.8V to 2.1V */
N#define VoltageRange_2        ((uint8_t)0x01)  /*!<Device operating range: 2.1V to 2.7V */
N#define VoltageRange_3        ((uint8_t)0x02)  /*!<Device operating range: 2.7V to 3.6V */
N#define VoltageRange_4        ((uint8_t)0x03)  /*!<Device operating range: 2.7V to 3.6V + External Vpp */
N
N#define IS_VOLTAGERANGE(RANGE)(((RANGE) == VoltageRange_1) || \
N                               ((RANGE) == VoltageRange_2) || \
N                               ((RANGE) == VoltageRange_3) || \
N                               ((RANGE) == VoltageRange_4))                                                                                                               
X#define IS_VOLTAGERANGE(RANGE)(((RANGE) == VoltageRange_1) ||                                ((RANGE) == VoltageRange_2) ||                                ((RANGE) == VoltageRange_3) ||                                ((RANGE) == VoltageRange_4))                                                                                                               
N/**
N  * @}
N  */ 
N
N/** @defgroup FLASH_Sectors
N  * @{
N  */
N#define FLASH_Sector_0     ((uint16_t)0x0000) /*!< Sector Number 0   */
N#define FLASH_Sector_1     ((uint16_t)0x0008) /*!< Sector Number 1   */
N#define FLASH_Sector_2     ((uint16_t)0x0010) /*!< Sector Number 2   */
N#define FLASH_Sector_3     ((uint16_t)0x0018) /*!< Sector Number 3   */
N#define FLASH_Sector_4     ((uint16_t)0x0020) /*!< Sector Number 4   */
N#define FLASH_Sector_5     ((uint16_t)0x0028) /*!< Sector Number 5   */
N#define FLASH_Sector_6     ((uint16_t)0x0030) /*!< Sector Number 6   */
N#define FLASH_Sector_7     ((uint16_t)0x0038) /*!< Sector Number 7   */
N#define FLASH_Sector_8     ((uint16_t)0x0040) /*!< Sector Number 8   */
N#define FLASH_Sector_9     ((uint16_t)0x0048) /*!< Sector Number 9   */
N#define FLASH_Sector_10    ((uint16_t)0x0050) /*!< Sector Number 10  */
N#define FLASH_Sector_11    ((uint16_t)0x0058) /*!< Sector Number 11  */
N#define FLASH_Sector_12    ((uint16_t)0x0080) /*!< Sector Number 12  */
N#define FLASH_Sector_13    ((uint16_t)0x0088) /*!< Sector Number 13  */
N#define FLASH_Sector_14    ((uint16_t)0x0090) /*!< Sector Number 14  */
N#define FLASH_Sector_15    ((uint16_t)0x0098) /*!< Sector Number 15  */
N#define FLASH_Sector_16    ((uint16_t)0x00A0) /*!< Sector Number 16  */
N#define FLASH_Sector_17    ((uint16_t)0x00A8) /*!< Sector Number 17  */
N#define FLASH_Sector_18    ((uint16_t)0x00B0) /*!< Sector Number 18  */
N#define FLASH_Sector_19    ((uint16_t)0x00B8) /*!< Sector Number 19  */
N#define FLASH_Sector_20    ((uint16_t)0x00C0) /*!< Sector Number 20  */
N#define FLASH_Sector_21    ((uint16_t)0x00C8) /*!< Sector Number 21  */
N#define FLASH_Sector_22    ((uint16_t)0x00D0) /*!< Sector Number 22  */
N#define FLASH_Sector_23    ((uint16_t)0x00D8) /*!< Sector Number 23  */
N
N#define IS_FLASH_SECTOR(SECTOR) (((SECTOR) == FLASH_Sector_0)   || ((SECTOR) == FLASH_Sector_1)   ||\
N                                 ((SECTOR) == FLASH_Sector_2)   || ((SECTOR) == FLASH_Sector_3)   ||\
N                                 ((SECTOR) == FLASH_Sector_4)   || ((SECTOR) == FLASH_Sector_5)   ||\
N                                 ((SECTOR) == FLASH_Sector_6)   || ((SECTOR) == FLASH_Sector_7)   ||\
N                                 ((SECTOR) == FLASH_Sector_8)   || ((SECTOR) == FLASH_Sector_9)   ||\
N                                 ((SECTOR) == FLASH_Sector_10)  || ((SECTOR) == FLASH_Sector_11)  ||\
N                                 ((SECTOR) == FLASH_Sector_12)  || ((SECTOR) == FLASH_Sector_13)  ||\
N                                 ((SECTOR) == FLASH_Sector_14)  || ((SECTOR) == FLASH_Sector_15)  ||\
N                                 ((SECTOR) == FLASH_Sector_16)  || ((SECTOR) == FLASH_Sector_17)  ||\
N                                 ((SECTOR) == FLASH_Sector_18)  || ((SECTOR) == FLASH_Sector_19)  ||\
N                                 ((SECTOR) == FLASH_Sector_20)  || ((SECTOR) == FLASH_Sector_21)  ||\
N                                 ((SECTOR) == FLASH_Sector_22)  || ((SECTOR) == FLASH_Sector_23))
X#define IS_FLASH_SECTOR(SECTOR) (((SECTOR) == FLASH_Sector_0)   || ((SECTOR) == FLASH_Sector_1)   ||                                 ((SECTOR) == FLASH_Sector_2)   || ((SECTOR) == FLASH_Sector_3)   ||                                 ((SECTOR) == FLASH_Sector_4)   || ((SECTOR) == FLASH_Sector_5)   ||                                 ((SECTOR) == FLASH_Sector_6)   || ((SECTOR) == FLASH_Sector_7)   ||                                 ((SECTOR) == FLASH_Sector_8)   || ((SECTOR) == FLASH_Sector_9)   ||                                 ((SECTOR) == FLASH_Sector_10)  || ((SECTOR) == FLASH_Sector_11)  ||                                 ((SECTOR) == FLASH_Sector_12)  || ((SECTOR) == FLASH_Sector_13)  ||                                 ((SECTOR) == FLASH_Sector_14)  || ((SECTOR) == FLASH_Sector_15)  ||                                 ((SECTOR) == FLASH_Sector_16)  || ((SECTOR) == FLASH_Sector_17)  ||                                 ((SECTOR) == FLASH_Sector_18)  || ((SECTOR) == FLASH_Sector_19)  ||                                 ((SECTOR) == FLASH_Sector_20)  || ((SECTOR) == FLASH_Sector_21)  ||                                 ((SECTOR) == FLASH_Sector_22)  || ((SECTOR) == FLASH_Sector_23))
N
N#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
X#if 0L || 0L
S#define IS_FLASH_ADDRESS(ADDRESS) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) < 0x081FFFFF)) ||\
S                                   (((ADDRESS) >= 0x1FFF7800) && ((ADDRESS) < 0x1FFF7A0F)))  
X#define IS_FLASH_ADDRESS(ADDRESS) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) < 0x081FFFFF)) ||                                   (((ADDRESS) >= 0x1FFF7800) && ((ADDRESS) < 0x1FFF7A0F)))  
N#endif /* STM32F427_437xx ||  STM32F429_439xx */
N
N#if defined (STM32F40_41xxx)
X#if 1L
N#define IS_FLASH_ADDRESS(ADDRESS) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) < 0x080FFFFF)) ||\
N                                   (((ADDRESS) >= 0x1FFF7800) && ((ADDRESS) < 0x1FFF7A0F))) 
X#define IS_FLASH_ADDRESS(ADDRESS) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) < 0x080FFFFF)) ||                                   (((ADDRESS) >= 0x1FFF7800) && ((ADDRESS) < 0x1FFF7A0F))) 
N#endif /* STM32F40_41xxx */
N
N#if defined (STM32F401xx)                                   
X#if 0L                                   
S#define IS_FLASH_ADDRESS(ADDRESS) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) < 0x0803FFFF)) ||\
S                                   (((ADDRESS) >= 0x1FFF7800) && ((ADDRESS) < 0x1FFF7A0F)))                                                                       
X#define IS_FLASH_ADDRESS(ADDRESS) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) < 0x0803FFFF)) ||                                   (((ADDRESS) >= 0x1FFF7800) && ((ADDRESS) < 0x1FFF7A0F)))                                                                       
N#endif /* STM32F401xx */
N/**
N  * @}
N  */ 
N
N/** @defgroup Option_Bytes_Write_Protection 
N  * @{
N  */ 
N#define OB_WRP_Sector_0       ((uint32_t)0x00000001) /*!< Write protection of Sector0     */
N#define OB_WRP_Sector_1       ((uint32_t)0x00000002) /*!< Write protection of Sector1     */
N#define OB_WRP_Sector_2       ((uint32_t)0x00000004) /*!< Write protection of Sector2     */
N#define OB_WRP_Sector_3       ((uint32_t)0x00000008) /*!< Write protection of Sector3     */
N#define OB_WRP_Sector_4       ((uint32_t)0x00000010) /*!< Write protection of Sector4     */
N#define OB_WRP_Sector_5       ((uint32_t)0x00000020) /*!< Write protection of Sector5     */
N#define OB_WRP_Sector_6       ((uint32_t)0x00000040) /*!< Write protection of Sector6     */
N#define OB_WRP_Sector_7       ((uint32_t)0x00000080) /*!< Write protection of Sector7     */
N#define OB_WRP_Sector_8       ((uint32_t)0x00000100) /*!< Write protection of Sector8     */
N#define OB_WRP_Sector_9       ((uint32_t)0x00000200) /*!< Write protection of Sector9     */
N#define OB_WRP_Sector_10      ((uint32_t)0x00000400) /*!< Write protection of Sector10    */
N#define OB_WRP_Sector_11      ((uint32_t)0x00000800) /*!< Write protection of Sector11    */
N#define OB_WRP_Sector_12      ((uint32_t)0x00000001) /*!< Write protection of Sector12    */
N#define OB_WRP_Sector_13      ((uint32_t)0x00000002) /*!< Write protection of Sector13    */
N#define OB_WRP_Sector_14      ((uint32_t)0x00000004) /*!< Write protection of Sector14    */
N#define OB_WRP_Sector_15      ((uint32_t)0x00000008) /*!< Write protection of Sector15    */
N#define OB_WRP_Sector_16      ((uint32_t)0x00000010) /*!< Write protection of Sector16    */
N#define OB_WRP_Sector_17      ((uint32_t)0x00000020) /*!< Write protection of Sector17    */
N#define OB_WRP_Sector_18      ((uint32_t)0x00000040) /*!< Write protection of Sector18    */
N#define OB_WRP_Sector_19      ((uint32_t)0x00000080) /*!< Write protection of Sector19    */
N#define OB_WRP_Sector_20      ((uint32_t)0x00000100) /*!< Write protection of Sector20    */
N#define OB_WRP_Sector_21      ((uint32_t)0x00000200) /*!< Write protection of Sector21    */
N#define OB_WRP_Sector_22      ((uint32_t)0x00000400) /*!< Write protection of Sector22    */
N#define OB_WRP_Sector_23      ((uint32_t)0x00000800) /*!< Write protection of Sector23    */
N#define OB_WRP_Sector_All     ((uint32_t)0x00000FFF) /*!< Write protection of all Sectors */
N
N#define IS_OB_WRP(SECTOR)((((SECTOR) & (uint32_t)0xFFFFF000) == 0x00000000) && ((SECTOR) != 0x00000000))
N/**
N  * @}
N  */
N
N/** @defgroup  Selection_Protection_Mode
N  * @{
N  */
N#define OB_PcROP_Disable   ((uint8_t)0x00) /*!< Disabled PcROP, nWPRi bits used for Write Protection on sector i */
N#define OB_PcROP_Enable    ((uint8_t)0x80) /*!< Enable PcROP, nWPRi bits used for PCRoP Protection on sector i   */
N#define IS_OB_PCROP_SELECT(PCROP) (((PCROP) == OB_PcROP_Disable) || ((PCROP) == OB_PcROP_Enable))
N/**
N  * @}
N  */
N
N/** @defgroup Option_Bytes_PC_ReadWrite_Protection 
N  * @{
N  */ 
N#define OB_PCROP_Sector_0        ((uint32_t)0x00000001) /*!< PC Read/Write protection of Sector0      */
N#define OB_PCROP_Sector_1        ((uint32_t)0x00000002) /*!< PC Read/Write protection of Sector1      */
N#define OB_PCROP_Sector_2        ((uint32_t)0x00000004) /*!< PC Read/Write protection of Sector2      */
N#define OB_PCROP_Sector_3        ((uint32_t)0x00000008) /*!< PC Read/Write protection of Sector3      */
N#define OB_PCROP_Sector_4        ((uint32_t)0x00000010) /*!< PC Read/Write protection of Sector4      */
N#define OB_PCROP_Sector_5        ((uint32_t)0x00000020) /*!< PC Read/Write protection of Sector5      */
N#define OB_PCROP_Sector_6        ((uint32_t)0x00000040) /*!< PC Read/Write protection of Sector6      */
N#define OB_PCROP_Sector_7        ((uint32_t)0x00000080) /*!< PC Read/Write protection of Sector7      */
N#define OB_PCROP_Sector_8        ((uint32_t)0x00000100) /*!< PC Read/Write protection of Sector8      */
N#define OB_PCROP_Sector_9        ((uint32_t)0x00000200) /*!< PC Read/Write protection of Sector9      */
N#define OB_PCROP_Sector_10       ((uint32_t)0x00000400) /*!< PC Read/Write protection of Sector10     */
N#define OB_PCROP_Sector_11       ((uint32_t)0x00000800) /*!< PC Read/Write protection of Sector11     */
N#define OB_PCROP_Sector_12       ((uint32_t)0x00000001) /*!< PC Read/Write protection of Sector12     */
N#define OB_PCROP_Sector_13       ((uint32_t)0x00000002) /*!< PC Read/Write protection of Sector13     */
N#define OB_PCROP_Sector_14       ((uint32_t)0x00000004) /*!< PC Read/Write protection of Sector14     */
N#define OB_PCROP_Sector_15       ((uint32_t)0x00000008) /*!< PC Read/Write protection of Sector15     */
N#define OB_PCROP_Sector_16       ((uint32_t)0x00000010) /*!< PC Read/Write protection of Sector16     */
N#define OB_PCROP_Sector_17       ((uint32_t)0x00000020) /*!< PC Read/Write protection of Sector17     */
N#define OB_PCROP_Sector_18       ((uint32_t)0x00000040) /*!< PC Read/Write protection of Sector18     */
N#define OB_PCROP_Sector_19       ((uint32_t)0x00000080) /*!< PC Read/Write protection of Sector19     */
N#define OB_PCROP_Sector_20       ((uint32_t)0x00000100) /*!< PC Read/Write protection of Sector20     */
N#define OB_PCROP_Sector_21       ((uint32_t)0x00000200) /*!< PC Read/Write protection of Sector21     */
N#define OB_PCROP_Sector_22       ((uint32_t)0x00000400) /*!< PC Read/Write protection of Sector22     */
N#define OB_PCROP_Sector_23       ((uint32_t)0x00000800) /*!< PC Read/Write protection of Sector23     */
N#define OB_PCROP_Sector_All      ((uint32_t)0x00000FFF) /*!< PC Read/Write protection of all Sectors  */
N
N#define IS_OB_PCROP(SECTOR)((((SECTOR) & (uint32_t)0xFFFFF000) == 0x00000000) && ((SECTOR) != 0x00000000))
N/**
N  * @}
N  */
N
N/** @defgroup FLASH_Option_Bytes_Read_Protection 
N  * @{
N  */
N#define OB_RDP_Level_0   ((uint8_t)0xAA)
N#define OB_RDP_Level_1   ((uint8_t)0x55)
N/*#define OB_RDP_Level_2   ((uint8_t)0xCC)*/ /*!< Warning: When enabling read protection level 2 
N                                                  it's no more possible to go back to level 1 or 0 */
N#define IS_OB_RDP(LEVEL) (((LEVEL) == OB_RDP_Level_0)||\
N                          ((LEVEL) == OB_RDP_Level_1))/*||\
N                          ((LEVEL) == OB_RDP_Level_2))*/
X#define IS_OB_RDP(LEVEL) (((LEVEL) == OB_RDP_Level_0)||                          ((LEVEL) == OB_RDP_Level_1)) 
N/**
N  * @}
N  */ 
N
N/** @defgroup FLASH_Option_Bytes_IWatchdog 
N  * @{
N  */ 
N#define OB_IWDG_SW                     ((uint8_t)0x20)  /*!< Software IWDG selected */
N#define OB_IWDG_HW                     ((uint8_t)0x00)  /*!< Hardware IWDG selected */
N#define IS_OB_IWDG_SOURCE(SOURCE) (((SOURCE) == OB_IWDG_SW) || ((SOURCE) == OB_IWDG_HW))
N/**
N  * @}
N  */ 
N
N/** @defgroup FLASH_Option_Bytes_nRST_STOP 
N  * @{
N  */ 
N#define OB_STOP_NoRST                  ((uint8_t)0x40) /*!< No reset generated when entering in STOP */
N#define OB_STOP_RST                    ((uint8_t)0x00) /*!< Reset generated when entering in STOP */
N#define IS_OB_STOP_SOURCE(SOURCE) (((SOURCE) == OB_STOP_NoRST) || ((SOURCE) == OB_STOP_RST))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup FLASH_Option_Bytes_nRST_STDBY 
N  * @{
N  */ 
N#define OB_STDBY_NoRST                 ((uint8_t)0x80) /*!< No reset generated when entering in STANDBY */
N#define OB_STDBY_RST                   ((uint8_t)0x00) /*!< Reset generated when entering in STANDBY */
N#define IS_OB_STDBY_SOURCE(SOURCE) (((SOURCE) == OB_STDBY_NoRST) || ((SOURCE) == OB_STDBY_RST))
N/**
N  * @}
N  */
N  
N/** @defgroup FLASH_BOR_Reset_Level 
N  * @{
N  */  
N#define OB_BOR_LEVEL3          ((uint8_t)0x00)  /*!< Supply voltage ranges from 2.70 to 3.60 V */
N#define OB_BOR_LEVEL2          ((uint8_t)0x04)  /*!< Supply voltage ranges from 2.40 to 2.70 V */
N#define OB_BOR_LEVEL1          ((uint8_t)0x08)  /*!< Supply voltage ranges from 2.10 to 2.40 V */
N#define OB_BOR_OFF             ((uint8_t)0x0C)  /*!< Supply voltage ranges from 1.62 to 2.10 V */
N#define IS_OB_BOR(LEVEL) (((LEVEL) == OB_BOR_LEVEL1) || ((LEVEL) == OB_BOR_LEVEL2) ||\
N                          ((LEVEL) == OB_BOR_LEVEL3) || ((LEVEL) == OB_BOR_OFF))
X#define IS_OB_BOR(LEVEL) (((LEVEL) == OB_BOR_LEVEL1) || ((LEVEL) == OB_BOR_LEVEL2) ||                          ((LEVEL) == OB_BOR_LEVEL3) || ((LEVEL) == OB_BOR_OFF))
N/**
N  * @}
N  */
N  
N/** @defgroup FLASH_Dual_Boot
N  * @{
N  */
N#define OB_Dual_BootEnabled   ((uint8_t)0x10) /*!< Dual Bank Boot Enable                             */
N#define OB_Dual_BootDisabled  ((uint8_t)0x00) /*!< Dual Bank Boot Disable, always boot on User Flash */
N#define IS_OB_BOOT(BOOT) (((BOOT) == OB_Dual_BootEnabled) || ((BOOT) == OB_Dual_BootDisabled))
N/**
N  * @}
N  */
N
N/** @defgroup FLASH_Interrupts 
N  * @{
N  */ 
N#define FLASH_IT_EOP                   ((uint32_t)0x01000000)  /*!< End of FLASH Operation Interrupt source */
N#define FLASH_IT_ERR                   ((uint32_t)0x02000000)  /*!< Error Interrupt source */
N#define IS_FLASH_IT(IT) ((((IT) & (uint32_t)0xFCFFFFFF) == 0x00000000) && ((IT) != 0x00000000))
N/**
N  * @}
N  */ 
N
N/** @defgroup FLASH_Flags 
N  * @{
N  */ 
N#define FLASH_FLAG_EOP                 ((uint32_t)0x00000001)  /*!< FLASH End of Operation flag               */
N#define FLASH_FLAG_OPERR               ((uint32_t)0x00000002)  /*!< FLASH operation Error flag                */
N#define FLASH_FLAG_WRPERR              ((uint32_t)0x00000010)  /*!< FLASH Write protected error flag          */
N#define FLASH_FLAG_PGAERR              ((uint32_t)0x00000020)  /*!< FLASH Programming Alignment error flag    */
N#define FLASH_FLAG_PGPERR              ((uint32_t)0x00000040)  /*!< FLASH Programming Parallelism error flag  */
N#define FLASH_FLAG_PGSERR              ((uint32_t)0x00000080)  /*!< FLASH Programming Sequence error flag     */
N#define FLASH_FLAG_RDERR               ((uint32_t)0x00000100)  /*!< Read Protection error flag (PCROP)        */
N#define FLASH_FLAG_BSY                 ((uint32_t)0x00010000)  /*!< FLASH Busy flag                           */ 
N#define IS_FLASH_CLEAR_FLAG(FLAG) ((((FLAG) & (uint32_t)0xFFFFFE0C) == 0x00000000) && ((FLAG) != 0x00000000))
N#define IS_FLASH_GET_FLAG(FLAG)  (((FLAG) == FLASH_FLAG_EOP)    || ((FLAG) == FLASH_FLAG_OPERR)  || \
N                                  ((FLAG) == FLASH_FLAG_WRPERR) || ((FLAG) == FLASH_FLAG_PGAERR) || \
N                                  ((FLAG) == FLASH_FLAG_PGPERR) || ((FLAG) == FLASH_FLAG_PGSERR) || \
N                                  ((FLAG) == FLASH_FLAG_BSY)    || ((FLAG) == FLASH_FLAG_RDERR))
X#define IS_FLASH_GET_FLAG(FLAG)  (((FLAG) == FLASH_FLAG_EOP)    || ((FLAG) == FLASH_FLAG_OPERR)  ||                                   ((FLAG) == FLASH_FLAG_WRPERR) || ((FLAG) == FLASH_FLAG_PGAERR) ||                                   ((FLAG) == FLASH_FLAG_PGPERR) || ((FLAG) == FLASH_FLAG_PGSERR) ||                                   ((FLAG) == FLASH_FLAG_BSY)    || ((FLAG) == FLASH_FLAG_RDERR))
N/**
N  * @}
N  */
N
N/** @defgroup FLASH_Program_Parallelism   
N  * @{
N  */
N#define FLASH_PSIZE_BYTE           ((uint32_t)0x00000000)
N#define FLASH_PSIZE_HALF_WORD      ((uint32_t)0x00000100)
N#define FLASH_PSIZE_WORD           ((uint32_t)0x00000200)
N#define FLASH_PSIZE_DOUBLE_WORD    ((uint32_t)0x00000300)
N#define CR_PSIZE_MASK              ((uint32_t)0xFFFFFCFF)
N/**
N  * @}
N  */ 
N
N/** @defgroup FLASH_Keys 
N  * @{
N  */ 
N#define RDP_KEY                  ((uint16_t)0x00A5)
N#define FLASH_KEY1               ((uint32_t)0x45670123)
N#define FLASH_KEY2               ((uint32_t)0xCDEF89AB)
N#define FLASH_OPT_KEY1           ((uint32_t)0x08192A3B)
N#define FLASH_OPT_KEY2           ((uint32_t)0x4C5D6E7F)
N/**
N  * @}
N  */ 
N
N/** 
N  * @brief   ACR register byte 0 (Bits[7:0]) base address  
N  */ 
N#define ACR_BYTE0_ADDRESS           ((uint32_t)0x40023C00) 
N/** 
N  * @brief   OPTCR register byte 0 (Bits[7:0]) base address  
N  */ 
N#define OPTCR_BYTE0_ADDRESS         ((uint32_t)0x40023C14)
N/** 
N  * @brief   OPTCR register byte 1 (Bits[15:8]) base address  
N  */ 
N#define OPTCR_BYTE1_ADDRESS         ((uint32_t)0x40023C15)
N/** 
N  * @brief   OPTCR register byte 2 (Bits[23:16]) base address  
N  */ 
N#define OPTCR_BYTE2_ADDRESS         ((uint32_t)0x40023C16)
N/** 
N  * @brief   OPTCR register byte 3 (Bits[31:24]) base address  
N  */ 
N#define OPTCR_BYTE3_ADDRESS         ((uint32_t)0x40023C17)
N
N/** 
N  * @brief   OPTCR1 register byte 0 (Bits[7:0]) base address  
N  */ 
N#define OPTCR1_BYTE2_ADDRESS         ((uint32_t)0x40023C1A)
N
N/**
N  * @}
N  */ 
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/ 
N 
N/* FLASH Interface configuration functions ************************************/
Nvoid FLASH_SetLatency(uint32_t FLASH_Latency);
Nvoid FLASH_PrefetchBufferCmd(FunctionalState NewState);
Nvoid FLASH_InstructionCacheCmd(FunctionalState NewState);
Nvoid FLASH_DataCacheCmd(FunctionalState NewState);
Nvoid FLASH_InstructionCacheReset(void);
Nvoid FLASH_DataCacheReset(void);
N
N/* FLASH Memory Programming functions *****************************************/   
Nvoid         FLASH_Unlock(void);
Nvoid         FLASH_Lock(void);
NFLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange);
NFLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange);
NFLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange);
NFLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange);
NFLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data);
NFLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data);
NFLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data);
NFLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data);
N
N/* Option Bytes Programming functions *****************************************/ 
Nvoid         FLASH_OB_Unlock(void);
Nvoid         FLASH_OB_Lock(void);
Nvoid         FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState);
Nvoid         FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState);
Nvoid         FLASH_OB_PCROPSelectionConfig(uint8_t OB_PcROP);
Nvoid         FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState);
Nvoid         FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState);
Nvoid         FLASH_OB_RDPConfig(uint8_t OB_RDP);
Nvoid         FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY);
Nvoid         FLASH_OB_BORConfig(uint8_t OB_BOR);
Nvoid         FLASH_OB_BootConfig(uint8_t OB_BOOT);
NFLASH_Status FLASH_OB_Launch(void);
Nuint8_t      FLASH_OB_GetUser(void);
Nuint16_t     FLASH_OB_GetWRP(void);
Nuint16_t     FLASH_OB_GetWRP1(void);
Nuint16_t     FLASH_OB_GetPCROP(void);
Nuint16_t     FLASH_OB_GetPCROP1(void);
NFlagStatus   FLASH_OB_GetRDP(void);
Nuint8_t      FLASH_OB_GetBOR(void);
N
N/* Interrupts and flags management functions **********************************/
Nvoid         FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState);
NFlagStatus   FLASH_GetFlagStatus(uint32_t FLASH_FLAG);
Nvoid         FLASH_ClearFlag(uint32_t FLASH_FLAG);
NFLASH_Status FLASH_GetStatus(void);
NFLASH_Status FLASH_WaitForLastOperation(void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32F4xx_FLASH_H */
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 57 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_gpio.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_gpio.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_gpio.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the GPIO firmware
N  *          library.  
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_GPIO_H
N#define __STM32F4xx_GPIO_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup GPIO
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/
N
N#define IS_GPIO_ALL_PERIPH(PERIPH) (((PERIPH) == GPIOA) || \
N                                    ((PERIPH) == GPIOB) || \
N                                    ((PERIPH) == GPIOC) || \
N                                    ((PERIPH) == GPIOD) || \
N                                    ((PERIPH) == GPIOE) || \
N                                    ((PERIPH) == GPIOF) || \
N                                    ((PERIPH) == GPIOG) || \
N                                    ((PERIPH) == GPIOH) || \
N                                    ((PERIPH) == GPIOI) || \
N                                    ((PERIPH) == GPIOJ) || \
N                                    ((PERIPH) == GPIOK))
X#define IS_GPIO_ALL_PERIPH(PERIPH) (((PERIPH) == GPIOA) ||                                     ((PERIPH) == GPIOB) ||                                     ((PERIPH) == GPIOC) ||                                     ((PERIPH) == GPIOD) ||                                     ((PERIPH) == GPIOE) ||                                     ((PERIPH) == GPIOF) ||                                     ((PERIPH) == GPIOG) ||                                     ((PERIPH) == GPIOH) ||                                     ((PERIPH) == GPIOI) ||                                     ((PERIPH) == GPIOJ) ||                                     ((PERIPH) == GPIOK))
N                                                                                             
N/** 
N  * @brief  GPIO Configuration Mode enumeration 
N  */   
Ntypedef enum
N{ 
N  GPIO_Mode_IN   = 0x00, /*!< GPIO Input Mode */
N  GPIO_Mode_OUT  = 0x01, /*!< GPIO Output Mode */
N  GPIO_Mode_AF   = 0x02, /*!< GPIO Alternate function Mode */
N  GPIO_Mode_AN   = 0x03  /*!< GPIO Analog Mode */
N}GPIOMode_TypeDef;
N#define IS_GPIO_MODE(MODE) (((MODE) == GPIO_Mode_IN)  || ((MODE) == GPIO_Mode_OUT) || \
N                            ((MODE) == GPIO_Mode_AF)|| ((MODE) == GPIO_Mode_AN))
X#define IS_GPIO_MODE(MODE) (((MODE) == GPIO_Mode_IN)  || ((MODE) == GPIO_Mode_OUT) ||                             ((MODE) == GPIO_Mode_AF)|| ((MODE) == GPIO_Mode_AN))
N
N/** 
N  * @brief  GPIO Output type enumeration 
N  */  
Ntypedef enum
N{ 
N  GPIO_OType_PP = 0x00,
N  GPIO_OType_OD = 0x01
N}GPIOOType_TypeDef;
N#define IS_GPIO_OTYPE(OTYPE) (((OTYPE) == GPIO_OType_PP) || ((OTYPE) == GPIO_OType_OD))
N
N
N/** 
N  * @brief  GPIO Output Maximum frequency enumeration 
N  */  
Ntypedef enum
N{ 
N  GPIO_Low_Speed     = 0x00, /*!< Low speed    */
N  GPIO_Medium_Speed  = 0x01, /*!< Medium speed */
N  GPIO_Fast_Speed    = 0x02, /*!< Fast speed   */
N  GPIO_High_Speed    = 0x03  /*!< High speed   */
N}GPIOSpeed_TypeDef;
N
N/* Add legacy definition */
N#define  GPIO_Speed_2MHz    GPIO_Low_Speed    
N#define  GPIO_Speed_25MHz   GPIO_Medium_Speed 
N#define  GPIO_Speed_50MHz   GPIO_Fast_Speed 
N#define  GPIO_Speed_100MHz  GPIO_High_Speed  
N  
N#define IS_GPIO_SPEED(SPEED) (((SPEED) == GPIO_Low_Speed) || ((SPEED) == GPIO_Medium_Speed) || \
N                              ((SPEED) == GPIO_Fast_Speed)||  ((SPEED) == GPIO_High_Speed)) 
X#define IS_GPIO_SPEED(SPEED) (((SPEED) == GPIO_Low_Speed) || ((SPEED) == GPIO_Medium_Speed) ||                               ((SPEED) == GPIO_Fast_Speed)||  ((SPEED) == GPIO_High_Speed)) 
N
N/** 
N  * @brief  GPIO Configuration PullUp PullDown enumeration 
N  */ 
Ntypedef enum
N{ 
N  GPIO_PuPd_NOPULL = 0x00,
N  GPIO_PuPd_UP     = 0x01,
N  GPIO_PuPd_DOWN   = 0x02
N}GPIOPuPd_TypeDef;
N#define IS_GPIO_PUPD(PUPD) (((PUPD) == GPIO_PuPd_NOPULL) || ((PUPD) == GPIO_PuPd_UP) || \
N                            ((PUPD) == GPIO_PuPd_DOWN))
X#define IS_GPIO_PUPD(PUPD) (((PUPD) == GPIO_PuPd_NOPULL) || ((PUPD) == GPIO_PuPd_UP) ||                             ((PUPD) == GPIO_PuPd_DOWN))
N
N/** 
N  * @brief  GPIO Bit SET and Bit RESET enumeration 
N  */ 
Ntypedef enum
N{ 
N  Bit_RESET = 0,
N  Bit_SET
N}BitAction;
N#define IS_GPIO_BIT_ACTION(ACTION) (((ACTION) == Bit_RESET) || ((ACTION) == Bit_SET))
N
N
N/** 
N  * @brief   GPIO Init structure definition  
N  */ 
Ntypedef struct
N{
N  uint32_t GPIO_Pin;              /*!< Specifies the GPIO pins to be configured.
N                                       This parameter can be any value of @ref GPIO_pins_define */
N
N  GPIOMode_TypeDef GPIO_Mode;     /*!< Specifies the operating mode for the selected pins.
N                                       This parameter can be a value of @ref GPIOMode_TypeDef */
N
N  GPIOSpeed_TypeDef GPIO_Speed;   /*!< Specifies the speed for the selected pins.
N                                       This parameter can be a value of @ref GPIOSpeed_TypeDef */
N
N  GPIOOType_TypeDef GPIO_OType;   /*!< Specifies the operating output type for the selected pins.
N                                       This parameter can be a value of @ref GPIOOType_TypeDef */
N
N  GPIOPuPd_TypeDef GPIO_PuPd;     /*!< Specifies the operating Pull-up/Pull down for the selected pins.
N                                       This parameter can be a value of @ref GPIOPuPd_TypeDef */
N}GPIO_InitTypeDef;
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup GPIO_Exported_Constants
N  * @{
N  */ 
N
N/** @defgroup GPIO_pins_define 
N  * @{
N  */ 
N#define GPIO_Pin_0                 ((uint16_t)0x0001)  /* Pin 0 selected */
N#define GPIO_Pin_1                 ((uint16_t)0x0002)  /* Pin 1 selected */
N#define GPIO_Pin_2                 ((uint16_t)0x0004)  /* Pin 2 selected */
N#define GPIO_Pin_3                 ((uint16_t)0x0008)  /* Pin 3 selected */
N#define GPIO_Pin_4                 ((uint16_t)0x0010)  /* Pin 4 selected */
N#define GPIO_Pin_5                 ((uint16_t)0x0020)  /* Pin 5 selected */
N#define GPIO_Pin_6                 ((uint16_t)0x0040)  /* Pin 6 selected */
N#define GPIO_Pin_7                 ((uint16_t)0x0080)  /* Pin 7 selected */
N#define GPIO_Pin_8                 ((uint16_t)0x0100)  /* Pin 8 selected */
N#define GPIO_Pin_9                 ((uint16_t)0x0200)  /* Pin 9 selected */
N#define GPIO_Pin_10                ((uint16_t)0x0400)  /* Pin 10 selected */
N#define GPIO_Pin_11                ((uint16_t)0x0800)  /* Pin 11 selected */
N#define GPIO_Pin_12                ((uint16_t)0x1000)  /* Pin 12 selected */
N#define GPIO_Pin_13                ((uint16_t)0x2000)  /* Pin 13 selected */
N#define GPIO_Pin_14                ((uint16_t)0x4000)  /* Pin 14 selected */
N#define GPIO_Pin_15                ((uint16_t)0x8000)  /* Pin 15 selected */
N#define GPIO_Pin_All               ((uint16_t)0xFFFF)  /* All pins selected */
N
N#define IS_GPIO_PIN(PIN) ((((PIN) & (uint16_t)0x00) == 0x00) && ((PIN) != (uint16_t)0x00))
N#define IS_GET_GPIO_PIN(PIN) (((PIN) == GPIO_Pin_0) || \
N                              ((PIN) == GPIO_Pin_1) || \
N                              ((PIN) == GPIO_Pin_2) || \
N                              ((PIN) == GPIO_Pin_3) || \
N                              ((PIN) == GPIO_Pin_4) || \
N                              ((PIN) == GPIO_Pin_5) || \
N                              ((PIN) == GPIO_Pin_6) || \
N                              ((PIN) == GPIO_Pin_7) || \
N                              ((PIN) == GPIO_Pin_8) || \
N                              ((PIN) == GPIO_Pin_9) || \
N                              ((PIN) == GPIO_Pin_10) || \
N                              ((PIN) == GPIO_Pin_11) || \
N                              ((PIN) == GPIO_Pin_12) || \
N                              ((PIN) == GPIO_Pin_13) || \
N                              ((PIN) == GPIO_Pin_14) || \
N                              ((PIN) == GPIO_Pin_15))
X#define IS_GET_GPIO_PIN(PIN) (((PIN) == GPIO_Pin_0) ||                               ((PIN) == GPIO_Pin_1) ||                               ((PIN) == GPIO_Pin_2) ||                               ((PIN) == GPIO_Pin_3) ||                               ((PIN) == GPIO_Pin_4) ||                               ((PIN) == GPIO_Pin_5) ||                               ((PIN) == GPIO_Pin_6) ||                               ((PIN) == GPIO_Pin_7) ||                               ((PIN) == GPIO_Pin_8) ||                               ((PIN) == GPIO_Pin_9) ||                               ((PIN) == GPIO_Pin_10) ||                               ((PIN) == GPIO_Pin_11) ||                               ((PIN) == GPIO_Pin_12) ||                               ((PIN) == GPIO_Pin_13) ||                               ((PIN) == GPIO_Pin_14) ||                               ((PIN) == GPIO_Pin_15))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup GPIO_Pin_sources 
N  * @{
N  */ 
N#define GPIO_PinSource0            ((uint8_t)0x00)
N#define GPIO_PinSource1            ((uint8_t)0x01)
N#define GPIO_PinSource2            ((uint8_t)0x02)
N#define GPIO_PinSource3            ((uint8_t)0x03)
N#define GPIO_PinSource4            ((uint8_t)0x04)
N#define GPIO_PinSource5            ((uint8_t)0x05)
N#define GPIO_PinSource6            ((uint8_t)0x06)
N#define GPIO_PinSource7            ((uint8_t)0x07)
N#define GPIO_PinSource8            ((uint8_t)0x08)
N#define GPIO_PinSource9            ((uint8_t)0x09)
N#define GPIO_PinSource10           ((uint8_t)0x0A)
N#define GPIO_PinSource11           ((uint8_t)0x0B)
N#define GPIO_PinSource12           ((uint8_t)0x0C)
N#define GPIO_PinSource13           ((uint8_t)0x0D)
N#define GPIO_PinSource14           ((uint8_t)0x0E)
N#define GPIO_PinSource15           ((uint8_t)0x0F)
N
N#define IS_GPIO_PIN_SOURCE(PINSOURCE) (((PINSOURCE) == GPIO_PinSource0) || \
N                                       ((PINSOURCE) == GPIO_PinSource1) || \
N                                       ((PINSOURCE) == GPIO_PinSource2) || \
N                                       ((PINSOURCE) == GPIO_PinSource3) || \
N                                       ((PINSOURCE) == GPIO_PinSource4) || \
N                                       ((PINSOURCE) == GPIO_PinSource5) || \
N                                       ((PINSOURCE) == GPIO_PinSource6) || \
N                                       ((PINSOURCE) == GPIO_PinSource7) || \
N                                       ((PINSOURCE) == GPIO_PinSource8) || \
N                                       ((PINSOURCE) == GPIO_PinSource9) || \
N                                       ((PINSOURCE) == GPIO_PinSource10) || \
N                                       ((PINSOURCE) == GPIO_PinSource11) || \
N                                       ((PINSOURCE) == GPIO_PinSource12) || \
N                                       ((PINSOURCE) == GPIO_PinSource13) || \
N                                       ((PINSOURCE) == GPIO_PinSource14) || \
N                                       ((PINSOURCE) == GPIO_PinSource15))
X#define IS_GPIO_PIN_SOURCE(PINSOURCE) (((PINSOURCE) == GPIO_PinSource0) ||                                        ((PINSOURCE) == GPIO_PinSource1) ||                                        ((PINSOURCE) == GPIO_PinSource2) ||                                        ((PINSOURCE) == GPIO_PinSource3) ||                                        ((PINSOURCE) == GPIO_PinSource4) ||                                        ((PINSOURCE) == GPIO_PinSource5) ||                                        ((PINSOURCE) == GPIO_PinSource6) ||                                        ((PINSOURCE) == GPIO_PinSource7) ||                                        ((PINSOURCE) == GPIO_PinSource8) ||                                        ((PINSOURCE) == GPIO_PinSource9) ||                                        ((PINSOURCE) == GPIO_PinSource10) ||                                        ((PINSOURCE) == GPIO_PinSource11) ||                                        ((PINSOURCE) == GPIO_PinSource12) ||                                        ((PINSOURCE) == GPIO_PinSource13) ||                                        ((PINSOURCE) == GPIO_PinSource14) ||                                        ((PINSOURCE) == GPIO_PinSource15))
N/**
N  * @}
N  */ 
N
N/** @defgroup GPIO_Alternat_function_selection_define 
N  * @{
N  */ 
N/** 
N  * @brief   AF 0 selection  
N  */ 
N#define GPIO_AF_RTC_50Hz      ((uint8_t)0x00)  /* RTC_50Hz Alternate Function mapping */
N#define GPIO_AF_MCO           ((uint8_t)0x00)  /* MCO (MCO1 and MCO2) Alternate Function mapping */
N#define GPIO_AF_TAMPER        ((uint8_t)0x00)  /* TAMPER (TAMPER_1 and TAMPER_2) Alternate Function mapping */
N#define GPIO_AF_SWJ           ((uint8_t)0x00)  /* SWJ (SWD and JTAG) Alternate Function mapping */
N#define GPIO_AF_TRACE         ((uint8_t)0x00)  /* TRACE Alternate Function mapping */
N
N/** 
N  * @brief   AF 1 selection  
N  */ 
N#define GPIO_AF_TIM1          ((uint8_t)0x01)  /* TIM1 Alternate Function mapping */
N#define GPIO_AF_TIM2          ((uint8_t)0x01)  /* TIM2 Alternate Function mapping */
N
N/** 
N  * @brief   AF 2 selection  
N  */ 
N#define GPIO_AF_TIM3          ((uint8_t)0x02)  /* TIM3 Alternate Function mapping */
N#define GPIO_AF_TIM4          ((uint8_t)0x02)  /* TIM4 Alternate Function mapping */
N#define GPIO_AF_TIM5          ((uint8_t)0x02)  /* TIM5 Alternate Function mapping */
N
N/** 
N  * @brief   AF 3 selection  
N  */ 
N#define GPIO_AF_TIM8          ((uint8_t)0x03)  /* TIM8 Alternate Function mapping */
N#define GPIO_AF_TIM9          ((uint8_t)0x03)  /* TIM9 Alternate Function mapping */
N#define GPIO_AF_TIM10         ((uint8_t)0x03)  /* TIM10 Alternate Function mapping */
N#define GPIO_AF_TIM11         ((uint8_t)0x03)  /* TIM11 Alternate Function mapping */
N
N/** 
N  * @brief   AF 4 selection  
N  */ 
N#define GPIO_AF_I2C1          ((uint8_t)0x04)  /* I2C1 Alternate Function mapping */
N#define GPIO_AF_I2C2          ((uint8_t)0x04)  /* I2C2 Alternate Function mapping */
N#define GPIO_AF_I2C3          ((uint8_t)0x04)  /* I2C3 Alternate Function mapping */
N
N/** 
N  * @brief   AF 5 selection  
N  */ 
N#define GPIO_AF_SPI1          ((uint8_t)0x05)  /* SPI1 Alternate Function mapping      */
N#define GPIO_AF_SPI2          ((uint8_t)0x05)  /* SPI2/I2S2 Alternate Function mapping */
N#define GPIO_AF_SPI4          ((uint8_t)0x05)  /* SPI4 Alternate Function mapping      */
N#define GPIO_AF_SPI5          ((uint8_t)0x05)  /* SPI5 Alternate Function mapping      */
N#define GPIO_AF_SPI6          ((uint8_t)0x05)  /* SPI6 Alternate Function mapping      */
N
N/** 
N  * @brief   AF 6 selection  
N  */ 
N#define GPIO_AF_SPI3          ((uint8_t)0x06)  /* SPI3/I2S3 Alternate Function mapping */
N
N#define GPIO_AF_SAI1          ((uint8_t)0x06)  /* SAI1 Alternate Function mapping      */
N
N/** 
N  * @brief   AF 7 selection  
N  */ 
N#define GPIO_AF_USART1        ((uint8_t)0x07)  /* USART1 Alternate Function mapping  */
N#define GPIO_AF_USART2        ((uint8_t)0x07)  /* USART2 Alternate Function mapping  */
N#define GPIO_AF_USART3        ((uint8_t)0x07)  /* USART3 Alternate Function mapping  */
N#define GPIO_AF_I2S3ext       ((uint8_t)0x07)  /* I2S3ext Alternate Function mapping */
N
N/** 
N  * @brief   AF 8 selection  
N  */ 
N#define GPIO_AF_UART4         ((uint8_t)0x08)  /* UART4 Alternate Function mapping  */
N#define GPIO_AF_UART5         ((uint8_t)0x08)  /* UART5 Alternate Function mapping  */
N#define GPIO_AF_USART6        ((uint8_t)0x08)  /* USART6 Alternate Function mapping */
N#define GPIO_AF_UART7         ((uint8_t)0x08)  /* UART7 Alternate Function mapping  */
N#define GPIO_AF_UART8         ((uint8_t)0x08)  /* UART8 Alternate Function mapping  */
N
N/** 
N  * @brief   AF 9 selection 
N  */ 
N#define GPIO_AF_CAN1          ((uint8_t)0x09)  /* CAN1 Alternate Function mapping  */
N#define GPIO_AF_CAN2          ((uint8_t)0x09)  /* CAN2 Alternate Function mapping  */
N#define GPIO_AF_TIM12         ((uint8_t)0x09)  /* TIM12 Alternate Function mapping */
N#define GPIO_AF_TIM13         ((uint8_t)0x09)  /* TIM13 Alternate Function mapping */
N#define GPIO_AF_TIM14         ((uint8_t)0x09)  /* TIM14 Alternate Function mapping */
N
N#define GPIO_AF9_I2C2          ((uint8_t)0x09)  /* I2C2 Alternate Function mapping (Only for STM32F401xx Devices) */
N#define GPIO_AF9_I2C3          ((uint8_t)0x09)  /* I2C3 Alternate Function mapping (Only for STM32F401xx Devices) */
N
N/** 
N  * @brief   AF 10 selection  
N  */ 
N#define GPIO_AF_OTG_FS         ((uint8_t)0xA)  /* OTG_FS Alternate Function mapping */
N#define GPIO_AF_OTG_HS         ((uint8_t)0xA)  /* OTG_HS Alternate Function mapping */
N
N/** 
N  * @brief   AF 11 selection  
N  */ 
N#define GPIO_AF_ETH             ((uint8_t)0x0B)  /* ETHERNET Alternate Function mapping */
N
N/** 
N  * @brief   AF 12 selection  
N  */ 
N#if defined (STM32F40_41xxx)
X#if 1L
N#define GPIO_AF_FSMC             ((uint8_t)0xC)  /* FSMC Alternate Function mapping                     */
N#endif /* STM32F40_41xxx */
N
N#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
X#if 0L || 0L
S#define GPIO_AF_FMC              ((uint8_t)0xC)  /* FMC Alternate Function mapping                      */
N#endif /* STM32F427_437xx ||  STM32F429_439xx */
N
N#define GPIO_AF_OTG_HS_FS        ((uint8_t)0xC)  /* OTG HS configured in FS, Alternate Function mapping */
N#define GPIO_AF_SDIO             ((uint8_t)0xC)  /* SDIO Alternate Function mapping                     */
N
N/** 
N  * @brief   AF 13 selection  
N  */ 
N#define GPIO_AF_DCMI          ((uint8_t)0x0D)  /* DCMI Alternate Function mapping */
N
N/** 
N  * @brief   AF 14 selection  
N  */
N
N#define GPIO_AF_LTDC          ((uint8_t)0x0E)  /* LCD-TFT Alternate Function mapping */
N
N/** 
N  * @brief   AF 15 selection  
N  */ 
N#define GPIO_AF_EVENTOUT      ((uint8_t)0x0F)  /* EVENTOUT Alternate Function mapping */
N
N#if defined (STM32F40_41xxx)
X#if 1L
N#define IS_GPIO_AF(AF)   (((AF) == GPIO_AF_RTC_50Hz)  || ((AF) == GPIO_AF_TIM14)     || \
N                          ((AF) == GPIO_AF_MCO)       || ((AF) == GPIO_AF_TAMPER)    || \
N                          ((AF) == GPIO_AF_SWJ)       || ((AF) == GPIO_AF_TRACE)     || \
N                          ((AF) == GPIO_AF_TIM1)      || ((AF) == GPIO_AF_TIM2)      || \
N                          ((AF) == GPIO_AF_TIM3)      || ((AF) == GPIO_AF_TIM4)      || \
N                          ((AF) == GPIO_AF_TIM5)      || ((AF) == GPIO_AF_TIM8)      || \
N                          ((AF) == GPIO_AF_I2C1)      || ((AF) == GPIO_AF_I2C2)      || \
N                          ((AF) == GPIO_AF_I2C3)      || ((AF) == GPIO_AF_SPI1)      || \
N                          ((AF) == GPIO_AF_SPI2)      || ((AF) == GPIO_AF_TIM13)     || \
N                          ((AF) == GPIO_AF_SPI3)      || ((AF) == GPIO_AF_TIM14)     || \
N                          ((AF) == GPIO_AF_USART1)    || ((AF) == GPIO_AF_USART2)    || \
N                          ((AF) == GPIO_AF_USART3)    || ((AF) == GPIO_AF_UART4)     || \
N                          ((AF) == GPIO_AF_UART5)     || ((AF) == GPIO_AF_USART6)    || \
N                          ((AF) == GPIO_AF_CAN1)      || ((AF) == GPIO_AF_CAN2)      || \
N                          ((AF) == GPIO_AF_OTG_FS)    || ((AF) == GPIO_AF_OTG_HS)    || \
N                          ((AF) == GPIO_AF_ETH)       || ((AF) == GPIO_AF_OTG_HS_FS) || \
N                          ((AF) == GPIO_AF_SDIO)      || ((AF) == GPIO_AF_DCMI)      || \
N                          ((AF) == GPIO_AF_EVENTOUT)  || ((AF) == GPIO_AF_FSMC))
X#define IS_GPIO_AF(AF)   (((AF) == GPIO_AF_RTC_50Hz)  || ((AF) == GPIO_AF_TIM14)     ||                           ((AF) == GPIO_AF_MCO)       || ((AF) == GPIO_AF_TAMPER)    ||                           ((AF) == GPIO_AF_SWJ)       || ((AF) == GPIO_AF_TRACE)     ||                           ((AF) == GPIO_AF_TIM1)      || ((AF) == GPIO_AF_TIM2)      ||                           ((AF) == GPIO_AF_TIM3)      || ((AF) == GPIO_AF_TIM4)      ||                           ((AF) == GPIO_AF_TIM5)      || ((AF) == GPIO_AF_TIM8)      ||                           ((AF) == GPIO_AF_I2C1)      || ((AF) == GPIO_AF_I2C2)      ||                           ((AF) == GPIO_AF_I2C3)      || ((AF) == GPIO_AF_SPI1)      ||                           ((AF) == GPIO_AF_SPI2)      || ((AF) == GPIO_AF_TIM13)     ||                           ((AF) == GPIO_AF_SPI3)      || ((AF) == GPIO_AF_TIM14)     ||                           ((AF) == GPIO_AF_USART1)    || ((AF) == GPIO_AF_USART2)    ||                           ((AF) == GPIO_AF_USART3)    || ((AF) == GPIO_AF_UART4)     ||                           ((AF) == GPIO_AF_UART5)     || ((AF) == GPIO_AF_USART6)    ||                           ((AF) == GPIO_AF_CAN1)      || ((AF) == GPIO_AF_CAN2)      ||                           ((AF) == GPIO_AF_OTG_FS)    || ((AF) == GPIO_AF_OTG_HS)    ||                           ((AF) == GPIO_AF_ETH)       || ((AF) == GPIO_AF_OTG_HS_FS) ||                           ((AF) == GPIO_AF_SDIO)      || ((AF) == GPIO_AF_DCMI)      ||                           ((AF) == GPIO_AF_EVENTOUT)  || ((AF) == GPIO_AF_FSMC))
N#endif /* STM32F40_41xxx */
N
N#if defined (STM32F401xx)
X#if 0L
S#define IS_GPIO_AF(AF)   (((AF) == GPIO_AF_RTC_50Hz)  || ((AF) == GPIO_AF_TIM14)     || \
S                          ((AF) == GPIO_AF_MCO)       || ((AF) == GPIO_AF_TAMPER)    || \
S                          ((AF) == GPIO_AF_SWJ)       || ((AF) == GPIO_AF_TRACE)     || \
S                          ((AF) == GPIO_AF_TIM1)      || ((AF) == GPIO_AF_TIM2)      || \
S                          ((AF) == GPIO_AF_TIM3)      || ((AF) == GPIO_AF_TIM4)      || \
S                          ((AF) == GPIO_AF_TIM5)      || ((AF) == GPIO_AF_TIM8)      || \
S                          ((AF) == GPIO_AF_I2C1)      || ((AF) == GPIO_AF_I2C2)      || \
S                          ((AF) == GPIO_AF_I2C3)      || ((AF) == GPIO_AF_SPI1)      || \
S                          ((AF) == GPIO_AF_SPI2)      || ((AF) == GPIO_AF_TIM13)     || \
S                          ((AF) == GPIO_AF_SPI3)      || ((AF) == GPIO_AF_TIM14)     || \
S                          ((AF) == GPIO_AF_USART1)    || ((AF) == GPIO_AF_USART2)    || \
S                          ((AF) == GPIO_AF_SDIO)      || ((AF) == GPIO_AF_USART6)    || \
S                          ((AF) == GPIO_AF_OTG_FS)    || ((AF) == GPIO_AF_OTG_HS)    || \
S                          ((AF) == GPIO_AF_EVENTOUT)  || ((AF) == GPIO_AF_SPI4))
X#define IS_GPIO_AF(AF)   (((AF) == GPIO_AF_RTC_50Hz)  || ((AF) == GPIO_AF_TIM14)     ||                           ((AF) == GPIO_AF_MCO)       || ((AF) == GPIO_AF_TAMPER)    ||                           ((AF) == GPIO_AF_SWJ)       || ((AF) == GPIO_AF_TRACE)     ||                           ((AF) == GPIO_AF_TIM1)      || ((AF) == GPIO_AF_TIM2)      ||                           ((AF) == GPIO_AF_TIM3)      || ((AF) == GPIO_AF_TIM4)      ||                           ((AF) == GPIO_AF_TIM5)      || ((AF) == GPIO_AF_TIM8)      ||                           ((AF) == GPIO_AF_I2C1)      || ((AF) == GPIO_AF_I2C2)      ||                           ((AF) == GPIO_AF_I2C3)      || ((AF) == GPIO_AF_SPI1)      ||                           ((AF) == GPIO_AF_SPI2)      || ((AF) == GPIO_AF_TIM13)     ||                           ((AF) == GPIO_AF_SPI3)      || ((AF) == GPIO_AF_TIM14)     ||                           ((AF) == GPIO_AF_USART1)    || ((AF) == GPIO_AF_USART2)    ||                           ((AF) == GPIO_AF_SDIO)      || ((AF) == GPIO_AF_USART6)    ||                           ((AF) == GPIO_AF_OTG_FS)    || ((AF) == GPIO_AF_OTG_HS)    ||                           ((AF) == GPIO_AF_EVENTOUT)  || ((AF) == GPIO_AF_SPI4))
N#endif /* STM32F401xx */
N
N#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
X#if 0L || 0L
S#define IS_GPIO_AF(AF)   (((AF) == GPIO_AF_RTC_50Hz)  || ((AF) == GPIO_AF_TIM14)     || \
S                          ((AF) == GPIO_AF_MCO)       || ((AF) == GPIO_AF_TAMPER)    || \
S                          ((AF) == GPIO_AF_SWJ)       || ((AF) == GPIO_AF_TRACE)     || \
S                          ((AF) == GPIO_AF_TIM1)      || ((AF) == GPIO_AF_TIM2)      || \
S                          ((AF) == GPIO_AF_TIM3)      || ((AF) == GPIO_AF_TIM4)      || \
S                          ((AF) == GPIO_AF_TIM5)      || ((AF) == GPIO_AF_TIM8)      || \
S                          ((AF) == GPIO_AF_I2C1)      || ((AF) == GPIO_AF_I2C2)      || \
S                          ((AF) == GPIO_AF_I2C3)      || ((AF) == GPIO_AF_SPI1)      || \
S                          ((AF) == GPIO_AF_SPI2)      || ((AF) == GPIO_AF_TIM13)     || \
S                          ((AF) == GPIO_AF_SPI3)      || ((AF) == GPIO_AF_TIM14)     || \
S                          ((AF) == GPIO_AF_USART1)    || ((AF) == GPIO_AF_USART2)    || \
S                          ((AF) == GPIO_AF_USART3)    || ((AF) == GPIO_AF_UART4)     || \
S                          ((AF) == GPIO_AF_UART5)     || ((AF) == GPIO_AF_USART6)    || \
S                          ((AF) == GPIO_AF_CAN1)      || ((AF) == GPIO_AF_CAN2)      || \
S                          ((AF) == GPIO_AF_OTG_FS)    || ((AF) == GPIO_AF_OTG_HS)    || \
S                          ((AF) == GPIO_AF_ETH)       || ((AF) == GPIO_AF_OTG_HS_FS) || \
S                          ((AF) == GPIO_AF_SDIO)      || ((AF) == GPIO_AF_DCMI)      || \
S                          ((AF) == GPIO_AF_EVENTOUT)  || ((AF) == GPIO_AF_SPI4)      || \
S                          ((AF) == GPIO_AF_SPI5)      || ((AF) == GPIO_AF_SPI6)      || \
S                          ((AF) == GPIO_AF_UART7)     || ((AF) == GPIO_AF_UART8)     || \
S                          ((AF) == GPIO_AF_FMC)       ||  ((AF) == GPIO_AF_SAI1)     || \
S                          ((AF) == GPIO_AF_LTDC))
X#define IS_GPIO_AF(AF)   (((AF) == GPIO_AF_RTC_50Hz)  || ((AF) == GPIO_AF_TIM14)     ||                           ((AF) == GPIO_AF_MCO)       || ((AF) == GPIO_AF_TAMPER)    ||                           ((AF) == GPIO_AF_SWJ)       || ((AF) == GPIO_AF_TRACE)     ||                           ((AF) == GPIO_AF_TIM1)      || ((AF) == GPIO_AF_TIM2)      ||                           ((AF) == GPIO_AF_TIM3)      || ((AF) == GPIO_AF_TIM4)      ||                           ((AF) == GPIO_AF_TIM5)      || ((AF) == GPIO_AF_TIM8)      ||                           ((AF) == GPIO_AF_I2C1)      || ((AF) == GPIO_AF_I2C2)      ||                           ((AF) == GPIO_AF_I2C3)      || ((AF) == GPIO_AF_SPI1)      ||                           ((AF) == GPIO_AF_SPI2)      || ((AF) == GPIO_AF_TIM13)     ||                           ((AF) == GPIO_AF_SPI3)      || ((AF) == GPIO_AF_TIM14)     ||                           ((AF) == GPIO_AF_USART1)    || ((AF) == GPIO_AF_USART2)    ||                           ((AF) == GPIO_AF_USART3)    || ((AF) == GPIO_AF_UART4)     ||                           ((AF) == GPIO_AF_UART5)     || ((AF) == GPIO_AF_USART6)    ||                           ((AF) == GPIO_AF_CAN1)      || ((AF) == GPIO_AF_CAN2)      ||                           ((AF) == GPIO_AF_OTG_FS)    || ((AF) == GPIO_AF_OTG_HS)    ||                           ((AF) == GPIO_AF_ETH)       || ((AF) == GPIO_AF_OTG_HS_FS) ||                           ((AF) == GPIO_AF_SDIO)      || ((AF) == GPIO_AF_DCMI)      ||                           ((AF) == GPIO_AF_EVENTOUT)  || ((AF) == GPIO_AF_SPI4)      ||                           ((AF) == GPIO_AF_SPI5)      || ((AF) == GPIO_AF_SPI6)      ||                           ((AF) == GPIO_AF_UART7)     || ((AF) == GPIO_AF_UART8)     ||                           ((AF) == GPIO_AF_FMC)       ||  ((AF) == GPIO_AF_SAI1)     ||                           ((AF) == GPIO_AF_LTDC))
N#endif /* STM32F427_437xx ||  STM32F429_439xx */
N                          
N/**
N  * @}
N  */ 
N
N/** @defgroup GPIO_Legacy 
N  * @{
N  */
N    
N#define GPIO_Mode_AIN           GPIO_Mode_AN
N
N#define GPIO_AF_OTG1_FS         GPIO_AF_OTG_FS
N#define GPIO_AF_OTG2_HS         GPIO_AF_OTG_HS
N#define GPIO_AF_OTG2_FS         GPIO_AF_OTG_HS_FS
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/ 
N
N/*  Function used to set the GPIO configuration to the default reset state ****/
Nvoid GPIO_DeInit(GPIO_TypeDef* GPIOx);
N
N/* Initialization and Configuration functions *********************************/
Nvoid GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct);
Nvoid GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct);
Nvoid GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
N
N/* GPIO Read and Write functions **********************************************/
Nuint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
Nuint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx);
Nuint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
Nuint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx);
Nvoid GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
Nvoid GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
Nvoid GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal);
Nvoid GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal);
Nvoid GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
N
N/* GPIO Alternate functions configuration function ****************************/
Nvoid GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__STM32F4xx_GPIO_H */
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 58 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_i2c.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_i2c.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_i2c.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the I2C firmware 
N  *          library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************  
N  */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_I2C_H
N#define __STM32F4xx_I2C_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup I2C
N  * @{
N  */
N
N/* Exported types ------------------------------------------------------------*/
N
N/** 
N  * @brief  I2C Init structure definition  
N  */
N
Ntypedef struct
N{
N  uint32_t I2C_ClockSpeed;          /*!< Specifies the clock frequency.
N                                         This parameter must be set to a value lower than 400kHz */
N
N  uint16_t I2C_Mode;                /*!< Specifies the I2C mode.
N                                         This parameter can be a value of @ref I2C_mode */
N
N  uint16_t I2C_DutyCycle;           /*!< Specifies the I2C fast mode duty cycle.
N                                         This parameter can be a value of @ref I2C_duty_cycle_in_fast_mode */
N
N  uint16_t I2C_OwnAddress1;         /*!< Specifies the first device own address.
N                                         This parameter can be a 7-bit or 10-bit address. */
N
N  uint16_t I2C_Ack;                 /*!< Enables or disables the acknowledgement.
N                                         This parameter can be a value of @ref I2C_acknowledgement */
N
N  uint16_t I2C_AcknowledgedAddress; /*!< Specifies if 7-bit or 10-bit address is acknowledged.
N                                         This parameter can be a value of @ref I2C_acknowledged_address */
N}I2C_InitTypeDef;
N
N/* Exported constants --------------------------------------------------------*/
N
N
N/** @defgroup I2C_Exported_Constants
N  * @{
N  */
N
N#define IS_I2C_ALL_PERIPH(PERIPH) (((PERIPH) == I2C1) || \
N                                   ((PERIPH) == I2C2) || \
N                                   ((PERIPH) == I2C3))
X#define IS_I2C_ALL_PERIPH(PERIPH) (((PERIPH) == I2C1) ||                                    ((PERIPH) == I2C2) ||                                    ((PERIPH) == I2C3))
N
N/** @defgroup I2C_Digital_Filter
N  * @{
N  */
N
N#define IS_I2C_DIGITAL_FILTER(FILTER)   ((FILTER) <= 0x0000000F)
N/**
N  * @}
N  */
N
N
N/** @defgroup I2C_mode 
N  * @{
N  */
N
N#define I2C_Mode_I2C                    ((uint16_t)0x0000)
N#define I2C_Mode_SMBusDevice            ((uint16_t)0x0002)  
N#define I2C_Mode_SMBusHost              ((uint16_t)0x000A)
N#define IS_I2C_MODE(MODE) (((MODE) == I2C_Mode_I2C) || \
N                           ((MODE) == I2C_Mode_SMBusDevice) || \
N                           ((MODE) == I2C_Mode_SMBusHost))
X#define IS_I2C_MODE(MODE) (((MODE) == I2C_Mode_I2C) ||                            ((MODE) == I2C_Mode_SMBusDevice) ||                            ((MODE) == I2C_Mode_SMBusHost))
N/**
N  * @}
N  */
N
N/** @defgroup I2C_duty_cycle_in_fast_mode 
N  * @{
N  */
N
N#define I2C_DutyCycle_16_9              ((uint16_t)0x4000) /*!< I2C fast mode Tlow/Thigh = 16/9 */
N#define I2C_DutyCycle_2                 ((uint16_t)0xBFFF) /*!< I2C fast mode Tlow/Thigh = 2 */
N#define IS_I2C_DUTY_CYCLE(CYCLE) (((CYCLE) == I2C_DutyCycle_16_9) || \
N                                  ((CYCLE) == I2C_DutyCycle_2))
X#define IS_I2C_DUTY_CYCLE(CYCLE) (((CYCLE) == I2C_DutyCycle_16_9) ||                                   ((CYCLE) == I2C_DutyCycle_2))
N/**
N  * @}
N  */ 
N
N/** @defgroup I2C_acknowledgement
N  * @{
N  */
N
N#define I2C_Ack_Enable                  ((uint16_t)0x0400)
N#define I2C_Ack_Disable                 ((uint16_t)0x0000)
N#define IS_I2C_ACK_STATE(STATE) (((STATE) == I2C_Ack_Enable) || \
N                                 ((STATE) == I2C_Ack_Disable))
X#define IS_I2C_ACK_STATE(STATE) (((STATE) == I2C_Ack_Enable) ||                                  ((STATE) == I2C_Ack_Disable))
N/**
N  * @}
N  */
N
N/** @defgroup I2C_transfer_direction 
N  * @{
N  */
N
N#define  I2C_Direction_Transmitter      ((uint8_t)0x00)
N#define  I2C_Direction_Receiver         ((uint8_t)0x01)
N#define IS_I2C_DIRECTION(DIRECTION) (((DIRECTION) == I2C_Direction_Transmitter) || \
N                                     ((DIRECTION) == I2C_Direction_Receiver))
X#define IS_I2C_DIRECTION(DIRECTION) (((DIRECTION) == I2C_Direction_Transmitter) ||                                      ((DIRECTION) == I2C_Direction_Receiver))
N/**
N  * @}
N  */
N
N/** @defgroup I2C_acknowledged_address 
N  * @{
N  */
N
N#define I2C_AcknowledgedAddress_7bit    ((uint16_t)0x4000)
N#define I2C_AcknowledgedAddress_10bit   ((uint16_t)0xC000)
N#define IS_I2C_ACKNOWLEDGE_ADDRESS(ADDRESS) (((ADDRESS) == I2C_AcknowledgedAddress_7bit) || \
N                                             ((ADDRESS) == I2C_AcknowledgedAddress_10bit))
X#define IS_I2C_ACKNOWLEDGE_ADDRESS(ADDRESS) (((ADDRESS) == I2C_AcknowledgedAddress_7bit) ||                                              ((ADDRESS) == I2C_AcknowledgedAddress_10bit))
N/**
N  * @}
N  */ 
N
N/** @defgroup I2C_registers 
N  * @{
N  */
N
N#define I2C_Register_CR1                ((uint8_t)0x00)
N#define I2C_Register_CR2                ((uint8_t)0x04)
N#define I2C_Register_OAR1               ((uint8_t)0x08)
N#define I2C_Register_OAR2               ((uint8_t)0x0C)
N#define I2C_Register_DR                 ((uint8_t)0x10)
N#define I2C_Register_SR1                ((uint8_t)0x14)
N#define I2C_Register_SR2                ((uint8_t)0x18)
N#define I2C_Register_CCR                ((uint8_t)0x1C)
N#define I2C_Register_TRISE              ((uint8_t)0x20)
N#define IS_I2C_REGISTER(REGISTER) (((REGISTER) == I2C_Register_CR1) || \
N                                   ((REGISTER) == I2C_Register_CR2) || \
N                                   ((REGISTER) == I2C_Register_OAR1) || \
N                                   ((REGISTER) == I2C_Register_OAR2) || \
N                                   ((REGISTER) == I2C_Register_DR) || \
N                                   ((REGISTER) == I2C_Register_SR1) || \
N                                   ((REGISTER) == I2C_Register_SR2) || \
N                                   ((REGISTER) == I2C_Register_CCR) || \
N                                   ((REGISTER) == I2C_Register_TRISE))
X#define IS_I2C_REGISTER(REGISTER) (((REGISTER) == I2C_Register_CR1) ||                                    ((REGISTER) == I2C_Register_CR2) ||                                    ((REGISTER) == I2C_Register_OAR1) ||                                    ((REGISTER) == I2C_Register_OAR2) ||                                    ((REGISTER) == I2C_Register_DR) ||                                    ((REGISTER) == I2C_Register_SR1) ||                                    ((REGISTER) == I2C_Register_SR2) ||                                    ((REGISTER) == I2C_Register_CCR) ||                                    ((REGISTER) == I2C_Register_TRISE))
N/**
N  * @}
N  */
N
N/** @defgroup I2C_NACK_position 
N  * @{
N  */
N
N#define I2C_NACKPosition_Next           ((uint16_t)0x0800)
N#define I2C_NACKPosition_Current        ((uint16_t)0xF7FF)
N#define IS_I2C_NACK_POSITION(POSITION)  (((POSITION) == I2C_NACKPosition_Next) || \
N                                         ((POSITION) == I2C_NACKPosition_Current))
X#define IS_I2C_NACK_POSITION(POSITION)  (((POSITION) == I2C_NACKPosition_Next) ||                                          ((POSITION) == I2C_NACKPosition_Current))
N/**
N  * @}
N  */ 
N
N/** @defgroup I2C_SMBus_alert_pin_level 
N  * @{
N  */
N
N#define I2C_SMBusAlert_Low              ((uint16_t)0x2000)
N#define I2C_SMBusAlert_High             ((uint16_t)0xDFFF)
N#define IS_I2C_SMBUS_ALERT(ALERT) (((ALERT) == I2C_SMBusAlert_Low) || \
N                                   ((ALERT) == I2C_SMBusAlert_High))
X#define IS_I2C_SMBUS_ALERT(ALERT) (((ALERT) == I2C_SMBusAlert_Low) ||                                    ((ALERT) == I2C_SMBusAlert_High))
N/**
N  * @}
N  */
N
N/** @defgroup I2C_PEC_position 
N  * @{
N  */
N
N#define I2C_PECPosition_Next            ((uint16_t)0x0800)
N#define I2C_PECPosition_Current         ((uint16_t)0xF7FF)
N#define IS_I2C_PEC_POSITION(POSITION) (((POSITION) == I2C_PECPosition_Next) || \
N                                       ((POSITION) == I2C_PECPosition_Current))
X#define IS_I2C_PEC_POSITION(POSITION) (((POSITION) == I2C_PECPosition_Next) ||                                        ((POSITION) == I2C_PECPosition_Current))
N/**
N  * @}
N  */ 
N
N/** @defgroup I2C_interrupts_definition 
N  * @{
N  */
N
N#define I2C_IT_BUF                      ((uint16_t)0x0400)
N#define I2C_IT_EVT                      ((uint16_t)0x0200)
N#define I2C_IT_ERR                      ((uint16_t)0x0100)
N#define IS_I2C_CONFIG_IT(IT) ((((IT) & (uint16_t)0xF8FF) == 0x00) && ((IT) != 0x00))
N/**
N  * @}
N  */ 
N
N/** @defgroup I2C_interrupts_definition 
N  * @{
N  */
N
N#define I2C_IT_SMBALERT                 ((uint32_t)0x01008000)
N#define I2C_IT_TIMEOUT                  ((uint32_t)0x01004000)
N#define I2C_IT_PECERR                   ((uint32_t)0x01001000)
N#define I2C_IT_OVR                      ((uint32_t)0x01000800)
N#define I2C_IT_AF                       ((uint32_t)0x01000400)
N#define I2C_IT_ARLO                     ((uint32_t)0x01000200)
N#define I2C_IT_BERR                     ((uint32_t)0x01000100)
N#define I2C_IT_TXE                      ((uint32_t)0x06000080)
N#define I2C_IT_RXNE                     ((uint32_t)0x06000040)
N#define I2C_IT_STOPF                    ((uint32_t)0x02000010)
N#define I2C_IT_ADD10                    ((uint32_t)0x02000008)
N#define I2C_IT_BTF                      ((uint32_t)0x02000004)
N#define I2C_IT_ADDR                     ((uint32_t)0x02000002)
N#define I2C_IT_SB                       ((uint32_t)0x02000001)
N
N#define IS_I2C_CLEAR_IT(IT) ((((IT) & (uint16_t)0x20FF) == 0x00) && ((IT) != (uint16_t)0x00))
N
N#define IS_I2C_GET_IT(IT) (((IT) == I2C_IT_SMBALERT) || ((IT) == I2C_IT_TIMEOUT) || \
N                           ((IT) == I2C_IT_PECERR) || ((IT) == I2C_IT_OVR) || \
N                           ((IT) == I2C_IT_AF) || ((IT) == I2C_IT_ARLO) || \
N                           ((IT) == I2C_IT_BERR) || ((IT) == I2C_IT_TXE) || \
N                           ((IT) == I2C_IT_RXNE) || ((IT) == I2C_IT_STOPF) || \
N                           ((IT) == I2C_IT_ADD10) || ((IT) == I2C_IT_BTF) || \
N                           ((IT) == I2C_IT_ADDR) || ((IT) == I2C_IT_SB))
X#define IS_I2C_GET_IT(IT) (((IT) == I2C_IT_SMBALERT) || ((IT) == I2C_IT_TIMEOUT) ||                            ((IT) == I2C_IT_PECERR) || ((IT) == I2C_IT_OVR) ||                            ((IT) == I2C_IT_AF) || ((IT) == I2C_IT_ARLO) ||                            ((IT) == I2C_IT_BERR) || ((IT) == I2C_IT_TXE) ||                            ((IT) == I2C_IT_RXNE) || ((IT) == I2C_IT_STOPF) ||                            ((IT) == I2C_IT_ADD10) || ((IT) == I2C_IT_BTF) ||                            ((IT) == I2C_IT_ADDR) || ((IT) == I2C_IT_SB))
N/**
N  * @}
N  */
N
N/** @defgroup I2C_flags_definition 
N  * @{
N  */
N
N/** 
N  * @brief  SR2 register flags  
N  */
N
N#define I2C_FLAG_DUALF                  ((uint32_t)0x00800000)
N#define I2C_FLAG_SMBHOST                ((uint32_t)0x00400000)
N#define I2C_FLAG_SMBDEFAULT             ((uint32_t)0x00200000)
N#define I2C_FLAG_GENCALL                ((uint32_t)0x00100000)
N#define I2C_FLAG_TRA                    ((uint32_t)0x00040000)
N#define I2C_FLAG_BUSY                   ((uint32_t)0x00020000)
N#define I2C_FLAG_MSL                    ((uint32_t)0x00010000)
N
N/** 
N  * @brief  SR1 register flags  
N  */
N
N#define I2C_FLAG_SMBALERT               ((uint32_t)0x10008000)
N#define I2C_FLAG_TIMEOUT                ((uint32_t)0x10004000)
N#define I2C_FLAG_PECERR                 ((uint32_t)0x10001000)
N#define I2C_FLAG_OVR                    ((uint32_t)0x10000800)
N#define I2C_FLAG_AF                     ((uint32_t)0x10000400)
N#define I2C_FLAG_ARLO                   ((uint32_t)0x10000200)
N#define I2C_FLAG_BERR                   ((uint32_t)0x10000100)
N#define I2C_FLAG_TXE                    ((uint32_t)0x10000080)
N#define I2C_FLAG_RXNE                   ((uint32_t)0x10000040)
N#define I2C_FLAG_STOPF                  ((uint32_t)0x10000010)
N#define I2C_FLAG_ADD10                  ((uint32_t)0x10000008)
N#define I2C_FLAG_BTF                    ((uint32_t)0x10000004)
N#define I2C_FLAG_ADDR                   ((uint32_t)0x10000002)
N#define I2C_FLAG_SB                     ((uint32_t)0x10000001)
N
N#define IS_I2C_CLEAR_FLAG(FLAG) ((((FLAG) & (uint16_t)0x20FF) == 0x00) && ((FLAG) != (uint16_t)0x00))
N
N#define IS_I2C_GET_FLAG(FLAG) (((FLAG) == I2C_FLAG_DUALF) || ((FLAG) == I2C_FLAG_SMBHOST) || \
N                               ((FLAG) == I2C_FLAG_SMBDEFAULT) || ((FLAG) == I2C_FLAG_GENCALL) || \
N                               ((FLAG) == I2C_FLAG_TRA) || ((FLAG) == I2C_FLAG_BUSY) || \
N                               ((FLAG) == I2C_FLAG_MSL) || ((FLAG) == I2C_FLAG_SMBALERT) || \
N                               ((FLAG) == I2C_FLAG_TIMEOUT) || ((FLAG) == I2C_FLAG_PECERR) || \
N                               ((FLAG) == I2C_FLAG_OVR) || ((FLAG) == I2C_FLAG_AF) || \
N                               ((FLAG) == I2C_FLAG_ARLO) || ((FLAG) == I2C_FLAG_BERR) || \
N                               ((FLAG) == I2C_FLAG_TXE) || ((FLAG) == I2C_FLAG_RXNE) || \
N                               ((FLAG) == I2C_FLAG_STOPF) || ((FLAG) == I2C_FLAG_ADD10) || \
N                               ((FLAG) == I2C_FLAG_BTF) || ((FLAG) == I2C_FLAG_ADDR) || \
N                               ((FLAG) == I2C_FLAG_SB))
X#define IS_I2C_GET_FLAG(FLAG) (((FLAG) == I2C_FLAG_DUALF) || ((FLAG) == I2C_FLAG_SMBHOST) ||                                ((FLAG) == I2C_FLAG_SMBDEFAULT) || ((FLAG) == I2C_FLAG_GENCALL) ||                                ((FLAG) == I2C_FLAG_TRA) || ((FLAG) == I2C_FLAG_BUSY) ||                                ((FLAG) == I2C_FLAG_MSL) || ((FLAG) == I2C_FLAG_SMBALERT) ||                                ((FLAG) == I2C_FLAG_TIMEOUT) || ((FLAG) == I2C_FLAG_PECERR) ||                                ((FLAG) == I2C_FLAG_OVR) || ((FLAG) == I2C_FLAG_AF) ||                                ((FLAG) == I2C_FLAG_ARLO) || ((FLAG) == I2C_FLAG_BERR) ||                                ((FLAG) == I2C_FLAG_TXE) || ((FLAG) == I2C_FLAG_RXNE) ||                                ((FLAG) == I2C_FLAG_STOPF) || ((FLAG) == I2C_FLAG_ADD10) ||                                ((FLAG) == I2C_FLAG_BTF) || ((FLAG) == I2C_FLAG_ADDR) ||                                ((FLAG) == I2C_FLAG_SB))
N/**
N  * @}
N  */
N
N/** @defgroup I2C_Events 
N  * @{
N  */
N
N/**
N ===============================================================================
N               I2C Master Events (Events grouped in order of communication)
N ===============================================================================
N */
N
N/** 
N  * @brief  Communication start
N  * 
N  * After sending the START condition (I2C_GenerateSTART() function) the master 
N  * has to wait for this event. It means that the Start condition has been correctly 
N  * released on the I2C bus (the bus is free, no other devices is communicating).
N  * 
N  */
N/* --EV5 */
N#define  I2C_EVENT_MASTER_MODE_SELECT                      ((uint32_t)0x00030001)  /* BUSY, MSL and SB flag */
N
N/** 
N  * @brief  Address Acknowledge
N  * 
N  * After checking on EV5 (start condition correctly released on the bus), the 
N  * master sends the address of the slave(s) with which it will communicate 
N  * (I2C_Send7bitAddress() function, it also determines the direction of the communication: 
N  * Master transmitter or Receiver). Then the master has to wait that a slave acknowledges 
N  * his address. If an acknowledge is sent on the bus, one of the following events will 
N  * be set:
N  * 
N  *  1) In case of Master Receiver (7-bit addressing): the I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED 
N  *     event is set.
N  *  
N  *  2) In case of Master Transmitter (7-bit addressing): the I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED 
N  *     is set
N  *  
N  *  3) In case of 10-Bit addressing mode, the master (just after generating the START 
N  *  and checking on EV5) has to send the header of 10-bit addressing mode (I2C_SendData() 
N  *  function). Then master should wait on EV9. It means that the 10-bit addressing 
N  *  header has been correctly sent on the bus. Then master should send the second part of 
N  *  the 10-bit address (LSB) using the function I2C_Send7bitAddress(). Then master 
N  *  should wait for event EV6. 
N  *     
N  */
N
N/* --EV6 */
N#define  I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED        ((uint32_t)0x00070082)  /* BUSY, MSL, ADDR, TXE and TRA flags */
N#define  I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED           ((uint32_t)0x00030002)  /* BUSY, MSL and ADDR flags */
N/* --EV9 */
N#define  I2C_EVENT_MASTER_MODE_ADDRESS10                   ((uint32_t)0x00030008)  /* BUSY, MSL and ADD10 flags */
N
N/** 
N  * @brief Communication events
N  * 
N  * If a communication is established (START condition generated and slave address 
N  * acknowledged) then the master has to check on one of the following events for 
N  * communication procedures:
N  *  
N  * 1) Master Receiver mode: The master has to wait on the event EV7 then to read 
N  *    the data received from the slave (I2C_ReceiveData() function).
N  * 
N  * 2) Master Transmitter mode: The master has to send data (I2C_SendData() 
N  *    function) then to wait on event EV8 or EV8_2.
N  *    These two events are similar: 
N  *     - EV8 means that the data has been written in the data register and is 
N  *       being shifted out.
N  *     - EV8_2 means that the data has been physically shifted out and output 
N  *       on the bus.
N  *     In most cases, using EV8 is sufficient for the application.
N  *     Using EV8_2 leads to a slower communication but ensure more reliable test.
N  *     EV8_2 is also more suitable than EV8 for testing on the last data transmission 
N  *     (before Stop condition generation).
N  *     
N  *  @note In case the  user software does not guarantee that this event EV7 is 
N  *        managed before the current byte end of transfer, then user may check on EV7 
N  *        and BTF flag at the same time (ie. (I2C_EVENT_MASTER_BYTE_RECEIVED | I2C_FLAG_BTF)).
N  *        In this case the communication may be slower.
N  * 
N  */
N
N/* Master RECEIVER mode -----------------------------*/ 
N/* --EV7 */
N#define  I2C_EVENT_MASTER_BYTE_RECEIVED                    ((uint32_t)0x00030040)  /* BUSY, MSL and RXNE flags */
N
N/* Master TRANSMITTER mode --------------------------*/
N/* --EV8 */
N#define I2C_EVENT_MASTER_BYTE_TRANSMITTING                 ((uint32_t)0x00070080) /* TRA, BUSY, MSL, TXE flags */
N/* --EV8_2 */
N#define  I2C_EVENT_MASTER_BYTE_TRANSMITTED                 ((uint32_t)0x00070084)  /* TRA, BUSY, MSL, TXE and BTF flags */
N
N
N/**
N ===============================================================================
N               I2C Slave Events (Events grouped in order of communication)
N ===============================================================================
N */
N
N
N/** 
N  * @brief  Communication start events
N  * 
N  * Wait on one of these events at the start of the communication. It means that 
N  * the I2C peripheral detected a Start condition on the bus (generated by master 
N  * device) followed by the peripheral address. The peripheral generates an ACK 
N  * condition on the bus (if the acknowledge feature is enabled through function 
N  * I2C_AcknowledgeConfig()) and the events listed above are set :
N  *  
N  * 1) In normal case (only one address managed by the slave), when the address 
N  *   sent by the master matches the own address of the peripheral (configured by 
N  *   I2C_OwnAddress1 field) the I2C_EVENT_SLAVE_XXX_ADDRESS_MATCHED event is set 
N  *   (where XXX could be TRANSMITTER or RECEIVER).
N  *    
N  * 2) In case the address sent by the master matches the second address of the 
N  *   peripheral (configured by the function I2C_OwnAddress2Config() and enabled 
N  *   by the function I2C_DualAddressCmd()) the events I2C_EVENT_SLAVE_XXX_SECONDADDRESS_MATCHED 
N  *   (where XXX could be TRANSMITTER or RECEIVER) are set.
N  *   
N  * 3) In case the address sent by the master is General Call (address 0x00) and 
N  *   if the General Call is enabled for the peripheral (using function I2C_GeneralCallCmd()) 
N  *   the following event is set I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED.   
N  * 
N  */
N
N/* --EV1  (all the events below are variants of EV1) */   
N/* 1) Case of One Single Address managed by the slave */
N#define  I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED          ((uint32_t)0x00020002) /* BUSY and ADDR flags */
N#define  I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED       ((uint32_t)0x00060082) /* TRA, BUSY, TXE and ADDR flags */
N
N/* 2) Case of Dual address managed by the slave */
N#define  I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED    ((uint32_t)0x00820000)  /* DUALF and BUSY flags */
N#define  I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED ((uint32_t)0x00860080)  /* DUALF, TRA, BUSY and TXE flags */
N
N/* 3) Case of General Call enabled for the slave */
N#define  I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED        ((uint32_t)0x00120000)  /* GENCALL and BUSY flags */
N
N/** 
N  * @brief  Communication events
N  * 
N  * Wait on one of these events when EV1 has already been checked and: 
N  * 
N  * - Slave RECEIVER mode:
N  *     - EV2: When the application is expecting a data byte to be received. 
N  *     - EV4: When the application is expecting the end of the communication: master 
N  *       sends a stop condition and data transmission is stopped.
N  *    
N  * - Slave Transmitter mode:
N  *    - EV3: When a byte has been transmitted by the slave and the application is expecting 
N  *      the end of the byte transmission. The two events I2C_EVENT_SLAVE_BYTE_TRANSMITTED and
N  *      I2C_EVENT_SLAVE_BYTE_TRANSMITTING are similar. The second one can optionally be 
N  *      used when the user software doesn't guarantee the EV3 is managed before the
N  *      current byte end of transfer.
N  *    - EV3_2: When the master sends a NACK in order to tell slave that data transmission 
N  *      shall end (before sending the STOP condition). In this case slave has to stop sending 
N  *      data bytes and expect a Stop condition on the bus.
N  *      
N  *  @note In case the  user software does not guarantee that the event EV2 is 
N  *        managed before the current byte end of transfer, then user may check on EV2 
N  *        and BTF flag at the same time (ie. (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_BTF)).
N  *        In this case the communication may be slower.
N  *
N  */
N
N/* Slave RECEIVER mode --------------------------*/ 
N/* --EV2 */
N#define  I2C_EVENT_SLAVE_BYTE_RECEIVED                     ((uint32_t)0x00020040)  /* BUSY and RXNE flags */
N/* --EV4  */
N#define  I2C_EVENT_SLAVE_STOP_DETECTED                     ((uint32_t)0x00000010)  /* STOPF flag */
N
N/* Slave TRANSMITTER mode -----------------------*/
N/* --EV3 */
N#define  I2C_EVENT_SLAVE_BYTE_TRANSMITTED                  ((uint32_t)0x00060084)  /* TRA, BUSY, TXE and BTF flags */
N#define  I2C_EVENT_SLAVE_BYTE_TRANSMITTING                 ((uint32_t)0x00060080)  /* TRA, BUSY and TXE flags */
N/* --EV3_2 */
N#define  I2C_EVENT_SLAVE_ACK_FAILURE                       ((uint32_t)0x00000400)  /* AF flag */
N
N/*
N ===============================================================================
N                          End of Events Description
N ===============================================================================
N */
N
N#define IS_I2C_EVENT(EVENT) (((EVENT) == I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED) || \
N                             ((EVENT) == I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED) || \
N                             ((EVENT) == I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED) || \
N                             ((EVENT) == I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED) || \
N                             ((EVENT) == I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED) || \
N                             ((EVENT) == I2C_EVENT_SLAVE_BYTE_RECEIVED) || \
N                             ((EVENT) == (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF)) || \
N                             ((EVENT) == (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL)) || \
N                             ((EVENT) == I2C_EVENT_SLAVE_BYTE_TRANSMITTED) || \
N                             ((EVENT) == (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF)) || \
N                             ((EVENT) == (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL)) || \
N                             ((EVENT) == I2C_EVENT_SLAVE_STOP_DETECTED) || \
N                             ((EVENT) == I2C_EVENT_MASTER_MODE_SELECT) || \
N                             ((EVENT) == I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED) || \
N                             ((EVENT) == I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED) || \
N                             ((EVENT) == I2C_EVENT_MASTER_BYTE_RECEIVED) || \
N                             ((EVENT) == I2C_EVENT_MASTER_BYTE_TRANSMITTED) || \
N                             ((EVENT) == I2C_EVENT_MASTER_BYTE_TRANSMITTING) || \
N                             ((EVENT) == I2C_EVENT_MASTER_MODE_ADDRESS10) || \
N                             ((EVENT) == I2C_EVENT_SLAVE_ACK_FAILURE))
X#define IS_I2C_EVENT(EVENT) (((EVENT) == I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED) ||                              ((EVENT) == I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED) ||                              ((EVENT) == I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED) ||                              ((EVENT) == I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED) ||                              ((EVENT) == I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED) ||                              ((EVENT) == I2C_EVENT_SLAVE_BYTE_RECEIVED) ||                              ((EVENT) == (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF)) ||                              ((EVENT) == (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL)) ||                              ((EVENT) == I2C_EVENT_SLAVE_BYTE_TRANSMITTED) ||                              ((EVENT) == (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF)) ||                              ((EVENT) == (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL)) ||                              ((EVENT) == I2C_EVENT_SLAVE_STOP_DETECTED) ||                              ((EVENT) == I2C_EVENT_MASTER_MODE_SELECT) ||                              ((EVENT) == I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED) ||                              ((EVENT) == I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED) ||                              ((EVENT) == I2C_EVENT_MASTER_BYTE_RECEIVED) ||                              ((EVENT) == I2C_EVENT_MASTER_BYTE_TRANSMITTED) ||                              ((EVENT) == I2C_EVENT_MASTER_BYTE_TRANSMITTING) ||                              ((EVENT) == I2C_EVENT_MASTER_MODE_ADDRESS10) ||                              ((EVENT) == I2C_EVENT_SLAVE_ACK_FAILURE))
N/**
N  * @}
N  */
N
N/** @defgroup I2C_own_address1 
N  * @{
N  */
N
N#define IS_I2C_OWN_ADDRESS1(ADDRESS1) ((ADDRESS1) <= 0x3FF)
N/**
N  * @}
N  */
N
N/** @defgroup I2C_clock_speed 
N  * @{
N  */
N
N#define IS_I2C_CLOCK_SPEED(SPEED) (((SPEED) >= 0x1) && ((SPEED) <= 400000))
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/ 
N
N/*  Function used to set the I2C configuration to the default reset state *****/
Nvoid I2C_DeInit(I2C_TypeDef* I2Cx);
N
N/* Initialization and Configuration functions *********************************/
Nvoid I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct);
Nvoid I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct);
Nvoid I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
Nvoid I2C_DigitalFilterConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DigitalFilter);
Nvoid I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
Nvoid I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState);
Nvoid I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState);
Nvoid I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction);
Nvoid I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState);
Nvoid I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address);
Nvoid I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
Nvoid I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
Nvoid I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
Nvoid I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
Nvoid I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle);
Nvoid I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition);
Nvoid I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert);
Nvoid I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
N
N/* Data transfers functions ***************************************************/ 
Nvoid I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data);
Nuint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx);
N
N/* PEC management functions ***************************************************/ 
Nvoid I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState);
Nvoid I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition);
Nvoid I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState);
Nuint8_t I2C_GetPEC(I2C_TypeDef* I2Cx);
N
N/* DMA transfers management functions *****************************************/
Nvoid I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
Nvoid I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
N
N/* Interrupts, events and flags management functions **************************/
Nuint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register);
Nvoid I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState);
N
N/* 
N ===============================================================================
N                          I2C State Monitoring Functions
N ===============================================================================
N  This I2C driver provides three different ways for I2C state monitoring
N  depending on the application requirements and constraints:
N         
N   
N     1. Basic state monitoring (Using I2C_CheckEvent() function)
N     -----------------------------------------------------------
N        It compares the status registers (SR1 and SR2) content to a given event
N        (can be the combination of one or more flags).
N        It returns SUCCESS if the current status includes the given flags 
N        and returns ERROR if one or more flags are missing in the current status.
N
N          - When to use
N             - This function is suitable for most applications as well as for startup 
N               activity since the events are fully described in the product reference 
N               manual (RM0090).
N             - It is also suitable for users who need to define their own events.
N
N          - Limitations
N             - If an error occurs (ie. error flags are set besides to the monitored 
N               flags), the I2C_CheckEvent() function may return SUCCESS despite 
N               the communication hold or corrupted real state. 
N               In this case, it is advised to use error interrupts to monitor 
N               the error events and handle them in the interrupt IRQ handler.
N         
N     Note 
N         For error management, it is advised to use the following functions:
N           - I2C_ITConfig() to configure and enable the error interrupts (I2C_IT_ERR).
N           - I2Cx_ER_IRQHandler() which is called when the error interrupt occurs.
N             Where x is the peripheral instance (I2C1, I2C2 ...)
N           - I2C_GetFlagStatus() or I2C_GetITStatus()  to be called into the 
N             I2Cx_ER_IRQHandler() function in order to determine which error occurred.
N           - I2C_ClearFlag() or I2C_ClearITPendingBit() and/or I2C_SoftwareResetCmd() 
N             and/or I2C_GenerateStop() in order to clear the error flag and source 
N             and return to correct  communication status.
N             
N 
N     2. Advanced state monitoring (Using the function I2C_GetLastEvent())
N     -------------------------------------------------------------------- 
N        Using the function I2C_GetLastEvent() which returns the image of both status 
N        registers in a single word (uint32_t) (Status Register 2 value is shifted left 
N        by 16 bits and concatenated to Status Register 1).
N
N          - When to use
N             - This function is suitable for the same applications above but it 
N               allows to overcome the mentioned limitation of I2C_GetFlagStatus() 
N               function.
N             - The returned value could be compared to events already defined in 
N               this file or to custom values defined by user.
N               This function is suitable when multiple flags are monitored at the 
N               same time.
N             - At the opposite of I2C_CheckEvent() function, this function allows 
N               user to choose when an event is accepted (when all events flags are 
N               set and no other flags are set or just when the needed flags are set 
N               like I2C_CheckEvent() function.
N
N          - Limitations
N             - User may need to define his own events.
N             - Same remark concerning the error management is applicable for this 
N               function if user decides to check only regular communication flags 
N               (and ignores error flags).
N      
N 
N     3. Flag-based state monitoring (Using the function I2C_GetFlagStatus())
N     -----------------------------------------------------------------------
N     
N      Using the function I2C_GetFlagStatus() which simply returns the status of 
N      one single flag (ie. I2C_FLAG_RXNE ...). 
N
N          - When to use
N             - This function could be used for specific applications or in debug 
N               phase.
N             - It is suitable when only one flag checking is needed (most I2C 
N               events are monitored through multiple flags).
N          - Limitations: 
N             - When calling this function, the Status register is accessed. 
N               Some flags are cleared when the status register is accessed. 
N               So checking the status of one Flag, may clear other ones.
N             - Function may need to be called twice or more in order to monitor 
N               one single event.           
N */
N
N/*
N ===============================================================================
N                          1. Basic state monitoring
N ===============================================================================
N */
NErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT);
N/*
N ===============================================================================
N                          2. Advanced state monitoring
N ===============================================================================
N */
Nuint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx);
N/*
N ===============================================================================
N                          3. Flag-based state monitoring
N ===============================================================================
N */
NFlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG);
N
N
Nvoid I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG);
NITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT);
Nvoid I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__STM32F4xx_I2C_H */
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 59 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_iwdg.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_iwdg.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_iwdg.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the IWDG 
N  *          firmware library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_IWDG_H
N#define __STM32F4xx_IWDG_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup IWDG
N  * @{
N  */
N
N/* Exported types ------------------------------------------------------------*/
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup IWDG_Exported_Constants
N  * @{
N  */
N  
N/** @defgroup IWDG_WriteAccess
N  * @{
N  */
N#define IWDG_WriteAccess_Enable     ((uint16_t)0x5555)
N#define IWDG_WriteAccess_Disable    ((uint16_t)0x0000)
N#define IS_IWDG_WRITE_ACCESS(ACCESS) (((ACCESS) == IWDG_WriteAccess_Enable) || \
N                                      ((ACCESS) == IWDG_WriteAccess_Disable))
X#define IS_IWDG_WRITE_ACCESS(ACCESS) (((ACCESS) == IWDG_WriteAccess_Enable) ||                                       ((ACCESS) == IWDG_WriteAccess_Disable))
N/**
N  * @}
N  */
N
N/** @defgroup IWDG_prescaler 
N  * @{
N  */
N#define IWDG_Prescaler_4            ((uint8_t)0x00)
N#define IWDG_Prescaler_8            ((uint8_t)0x01)
N#define IWDG_Prescaler_16           ((uint8_t)0x02)
N#define IWDG_Prescaler_32           ((uint8_t)0x03)
N#define IWDG_Prescaler_64           ((uint8_t)0x04)
N#define IWDG_Prescaler_128          ((uint8_t)0x05)
N#define IWDG_Prescaler_256          ((uint8_t)0x06)
N#define IS_IWDG_PRESCALER(PRESCALER) (((PRESCALER) == IWDG_Prescaler_4)  || \
N                                      ((PRESCALER) == IWDG_Prescaler_8)  || \
N                                      ((PRESCALER) == IWDG_Prescaler_16) || \
N                                      ((PRESCALER) == IWDG_Prescaler_32) || \
N                                      ((PRESCALER) == IWDG_Prescaler_64) || \
N                                      ((PRESCALER) == IWDG_Prescaler_128)|| \
N                                      ((PRESCALER) == IWDG_Prescaler_256))
X#define IS_IWDG_PRESCALER(PRESCALER) (((PRESCALER) == IWDG_Prescaler_4)  ||                                       ((PRESCALER) == IWDG_Prescaler_8)  ||                                       ((PRESCALER) == IWDG_Prescaler_16) ||                                       ((PRESCALER) == IWDG_Prescaler_32) ||                                       ((PRESCALER) == IWDG_Prescaler_64) ||                                       ((PRESCALER) == IWDG_Prescaler_128)||                                       ((PRESCALER) == IWDG_Prescaler_256))
N/**
N  * @}
N  */
N
N/** @defgroup IWDG_Flag 
N  * @{
N  */
N#define IWDG_FLAG_PVU               ((uint16_t)0x0001)
N#define IWDG_FLAG_RVU               ((uint16_t)0x0002)
N#define IS_IWDG_FLAG(FLAG) (((FLAG) == IWDG_FLAG_PVU) || ((FLAG) == IWDG_FLAG_RVU))
N#define IS_IWDG_RELOAD(RELOAD) ((RELOAD) <= 0xFFF)
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/
N
N/* Prescaler and Counter configuration functions ******************************/
Nvoid IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess);
Nvoid IWDG_SetPrescaler(uint8_t IWDG_Prescaler);
Nvoid IWDG_SetReload(uint16_t Reload);
Nvoid IWDG_ReloadCounter(void);
N
N/* IWDG activation function ***************************************************/
Nvoid IWDG_Enable(void);
N
N/* Flag management function ***************************************************/
NFlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32F4xx_IWDG_H */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 60 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_pwr.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_pwr.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_pwr.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the PWR firmware 
N  *          library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_PWR_H
N#define __STM32F4xx_PWR_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup PWR
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup PWR_Exported_Constants
N  * @{
N  */ 
N
N/** @defgroup PWR_PVD_detection_level 
N  * @{
N  */ 
N#define PWR_PVDLevel_0                  PWR_CR_PLS_LEV0
N#define PWR_PVDLevel_1                  PWR_CR_PLS_LEV1
N#define PWR_PVDLevel_2                  PWR_CR_PLS_LEV2
N#define PWR_PVDLevel_3                  PWR_CR_PLS_LEV3
N#define PWR_PVDLevel_4                  PWR_CR_PLS_LEV4
N#define PWR_PVDLevel_5                  PWR_CR_PLS_LEV5
N#define PWR_PVDLevel_6                  PWR_CR_PLS_LEV6
N#define PWR_PVDLevel_7                  PWR_CR_PLS_LEV7
N
N#define IS_PWR_PVD_LEVEL(LEVEL) (((LEVEL) == PWR_PVDLevel_0) || ((LEVEL) == PWR_PVDLevel_1)|| \
N                                 ((LEVEL) == PWR_PVDLevel_2) || ((LEVEL) == PWR_PVDLevel_3)|| \
N                                 ((LEVEL) == PWR_PVDLevel_4) || ((LEVEL) == PWR_PVDLevel_5)|| \
N                                 ((LEVEL) == PWR_PVDLevel_6) || ((LEVEL) == PWR_PVDLevel_7))
X#define IS_PWR_PVD_LEVEL(LEVEL) (((LEVEL) == PWR_PVDLevel_0) || ((LEVEL) == PWR_PVDLevel_1)||                                  ((LEVEL) == PWR_PVDLevel_2) || ((LEVEL) == PWR_PVDLevel_3)||                                  ((LEVEL) == PWR_PVDLevel_4) || ((LEVEL) == PWR_PVDLevel_5)||                                  ((LEVEL) == PWR_PVDLevel_6) || ((LEVEL) == PWR_PVDLevel_7))
N/**
N  * @}
N  */
N
N  
N/** @defgroup PWR_Regulator_state_in_STOP_mode 
N  * @{
N  */
N#define PWR_MainRegulator_ON                        ((uint32_t)0x00000000)
N#define PWR_LowPowerRegulator_ON                    PWR_CR_LPDS
N
N/* --- PWR_Legacy ---*/
N#define PWR_Regulator_ON                            PWR_MainRegulator_ON
N#define PWR_Regulator_LowPower                      PWR_LowPowerRegulator_ON
N
N#define IS_PWR_REGULATOR(REGULATOR) (((REGULATOR) == PWR_MainRegulator_ON) || \
N                                     ((REGULATOR) == PWR_LowPowerRegulator_ON))
X#define IS_PWR_REGULATOR(REGULATOR) (((REGULATOR) == PWR_MainRegulator_ON) ||                                      ((REGULATOR) == PWR_LowPowerRegulator_ON))
N
N/**
N  * @}
N  */
N
N/** @defgroup PWR_Regulator_state_in_UnderDrive_mode 
N  * @{
N  */
N#define PWR_MainRegulator_UnderDrive_ON               PWR_CR_MRUDS
N#define PWR_LowPowerRegulator_UnderDrive_ON           ((uint32_t)(PWR_CR_LPDS | PWR_CR_LPUDS))
N
N#define IS_PWR_REGULATOR_UNDERDRIVE(REGULATOR) (((REGULATOR) == PWR_MainRegulator_UnderDrive_ON) || \
N                                                ((REGULATOR) == PWR_LowPowerRegulator_UnderDrive_ON))
X#define IS_PWR_REGULATOR_UNDERDRIVE(REGULATOR) (((REGULATOR) == PWR_MainRegulator_UnderDrive_ON) ||                                                 ((REGULATOR) == PWR_LowPowerRegulator_UnderDrive_ON))
N
N/**
N  * @}
N  */
N
N/** @defgroup PWR_STOP_mode_entry 
N  * @{
N  */
N#define PWR_STOPEntry_WFI               ((uint8_t)0x01)
N#define PWR_STOPEntry_WFE               ((uint8_t)0x02)
N#define IS_PWR_STOP_ENTRY(ENTRY) (((ENTRY) == PWR_STOPEntry_WFI) || ((ENTRY) == PWR_STOPEntry_WFE))
N/**
N  * @}
N  */
N
N/** @defgroup PWR_Regulator_Voltage_Scale 
N  * @{
N  */
N#define PWR_Regulator_Voltage_Scale1    ((uint32_t)0x0000C000)
N#define PWR_Regulator_Voltage_Scale2    ((uint32_t)0x00008000)
N#define PWR_Regulator_Voltage_Scale3    ((uint32_t)0x00004000)
N#define IS_PWR_REGULATOR_VOLTAGE(VOLTAGE) (((VOLTAGE) == PWR_Regulator_Voltage_Scale1) || \
N                                           ((VOLTAGE) == PWR_Regulator_Voltage_Scale2) || \
N                                           ((VOLTAGE) == PWR_Regulator_Voltage_Scale3))
X#define IS_PWR_REGULATOR_VOLTAGE(VOLTAGE) (((VOLTAGE) == PWR_Regulator_Voltage_Scale1) ||                                            ((VOLTAGE) == PWR_Regulator_Voltage_Scale2) ||                                            ((VOLTAGE) == PWR_Regulator_Voltage_Scale3))
N/**
N  * @}
N  */
N
N/** @defgroup PWR_Flag 
N  * @{
N  */
N#define PWR_FLAG_WU                     PWR_CSR_WUF
N#define PWR_FLAG_SB                     PWR_CSR_SBF
N#define PWR_FLAG_PVDO                   PWR_CSR_PVDO
N#define PWR_FLAG_BRR                    PWR_CSR_BRR
N#define PWR_FLAG_VOSRDY                 PWR_CSR_VOSRDY
N#define PWR_FLAG_ODRDY                  PWR_CSR_ODRDY
N#define PWR_FLAG_ODSWRDY                PWR_CSR_ODSWRDY
N#define PWR_FLAG_UDRDY                  PWR_CSR_UDSWRDY
N
N/* --- FLAG Legacy ---*/
N#define PWR_FLAG_REGRDY                  PWR_FLAG_VOSRDY               
N
N#define IS_PWR_GET_FLAG(FLAG) (((FLAG) == PWR_FLAG_WU) || ((FLAG) == PWR_FLAG_SB) || \
N                               ((FLAG) == PWR_FLAG_PVDO) || ((FLAG) == PWR_FLAG_BRR) || \
N                               ((FLAG) == PWR_FLAG_VOSRDY) || ((FLAG) == PWR_FLAG_ODRDY) || \
N                               ((FLAG) == PWR_FLAG_ODSWRDY) || ((FLAG) == PWR_FLAG_UDRDY))
X#define IS_PWR_GET_FLAG(FLAG) (((FLAG) == PWR_FLAG_WU) || ((FLAG) == PWR_FLAG_SB) ||                                ((FLAG) == PWR_FLAG_PVDO) || ((FLAG) == PWR_FLAG_BRR) ||                                ((FLAG) == PWR_FLAG_VOSRDY) || ((FLAG) == PWR_FLAG_ODRDY) ||                                ((FLAG) == PWR_FLAG_ODSWRDY) || ((FLAG) == PWR_FLAG_UDRDY))
N
N
N#define IS_PWR_CLEAR_FLAG(FLAG) (((FLAG) == PWR_FLAG_WU) || ((FLAG) == PWR_FLAG_SB) || \
N                                 ((FLAG) == PWR_FLAG_UDRDY))
X#define IS_PWR_CLEAR_FLAG(FLAG) (((FLAG) == PWR_FLAG_WU) || ((FLAG) == PWR_FLAG_SB) ||                                  ((FLAG) == PWR_FLAG_UDRDY))
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/ 
N
N/* Function used to set the PWR configuration to the default reset state ******/ 
Nvoid PWR_DeInit(void);
N
N/* Backup Domain Access function **********************************************/ 
Nvoid PWR_BackupAccessCmd(FunctionalState NewState);
N
N/* PVD configuration functions ************************************************/ 
Nvoid PWR_PVDLevelConfig(uint32_t PWR_PVDLevel);
Nvoid PWR_PVDCmd(FunctionalState NewState);
N
N/* WakeUp pins configuration functions ****************************************/ 
Nvoid PWR_WakeUpPinCmd(FunctionalState NewState);
N
N/* Main and Backup Regulators configuration functions *************************/ 
Nvoid PWR_BackupRegulatorCmd(FunctionalState NewState);
Nvoid PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage);
Nvoid PWR_OverDriveCmd(FunctionalState NewState);
Nvoid PWR_OverDriveSWCmd(FunctionalState NewState);
Nvoid PWR_UnderDriveCmd(FunctionalState NewState);
N
N/* FLASH Power Down configuration functions ***********************************/ 
Nvoid PWR_FlashPowerDownCmd(FunctionalState NewState);
N
N/* Low Power modes configuration functions ************************************/ 
Nvoid PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry);
Nvoid PWR_EnterUnderDriveSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry);
Nvoid PWR_EnterSTANDBYMode(void);
N
N/* Flags management functions *************************************************/ 
NFlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG);
Nvoid PWR_ClearFlag(uint32_t PWR_FLAG);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32F4xx_PWR_H */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 61 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_rcc.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_rcc.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_rcc.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the RCC firmware library.  
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_RCC_H
N#define __STM32F4xx_RCC_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup RCC
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/
Ntypedef struct
N{
N  uint32_t SYSCLK_Frequency; /*!<  SYSCLK clock frequency expressed in Hz */
N  uint32_t HCLK_Frequency;   /*!<  HCLK clock frequency expressed in Hz   */
N  uint32_t PCLK1_Frequency;  /*!<  PCLK1 clock frequency expressed in Hz  */
N  uint32_t PCLK2_Frequency;  /*!<  PCLK2 clock frequency expressed in Hz  */
N}RCC_ClocksTypeDef;
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup RCC_Exported_Constants
N  * @{
N  */
N  
N/** @defgroup RCC_HSE_configuration 
N  * @{
N  */
N#define RCC_HSE_OFF                      ((uint8_t)0x00)
N#define RCC_HSE_ON                       ((uint8_t)0x01)
N#define RCC_HSE_Bypass                   ((uint8_t)0x05)
N#define IS_RCC_HSE(HSE) (((HSE) == RCC_HSE_OFF) || ((HSE) == RCC_HSE_ON) || \
N                         ((HSE) == RCC_HSE_Bypass))
X#define IS_RCC_HSE(HSE) (((HSE) == RCC_HSE_OFF) || ((HSE) == RCC_HSE_ON) ||                          ((HSE) == RCC_HSE_Bypass))
N/**
N  * @}
N  */ 
N  
N/** @defgroup RCC_PLL_Clock_Source 
N  * @{
N  */
N#define RCC_PLLSource_HSI                ((uint32_t)0x00000000)
N#define RCC_PLLSource_HSE                ((uint32_t)0x00400000)
N#define IS_RCC_PLL_SOURCE(SOURCE) (((SOURCE) == RCC_PLLSource_HSI) || \
N                                   ((SOURCE) == RCC_PLLSource_HSE))
X#define IS_RCC_PLL_SOURCE(SOURCE) (((SOURCE) == RCC_PLLSource_HSI) ||                                    ((SOURCE) == RCC_PLLSource_HSE))
N#define IS_RCC_PLLM_VALUE(VALUE) ((VALUE) <= 63)
N#define IS_RCC_PLLN_VALUE(VALUE) ((192 <= (VALUE)) && ((VALUE) <= 432))
N#define IS_RCC_PLLP_VALUE(VALUE) (((VALUE) == 2) || ((VALUE) == 4) || ((VALUE) == 6) || ((VALUE) == 8))
N#define IS_RCC_PLLQ_VALUE(VALUE) ((4 <= (VALUE)) && ((VALUE) <= 15))
N 
N#define IS_RCC_PLLI2SN_VALUE(VALUE) ((192 <= (VALUE)) && ((VALUE) <= 432))
N#define IS_RCC_PLLI2SR_VALUE(VALUE) ((2 <= (VALUE)) && ((VALUE) <= 7))  
N
N#define IS_RCC_PLLI2SQ_VALUE(VALUE) ((2 <= (VALUE)) && ((VALUE) <= 15))
N#define IS_RCC_PLLSAIN_VALUE(VALUE) ((192 <= (VALUE)) && ((VALUE) <= 432))
N#define IS_RCC_PLLSAIQ_VALUE(VALUE) ((2 <= (VALUE)) && ((VALUE) <= 15))
N#define IS_RCC_PLLSAIR_VALUE(VALUE) ((2 <= (VALUE)) && ((VALUE) <= 7))  
N
N#define IS_RCC_PLLSAI_DIVQ_VALUE(VALUE) ((1 <= (VALUE)) && ((VALUE) <= 32))
N#define IS_RCC_PLLI2S_DIVQ_VALUE(VALUE) ((1 <= (VALUE)) && ((VALUE) <= 32))
N
N#define RCC_PLLSAIDivR_Div2                ((uint32_t)0x00000000)
N#define RCC_PLLSAIDivR_Div4                ((uint32_t)0x00010000)
N#define RCC_PLLSAIDivR_Div8                ((uint32_t)0x00020000)
N#define RCC_PLLSAIDivR_Div16               ((uint32_t)0x00030000)
N#define IS_RCC_PLLSAI_DIVR_VALUE(VALUE) (((VALUE) == RCC_PLLSAIDivR_Div2) ||\
N                                        ((VALUE) == RCC_PLLSAIDivR_Div4)  ||\
N                                        ((VALUE) == RCC_PLLSAIDivR_Div8)  ||\
N                                        ((VALUE) == RCC_PLLSAIDivR_Div16))
X#define IS_RCC_PLLSAI_DIVR_VALUE(VALUE) (((VALUE) == RCC_PLLSAIDivR_Div2) ||                                        ((VALUE) == RCC_PLLSAIDivR_Div4)  ||                                        ((VALUE) == RCC_PLLSAIDivR_Div8)  ||                                        ((VALUE) == RCC_PLLSAIDivR_Div16))
N 
N/**                                                                     
N  * @}
N  */ 
N  
N/** @defgroup RCC_System_Clock_Source 
N  * @{
N  */
N#define RCC_SYSCLKSource_HSI             ((uint32_t)0x00000000)
N#define RCC_SYSCLKSource_HSE             ((uint32_t)0x00000001)
N#define RCC_SYSCLKSource_PLLCLK          ((uint32_t)0x00000002)
N#define IS_RCC_SYSCLK_SOURCE(SOURCE) (((SOURCE) == RCC_SYSCLKSource_HSI) || \
N                                      ((SOURCE) == RCC_SYSCLKSource_HSE) || \
N                                      ((SOURCE) == RCC_SYSCLKSource_PLLCLK))
X#define IS_RCC_SYSCLK_SOURCE(SOURCE) (((SOURCE) == RCC_SYSCLKSource_HSI) ||                                       ((SOURCE) == RCC_SYSCLKSource_HSE) ||                                       ((SOURCE) == RCC_SYSCLKSource_PLLCLK))
N/**
N  * @}
N  */ 
N  
N/** @defgroup RCC_AHB_Clock_Source
N  * @{
N  */
N#define RCC_SYSCLK_Div1                  ((uint32_t)0x00000000)
N#define RCC_SYSCLK_Div2                  ((uint32_t)0x00000080)
N#define RCC_SYSCLK_Div4                  ((uint32_t)0x00000090)
N#define RCC_SYSCLK_Div8                  ((uint32_t)0x000000A0)
N#define RCC_SYSCLK_Div16                 ((uint32_t)0x000000B0)
N#define RCC_SYSCLK_Div64                 ((uint32_t)0x000000C0)
N#define RCC_SYSCLK_Div128                ((uint32_t)0x000000D0)
N#define RCC_SYSCLK_Div256                ((uint32_t)0x000000E0)
N#define RCC_SYSCLK_Div512                ((uint32_t)0x000000F0)
N#define IS_RCC_HCLK(HCLK) (((HCLK) == RCC_SYSCLK_Div1) || ((HCLK) == RCC_SYSCLK_Div2) || \
N                           ((HCLK) == RCC_SYSCLK_Div4) || ((HCLK) == RCC_SYSCLK_Div8) || \
N                           ((HCLK) == RCC_SYSCLK_Div16) || ((HCLK) == RCC_SYSCLK_Div64) || \
N                           ((HCLK) == RCC_SYSCLK_Div128) || ((HCLK) == RCC_SYSCLK_Div256) || \
N                           ((HCLK) == RCC_SYSCLK_Div512))
X#define IS_RCC_HCLK(HCLK) (((HCLK) == RCC_SYSCLK_Div1) || ((HCLK) == RCC_SYSCLK_Div2) ||                            ((HCLK) == RCC_SYSCLK_Div4) || ((HCLK) == RCC_SYSCLK_Div8) ||                            ((HCLK) == RCC_SYSCLK_Div16) || ((HCLK) == RCC_SYSCLK_Div64) ||                            ((HCLK) == RCC_SYSCLK_Div128) || ((HCLK) == RCC_SYSCLK_Div256) ||                            ((HCLK) == RCC_SYSCLK_Div512))
N/**
N  * @}
N  */ 
N  
N/** @defgroup RCC_APB1_APB2_Clock_Source
N  * @{
N  */
N#define RCC_HCLK_Div1                    ((uint32_t)0x00000000)
N#define RCC_HCLK_Div2                    ((uint32_t)0x00001000)
N#define RCC_HCLK_Div4                    ((uint32_t)0x00001400)
N#define RCC_HCLK_Div8                    ((uint32_t)0x00001800)
N#define RCC_HCLK_Div16                   ((uint32_t)0x00001C00)
N#define IS_RCC_PCLK(PCLK) (((PCLK) == RCC_HCLK_Div1) || ((PCLK) == RCC_HCLK_Div2) || \
N                           ((PCLK) == RCC_HCLK_Div4) || ((PCLK) == RCC_HCLK_Div8) || \
N                           ((PCLK) == RCC_HCLK_Div16))
X#define IS_RCC_PCLK(PCLK) (((PCLK) == RCC_HCLK_Div1) || ((PCLK) == RCC_HCLK_Div2) ||                            ((PCLK) == RCC_HCLK_Div4) || ((PCLK) == RCC_HCLK_Div8) ||                            ((PCLK) == RCC_HCLK_Div16))
N/**
N  * @}
N  */ 
N  
N/** @defgroup RCC_Interrupt_Source 
N  * @{
N  */
N#define RCC_IT_LSIRDY                    ((uint8_t)0x01)
N#define RCC_IT_LSERDY                    ((uint8_t)0x02)
N#define RCC_IT_HSIRDY                    ((uint8_t)0x04)
N#define RCC_IT_HSERDY                    ((uint8_t)0x08)
N#define RCC_IT_PLLRDY                    ((uint8_t)0x10)
N#define RCC_IT_PLLI2SRDY                 ((uint8_t)0x20) 
N#define RCC_IT_PLLSAIRDY                 ((uint8_t)0x40)
N#define RCC_IT_CSS                       ((uint8_t)0x80)
N
N#define IS_RCC_IT(IT) ((((IT) & (uint8_t)0x80) == 0x00) && ((IT) != 0x00))
N#define IS_RCC_GET_IT(IT) (((IT) == RCC_IT_LSIRDY) || ((IT) == RCC_IT_LSERDY) || \
N                           ((IT) == RCC_IT_HSIRDY) || ((IT) == RCC_IT_HSERDY) || \
N                           ((IT) == RCC_IT_PLLRDY) || ((IT) == RCC_IT_CSS) || \
N                           ((IT) == RCC_IT_PLLSAIRDY) || ((IT) == RCC_IT_PLLI2SRDY))
X#define IS_RCC_GET_IT(IT) (((IT) == RCC_IT_LSIRDY) || ((IT) == RCC_IT_LSERDY) ||                            ((IT) == RCC_IT_HSIRDY) || ((IT) == RCC_IT_HSERDY) ||                            ((IT) == RCC_IT_PLLRDY) || ((IT) == RCC_IT_CSS) ||                            ((IT) == RCC_IT_PLLSAIRDY) || ((IT) == RCC_IT_PLLI2SRDY))
N#define IS_RCC_CLEAR_IT(IT)((IT) != 0x00)
N
N/**
N  * @}
N  */ 
N  
N/** @defgroup RCC_LSE_Configuration 
N  * @{
N  */
N#define RCC_LSE_OFF                      ((uint8_t)0x00)
N#define RCC_LSE_ON                       ((uint8_t)0x01)
N#define RCC_LSE_Bypass                   ((uint8_t)0x04)
N#define IS_RCC_LSE(LSE) (((LSE) == RCC_LSE_OFF) || ((LSE) == RCC_LSE_ON) || \
N                         ((LSE) == RCC_LSE_Bypass))
X#define IS_RCC_LSE(LSE) (((LSE) == RCC_LSE_OFF) || ((LSE) == RCC_LSE_ON) ||                          ((LSE) == RCC_LSE_Bypass))
N/**
N  * @}
N  */ 
N  
N/** @defgroup RCC_RTC_Clock_Source
N  * @{
N  */
N#define RCC_RTCCLKSource_LSE             ((uint32_t)0x00000100)
N#define RCC_RTCCLKSource_LSI             ((uint32_t)0x00000200)
N#define RCC_RTCCLKSource_HSE_Div2        ((uint32_t)0x00020300)
N#define RCC_RTCCLKSource_HSE_Div3        ((uint32_t)0x00030300)
N#define RCC_RTCCLKSource_HSE_Div4        ((uint32_t)0x00040300)
N#define RCC_RTCCLKSource_HSE_Div5        ((uint32_t)0x00050300)
N#define RCC_RTCCLKSource_HSE_Div6        ((uint32_t)0x00060300)
N#define RCC_RTCCLKSource_HSE_Div7        ((uint32_t)0x00070300)
N#define RCC_RTCCLKSource_HSE_Div8        ((uint32_t)0x00080300)
N#define RCC_RTCCLKSource_HSE_Div9        ((uint32_t)0x00090300)
N#define RCC_RTCCLKSource_HSE_Div10       ((uint32_t)0x000A0300)
N#define RCC_RTCCLKSource_HSE_Div11       ((uint32_t)0x000B0300)
N#define RCC_RTCCLKSource_HSE_Div12       ((uint32_t)0x000C0300)
N#define RCC_RTCCLKSource_HSE_Div13       ((uint32_t)0x000D0300)
N#define RCC_RTCCLKSource_HSE_Div14       ((uint32_t)0x000E0300)
N#define RCC_RTCCLKSource_HSE_Div15       ((uint32_t)0x000F0300)
N#define RCC_RTCCLKSource_HSE_Div16       ((uint32_t)0x00100300)
N#define RCC_RTCCLKSource_HSE_Div17       ((uint32_t)0x00110300)
N#define RCC_RTCCLKSource_HSE_Div18       ((uint32_t)0x00120300)
N#define RCC_RTCCLKSource_HSE_Div19       ((uint32_t)0x00130300)
N#define RCC_RTCCLKSource_HSE_Div20       ((uint32_t)0x00140300)
N#define RCC_RTCCLKSource_HSE_Div21       ((uint32_t)0x00150300)
N#define RCC_RTCCLKSource_HSE_Div22       ((uint32_t)0x00160300)
N#define RCC_RTCCLKSource_HSE_Div23       ((uint32_t)0x00170300)
N#define RCC_RTCCLKSource_HSE_Div24       ((uint32_t)0x00180300)
N#define RCC_RTCCLKSource_HSE_Div25       ((uint32_t)0x00190300)
N#define RCC_RTCCLKSource_HSE_Div26       ((uint32_t)0x001A0300)
N#define RCC_RTCCLKSource_HSE_Div27       ((uint32_t)0x001B0300)
N#define RCC_RTCCLKSource_HSE_Div28       ((uint32_t)0x001C0300)
N#define RCC_RTCCLKSource_HSE_Div29       ((uint32_t)0x001D0300)
N#define RCC_RTCCLKSource_HSE_Div30       ((uint32_t)0x001E0300)
N#define RCC_RTCCLKSource_HSE_Div31       ((uint32_t)0x001F0300)
N#define IS_RCC_RTCCLK_SOURCE(SOURCE) (((SOURCE) == RCC_RTCCLKSource_LSE) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_LSI) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div2) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div3) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div4) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div5) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div6) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div7) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div8) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div9) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div10) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div11) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div12) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div13) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div14) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div15) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div16) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div17) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div18) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div19) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div20) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div21) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div22) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div23) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div24) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div25) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div26) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div27) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div28) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div29) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div30) || \
N                                      ((SOURCE) == RCC_RTCCLKSource_HSE_Div31))
X#define IS_RCC_RTCCLK_SOURCE(SOURCE) (((SOURCE) == RCC_RTCCLKSource_LSE) ||                                       ((SOURCE) == RCC_RTCCLKSource_LSI) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div2) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div3) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div4) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div5) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div6) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div7) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div8) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div9) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div10) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div11) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div12) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div13) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div14) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div15) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div16) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div17) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div18) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div19) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div20) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div21) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div22) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div23) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div24) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div25) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div26) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div27) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div28) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div29) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div30) ||                                       ((SOURCE) == RCC_RTCCLKSource_HSE_Div31))
N/**
N  * @}
N  */ 
N  
N/** @defgroup RCC_I2S_Clock_Source
N  * @{
N  */
N#define RCC_I2S2CLKSource_PLLI2S             ((uint8_t)0x00)
N#define RCC_I2S2CLKSource_Ext                ((uint8_t)0x01)
N
N#define IS_RCC_I2SCLK_SOURCE(SOURCE) (((SOURCE) == RCC_I2S2CLKSource_PLLI2S) || ((SOURCE) == RCC_I2S2CLKSource_Ext))                                
N/**
N  * @}
N  */ 
N
N/** @defgroup RCC_SAI_BlockA_Clock_Source
N  * @{
N  */
N#define RCC_SAIACLKSource_PLLSAI             ((uint32_t)0x00000000)
N#define RCC_SAIACLKSource_PLLI2S             ((uint32_t)0x00100000)
N#define RCC_SAIACLKSource_Ext                ((uint32_t)0x00200000)
N
N#define IS_RCC_SAIACLK_SOURCE(SOURCE) (((SOURCE) == RCC_SAIACLKSource_PLLI2S) ||\
N                                       ((SOURCE) == RCC_SAIACLKSource_PLLSAI) ||\
N                                       ((SOURCE) == RCC_SAIACLKSource_Ext))
X#define IS_RCC_SAIACLK_SOURCE(SOURCE) (((SOURCE) == RCC_SAIACLKSource_PLLI2S) ||                                       ((SOURCE) == RCC_SAIACLKSource_PLLSAI) ||                                       ((SOURCE) == RCC_SAIACLKSource_Ext))
N/**
N  * @}
N  */ 
N
N/** @defgroup RCC_SAI_BlockB_Clock_Source
N  * @{
N  */
N#define RCC_SAIBCLKSource_PLLSAI             ((uint32_t)0x00000000)
N#define RCC_SAIBCLKSource_PLLI2S             ((uint32_t)0x00400000)
N#define RCC_SAIBCLKSource_Ext                ((uint32_t)0x00800000)
N
N#define IS_RCC_SAIBCLK_SOURCE(SOURCE) (((SOURCE) == RCC_SAIBCLKSource_PLLI2S) ||\
N                                       ((SOURCE) == RCC_SAIBCLKSource_PLLSAI) ||\
N                                       ((SOURCE) == RCC_SAIBCLKSource_Ext))
X#define IS_RCC_SAIBCLK_SOURCE(SOURCE) (((SOURCE) == RCC_SAIBCLKSource_PLLI2S) ||                                       ((SOURCE) == RCC_SAIBCLKSource_PLLSAI) ||                                       ((SOURCE) == RCC_SAIBCLKSource_Ext))
N/**
N  * @}
N  */ 
N
N/** @defgroup RCC_TIM_PRescaler_Selection
N  * @{
N  */
N#define RCC_TIMPrescDesactivated             ((uint8_t)0x00)
N#define RCC_TIMPrescActivated                ((uint8_t)0x01)
N
N#define IS_RCC_TIMCLK_PRESCALER(VALUE) (((VALUE) == RCC_TIMPrescDesactivated) || ((VALUE) == RCC_TIMPrescActivated))
N/**
N  * @}
N  */
N  
N/** @defgroup RCC_AHB1_Peripherals 
N  * @{
N  */ 
N#define RCC_AHB1Periph_GPIOA             ((uint32_t)0x00000001)
N#define RCC_AHB1Periph_GPIOB             ((uint32_t)0x00000002)
N#define RCC_AHB1Periph_GPIOC             ((uint32_t)0x00000004)
N#define RCC_AHB1Periph_GPIOD             ((uint32_t)0x00000008)
N#define RCC_AHB1Periph_GPIOE             ((uint32_t)0x00000010)
N#define RCC_AHB1Periph_GPIOF             ((uint32_t)0x00000020)
N#define RCC_AHB1Periph_GPIOG             ((uint32_t)0x00000040)
N#define RCC_AHB1Periph_GPIOH             ((uint32_t)0x00000080)
N#define RCC_AHB1Periph_GPIOI             ((uint32_t)0x00000100) 
N#define RCC_AHB1Periph_GPIOJ             ((uint32_t)0x00000200)
N#define RCC_AHB1Periph_GPIOK             ((uint32_t)0x00000400)
N#define RCC_AHB1Periph_CRC               ((uint32_t)0x00001000)
N#define RCC_AHB1Periph_FLITF             ((uint32_t)0x00008000)
N#define RCC_AHB1Periph_SRAM1             ((uint32_t)0x00010000)
N#define RCC_AHB1Periph_SRAM2             ((uint32_t)0x00020000)
N#define RCC_AHB1Periph_BKPSRAM           ((uint32_t)0x00040000)
N#define RCC_AHB1Periph_SRAM3             ((uint32_t)0x00080000)
N#define RCC_AHB1Periph_CCMDATARAMEN      ((uint32_t)0x00100000)
N#define RCC_AHB1Periph_DMA1              ((uint32_t)0x00200000)
N#define RCC_AHB1Periph_DMA2              ((uint32_t)0x00400000)
N#define RCC_AHB1Periph_DMA2D             ((uint32_t)0x00800000)
N#define RCC_AHB1Periph_ETH_MAC           ((uint32_t)0x02000000)
N#define RCC_AHB1Periph_ETH_MAC_Tx        ((uint32_t)0x04000000)
N#define RCC_AHB1Periph_ETH_MAC_Rx        ((uint32_t)0x08000000)
N#define RCC_AHB1Periph_ETH_MAC_PTP       ((uint32_t)0x10000000)
N#define RCC_AHB1Periph_OTG_HS            ((uint32_t)0x20000000)
N#define RCC_AHB1Periph_OTG_HS_ULPI       ((uint32_t)0x40000000)
N
N#define IS_RCC_AHB1_CLOCK_PERIPH(PERIPH) ((((PERIPH) & 0x810BE800) == 0x00) && ((PERIPH) != 0x00))
N#define IS_RCC_AHB1_RESET_PERIPH(PERIPH) ((((PERIPH) & 0xDD1FE800) == 0x00) && ((PERIPH) != 0x00))
N#define IS_RCC_AHB1_LPMODE_PERIPH(PERIPH) ((((PERIPH) & 0x81106800) == 0x00) && ((PERIPH) != 0x00))
N
N/**
N  * @}
N  */ 
N  
N/** @defgroup RCC_AHB2_Peripherals 
N  * @{
N  */  
N#define RCC_AHB2Periph_DCMI              ((uint32_t)0x00000001)
N#define RCC_AHB2Periph_CRYP              ((uint32_t)0x00000010)
N#define RCC_AHB2Periph_HASH              ((uint32_t)0x00000020)
N#define RCC_AHB2Periph_RNG               ((uint32_t)0x00000040)
N#define RCC_AHB2Periph_OTG_FS            ((uint32_t)0x00000080)
N#define IS_RCC_AHB2_PERIPH(PERIPH) ((((PERIPH) & 0xFFFFFF0E) == 0x00) && ((PERIPH) != 0x00))
N/**
N  * @}
N  */ 
N  
N/** @defgroup RCC_AHB3_Peripherals 
N  * @{
N  */ 
N#if defined (STM32F40_41xxx)
X#if 1L
N#define RCC_AHB3Periph_FSMC                ((uint32_t)0x00000001)
N#endif /* STM32F40_41xxx */
N
N#if defined (STM32F427_437xx) || defined (STM32F429_439xx) 
X#if 0L || 0L 
S#define RCC_AHB3Periph_FMC                ((uint32_t)0x00000001)
N#endif /* STM32F427_437xx ||  STM32F429_439xx */
N
N#define IS_RCC_AHB3_PERIPH(PERIPH) ((((PERIPH) & 0xFFFFFFFE) == 0x00) && ((PERIPH) != 0x00))
N/**
N  * @}
N  */ 
N  
N/** @defgroup RCC_APB1_Peripherals 
N  * @{
N  */ 
N#define RCC_APB1Periph_TIM2              ((uint32_t)0x00000001)
N#define RCC_APB1Periph_TIM3              ((uint32_t)0x00000002)
N#define RCC_APB1Periph_TIM4              ((uint32_t)0x00000004)
N#define RCC_APB1Periph_TIM5              ((uint32_t)0x00000008)
N#define RCC_APB1Periph_TIM6              ((uint32_t)0x00000010)
N#define RCC_APB1Periph_TIM7              ((uint32_t)0x00000020)
N#define RCC_APB1Periph_TIM12             ((uint32_t)0x00000040)
N#define RCC_APB1Periph_TIM13             ((uint32_t)0x00000080)
N#define RCC_APB1Periph_TIM14             ((uint32_t)0x00000100)
N#define RCC_APB1Periph_WWDG              ((uint32_t)0x00000800)
N#define RCC_APB1Periph_SPI2              ((uint32_t)0x00004000)
N#define RCC_APB1Periph_SPI3              ((uint32_t)0x00008000)
N#define RCC_APB1Periph_USART2            ((uint32_t)0x00020000)
N#define RCC_APB1Periph_USART3            ((uint32_t)0x00040000)
N#define RCC_APB1Periph_UART4             ((uint32_t)0x00080000)
N#define RCC_APB1Periph_UART5             ((uint32_t)0x00100000)
N#define RCC_APB1Periph_I2C1              ((uint32_t)0x00200000)
N#define RCC_APB1Periph_I2C2              ((uint32_t)0x00400000)
N#define RCC_APB1Periph_I2C3              ((uint32_t)0x00800000)
N#define RCC_APB1Periph_CAN1              ((uint32_t)0x02000000)
N#define RCC_APB1Periph_CAN2              ((uint32_t)0x04000000)
N#define RCC_APB1Periph_PWR               ((uint32_t)0x10000000)
N#define RCC_APB1Periph_DAC               ((uint32_t)0x20000000)
N#define RCC_APB1Periph_UART7             ((uint32_t)0x40000000)
N#define RCC_APB1Periph_UART8             ((uint32_t)0x80000000)
N#define IS_RCC_APB1_PERIPH(PERIPH) ((((PERIPH) & 0x09013600) == 0x00) && ((PERIPH) != 0x00))
N/**
N  * @}
N  */ 
N  
N/** @defgroup RCC_APB2_Peripherals 
N  * @{
N  */ 
N#define RCC_APB2Periph_TIM1              ((uint32_t)0x00000001)
N#define RCC_APB2Periph_TIM8              ((uint32_t)0x00000002)
N#define RCC_APB2Periph_USART1            ((uint32_t)0x00000010)
N#define RCC_APB2Periph_USART6            ((uint32_t)0x00000020)
N#define RCC_APB2Periph_ADC               ((uint32_t)0x00000100)
N#define RCC_APB2Periph_ADC1              ((uint32_t)0x00000100)
N#define RCC_APB2Periph_ADC2              ((uint32_t)0x00000200)
N#define RCC_APB2Periph_ADC3              ((uint32_t)0x00000400)
N#define RCC_APB2Periph_SDIO              ((uint32_t)0x00000800)
N#define RCC_APB2Periph_SPI1              ((uint32_t)0x00001000)
N#define RCC_APB2Periph_SPI4              ((uint32_t)0x00002000)
N#define RCC_APB2Periph_SYSCFG            ((uint32_t)0x00004000)
N#define RCC_APB2Periph_TIM9              ((uint32_t)0x00010000)
N#define RCC_APB2Periph_TIM10             ((uint32_t)0x00020000)
N#define RCC_APB2Periph_TIM11             ((uint32_t)0x00040000)
N#define RCC_APB2Periph_SPI5              ((uint32_t)0x00100000)
N#define RCC_APB2Periph_SPI6              ((uint32_t)0x00200000)
N#define RCC_APB2Periph_SAI1              ((uint32_t)0x00400000)
N#define RCC_APB2Periph_LTDC              ((uint32_t)0x04000000)
N
N#define IS_RCC_APB2_PERIPH(PERIPH) ((((PERIPH) & 0xFB8880CC) == 0x00) && ((PERIPH) != 0x00))
N#define IS_RCC_APB2_RESET_PERIPH(PERIPH) ((((PERIPH) & 0xFB8886CC) == 0x00) && ((PERIPH) != 0x00))
N
N/**
N  * @}
N  */ 
N  
N/** @defgroup RCC_MCO1_Clock_Source_Prescaler
N  * @{
N  */
N#define RCC_MCO1Source_HSI               ((uint32_t)0x00000000)
N#define RCC_MCO1Source_LSE               ((uint32_t)0x00200000)
N#define RCC_MCO1Source_HSE               ((uint32_t)0x00400000)
N#define RCC_MCO1Source_PLLCLK            ((uint32_t)0x00600000)
N#define RCC_MCO1Div_1                    ((uint32_t)0x00000000)
N#define RCC_MCO1Div_2                    ((uint32_t)0x04000000)
N#define RCC_MCO1Div_3                    ((uint32_t)0x05000000)
N#define RCC_MCO1Div_4                    ((uint32_t)0x06000000)
N#define RCC_MCO1Div_5                    ((uint32_t)0x07000000)
N#define IS_RCC_MCO1SOURCE(SOURCE) (((SOURCE) == RCC_MCO1Source_HSI) || ((SOURCE) == RCC_MCO1Source_LSE) || \
N                                   ((SOURCE) == RCC_MCO1Source_HSE) || ((SOURCE) == RCC_MCO1Source_PLLCLK))
X#define IS_RCC_MCO1SOURCE(SOURCE) (((SOURCE) == RCC_MCO1Source_HSI) || ((SOURCE) == RCC_MCO1Source_LSE) ||                                    ((SOURCE) == RCC_MCO1Source_HSE) || ((SOURCE) == RCC_MCO1Source_PLLCLK))
N                                   
N#define IS_RCC_MCO1DIV(DIV) (((DIV) == RCC_MCO1Div_1) || ((DIV) == RCC_MCO1Div_2) || \
N                             ((DIV) == RCC_MCO1Div_3) || ((DIV) == RCC_MCO1Div_4) || \
N                             ((DIV) == RCC_MCO1Div_5)) 
X#define IS_RCC_MCO1DIV(DIV) (((DIV) == RCC_MCO1Div_1) || ((DIV) == RCC_MCO1Div_2) ||                              ((DIV) == RCC_MCO1Div_3) || ((DIV) == RCC_MCO1Div_4) ||                              ((DIV) == RCC_MCO1Div_5)) 
N/**
N  * @}
N  */ 
N  
N/** @defgroup RCC_MCO2_Clock_Source_Prescaler
N  * @{
N  */
N#define RCC_MCO2Source_SYSCLK            ((uint32_t)0x00000000)
N#define RCC_MCO2Source_PLLI2SCLK         ((uint32_t)0x40000000)
N#define RCC_MCO2Source_HSE               ((uint32_t)0x80000000)
N#define RCC_MCO2Source_PLLCLK            ((uint32_t)0xC0000000)
N#define RCC_MCO2Div_1                    ((uint32_t)0x00000000)
N#define RCC_MCO2Div_2                    ((uint32_t)0x20000000)
N#define RCC_MCO2Div_3                    ((uint32_t)0x28000000)
N#define RCC_MCO2Div_4                    ((uint32_t)0x30000000)
N#define RCC_MCO2Div_5                    ((uint32_t)0x38000000)
N#define IS_RCC_MCO2SOURCE(SOURCE) (((SOURCE) == RCC_MCO2Source_SYSCLK) || ((SOURCE) == RCC_MCO2Source_PLLI2SCLK)|| \
N                                   ((SOURCE) == RCC_MCO2Source_HSE) || ((SOURCE) == RCC_MCO2Source_PLLCLK))
X#define IS_RCC_MCO2SOURCE(SOURCE) (((SOURCE) == RCC_MCO2Source_SYSCLK) || ((SOURCE) == RCC_MCO2Source_PLLI2SCLK)||                                    ((SOURCE) == RCC_MCO2Source_HSE) || ((SOURCE) == RCC_MCO2Source_PLLCLK))
N                                   
N#define IS_RCC_MCO2DIV(DIV) (((DIV) == RCC_MCO2Div_1) || ((DIV) == RCC_MCO2Div_2) || \
N                             ((DIV) == RCC_MCO2Div_3) || ((DIV) == RCC_MCO2Div_4) || \
N                             ((DIV) == RCC_MCO2Div_5))                             
X#define IS_RCC_MCO2DIV(DIV) (((DIV) == RCC_MCO2Div_1) || ((DIV) == RCC_MCO2Div_2) ||                              ((DIV) == RCC_MCO2Div_3) || ((DIV) == RCC_MCO2Div_4) ||                              ((DIV) == RCC_MCO2Div_5))                             
N/**
N  * @}
N  */ 
N  
N/** @defgroup RCC_Flag 
N  * @{
N  */
N#define RCC_FLAG_HSIRDY                  ((uint8_t)0x21)
N#define RCC_FLAG_HSERDY                  ((uint8_t)0x31)
N#define RCC_FLAG_PLLRDY                  ((uint8_t)0x39)
N#define RCC_FLAG_PLLI2SRDY               ((uint8_t)0x3B)
N#define RCC_FLAG_PLLSAIRDY               ((uint8_t)0x3D)
N#define RCC_FLAG_LSERDY                  ((uint8_t)0x41)
N#define RCC_FLAG_LSIRDY                  ((uint8_t)0x61)
N#define RCC_FLAG_BORRST                  ((uint8_t)0x79)
N#define RCC_FLAG_PINRST                  ((uint8_t)0x7A)
N#define RCC_FLAG_PORRST                  ((uint8_t)0x7B)
N#define RCC_FLAG_SFTRST                  ((uint8_t)0x7C)
N#define RCC_FLAG_IWDGRST                 ((uint8_t)0x7D)
N#define RCC_FLAG_WWDGRST                 ((uint8_t)0x7E)
N#define RCC_FLAG_LPWRRST                 ((uint8_t)0x7F)
N
N#define IS_RCC_FLAG(FLAG) (((FLAG) == RCC_FLAG_HSIRDY)   || ((FLAG) == RCC_FLAG_HSERDY) || \
N                           ((FLAG) == RCC_FLAG_PLLRDY)   || ((FLAG) == RCC_FLAG_LSERDY) || \
N                           ((FLAG) == RCC_FLAG_LSIRDY)   || ((FLAG) == RCC_FLAG_BORRST) || \
N                           ((FLAG) == RCC_FLAG_PINRST)   || ((FLAG) == RCC_FLAG_PORRST) || \
N                           ((FLAG) == RCC_FLAG_SFTRST)   || ((FLAG) == RCC_FLAG_IWDGRST)|| \
N                           ((FLAG) == RCC_FLAG_WWDGRST)  || ((FLAG) == RCC_FLAG_LPWRRST)|| \
N                           ((FLAG) == RCC_FLAG_PLLI2SRDY)|| ((FLAG) == RCC_FLAG_PLLSAIRDY))
X#define IS_RCC_FLAG(FLAG) (((FLAG) == RCC_FLAG_HSIRDY)   || ((FLAG) == RCC_FLAG_HSERDY) ||                            ((FLAG) == RCC_FLAG_PLLRDY)   || ((FLAG) == RCC_FLAG_LSERDY) ||                            ((FLAG) == RCC_FLAG_LSIRDY)   || ((FLAG) == RCC_FLAG_BORRST) ||                            ((FLAG) == RCC_FLAG_PINRST)   || ((FLAG) == RCC_FLAG_PORRST) ||                            ((FLAG) == RCC_FLAG_SFTRST)   || ((FLAG) == RCC_FLAG_IWDGRST)||                            ((FLAG) == RCC_FLAG_WWDGRST)  || ((FLAG) == RCC_FLAG_LPWRRST)||                            ((FLAG) == RCC_FLAG_PLLI2SRDY)|| ((FLAG) == RCC_FLAG_PLLSAIRDY))
N
N#define IS_RCC_CALIBRATION_VALUE(VALUE) ((VALUE) <= 0x1F)
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/ 
N
N/* Function used to set the RCC clock configuration to the default reset state */
Nvoid RCC_DeInit(void);
N
N/* Internal/external clocks, PLL, CSS and MCO configuration functions *********/
Nvoid        RCC_HSEConfig(uint8_t RCC_HSE);
NErrorStatus RCC_WaitForHSEStartUp(void);
Nvoid        RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue);
Nvoid        RCC_HSICmd(FunctionalState NewState);
Nvoid        RCC_LSEConfig(uint8_t RCC_LSE);
Nvoid        RCC_LSICmd(FunctionalState NewState);
Nvoid        RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ);
Nvoid        RCC_PLLCmd(FunctionalState NewState);
N
N#if defined (STM32F40_41xxx) || defined (STM32F401xx)
X#if 1L || 0L
Nvoid        RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR);
N#endif /* STM32F40_41xxx || STM32F401xx */
N
N#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
X#if 0L || 0L
Svoid        RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR);
N#endif /* STM32F41_43xxx */
N
Nvoid        RCC_PLLI2SCmd(FunctionalState NewState);
Nvoid        RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR);
Nvoid        RCC_PLLSAICmd(FunctionalState NewState);
Nvoid        RCC_ClockSecuritySystemCmd(FunctionalState NewState);
Nvoid        RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div);
Nvoid        RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div);
N
N/* System, AHB and APB busses clocks configuration functions ******************/
Nvoid        RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource);
Nuint8_t     RCC_GetSYSCLKSource(void);
Nvoid        RCC_HCLKConfig(uint32_t RCC_SYSCLK);
Nvoid        RCC_PCLK1Config(uint32_t RCC_HCLK);
Nvoid        RCC_PCLK2Config(uint32_t RCC_HCLK);
Nvoid        RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks);
N
N/* Peripheral clocks configuration functions **********************************/
Nvoid        RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource);
Nvoid        RCC_RTCCLKCmd(FunctionalState NewState);
Nvoid        RCC_BackupResetCmd(FunctionalState NewState);
Nvoid        RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource); 
Nvoid        RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ);
Nvoid        RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ);
Nvoid        RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource);
Nvoid        RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource);
Nvoid        RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR);
Nvoid        RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler);
N
Nvoid        RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState);
Nvoid        RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState);
Nvoid        RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState);
Nvoid        RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState);
Nvoid        RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);
N
Nvoid        RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState);
Nvoid        RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState);
Nvoid        RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState);
Nvoid        RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState);
Nvoid        RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);
N
Nvoid        RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState);
Nvoid        RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState);
Nvoid        RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState);
Nvoid        RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState);
Nvoid        RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);
N
N/* Interrupts and flags management functions **********************************/
Nvoid        RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState);
NFlagStatus  RCC_GetFlagStatus(uint8_t RCC_FLAG);
Nvoid        RCC_ClearFlag(void);
NITStatus    RCC_GetITStatus(uint8_t RCC_IT);
Nvoid        RCC_ClearITPendingBit(uint8_t RCC_IT);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32F4xx_RCC_H */
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 62 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_rtc.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_rtc.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_rtc.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the RTC firmware
N  *          library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ****************************************************************************** 
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_RTC_H
N#define __STM32F4xx_RTC_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup RTC
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/
N
N/** 
N  * @brief  RTC Init structures definition  
N  */ 
Ntypedef struct
N{
N  uint32_t RTC_HourFormat;   /*!< Specifies the RTC Hour Format.
N                             This parameter can be a value of @ref RTC_Hour_Formats */
N  
N  uint32_t RTC_AsynchPrediv; /*!< Specifies the RTC Asynchronous Predivider value.
N                             This parameter must be set to a value lower than 0x7F */
N  
N  uint32_t RTC_SynchPrediv;  /*!< Specifies the RTC Synchronous Predivider value.
N                             This parameter must be set to a value lower than 0x7FFF */
N}RTC_InitTypeDef;
N
N/** 
N  * @brief  RTC Time structure definition  
N  */
Ntypedef struct
N{
N  uint8_t RTC_Hours;    /*!< Specifies the RTC Time Hour.
N                        This parameter must be set to a value in the 0-12 range
N                        if the RTC_HourFormat_12 is selected or 0-23 range if
N                        the RTC_HourFormat_24 is selected. */
N
N  uint8_t RTC_Minutes;  /*!< Specifies the RTC Time Minutes.
N                        This parameter must be set to a value in the 0-59 range. */
N  
N  uint8_t RTC_Seconds;  /*!< Specifies the RTC Time Seconds.
N                        This parameter must be set to a value in the 0-59 range. */
N
N  uint8_t RTC_H12;      /*!< Specifies the RTC AM/PM Time.
N                        This parameter can be a value of @ref RTC_AM_PM_Definitions */
N}RTC_TimeTypeDef; 
N
N/** 
N  * @brief  RTC Date structure definition  
N  */
Ntypedef struct
N{
N  uint8_t RTC_WeekDay; /*!< Specifies the RTC Date WeekDay.
N                        This parameter can be a value of @ref RTC_WeekDay_Definitions */
N  
N  uint8_t RTC_Month;   /*!< Specifies the RTC Date Month (in BCD format).
N                        This parameter can be a value of @ref RTC_Month_Date_Definitions */
N
N  uint8_t RTC_Date;     /*!< Specifies the RTC Date.
N                        This parameter must be set to a value in the 1-31 range. */
N  
N  uint8_t RTC_Year;     /*!< Specifies the RTC Date Year.
N                        This parameter must be set to a value in the 0-99 range. */
N}RTC_DateTypeDef;
N
N/** 
N  * @brief  RTC Alarm structure definition  
N  */
Ntypedef struct
N{
N  RTC_TimeTypeDef RTC_AlarmTime;     /*!< Specifies the RTC Alarm Time members. */
N
N  uint32_t RTC_AlarmMask;            /*!< Specifies the RTC Alarm Masks.
N                                     This parameter can be a value of @ref RTC_AlarmMask_Definitions */
N
N  uint32_t RTC_AlarmDateWeekDaySel;  /*!< Specifies the RTC Alarm is on Date or WeekDay.
N                                     This parameter can be a value of @ref RTC_AlarmDateWeekDay_Definitions */
N  
N  uint8_t RTC_AlarmDateWeekDay;      /*!< Specifies the RTC Alarm Date/WeekDay.
N                                     If the Alarm Date is selected, this parameter
N                                     must be set to a value in the 1-31 range.
N                                     If the Alarm WeekDay is selected, this 
N                                     parameter can be a value of @ref RTC_WeekDay_Definitions */
N}RTC_AlarmTypeDef;
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup RTC_Exported_Constants
N  * @{
N  */ 
N
N
N/** @defgroup RTC_Hour_Formats 
N  * @{
N  */ 
N#define RTC_HourFormat_24              ((uint32_t)0x00000000)
N#define RTC_HourFormat_12              ((uint32_t)0x00000040)
N#define IS_RTC_HOUR_FORMAT(FORMAT)     (((FORMAT) == RTC_HourFormat_12) || \
N                                        ((FORMAT) == RTC_HourFormat_24))
X#define IS_RTC_HOUR_FORMAT(FORMAT)     (((FORMAT) == RTC_HourFormat_12) ||                                         ((FORMAT) == RTC_HourFormat_24))
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Asynchronous_Predivider 
N  * @{
N  */ 
N#define IS_RTC_ASYNCH_PREDIV(PREDIV)   ((PREDIV) <= 0x7F)
N 
N/**
N  * @}
N  */ 
N
N
N/** @defgroup RTC_Synchronous_Predivider 
N  * @{
N  */ 
N#define IS_RTC_SYNCH_PREDIV(PREDIV)    ((PREDIV) <= 0x7FFF)
N
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Time_Definitions 
N  * @{
N  */ 
N#define IS_RTC_HOUR12(HOUR)            (((HOUR) > 0) && ((HOUR) <= 12))
N#define IS_RTC_HOUR24(HOUR)            ((HOUR) <= 23)
N#define IS_RTC_MINUTES(MINUTES)        ((MINUTES) <= 59)
N#define IS_RTC_SECONDS(SECONDS)        ((SECONDS) <= 59)
N
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_AM_PM_Definitions 
N  * @{
N  */ 
N#define RTC_H12_AM                     ((uint8_t)0x00)
N#define RTC_H12_PM                     ((uint8_t)0x40)
N#define IS_RTC_H12(PM) (((PM) == RTC_H12_AM) || ((PM) == RTC_H12_PM))
N
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Year_Date_Definitions 
N  * @{
N  */ 
N#define IS_RTC_YEAR(YEAR)              ((YEAR) <= 99)
N
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Month_Date_Definitions 
N  * @{
N  */ 
N
N/* Coded in BCD format */
N#define RTC_Month_January              ((uint8_t)0x01)
N#define RTC_Month_February             ((uint8_t)0x02)
N#define RTC_Month_March                ((uint8_t)0x03)
N#define RTC_Month_April                ((uint8_t)0x04)
N#define RTC_Month_May                  ((uint8_t)0x05)
N#define RTC_Month_June                 ((uint8_t)0x06)
N#define RTC_Month_July                 ((uint8_t)0x07)
N#define RTC_Month_August               ((uint8_t)0x08)
N#define RTC_Month_September            ((uint8_t)0x09)
N#define RTC_Month_October              ((uint8_t)0x10)
N#define RTC_Month_November             ((uint8_t)0x11)
N#define RTC_Month_December             ((uint8_t)0x12)
N#define IS_RTC_MONTH(MONTH)            (((MONTH) >= 1) && ((MONTH) <= 12))
N#define IS_RTC_DATE(DATE)              (((DATE) >= 1) && ((DATE) <= 31))
N
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_WeekDay_Definitions 
N  * @{
N  */ 
N  
N#define RTC_Weekday_Monday             ((uint8_t)0x01)
N#define RTC_Weekday_Tuesday            ((uint8_t)0x02)
N#define RTC_Weekday_Wednesday          ((uint8_t)0x03)
N#define RTC_Weekday_Thursday           ((uint8_t)0x04)
N#define RTC_Weekday_Friday             ((uint8_t)0x05)
N#define RTC_Weekday_Saturday           ((uint8_t)0x06)
N#define RTC_Weekday_Sunday             ((uint8_t)0x07)
N#define IS_RTC_WEEKDAY(WEEKDAY) (((WEEKDAY) == RTC_Weekday_Monday) || \
N                                 ((WEEKDAY) == RTC_Weekday_Tuesday) || \
N                                 ((WEEKDAY) == RTC_Weekday_Wednesday) || \
N                                 ((WEEKDAY) == RTC_Weekday_Thursday) || \
N                                 ((WEEKDAY) == RTC_Weekday_Friday) || \
N                                 ((WEEKDAY) == RTC_Weekday_Saturday) || \
N                                 ((WEEKDAY) == RTC_Weekday_Sunday))
X#define IS_RTC_WEEKDAY(WEEKDAY) (((WEEKDAY) == RTC_Weekday_Monday) ||                                  ((WEEKDAY) == RTC_Weekday_Tuesday) ||                                  ((WEEKDAY) == RTC_Weekday_Wednesday) ||                                  ((WEEKDAY) == RTC_Weekday_Thursday) ||                                  ((WEEKDAY) == RTC_Weekday_Friday) ||                                  ((WEEKDAY) == RTC_Weekday_Saturday) ||                                  ((WEEKDAY) == RTC_Weekday_Sunday))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup RTC_Alarm_Definitions
N  * @{
N  */ 
N#define IS_RTC_ALARM_DATE_WEEKDAY_DATE(DATE) (((DATE) > 0) && ((DATE) <= 31))
N#define IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(WEEKDAY) (((WEEKDAY) == RTC_Weekday_Monday) || \
N                                                    ((WEEKDAY) == RTC_Weekday_Tuesday) || \
N                                                    ((WEEKDAY) == RTC_Weekday_Wednesday) || \
N                                                    ((WEEKDAY) == RTC_Weekday_Thursday) || \
N                                                    ((WEEKDAY) == RTC_Weekday_Friday) || \
N                                                    ((WEEKDAY) == RTC_Weekday_Saturday) || \
N                                                    ((WEEKDAY) == RTC_Weekday_Sunday))
X#define IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(WEEKDAY) (((WEEKDAY) == RTC_Weekday_Monday) ||                                                     ((WEEKDAY) == RTC_Weekday_Tuesday) ||                                                     ((WEEKDAY) == RTC_Weekday_Wednesday) ||                                                     ((WEEKDAY) == RTC_Weekday_Thursday) ||                                                     ((WEEKDAY) == RTC_Weekday_Friday) ||                                                     ((WEEKDAY) == RTC_Weekday_Saturday) ||                                                     ((WEEKDAY) == RTC_Weekday_Sunday))
N
N/**
N  * @}
N  */ 
N
N
N/** @defgroup RTC_AlarmDateWeekDay_Definitions 
N  * @{
N  */ 
N#define RTC_AlarmDateWeekDaySel_Date      ((uint32_t)0x00000000)
N#define RTC_AlarmDateWeekDaySel_WeekDay   ((uint32_t)0x40000000)
N
N#define IS_RTC_ALARM_DATE_WEEKDAY_SEL(SEL) (((SEL) == RTC_AlarmDateWeekDaySel_Date) || \
N                                            ((SEL) == RTC_AlarmDateWeekDaySel_WeekDay))
X#define IS_RTC_ALARM_DATE_WEEKDAY_SEL(SEL) (((SEL) == RTC_AlarmDateWeekDaySel_Date) ||                                             ((SEL) == RTC_AlarmDateWeekDaySel_WeekDay))
N
N/**
N  * @}
N  */ 
N
N
N/** @defgroup RTC_AlarmMask_Definitions 
N  * @{
N  */ 
N#define RTC_AlarmMask_None                ((uint32_t)0x00000000)
N#define RTC_AlarmMask_DateWeekDay         ((uint32_t)0x80000000)
N#define RTC_AlarmMask_Hours               ((uint32_t)0x00800000)
N#define RTC_AlarmMask_Minutes             ((uint32_t)0x00008000)
N#define RTC_AlarmMask_Seconds             ((uint32_t)0x00000080)
N#define RTC_AlarmMask_All                 ((uint32_t)0x80808080)
N#define IS_ALARM_MASK(MASK)  (((MASK) & 0x7F7F7F7F) == (uint32_t)RESET)
N
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Alarms_Definitions 
N  * @{
N  */ 
N#define RTC_Alarm_A                       ((uint32_t)0x00000100)
N#define RTC_Alarm_B                       ((uint32_t)0x00000200)
N#define IS_RTC_ALARM(ALARM)     (((ALARM) == RTC_Alarm_A) || ((ALARM) == RTC_Alarm_B))
N#define IS_RTC_CMD_ALARM(ALARM) (((ALARM) & (RTC_Alarm_A | RTC_Alarm_B)) != (uint32_t)RESET)
N
N/**
N  * @}
N  */ 
N
N  /** @defgroup RTC_Alarm_Sub_Seconds_Masks_Definitions
N  * @{
N  */ 
N#define RTC_AlarmSubSecondMask_All         ((uint32_t)0x00000000) /*!< All Alarm SS fields are masked. 
N                                                                       There is no comparison on sub seconds 
N                                                                       for Alarm */
N#define RTC_AlarmSubSecondMask_SS14_1      ((uint32_t)0x01000000) /*!< SS[14:1] are don't care in Alarm 
N                                                                       comparison. Only SS[0] is compared. */
N#define RTC_AlarmSubSecondMask_SS14_2      ((uint32_t)0x02000000) /*!< SS[14:2] are don't care in Alarm 
N                                                                       comparison. Only SS[1:0] are compared */
N#define RTC_AlarmSubSecondMask_SS14_3      ((uint32_t)0x03000000) /*!< SS[14:3] are don't care in Alarm 
N                                                                       comparison. Only SS[2:0] are compared */
N#define RTC_AlarmSubSecondMask_SS14_4      ((uint32_t)0x04000000) /*!< SS[14:4] are don't care in Alarm 
N                                                                       comparison. Only SS[3:0] are compared */
N#define RTC_AlarmSubSecondMask_SS14_5      ((uint32_t)0x05000000) /*!< SS[14:5] are don't care in Alarm 
N                                                                       comparison. Only SS[4:0] are compared */
N#define RTC_AlarmSubSecondMask_SS14_6      ((uint32_t)0x06000000) /*!< SS[14:6] are don't care in Alarm 
N                                                                       comparison. Only SS[5:0] are compared */
N#define RTC_AlarmSubSecondMask_SS14_7      ((uint32_t)0x07000000) /*!< SS[14:7] are don't care in Alarm 
N                                                                       comparison. Only SS[6:0] are compared */
N#define RTC_AlarmSubSecondMask_SS14_8      ((uint32_t)0x08000000) /*!< SS[14:8] are don't care in Alarm 
N                                                                       comparison. Only SS[7:0] are compared */
N#define RTC_AlarmSubSecondMask_SS14_9      ((uint32_t)0x09000000) /*!< SS[14:9] are don't care in Alarm 
N                                                                       comparison. Only SS[8:0] are compared */
N#define RTC_AlarmSubSecondMask_SS14_10     ((uint32_t)0x0A000000) /*!< SS[14:10] are don't care in Alarm 
N                                                                       comparison. Only SS[9:0] are compared */
N#define RTC_AlarmSubSecondMask_SS14_11     ((uint32_t)0x0B000000) /*!< SS[14:11] are don't care in Alarm 
N                                                                       comparison. Only SS[10:0] are compared */
N#define RTC_AlarmSubSecondMask_SS14_12     ((uint32_t)0x0C000000) /*!< SS[14:12] are don't care in Alarm 
N                                                                       comparison.Only SS[11:0] are compared */
N#define RTC_AlarmSubSecondMask_SS14_13     ((uint32_t)0x0D000000) /*!< SS[14:13] are don't care in Alarm 
N                                                                       comparison. Only SS[12:0] are compared */
N#define RTC_AlarmSubSecondMask_SS14        ((uint32_t)0x0E000000) /*!< SS[14] is don't care in Alarm 
N                                                                       comparison.Only SS[13:0] are compared */
N#define RTC_AlarmSubSecondMask_None        ((uint32_t)0x0F000000) /*!< SS[14:0] are compared and must match 
N                                                                       to activate alarm. */
N#define IS_RTC_ALARM_SUB_SECOND_MASK(MASK)   (((MASK) == RTC_AlarmSubSecondMask_All) || \
N                                              ((MASK) == RTC_AlarmSubSecondMask_SS14_1) || \
N                                              ((MASK) == RTC_AlarmSubSecondMask_SS14_2) || \
N                                              ((MASK) == RTC_AlarmSubSecondMask_SS14_3) || \
N                                              ((MASK) == RTC_AlarmSubSecondMask_SS14_4) || \
N                                              ((MASK) == RTC_AlarmSubSecondMask_SS14_5) || \
N                                              ((MASK) == RTC_AlarmSubSecondMask_SS14_6) || \
N                                              ((MASK) == RTC_AlarmSubSecondMask_SS14_7) || \
N                                              ((MASK) == RTC_AlarmSubSecondMask_SS14_8) || \
N                                              ((MASK) == RTC_AlarmSubSecondMask_SS14_9) || \
N                                              ((MASK) == RTC_AlarmSubSecondMask_SS14_10) || \
N                                              ((MASK) == RTC_AlarmSubSecondMask_SS14_11) || \
N                                              ((MASK) == RTC_AlarmSubSecondMask_SS14_12) || \
N                                              ((MASK) == RTC_AlarmSubSecondMask_SS14_13) || \
N                                              ((MASK) == RTC_AlarmSubSecondMask_SS14) || \
N                                              ((MASK) == RTC_AlarmSubSecondMask_None))
X#define IS_RTC_ALARM_SUB_SECOND_MASK(MASK)   (((MASK) == RTC_AlarmSubSecondMask_All) ||                                               ((MASK) == RTC_AlarmSubSecondMask_SS14_1) ||                                               ((MASK) == RTC_AlarmSubSecondMask_SS14_2) ||                                               ((MASK) == RTC_AlarmSubSecondMask_SS14_3) ||                                               ((MASK) == RTC_AlarmSubSecondMask_SS14_4) ||                                               ((MASK) == RTC_AlarmSubSecondMask_SS14_5) ||                                               ((MASK) == RTC_AlarmSubSecondMask_SS14_6) ||                                               ((MASK) == RTC_AlarmSubSecondMask_SS14_7) ||                                               ((MASK) == RTC_AlarmSubSecondMask_SS14_8) ||                                               ((MASK) == RTC_AlarmSubSecondMask_SS14_9) ||                                               ((MASK) == RTC_AlarmSubSecondMask_SS14_10) ||                                               ((MASK) == RTC_AlarmSubSecondMask_SS14_11) ||                                               ((MASK) == RTC_AlarmSubSecondMask_SS14_12) ||                                               ((MASK) == RTC_AlarmSubSecondMask_SS14_13) ||                                               ((MASK) == RTC_AlarmSubSecondMask_SS14) ||                                               ((MASK) == RTC_AlarmSubSecondMask_None))
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Alarm_Sub_Seconds_Value
N  * @{
N  */ 
N
N#define IS_RTC_ALARM_SUB_SECOND_VALUE(VALUE) ((VALUE) <= 0x00007FFF)
N
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Wakeup_Timer_Definitions 
N  * @{
N  */ 
N#define RTC_WakeUpClock_RTCCLK_Div16        ((uint32_t)0x00000000)
N#define RTC_WakeUpClock_RTCCLK_Div8         ((uint32_t)0x00000001)
N#define RTC_WakeUpClock_RTCCLK_Div4         ((uint32_t)0x00000002)
N#define RTC_WakeUpClock_RTCCLK_Div2         ((uint32_t)0x00000003)
N#define RTC_WakeUpClock_CK_SPRE_16bits      ((uint32_t)0x00000004)
N#define RTC_WakeUpClock_CK_SPRE_17bits      ((uint32_t)0x00000006)
N#define IS_RTC_WAKEUP_CLOCK(CLOCK) (((CLOCK) == RTC_WakeUpClock_RTCCLK_Div16) || \
N                                    ((CLOCK) == RTC_WakeUpClock_RTCCLK_Div8) || \
N                                    ((CLOCK) == RTC_WakeUpClock_RTCCLK_Div4) || \
N                                    ((CLOCK) == RTC_WakeUpClock_RTCCLK_Div2) || \
N                                    ((CLOCK) == RTC_WakeUpClock_CK_SPRE_16bits) || \
N                                    ((CLOCK) == RTC_WakeUpClock_CK_SPRE_17bits))
X#define IS_RTC_WAKEUP_CLOCK(CLOCK) (((CLOCK) == RTC_WakeUpClock_RTCCLK_Div16) ||                                     ((CLOCK) == RTC_WakeUpClock_RTCCLK_Div8) ||                                     ((CLOCK) == RTC_WakeUpClock_RTCCLK_Div4) ||                                     ((CLOCK) == RTC_WakeUpClock_RTCCLK_Div2) ||                                     ((CLOCK) == RTC_WakeUpClock_CK_SPRE_16bits) ||                                     ((CLOCK) == RTC_WakeUpClock_CK_SPRE_17bits))
N#define IS_RTC_WAKEUP_COUNTER(COUNTER)  ((COUNTER) <= 0xFFFF)
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Time_Stamp_Edges_definitions 
N  * @{
N  */ 
N#define RTC_TimeStampEdge_Rising          ((uint32_t)0x00000000)
N#define RTC_TimeStampEdge_Falling         ((uint32_t)0x00000008)
N#define IS_RTC_TIMESTAMP_EDGE(EDGE) (((EDGE) == RTC_TimeStampEdge_Rising) || \
N                                     ((EDGE) == RTC_TimeStampEdge_Falling))
X#define IS_RTC_TIMESTAMP_EDGE(EDGE) (((EDGE) == RTC_TimeStampEdge_Rising) ||                                      ((EDGE) == RTC_TimeStampEdge_Falling))
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Output_selection_Definitions 
N  * @{
N  */ 
N#define RTC_Output_Disable             ((uint32_t)0x00000000)
N#define RTC_Output_AlarmA              ((uint32_t)0x00200000)
N#define RTC_Output_AlarmB              ((uint32_t)0x00400000)
N#define RTC_Output_WakeUp              ((uint32_t)0x00600000)
N 
N#define IS_RTC_OUTPUT(OUTPUT) (((OUTPUT) == RTC_Output_Disable) || \
N                               ((OUTPUT) == RTC_Output_AlarmA) || \
N                               ((OUTPUT) == RTC_Output_AlarmB) || \
N                               ((OUTPUT) == RTC_Output_WakeUp))
X#define IS_RTC_OUTPUT(OUTPUT) (((OUTPUT) == RTC_Output_Disable) ||                                ((OUTPUT) == RTC_Output_AlarmA) ||                                ((OUTPUT) == RTC_Output_AlarmB) ||                                ((OUTPUT) == RTC_Output_WakeUp))
N
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Output_Polarity_Definitions 
N  * @{
N  */ 
N#define RTC_OutputPolarity_High           ((uint32_t)0x00000000)
N#define RTC_OutputPolarity_Low            ((uint32_t)0x00100000)
N#define IS_RTC_OUTPUT_POL(POL) (((POL) == RTC_OutputPolarity_High) || \
N                                ((POL) == RTC_OutputPolarity_Low))
X#define IS_RTC_OUTPUT_POL(POL) (((POL) == RTC_OutputPolarity_High) ||                                 ((POL) == RTC_OutputPolarity_Low))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup RTC_Digital_Calibration_Definitions 
N  * @{
N  */ 
N#define RTC_CalibSign_Positive            ((uint32_t)0x00000000) 
N#define RTC_CalibSign_Negative            ((uint32_t)0x00000080)
N#define IS_RTC_CALIB_SIGN(SIGN) (((SIGN) == RTC_CalibSign_Positive) || \
N                                 ((SIGN) == RTC_CalibSign_Negative))
X#define IS_RTC_CALIB_SIGN(SIGN) (((SIGN) == RTC_CalibSign_Positive) ||                                  ((SIGN) == RTC_CalibSign_Negative))
N#define IS_RTC_CALIB_VALUE(VALUE) ((VALUE) < 0x20)
N
N/**
N  * @}
N  */ 
N
N /** @defgroup RTC_Calib_Output_selection_Definitions 
N  * @{
N  */ 
N#define RTC_CalibOutput_512Hz            ((uint32_t)0x00000000) 
N#define RTC_CalibOutput_1Hz              ((uint32_t)0x00080000)
N#define IS_RTC_CALIB_OUTPUT(OUTPUT)  (((OUTPUT) == RTC_CalibOutput_512Hz) || \
N                                      ((OUTPUT) == RTC_CalibOutput_1Hz))
X#define IS_RTC_CALIB_OUTPUT(OUTPUT)  (((OUTPUT) == RTC_CalibOutput_512Hz) ||                                       ((OUTPUT) == RTC_CalibOutput_1Hz))
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Smooth_calib_period_Definitions 
N  * @{
N  */ 
N#define RTC_SmoothCalibPeriod_32sec   ((uint32_t)0x00000000) /*!<  if RTCCLK = 32768 Hz, Smooth calibation
N                                                             period is 32s,  else 2exp20 RTCCLK seconds */
N#define RTC_SmoothCalibPeriod_16sec   ((uint32_t)0x00002000) /*!<  if RTCCLK = 32768 Hz, Smooth calibation 
N                                                             period is 16s, else 2exp19 RTCCLK seconds */
N#define RTC_SmoothCalibPeriod_8sec    ((uint32_t)0x00004000) /*!<  if RTCCLK = 32768 Hz, Smooth calibation 
N                                                             period is 8s, else 2exp18 RTCCLK seconds */
N#define IS_RTC_SMOOTH_CALIB_PERIOD(PERIOD) (((PERIOD) == RTC_SmoothCalibPeriod_32sec) || \
N                                             ((PERIOD) == RTC_SmoothCalibPeriod_16sec) || \
N                                             ((PERIOD) == RTC_SmoothCalibPeriod_8sec))
X#define IS_RTC_SMOOTH_CALIB_PERIOD(PERIOD) (((PERIOD) == RTC_SmoothCalibPeriod_32sec) ||                                              ((PERIOD) == RTC_SmoothCalibPeriod_16sec) ||                                              ((PERIOD) == RTC_SmoothCalibPeriod_8sec))
N                                          
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Smooth_calib_Plus_pulses_Definitions 
N  * @{
N  */ 
N#define RTC_SmoothCalibPlusPulses_Set    ((uint32_t)0x00008000) /*!<  The number of RTCCLK pulses added  
N                                                                during a X -second window = Y - CALM[8:0]. 
N                                                                 with Y = 512, 256, 128 when X = 32, 16, 8 */
N#define RTC_SmoothCalibPlusPulses_Reset  ((uint32_t)0x00000000) /*!<  The number of RTCCLK pulses subbstited
N                                                                 during a 32-second window =   CALM[8:0]. */
N#define IS_RTC_SMOOTH_CALIB_PLUS(PLUS) (((PLUS) == RTC_SmoothCalibPlusPulses_Set) || \
N                                         ((PLUS) == RTC_SmoothCalibPlusPulses_Reset))
X#define IS_RTC_SMOOTH_CALIB_PLUS(PLUS) (((PLUS) == RTC_SmoothCalibPlusPulses_Set) ||                                          ((PLUS) == RTC_SmoothCalibPlusPulses_Reset))
N
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Smooth_calib_Minus_pulses_Definitions 
N  * @{
N  */ 
N#define  IS_RTC_SMOOTH_CALIB_MINUS(VALUE) ((VALUE) <= 0x000001FF)
N
N/**
N  * @}
N  */
N
N/** @defgroup RTC_DayLightSaving_Definitions 
N  * @{
N  */ 
N#define RTC_DayLightSaving_SUB1H   ((uint32_t)0x00020000)
N#define RTC_DayLightSaving_ADD1H   ((uint32_t)0x00010000)
N#define IS_RTC_DAYLIGHT_SAVING(SAVE) (((SAVE) == RTC_DayLightSaving_SUB1H) || \
N                                      ((SAVE) == RTC_DayLightSaving_ADD1H))
X#define IS_RTC_DAYLIGHT_SAVING(SAVE) (((SAVE) == RTC_DayLightSaving_SUB1H) ||                                       ((SAVE) == RTC_DayLightSaving_ADD1H))
N
N#define RTC_StoreOperation_Reset        ((uint32_t)0x00000000)
N#define RTC_StoreOperation_Set          ((uint32_t)0x00040000)
N#define IS_RTC_STORE_OPERATION(OPERATION) (((OPERATION) == RTC_StoreOperation_Reset) || \
N                                           ((OPERATION) == RTC_StoreOperation_Set))
X#define IS_RTC_STORE_OPERATION(OPERATION) (((OPERATION) == RTC_StoreOperation_Reset) ||                                            ((OPERATION) == RTC_StoreOperation_Set))
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Tamper_Trigger_Definitions 
N  * @{
N  */ 
N#define RTC_TamperTrigger_RisingEdge            ((uint32_t)0x00000000)
N#define RTC_TamperTrigger_FallingEdge           ((uint32_t)0x00000001)
N#define RTC_TamperTrigger_LowLevel              ((uint32_t)0x00000000)
N#define RTC_TamperTrigger_HighLevel             ((uint32_t)0x00000001)
N#define IS_RTC_TAMPER_TRIGGER(TRIGGER) (((TRIGGER) == RTC_TamperTrigger_RisingEdge) || \
N                                        ((TRIGGER) == RTC_TamperTrigger_FallingEdge) || \
N                                        ((TRIGGER) == RTC_TamperTrigger_LowLevel) || \
N                                        ((TRIGGER) == RTC_TamperTrigger_HighLevel)) 
X#define IS_RTC_TAMPER_TRIGGER(TRIGGER) (((TRIGGER) == RTC_TamperTrigger_RisingEdge) ||                                         ((TRIGGER) == RTC_TamperTrigger_FallingEdge) ||                                         ((TRIGGER) == RTC_TamperTrigger_LowLevel) ||                                         ((TRIGGER) == RTC_TamperTrigger_HighLevel)) 
N
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Tamper_Filter_Definitions 
N  * @{
N  */ 
N#define RTC_TamperFilter_Disable   ((uint32_t)0x00000000) /*!< Tamper filter is disabled */
N
N#define RTC_TamperFilter_2Sample   ((uint32_t)0x00000800) /*!< Tamper is activated after 2 
N                                                          consecutive samples at the active level */
N#define RTC_TamperFilter_4Sample   ((uint32_t)0x00001000) /*!< Tamper is activated after 4 
N                                                          consecutive samples at the active level */
N#define RTC_TamperFilter_8Sample   ((uint32_t)0x00001800) /*!< Tamper is activated after 8 
N                                                          consecutive samples at the active leve. */
N#define IS_RTC_TAMPER_FILTER(FILTER) (((FILTER) == RTC_TamperFilter_Disable) || \
N                                      ((FILTER) == RTC_TamperFilter_2Sample) || \
N                                      ((FILTER) == RTC_TamperFilter_4Sample) || \
N                                      ((FILTER) == RTC_TamperFilter_8Sample))
X#define IS_RTC_TAMPER_FILTER(FILTER) (((FILTER) == RTC_TamperFilter_Disable) ||                                       ((FILTER) == RTC_TamperFilter_2Sample) ||                                       ((FILTER) == RTC_TamperFilter_4Sample) ||                                       ((FILTER) == RTC_TamperFilter_8Sample))
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Tamper_Sampling_Frequencies_Definitions 
N  * @{
N  */ 
N#define RTC_TamperSamplingFreq_RTCCLK_Div32768  ((uint32_t)0x00000000) /*!< Each of the tamper inputs are sampled
N                                                                           with a frequency =  RTCCLK / 32768 */
N#define RTC_TamperSamplingFreq_RTCCLK_Div16384  ((uint32_t)0x000000100) /*!< Each of the tamper inputs are sampled
N                                                                            with a frequency =  RTCCLK / 16384 */
N#define RTC_TamperSamplingFreq_RTCCLK_Div8192   ((uint32_t)0x00000200) /*!< Each of the tamper inputs are sampled
N                                                                           with a frequency =  RTCCLK / 8192  */
N#define RTC_TamperSamplingFreq_RTCCLK_Div4096   ((uint32_t)0x00000300) /*!< Each of the tamper inputs are sampled
N                                                                           with a frequency =  RTCCLK / 4096  */
N#define RTC_TamperSamplingFreq_RTCCLK_Div2048   ((uint32_t)0x00000400) /*!< Each of the tamper inputs are sampled
N                                                                           with a frequency =  RTCCLK / 2048  */
N#define RTC_TamperSamplingFreq_RTCCLK_Div1024   ((uint32_t)0x00000500) /*!< Each of the tamper inputs are sampled
N                                                                           with a frequency =  RTCCLK / 1024  */
N#define RTC_TamperSamplingFreq_RTCCLK_Div512    ((uint32_t)0x00000600) /*!< Each of the tamper inputs are sampled
N                                                                           with a frequency =  RTCCLK / 512   */
N#define RTC_TamperSamplingFreq_RTCCLK_Div256    ((uint32_t)0x00000700) /*!< Each of the tamper inputs are sampled
N                                                                           with a frequency =  RTCCLK / 256   */
N#define IS_RTC_TAMPER_SAMPLING_FREQ(FREQ) (((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div32768) || \
N                                           ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div16384) || \
N                                           ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div8192) || \
N                                           ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div4096) || \
N                                           ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div2048) || \
N                                           ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div1024) || \
N                                           ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div512) || \
N                                           ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div256))
X#define IS_RTC_TAMPER_SAMPLING_FREQ(FREQ) (((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div32768) ||                                            ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div16384) ||                                            ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div8192) ||                                            ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div4096) ||                                            ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div2048) ||                                            ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div1024) ||                                            ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div512) ||                                            ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div256))
N
N/**
N  * @}
N  */
N
N  /** @defgroup RTC_Tamper_Pin_Precharge_Duration_Definitions 
N  * @{
N  */ 
N#define RTC_TamperPrechargeDuration_1RTCCLK ((uint32_t)0x00000000)  /*!< Tamper pins are pre-charged before 
N                                                                         sampling during 1 RTCCLK cycle */
N#define RTC_TamperPrechargeDuration_2RTCCLK ((uint32_t)0x00002000)  /*!< Tamper pins are pre-charged before 
N                                                                         sampling during 2 RTCCLK cycles */
N#define RTC_TamperPrechargeDuration_4RTCCLK ((uint32_t)0x00004000)  /*!< Tamper pins are pre-charged before 
N                                                                         sampling during 4 RTCCLK cycles */
N#define RTC_TamperPrechargeDuration_8RTCCLK ((uint32_t)0x00006000)  /*!< Tamper pins are pre-charged before 
N                                                                         sampling during 8 RTCCLK cycles */
N
N#define IS_RTC_TAMPER_PRECHARGE_DURATION(DURATION) (((DURATION) == RTC_TamperPrechargeDuration_1RTCCLK) || \
N                                                    ((DURATION) == RTC_TamperPrechargeDuration_2RTCCLK) || \
N                                                    ((DURATION) == RTC_TamperPrechargeDuration_4RTCCLK) || \
N                                                    ((DURATION) == RTC_TamperPrechargeDuration_8RTCCLK))
X#define IS_RTC_TAMPER_PRECHARGE_DURATION(DURATION) (((DURATION) == RTC_TamperPrechargeDuration_1RTCCLK) ||                                                     ((DURATION) == RTC_TamperPrechargeDuration_2RTCCLK) ||                                                     ((DURATION) == RTC_TamperPrechargeDuration_4RTCCLK) ||                                                     ((DURATION) == RTC_TamperPrechargeDuration_8RTCCLK))
N/**
N  * @}
N  */
N
N/** @defgroup RTC_Tamper_Pins_Definitions 
N  * @{
N  */ 
N#define RTC_Tamper_1                    RTC_TAFCR_TAMP1E
N#define IS_RTC_TAMPER(TAMPER) (((TAMPER) == RTC_Tamper_1))
N
N/**
N  * @}
N  */
N
N/** @defgroup RTC_Tamper_Pin_Selection 
N  * @{
N  */ 
N#define RTC_TamperPin_PC13                 ((uint32_t)0x00000000)
N#define RTC_TamperPin_PI8                  ((uint32_t)0x00010000)
N#define IS_RTC_TAMPER_PIN(PIN) (((PIN) == RTC_TamperPin_PC13) || \
N                                ((PIN) == RTC_TamperPin_PI8))
X#define IS_RTC_TAMPER_PIN(PIN) (((PIN) == RTC_TamperPin_PC13) ||                                 ((PIN) == RTC_TamperPin_PI8))
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_TimeStamp_Pin_Selection 
N  * @{
N  */ 
N#define RTC_TimeStampPin_PC13              ((uint32_t)0x00000000)
N#define RTC_TimeStampPin_PI8               ((uint32_t)0x00020000)
N#define IS_RTC_TIMESTAMP_PIN(PIN) (((PIN) == RTC_TimeStampPin_PC13) || \
N                                   ((PIN) == RTC_TimeStampPin_PI8))
X#define IS_RTC_TIMESTAMP_PIN(PIN) (((PIN) == RTC_TimeStampPin_PC13) ||                                    ((PIN) == RTC_TimeStampPin_PI8))
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Output_Type_ALARM_OUT 
N  * @{
N  */ 
N#define RTC_OutputType_OpenDrain           ((uint32_t)0x00000000)
N#define RTC_OutputType_PushPull            ((uint32_t)0x00040000)
N#define IS_RTC_OUTPUT_TYPE(TYPE) (((TYPE) == RTC_OutputType_OpenDrain) || \
N                                  ((TYPE) == RTC_OutputType_PushPull))
X#define IS_RTC_OUTPUT_TYPE(TYPE) (((TYPE) == RTC_OutputType_OpenDrain) ||                                   ((TYPE) == RTC_OutputType_PushPull))
N
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Add_1_Second_Parameter_Definitions
N  * @{
N  */ 
N#define RTC_ShiftAdd1S_Reset      ((uint32_t)0x00000000)
N#define RTC_ShiftAdd1S_Set        ((uint32_t)0x80000000)
N#define IS_RTC_SHIFT_ADD1S(SEL) (((SEL) == RTC_ShiftAdd1S_Reset) || \
N                                 ((SEL) == RTC_ShiftAdd1S_Set))
X#define IS_RTC_SHIFT_ADD1S(SEL) (((SEL) == RTC_ShiftAdd1S_Reset) ||                                  ((SEL) == RTC_ShiftAdd1S_Set))
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Substract_Fraction_Of_Second_Value
N  * @{
N  */ 
N#define IS_RTC_SHIFT_SUBFS(FS) ((FS) <= 0x00007FFF)
N
N/**
N  * @}
N  */
N
N/** @defgroup RTC_Backup_Registers_Definitions 
N  * @{
N  */
N
N#define RTC_BKP_DR0                       ((uint32_t)0x00000000)
N#define RTC_BKP_DR1                       ((uint32_t)0x00000001)
N#define RTC_BKP_DR2                       ((uint32_t)0x00000002)
N#define RTC_BKP_DR3                       ((uint32_t)0x00000003)
N#define RTC_BKP_DR4                       ((uint32_t)0x00000004)
N#define RTC_BKP_DR5                       ((uint32_t)0x00000005)
N#define RTC_BKP_DR6                       ((uint32_t)0x00000006)
N#define RTC_BKP_DR7                       ((uint32_t)0x00000007)
N#define RTC_BKP_DR8                       ((uint32_t)0x00000008)
N#define RTC_BKP_DR9                       ((uint32_t)0x00000009)
N#define RTC_BKP_DR10                      ((uint32_t)0x0000000A)
N#define RTC_BKP_DR11                      ((uint32_t)0x0000000B)
N#define RTC_BKP_DR12                      ((uint32_t)0x0000000C)
N#define RTC_BKP_DR13                      ((uint32_t)0x0000000D)
N#define RTC_BKP_DR14                      ((uint32_t)0x0000000E)
N#define RTC_BKP_DR15                      ((uint32_t)0x0000000F)
N#define RTC_BKP_DR16                      ((uint32_t)0x00000010)
N#define RTC_BKP_DR17                      ((uint32_t)0x00000011)
N#define RTC_BKP_DR18                      ((uint32_t)0x00000012)
N#define RTC_BKP_DR19                      ((uint32_t)0x00000013)
N#define IS_RTC_BKP(BKP)                   (((BKP) == RTC_BKP_DR0) || \
N                                           ((BKP) == RTC_BKP_DR1) || \
N                                           ((BKP) == RTC_BKP_DR2) || \
N                                           ((BKP) == RTC_BKP_DR3) || \
N                                           ((BKP) == RTC_BKP_DR4) || \
N                                           ((BKP) == RTC_BKP_DR5) || \
N                                           ((BKP) == RTC_BKP_DR6) || \
N                                           ((BKP) == RTC_BKP_DR7) || \
N                                           ((BKP) == RTC_BKP_DR8) || \
N                                           ((BKP) == RTC_BKP_DR9) || \
N                                           ((BKP) == RTC_BKP_DR10) || \
N                                           ((BKP) == RTC_BKP_DR11) || \
N                                           ((BKP) == RTC_BKP_DR12) || \
N                                           ((BKP) == RTC_BKP_DR13) || \
N                                           ((BKP) == RTC_BKP_DR14) || \
N                                           ((BKP) == RTC_BKP_DR15) || \
N                                           ((BKP) == RTC_BKP_DR16) || \
N                                           ((BKP) == RTC_BKP_DR17) || \
N                                           ((BKP) == RTC_BKP_DR18) || \
N                                           ((BKP) == RTC_BKP_DR19))
X#define IS_RTC_BKP(BKP)                   (((BKP) == RTC_BKP_DR0) ||                                            ((BKP) == RTC_BKP_DR1) ||                                            ((BKP) == RTC_BKP_DR2) ||                                            ((BKP) == RTC_BKP_DR3) ||                                            ((BKP) == RTC_BKP_DR4) ||                                            ((BKP) == RTC_BKP_DR5) ||                                            ((BKP) == RTC_BKP_DR6) ||                                            ((BKP) == RTC_BKP_DR7) ||                                            ((BKP) == RTC_BKP_DR8) ||                                            ((BKP) == RTC_BKP_DR9) ||                                            ((BKP) == RTC_BKP_DR10) ||                                            ((BKP) == RTC_BKP_DR11) ||                                            ((BKP) == RTC_BKP_DR12) ||                                            ((BKP) == RTC_BKP_DR13) ||                                            ((BKP) == RTC_BKP_DR14) ||                                            ((BKP) == RTC_BKP_DR15) ||                                            ((BKP) == RTC_BKP_DR16) ||                                            ((BKP) == RTC_BKP_DR17) ||                                            ((BKP) == RTC_BKP_DR18) ||                                            ((BKP) == RTC_BKP_DR19))
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Input_parameter_format_definitions 
N  * @{
N  */ 
N#define RTC_Format_BIN                    ((uint32_t)0x000000000)
N#define RTC_Format_BCD                    ((uint32_t)0x000000001)
N#define IS_RTC_FORMAT(FORMAT) (((FORMAT) == RTC_Format_BIN) || ((FORMAT) == RTC_Format_BCD))
N
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Flags_Definitions 
N  * @{
N  */ 
N#define RTC_FLAG_RECALPF                  ((uint32_t)0x00010000)
N#define RTC_FLAG_TAMP1F                   ((uint32_t)0x00002000)
N#define RTC_FLAG_TSOVF                    ((uint32_t)0x00001000)
N#define RTC_FLAG_TSF                      ((uint32_t)0x00000800)
N#define RTC_FLAG_WUTF                     ((uint32_t)0x00000400)
N#define RTC_FLAG_ALRBF                    ((uint32_t)0x00000200)
N#define RTC_FLAG_ALRAF                    ((uint32_t)0x00000100)
N#define RTC_FLAG_INITF                    ((uint32_t)0x00000040)
N#define RTC_FLAG_RSF                      ((uint32_t)0x00000020)
N#define RTC_FLAG_INITS                    ((uint32_t)0x00000010)
N#define RTC_FLAG_SHPF                     ((uint32_t)0x00000008)
N#define RTC_FLAG_WUTWF                    ((uint32_t)0x00000004)
N#define RTC_FLAG_ALRBWF                   ((uint32_t)0x00000002)
N#define RTC_FLAG_ALRAWF                   ((uint32_t)0x00000001)
N#define IS_RTC_GET_FLAG(FLAG) (((FLAG) == RTC_FLAG_TSOVF) || ((FLAG) == RTC_FLAG_TSF) || \
N                               ((FLAG) == RTC_FLAG_WUTF) || ((FLAG) == RTC_FLAG_ALRBF) || \
N                               ((FLAG) == RTC_FLAG_ALRAF) || ((FLAG) == RTC_FLAG_INITF) || \
N                               ((FLAG) == RTC_FLAG_RSF) || ((FLAG) == RTC_FLAG_WUTWF) || \
N                               ((FLAG) == RTC_FLAG_ALRBWF) || ((FLAG) == RTC_FLAG_ALRAWF) || \
N                               ((FLAG) == RTC_FLAG_TAMP1F) || ((FLAG) == RTC_FLAG_RECALPF) || \
N                                ((FLAG) == RTC_FLAG_SHPF))
X#define IS_RTC_GET_FLAG(FLAG) (((FLAG) == RTC_FLAG_TSOVF) || ((FLAG) == RTC_FLAG_TSF) ||                                ((FLAG) == RTC_FLAG_WUTF) || ((FLAG) == RTC_FLAG_ALRBF) ||                                ((FLAG) == RTC_FLAG_ALRAF) || ((FLAG) == RTC_FLAG_INITF) ||                                ((FLAG) == RTC_FLAG_RSF) || ((FLAG) == RTC_FLAG_WUTWF) ||                                ((FLAG) == RTC_FLAG_ALRBWF) || ((FLAG) == RTC_FLAG_ALRAWF) ||                                ((FLAG) == RTC_FLAG_TAMP1F) || ((FLAG) == RTC_FLAG_RECALPF) ||                                 ((FLAG) == RTC_FLAG_SHPF))
N#define IS_RTC_CLEAR_FLAG(FLAG) (((FLAG) != (uint32_t)RESET) && (((FLAG) & 0xFFFF00DF) == (uint32_t)RESET))
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Interrupts_Definitions 
N  * @{
N  */ 
N#define RTC_IT_TS                         ((uint32_t)0x00008000)
N#define RTC_IT_WUT                        ((uint32_t)0x00004000)
N#define RTC_IT_ALRB                       ((uint32_t)0x00002000)
N#define RTC_IT_ALRA                       ((uint32_t)0x00001000)
N#define RTC_IT_TAMP                       ((uint32_t)0x00000004) /* Used only to Enable the Tamper Interrupt */
N#define RTC_IT_TAMP1                      ((uint32_t)0x00020000)
N
N#define IS_RTC_CONFIG_IT(IT) (((IT) != (uint32_t)RESET) && (((IT) & 0xFFFF0FFB) == (uint32_t)RESET))
N#define IS_RTC_GET_IT(IT) (((IT) == RTC_IT_TS) || ((IT) == RTC_IT_WUT) || \
N                           ((IT) == RTC_IT_ALRB) || ((IT) == RTC_IT_ALRA) || \
N                           ((IT) == RTC_IT_TAMP1))
X#define IS_RTC_GET_IT(IT) (((IT) == RTC_IT_TS) || ((IT) == RTC_IT_WUT) ||                            ((IT) == RTC_IT_ALRB) || ((IT) == RTC_IT_ALRA) ||                            ((IT) == RTC_IT_TAMP1))
N#define IS_RTC_CLEAR_IT(IT) (((IT) != (uint32_t)RESET) && (((IT) & 0xFFFD0FFF) == (uint32_t)RESET))
N
N/**
N  * @}
N  */ 
N
N/** @defgroup RTC_Legacy 
N  * @{
N  */ 
N#define RTC_DigitalCalibConfig  RTC_CoarseCalibConfig
N#define RTC_DigitalCalibCmd     RTC_CoarseCalibCmd
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/ 
N
N/*  Function used to set the RTC configuration to the default reset state *****/
NErrorStatus RTC_DeInit(void);
N
N/* Initialization and Configuration functions *********************************/
NErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct);
Nvoid RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct);
Nvoid RTC_WriteProtectionCmd(FunctionalState NewState);
NErrorStatus RTC_EnterInitMode(void);
Nvoid RTC_ExitInitMode(void);
NErrorStatus RTC_WaitForSynchro(void);
NErrorStatus RTC_RefClockCmd(FunctionalState NewState);
Nvoid RTC_BypassShadowCmd(FunctionalState NewState);
N
N/* Time and Date configuration functions **************************************/
NErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct);
Nvoid RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct);
Nvoid RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct);
Nuint32_t RTC_GetSubSecond(void);
NErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct);
Nvoid RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct);
Nvoid RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct);
N
N/* Alarms (Alarm A and Alarm B) configuration functions  **********************/
Nvoid RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct);
Nvoid RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct);
Nvoid RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct);
NErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState);
Nvoid RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask);
Nuint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm);
N
N/* WakeUp Timer configuration functions ***************************************/
Nvoid RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock);
Nvoid RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter);
Nuint32_t RTC_GetWakeUpCounter(void);
NErrorStatus RTC_WakeUpCmd(FunctionalState NewState);
N
N/* Daylight Saving configuration functions ************************************/
Nvoid RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation);
Nuint32_t RTC_GetStoreOperation(void);
N
N/* Output pin Configuration function ******************************************/
Nvoid RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity);
N
N/* Digital Calibration configuration functions *********************************/
NErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value);
NErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState);
Nvoid RTC_CalibOutputCmd(FunctionalState NewState);
Nvoid RTC_CalibOutputConfig(uint32_t RTC_CalibOutput);
NErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod, 
N                                  uint32_t RTC_SmoothCalibPlusPulses,
N                                  uint32_t RTC_SmouthCalibMinusPulsesValue);
N
N/* TimeStamp configuration functions ******************************************/
Nvoid RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState);
Nvoid RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct,
N                                      RTC_DateTypeDef* RTC_StampDateStruct);
Nuint32_t RTC_GetTimeStampSubSecond(void);
N
N/* Tampers configuration functions ********************************************/
Nvoid RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger);
Nvoid RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState);
Nvoid RTC_TamperFilterConfig(uint32_t RTC_TamperFilter);
Nvoid RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq);
Nvoid RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration);
Nvoid RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState);
Nvoid RTC_TamperPullUpCmd(FunctionalState NewState);
N
N/* Backup Data Registers configuration functions ******************************/
Nvoid RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data);
Nuint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR);
N
N/* RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
N   functions ******************************************************************/
Nvoid RTC_TamperPinSelection(uint32_t RTC_TamperPin);
Nvoid RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin);
Nvoid RTC_OutputTypeConfig(uint32_t RTC_OutputType);
N
N/* RTC_Shift_control_synchonisation_functions *********************************/
NErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS);
N
N/* Interrupts and flags management functions **********************************/
Nvoid RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState);
NFlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG);
Nvoid RTC_ClearFlag(uint32_t RTC_FLAG);
NITStatus RTC_GetITStatus(uint32_t RTC_IT);
Nvoid RTC_ClearITPendingBit(uint32_t RTC_IT);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__STM32F4xx_RTC_H */
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 63 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_sdio.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_sdio.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_sdio.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the SDIO firmware
N  *          library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_SDIO_H
N#define __STM32F4xx_SDIO_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup SDIO
N  * @{
N  */
N
N/* Exported types ------------------------------------------------------------*/
N
Ntypedef struct
N{
N  uint32_t SDIO_ClockEdge;            /*!< Specifies the clock transition on which the bit capture is made.
N                                           This parameter can be a value of @ref SDIO_Clock_Edge */
N
N  uint32_t SDIO_ClockBypass;          /*!< Specifies whether the SDIO Clock divider bypass is
N                                           enabled or disabled.
N                                           This parameter can be a value of @ref SDIO_Clock_Bypass */
N
N  uint32_t SDIO_ClockPowerSave;       /*!< Specifies whether SDIO Clock output is enabled or
N                                           disabled when the bus is idle.
N                                           This parameter can be a value of @ref SDIO_Clock_Power_Save */
N
N  uint32_t SDIO_BusWide;              /*!< Specifies the SDIO bus width.
N                                           This parameter can be a value of @ref SDIO_Bus_Wide */
N
N  uint32_t SDIO_HardwareFlowControl;  /*!< Specifies whether the SDIO hardware flow control is enabled or disabled.
N                                           This parameter can be a value of @ref SDIO_Hardware_Flow_Control */
N
N  uint8_t SDIO_ClockDiv;              /*!< Specifies the clock frequency of the SDIO controller.
N                                           This parameter can be a value between 0x00 and 0xFF. */
N                                           
N} SDIO_InitTypeDef;
N
Ntypedef struct
N{
N  uint32_t SDIO_Argument;  /*!< Specifies the SDIO command argument which is sent
N                                to a card as part of a command message. If a command
N                                contains an argument, it must be loaded into this register
N                                before writing the command to the command register */
N
N  uint32_t SDIO_CmdIndex;  /*!< Specifies the SDIO command index. It must be lower than 0x40. */
N
N  uint32_t SDIO_Response;  /*!< Specifies the SDIO response type.
N                                This parameter can be a value of @ref SDIO_Response_Type */
N
N  uint32_t SDIO_Wait;      /*!< Specifies whether SDIO wait for interrupt request is enabled or disabled.
N                                This parameter can be a value of @ref SDIO_Wait_Interrupt_State */
N
N  uint32_t SDIO_CPSM;      /*!< Specifies whether SDIO Command path state machine (CPSM)
N                                is enabled or disabled.
N                                This parameter can be a value of @ref SDIO_CPSM_State */
N} SDIO_CmdInitTypeDef;
N
Ntypedef struct
N{
N  uint32_t SDIO_DataTimeOut;    /*!< Specifies the data timeout period in card bus clock periods. */
N
N  uint32_t SDIO_DataLength;     /*!< Specifies the number of data bytes to be transferred. */
N 
N  uint32_t SDIO_DataBlockSize;  /*!< Specifies the data block size for block transfer.
N                                     This parameter can be a value of @ref SDIO_Data_Block_Size */
N 
N  uint32_t SDIO_TransferDir;    /*!< Specifies the data transfer direction, whether the transfer
N                                     is a read or write.
N                                     This parameter can be a value of @ref SDIO_Transfer_Direction */
N 
N  uint32_t SDIO_TransferMode;   /*!< Specifies whether data transfer is in stream or block mode.
N                                     This parameter can be a value of @ref SDIO_Transfer_Type */
N 
N  uint32_t SDIO_DPSM;           /*!< Specifies whether SDIO Data path state machine (DPSM)
N                                     is enabled or disabled.
N                                     This parameter can be a value of @ref SDIO_DPSM_State */
N} SDIO_DataInitTypeDef;
N
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup SDIO_Exported_Constants
N  * @{
N  */
N
N/** @defgroup SDIO_Clock_Edge 
N  * @{
N  */
N
N#define SDIO_ClockEdge_Rising               ((uint32_t)0x00000000)
N#define SDIO_ClockEdge_Falling              ((uint32_t)0x00002000)
N#define IS_SDIO_CLOCK_EDGE(EDGE) (((EDGE) == SDIO_ClockEdge_Rising) || \
N                                  ((EDGE) == SDIO_ClockEdge_Falling))
X#define IS_SDIO_CLOCK_EDGE(EDGE) (((EDGE) == SDIO_ClockEdge_Rising) ||                                   ((EDGE) == SDIO_ClockEdge_Falling))
N/**
N  * @}
N  */
N
N/** @defgroup SDIO_Clock_Bypass 
N  * @{
N  */
N
N#define SDIO_ClockBypass_Disable             ((uint32_t)0x00000000)
N#define SDIO_ClockBypass_Enable              ((uint32_t)0x00000400)    
N#define IS_SDIO_CLOCK_BYPASS(BYPASS) (((BYPASS) == SDIO_ClockBypass_Disable) || \
N                                     ((BYPASS) == SDIO_ClockBypass_Enable))
X#define IS_SDIO_CLOCK_BYPASS(BYPASS) (((BYPASS) == SDIO_ClockBypass_Disable) ||                                      ((BYPASS) == SDIO_ClockBypass_Enable))
N/**
N  * @}
N  */ 
N
N/** @defgroup SDIO_Clock_Power_Save 
N  * @{
N  */
N
N#define SDIO_ClockPowerSave_Disable         ((uint32_t)0x00000000)
N#define SDIO_ClockPowerSave_Enable          ((uint32_t)0x00000200) 
N#define IS_SDIO_CLOCK_POWER_SAVE(SAVE) (((SAVE) == SDIO_ClockPowerSave_Disable) || \
N                                        ((SAVE) == SDIO_ClockPowerSave_Enable))
X#define IS_SDIO_CLOCK_POWER_SAVE(SAVE) (((SAVE) == SDIO_ClockPowerSave_Disable) ||                                         ((SAVE) == SDIO_ClockPowerSave_Enable))
N/**
N  * @}
N  */
N
N/** @defgroup SDIO_Bus_Wide 
N  * @{
N  */
N
N#define SDIO_BusWide_1b                     ((uint32_t)0x00000000)
N#define SDIO_BusWide_4b                     ((uint32_t)0x00000800)
N#define SDIO_BusWide_8b                     ((uint32_t)0x00001000)
N#define IS_SDIO_BUS_WIDE(WIDE) (((WIDE) == SDIO_BusWide_1b) || ((WIDE) == SDIO_BusWide_4b) || \
N                                ((WIDE) == SDIO_BusWide_8b))
X#define IS_SDIO_BUS_WIDE(WIDE) (((WIDE) == SDIO_BusWide_1b) || ((WIDE) == SDIO_BusWide_4b) ||                                 ((WIDE) == SDIO_BusWide_8b))
N
N/**
N  * @}
N  */
N
N/** @defgroup SDIO_Hardware_Flow_Control 
N  * @{
N  */
N
N#define SDIO_HardwareFlowControl_Disable    ((uint32_t)0x00000000)
N#define SDIO_HardwareFlowControl_Enable     ((uint32_t)0x00004000)
N#define IS_SDIO_HARDWARE_FLOW_CONTROL(CONTROL) (((CONTROL) == SDIO_HardwareFlowControl_Disable) || \
N                                                ((CONTROL) == SDIO_HardwareFlowControl_Enable))
X#define IS_SDIO_HARDWARE_FLOW_CONTROL(CONTROL) (((CONTROL) == SDIO_HardwareFlowControl_Disable) ||                                                 ((CONTROL) == SDIO_HardwareFlowControl_Enable))
N/**
N  * @}
N  */
N
N/** @defgroup SDIO_Power_State 
N  * @{
N  */
N
N#define SDIO_PowerState_OFF                 ((uint32_t)0x00000000)
N#define SDIO_PowerState_ON                  ((uint32_t)0x00000003)
N#define IS_SDIO_POWER_STATE(STATE) (((STATE) == SDIO_PowerState_OFF) || ((STATE) == SDIO_PowerState_ON))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup SDIO_Interrupt_sources
N  * @{
N  */
N
N#define SDIO_IT_CCRCFAIL                    ((uint32_t)0x00000001)
N#define SDIO_IT_DCRCFAIL                    ((uint32_t)0x00000002)
N#define SDIO_IT_CTIMEOUT                    ((uint32_t)0x00000004)
N#define SDIO_IT_DTIMEOUT                    ((uint32_t)0x00000008)
N#define SDIO_IT_TXUNDERR                    ((uint32_t)0x00000010)
N#define SDIO_IT_RXOVERR                     ((uint32_t)0x00000020)
N#define SDIO_IT_CMDREND                     ((uint32_t)0x00000040)
N#define SDIO_IT_CMDSENT                     ((uint32_t)0x00000080)
N#define SDIO_IT_DATAEND                     ((uint32_t)0x00000100)
N#define SDIO_IT_STBITERR                    ((uint32_t)0x00000200)
N#define SDIO_IT_DBCKEND                     ((uint32_t)0x00000400)
N#define SDIO_IT_CMDACT                      ((uint32_t)0x00000800)
N#define SDIO_IT_TXACT                       ((uint32_t)0x00001000)
N#define SDIO_IT_RXACT                       ((uint32_t)0x00002000)
N#define SDIO_IT_TXFIFOHE                    ((uint32_t)0x00004000)
N#define SDIO_IT_RXFIFOHF                    ((uint32_t)0x00008000)
N#define SDIO_IT_TXFIFOF                     ((uint32_t)0x00010000)
N#define SDIO_IT_RXFIFOF                     ((uint32_t)0x00020000)
N#define SDIO_IT_TXFIFOE                     ((uint32_t)0x00040000)
N#define SDIO_IT_RXFIFOE                     ((uint32_t)0x00080000)
N#define SDIO_IT_TXDAVL                      ((uint32_t)0x00100000)
N#define SDIO_IT_RXDAVL                      ((uint32_t)0x00200000)
N#define SDIO_IT_SDIOIT                      ((uint32_t)0x00400000)
N#define SDIO_IT_CEATAEND                    ((uint32_t)0x00800000)
N#define IS_SDIO_IT(IT) ((((IT) & (uint32_t)0xFF000000) == 0x00) && ((IT) != (uint32_t)0x00))
N/**
N  * @}
N  */ 
N
N/** @defgroup SDIO_Command_Index
N  * @{
N  */
N
N#define IS_SDIO_CMD_INDEX(INDEX)            ((INDEX) < 0x40)
N/**
N  * @}
N  */
N
N/** @defgroup SDIO_Response_Type
N  * @{
N  */
N
N#define SDIO_Response_No                    ((uint32_t)0x00000000)
N#define SDIO_Response_Short                 ((uint32_t)0x00000040)
N#define SDIO_Response_Long                  ((uint32_t)0x000000C0)
N#define IS_SDIO_RESPONSE(RESPONSE) (((RESPONSE) == SDIO_Response_No) || \
N                                    ((RESPONSE) == SDIO_Response_Short) || \
N                                    ((RESPONSE) == SDIO_Response_Long))
X#define IS_SDIO_RESPONSE(RESPONSE) (((RESPONSE) == SDIO_Response_No) ||                                     ((RESPONSE) == SDIO_Response_Short) ||                                     ((RESPONSE) == SDIO_Response_Long))
N/**
N  * @}
N  */
N
N/** @defgroup SDIO_Wait_Interrupt_State
N  * @{
N  */
N
N#define SDIO_Wait_No                        ((uint32_t)0x00000000) /*!< SDIO No Wait, TimeOut is enabled */
N#define SDIO_Wait_IT                        ((uint32_t)0x00000100) /*!< SDIO Wait Interrupt Request */
N#define SDIO_Wait_Pend                      ((uint32_t)0x00000200) /*!< SDIO Wait End of transfer */
N#define IS_SDIO_WAIT(WAIT) (((WAIT) == SDIO_Wait_No) || ((WAIT) == SDIO_Wait_IT) || \
N                            ((WAIT) == SDIO_Wait_Pend))
X#define IS_SDIO_WAIT(WAIT) (((WAIT) == SDIO_Wait_No) || ((WAIT) == SDIO_Wait_IT) ||                             ((WAIT) == SDIO_Wait_Pend))
N/**
N  * @}
N  */
N
N/** @defgroup SDIO_CPSM_State
N  * @{
N  */
N
N#define SDIO_CPSM_Disable                    ((uint32_t)0x00000000)
N#define SDIO_CPSM_Enable                     ((uint32_t)0x00000400)
N#define IS_SDIO_CPSM(CPSM) (((CPSM) == SDIO_CPSM_Enable) || ((CPSM) == SDIO_CPSM_Disable))
N/**
N  * @}
N  */ 
N
N/** @defgroup SDIO_Response_Registers
N  * @{
N  */
N
N#define SDIO_RESP1                          ((uint32_t)0x00000000)
N#define SDIO_RESP2                          ((uint32_t)0x00000004)
N#define SDIO_RESP3                          ((uint32_t)0x00000008)
N#define SDIO_RESP4                          ((uint32_t)0x0000000C)
N#define IS_SDIO_RESP(RESP) (((RESP) == SDIO_RESP1) || ((RESP) == SDIO_RESP2) || \
N                            ((RESP) == SDIO_RESP3) || ((RESP) == SDIO_RESP4))
X#define IS_SDIO_RESP(RESP) (((RESP) == SDIO_RESP1) || ((RESP) == SDIO_RESP2) ||                             ((RESP) == SDIO_RESP3) || ((RESP) == SDIO_RESP4))
N/**
N  * @}
N  */
N
N/** @defgroup SDIO_Data_Length 
N  * @{
N  */
N
N#define IS_SDIO_DATA_LENGTH(LENGTH) ((LENGTH) <= 0x01FFFFFF)
N/**
N  * @}
N  */
N
N/** @defgroup SDIO_Data_Block_Size 
N  * @{
N  */
N
N#define SDIO_DataBlockSize_1b               ((uint32_t)0x00000000)
N#define SDIO_DataBlockSize_2b               ((uint32_t)0x00000010)
N#define SDIO_DataBlockSize_4b               ((uint32_t)0x00000020)
N#define SDIO_DataBlockSize_8b               ((uint32_t)0x00000030)
N#define SDIO_DataBlockSize_16b              ((uint32_t)0x00000040)
N#define SDIO_DataBlockSize_32b              ((uint32_t)0x00000050)
N#define SDIO_DataBlockSize_64b              ((uint32_t)0x00000060)
N#define SDIO_DataBlockSize_128b             ((uint32_t)0x00000070)
N#define SDIO_DataBlockSize_256b             ((uint32_t)0x00000080)
N#define SDIO_DataBlockSize_512b             ((uint32_t)0x00000090)
N#define SDIO_DataBlockSize_1024b            ((uint32_t)0x000000A0)
N#define SDIO_DataBlockSize_2048b            ((uint32_t)0x000000B0)
N#define SDIO_DataBlockSize_4096b            ((uint32_t)0x000000C0)
N#define SDIO_DataBlockSize_8192b            ((uint32_t)0x000000D0)
N#define SDIO_DataBlockSize_16384b           ((uint32_t)0x000000E0)
N#define IS_SDIO_BLOCK_SIZE(SIZE) (((SIZE) == SDIO_DataBlockSize_1b) || \
N                                  ((SIZE) == SDIO_DataBlockSize_2b) || \
N                                  ((SIZE) == SDIO_DataBlockSize_4b) || \
N                                  ((SIZE) == SDIO_DataBlockSize_8b) || \
N                                  ((SIZE) == SDIO_DataBlockSize_16b) || \
N                                  ((SIZE) == SDIO_DataBlockSize_32b) || \
N                                  ((SIZE) == SDIO_DataBlockSize_64b) || \
N                                  ((SIZE) == SDIO_DataBlockSize_128b) || \
N                                  ((SIZE) == SDIO_DataBlockSize_256b) || \
N                                  ((SIZE) == SDIO_DataBlockSize_512b) || \
N                                  ((SIZE) == SDIO_DataBlockSize_1024b) || \
N                                  ((SIZE) == SDIO_DataBlockSize_2048b) || \
N                                  ((SIZE) == SDIO_DataBlockSize_4096b) || \
N                                  ((SIZE) == SDIO_DataBlockSize_8192b) || \
N                                  ((SIZE) == SDIO_DataBlockSize_16384b)) 
X#define IS_SDIO_BLOCK_SIZE(SIZE) (((SIZE) == SDIO_DataBlockSize_1b) ||                                   ((SIZE) == SDIO_DataBlockSize_2b) ||                                   ((SIZE) == SDIO_DataBlockSize_4b) ||                                   ((SIZE) == SDIO_DataBlockSize_8b) ||                                   ((SIZE) == SDIO_DataBlockSize_16b) ||                                   ((SIZE) == SDIO_DataBlockSize_32b) ||                                   ((SIZE) == SDIO_DataBlockSize_64b) ||                                   ((SIZE) == SDIO_DataBlockSize_128b) ||                                   ((SIZE) == SDIO_DataBlockSize_256b) ||                                   ((SIZE) == SDIO_DataBlockSize_512b) ||                                   ((SIZE) == SDIO_DataBlockSize_1024b) ||                                   ((SIZE) == SDIO_DataBlockSize_2048b) ||                                   ((SIZE) == SDIO_DataBlockSize_4096b) ||                                   ((SIZE) == SDIO_DataBlockSize_8192b) ||                                   ((SIZE) == SDIO_DataBlockSize_16384b)) 
N/**
N  * @}
N  */
N
N/** @defgroup SDIO_Transfer_Direction 
N  * @{
N  */
N
N#define SDIO_TransferDir_ToCard             ((uint32_t)0x00000000)
N#define SDIO_TransferDir_ToSDIO             ((uint32_t)0x00000002)
N#define IS_SDIO_TRANSFER_DIR(DIR) (((DIR) == SDIO_TransferDir_ToCard) || \
N                                   ((DIR) == SDIO_TransferDir_ToSDIO))
X#define IS_SDIO_TRANSFER_DIR(DIR) (((DIR) == SDIO_TransferDir_ToCard) ||                                    ((DIR) == SDIO_TransferDir_ToSDIO))
N/**
N  * @}
N  */
N
N/** @defgroup SDIO_Transfer_Type 
N  * @{
N  */
N
N#define SDIO_TransferMode_Block             ((uint32_t)0x00000000)
N#define SDIO_TransferMode_Stream            ((uint32_t)0x00000004)
N#define IS_SDIO_TRANSFER_MODE(MODE) (((MODE) == SDIO_TransferMode_Stream) || \
N                                     ((MODE) == SDIO_TransferMode_Block))
X#define IS_SDIO_TRANSFER_MODE(MODE) (((MODE) == SDIO_TransferMode_Stream) ||                                      ((MODE) == SDIO_TransferMode_Block))
N/**
N  * @}
N  */
N
N/** @defgroup SDIO_DPSM_State 
N  * @{
N  */
N
N#define SDIO_DPSM_Disable                    ((uint32_t)0x00000000)
N#define SDIO_DPSM_Enable                     ((uint32_t)0x00000001)
N#define IS_SDIO_DPSM(DPSM) (((DPSM) == SDIO_DPSM_Enable) || ((DPSM) == SDIO_DPSM_Disable))
N/**
N  * @}
N  */
N
N/** @defgroup SDIO_Flags 
N  * @{
N  */
N
N#define SDIO_FLAG_CCRCFAIL                  ((uint32_t)0x00000001)
N#define SDIO_FLAG_DCRCFAIL                  ((uint32_t)0x00000002)
N#define SDIO_FLAG_CTIMEOUT                  ((uint32_t)0x00000004)
N#define SDIO_FLAG_DTIMEOUT                  ((uint32_t)0x00000008)
N#define SDIO_FLAG_TXUNDERR                  ((uint32_t)0x00000010)
N#define SDIO_FLAG_RXOVERR                   ((uint32_t)0x00000020)
N#define SDIO_FLAG_CMDREND                   ((uint32_t)0x00000040)
N#define SDIO_FLAG_CMDSENT                   ((uint32_t)0x00000080)
N#define SDIO_FLAG_DATAEND                   ((uint32_t)0x00000100)
N#define SDIO_FLAG_STBITERR                  ((uint32_t)0x00000200)
N#define SDIO_FLAG_DBCKEND                   ((uint32_t)0x00000400)
N#define SDIO_FLAG_CMDACT                    ((uint32_t)0x00000800)
N#define SDIO_FLAG_TXACT                     ((uint32_t)0x00001000)
N#define SDIO_FLAG_RXACT                     ((uint32_t)0x00002000)
N#define SDIO_FLAG_TXFIFOHE                  ((uint32_t)0x00004000)
N#define SDIO_FLAG_RXFIFOHF                  ((uint32_t)0x00008000)
N#define SDIO_FLAG_TXFIFOF                   ((uint32_t)0x00010000)
N#define SDIO_FLAG_RXFIFOF                   ((uint32_t)0x00020000)
N#define SDIO_FLAG_TXFIFOE                   ((uint32_t)0x00040000)
N#define SDIO_FLAG_RXFIFOE                   ((uint32_t)0x00080000)
N#define SDIO_FLAG_TXDAVL                    ((uint32_t)0x00100000)
N#define SDIO_FLAG_RXDAVL                    ((uint32_t)0x00200000)
N#define SDIO_FLAG_SDIOIT                    ((uint32_t)0x00400000)
N#define SDIO_FLAG_CEATAEND                  ((uint32_t)0x00800000)
N#define IS_SDIO_FLAG(FLAG) (((FLAG)  == SDIO_FLAG_CCRCFAIL) || \
N                            ((FLAG)  == SDIO_FLAG_DCRCFAIL) || \
N                            ((FLAG)  == SDIO_FLAG_CTIMEOUT) || \
N                            ((FLAG)  == SDIO_FLAG_DTIMEOUT) || \
N                            ((FLAG)  == SDIO_FLAG_TXUNDERR) || \
N                            ((FLAG)  == SDIO_FLAG_RXOVERR) || \
N                            ((FLAG)  == SDIO_FLAG_CMDREND) || \
N                            ((FLAG)  == SDIO_FLAG_CMDSENT) || \
N                            ((FLAG)  == SDIO_FLAG_DATAEND) || \
N                            ((FLAG)  == SDIO_FLAG_STBITERR) || \
N                            ((FLAG)  == SDIO_FLAG_DBCKEND) || \
N                            ((FLAG)  == SDIO_FLAG_CMDACT) || \
N                            ((FLAG)  == SDIO_FLAG_TXACT) || \
N                            ((FLAG)  == SDIO_FLAG_RXACT) || \
N                            ((FLAG)  == SDIO_FLAG_TXFIFOHE) || \
N                            ((FLAG)  == SDIO_FLAG_RXFIFOHF) || \
N                            ((FLAG)  == SDIO_FLAG_TXFIFOF) || \
N                            ((FLAG)  == SDIO_FLAG_RXFIFOF) || \
N                            ((FLAG)  == SDIO_FLAG_TXFIFOE) || \
N                            ((FLAG)  == SDIO_FLAG_RXFIFOE) || \
N                            ((FLAG)  == SDIO_FLAG_TXDAVL) || \
N                            ((FLAG)  == SDIO_FLAG_RXDAVL) || \
N                            ((FLAG)  == SDIO_FLAG_SDIOIT) || \
N                            ((FLAG)  == SDIO_FLAG_CEATAEND))
X#define IS_SDIO_FLAG(FLAG) (((FLAG)  == SDIO_FLAG_CCRCFAIL) ||                             ((FLAG)  == SDIO_FLAG_DCRCFAIL) ||                             ((FLAG)  == SDIO_FLAG_CTIMEOUT) ||                             ((FLAG)  == SDIO_FLAG_DTIMEOUT) ||                             ((FLAG)  == SDIO_FLAG_TXUNDERR) ||                             ((FLAG)  == SDIO_FLAG_RXOVERR) ||                             ((FLAG)  == SDIO_FLAG_CMDREND) ||                             ((FLAG)  == SDIO_FLAG_CMDSENT) ||                             ((FLAG)  == SDIO_FLAG_DATAEND) ||                             ((FLAG)  == SDIO_FLAG_STBITERR) ||                             ((FLAG)  == SDIO_FLAG_DBCKEND) ||                             ((FLAG)  == SDIO_FLAG_CMDACT) ||                             ((FLAG)  == SDIO_FLAG_TXACT) ||                             ((FLAG)  == SDIO_FLAG_RXACT) ||                             ((FLAG)  == SDIO_FLAG_TXFIFOHE) ||                             ((FLAG)  == SDIO_FLAG_RXFIFOHF) ||                             ((FLAG)  == SDIO_FLAG_TXFIFOF) ||                             ((FLAG)  == SDIO_FLAG_RXFIFOF) ||                             ((FLAG)  == SDIO_FLAG_TXFIFOE) ||                             ((FLAG)  == SDIO_FLAG_RXFIFOE) ||                             ((FLAG)  == SDIO_FLAG_TXDAVL) ||                             ((FLAG)  == SDIO_FLAG_RXDAVL) ||                             ((FLAG)  == SDIO_FLAG_SDIOIT) ||                             ((FLAG)  == SDIO_FLAG_CEATAEND))
N
N#define IS_SDIO_CLEAR_FLAG(FLAG) ((((FLAG) & (uint32_t)0xFF3FF800) == 0x00) && ((FLAG) != (uint32_t)0x00))
N
N#define IS_SDIO_GET_IT(IT) (((IT)  == SDIO_IT_CCRCFAIL) || \
N                            ((IT)  == SDIO_IT_DCRCFAIL) || \
N                            ((IT)  == SDIO_IT_CTIMEOUT) || \
N                            ((IT)  == SDIO_IT_DTIMEOUT) || \
N                            ((IT)  == SDIO_IT_TXUNDERR) || \
N                            ((IT)  == SDIO_IT_RXOVERR) || \
N                            ((IT)  == SDIO_IT_CMDREND) || \
N                            ((IT)  == SDIO_IT_CMDSENT) || \
N                            ((IT)  == SDIO_IT_DATAEND) || \
N                            ((IT)  == SDIO_IT_STBITERR) || \
N                            ((IT)  == SDIO_IT_DBCKEND) || \
N                            ((IT)  == SDIO_IT_CMDACT) || \
N                            ((IT)  == SDIO_IT_TXACT) || \
N                            ((IT)  == SDIO_IT_RXACT) || \
N                            ((IT)  == SDIO_IT_TXFIFOHE) || \
N                            ((IT)  == SDIO_IT_RXFIFOHF) || \
N                            ((IT)  == SDIO_IT_TXFIFOF) || \
N                            ((IT)  == SDIO_IT_RXFIFOF) || \
N                            ((IT)  == SDIO_IT_TXFIFOE) || \
N                            ((IT)  == SDIO_IT_RXFIFOE) || \
N                            ((IT)  == SDIO_IT_TXDAVL) || \
N                            ((IT)  == SDIO_IT_RXDAVL) || \
N                            ((IT)  == SDIO_IT_SDIOIT) || \
N                            ((IT)  == SDIO_IT_CEATAEND))
X#define IS_SDIO_GET_IT(IT) (((IT)  == SDIO_IT_CCRCFAIL) ||                             ((IT)  == SDIO_IT_DCRCFAIL) ||                             ((IT)  == SDIO_IT_CTIMEOUT) ||                             ((IT)  == SDIO_IT_DTIMEOUT) ||                             ((IT)  == SDIO_IT_TXUNDERR) ||                             ((IT)  == SDIO_IT_RXOVERR) ||                             ((IT)  == SDIO_IT_CMDREND) ||                             ((IT)  == SDIO_IT_CMDSENT) ||                             ((IT)  == SDIO_IT_DATAEND) ||                             ((IT)  == SDIO_IT_STBITERR) ||                             ((IT)  == SDIO_IT_DBCKEND) ||                             ((IT)  == SDIO_IT_CMDACT) ||                             ((IT)  == SDIO_IT_TXACT) ||                             ((IT)  == SDIO_IT_RXACT) ||                             ((IT)  == SDIO_IT_TXFIFOHE) ||                             ((IT)  == SDIO_IT_RXFIFOHF) ||                             ((IT)  == SDIO_IT_TXFIFOF) ||                             ((IT)  == SDIO_IT_RXFIFOF) ||                             ((IT)  == SDIO_IT_TXFIFOE) ||                             ((IT)  == SDIO_IT_RXFIFOE) ||                             ((IT)  == SDIO_IT_TXDAVL) ||                             ((IT)  == SDIO_IT_RXDAVL) ||                             ((IT)  == SDIO_IT_SDIOIT) ||                             ((IT)  == SDIO_IT_CEATAEND))
N
N#define IS_SDIO_CLEAR_IT(IT) ((((IT) & (uint32_t)0xFF3FF800) == 0x00) && ((IT) != (uint32_t)0x00))
N
N/**
N  * @}
N  */
N
N/** @defgroup SDIO_Read_Wait_Mode 
N  * @{
N  */
N
N#define SDIO_ReadWaitMode_DATA2             ((uint32_t)0x00000000)
N#define SDIO_ReadWaitMode_CLK               ((uint32_t)0x00000001)
N#define IS_SDIO_READWAIT_MODE(MODE) (((MODE) == SDIO_ReadWaitMode_CLK) || \
N                                     ((MODE) == SDIO_ReadWaitMode_DATA2))
X#define IS_SDIO_READWAIT_MODE(MODE) (((MODE) == SDIO_ReadWaitMode_CLK) ||                                      ((MODE) == SDIO_ReadWaitMode_DATA2))
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/
N/*  Function used to set the SDIO configuration to the default reset state ****/
Nvoid SDIO_DeInit(void);
N
N/* Initialization and Configuration functions *********************************/
Nvoid SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct);
Nvoid SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct);
Nvoid SDIO_ClockCmd(FunctionalState NewState);
Nvoid SDIO_SetPowerState(uint32_t SDIO_PowerState);
Nuint32_t SDIO_GetPowerState(void);
N
N/* Command path state machine (CPSM) management functions *********************/
Nvoid SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct);
Nvoid SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct);
Nuint8_t SDIO_GetCommandResponse(void);
Nuint32_t SDIO_GetResponse(uint32_t SDIO_RESP);
N
N/* Data path state machine (DPSM) management functions ************************/
Nvoid SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct);
Nvoid SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct);
Nuint32_t SDIO_GetDataCounter(void);
Nuint32_t SDIO_ReadData(void);
Nvoid SDIO_WriteData(uint32_t Data);
Nuint32_t SDIO_GetFIFOCount(void);
N
N/* SDIO IO Cards mode management functions ************************************/
Nvoid SDIO_StartSDIOReadWait(FunctionalState NewState);
Nvoid SDIO_StopSDIOReadWait(FunctionalState NewState);
Nvoid SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode);
Nvoid SDIO_SetSDIOOperation(FunctionalState NewState);
Nvoid SDIO_SendSDIOSuspendCmd(FunctionalState NewState);
N
N/* CE-ATA mode management functions *******************************************/
Nvoid SDIO_CommandCompletionCmd(FunctionalState NewState);
Nvoid SDIO_CEATAITCmd(FunctionalState NewState);
Nvoid SDIO_SendCEATACmd(FunctionalState NewState);
N
N/* DMA transfers management functions *****************************************/
Nvoid SDIO_DMACmd(FunctionalState NewState);
N
N/* Interrupts and flags management functions **********************************/
Nvoid SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState);
NFlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG);
Nvoid SDIO_ClearFlag(uint32_t SDIO_FLAG);
NITStatus SDIO_GetITStatus(uint32_t SDIO_IT);
Nvoid SDIO_ClearITPendingBit(uint32_t SDIO_IT);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32F4xx_SDIO_H */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 64 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_spi.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_spi.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_spi.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the SPI 
N  *          firmware library. 
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************  
N  */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_SPI_H
N#define __STM32F4xx_SPI_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup SPI
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/
N
N/** 
N  * @brief  SPI Init structure definition  
N  */
N
Ntypedef struct
N{
N  uint16_t SPI_Direction;           /*!< Specifies the SPI unidirectional or bidirectional data mode.
N                                         This parameter can be a value of @ref SPI_data_direction */
N
N  uint16_t SPI_Mode;                /*!< Specifies the SPI operating mode.
N                                         This parameter can be a value of @ref SPI_mode */
N
N  uint16_t SPI_DataSize;            /*!< Specifies the SPI data size.
N                                         This parameter can be a value of @ref SPI_data_size */
N
N  uint16_t SPI_CPOL;                /*!< Specifies the serial clock steady state.
N                                         This parameter can be a value of @ref SPI_Clock_Polarity */
N
N  uint16_t SPI_CPHA;                /*!< Specifies the clock active edge for the bit capture.
N                                         This parameter can be a value of @ref SPI_Clock_Phase */
N
N  uint16_t SPI_NSS;                 /*!< Specifies whether the NSS signal is managed by
N                                         hardware (NSS pin) or by software using the SSI bit.
N                                         This parameter can be a value of @ref SPI_Slave_Select_management */
N 
N  uint16_t SPI_BaudRatePrescaler;   /*!< Specifies the Baud Rate prescaler value which will be
N                                         used to configure the transmit and receive SCK clock.
N                                         This parameter can be a value of @ref SPI_BaudRate_Prescaler
N                                         @note The communication clock is derived from the master
N                                               clock. The slave clock does not need to be set. */
N
N  uint16_t SPI_FirstBit;            /*!< Specifies whether data transfers start from MSB or LSB bit.
N                                         This parameter can be a value of @ref SPI_MSB_LSB_transmission */
N
N  uint16_t SPI_CRCPolynomial;       /*!< Specifies the polynomial used for the CRC calculation. */
N}SPI_InitTypeDef;
N
N/** 
N  * @brief  I2S Init structure definition  
N  */
N
Ntypedef struct
N{
N
N  uint16_t I2S_Mode;         /*!< Specifies the I2S operating mode.
N                                  This parameter can be a value of @ref I2S_Mode */
N
N  uint16_t I2S_Standard;     /*!< Specifies the standard used for the I2S communication.
N                                  This parameter can be a value of @ref I2S_Standard */
N
N  uint16_t I2S_DataFormat;   /*!< Specifies the data format for the I2S communication.
N                                  This parameter can be a value of @ref I2S_Data_Format */
N
N  uint16_t I2S_MCLKOutput;   /*!< Specifies whether the I2S MCLK output is enabled or not.
N                                  This parameter can be a value of @ref I2S_MCLK_Output */
N
N  uint32_t I2S_AudioFreq;    /*!< Specifies the frequency selected for the I2S communication.
N                                  This parameter can be a value of @ref I2S_Audio_Frequency */
N
N  uint16_t I2S_CPOL;         /*!< Specifies the idle state of the I2S clock.
N                                  This parameter can be a value of @ref I2S_Clock_Polarity */
N}I2S_InitTypeDef;
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup SPI_Exported_Constants
N  * @{
N  */
N
N#define IS_SPI_ALL_PERIPH(PERIPH) (((PERIPH) == SPI1) || \
N                                   ((PERIPH) == SPI2) || \
N                                   ((PERIPH) == SPI3) || \
N                                   ((PERIPH) == SPI4) || \
N                                   ((PERIPH) == SPI5) || \
N                                   ((PERIPH) == SPI6))
X#define IS_SPI_ALL_PERIPH(PERIPH) (((PERIPH) == SPI1) ||                                    ((PERIPH) == SPI2) ||                                    ((PERIPH) == SPI3) ||                                    ((PERIPH) == SPI4) ||                                    ((PERIPH) == SPI5) ||                                    ((PERIPH) == SPI6))
N
N#define IS_SPI_ALL_PERIPH_EXT(PERIPH) (((PERIPH) == SPI1)    || \
N                                       ((PERIPH) == SPI2)    || \
N                                       ((PERIPH) == SPI3)    || \
N                                       ((PERIPH) == SPI4)    || \
N                                       ((PERIPH) == SPI5)    || \
N                                       ((PERIPH) == SPI6)    || \
N                                       ((PERIPH) == I2S2ext) || \
N                                       ((PERIPH) == I2S3ext))
X#define IS_SPI_ALL_PERIPH_EXT(PERIPH) (((PERIPH) == SPI1)    ||                                        ((PERIPH) == SPI2)    ||                                        ((PERIPH) == SPI3)    ||                                        ((PERIPH) == SPI4)    ||                                        ((PERIPH) == SPI5)    ||                                        ((PERIPH) == SPI6)    ||                                        ((PERIPH) == I2S2ext) ||                                        ((PERIPH) == I2S3ext))
N
N#define IS_SPI_23_PERIPH(PERIPH)  (((PERIPH) == SPI2) || \
N                                   ((PERIPH) == SPI3))
X#define IS_SPI_23_PERIPH(PERIPH)  (((PERIPH) == SPI2) ||                                    ((PERIPH) == SPI3))
N
N#define IS_SPI_23_PERIPH_EXT(PERIPH)  (((PERIPH) == SPI2)    || \
N                                       ((PERIPH) == SPI3)    || \
N                                       ((PERIPH) == I2S2ext) || \
N                                       ((PERIPH) == I2S3ext))
X#define IS_SPI_23_PERIPH_EXT(PERIPH)  (((PERIPH) == SPI2)    ||                                        ((PERIPH) == SPI3)    ||                                        ((PERIPH) == I2S2ext) ||                                        ((PERIPH) == I2S3ext))
N
N#define IS_I2S_EXT_PERIPH(PERIPH)  (((PERIPH) == I2S2ext) || \
N                                    ((PERIPH) == I2S3ext))
X#define IS_I2S_EXT_PERIPH(PERIPH)  (((PERIPH) == I2S2ext) ||                                     ((PERIPH) == I2S3ext))
N
N
N/** @defgroup SPI_data_direction 
N  * @{
N  */
N  
N#define SPI_Direction_2Lines_FullDuplex ((uint16_t)0x0000)
N#define SPI_Direction_2Lines_RxOnly     ((uint16_t)0x0400)
N#define SPI_Direction_1Line_Rx          ((uint16_t)0x8000)
N#define SPI_Direction_1Line_Tx          ((uint16_t)0xC000)
N#define IS_SPI_DIRECTION_MODE(MODE) (((MODE) == SPI_Direction_2Lines_FullDuplex) || \
N                                     ((MODE) == SPI_Direction_2Lines_RxOnly) || \
N                                     ((MODE) == SPI_Direction_1Line_Rx) || \
N                                     ((MODE) == SPI_Direction_1Line_Tx))
X#define IS_SPI_DIRECTION_MODE(MODE) (((MODE) == SPI_Direction_2Lines_FullDuplex) ||                                      ((MODE) == SPI_Direction_2Lines_RxOnly) ||                                      ((MODE) == SPI_Direction_1Line_Rx) ||                                      ((MODE) == SPI_Direction_1Line_Tx))
N/**
N  * @}
N  */
N
N/** @defgroup SPI_mode 
N  * @{
N  */
N
N#define SPI_Mode_Master                 ((uint16_t)0x0104)
N#define SPI_Mode_Slave                  ((uint16_t)0x0000)
N#define IS_SPI_MODE(MODE) (((MODE) == SPI_Mode_Master) || \
N                           ((MODE) == SPI_Mode_Slave))
X#define IS_SPI_MODE(MODE) (((MODE) == SPI_Mode_Master) ||                            ((MODE) == SPI_Mode_Slave))
N/**
N  * @}
N  */
N
N/** @defgroup SPI_data_size 
N  * @{
N  */
N
N#define SPI_DataSize_16b                ((uint16_t)0x0800)
N#define SPI_DataSize_8b                 ((uint16_t)0x0000)
N#define IS_SPI_DATASIZE(DATASIZE) (((DATASIZE) == SPI_DataSize_16b) || \
N                                   ((DATASIZE) == SPI_DataSize_8b))
X#define IS_SPI_DATASIZE(DATASIZE) (((DATASIZE) == SPI_DataSize_16b) ||                                    ((DATASIZE) == SPI_DataSize_8b))
N/**
N  * @}
N  */ 
N
N/** @defgroup SPI_Clock_Polarity 
N  * @{
N  */
N
N#define SPI_CPOL_Low                    ((uint16_t)0x0000)
N#define SPI_CPOL_High                   ((uint16_t)0x0002)
N#define IS_SPI_CPOL(CPOL) (((CPOL) == SPI_CPOL_Low) || \
N                           ((CPOL) == SPI_CPOL_High))
X#define IS_SPI_CPOL(CPOL) (((CPOL) == SPI_CPOL_Low) ||                            ((CPOL) == SPI_CPOL_High))
N/**
N  * @}
N  */
N
N/** @defgroup SPI_Clock_Phase 
N  * @{
N  */
N
N#define SPI_CPHA_1Edge                  ((uint16_t)0x0000)
N#define SPI_CPHA_2Edge                  ((uint16_t)0x0001)
N#define IS_SPI_CPHA(CPHA) (((CPHA) == SPI_CPHA_1Edge) || \
N                           ((CPHA) == SPI_CPHA_2Edge))
X#define IS_SPI_CPHA(CPHA) (((CPHA) == SPI_CPHA_1Edge) ||                            ((CPHA) == SPI_CPHA_2Edge))
N/**
N  * @}
N  */
N
N/** @defgroup SPI_Slave_Select_management 
N  * @{
N  */
N
N#define SPI_NSS_Soft                    ((uint16_t)0x0200)
N#define SPI_NSS_Hard                    ((uint16_t)0x0000)
N#define IS_SPI_NSS(NSS) (((NSS) == SPI_NSS_Soft) || \
N                         ((NSS) == SPI_NSS_Hard))
X#define IS_SPI_NSS(NSS) (((NSS) == SPI_NSS_Soft) ||                          ((NSS) == SPI_NSS_Hard))
N/**
N  * @}
N  */ 
N
N/** @defgroup SPI_BaudRate_Prescaler 
N  * @{
N  */
N
N#define SPI_BaudRatePrescaler_2         ((uint16_t)0x0000)
N#define SPI_BaudRatePrescaler_4         ((uint16_t)0x0008)
N#define SPI_BaudRatePrescaler_8         ((uint16_t)0x0010)
N#define SPI_BaudRatePrescaler_16        ((uint16_t)0x0018)
N#define SPI_BaudRatePrescaler_32        ((uint16_t)0x0020)
N#define SPI_BaudRatePrescaler_64        ((uint16_t)0x0028)
N#define SPI_BaudRatePrescaler_128       ((uint16_t)0x0030)
N#define SPI_BaudRatePrescaler_256       ((uint16_t)0x0038)
N#define IS_SPI_BAUDRATE_PRESCALER(PRESCALER) (((PRESCALER) == SPI_BaudRatePrescaler_2) || \
N                                              ((PRESCALER) == SPI_BaudRatePrescaler_4) || \
N                                              ((PRESCALER) == SPI_BaudRatePrescaler_8) || \
N                                              ((PRESCALER) == SPI_BaudRatePrescaler_16) || \
N                                              ((PRESCALER) == SPI_BaudRatePrescaler_32) || \
N                                              ((PRESCALER) == SPI_BaudRatePrescaler_64) || \
N                                              ((PRESCALER) == SPI_BaudRatePrescaler_128) || \
N                                              ((PRESCALER) == SPI_BaudRatePrescaler_256))
X#define IS_SPI_BAUDRATE_PRESCALER(PRESCALER) (((PRESCALER) == SPI_BaudRatePrescaler_2) ||                                               ((PRESCALER) == SPI_BaudRatePrescaler_4) ||                                               ((PRESCALER) == SPI_BaudRatePrescaler_8) ||                                               ((PRESCALER) == SPI_BaudRatePrescaler_16) ||                                               ((PRESCALER) == SPI_BaudRatePrescaler_32) ||                                               ((PRESCALER) == SPI_BaudRatePrescaler_64) ||                                               ((PRESCALER) == SPI_BaudRatePrescaler_128) ||                                               ((PRESCALER) == SPI_BaudRatePrescaler_256))
N/**
N  * @}
N  */ 
N
N/** @defgroup SPI_MSB_LSB_transmission 
N  * @{
N  */
N
N#define SPI_FirstBit_MSB                ((uint16_t)0x0000)
N#define SPI_FirstBit_LSB                ((uint16_t)0x0080)
N#define IS_SPI_FIRST_BIT(BIT) (((BIT) == SPI_FirstBit_MSB) || \
N                               ((BIT) == SPI_FirstBit_LSB))
X#define IS_SPI_FIRST_BIT(BIT) (((BIT) == SPI_FirstBit_MSB) ||                                ((BIT) == SPI_FirstBit_LSB))
N/**
N  * @}
N  */
N
N/** @defgroup SPI_I2S_Mode 
N  * @{
N  */
N
N#define I2S_Mode_SlaveTx                ((uint16_t)0x0000)
N#define I2S_Mode_SlaveRx                ((uint16_t)0x0100)
N#define I2S_Mode_MasterTx               ((uint16_t)0x0200)
N#define I2S_Mode_MasterRx               ((uint16_t)0x0300)
N#define IS_I2S_MODE(MODE) (((MODE) == I2S_Mode_SlaveTx) || \
N                           ((MODE) == I2S_Mode_SlaveRx) || \
N                           ((MODE) == I2S_Mode_MasterTx)|| \
N                           ((MODE) == I2S_Mode_MasterRx))
X#define IS_I2S_MODE(MODE) (((MODE) == I2S_Mode_SlaveTx) ||                            ((MODE) == I2S_Mode_SlaveRx) ||                            ((MODE) == I2S_Mode_MasterTx)||                            ((MODE) == I2S_Mode_MasterRx))
N/**
N  * @}
N  */
N  
N
N/** @defgroup SPI_I2S_Standard 
N  * @{
N  */
N
N#define I2S_Standard_Phillips           ((uint16_t)0x0000)
N#define I2S_Standard_MSB                ((uint16_t)0x0010)
N#define I2S_Standard_LSB                ((uint16_t)0x0020)
N#define I2S_Standard_PCMShort           ((uint16_t)0x0030)
N#define I2S_Standard_PCMLong            ((uint16_t)0x00B0)
N#define IS_I2S_STANDARD(STANDARD) (((STANDARD) == I2S_Standard_Phillips) || \
N                                   ((STANDARD) == I2S_Standard_MSB) || \
N                                   ((STANDARD) == I2S_Standard_LSB) || \
N                                   ((STANDARD) == I2S_Standard_PCMShort) || \
N                                   ((STANDARD) == I2S_Standard_PCMLong))
X#define IS_I2S_STANDARD(STANDARD) (((STANDARD) == I2S_Standard_Phillips) ||                                    ((STANDARD) == I2S_Standard_MSB) ||                                    ((STANDARD) == I2S_Standard_LSB) ||                                    ((STANDARD) == I2S_Standard_PCMShort) ||                                    ((STANDARD) == I2S_Standard_PCMLong))
N/**
N  * @}
N  */
N  
N/** @defgroup SPI_I2S_Data_Format 
N  * @{
N  */
N
N#define I2S_DataFormat_16b              ((uint16_t)0x0000)
N#define I2S_DataFormat_16bextended      ((uint16_t)0x0001)
N#define I2S_DataFormat_24b              ((uint16_t)0x0003)
N#define I2S_DataFormat_32b              ((uint16_t)0x0005)
N#define IS_I2S_DATA_FORMAT(FORMAT) (((FORMAT) == I2S_DataFormat_16b) || \
N                                    ((FORMAT) == I2S_DataFormat_16bextended) || \
N                                    ((FORMAT) == I2S_DataFormat_24b) || \
N                                    ((FORMAT) == I2S_DataFormat_32b))
X#define IS_I2S_DATA_FORMAT(FORMAT) (((FORMAT) == I2S_DataFormat_16b) ||                                     ((FORMAT) == I2S_DataFormat_16bextended) ||                                     ((FORMAT) == I2S_DataFormat_24b) ||                                     ((FORMAT) == I2S_DataFormat_32b))
N/**
N  * @}
N  */
N
N/** @defgroup SPI_I2S_MCLK_Output 
N  * @{
N  */
N
N#define I2S_MCLKOutput_Enable           ((uint16_t)0x0200)
N#define I2S_MCLKOutput_Disable          ((uint16_t)0x0000)
N#define IS_I2S_MCLK_OUTPUT(OUTPUT) (((OUTPUT) == I2S_MCLKOutput_Enable) || \
N                                    ((OUTPUT) == I2S_MCLKOutput_Disable))
X#define IS_I2S_MCLK_OUTPUT(OUTPUT) (((OUTPUT) == I2S_MCLKOutput_Enable) ||                                     ((OUTPUT) == I2S_MCLKOutput_Disable))
N/**
N  * @}
N  */
N
N/** @defgroup SPI_I2S_Audio_Frequency 
N  * @{
N  */
N
N#define I2S_AudioFreq_192k               ((uint32_t)192000)
N#define I2S_AudioFreq_96k                ((uint32_t)96000)
N#define I2S_AudioFreq_48k                ((uint32_t)48000)
N#define I2S_AudioFreq_44k                ((uint32_t)44100)
N#define I2S_AudioFreq_32k                ((uint32_t)32000)
N#define I2S_AudioFreq_22k                ((uint32_t)22050)
N#define I2S_AudioFreq_16k                ((uint32_t)16000)
N#define I2S_AudioFreq_11k                ((uint32_t)11025)
N#define I2S_AudioFreq_8k                 ((uint32_t)8000)
N#define I2S_AudioFreq_Default            ((uint32_t)2)
N
N#define IS_I2S_AUDIO_FREQ(FREQ) ((((FREQ) >= I2S_AudioFreq_8k) && \
N                                 ((FREQ) <= I2S_AudioFreq_192k)) || \
N                                 ((FREQ) == I2S_AudioFreq_Default))
X#define IS_I2S_AUDIO_FREQ(FREQ) ((((FREQ) >= I2S_AudioFreq_8k) &&                                  ((FREQ) <= I2S_AudioFreq_192k)) ||                                  ((FREQ) == I2S_AudioFreq_Default))
N/**
N  * @}
N  */
N            
N/** @defgroup SPI_I2S_Clock_Polarity 
N  * @{
N  */
N
N#define I2S_CPOL_Low                    ((uint16_t)0x0000)
N#define I2S_CPOL_High                   ((uint16_t)0x0008)
N#define IS_I2S_CPOL(CPOL) (((CPOL) == I2S_CPOL_Low) || \
N                           ((CPOL) == I2S_CPOL_High))
X#define IS_I2S_CPOL(CPOL) (((CPOL) == I2S_CPOL_Low) ||                            ((CPOL) == I2S_CPOL_High))
N/**
N  * @}
N  */
N
N/** @defgroup SPI_I2S_DMA_transfer_requests 
N  * @{
N  */
N
N#define SPI_I2S_DMAReq_Tx               ((uint16_t)0x0002)
N#define SPI_I2S_DMAReq_Rx               ((uint16_t)0x0001)
N#define IS_SPI_I2S_DMAREQ(DMAREQ) ((((DMAREQ) & (uint16_t)0xFFFC) == 0x00) && ((DMAREQ) != 0x00))
N/**
N  * @}
N  */
N
N/** @defgroup SPI_NSS_internal_software_management 
N  * @{
N  */
N
N#define SPI_NSSInternalSoft_Set         ((uint16_t)0x0100)
N#define SPI_NSSInternalSoft_Reset       ((uint16_t)0xFEFF)
N#define IS_SPI_NSS_INTERNAL(INTERNAL) (((INTERNAL) == SPI_NSSInternalSoft_Set) || \
N                                       ((INTERNAL) == SPI_NSSInternalSoft_Reset))
X#define IS_SPI_NSS_INTERNAL(INTERNAL) (((INTERNAL) == SPI_NSSInternalSoft_Set) ||                                        ((INTERNAL) == SPI_NSSInternalSoft_Reset))
N/**
N  * @}
N  */
N
N/** @defgroup SPI_CRC_Transmit_Receive 
N  * @{
N  */
N
N#define SPI_CRC_Tx                      ((uint8_t)0x00)
N#define SPI_CRC_Rx                      ((uint8_t)0x01)
N#define IS_SPI_CRC(CRC) (((CRC) == SPI_CRC_Tx) || ((CRC) == SPI_CRC_Rx))
N/**
N  * @}
N  */
N
N/** @defgroup SPI_direction_transmit_receive 
N  * @{
N  */
N
N#define SPI_Direction_Rx                ((uint16_t)0xBFFF)
N#define SPI_Direction_Tx                ((uint16_t)0x4000)
N#define IS_SPI_DIRECTION(DIRECTION) (((DIRECTION) == SPI_Direction_Rx) || \
N                                     ((DIRECTION) == SPI_Direction_Tx))
X#define IS_SPI_DIRECTION(DIRECTION) (((DIRECTION) == SPI_Direction_Rx) ||                                      ((DIRECTION) == SPI_Direction_Tx))
N/**
N  * @}
N  */
N
N/** @defgroup SPI_I2S_interrupts_definition 
N  * @{
N  */
N
N#define SPI_I2S_IT_TXE                  ((uint8_t)0x71)
N#define SPI_I2S_IT_RXNE                 ((uint8_t)0x60)
N#define SPI_I2S_IT_ERR                  ((uint8_t)0x50)
N#define I2S_IT_UDR                      ((uint8_t)0x53)
N#define SPI_I2S_IT_TIFRFE               ((uint8_t)0x58)
N
N#define IS_SPI_I2S_CONFIG_IT(IT) (((IT) == SPI_I2S_IT_TXE) || \
N                                  ((IT) == SPI_I2S_IT_RXNE) || \
N                                  ((IT) == SPI_I2S_IT_ERR))
X#define IS_SPI_I2S_CONFIG_IT(IT) (((IT) == SPI_I2S_IT_TXE) ||                                   ((IT) == SPI_I2S_IT_RXNE) ||                                   ((IT) == SPI_I2S_IT_ERR))
N
N#define SPI_I2S_IT_OVR                  ((uint8_t)0x56)
N#define SPI_IT_MODF                     ((uint8_t)0x55)
N#define SPI_IT_CRCERR                   ((uint8_t)0x54)
N
N#define IS_SPI_I2S_CLEAR_IT(IT) (((IT) == SPI_IT_CRCERR))
N
N#define IS_SPI_I2S_GET_IT(IT) (((IT) == SPI_I2S_IT_RXNE)|| ((IT) == SPI_I2S_IT_TXE) || \
N                               ((IT) == SPI_IT_CRCERR)  || ((IT) == SPI_IT_MODF) || \
N                               ((IT) == SPI_I2S_IT_OVR) || ((IT) == I2S_IT_UDR) ||\
N                               ((IT) == SPI_I2S_IT_TIFRFE))
X#define IS_SPI_I2S_GET_IT(IT) (((IT) == SPI_I2S_IT_RXNE)|| ((IT) == SPI_I2S_IT_TXE) ||                                ((IT) == SPI_IT_CRCERR)  || ((IT) == SPI_IT_MODF) ||                                ((IT) == SPI_I2S_IT_OVR) || ((IT) == I2S_IT_UDR) ||                               ((IT) == SPI_I2S_IT_TIFRFE))
N/**
N  * @}
N  */
N
N/** @defgroup SPI_I2S_flags_definition 
N  * @{
N  */
N
N#define SPI_I2S_FLAG_RXNE               ((uint16_t)0x0001)
N#define SPI_I2S_FLAG_TXE                ((uint16_t)0x0002)
N#define I2S_FLAG_CHSIDE                 ((uint16_t)0x0004)
N#define I2S_FLAG_UDR                    ((uint16_t)0x0008)
N#define SPI_FLAG_CRCERR                 ((uint16_t)0x0010)
N#define SPI_FLAG_MODF                   ((uint16_t)0x0020)
N#define SPI_I2S_FLAG_OVR                ((uint16_t)0x0040)
N#define SPI_I2S_FLAG_BSY                ((uint16_t)0x0080)
N#define SPI_I2S_FLAG_TIFRFE             ((uint16_t)0x0100)
N
N#define IS_SPI_I2S_CLEAR_FLAG(FLAG) (((FLAG) == SPI_FLAG_CRCERR))
N#define IS_SPI_I2S_GET_FLAG(FLAG) (((FLAG) == SPI_I2S_FLAG_BSY) || ((FLAG) == SPI_I2S_FLAG_OVR) || \
N                                   ((FLAG) == SPI_FLAG_MODF) || ((FLAG) == SPI_FLAG_CRCERR) || \
N                                   ((FLAG) == I2S_FLAG_UDR) || ((FLAG) == I2S_FLAG_CHSIDE) || \
N                                   ((FLAG) == SPI_I2S_FLAG_TXE) || ((FLAG) == SPI_I2S_FLAG_RXNE)|| \
N                                   ((FLAG) == SPI_I2S_FLAG_TIFRFE))
X#define IS_SPI_I2S_GET_FLAG(FLAG) (((FLAG) == SPI_I2S_FLAG_BSY) || ((FLAG) == SPI_I2S_FLAG_OVR) ||                                    ((FLAG) == SPI_FLAG_MODF) || ((FLAG) == SPI_FLAG_CRCERR) ||                                    ((FLAG) == I2S_FLAG_UDR) || ((FLAG) == I2S_FLAG_CHSIDE) ||                                    ((FLAG) == SPI_I2S_FLAG_TXE) || ((FLAG) == SPI_I2S_FLAG_RXNE)||                                    ((FLAG) == SPI_I2S_FLAG_TIFRFE))
N/**
N  * @}
N  */
N
N/** @defgroup SPI_CRC_polynomial 
N  * @{
N  */
N
N#define IS_SPI_CRC_POLYNOMIAL(POLYNOMIAL) ((POLYNOMIAL) >= 0x1)
N/**
N  * @}
N  */
N
N/** @defgroup SPI_I2S_Legacy 
N  * @{
N  */
N
N#define SPI_DMAReq_Tx                SPI_I2S_DMAReq_Tx
N#define SPI_DMAReq_Rx                SPI_I2S_DMAReq_Rx
N#define SPI_IT_TXE                   SPI_I2S_IT_TXE
N#define SPI_IT_RXNE                  SPI_I2S_IT_RXNE
N#define SPI_IT_ERR                   SPI_I2S_IT_ERR
N#define SPI_IT_OVR                   SPI_I2S_IT_OVR
N#define SPI_FLAG_RXNE                SPI_I2S_FLAG_RXNE
N#define SPI_FLAG_TXE                 SPI_I2S_FLAG_TXE
N#define SPI_FLAG_OVR                 SPI_I2S_FLAG_OVR
N#define SPI_FLAG_BSY                 SPI_I2S_FLAG_BSY
N#define SPI_DeInit                   SPI_I2S_DeInit
N#define SPI_ITConfig                 SPI_I2S_ITConfig
N#define SPI_DMACmd                   SPI_I2S_DMACmd
N#define SPI_SendData                 SPI_I2S_SendData
N#define SPI_ReceiveData              SPI_I2S_ReceiveData
N#define SPI_GetFlagStatus            SPI_I2S_GetFlagStatus
N#define SPI_ClearFlag                SPI_I2S_ClearFlag
N#define SPI_GetITStatus              SPI_I2S_GetITStatus
N#define SPI_ClearITPendingBit        SPI_I2S_ClearITPendingBit
N/**
N  * @}
N  */
N  
N/**
N  * @}
N  */
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/ 
N
N/*  Function used to set the SPI configuration to the default reset state *****/ 
Nvoid SPI_I2S_DeInit(SPI_TypeDef* SPIx);
N
N/* Initialization and Configuration functions *********************************/
Nvoid SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct);
Nvoid I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct);
Nvoid SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct);
Nvoid I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct);
Nvoid SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState);
Nvoid I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState);
Nvoid SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize);
Nvoid SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction);
Nvoid SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft);
Nvoid SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
Nvoid SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
N
Nvoid I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct);
N
N/* Data transfers functions ***************************************************/ 
Nvoid SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
Nuint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
N
N/* Hardware CRC Calculation functions *****************************************/
Nvoid SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState);
Nvoid SPI_TransmitCRC(SPI_TypeDef* SPIx);
Nuint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC);
Nuint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx);
N
N/* DMA transfers management functions *****************************************/
Nvoid SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState);
N
N/* Interrupts and flags management functions **********************************/
Nvoid SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState);
NFlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
Nvoid SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
NITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
Nvoid SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__STM32F4xx_SPI_H */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 65 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_syscfg.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_syscfg.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_syscfg.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the SYSCFG firmware
N  *          library. 
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_SYSCFG_H
N#define __STM32F4xx_SYSCFG_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup SYSCFG
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/
N/* Exported constants --------------------------------------------------------*/
N  
N/** @defgroup SYSCFG_Exported_Constants 
N  * @{
N  */ 
N
N/** @defgroup SYSCFG_EXTI_Port_Sources 
N  * @{
N  */ 
N#define EXTI_PortSourceGPIOA       ((uint8_t)0x00)
N#define EXTI_PortSourceGPIOB       ((uint8_t)0x01)
N#define EXTI_PortSourceGPIOC       ((uint8_t)0x02)
N#define EXTI_PortSourceGPIOD       ((uint8_t)0x03)
N#define EXTI_PortSourceGPIOE       ((uint8_t)0x04)
N#define EXTI_PortSourceGPIOF       ((uint8_t)0x05)
N#define EXTI_PortSourceGPIOG       ((uint8_t)0x06)
N#define EXTI_PortSourceGPIOH       ((uint8_t)0x07)
N#define EXTI_PortSourceGPIOI       ((uint8_t)0x08)
N#define EXTI_PortSourceGPIOJ       ((uint8_t)0x09)
N#define EXTI_PortSourceGPIOK       ((uint8_t)0x0A)
N
N#define IS_EXTI_PORT_SOURCE(PORTSOURCE) (((PORTSOURCE) == EXTI_PortSourceGPIOA) || \
N                                         ((PORTSOURCE) == EXTI_PortSourceGPIOB) || \
N                                         ((PORTSOURCE) == EXTI_PortSourceGPIOC) || \
N                                         ((PORTSOURCE) == EXTI_PortSourceGPIOD) || \
N                                         ((PORTSOURCE) == EXTI_PortSourceGPIOE) || \
N                                         ((PORTSOURCE) == EXTI_PortSourceGPIOF) || \
N                                         ((PORTSOURCE) == EXTI_PortSourceGPIOG) || \
N                                         ((PORTSOURCE) == EXTI_PortSourceGPIOH) || \
N                                         ((PORTSOURCE) == EXTI_PortSourceGPIOI) || \
N                                         ((PORTSOURCE) == EXTI_PortSourceGPIOJ) || \
N                                         ((PORTSOURCE) == EXTI_PortSourceGPIOK))
X#define IS_EXTI_PORT_SOURCE(PORTSOURCE) (((PORTSOURCE) == EXTI_PortSourceGPIOA) ||                                          ((PORTSOURCE) == EXTI_PortSourceGPIOB) ||                                          ((PORTSOURCE) == EXTI_PortSourceGPIOC) ||                                          ((PORTSOURCE) == EXTI_PortSourceGPIOD) ||                                          ((PORTSOURCE) == EXTI_PortSourceGPIOE) ||                                          ((PORTSOURCE) == EXTI_PortSourceGPIOF) ||                                          ((PORTSOURCE) == EXTI_PortSourceGPIOG) ||                                          ((PORTSOURCE) == EXTI_PortSourceGPIOH) ||                                          ((PORTSOURCE) == EXTI_PortSourceGPIOI) ||                                          ((PORTSOURCE) == EXTI_PortSourceGPIOJ) ||                                          ((PORTSOURCE) == EXTI_PortSourceGPIOK))
N                                         
N/**
N  * @}
N  */ 
N
N
N/** @defgroup SYSCFG_EXTI_Pin_Sources 
N  * @{
N  */ 
N#define EXTI_PinSource0            ((uint8_t)0x00)
N#define EXTI_PinSource1            ((uint8_t)0x01)
N#define EXTI_PinSource2            ((uint8_t)0x02)
N#define EXTI_PinSource3            ((uint8_t)0x03)
N#define EXTI_PinSource4            ((uint8_t)0x04)
N#define EXTI_PinSource5            ((uint8_t)0x05)
N#define EXTI_PinSource6            ((uint8_t)0x06)
N#define EXTI_PinSource7            ((uint8_t)0x07)
N#define EXTI_PinSource8            ((uint8_t)0x08)
N#define EXTI_PinSource9            ((uint8_t)0x09)
N#define EXTI_PinSource10           ((uint8_t)0x0A)
N#define EXTI_PinSource11           ((uint8_t)0x0B)
N#define EXTI_PinSource12           ((uint8_t)0x0C)
N#define EXTI_PinSource13           ((uint8_t)0x0D)
N#define EXTI_PinSource14           ((uint8_t)0x0E)
N#define EXTI_PinSource15           ((uint8_t)0x0F)
N#define IS_EXTI_PIN_SOURCE(PINSOURCE) (((PINSOURCE) == EXTI_PinSource0)  || \
N                                       ((PINSOURCE) == EXTI_PinSource1)  || \
N                                       ((PINSOURCE) == EXTI_PinSource2)  || \
N                                       ((PINSOURCE) == EXTI_PinSource3)  || \
N                                       ((PINSOURCE) == EXTI_PinSource4)  || \
N                                       ((PINSOURCE) == EXTI_PinSource5)  || \
N                                       ((PINSOURCE) == EXTI_PinSource6)  || \
N                                       ((PINSOURCE) == EXTI_PinSource7)  || \
N                                       ((PINSOURCE) == EXTI_PinSource8)  || \
N                                       ((PINSOURCE) == EXTI_PinSource9)  || \
N                                       ((PINSOURCE) == EXTI_PinSource10) || \
N                                       ((PINSOURCE) == EXTI_PinSource11) || \
N                                       ((PINSOURCE) == EXTI_PinSource12) || \
N                                       ((PINSOURCE) == EXTI_PinSource13) || \
N                                       ((PINSOURCE) == EXTI_PinSource14) || \
N                                       ((PINSOURCE) == EXTI_PinSource15))
X#define IS_EXTI_PIN_SOURCE(PINSOURCE) (((PINSOURCE) == EXTI_PinSource0)  ||                                        ((PINSOURCE) == EXTI_PinSource1)  ||                                        ((PINSOURCE) == EXTI_PinSource2)  ||                                        ((PINSOURCE) == EXTI_PinSource3)  ||                                        ((PINSOURCE) == EXTI_PinSource4)  ||                                        ((PINSOURCE) == EXTI_PinSource5)  ||                                        ((PINSOURCE) == EXTI_PinSource6)  ||                                        ((PINSOURCE) == EXTI_PinSource7)  ||                                        ((PINSOURCE) == EXTI_PinSource8)  ||                                        ((PINSOURCE) == EXTI_PinSource9)  ||                                        ((PINSOURCE) == EXTI_PinSource10) ||                                        ((PINSOURCE) == EXTI_PinSource11) ||                                        ((PINSOURCE) == EXTI_PinSource12) ||                                        ((PINSOURCE) == EXTI_PinSource13) ||                                        ((PINSOURCE) == EXTI_PinSource14) ||                                        ((PINSOURCE) == EXTI_PinSource15))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup SYSCFG_Memory_Remap_Config 
N  * @{
N  */ 
N#define SYSCFG_MemoryRemap_Flash       ((uint8_t)0x00)
N#define SYSCFG_MemoryRemap_SystemFlash ((uint8_t)0x01)
N#define SYSCFG_MemoryRemap_SRAM        ((uint8_t)0x03)
N#define SYSCFG_MemoryRemap_SDRAM       ((uint8_t)0x04)
N
N#if defined (STM32F40_41xxx)
X#if 1L
N#define SYSCFG_MemoryRemap_FSMC        ((uint8_t)0x02) 
N#endif /* STM32F40_41xxx */
N
N#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
X#if 0L || 0L
S#define SYSCFG_MemoryRemap_FMC         ((uint8_t)0x02) 
N#endif /* STM32F427_437xx ||  STM32F429_439xx */  
N
N#if defined (STM32F40_41xxx) 
X#if 1L 
N#define IS_SYSCFG_MEMORY_REMAP_CONFING(REMAP) (((REMAP) == SYSCFG_MemoryRemap_Flash)       || \
N                                               ((REMAP) == SYSCFG_MemoryRemap_SystemFlash) || \
N                                               ((REMAP) == SYSCFG_MemoryRemap_SRAM)        || \
N                                               ((REMAP) == SYSCFG_MemoryRemap_FSMC))
X#define IS_SYSCFG_MEMORY_REMAP_CONFING(REMAP) (((REMAP) == SYSCFG_MemoryRemap_Flash)       ||                                                ((REMAP) == SYSCFG_MemoryRemap_SystemFlash) ||                                                ((REMAP) == SYSCFG_MemoryRemap_SRAM)        ||                                                ((REMAP) == SYSCFG_MemoryRemap_FSMC))
N#endif /* STM32F40_41xxx */
N
N#if defined (STM32F401xx) 
X#if 0L 
S#define IS_SYSCFG_MEMORY_REMAP_CONFING(REMAP) (((REMAP) == SYSCFG_MemoryRemap_Flash)       || \
S                                               ((REMAP) == SYSCFG_MemoryRemap_SystemFlash) || \
S                                               ((REMAP) == SYSCFG_MemoryRemap_SRAM))
X#define IS_SYSCFG_MEMORY_REMAP_CONFING(REMAP) (((REMAP) == SYSCFG_MemoryRemap_Flash)       ||                                                ((REMAP) == SYSCFG_MemoryRemap_SystemFlash) ||                                                ((REMAP) == SYSCFG_MemoryRemap_SRAM))
N#endif /* STM32F401xx */
N
N#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
X#if 0L || 0L
S#define IS_SYSCFG_MEMORY_REMAP_CONFING(REMAP) (((REMAP) == SYSCFG_MemoryRemap_Flash)       || \
S                                               ((REMAP) == SYSCFG_MemoryRemap_SystemFlash) || \
S                                               ((REMAP) == SYSCFG_MemoryRemap_SRAM)        || \
S                                               ((REMAP) == SYSCFG_MemoryRemap_SDRAM)       || \
S                                               ((REMAP) == SYSCFG_MemoryRemap_FMC))
X#define IS_SYSCFG_MEMORY_REMAP_CONFING(REMAP) (((REMAP) == SYSCFG_MemoryRemap_Flash)       ||                                                ((REMAP) == SYSCFG_MemoryRemap_SystemFlash) ||                                                ((REMAP) == SYSCFG_MemoryRemap_SRAM)        ||                                                ((REMAP) == SYSCFG_MemoryRemap_SDRAM)       ||                                                ((REMAP) == SYSCFG_MemoryRemap_FMC))
N#endif /* STM32F427_437xx ||  STM32F429_439xx */
N                                                                                              
N/**
N  * @}
N  */ 
N
N
N/** @defgroup SYSCFG_ETHERNET_Media_Interface 
N  * @{
N  */ 
N#define SYSCFG_ETH_MediaInterface_MII    ((uint32_t)0x00000000)
N#define SYSCFG_ETH_MediaInterface_RMII   ((uint32_t)0x00000001)
N
N#define IS_SYSCFG_ETH_MEDIA_INTERFACE(INTERFACE) (((INTERFACE) == SYSCFG_ETH_MediaInterface_MII) || \
N                                                 ((INTERFACE) == SYSCFG_ETH_MediaInterface_RMII))
X#define IS_SYSCFG_ETH_MEDIA_INTERFACE(INTERFACE) (((INTERFACE) == SYSCFG_ETH_MediaInterface_MII) ||                                                  ((INTERFACE) == SYSCFG_ETH_MediaInterface_RMII))
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/ 
N 
Nvoid SYSCFG_DeInit(void);
Nvoid       SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap);
Nvoid       SYSCFG_MemorySwappingBank(FunctionalState NewState);
Nvoid       SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex);
Nvoid       SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface); 
Nvoid       SYSCFG_CompensationCellCmd(FunctionalState NewState); 
NFlagStatus SYSCFG_GetCompensationCellStatus(void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__STM32F4xx_SYSCFG_H */
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 66 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_tim.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_tim.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_tim.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the TIM firmware 
N  *          library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_TIM_H
N#define __STM32F4xx_TIM_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup TIM
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/
N
N/** 
N  * @brief  TIM Time Base Init structure definition  
N  * @note   This structure is used with all TIMx except for TIM6 and TIM7.  
N  */
N
Ntypedef struct
N{
N  uint16_t TIM_Prescaler;         /*!< Specifies the prescaler value used to divide the TIM clock.
N                                       This parameter can be a number between 0x0000 and 0xFFFF */
N
N  uint16_t TIM_CounterMode;       /*!< Specifies the counter mode.
N                                       This parameter can be a value of @ref TIM_Counter_Mode */
N
N  uint32_t TIM_Period;            /*!< Specifies the period value to be loaded into the active
N                                       Auto-Reload Register at the next update event.
N                                       This parameter must be a number between 0x0000 and 0xFFFF.  */ 
N
N  uint16_t TIM_ClockDivision;     /*!< Specifies the clock division.
N                                      This parameter can be a value of @ref TIM_Clock_Division_CKD */
N
N  uint8_t TIM_RepetitionCounter;  /*!< Specifies the repetition counter value. Each time the RCR downcounter
N                                       reaches zero, an update event is generated and counting restarts
N                                       from the RCR value (N).
N                                       This means in PWM mode that (N+1) corresponds to:
N                                          - the number of PWM periods in edge-aligned mode
N                                          - the number of half PWM period in center-aligned mode
N                                       This parameter must be a number between 0x00 and 0xFF. 
N                                       @note This parameter is valid only for TIM1 and TIM8. */
N} TIM_TimeBaseInitTypeDef; 
N
N/** 
N  * @brief  TIM Output Compare Init structure definition  
N  */
N
Ntypedef struct
N{
N  uint16_t TIM_OCMode;        /*!< Specifies the TIM mode.
N                                   This parameter can be a value of @ref TIM_Output_Compare_and_PWM_modes */
N
N  uint16_t TIM_OutputState;   /*!< Specifies the TIM Output Compare state.
N                                   This parameter can be a value of @ref TIM_Output_Compare_State */
N
N  uint16_t TIM_OutputNState;  /*!< Specifies the TIM complementary Output Compare state.
N                                   This parameter can be a value of @ref TIM_Output_Compare_N_State
N                                   @note This parameter is valid only for TIM1 and TIM8. */
N
N  uint32_t TIM_Pulse;         /*!< Specifies the pulse value to be loaded into the Capture Compare Register. 
N                                   This parameter can be a number between 0x0000 and 0xFFFF */
N
N  uint16_t TIM_OCPolarity;    /*!< Specifies the output polarity.
N                                   This parameter can be a value of @ref TIM_Output_Compare_Polarity */
N
N  uint16_t TIM_OCNPolarity;   /*!< Specifies the complementary output polarity.
N                                   This parameter can be a value of @ref TIM_Output_Compare_N_Polarity
N                                   @note This parameter is valid only for TIM1 and TIM8. */
N
N  uint16_t TIM_OCIdleState;   /*!< Specifies the TIM Output Compare pin state during Idle state.
N                                   This parameter can be a value of @ref TIM_Output_Compare_Idle_State
N                                   @note This parameter is valid only for TIM1 and TIM8. */
N
N  uint16_t TIM_OCNIdleState;  /*!< Specifies the TIM Output Compare pin state during Idle state.
N                                   This parameter can be a value of @ref TIM_Output_Compare_N_Idle_State
N                                   @note This parameter is valid only for TIM1 and TIM8. */
N} TIM_OCInitTypeDef;
N
N/** 
N  * @brief  TIM Input Capture Init structure definition  
N  */
N
Ntypedef struct
N{
N
N  uint16_t TIM_Channel;      /*!< Specifies the TIM channel.
N                                  This parameter can be a value of @ref TIM_Channel */
N
N  uint16_t TIM_ICPolarity;   /*!< Specifies the active edge of the input signal.
N                                  This parameter can be a value of @ref TIM_Input_Capture_Polarity */
N
N  uint16_t TIM_ICSelection;  /*!< Specifies the input.
N                                  This parameter can be a value of @ref TIM_Input_Capture_Selection */
N
N  uint16_t TIM_ICPrescaler;  /*!< Specifies the Input Capture Prescaler.
N                                  This parameter can be a value of @ref TIM_Input_Capture_Prescaler */
N
N  uint16_t TIM_ICFilter;     /*!< Specifies the input capture filter.
N                                  This parameter can be a number between 0x0 and 0xF */
N} TIM_ICInitTypeDef;
N
N/** 
N  * @brief  BDTR structure definition 
N  * @note   This structure is used only with TIM1 and TIM8.    
N  */
N
Ntypedef struct
N{
N
N  uint16_t TIM_OSSRState;        /*!< Specifies the Off-State selection used in Run mode.
N                                      This parameter can be a value of @ref TIM_OSSR_Off_State_Selection_for_Run_mode_state */
N
N  uint16_t TIM_OSSIState;        /*!< Specifies the Off-State used in Idle state.
N                                      This parameter can be a value of @ref TIM_OSSI_Off_State_Selection_for_Idle_mode_state */
N
N  uint16_t TIM_LOCKLevel;        /*!< Specifies the LOCK level parameters.
N                                      This parameter can be a value of @ref TIM_Lock_level */ 
N
N  uint16_t TIM_DeadTime;         /*!< Specifies the delay time between the switching-off and the
N                                      switching-on of the outputs.
N                                      This parameter can be a number between 0x00 and 0xFF  */
N
N  uint16_t TIM_Break;            /*!< Specifies whether the TIM Break input is enabled or not. 
N                                      This parameter can be a value of @ref TIM_Break_Input_enable_disable */
N
N  uint16_t TIM_BreakPolarity;    /*!< Specifies the TIM Break Input pin polarity.
N                                      This parameter can be a value of @ref TIM_Break_Polarity */
N
N  uint16_t TIM_AutomaticOutput;  /*!< Specifies whether the TIM Automatic Output feature is enabled or not. 
N                                      This parameter can be a value of @ref TIM_AOE_Bit_Set_Reset */
N} TIM_BDTRInitTypeDef;
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup TIM_Exported_constants 
N  * @{
N  */
N
N#define IS_TIM_ALL_PERIPH(PERIPH) (((PERIPH) == TIM1) || \
N                                   ((PERIPH) == TIM2) || \
N                                   ((PERIPH) == TIM3) || \
N                                   ((PERIPH) == TIM4) || \
N                                   ((PERIPH) == TIM5) || \
N                                   ((PERIPH) == TIM6) || \
N                                   ((PERIPH) == TIM7) || \
N                                   ((PERIPH) == TIM8) || \
N                                   ((PERIPH) == TIM9) || \
N                                   ((PERIPH) == TIM10) || \
N                                   ((PERIPH) == TIM11) || \
N                                   ((PERIPH) == TIM12) || \
N                                   (((PERIPH) == TIM13) || \
N                                   ((PERIPH) == TIM14)))
X#define IS_TIM_ALL_PERIPH(PERIPH) (((PERIPH) == TIM1) ||                                    ((PERIPH) == TIM2) ||                                    ((PERIPH) == TIM3) ||                                    ((PERIPH) == TIM4) ||                                    ((PERIPH) == TIM5) ||                                    ((PERIPH) == TIM6) ||                                    ((PERIPH) == TIM7) ||                                    ((PERIPH) == TIM8) ||                                    ((PERIPH) == TIM9) ||                                    ((PERIPH) == TIM10) ||                                    ((PERIPH) == TIM11) ||                                    ((PERIPH) == TIM12) ||                                    (((PERIPH) == TIM13) ||                                    ((PERIPH) == TIM14)))
N/* LIST1: TIM1, TIM2, TIM3, TIM4, TIM5, TIM8, TIM9, TIM10, TIM11, TIM12, TIM13 and TIM14 */                                         
N#define IS_TIM_LIST1_PERIPH(PERIPH) (((PERIPH) == TIM1) || \
N                                     ((PERIPH) == TIM2) || \
N                                     ((PERIPH) == TIM3) || \
N                                     ((PERIPH) == TIM4) || \
N                                     ((PERIPH) == TIM5) || \
N                                     ((PERIPH) == TIM8) || \
N                                     ((PERIPH) == TIM9) || \
N                                     ((PERIPH) == TIM10) || \
N                                     ((PERIPH) == TIM11) || \
N                                     ((PERIPH) == TIM12) || \
N                                     ((PERIPH) == TIM13) || \
N                                     ((PERIPH) == TIM14))
X#define IS_TIM_LIST1_PERIPH(PERIPH) (((PERIPH) == TIM1) ||                                      ((PERIPH) == TIM2) ||                                      ((PERIPH) == TIM3) ||                                      ((PERIPH) == TIM4) ||                                      ((PERIPH) == TIM5) ||                                      ((PERIPH) == TIM8) ||                                      ((PERIPH) == TIM9) ||                                      ((PERIPH) == TIM10) ||                                      ((PERIPH) == TIM11) ||                                      ((PERIPH) == TIM12) ||                                      ((PERIPH) == TIM13) ||                                      ((PERIPH) == TIM14))
N                                     
N/* LIST2: TIM1, TIM2, TIM3, TIM4, TIM5, TIM8, TIM9 and TIM12 */
N#define IS_TIM_LIST2_PERIPH(PERIPH) (((PERIPH) == TIM1) || \
N                                     ((PERIPH) == TIM2) || \
N                                     ((PERIPH) == TIM3) || \
N                                     ((PERIPH) == TIM4) || \
N                                     ((PERIPH) == TIM5) || \
N                                     ((PERIPH) == TIM8) || \
N                                     ((PERIPH) == TIM9) || \
N                                     ((PERIPH) == TIM12))
X#define IS_TIM_LIST2_PERIPH(PERIPH) (((PERIPH) == TIM1) ||                                      ((PERIPH) == TIM2) ||                                      ((PERIPH) == TIM3) ||                                      ((PERIPH) == TIM4) ||                                      ((PERIPH) == TIM5) ||                                      ((PERIPH) == TIM8) ||                                      ((PERIPH) == TIM9) ||                                      ((PERIPH) == TIM12))
N/* LIST3: TIM1, TIM2, TIM3, TIM4, TIM5 and TIM8 */
N#define IS_TIM_LIST3_PERIPH(PERIPH) (((PERIPH) == TIM1) || \
N                                     ((PERIPH) == TIM2) || \
N                                     ((PERIPH) == TIM3) || \
N                                     ((PERIPH) == TIM4) || \
N                                     ((PERIPH) == TIM5) || \
N                                     ((PERIPH) == TIM8))
X#define IS_TIM_LIST3_PERIPH(PERIPH) (((PERIPH) == TIM1) ||                                      ((PERIPH) == TIM2) ||                                      ((PERIPH) == TIM3) ||                                      ((PERIPH) == TIM4) ||                                      ((PERIPH) == TIM5) ||                                      ((PERIPH) == TIM8))
N/* LIST4: TIM1 and TIM8 */
N#define IS_TIM_LIST4_PERIPH(PERIPH) (((PERIPH) == TIM1) || \
N                                     ((PERIPH) == TIM8))
X#define IS_TIM_LIST4_PERIPH(PERIPH) (((PERIPH) == TIM1) ||                                      ((PERIPH) == TIM8))
N/* LIST5: TIM1, TIM2, TIM3, TIM4, TIM5, TIM6, TIM7 and TIM8 */
N#define IS_TIM_LIST5_PERIPH(PERIPH) (((PERIPH) == TIM1) || \
N                                     ((PERIPH) == TIM2) || \
N                                     ((PERIPH) == TIM3) || \
N                                     ((PERIPH) == TIM4) || \
N                                     ((PERIPH) == TIM5) || \
N                                     ((PERIPH) == TIM6) || \
N                                     ((PERIPH) == TIM7) || \
N                                     ((PERIPH) == TIM8))
X#define IS_TIM_LIST5_PERIPH(PERIPH) (((PERIPH) == TIM1) ||                                      ((PERIPH) == TIM2) ||                                      ((PERIPH) == TIM3) ||                                      ((PERIPH) == TIM4) ||                                      ((PERIPH) == TIM5) ||                                      ((PERIPH) == TIM6) ||                                      ((PERIPH) == TIM7) ||                                      ((PERIPH) == TIM8))
N/* LIST6: TIM2, TIM5 and TIM11 */                               
N#define IS_TIM_LIST6_PERIPH(TIMx)(((TIMx) == TIM2) || \
N                                 ((TIMx) == TIM5) || \
N                                 ((TIMx) == TIM11))
X#define IS_TIM_LIST6_PERIPH(TIMx)(((TIMx) == TIM2) ||                                  ((TIMx) == TIM5) ||                                  ((TIMx) == TIM11))
N
N/** @defgroup TIM_Output_Compare_and_PWM_modes 
N  * @{
N  */
N
N#define TIM_OCMode_Timing                  ((uint16_t)0x0000)
N#define TIM_OCMode_Active                  ((uint16_t)0x0010)
N#define TIM_OCMode_Inactive                ((uint16_t)0x0020)
N#define TIM_OCMode_Toggle                  ((uint16_t)0x0030)
N#define TIM_OCMode_PWM1                    ((uint16_t)0x0060)
N#define TIM_OCMode_PWM2                    ((uint16_t)0x0070)
N#define IS_TIM_OC_MODE(MODE) (((MODE) == TIM_OCMode_Timing) || \
N                              ((MODE) == TIM_OCMode_Active) || \
N                              ((MODE) == TIM_OCMode_Inactive) || \
N                              ((MODE) == TIM_OCMode_Toggle)|| \
N                              ((MODE) == TIM_OCMode_PWM1) || \
N                              ((MODE) == TIM_OCMode_PWM2))
X#define IS_TIM_OC_MODE(MODE) (((MODE) == TIM_OCMode_Timing) ||                               ((MODE) == TIM_OCMode_Active) ||                               ((MODE) == TIM_OCMode_Inactive) ||                               ((MODE) == TIM_OCMode_Toggle)||                               ((MODE) == TIM_OCMode_PWM1) ||                               ((MODE) == TIM_OCMode_PWM2))
N#define IS_TIM_OCM(MODE) (((MODE) == TIM_OCMode_Timing) || \
N                          ((MODE) == TIM_OCMode_Active) || \
N                          ((MODE) == TIM_OCMode_Inactive) || \
N                          ((MODE) == TIM_OCMode_Toggle)|| \
N                          ((MODE) == TIM_OCMode_PWM1) || \
N                          ((MODE) == TIM_OCMode_PWM2) ||	\
N                          ((MODE) == TIM_ForcedAction_Active) || \
N                          ((MODE) == TIM_ForcedAction_InActive))
X#define IS_TIM_OCM(MODE) (((MODE) == TIM_OCMode_Timing) ||                           ((MODE) == TIM_OCMode_Active) ||                           ((MODE) == TIM_OCMode_Inactive) ||                           ((MODE) == TIM_OCMode_Toggle)||                           ((MODE) == TIM_OCMode_PWM1) ||                           ((MODE) == TIM_OCMode_PWM2) ||	                          ((MODE) == TIM_ForcedAction_Active) ||                           ((MODE) == TIM_ForcedAction_InActive))
N/**
N  * @}
N  */
N
N/** @defgroup TIM_One_Pulse_Mode 
N  * @{
N  */
N
N#define TIM_OPMode_Single                  ((uint16_t)0x0008)
N#define TIM_OPMode_Repetitive              ((uint16_t)0x0000)
N#define IS_TIM_OPM_MODE(MODE) (((MODE) == TIM_OPMode_Single) || \
N                               ((MODE) == TIM_OPMode_Repetitive))
X#define IS_TIM_OPM_MODE(MODE) (((MODE) == TIM_OPMode_Single) ||                                ((MODE) == TIM_OPMode_Repetitive))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Channel 
N  * @{
N  */
N
N#define TIM_Channel_1                      ((uint16_t)0x0000)
N#define TIM_Channel_2                      ((uint16_t)0x0004)
N#define TIM_Channel_3                      ((uint16_t)0x0008)
N#define TIM_Channel_4                      ((uint16_t)0x000C)
N                                 
N#define IS_TIM_CHANNEL(CHANNEL) (((CHANNEL) == TIM_Channel_1) || \
N                                 ((CHANNEL) == TIM_Channel_2) || \
N                                 ((CHANNEL) == TIM_Channel_3) || \
N                                 ((CHANNEL) == TIM_Channel_4))
X#define IS_TIM_CHANNEL(CHANNEL) (((CHANNEL) == TIM_Channel_1) ||                                  ((CHANNEL) == TIM_Channel_2) ||                                  ((CHANNEL) == TIM_Channel_3) ||                                  ((CHANNEL) == TIM_Channel_4))
N                                 
N#define IS_TIM_PWMI_CHANNEL(CHANNEL) (((CHANNEL) == TIM_Channel_1) || \
N                                      ((CHANNEL) == TIM_Channel_2))
X#define IS_TIM_PWMI_CHANNEL(CHANNEL) (((CHANNEL) == TIM_Channel_1) ||                                       ((CHANNEL) == TIM_Channel_2))
N#define IS_TIM_COMPLEMENTARY_CHANNEL(CHANNEL) (((CHANNEL) == TIM_Channel_1) || \
N                                               ((CHANNEL) == TIM_Channel_2) || \
N                                               ((CHANNEL) == TIM_Channel_3))
X#define IS_TIM_COMPLEMENTARY_CHANNEL(CHANNEL) (((CHANNEL) == TIM_Channel_1) ||                                                ((CHANNEL) == TIM_Channel_2) ||                                                ((CHANNEL) == TIM_Channel_3))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Clock_Division_CKD 
N  * @{
N  */
N
N#define TIM_CKD_DIV1                       ((uint16_t)0x0000)
N#define TIM_CKD_DIV2                       ((uint16_t)0x0100)
N#define TIM_CKD_DIV4                       ((uint16_t)0x0200)
N#define IS_TIM_CKD_DIV(DIV) (((DIV) == TIM_CKD_DIV1) || \
N                             ((DIV) == TIM_CKD_DIV2) || \
N                             ((DIV) == TIM_CKD_DIV4))
X#define IS_TIM_CKD_DIV(DIV) (((DIV) == TIM_CKD_DIV1) ||                              ((DIV) == TIM_CKD_DIV2) ||                              ((DIV) == TIM_CKD_DIV4))
N/**
N  * @}
N  */
N
N/** @defgroup TIM_Counter_Mode 
N  * @{
N  */
N
N#define TIM_CounterMode_Up                 ((uint16_t)0x0000)
N#define TIM_CounterMode_Down               ((uint16_t)0x0010)
N#define TIM_CounterMode_CenterAligned1     ((uint16_t)0x0020)
N#define TIM_CounterMode_CenterAligned2     ((uint16_t)0x0040)
N#define TIM_CounterMode_CenterAligned3     ((uint16_t)0x0060)
N#define IS_TIM_COUNTER_MODE(MODE) (((MODE) == TIM_CounterMode_Up) ||  \
N                                   ((MODE) == TIM_CounterMode_Down) || \
N                                   ((MODE) == TIM_CounterMode_CenterAligned1) || \
N                                   ((MODE) == TIM_CounterMode_CenterAligned2) || \
N                                   ((MODE) == TIM_CounterMode_CenterAligned3))
X#define IS_TIM_COUNTER_MODE(MODE) (((MODE) == TIM_CounterMode_Up) ||                                     ((MODE) == TIM_CounterMode_Down) ||                                    ((MODE) == TIM_CounterMode_CenterAligned1) ||                                    ((MODE) == TIM_CounterMode_CenterAligned2) ||                                    ((MODE) == TIM_CounterMode_CenterAligned3))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Output_Compare_Polarity 
N  * @{
N  */
N
N#define TIM_OCPolarity_High                ((uint16_t)0x0000)
N#define TIM_OCPolarity_Low                 ((uint16_t)0x0002)
N#define IS_TIM_OC_POLARITY(POLARITY) (((POLARITY) == TIM_OCPolarity_High) || \
N                                      ((POLARITY) == TIM_OCPolarity_Low))
X#define IS_TIM_OC_POLARITY(POLARITY) (((POLARITY) == TIM_OCPolarity_High) ||                                       ((POLARITY) == TIM_OCPolarity_Low))
N/**
N  * @}
N  */
N
N/** @defgroup TIM_Output_Compare_N_Polarity 
N  * @{
N  */
N  
N#define TIM_OCNPolarity_High               ((uint16_t)0x0000)
N#define TIM_OCNPolarity_Low                ((uint16_t)0x0008)
N#define IS_TIM_OCN_POLARITY(POLARITY) (((POLARITY) == TIM_OCNPolarity_High) || \
N                                       ((POLARITY) == TIM_OCNPolarity_Low))
X#define IS_TIM_OCN_POLARITY(POLARITY) (((POLARITY) == TIM_OCNPolarity_High) ||                                        ((POLARITY) == TIM_OCNPolarity_Low))
N/**
N  * @}
N  */
N
N/** @defgroup TIM_Output_Compare_State 
N  * @{
N  */
N
N#define TIM_OutputState_Disable            ((uint16_t)0x0000)
N#define TIM_OutputState_Enable             ((uint16_t)0x0001)
N#define IS_TIM_OUTPUT_STATE(STATE) (((STATE) == TIM_OutputState_Disable) || \
N                                    ((STATE) == TIM_OutputState_Enable))
X#define IS_TIM_OUTPUT_STATE(STATE) (((STATE) == TIM_OutputState_Disable) ||                                     ((STATE) == TIM_OutputState_Enable))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Output_Compare_N_State
N  * @{
N  */
N
N#define TIM_OutputNState_Disable           ((uint16_t)0x0000)
N#define TIM_OutputNState_Enable            ((uint16_t)0x0004)
N#define IS_TIM_OUTPUTN_STATE(STATE) (((STATE) == TIM_OutputNState_Disable) || \
N                                     ((STATE) == TIM_OutputNState_Enable))
X#define IS_TIM_OUTPUTN_STATE(STATE) (((STATE) == TIM_OutputNState_Disable) ||                                      ((STATE) == TIM_OutputNState_Enable))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Capture_Compare_State
N  * @{
N  */
N
N#define TIM_CCx_Enable                      ((uint16_t)0x0001)
N#define TIM_CCx_Disable                     ((uint16_t)0x0000)
N#define IS_TIM_CCX(CCX) (((CCX) == TIM_CCx_Enable) || \
N                         ((CCX) == TIM_CCx_Disable))
X#define IS_TIM_CCX(CCX) (((CCX) == TIM_CCx_Enable) ||                          ((CCX) == TIM_CCx_Disable))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Capture_Compare_N_State
N  * @{
N  */
N
N#define TIM_CCxN_Enable                     ((uint16_t)0x0004)
N#define TIM_CCxN_Disable                    ((uint16_t)0x0000)
N#define IS_TIM_CCXN(CCXN) (((CCXN) == TIM_CCxN_Enable) || \
N                           ((CCXN) == TIM_CCxN_Disable))
X#define IS_TIM_CCXN(CCXN) (((CCXN) == TIM_CCxN_Enable) ||                            ((CCXN) == TIM_CCxN_Disable))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Break_Input_enable_disable 
N  * @{
N  */
N
N#define TIM_Break_Enable                   ((uint16_t)0x1000)
N#define TIM_Break_Disable                  ((uint16_t)0x0000)
N#define IS_TIM_BREAK_STATE(STATE) (((STATE) == TIM_Break_Enable) || \
N                                   ((STATE) == TIM_Break_Disable))
X#define IS_TIM_BREAK_STATE(STATE) (((STATE) == TIM_Break_Enable) ||                                    ((STATE) == TIM_Break_Disable))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Break_Polarity 
N  * @{
N  */
N
N#define TIM_BreakPolarity_Low              ((uint16_t)0x0000)
N#define TIM_BreakPolarity_High             ((uint16_t)0x2000)
N#define IS_TIM_BREAK_POLARITY(POLARITY) (((POLARITY) == TIM_BreakPolarity_Low) || \
N                                         ((POLARITY) == TIM_BreakPolarity_High))
X#define IS_TIM_BREAK_POLARITY(POLARITY) (((POLARITY) == TIM_BreakPolarity_Low) ||                                          ((POLARITY) == TIM_BreakPolarity_High))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_AOE_Bit_Set_Reset 
N  * @{
N  */
N
N#define TIM_AutomaticOutput_Enable         ((uint16_t)0x4000)
N#define TIM_AutomaticOutput_Disable        ((uint16_t)0x0000)
N#define IS_TIM_AUTOMATIC_OUTPUT_STATE(STATE) (((STATE) == TIM_AutomaticOutput_Enable) || \
N                                              ((STATE) == TIM_AutomaticOutput_Disable))
X#define IS_TIM_AUTOMATIC_OUTPUT_STATE(STATE) (((STATE) == TIM_AutomaticOutput_Enable) ||                                               ((STATE) == TIM_AutomaticOutput_Disable))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Lock_level
N  * @{
N  */
N
N#define TIM_LOCKLevel_OFF                  ((uint16_t)0x0000)
N#define TIM_LOCKLevel_1                    ((uint16_t)0x0100)
N#define TIM_LOCKLevel_2                    ((uint16_t)0x0200)
N#define TIM_LOCKLevel_3                    ((uint16_t)0x0300)
N#define IS_TIM_LOCK_LEVEL(LEVEL) (((LEVEL) == TIM_LOCKLevel_OFF) || \
N                                  ((LEVEL) == TIM_LOCKLevel_1) || \
N                                  ((LEVEL) == TIM_LOCKLevel_2) || \
N                                  ((LEVEL) == TIM_LOCKLevel_3))
X#define IS_TIM_LOCK_LEVEL(LEVEL) (((LEVEL) == TIM_LOCKLevel_OFF) ||                                   ((LEVEL) == TIM_LOCKLevel_1) ||                                   ((LEVEL) == TIM_LOCKLevel_2) ||                                   ((LEVEL) == TIM_LOCKLevel_3))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_OSSI_Off_State_Selection_for_Idle_mode_state 
N  * @{
N  */
N
N#define TIM_OSSIState_Enable               ((uint16_t)0x0400)
N#define TIM_OSSIState_Disable              ((uint16_t)0x0000)
N#define IS_TIM_OSSI_STATE(STATE) (((STATE) == TIM_OSSIState_Enable) || \
N                                  ((STATE) == TIM_OSSIState_Disable))
X#define IS_TIM_OSSI_STATE(STATE) (((STATE) == TIM_OSSIState_Enable) ||                                   ((STATE) == TIM_OSSIState_Disable))
N/**
N  * @}
N  */
N
N/** @defgroup TIM_OSSR_Off_State_Selection_for_Run_mode_state
N  * @{
N  */
N
N#define TIM_OSSRState_Enable               ((uint16_t)0x0800)
N#define TIM_OSSRState_Disable              ((uint16_t)0x0000)
N#define IS_TIM_OSSR_STATE(STATE) (((STATE) == TIM_OSSRState_Enable) || \
N                                  ((STATE) == TIM_OSSRState_Disable))
X#define IS_TIM_OSSR_STATE(STATE) (((STATE) == TIM_OSSRState_Enable) ||                                   ((STATE) == TIM_OSSRState_Disable))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Output_Compare_Idle_State 
N  * @{
N  */
N
N#define TIM_OCIdleState_Set                ((uint16_t)0x0100)
N#define TIM_OCIdleState_Reset              ((uint16_t)0x0000)
N#define IS_TIM_OCIDLE_STATE(STATE) (((STATE) == TIM_OCIdleState_Set) || \
N                                    ((STATE) == TIM_OCIdleState_Reset))
X#define IS_TIM_OCIDLE_STATE(STATE) (((STATE) == TIM_OCIdleState_Set) ||                                     ((STATE) == TIM_OCIdleState_Reset))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Output_Compare_N_Idle_State 
N  * @{
N  */
N
N#define TIM_OCNIdleState_Set               ((uint16_t)0x0200)
N#define TIM_OCNIdleState_Reset             ((uint16_t)0x0000)
N#define IS_TIM_OCNIDLE_STATE(STATE) (((STATE) == TIM_OCNIdleState_Set) || \
N                                     ((STATE) == TIM_OCNIdleState_Reset))
X#define IS_TIM_OCNIDLE_STATE(STATE) (((STATE) == TIM_OCNIdleState_Set) ||                                      ((STATE) == TIM_OCNIdleState_Reset))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Input_Capture_Polarity 
N  * @{
N  */
N
N#define  TIM_ICPolarity_Rising             ((uint16_t)0x0000)
N#define  TIM_ICPolarity_Falling            ((uint16_t)0x0002)
N#define  TIM_ICPolarity_BothEdge           ((uint16_t)0x000A)
N#define IS_TIM_IC_POLARITY(POLARITY) (((POLARITY) == TIM_ICPolarity_Rising) || \
N                                      ((POLARITY) == TIM_ICPolarity_Falling)|| \
N                                      ((POLARITY) == TIM_ICPolarity_BothEdge))
X#define IS_TIM_IC_POLARITY(POLARITY) (((POLARITY) == TIM_ICPolarity_Rising) ||                                       ((POLARITY) == TIM_ICPolarity_Falling)||                                       ((POLARITY) == TIM_ICPolarity_BothEdge))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Input_Capture_Selection 
N  * @{
N  */
N
N#define TIM_ICSelection_DirectTI           ((uint16_t)0x0001) /*!< TIM Input 1, 2, 3 or 4 is selected to be 
N                                                                   connected to IC1, IC2, IC3 or IC4, respectively */
N#define TIM_ICSelection_IndirectTI         ((uint16_t)0x0002) /*!< TIM Input 1, 2, 3 or 4 is selected to be
N                                                                   connected to IC2, IC1, IC4 or IC3, respectively. */
N#define TIM_ICSelection_TRC                ((uint16_t)0x0003) /*!< TIM Input 1, 2, 3 or 4 is selected to be connected to TRC. */
N#define IS_TIM_IC_SELECTION(SELECTION) (((SELECTION) == TIM_ICSelection_DirectTI) || \
N                                        ((SELECTION) == TIM_ICSelection_IndirectTI) || \
N                                        ((SELECTION) == TIM_ICSelection_TRC))
X#define IS_TIM_IC_SELECTION(SELECTION) (((SELECTION) == TIM_ICSelection_DirectTI) ||                                         ((SELECTION) == TIM_ICSelection_IndirectTI) ||                                         ((SELECTION) == TIM_ICSelection_TRC))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Input_Capture_Prescaler 
N  * @{
N  */
N
N#define TIM_ICPSC_DIV1                     ((uint16_t)0x0000) /*!< Capture performed each time an edge is detected on the capture input. */
N#define TIM_ICPSC_DIV2                     ((uint16_t)0x0004) /*!< Capture performed once every 2 events. */
N#define TIM_ICPSC_DIV4                     ((uint16_t)0x0008) /*!< Capture performed once every 4 events. */
N#define TIM_ICPSC_DIV8                     ((uint16_t)0x000C) /*!< Capture performed once every 8 events. */
N#define IS_TIM_IC_PRESCALER(PRESCALER) (((PRESCALER) == TIM_ICPSC_DIV1) || \
N                                        ((PRESCALER) == TIM_ICPSC_DIV2) || \
N                                        ((PRESCALER) == TIM_ICPSC_DIV4) || \
N                                        ((PRESCALER) == TIM_ICPSC_DIV8))
X#define IS_TIM_IC_PRESCALER(PRESCALER) (((PRESCALER) == TIM_ICPSC_DIV1) ||                                         ((PRESCALER) == TIM_ICPSC_DIV2) ||                                         ((PRESCALER) == TIM_ICPSC_DIV4) ||                                         ((PRESCALER) == TIM_ICPSC_DIV8))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_interrupt_sources 
N  * @{
N  */
N
N#define TIM_IT_Update                      ((uint16_t)0x0001)
N#define TIM_IT_CC1                         ((uint16_t)0x0002)
N#define TIM_IT_CC2                         ((uint16_t)0x0004)
N#define TIM_IT_CC3                         ((uint16_t)0x0008)
N#define TIM_IT_CC4                         ((uint16_t)0x0010)
N#define TIM_IT_COM                         ((uint16_t)0x0020)
N#define TIM_IT_Trigger                     ((uint16_t)0x0040)
N#define TIM_IT_Break                       ((uint16_t)0x0080)
N#define IS_TIM_IT(IT) ((((IT) & (uint16_t)0xFF00) == 0x0000) && ((IT) != 0x0000))
N
N#define IS_TIM_GET_IT(IT) (((IT) == TIM_IT_Update) || \
N                           ((IT) == TIM_IT_CC1) || \
N                           ((IT) == TIM_IT_CC2) || \
N                           ((IT) == TIM_IT_CC3) || \
N                           ((IT) == TIM_IT_CC4) || \
N                           ((IT) == TIM_IT_COM) || \
N                           ((IT) == TIM_IT_Trigger) || \
N                           ((IT) == TIM_IT_Break))
X#define IS_TIM_GET_IT(IT) (((IT) == TIM_IT_Update) ||                            ((IT) == TIM_IT_CC1) ||                            ((IT) == TIM_IT_CC2) ||                            ((IT) == TIM_IT_CC3) ||                            ((IT) == TIM_IT_CC4) ||                            ((IT) == TIM_IT_COM) ||                            ((IT) == TIM_IT_Trigger) ||                            ((IT) == TIM_IT_Break))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_DMA_Base_address 
N  * @{
N  */
N
N#define TIM_DMABase_CR1                    ((uint16_t)0x0000)
N#define TIM_DMABase_CR2                    ((uint16_t)0x0001)
N#define TIM_DMABase_SMCR                   ((uint16_t)0x0002)
N#define TIM_DMABase_DIER                   ((uint16_t)0x0003)
N#define TIM_DMABase_SR                     ((uint16_t)0x0004)
N#define TIM_DMABase_EGR                    ((uint16_t)0x0005)
N#define TIM_DMABase_CCMR1                  ((uint16_t)0x0006)
N#define TIM_DMABase_CCMR2                  ((uint16_t)0x0007)
N#define TIM_DMABase_CCER                   ((uint16_t)0x0008)
N#define TIM_DMABase_CNT                    ((uint16_t)0x0009)
N#define TIM_DMABase_PSC                    ((uint16_t)0x000A)
N#define TIM_DMABase_ARR                    ((uint16_t)0x000B)
N#define TIM_DMABase_RCR                    ((uint16_t)0x000C)
N#define TIM_DMABase_CCR1                   ((uint16_t)0x000D)
N#define TIM_DMABase_CCR2                   ((uint16_t)0x000E)
N#define TIM_DMABase_CCR3                   ((uint16_t)0x000F)
N#define TIM_DMABase_CCR4                   ((uint16_t)0x0010)
N#define TIM_DMABase_BDTR                   ((uint16_t)0x0011)
N#define TIM_DMABase_DCR                    ((uint16_t)0x0012)
N#define TIM_DMABase_OR                     ((uint16_t)0x0013)
N#define IS_TIM_DMA_BASE(BASE) (((BASE) == TIM_DMABase_CR1) || \
N                               ((BASE) == TIM_DMABase_CR2) || \
N                               ((BASE) == TIM_DMABase_SMCR) || \
N                               ((BASE) == TIM_DMABase_DIER) || \
N                               ((BASE) == TIM_DMABase_SR) || \
N                               ((BASE) == TIM_DMABase_EGR) || \
N                               ((BASE) == TIM_DMABase_CCMR1) || \
N                               ((BASE) == TIM_DMABase_CCMR2) || \
N                               ((BASE) == TIM_DMABase_CCER) || \
N                               ((BASE) == TIM_DMABase_CNT) || \
N                               ((BASE) == TIM_DMABase_PSC) || \
N                               ((BASE) == TIM_DMABase_ARR) || \
N                               ((BASE) == TIM_DMABase_RCR) || \
N                               ((BASE) == TIM_DMABase_CCR1) || \
N                               ((BASE) == TIM_DMABase_CCR2) || \
N                               ((BASE) == TIM_DMABase_CCR3) || \
N                               ((BASE) == TIM_DMABase_CCR4) || \
N                               ((BASE) == TIM_DMABase_BDTR) || \
N                               ((BASE) == TIM_DMABase_DCR) || \
N                               ((BASE) == TIM_DMABase_OR))                     
X#define IS_TIM_DMA_BASE(BASE) (((BASE) == TIM_DMABase_CR1) ||                                ((BASE) == TIM_DMABase_CR2) ||                                ((BASE) == TIM_DMABase_SMCR) ||                                ((BASE) == TIM_DMABase_DIER) ||                                ((BASE) == TIM_DMABase_SR) ||                                ((BASE) == TIM_DMABase_EGR) ||                                ((BASE) == TIM_DMABase_CCMR1) ||                                ((BASE) == TIM_DMABase_CCMR2) ||                                ((BASE) == TIM_DMABase_CCER) ||                                ((BASE) == TIM_DMABase_CNT) ||                                ((BASE) == TIM_DMABase_PSC) ||                                ((BASE) == TIM_DMABase_ARR) ||                                ((BASE) == TIM_DMABase_RCR) ||                                ((BASE) == TIM_DMABase_CCR1) ||                                ((BASE) == TIM_DMABase_CCR2) ||                                ((BASE) == TIM_DMABase_CCR3) ||                                ((BASE) == TIM_DMABase_CCR4) ||                                ((BASE) == TIM_DMABase_BDTR) ||                                ((BASE) == TIM_DMABase_DCR) ||                                ((BASE) == TIM_DMABase_OR))                     
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_DMA_Burst_Length 
N  * @{
N  */
N
N#define TIM_DMABurstLength_1Transfer           ((uint16_t)0x0000)
N#define TIM_DMABurstLength_2Transfers          ((uint16_t)0x0100)
N#define TIM_DMABurstLength_3Transfers          ((uint16_t)0x0200)
N#define TIM_DMABurstLength_4Transfers          ((uint16_t)0x0300)
N#define TIM_DMABurstLength_5Transfers          ((uint16_t)0x0400)
N#define TIM_DMABurstLength_6Transfers          ((uint16_t)0x0500)
N#define TIM_DMABurstLength_7Transfers          ((uint16_t)0x0600)
N#define TIM_DMABurstLength_8Transfers          ((uint16_t)0x0700)
N#define TIM_DMABurstLength_9Transfers          ((uint16_t)0x0800)
N#define TIM_DMABurstLength_10Transfers         ((uint16_t)0x0900)
N#define TIM_DMABurstLength_11Transfers         ((uint16_t)0x0A00)
N#define TIM_DMABurstLength_12Transfers         ((uint16_t)0x0B00)
N#define TIM_DMABurstLength_13Transfers         ((uint16_t)0x0C00)
N#define TIM_DMABurstLength_14Transfers         ((uint16_t)0x0D00)
N#define TIM_DMABurstLength_15Transfers         ((uint16_t)0x0E00)
N#define TIM_DMABurstLength_16Transfers         ((uint16_t)0x0F00)
N#define TIM_DMABurstLength_17Transfers         ((uint16_t)0x1000)
N#define TIM_DMABurstLength_18Transfers         ((uint16_t)0x1100)
N#define IS_TIM_DMA_LENGTH(LENGTH) (((LENGTH) == TIM_DMABurstLength_1Transfer) || \
N                                   ((LENGTH) == TIM_DMABurstLength_2Transfers) || \
N                                   ((LENGTH) == TIM_DMABurstLength_3Transfers) || \
N                                   ((LENGTH) == TIM_DMABurstLength_4Transfers) || \
N                                   ((LENGTH) == TIM_DMABurstLength_5Transfers) || \
N                                   ((LENGTH) == TIM_DMABurstLength_6Transfers) || \
N                                   ((LENGTH) == TIM_DMABurstLength_7Transfers) || \
N                                   ((LENGTH) == TIM_DMABurstLength_8Transfers) || \
N                                   ((LENGTH) == TIM_DMABurstLength_9Transfers) || \
N                                   ((LENGTH) == TIM_DMABurstLength_10Transfers) || \
N                                   ((LENGTH) == TIM_DMABurstLength_11Transfers) || \
N                                   ((LENGTH) == TIM_DMABurstLength_12Transfers) || \
N                                   ((LENGTH) == TIM_DMABurstLength_13Transfers) || \
N                                   ((LENGTH) == TIM_DMABurstLength_14Transfers) || \
N                                   ((LENGTH) == TIM_DMABurstLength_15Transfers) || \
N                                   ((LENGTH) == TIM_DMABurstLength_16Transfers) || \
N                                   ((LENGTH) == TIM_DMABurstLength_17Transfers) || \
N                                   ((LENGTH) == TIM_DMABurstLength_18Transfers))
X#define IS_TIM_DMA_LENGTH(LENGTH) (((LENGTH) == TIM_DMABurstLength_1Transfer) ||                                    ((LENGTH) == TIM_DMABurstLength_2Transfers) ||                                    ((LENGTH) == TIM_DMABurstLength_3Transfers) ||                                    ((LENGTH) == TIM_DMABurstLength_4Transfers) ||                                    ((LENGTH) == TIM_DMABurstLength_5Transfers) ||                                    ((LENGTH) == TIM_DMABurstLength_6Transfers) ||                                    ((LENGTH) == TIM_DMABurstLength_7Transfers) ||                                    ((LENGTH) == TIM_DMABurstLength_8Transfers) ||                                    ((LENGTH) == TIM_DMABurstLength_9Transfers) ||                                    ((LENGTH) == TIM_DMABurstLength_10Transfers) ||                                    ((LENGTH) == TIM_DMABurstLength_11Transfers) ||                                    ((LENGTH) == TIM_DMABurstLength_12Transfers) ||                                    ((LENGTH) == TIM_DMABurstLength_13Transfers) ||                                    ((LENGTH) == TIM_DMABurstLength_14Transfers) ||                                    ((LENGTH) == TIM_DMABurstLength_15Transfers) ||                                    ((LENGTH) == TIM_DMABurstLength_16Transfers) ||                                    ((LENGTH) == TIM_DMABurstLength_17Transfers) ||                                    ((LENGTH) == TIM_DMABurstLength_18Transfers))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_DMA_sources 
N  * @{
N  */
N
N#define TIM_DMA_Update                     ((uint16_t)0x0100)
N#define TIM_DMA_CC1                        ((uint16_t)0x0200)
N#define TIM_DMA_CC2                        ((uint16_t)0x0400)
N#define TIM_DMA_CC3                        ((uint16_t)0x0800)
N#define TIM_DMA_CC4                        ((uint16_t)0x1000)
N#define TIM_DMA_COM                        ((uint16_t)0x2000)
N#define TIM_DMA_Trigger                    ((uint16_t)0x4000)
N#define IS_TIM_DMA_SOURCE(SOURCE) ((((SOURCE) & (uint16_t)0x80FF) == 0x0000) && ((SOURCE) != 0x0000))
N
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_External_Trigger_Prescaler 
N  * @{
N  */
N
N#define TIM_ExtTRGPSC_OFF                  ((uint16_t)0x0000)
N#define TIM_ExtTRGPSC_DIV2                 ((uint16_t)0x1000)
N#define TIM_ExtTRGPSC_DIV4                 ((uint16_t)0x2000)
N#define TIM_ExtTRGPSC_DIV8                 ((uint16_t)0x3000)
N#define IS_TIM_EXT_PRESCALER(PRESCALER) (((PRESCALER) == TIM_ExtTRGPSC_OFF) || \
N                                         ((PRESCALER) == TIM_ExtTRGPSC_DIV2) || \
N                                         ((PRESCALER) == TIM_ExtTRGPSC_DIV4) || \
N                                         ((PRESCALER) == TIM_ExtTRGPSC_DIV8))
X#define IS_TIM_EXT_PRESCALER(PRESCALER) (((PRESCALER) == TIM_ExtTRGPSC_OFF) ||                                          ((PRESCALER) == TIM_ExtTRGPSC_DIV2) ||                                          ((PRESCALER) == TIM_ExtTRGPSC_DIV4) ||                                          ((PRESCALER) == TIM_ExtTRGPSC_DIV8))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Internal_Trigger_Selection 
N  * @{
N  */
N
N#define TIM_TS_ITR0                        ((uint16_t)0x0000)
N#define TIM_TS_ITR1                        ((uint16_t)0x0010)
N#define TIM_TS_ITR2                        ((uint16_t)0x0020)
N#define TIM_TS_ITR3                        ((uint16_t)0x0030)
N#define TIM_TS_TI1F_ED                     ((uint16_t)0x0040)
N#define TIM_TS_TI1FP1                      ((uint16_t)0x0050)
N#define TIM_TS_TI2FP2                      ((uint16_t)0x0060)
N#define TIM_TS_ETRF                        ((uint16_t)0x0070)
N#define IS_TIM_TRIGGER_SELECTION(SELECTION) (((SELECTION) == TIM_TS_ITR0) || \
N                                             ((SELECTION) == TIM_TS_ITR1) || \
N                                             ((SELECTION) == TIM_TS_ITR2) || \
N                                             ((SELECTION) == TIM_TS_ITR3) || \
N                                             ((SELECTION) == TIM_TS_TI1F_ED) || \
N                                             ((SELECTION) == TIM_TS_TI1FP1) || \
N                                             ((SELECTION) == TIM_TS_TI2FP2) || \
N                                             ((SELECTION) == TIM_TS_ETRF))
X#define IS_TIM_TRIGGER_SELECTION(SELECTION) (((SELECTION) == TIM_TS_ITR0) ||                                              ((SELECTION) == TIM_TS_ITR1) ||                                              ((SELECTION) == TIM_TS_ITR2) ||                                              ((SELECTION) == TIM_TS_ITR3) ||                                              ((SELECTION) == TIM_TS_TI1F_ED) ||                                              ((SELECTION) == TIM_TS_TI1FP1) ||                                              ((SELECTION) == TIM_TS_TI2FP2) ||                                              ((SELECTION) == TIM_TS_ETRF))
N#define IS_TIM_INTERNAL_TRIGGER_SELECTION(SELECTION) (((SELECTION) == TIM_TS_ITR0) || \
N                                                      ((SELECTION) == TIM_TS_ITR1) || \
N                                                      ((SELECTION) == TIM_TS_ITR2) || \
N                                                      ((SELECTION) == TIM_TS_ITR3))
X#define IS_TIM_INTERNAL_TRIGGER_SELECTION(SELECTION) (((SELECTION) == TIM_TS_ITR0) ||                                                       ((SELECTION) == TIM_TS_ITR1) ||                                                       ((SELECTION) == TIM_TS_ITR2) ||                                                       ((SELECTION) == TIM_TS_ITR3))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_TIx_External_Clock_Source 
N  * @{
N  */
N
N#define TIM_TIxExternalCLK1Source_TI1      ((uint16_t)0x0050)
N#define TIM_TIxExternalCLK1Source_TI2      ((uint16_t)0x0060)
N#define TIM_TIxExternalCLK1Source_TI1ED    ((uint16_t)0x0040)
N
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_External_Trigger_Polarity 
N  * @{
N  */ 
N#define TIM_ExtTRGPolarity_Inverted        ((uint16_t)0x8000)
N#define TIM_ExtTRGPolarity_NonInverted     ((uint16_t)0x0000)
N#define IS_TIM_EXT_POLARITY(POLARITY) (((POLARITY) == TIM_ExtTRGPolarity_Inverted) || \
N                                       ((POLARITY) == TIM_ExtTRGPolarity_NonInverted))
X#define IS_TIM_EXT_POLARITY(POLARITY) (((POLARITY) == TIM_ExtTRGPolarity_Inverted) ||                                        ((POLARITY) == TIM_ExtTRGPolarity_NonInverted))
N/**
N  * @}
N  */
N
N/** @defgroup TIM_Prescaler_Reload_Mode 
N  * @{
N  */
N
N#define TIM_PSCReloadMode_Update           ((uint16_t)0x0000)
N#define TIM_PSCReloadMode_Immediate        ((uint16_t)0x0001)
N#define IS_TIM_PRESCALER_RELOAD(RELOAD) (((RELOAD) == TIM_PSCReloadMode_Update) || \
N                                         ((RELOAD) == TIM_PSCReloadMode_Immediate))
X#define IS_TIM_PRESCALER_RELOAD(RELOAD) (((RELOAD) == TIM_PSCReloadMode_Update) ||                                          ((RELOAD) == TIM_PSCReloadMode_Immediate))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Forced_Action 
N  * @{
N  */
N
N#define TIM_ForcedAction_Active            ((uint16_t)0x0050)
N#define TIM_ForcedAction_InActive          ((uint16_t)0x0040)
N#define IS_TIM_FORCED_ACTION(ACTION) (((ACTION) == TIM_ForcedAction_Active) || \
N                                      ((ACTION) == TIM_ForcedAction_InActive))
X#define IS_TIM_FORCED_ACTION(ACTION) (((ACTION) == TIM_ForcedAction_Active) ||                                       ((ACTION) == TIM_ForcedAction_InActive))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Encoder_Mode 
N  * @{
N  */
N
N#define TIM_EncoderMode_TI1                ((uint16_t)0x0001)
N#define TIM_EncoderMode_TI2                ((uint16_t)0x0002)
N#define TIM_EncoderMode_TI12               ((uint16_t)0x0003)
N#define IS_TIM_ENCODER_MODE(MODE) (((MODE) == TIM_EncoderMode_TI1) || \
N                                   ((MODE) == TIM_EncoderMode_TI2) || \
N                                   ((MODE) == TIM_EncoderMode_TI12))
X#define IS_TIM_ENCODER_MODE(MODE) (((MODE) == TIM_EncoderMode_TI1) ||                                    ((MODE) == TIM_EncoderMode_TI2) ||                                    ((MODE) == TIM_EncoderMode_TI12))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup TIM_Event_Source 
N  * @{
N  */
N
N#define TIM_EventSource_Update             ((uint16_t)0x0001)
N#define TIM_EventSource_CC1                ((uint16_t)0x0002)
N#define TIM_EventSource_CC2                ((uint16_t)0x0004)
N#define TIM_EventSource_CC3                ((uint16_t)0x0008)
N#define TIM_EventSource_CC4                ((uint16_t)0x0010)
N#define TIM_EventSource_COM                ((uint16_t)0x0020)
N#define TIM_EventSource_Trigger            ((uint16_t)0x0040)
N#define TIM_EventSource_Break              ((uint16_t)0x0080)
N#define IS_TIM_EVENT_SOURCE(SOURCE) ((((SOURCE) & (uint16_t)0xFF00) == 0x0000) && ((SOURCE) != 0x0000))                                          
N  
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Update_Source 
N  * @{
N  */
N
N#define TIM_UpdateSource_Global            ((uint16_t)0x0000) /*!< Source of update is the counter overflow/underflow
N                                                                   or the setting of UG bit, or an update generation
N                                                                   through the slave mode controller. */
N#define TIM_UpdateSource_Regular           ((uint16_t)0x0001) /*!< Source of update is counter overflow/underflow. */
N#define IS_TIM_UPDATE_SOURCE(SOURCE) (((SOURCE) == TIM_UpdateSource_Global) || \
N                                      ((SOURCE) == TIM_UpdateSource_Regular))
X#define IS_TIM_UPDATE_SOURCE(SOURCE) (((SOURCE) == TIM_UpdateSource_Global) ||                                       ((SOURCE) == TIM_UpdateSource_Regular))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Output_Compare_Preload_State 
N  * @{
N  */
N
N#define TIM_OCPreload_Enable               ((uint16_t)0x0008)
N#define TIM_OCPreload_Disable              ((uint16_t)0x0000)
N#define IS_TIM_OCPRELOAD_STATE(STATE) (((STATE) == TIM_OCPreload_Enable) || \
N                                       ((STATE) == TIM_OCPreload_Disable))
X#define IS_TIM_OCPRELOAD_STATE(STATE) (((STATE) == TIM_OCPreload_Enable) ||                                        ((STATE) == TIM_OCPreload_Disable))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Output_Compare_Fast_State 
N  * @{
N  */
N
N#define TIM_OCFast_Enable                  ((uint16_t)0x0004)
N#define TIM_OCFast_Disable                 ((uint16_t)0x0000)
N#define IS_TIM_OCFAST_STATE(STATE) (((STATE) == TIM_OCFast_Enable) || \
N                                    ((STATE) == TIM_OCFast_Disable))
X#define IS_TIM_OCFAST_STATE(STATE) (((STATE) == TIM_OCFast_Enable) ||                                     ((STATE) == TIM_OCFast_Disable))
N                                     
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Output_Compare_Clear_State 
N  * @{
N  */
N
N#define TIM_OCClear_Enable                 ((uint16_t)0x0080)
N#define TIM_OCClear_Disable                ((uint16_t)0x0000)
N#define IS_TIM_OCCLEAR_STATE(STATE) (((STATE) == TIM_OCClear_Enable) || \
N                                     ((STATE) == TIM_OCClear_Disable))
X#define IS_TIM_OCCLEAR_STATE(STATE) (((STATE) == TIM_OCClear_Enable) ||                                      ((STATE) == TIM_OCClear_Disable))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Trigger_Output_Source 
N  * @{
N  */
N
N#define TIM_TRGOSource_Reset               ((uint16_t)0x0000)
N#define TIM_TRGOSource_Enable              ((uint16_t)0x0010)
N#define TIM_TRGOSource_Update              ((uint16_t)0x0020)
N#define TIM_TRGOSource_OC1                 ((uint16_t)0x0030)
N#define TIM_TRGOSource_OC1Ref              ((uint16_t)0x0040)
N#define TIM_TRGOSource_OC2Ref              ((uint16_t)0x0050)
N#define TIM_TRGOSource_OC3Ref              ((uint16_t)0x0060)
N#define TIM_TRGOSource_OC4Ref              ((uint16_t)0x0070)
N#define IS_TIM_TRGO_SOURCE(SOURCE) (((SOURCE) == TIM_TRGOSource_Reset) || \
N                                    ((SOURCE) == TIM_TRGOSource_Enable) || \
N                                    ((SOURCE) == TIM_TRGOSource_Update) || \
N                                    ((SOURCE) == TIM_TRGOSource_OC1) || \
N                                    ((SOURCE) == TIM_TRGOSource_OC1Ref) || \
N                                    ((SOURCE) == TIM_TRGOSource_OC2Ref) || \
N                                    ((SOURCE) == TIM_TRGOSource_OC3Ref) || \
N                                    ((SOURCE) == TIM_TRGOSource_OC4Ref))
X#define IS_TIM_TRGO_SOURCE(SOURCE) (((SOURCE) == TIM_TRGOSource_Reset) ||                                     ((SOURCE) == TIM_TRGOSource_Enable) ||                                     ((SOURCE) == TIM_TRGOSource_Update) ||                                     ((SOURCE) == TIM_TRGOSource_OC1) ||                                     ((SOURCE) == TIM_TRGOSource_OC1Ref) ||                                     ((SOURCE) == TIM_TRGOSource_OC2Ref) ||                                     ((SOURCE) == TIM_TRGOSource_OC3Ref) ||                                     ((SOURCE) == TIM_TRGOSource_OC4Ref))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Slave_Mode 
N  * @{
N  */
N
N#define TIM_SlaveMode_Reset                ((uint16_t)0x0004)
N#define TIM_SlaveMode_Gated                ((uint16_t)0x0005)
N#define TIM_SlaveMode_Trigger              ((uint16_t)0x0006)
N#define TIM_SlaveMode_External1            ((uint16_t)0x0007)
N#define IS_TIM_SLAVE_MODE(MODE) (((MODE) == TIM_SlaveMode_Reset) || \
N                                 ((MODE) == TIM_SlaveMode_Gated) || \
N                                 ((MODE) == TIM_SlaveMode_Trigger) || \
N                                 ((MODE) == TIM_SlaveMode_External1))
X#define IS_TIM_SLAVE_MODE(MODE) (((MODE) == TIM_SlaveMode_Reset) ||                                  ((MODE) == TIM_SlaveMode_Gated) ||                                  ((MODE) == TIM_SlaveMode_Trigger) ||                                  ((MODE) == TIM_SlaveMode_External1))
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Master_Slave_Mode 
N  * @{
N  */
N
N#define TIM_MasterSlaveMode_Enable         ((uint16_t)0x0080)
N#define TIM_MasterSlaveMode_Disable        ((uint16_t)0x0000)
N#define IS_TIM_MSM_STATE(STATE) (((STATE) == TIM_MasterSlaveMode_Enable) || \
N                                 ((STATE) == TIM_MasterSlaveMode_Disable))
X#define IS_TIM_MSM_STATE(STATE) (((STATE) == TIM_MasterSlaveMode_Enable) ||                                  ((STATE) == TIM_MasterSlaveMode_Disable))
N/**
N  * @}
N  */ 
N/** @defgroup TIM_Remap 
N  * @{
N  */
N
N#define TIM2_TIM8_TRGO                     ((uint16_t)0x0000)
N#define TIM2_ETH_PTP                       ((uint16_t)0x0400)
N#define TIM2_USBFS_SOF                     ((uint16_t)0x0800)
N#define TIM2_USBHS_SOF                     ((uint16_t)0x0C00)
N
N#define TIM5_GPIO                          ((uint16_t)0x0000)
N#define TIM5_LSI                           ((uint16_t)0x0040)
N#define TIM5_LSE                           ((uint16_t)0x0080)
N#define TIM5_RTC                           ((uint16_t)0x00C0)
N
N#define TIM11_GPIO                         ((uint16_t)0x0000)
N#define TIM11_HSE                          ((uint16_t)0x0002)
N
N#define IS_TIM_REMAP(TIM_REMAP)	 (((TIM_REMAP) == TIM2_TIM8_TRGO)||\
N                                  ((TIM_REMAP) == TIM2_ETH_PTP)||\
N                                  ((TIM_REMAP) == TIM2_USBFS_SOF)||\
N                                  ((TIM_REMAP) == TIM2_USBHS_SOF)||\
N                                  ((TIM_REMAP) == TIM5_GPIO)||\
N                                  ((TIM_REMAP) == TIM5_LSI)||\
N                                  ((TIM_REMAP) == TIM5_LSE)||\
N                                  ((TIM_REMAP) == TIM5_RTC)||\
N                                  ((TIM_REMAP) == TIM11_GPIO)||\
N                                  ((TIM_REMAP) == TIM11_HSE))
X#define IS_TIM_REMAP(TIM_REMAP)	 (((TIM_REMAP) == TIM2_TIM8_TRGO)||                                  ((TIM_REMAP) == TIM2_ETH_PTP)||                                  ((TIM_REMAP) == TIM2_USBFS_SOF)||                                  ((TIM_REMAP) == TIM2_USBHS_SOF)||                                  ((TIM_REMAP) == TIM5_GPIO)||                                  ((TIM_REMAP) == TIM5_LSI)||                                  ((TIM_REMAP) == TIM5_LSE)||                                  ((TIM_REMAP) == TIM5_RTC)||                                  ((TIM_REMAP) == TIM11_GPIO)||                                  ((TIM_REMAP) == TIM11_HSE))
N
N/**
N  * @}
N  */ 
N/** @defgroup TIM_Flags 
N  * @{
N  */
N
N#define TIM_FLAG_Update                    ((uint16_t)0x0001)
N#define TIM_FLAG_CC1                       ((uint16_t)0x0002)
N#define TIM_FLAG_CC2                       ((uint16_t)0x0004)
N#define TIM_FLAG_CC3                       ((uint16_t)0x0008)
N#define TIM_FLAG_CC4                       ((uint16_t)0x0010)
N#define TIM_FLAG_COM                       ((uint16_t)0x0020)
N#define TIM_FLAG_Trigger                   ((uint16_t)0x0040)
N#define TIM_FLAG_Break                     ((uint16_t)0x0080)
N#define TIM_FLAG_CC1OF                     ((uint16_t)0x0200)
N#define TIM_FLAG_CC2OF                     ((uint16_t)0x0400)
N#define TIM_FLAG_CC3OF                     ((uint16_t)0x0800)
N#define TIM_FLAG_CC4OF                     ((uint16_t)0x1000)
N#define IS_TIM_GET_FLAG(FLAG) (((FLAG) == TIM_FLAG_Update) || \
N                               ((FLAG) == TIM_FLAG_CC1) || \
N                               ((FLAG) == TIM_FLAG_CC2) || \
N                               ((FLAG) == TIM_FLAG_CC3) || \
N                               ((FLAG) == TIM_FLAG_CC4) || \
N                               ((FLAG) == TIM_FLAG_COM) || \
N                               ((FLAG) == TIM_FLAG_Trigger) || \
N                               ((FLAG) == TIM_FLAG_Break) || \
N                               ((FLAG) == TIM_FLAG_CC1OF) || \
N                               ((FLAG) == TIM_FLAG_CC2OF) || \
N                               ((FLAG) == TIM_FLAG_CC3OF) || \
N                               ((FLAG) == TIM_FLAG_CC4OF))
X#define IS_TIM_GET_FLAG(FLAG) (((FLAG) == TIM_FLAG_Update) ||                                ((FLAG) == TIM_FLAG_CC1) ||                                ((FLAG) == TIM_FLAG_CC2) ||                                ((FLAG) == TIM_FLAG_CC3) ||                                ((FLAG) == TIM_FLAG_CC4) ||                                ((FLAG) == TIM_FLAG_COM) ||                                ((FLAG) == TIM_FLAG_Trigger) ||                                ((FLAG) == TIM_FLAG_Break) ||                                ((FLAG) == TIM_FLAG_CC1OF) ||                                ((FLAG) == TIM_FLAG_CC2OF) ||                                ((FLAG) == TIM_FLAG_CC3OF) ||                                ((FLAG) == TIM_FLAG_CC4OF))
N
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Input_Capture_Filer_Value 
N  * @{
N  */
N
N#define IS_TIM_IC_FILTER(ICFILTER) ((ICFILTER) <= 0xF) 
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_External_Trigger_Filter 
N  * @{
N  */
N
N#define IS_TIM_EXT_FILTER(EXTFILTER) ((EXTFILTER) <= 0xF)
N/**
N  * @}
N  */ 
N
N/** @defgroup TIM_Legacy 
N  * @{
N  */
N
N#define TIM_DMABurstLength_1Byte           TIM_DMABurstLength_1Transfer
N#define TIM_DMABurstLength_2Bytes          TIM_DMABurstLength_2Transfers
N#define TIM_DMABurstLength_3Bytes          TIM_DMABurstLength_3Transfers
N#define TIM_DMABurstLength_4Bytes          TIM_DMABurstLength_4Transfers
N#define TIM_DMABurstLength_5Bytes          TIM_DMABurstLength_5Transfers
N#define TIM_DMABurstLength_6Bytes          TIM_DMABurstLength_6Transfers
N#define TIM_DMABurstLength_7Bytes          TIM_DMABurstLength_7Transfers
N#define TIM_DMABurstLength_8Bytes          TIM_DMABurstLength_8Transfers
N#define TIM_DMABurstLength_9Bytes          TIM_DMABurstLength_9Transfers
N#define TIM_DMABurstLength_10Bytes         TIM_DMABurstLength_10Transfers
N#define TIM_DMABurstLength_11Bytes         TIM_DMABurstLength_11Transfers
N#define TIM_DMABurstLength_12Bytes         TIM_DMABurstLength_12Transfers
N#define TIM_DMABurstLength_13Bytes         TIM_DMABurstLength_13Transfers
N#define TIM_DMABurstLength_14Bytes         TIM_DMABurstLength_14Transfers
N#define TIM_DMABurstLength_15Bytes         TIM_DMABurstLength_15Transfers
N#define TIM_DMABurstLength_16Bytes         TIM_DMABurstLength_16Transfers
N#define TIM_DMABurstLength_17Bytes         TIM_DMABurstLength_17Transfers
N#define TIM_DMABurstLength_18Bytes         TIM_DMABurstLength_18Transfers
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/ 
N
N/* TimeBase management ********************************************************/
Nvoid TIM_DeInit(TIM_TypeDef* TIMx);
Nvoid TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct);
Nvoid TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct);
Nvoid TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode);
Nvoid TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode);
Nvoid TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter);
Nvoid TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload);
Nuint32_t TIM_GetCounter(TIM_TypeDef* TIMx);
Nuint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx);
Nvoid TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState);
Nvoid TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource);
Nvoid TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState);
Nvoid TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode);
Nvoid TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD);
Nvoid TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState);
N
N/* Output Compare management **************************************************/
Nvoid TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
Nvoid TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
Nvoid TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
Nvoid TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
Nvoid TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct);
Nvoid TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode);
Nvoid TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1);
Nvoid TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2);
Nvoid TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3);
Nvoid TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4);
Nvoid TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
Nvoid TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
Nvoid TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
Nvoid TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
Nvoid TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
Nvoid TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
Nvoid TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
Nvoid TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
Nvoid TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
Nvoid TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
Nvoid TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
Nvoid TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
Nvoid TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
Nvoid TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
Nvoid TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
Nvoid TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
Nvoid TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
Nvoid TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);
Nvoid TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
Nvoid TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);
Nvoid TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
Nvoid TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);
Nvoid TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
Nvoid TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx);
Nvoid TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN);
N
N/* Input Capture management ***************************************************/
Nvoid TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct);
Nvoid TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct);
Nvoid TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct);
Nuint32_t TIM_GetCapture1(TIM_TypeDef* TIMx);
Nuint32_t TIM_GetCapture2(TIM_TypeDef* TIMx);
Nuint32_t TIM_GetCapture3(TIM_TypeDef* TIMx);
Nuint32_t TIM_GetCapture4(TIM_TypeDef* TIMx);
Nvoid TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
Nvoid TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
Nvoid TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
Nvoid TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
N
N/* Advanced-control timers (TIM1 and TIM8) specific features ******************/
Nvoid TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct);
Nvoid TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct);
Nvoid TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState);
Nvoid TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState);
Nvoid TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState);
N
N/* Interrupts, DMA and flags management ***************************************/
Nvoid TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState);
Nvoid TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource);
NFlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG);
Nvoid TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG);
NITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT);
Nvoid TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT);
Nvoid TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength);
Nvoid TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState);
Nvoid TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState);
N
N/* Clocks management **********************************************************/
Nvoid TIM_InternalClockConfig(TIM_TypeDef* TIMx);
Nvoid TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);
Nvoid TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
N                                uint16_t TIM_ICPolarity, uint16_t ICFilter);
Nvoid TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
N                             uint16_t ExtTRGFilter);
Nvoid TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
N                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter);
N
N/* Synchronization management *************************************************/
Nvoid TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);
Nvoid TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource);
Nvoid TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode);
Nvoid TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode);
Nvoid TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
N                   uint16_t ExtTRGFilter);
N
N/* Specific interface management **********************************************/   
Nvoid TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
N                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity);
Nvoid TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState);
N
N/* Specific remapping management **********************************************/
Nvoid TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__STM32F4xx_TIM_H */
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 67 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_usart.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_usart.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_usart.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the USART 
N  *          firmware library.    
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************  
N  */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_USART_H
N#define __STM32F4xx_USART_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup USART
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/ 
N
N/** 
N  * @brief  USART Init Structure definition  
N  */ 
N  
Ntypedef struct
N{
N  uint32_t USART_BaudRate;            /*!< This member configures the USART communication baud rate.
N                                           The baud rate is computed using the following formula:
N                                            - IntegerDivider = ((PCLKx) / (8 * (OVR8+1) * (USART_InitStruct->USART_BaudRate)))
N                                            - FractionalDivider = ((IntegerDivider - ((u32) IntegerDivider)) * 8 * (OVR8+1)) + 0.5 
N                                           Where OVR8 is the "oversampling by 8 mode" configuration bit in the CR1 register. */
N
N  uint16_t USART_WordLength;          /*!< Specifies the number of data bits transmitted or received in a frame.
N                                           This parameter can be a value of @ref USART_Word_Length */
N
N  uint16_t USART_StopBits;            /*!< Specifies the number of stop bits transmitted.
N                                           This parameter can be a value of @ref USART_Stop_Bits */
N
N  uint16_t USART_Parity;              /*!< Specifies the parity mode.
N                                           This parameter can be a value of @ref USART_Parity
N                                           @note When parity is enabled, the computed parity is inserted
N                                                 at the MSB position of the transmitted data (9th bit when
N                                                 the word length is set to 9 data bits; 8th bit when the
N                                                 word length is set to 8 data bits). */
N 
N  uint16_t USART_Mode;                /*!< Specifies wether the Receive or Transmit mode is enabled or disabled.
N                                           This parameter can be a value of @ref USART_Mode */
N
N  uint16_t USART_HardwareFlowControl; /*!< Specifies wether the hardware flow control mode is enabled
N                                           or disabled.
N                                           This parameter can be a value of @ref USART_Hardware_Flow_Control */
N} USART_InitTypeDef;
N
N/** 
N  * @brief  USART Clock Init Structure definition  
N  */ 
N  
Ntypedef struct
N{
N
N  uint16_t USART_Clock;   /*!< Specifies whether the USART clock is enabled or disabled.
N                               This parameter can be a value of @ref USART_Clock */
N
N  uint16_t USART_CPOL;    /*!< Specifies the steady state of the serial clock.
N                               This parameter can be a value of @ref USART_Clock_Polarity */
N
N  uint16_t USART_CPHA;    /*!< Specifies the clock transition on which the bit capture is made.
N                               This parameter can be a value of @ref USART_Clock_Phase */
N
N  uint16_t USART_LastBit; /*!< Specifies whether the clock pulse corresponding to the last transmitted
N                               data bit (MSB) has to be output on the SCLK pin in synchronous mode.
N                               This parameter can be a value of @ref USART_Last_Bit */
N} USART_ClockInitTypeDef;
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup USART_Exported_Constants
N  * @{
N  */ 
N  
N#define IS_USART_ALL_PERIPH(PERIPH) (((PERIPH) == USART1) || \
N                                     ((PERIPH) == USART2) || \
N                                     ((PERIPH) == USART3) || \
N                                     ((PERIPH) == UART4)  || \
N                                     ((PERIPH) == UART5)  || \
N                                     ((PERIPH) == USART6) || \
N                                     ((PERIPH) == UART7)  || \
N                                     ((PERIPH) == UART8))
X#define IS_USART_ALL_PERIPH(PERIPH) (((PERIPH) == USART1) ||                                      ((PERIPH) == USART2) ||                                      ((PERIPH) == USART3) ||                                      ((PERIPH) == UART4)  ||                                      ((PERIPH) == UART5)  ||                                      ((PERIPH) == USART6) ||                                      ((PERIPH) == UART7)  ||                                      ((PERIPH) == UART8))
N
N#define IS_USART_1236_PERIPH(PERIPH) (((PERIPH) == USART1) || \
N                                      ((PERIPH) == USART2) || \
N                                      ((PERIPH) == USART3) || \
N                                      ((PERIPH) == USART6))
X#define IS_USART_1236_PERIPH(PERIPH) (((PERIPH) == USART1) ||                                       ((PERIPH) == USART2) ||                                       ((PERIPH) == USART3) ||                                       ((PERIPH) == USART6))
N
N/** @defgroup USART_Word_Length 
N  * @{
N  */ 
N  
N#define USART_WordLength_8b                  ((uint16_t)0x0000)
N#define USART_WordLength_9b                  ((uint16_t)0x1000)
N                                    
N#define IS_USART_WORD_LENGTH(LENGTH) (((LENGTH) == USART_WordLength_8b) || \
N                                      ((LENGTH) == USART_WordLength_9b))
X#define IS_USART_WORD_LENGTH(LENGTH) (((LENGTH) == USART_WordLength_8b) ||                                       ((LENGTH) == USART_WordLength_9b))
N/**
N  * @}
N  */ 
N
N/** @defgroup USART_Stop_Bits 
N  * @{
N  */ 
N  
N#define USART_StopBits_1                     ((uint16_t)0x0000)
N#define USART_StopBits_0_5                   ((uint16_t)0x1000)
N#define USART_StopBits_2                     ((uint16_t)0x2000)
N#define USART_StopBits_1_5                   ((uint16_t)0x3000)
N#define IS_USART_STOPBITS(STOPBITS) (((STOPBITS) == USART_StopBits_1) || \
N                                     ((STOPBITS) == USART_StopBits_0_5) || \
N                                     ((STOPBITS) == USART_StopBits_2) || \
N                                     ((STOPBITS) == USART_StopBits_1_5))
X#define IS_USART_STOPBITS(STOPBITS) (((STOPBITS) == USART_StopBits_1) ||                                      ((STOPBITS) == USART_StopBits_0_5) ||                                      ((STOPBITS) == USART_StopBits_2) ||                                      ((STOPBITS) == USART_StopBits_1_5))
N/**
N  * @}
N  */ 
N
N/** @defgroup USART_Parity 
N  * @{
N  */ 
N  
N#define USART_Parity_No                      ((uint16_t)0x0000)
N#define USART_Parity_Even                    ((uint16_t)0x0400)
N#define USART_Parity_Odd                     ((uint16_t)0x0600) 
N#define IS_USART_PARITY(PARITY) (((PARITY) == USART_Parity_No) || \
N                                 ((PARITY) == USART_Parity_Even) || \
N                                 ((PARITY) == USART_Parity_Odd))
X#define IS_USART_PARITY(PARITY) (((PARITY) == USART_Parity_No) ||                                  ((PARITY) == USART_Parity_Even) ||                                  ((PARITY) == USART_Parity_Odd))
N/**
N  * @}
N  */ 
N
N/** @defgroup USART_Mode 
N  * @{
N  */ 
N  
N#define USART_Mode_Rx                        ((uint16_t)0x0004)
N#define USART_Mode_Tx                        ((uint16_t)0x0008)
N#define IS_USART_MODE(MODE) ((((MODE) & (uint16_t)0xFFF3) == 0x00) && ((MODE) != (uint16_t)0x00))
N/**
N  * @}
N  */ 
N
N/** @defgroup USART_Hardware_Flow_Control 
N  * @{
N  */ 
N#define USART_HardwareFlowControl_None       ((uint16_t)0x0000)
N#define USART_HardwareFlowControl_RTS        ((uint16_t)0x0100)
N#define USART_HardwareFlowControl_CTS        ((uint16_t)0x0200)
N#define USART_HardwareFlowControl_RTS_CTS    ((uint16_t)0x0300)
N#define IS_USART_HARDWARE_FLOW_CONTROL(CONTROL)\
N                              (((CONTROL) == USART_HardwareFlowControl_None) || \
N                               ((CONTROL) == USART_HardwareFlowControl_RTS) || \
N                               ((CONTROL) == USART_HardwareFlowControl_CTS) || \
N                               ((CONTROL) == USART_HardwareFlowControl_RTS_CTS))
X#define IS_USART_HARDWARE_FLOW_CONTROL(CONTROL)                              (((CONTROL) == USART_HardwareFlowControl_None) ||                                ((CONTROL) == USART_HardwareFlowControl_RTS) ||                                ((CONTROL) == USART_HardwareFlowControl_CTS) ||                                ((CONTROL) == USART_HardwareFlowControl_RTS_CTS))
N/**
N  * @}
N  */ 
N
N/** @defgroup USART_Clock 
N  * @{
N  */ 
N#define USART_Clock_Disable                  ((uint16_t)0x0000)
N#define USART_Clock_Enable                   ((uint16_t)0x0800)
N#define IS_USART_CLOCK(CLOCK) (((CLOCK) == USART_Clock_Disable) || \
N                               ((CLOCK) == USART_Clock_Enable))
X#define IS_USART_CLOCK(CLOCK) (((CLOCK) == USART_Clock_Disable) ||                                ((CLOCK) == USART_Clock_Enable))
N/**
N  * @}
N  */ 
N
N/** @defgroup USART_Clock_Polarity 
N  * @{
N  */
N  
N#define USART_CPOL_Low                       ((uint16_t)0x0000)
N#define USART_CPOL_High                      ((uint16_t)0x0400)
N#define IS_USART_CPOL(CPOL) (((CPOL) == USART_CPOL_Low) || ((CPOL) == USART_CPOL_High))
N
N/**
N  * @}
N  */ 
N
N/** @defgroup USART_Clock_Phase
N  * @{
N  */
N
N#define USART_CPHA_1Edge                     ((uint16_t)0x0000)
N#define USART_CPHA_2Edge                     ((uint16_t)0x0200)
N#define IS_USART_CPHA(CPHA) (((CPHA) == USART_CPHA_1Edge) || ((CPHA) == USART_CPHA_2Edge))
N
N/**
N  * @}
N  */
N
N/** @defgroup USART_Last_Bit
N  * @{
N  */
N
N#define USART_LastBit_Disable                ((uint16_t)0x0000)
N#define USART_LastBit_Enable                 ((uint16_t)0x0100)
N#define IS_USART_LASTBIT(LASTBIT) (((LASTBIT) == USART_LastBit_Disable) || \
N                                   ((LASTBIT) == USART_LastBit_Enable))
X#define IS_USART_LASTBIT(LASTBIT) (((LASTBIT) == USART_LastBit_Disable) ||                                    ((LASTBIT) == USART_LastBit_Enable))
N/**
N  * @}
N  */ 
N
N/** @defgroup USART_Interrupt_definition 
N  * @{
N  */
N  
N#define USART_IT_PE                          ((uint16_t)0x0028)
N#define USART_IT_TXE                         ((uint16_t)0x0727)
N#define USART_IT_TC                          ((uint16_t)0x0626)
N#define USART_IT_RXNE                        ((uint16_t)0x0525)
N#define USART_IT_ORE_RX                      ((uint16_t)0x0325) /* In case interrupt is generated if the RXNEIE bit is set */
N#define USART_IT_IDLE                        ((uint16_t)0x0424)
N#define USART_IT_LBD                         ((uint16_t)0x0846)
N#define USART_IT_CTS                         ((uint16_t)0x096A)
N#define USART_IT_ERR                         ((uint16_t)0x0060)
N#define USART_IT_ORE_ER                      ((uint16_t)0x0360) /* In case interrupt is generated if the EIE bit is set */
N#define USART_IT_NE                          ((uint16_t)0x0260)
N#define USART_IT_FE                          ((uint16_t)0x0160)
N
N/** @defgroup USART_Legacy 
N  * @{
N  */
N#define USART_IT_ORE                          USART_IT_ORE_ER               
N/**
N  * @}
N  */
N
N#define IS_USART_CONFIG_IT(IT) (((IT) == USART_IT_PE) || ((IT) == USART_IT_TXE) || \
N                                ((IT) == USART_IT_TC) || ((IT) == USART_IT_RXNE) || \
N                                ((IT) == USART_IT_IDLE) || ((IT) == USART_IT_LBD) || \
N                                ((IT) == USART_IT_CTS) || ((IT) == USART_IT_ERR))
X#define IS_USART_CONFIG_IT(IT) (((IT) == USART_IT_PE) || ((IT) == USART_IT_TXE) ||                                 ((IT) == USART_IT_TC) || ((IT) == USART_IT_RXNE) ||                                 ((IT) == USART_IT_IDLE) || ((IT) == USART_IT_LBD) ||                                 ((IT) == USART_IT_CTS) || ((IT) == USART_IT_ERR))
N#define IS_USART_GET_IT(IT) (((IT) == USART_IT_PE) || ((IT) == USART_IT_TXE) || \
N                             ((IT) == USART_IT_TC) || ((IT) == USART_IT_RXNE) || \
N                             ((IT) == USART_IT_IDLE) || ((IT) == USART_IT_LBD) || \
N                             ((IT) == USART_IT_CTS) || ((IT) == USART_IT_ORE) || \
N                             ((IT) == USART_IT_ORE_RX) || ((IT) == USART_IT_ORE_ER) || \
N                             ((IT) == USART_IT_NE) || ((IT) == USART_IT_FE))
X#define IS_USART_GET_IT(IT) (((IT) == USART_IT_PE) || ((IT) == USART_IT_TXE) ||                              ((IT) == USART_IT_TC) || ((IT) == USART_IT_RXNE) ||                              ((IT) == USART_IT_IDLE) || ((IT) == USART_IT_LBD) ||                              ((IT) == USART_IT_CTS) || ((IT) == USART_IT_ORE) ||                              ((IT) == USART_IT_ORE_RX) || ((IT) == USART_IT_ORE_ER) ||                              ((IT) == USART_IT_NE) || ((IT) == USART_IT_FE))
N#define IS_USART_CLEAR_IT(IT) (((IT) == USART_IT_TC) || ((IT) == USART_IT_RXNE) || \
N                               ((IT) == USART_IT_LBD) || ((IT) == USART_IT_CTS))
X#define IS_USART_CLEAR_IT(IT) (((IT) == USART_IT_TC) || ((IT) == USART_IT_RXNE) ||                                ((IT) == USART_IT_LBD) || ((IT) == USART_IT_CTS))
N/**
N  * @}
N  */
N
N/** @defgroup USART_DMA_Requests 
N  * @{
N  */
N
N#define USART_DMAReq_Tx                      ((uint16_t)0x0080)
N#define USART_DMAReq_Rx                      ((uint16_t)0x0040)
N#define IS_USART_DMAREQ(DMAREQ) ((((DMAREQ) & (uint16_t)0xFF3F) == 0x00) && ((DMAREQ) != (uint16_t)0x00))
N
N/**
N  * @}
N  */ 
N
N/** @defgroup USART_WakeUp_methods
N  * @{
N  */
N
N#define USART_WakeUp_IdleLine                ((uint16_t)0x0000)
N#define USART_WakeUp_AddressMark             ((uint16_t)0x0800)
N#define IS_USART_WAKEUP(WAKEUP) (((WAKEUP) == USART_WakeUp_IdleLine) || \
N                                 ((WAKEUP) == USART_WakeUp_AddressMark))
X#define IS_USART_WAKEUP(WAKEUP) (((WAKEUP) == USART_WakeUp_IdleLine) ||                                  ((WAKEUP) == USART_WakeUp_AddressMark))
N/**
N  * @}
N  */
N
N/** @defgroup USART_LIN_Break_Detection_Length 
N  * @{
N  */
N  
N#define USART_LINBreakDetectLength_10b      ((uint16_t)0x0000)
N#define USART_LINBreakDetectLength_11b      ((uint16_t)0x0020)
N#define IS_USART_LIN_BREAK_DETECT_LENGTH(LENGTH) \
N                               (((LENGTH) == USART_LINBreakDetectLength_10b) || \
N                                ((LENGTH) == USART_LINBreakDetectLength_11b))
X#define IS_USART_LIN_BREAK_DETECT_LENGTH(LENGTH)                                (((LENGTH) == USART_LINBreakDetectLength_10b) ||                                 ((LENGTH) == USART_LINBreakDetectLength_11b))
N/**
N  * @}
N  */
N
N/** @defgroup USART_IrDA_Low_Power 
N  * @{
N  */
N
N#define USART_IrDAMode_LowPower              ((uint16_t)0x0004)
N#define USART_IrDAMode_Normal                ((uint16_t)0x0000)
N#define IS_USART_IRDA_MODE(MODE) (((MODE) == USART_IrDAMode_LowPower) || \
N                                  ((MODE) == USART_IrDAMode_Normal))
X#define IS_USART_IRDA_MODE(MODE) (((MODE) == USART_IrDAMode_LowPower) ||                                   ((MODE) == USART_IrDAMode_Normal))
N/**
N  * @}
N  */ 
N
N/** @defgroup USART_Flags 
N  * @{
N  */
N
N#define USART_FLAG_CTS                       ((uint16_t)0x0200)
N#define USART_FLAG_LBD                       ((uint16_t)0x0100)
N#define USART_FLAG_TXE                       ((uint16_t)0x0080)
N#define USART_FLAG_TC                        ((uint16_t)0x0040)
N#define USART_FLAG_RXNE                      ((uint16_t)0x0020)
N#define USART_FLAG_IDLE                      ((uint16_t)0x0010)
N#define USART_FLAG_ORE                       ((uint16_t)0x0008)
N#define USART_FLAG_NE                        ((uint16_t)0x0004)
N#define USART_FLAG_FE                        ((uint16_t)0x0002)
N#define USART_FLAG_PE                        ((uint16_t)0x0001)
N#define IS_USART_FLAG(FLAG) (((FLAG) == USART_FLAG_PE) || ((FLAG) == USART_FLAG_TXE) || \
N                             ((FLAG) == USART_FLAG_TC) || ((FLAG) == USART_FLAG_RXNE) || \
N                             ((FLAG) == USART_FLAG_IDLE) || ((FLAG) == USART_FLAG_LBD) || \
N                             ((FLAG) == USART_FLAG_CTS) || ((FLAG) == USART_FLAG_ORE) || \
N                             ((FLAG) == USART_FLAG_NE) || ((FLAG) == USART_FLAG_FE))
X#define IS_USART_FLAG(FLAG) (((FLAG) == USART_FLAG_PE) || ((FLAG) == USART_FLAG_TXE) ||                              ((FLAG) == USART_FLAG_TC) || ((FLAG) == USART_FLAG_RXNE) ||                              ((FLAG) == USART_FLAG_IDLE) || ((FLAG) == USART_FLAG_LBD) ||                              ((FLAG) == USART_FLAG_CTS) || ((FLAG) == USART_FLAG_ORE) ||                              ((FLAG) == USART_FLAG_NE) || ((FLAG) == USART_FLAG_FE))
N                              
N#define IS_USART_CLEAR_FLAG(FLAG) ((((FLAG) & (uint16_t)0xFC9F) == 0x00) && ((FLAG) != (uint16_t)0x00))
N
N#define IS_USART_BAUDRATE(BAUDRATE) (((BAUDRATE) > 0) && ((BAUDRATE) < 7500001))
N#define IS_USART_ADDRESS(ADDRESS) ((ADDRESS) <= 0xF)
N#define IS_USART_DATA(DATA) ((DATA) <= 0x1FF)
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/  
N
N/*  Function used to set the USART configuration to the default reset state ***/ 
Nvoid USART_DeInit(USART_TypeDef* USARTx);
N
N/* Initialization and Configuration functions *********************************/
Nvoid USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct);
Nvoid USART_StructInit(USART_InitTypeDef* USART_InitStruct);
Nvoid USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct);
Nvoid USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct);
Nvoid USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState);
Nvoid USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler);
Nvoid USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState);
Nvoid USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState);
N
N/* Data transfers functions ***************************************************/ 
Nvoid USART_SendData(USART_TypeDef* USARTx, uint16_t Data);
Nuint16_t USART_ReceiveData(USART_TypeDef* USARTx);
N
N/* Multi-Processor Communication functions ************************************/
Nvoid USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address);
Nvoid USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp);
Nvoid USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState);
N
N/* LIN mode functions *********************************************************/
Nvoid USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength);
Nvoid USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState);
Nvoid USART_SendBreak(USART_TypeDef* USARTx);
N
N/* Half-duplex mode function **************************************************/
Nvoid USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState);
N
N/* Smartcard mode functions ***************************************************/
Nvoid USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState);
Nvoid USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState);
Nvoid USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime);
N
N/* IrDA mode functions ********************************************************/
Nvoid USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode);
Nvoid USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState);
N
N/* DMA transfers management functions *****************************************/
Nvoid USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);
N
N/* Interrupts and flags management functions **********************************/
Nvoid USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
NFlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
Nvoid USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
NITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
Nvoid USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32F4xx_USART_H */
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 68 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_wwdg.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_wwdg.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_wwdg.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the WWDG firmware
N  *          library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_WWDG_H
N#define __STM32F4xx_WWDG_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup WWDG
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup WWDG_Exported_Constants
N  * @{
N  */ 
N  
N/** @defgroup WWDG_Prescaler 
N  * @{
N  */
N  
N#define WWDG_Prescaler_1    ((uint32_t)0x00000000)
N#define WWDG_Prescaler_2    ((uint32_t)0x00000080)
N#define WWDG_Prescaler_4    ((uint32_t)0x00000100)
N#define WWDG_Prescaler_8    ((uint32_t)0x00000180)
N#define IS_WWDG_PRESCALER(PRESCALER) (((PRESCALER) == WWDG_Prescaler_1) || \
N                                      ((PRESCALER) == WWDG_Prescaler_2) || \
N                                      ((PRESCALER) == WWDG_Prescaler_4) || \
N                                      ((PRESCALER) == WWDG_Prescaler_8))
X#define IS_WWDG_PRESCALER(PRESCALER) (((PRESCALER) == WWDG_Prescaler_1) ||                                       ((PRESCALER) == WWDG_Prescaler_2) ||                                       ((PRESCALER) == WWDG_Prescaler_4) ||                                       ((PRESCALER) == WWDG_Prescaler_8))
N#define IS_WWDG_WINDOW_VALUE(VALUE) ((VALUE) <= 0x7F)
N#define IS_WWDG_COUNTER(COUNTER) (((COUNTER) >= 0x40) && ((COUNTER) <= 0x7F))
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/
N  
N/*  Function used to set the WWDG configuration to the default reset state ****/  
Nvoid WWDG_DeInit(void);
N
N/* Prescaler, Refresh window and Counter configuration functions **************/
Nvoid WWDG_SetPrescaler(uint32_t WWDG_Prescaler);
Nvoid WWDG_SetWindowValue(uint8_t WindowValue);
Nvoid WWDG_EnableIT(void);
Nvoid WWDG_SetCounter(uint8_t Counter);
N
N/* WWDG activation function ***************************************************/
Nvoid WWDG_Enable(uint8_t Counter);
N
N/* Interrupts and flags management functions **********************************/
NFlagStatus WWDG_GetFlagStatus(void);
Nvoid WWDG_ClearFlag(void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32F4xx_WWDG_H */
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 69 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "misc.h" /* High level functions for NVIC and SysTick (add-on to CMSIS functions) */
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\misc.h" 1
N/**
N  ******************************************************************************
N  * @file    misc.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the miscellaneous
N  *          firmware library functions (add-on to CMSIS functions).
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __MISC_H
N#define __MISC_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup MISC
N  * @{
N  */
N
N/* Exported types ------------------------------------------------------------*/
N
N/** 
N  * @brief  NVIC Init Structure definition  
N  */
N
Ntypedef struct
N{
N  uint8_t NVIC_IRQChannel;                    /*!< Specifies the IRQ channel to be enabled or disabled.
N                                                   This parameter can be an enumerator of @ref IRQn_Type 
N                                                   enumeration (For the complete STM32 Devices IRQ Channels
N                                                   list, please refer to stm32f4xx.h file) */
N
N  uint8_t NVIC_IRQChannelPreemptionPriority;  /*!< Specifies the pre-emption priority for the IRQ channel
N                                                   specified in NVIC_IRQChannel. This parameter can be a value
N                                                   between 0 and 15 as described in the table @ref MISC_NVIC_Priority_Table
N                                                   A lower priority value indicates a higher priority */
N
N  uint8_t NVIC_IRQChannelSubPriority;         /*!< Specifies the subpriority level for the IRQ channel specified
N                                                   in NVIC_IRQChannel. This parameter can be a value
N                                                   between 0 and 15 as described in the table @ref MISC_NVIC_Priority_Table
N                                                   A lower priority value indicates a higher priority */
N
N  FunctionalState NVIC_IRQChannelCmd;         /*!< Specifies whether the IRQ channel defined in NVIC_IRQChannel
N                                                   will be enabled or disabled. 
N                                                   This parameter can be set either to ENABLE or DISABLE */   
N} NVIC_InitTypeDef;
N 
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup MISC_Exported_Constants
N  * @{
N  */
N
N/** @defgroup MISC_Vector_Table_Base 
N  * @{
N  */
N
N#define NVIC_VectTab_RAM             ((uint32_t)0x20000000)
N#define NVIC_VectTab_FLASH           ((uint32_t)0x08000000)
N#define IS_NVIC_VECTTAB(VECTTAB) (((VECTTAB) == NVIC_VectTab_RAM) || \
N                                  ((VECTTAB) == NVIC_VectTab_FLASH))
X#define IS_NVIC_VECTTAB(VECTTAB) (((VECTTAB) == NVIC_VectTab_RAM) ||                                   ((VECTTAB) == NVIC_VectTab_FLASH))
N/**
N  * @}
N  */
N
N/** @defgroup MISC_System_Low_Power 
N  * @{
N  */
N
N#define NVIC_LP_SEVONPEND            ((uint8_t)0x10)
N#define NVIC_LP_SLEEPDEEP            ((uint8_t)0x04)
N#define NVIC_LP_SLEEPONEXIT          ((uint8_t)0x02)
N#define IS_NVIC_LP(LP) (((LP) == NVIC_LP_SEVONPEND) || \
N                        ((LP) == NVIC_LP_SLEEPDEEP) || \
N                        ((LP) == NVIC_LP_SLEEPONEXIT))
X#define IS_NVIC_LP(LP) (((LP) == NVIC_LP_SEVONPEND) ||                         ((LP) == NVIC_LP_SLEEPDEEP) ||                         ((LP) == NVIC_LP_SLEEPONEXIT))
N/**
N  * @}
N  */
N
N/** @defgroup MISC_Preemption_Priority_Group 
N  * @{
N  */
N
N#define NVIC_PriorityGroup_0         ((uint32_t)0x700) /*!< 0 bits for pre-emption priority
N                                                            4 bits for subpriority */
N#define NVIC_PriorityGroup_1         ((uint32_t)0x600) /*!< 1 bits for pre-emption priority
N                                                            3 bits for subpriority */
N#define NVIC_PriorityGroup_2         ((uint32_t)0x500) /*!< 2 bits for pre-emption priority
N                                                            2 bits for subpriority */
N#define NVIC_PriorityGroup_3         ((uint32_t)0x400) /*!< 3 bits for pre-emption priority
N                                                            1 bits for subpriority */
N#define NVIC_PriorityGroup_4         ((uint32_t)0x300) /*!< 4 bits for pre-emption priority
N                                                            0 bits for subpriority */
N
N#define IS_NVIC_PRIORITY_GROUP(GROUP) (((GROUP) == NVIC_PriorityGroup_0) || \
N                                       ((GROUP) == NVIC_PriorityGroup_1) || \
N                                       ((GROUP) == NVIC_PriorityGroup_2) || \
N                                       ((GROUP) == NVIC_PriorityGroup_3) || \
N                                       ((GROUP) == NVIC_PriorityGroup_4))
X#define IS_NVIC_PRIORITY_GROUP(GROUP) (((GROUP) == NVIC_PriorityGroup_0) ||                                        ((GROUP) == NVIC_PriorityGroup_1) ||                                        ((GROUP) == NVIC_PriorityGroup_2) ||                                        ((GROUP) == NVIC_PriorityGroup_3) ||                                        ((GROUP) == NVIC_PriorityGroup_4))
N
N#define IS_NVIC_PREEMPTION_PRIORITY(PRIORITY)  ((PRIORITY) < 0x10)
N
N#define IS_NVIC_SUB_PRIORITY(PRIORITY)  ((PRIORITY) < 0x10)
N
N#define IS_NVIC_OFFSET(OFFSET)  ((OFFSET) < 0x000FFFFF)
N
N/**
N  * @}
N  */
N
N/** @defgroup MISC_SysTick_clock_source 
N  * @{
N  */
N
N#define SysTick_CLKSource_HCLK_Div8    ((uint32_t)0xFFFFFFFB)
N#define SysTick_CLKSource_HCLK         ((uint32_t)0x00000004)
N#define IS_SYSTICK_CLK_SOURCE(SOURCE) (((SOURCE) == SysTick_CLKSource_HCLK) || \
N                                       ((SOURCE) == SysTick_CLKSource_HCLK_Div8))
X#define IS_SYSTICK_CLK_SOURCE(SOURCE) (((SOURCE) == SysTick_CLKSource_HCLK) ||                                        ((SOURCE) == SysTick_CLKSource_HCLK_Div8))
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/
N
Nvoid NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup);
Nvoid NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);
Nvoid NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset);
Nvoid NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState);
Nvoid SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __MISC_H */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 70 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N
N#if defined (STM32F429_439xx)
X#if 0L
S#include "stm32f4xx_cryp.h"
S#include "stm32f4xx_hash.h"
S#include "stm32f4xx_rng.h"
S#include "stm32f4xx_can.h"
S#include "stm32f4xx_dac.h"
S#include "stm32f4xx_dcmi.h"
S#include "stm32f4xx_dma2d.h"
S#include "stm32f4xx_fmc.h"
S#include "stm32f4xx_ltdc.h"
S#include "stm32f4xx_sai.h"
N#endif /* STM32F429_439xx */
N
N#if defined (STM32F427_437xx)
X#if 0L
S#include "stm32f4xx_cryp.h"
S#include "stm32f4xx_hash.h"
S#include "stm32f4xx_rng.h"
S#include "stm32f4xx_can.h"
S#include "stm32f4xx_dac.h"
S#include "stm32f4xx_dcmi.h"
S#include "stm32f4xx_dma2d.h"
S#include "stm32f4xx_fmc.h"
S#include "stm32f4xx_sai.h"
N#endif /* STM32F427_437xx */
N
N#if defined (STM32F40_41xxx)
X#if 1L
N#include "stm32f4xx_cryp.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_cryp.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_cryp.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the Cryptographic
N  *          processor(CRYP) firmware library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_CRYP_H
N#define __STM32F4xx_CRYP_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup CRYP
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/
N
N/** 
N  * @brief   CRYP Init structure definition  
N  */ 
Ntypedef struct
N{
N  uint32_t CRYP_AlgoDir;   /*!< Encrypt or Decrypt. This parameter can be a 
N                                value of @ref CRYP_Algorithm_Direction */
N  uint32_t CRYP_AlgoMode;  /*!< TDES-ECB, TDES-CBC, DES-ECB, DES-CBC, AES-ECB, 
N                                AES-CBC, AES-CTR, AES-Key, AES-GCM and AES-CCM.
N                                This parameter can be a value of @ref CRYP_Algorithm_Mode */
N  uint32_t CRYP_DataType;  /*!< 32-bit data, 16-bit data, bit data or bit string.
N                                This parameter can be a value of @ref CRYP_Data_Type */ 
N  uint32_t CRYP_KeySize;   /*!< Used only in AES mode only : 128, 192 or 256 bit 
N                                key length. This parameter can be a value of 
N                                @ref CRYP_Key_Size_for_AES_only */
N}CRYP_InitTypeDef;
N
N/** 
N  * @brief   CRYP Key(s) structure definition  
N  */ 
Ntypedef struct
N{
N  uint32_t CRYP_Key0Left;  /*!< Key 0 Left  */
N  uint32_t CRYP_Key0Right; /*!< Key 0 Right */
N  uint32_t CRYP_Key1Left;  /*!< Key 1 left  */
N  uint32_t CRYP_Key1Right; /*!< Key 1 Right */
N  uint32_t CRYP_Key2Left;  /*!< Key 2 left  */
N  uint32_t CRYP_Key2Right; /*!< Key 2 Right */
N  uint32_t CRYP_Key3Left;  /*!< Key 3 left  */
N  uint32_t CRYP_Key3Right; /*!< Key 3 Right */
N}CRYP_KeyInitTypeDef;
N/** 
N  * @brief   CRYP Initialization Vectors (IV) structure definition  
N  */ 
Ntypedef struct
N{
N  uint32_t CRYP_IV0Left;  /*!< Init Vector 0 Left  */
N  uint32_t CRYP_IV0Right; /*!< Init Vector 0 Right */
N  uint32_t CRYP_IV1Left;  /*!< Init Vector 1 left  */
N  uint32_t CRYP_IV1Right; /*!< Init Vector 1 Right */
N}CRYP_IVInitTypeDef;
N
N/** 
N  * @brief  CRYP context swapping structure definition  
N  */ 
Ntypedef struct
N{
N  /*!< Current Configuration */
N  uint32_t CR_CurrentConfig;
N  /*!< IV */
N  uint32_t CRYP_IV0LR;
N  uint32_t CRYP_IV0RR;
N  uint32_t CRYP_IV1LR;
N  uint32_t CRYP_IV1RR;
N  /*!< KEY */
N  uint32_t CRYP_K0LR;
N  uint32_t CRYP_K0RR;
N  uint32_t CRYP_K1LR;
N  uint32_t CRYP_K1RR;
N  uint32_t CRYP_K2LR;
N  uint32_t CRYP_K2RR;
N  uint32_t CRYP_K3LR;
N  uint32_t CRYP_K3RR;
N  uint32_t CRYP_CSGCMCCMR[8];
N  uint32_t CRYP_CSGCMR[8];
N}CRYP_Context;
N
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup CRYP_Exported_Constants
N  * @{
N  */
N
N/** @defgroup CRYP_Algorithm_Direction 
N  * @{
N  */
N#define CRYP_AlgoDir_Encrypt      ((uint16_t)0x0000)
N#define CRYP_AlgoDir_Decrypt      ((uint16_t)0x0004)
N#define IS_CRYP_ALGODIR(ALGODIR) (((ALGODIR) == CRYP_AlgoDir_Encrypt) || \
N                                  ((ALGODIR) == CRYP_AlgoDir_Decrypt))
X#define IS_CRYP_ALGODIR(ALGODIR) (((ALGODIR) == CRYP_AlgoDir_Encrypt) ||                                   ((ALGODIR) == CRYP_AlgoDir_Decrypt))
N
N/**
N  * @}
N  */ 
N 
N/** @defgroup CRYP_Algorithm_Mode 
N  * @{
N  */
N
N/*!< TDES Modes */
N#define CRYP_AlgoMode_TDES_ECB    ((uint32_t)0x00000000)
N#define CRYP_AlgoMode_TDES_CBC    ((uint32_t)0x00000008)
N
N/*!< DES Modes */
N#define CRYP_AlgoMode_DES_ECB     ((uint32_t)0x00000010)
N#define CRYP_AlgoMode_DES_CBC     ((uint32_t)0x00000018)
N
N/*!< AES Modes */
N#define CRYP_AlgoMode_AES_ECB     ((uint32_t)0x00000020)
N#define CRYP_AlgoMode_AES_CBC     ((uint32_t)0x00000028)
N#define CRYP_AlgoMode_AES_CTR     ((uint32_t)0x00000030)
N#define CRYP_AlgoMode_AES_Key     ((uint32_t)0x00000038)
N#define CRYP_AlgoMode_AES_GCM     ((uint32_t)0x00080000)
N#define CRYP_AlgoMode_AES_CCM     ((uint32_t)0x00080008)
N
N#define IS_CRYP_ALGOMODE(ALGOMODE) (((ALGOMODE) == CRYP_AlgoMode_TDES_ECB) || \
N                                   ((ALGOMODE) == CRYP_AlgoMode_TDES_CBC)|| \
N                                   ((ALGOMODE) == CRYP_AlgoMode_DES_ECB) || \
N                                   ((ALGOMODE) == CRYP_AlgoMode_DES_CBC) || \
N                                   ((ALGOMODE) == CRYP_AlgoMode_AES_ECB) || \
N                                   ((ALGOMODE) == CRYP_AlgoMode_AES_CBC) || \
N                                   ((ALGOMODE) == CRYP_AlgoMode_AES_CTR) || \
N                                   ((ALGOMODE) == CRYP_AlgoMode_AES_Key) || \
N                                   ((ALGOMODE) == CRYP_AlgoMode_AES_GCM) || \
N                                   ((ALGOMODE) == CRYP_AlgoMode_AES_CCM))
X#define IS_CRYP_ALGOMODE(ALGOMODE) (((ALGOMODE) == CRYP_AlgoMode_TDES_ECB) ||                                    ((ALGOMODE) == CRYP_AlgoMode_TDES_CBC)||                                    ((ALGOMODE) == CRYP_AlgoMode_DES_ECB) ||                                    ((ALGOMODE) == CRYP_AlgoMode_DES_CBC) ||                                    ((ALGOMODE) == CRYP_AlgoMode_AES_ECB) ||                                    ((ALGOMODE) == CRYP_AlgoMode_AES_CBC) ||                                    ((ALGOMODE) == CRYP_AlgoMode_AES_CTR) ||                                    ((ALGOMODE) == CRYP_AlgoMode_AES_Key) ||                                    ((ALGOMODE) == CRYP_AlgoMode_AES_GCM) ||                                    ((ALGOMODE) == CRYP_AlgoMode_AES_CCM))
N/**
N  * @}
N  */ 
N
N/** @defgroup CRYP_Phase 
N  * @{
N  */
N
N/*!< The phases are valid only for AES-GCM and AES-CCM modes */
N#define CRYP_Phase_Init           ((uint32_t)0x00000000)
N#define CRYP_Phase_Header         CRYP_CR_GCM_CCMPH_0
N#define CRYP_Phase_Payload        CRYP_CR_GCM_CCMPH_1
N#define CRYP_Phase_Final          CRYP_CR_GCM_CCMPH
N
N#define IS_CRYP_PHASE(PHASE) (((PHASE) == CRYP_Phase_Init)    || \
N                              ((PHASE) == CRYP_Phase_Header)  || \
N                              ((PHASE) == CRYP_Phase_Payload) || \
N                              ((PHASE) == CRYP_Phase_Final))
X#define IS_CRYP_PHASE(PHASE) (((PHASE) == CRYP_Phase_Init)    ||                               ((PHASE) == CRYP_Phase_Header)  ||                               ((PHASE) == CRYP_Phase_Payload) ||                               ((PHASE) == CRYP_Phase_Final))
N
N/**
N  * @}
N  */ 
N
N/** @defgroup CRYP_Data_Type 
N  * @{
N  */
N#define CRYP_DataType_32b         ((uint16_t)0x0000)
N#define CRYP_DataType_16b         ((uint16_t)0x0040)
N#define CRYP_DataType_8b          ((uint16_t)0x0080)
N#define CRYP_DataType_1b          ((uint16_t)0x00C0)
N#define IS_CRYP_DATATYPE(DATATYPE) (((DATATYPE) == CRYP_DataType_32b) || \
N                                    ((DATATYPE) == CRYP_DataType_16b)|| \
N                                    ((DATATYPE) == CRYP_DataType_8b)|| \
N                                    ((DATATYPE) == CRYP_DataType_1b))  
X#define IS_CRYP_DATATYPE(DATATYPE) (((DATATYPE) == CRYP_DataType_32b) ||                                     ((DATATYPE) == CRYP_DataType_16b)||                                     ((DATATYPE) == CRYP_DataType_8b)||                                     ((DATATYPE) == CRYP_DataType_1b))  
N/**
N  * @}
N  */
N                                     
N/** @defgroup CRYP_Key_Size_for_AES_only 
N  * @{
N  */
N#define CRYP_KeySize_128b         ((uint16_t)0x0000)
N#define CRYP_KeySize_192b         ((uint16_t)0x0100)
N#define CRYP_KeySize_256b         ((uint16_t)0x0200)
N#define IS_CRYP_KEYSIZE(KEYSIZE) (((KEYSIZE) == CRYP_KeySize_128b)|| \
N                                  ((KEYSIZE) == CRYP_KeySize_192b)|| \
N                                  ((KEYSIZE) == CRYP_KeySize_256b))
X#define IS_CRYP_KEYSIZE(KEYSIZE) (((KEYSIZE) == CRYP_KeySize_128b)||                                   ((KEYSIZE) == CRYP_KeySize_192b)||                                   ((KEYSIZE) == CRYP_KeySize_256b))
N/**
N  * @}
N  */
N
N/** @defgroup CRYP_flags_definition 
N  * @{
N  */
N#define CRYP_FLAG_BUSY            ((uint8_t)0x10)  /*!< The CRYP core is currently 
N                                                        processing a block of data 
N                                                        or a key preparation (for 
N                                                        AES decryption). */
N#define CRYP_FLAG_IFEM            ((uint8_t)0x01)  /*!< Input Fifo Empty */
N#define CRYP_FLAG_IFNF            ((uint8_t)0x02)  /*!< Input Fifo is Not Full */
N#define CRYP_FLAG_INRIS           ((uint8_t)0x22)  /*!< Raw interrupt pending */
N#define CRYP_FLAG_OFNE            ((uint8_t)0x04)  /*!< Input Fifo service raw 
N                                                        interrupt status */
N#define CRYP_FLAG_OFFU            ((uint8_t)0x08)  /*!< Output Fifo is Full */
N#define CRYP_FLAG_OUTRIS          ((uint8_t)0x21)  /*!< Output Fifo service raw 
N                                                        interrupt status */
N
N#define IS_CRYP_GET_FLAG(FLAG) (((FLAG) == CRYP_FLAG_IFEM)  || \
N                                ((FLAG) == CRYP_FLAG_IFNF)  || \
N                                ((FLAG) == CRYP_FLAG_OFNE)  || \
N                                ((FLAG) == CRYP_FLAG_OFFU)  || \
N                                ((FLAG) == CRYP_FLAG_BUSY)  || \
N                                ((FLAG) == CRYP_FLAG_OUTRIS)|| \
N                                ((FLAG) == CRYP_FLAG_INRIS))
X#define IS_CRYP_GET_FLAG(FLAG) (((FLAG) == CRYP_FLAG_IFEM)  ||                                 ((FLAG) == CRYP_FLAG_IFNF)  ||                                 ((FLAG) == CRYP_FLAG_OFNE)  ||                                 ((FLAG) == CRYP_FLAG_OFFU)  ||                                 ((FLAG) == CRYP_FLAG_BUSY)  ||                                 ((FLAG) == CRYP_FLAG_OUTRIS)||                                 ((FLAG) == CRYP_FLAG_INRIS))
N/**
N  * @}
N  */
N
N/** @defgroup CRYP_interrupts_definition 
N  * @{
N  */
N#define CRYP_IT_INI               ((uint8_t)0x01) /*!< IN Fifo Interrupt */
N#define CRYP_IT_OUTI              ((uint8_t)0x02) /*!< OUT Fifo Interrupt */
N#define IS_CRYP_CONFIG_IT(IT) ((((IT) & (uint8_t)0xFC) == 0x00) && ((IT) != 0x00))
N#define IS_CRYP_GET_IT(IT) (((IT) == CRYP_IT_INI) || ((IT) == CRYP_IT_OUTI))
N
N/**
N  * @}
N  */
N
N/** @defgroup CRYP_Encryption_Decryption_modes_definition 
N  * @{
N  */
N#define MODE_ENCRYPT             ((uint8_t)0x01)
N#define MODE_DECRYPT             ((uint8_t)0x00)
N
N/**
N  * @}
N  */
N
N/** @defgroup CRYP_DMA_transfer_requests 
N  * @{
N  */
N#define CRYP_DMAReq_DataIN             ((uint8_t)0x01)
N#define CRYP_DMAReq_DataOUT            ((uint8_t)0x02)
N#define IS_CRYP_DMAREQ(DMAREQ) ((((DMAREQ) & (uint8_t)0xFC) == 0x00) && ((DMAREQ) != 0x00))
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/
N
N/*  Function used to set the CRYP configuration to the default reset state ****/
Nvoid CRYP_DeInit(void);
N
N/* CRYP Initialization and Configuration functions ****************************/
Nvoid CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct);
Nvoid CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct);
Nvoid CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct);
Nvoid CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct);
Nvoid CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct);
Nvoid CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct);
Nvoid CRYP_Cmd(FunctionalState NewState);
Nvoid CRYP_PhaseConfig(uint32_t CRYP_Phase);
Nvoid CRYP_FIFOFlush(void);
N/* CRYP Data processing functions *********************************************/
Nvoid CRYP_DataIn(uint32_t Data);
Nuint32_t CRYP_DataOut(void);
N
N/* CRYP Context swapping functions ********************************************/
NErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
N                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct);
Nvoid CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore);
N
N/* CRYP DMA interface function ************************************************/
Nvoid CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState);
N
N/* Interrupts and flags management functions **********************************/
Nvoid CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState);
NITStatus CRYP_GetITStatus(uint8_t CRYP_IT);
NFunctionalState CRYP_GetCmdStatus(void);
NFlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG);
N
N/* High Level AES functions **************************************************/
NErrorStatus CRYP_AES_ECB(uint8_t Mode,
N                         uint8_t *Key, uint16_t Keysize,
N                         uint8_t *Input, uint32_t Ilength,
N                         uint8_t *Output);
N
NErrorStatus CRYP_AES_CBC(uint8_t Mode,
N                         uint8_t InitVectors[16],
N                         uint8_t *Key, uint16_t Keysize,
N                         uint8_t *Input, uint32_t Ilength,
N                         uint8_t *Output);
N
NErrorStatus CRYP_AES_CTR(uint8_t Mode,
N                         uint8_t InitVectors[16],
N                         uint8_t *Key, uint16_t Keysize,
N                         uint8_t *Input, uint32_t Ilength,
N                         uint8_t *Output);
N
NErrorStatus CRYP_AES_GCM(uint8_t Mode, uint8_t InitVectors[16],
N                         uint8_t *Key, uint16_t Keysize,
N                         uint8_t *Input, uint32_t ILength,
N                         uint8_t *Header, uint32_t HLength,
N                         uint8_t *Output, uint8_t *AuthTAG);
N
NErrorStatus CRYP_AES_CCM(uint8_t Mode, 
N                         uint8_t* Nonce, uint32_t NonceSize,
N                         uint8_t* Key, uint16_t Keysize,
N                         uint8_t* Input, uint32_t ILength,
N                         uint8_t* Header, uint32_t HLength, uint8_t *HBuffer,
N                         uint8_t* Output,
N                         uint8_t* AuthTAG, uint32_t TAGSize);
N
N/* High Level TDES functions **************************************************/
NErrorStatus CRYP_TDES_ECB(uint8_t Mode,
N                           uint8_t Key[24], 
N                           uint8_t *Input, uint32_t Ilength,
N                           uint8_t *Output);
N
NErrorStatus CRYP_TDES_CBC(uint8_t Mode,
N                          uint8_t Key[24],
N                          uint8_t InitVectors[8],
N                          uint8_t *Input, uint32_t Ilength,
N                          uint8_t *Output);
N
N/* High Level DES functions **************************************************/
NErrorStatus CRYP_DES_ECB(uint8_t Mode,
N                         uint8_t Key[8],
N                         uint8_t *Input, uint32_t Ilength,
N                         uint8_t *Output);
N
NErrorStatus CRYP_DES_CBC(uint8_t Mode,
N                         uint8_t Key[8],
N                         uint8_t InitVectors[8],
N                         uint8_t *Input,uint32_t Ilength,
N                         uint8_t *Output);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__STM32F4xx_CRYP_H */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */ 
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 98 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_hash.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_hash.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_hash.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the HASH 
N  *          firmware library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_HASH_H
N#define __STM32F4xx_HASH_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup HASH
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/
N
N/** 
N  * @brief   HASH Init structure definition
N  */ 
Ntypedef struct
N{
N  uint32_t HASH_AlgoSelection; /*!< SHA-1, SHA-224, SHA-256 or MD5. This parameter
N                                    can be a value of @ref HASH_Algo_Selection */
N  uint32_t HASH_AlgoMode;      /*!< HASH or HMAC. This parameter can be a value 
N                                    of @ref HASH_processor_Algorithm_Mode */
N  uint32_t HASH_DataType;      /*!< 32-bit data, 16-bit data, 8-bit data or 
N                                    bit string. This parameter can be a value of
N                                    @ref HASH_Data_Type */
N  uint32_t HASH_HMACKeyType;   /*!< HMAC Short key or HMAC Long Key. This parameter
N                                    can be a value of @ref HASH_HMAC_Long_key_only_for_HMAC_mode */
N}HASH_InitTypeDef;
N
N/** 
N  * @brief  HASH message digest result structure definition  
N  */ 
Ntypedef struct
N{
N  uint32_t Data[8];      /*!< Message digest result : 8x 32bit wors for SHA-256,
N                                                      7x 32bit wors for SHA-224,
N                                                      5x 32bit words for SHA-1 or
N                                                      4x 32bit words for MD5  */
N} HASH_MsgDigest; 
N
N/** 
N  * @brief  HASH context swapping structure definition  
N  */ 
Ntypedef struct
N{
N  uint32_t HASH_IMR; 
N  uint32_t HASH_STR;      
N  uint32_t HASH_CR;     
N  uint32_t HASH_CSR[54];       
N}HASH_Context;
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup HASH_Exported_Constants
N  * @{
N  */ 
N
N/** @defgroup HASH_Algo_Selection 
N  * @{
N  */ 
N#define HASH_AlgoSelection_SHA1      ((uint32_t)0x0000) /*!< HASH function is SHA1   */
N#define HASH_AlgoSelection_SHA224    HASH_CR_ALGO_1     /*!< HASH function is SHA224 */
N#define HASH_AlgoSelection_SHA256    HASH_CR_ALGO       /*!< HASH function is SHA256 */
N#define HASH_AlgoSelection_MD5       HASH_CR_ALGO_0     /*!< HASH function is MD5    */
N
N#define IS_HASH_ALGOSELECTION(ALGOSELECTION) (((ALGOSELECTION) == HASH_AlgoSelection_SHA1) || \
N                                              ((ALGOSELECTION) == HASH_AlgoSelection_SHA224) || \
N                                              ((ALGOSELECTION) == HASH_AlgoSelection_SHA256) || \
N                                              ((ALGOSELECTION) == HASH_AlgoSelection_MD5))
X#define IS_HASH_ALGOSELECTION(ALGOSELECTION) (((ALGOSELECTION) == HASH_AlgoSelection_SHA1) ||                                               ((ALGOSELECTION) == HASH_AlgoSelection_SHA224) ||                                               ((ALGOSELECTION) == HASH_AlgoSelection_SHA256) ||                                               ((ALGOSELECTION) == HASH_AlgoSelection_MD5))
N/**
N  * @}
N  */
N
N/** @defgroup HASH_processor_Algorithm_Mode 
N  * @{
N  */ 
N#define HASH_AlgoMode_HASH         ((uint32_t)0x00000000) /*!< Algorithm is HASH */ 
N#define HASH_AlgoMode_HMAC         HASH_CR_MODE           /*!< Algorithm is HMAC */
N
N#define IS_HASH_ALGOMODE(ALGOMODE) (((ALGOMODE) == HASH_AlgoMode_HASH) || \
N                                    ((ALGOMODE) == HASH_AlgoMode_HMAC))
X#define IS_HASH_ALGOMODE(ALGOMODE) (((ALGOMODE) == HASH_AlgoMode_HASH) ||                                     ((ALGOMODE) == HASH_AlgoMode_HMAC))
N/**
N  * @}
N  */
N
N/** @defgroup HASH_Data_Type  
N  * @{
N  */  
N#define HASH_DataType_32b          ((uint32_t)0x0000) /*!< 32-bit data. No swapping                     */
N#define HASH_DataType_16b          HASH_CR_DATATYPE_0 /*!< 16-bit data. Each half word is swapped       */
N#define HASH_DataType_8b           HASH_CR_DATATYPE_1 /*!< 8-bit data. All bytes are swapped            */
N#define HASH_DataType_1b           HASH_CR_DATATYPE   /*!< 1-bit data. In the word all bits are swapped */
N
N#define IS_HASH_DATATYPE(DATATYPE) (((DATATYPE) == HASH_DataType_32b)|| \
N                                    ((DATATYPE) == HASH_DataType_16b)|| \
N                                    ((DATATYPE) == HASH_DataType_8b) || \
N                                    ((DATATYPE) == HASH_DataType_1b))
X#define IS_HASH_DATATYPE(DATATYPE) (((DATATYPE) == HASH_DataType_32b)||                                     ((DATATYPE) == HASH_DataType_16b)||                                     ((DATATYPE) == HASH_DataType_8b) ||                                     ((DATATYPE) == HASH_DataType_1b))
N/**
N  * @}
N  */
N
N/** @defgroup HASH_HMAC_Long_key_only_for_HMAC_mode  
N  * @{
N  */ 
N#define HASH_HMACKeyType_ShortKey      ((uint32_t)0x00000000) /*!< HMAC Key is <= 64 bytes */
N#define HASH_HMACKeyType_LongKey       HASH_CR_LKEY           /*!< HMAC Key is > 64 bytes  */
N
N#define IS_HASH_HMAC_KEYTYPE(KEYTYPE) (((KEYTYPE) == HASH_HMACKeyType_ShortKey) || \
N                                       ((KEYTYPE) == HASH_HMACKeyType_LongKey))
X#define IS_HASH_HMAC_KEYTYPE(KEYTYPE) (((KEYTYPE) == HASH_HMACKeyType_ShortKey) ||                                        ((KEYTYPE) == HASH_HMACKeyType_LongKey))
N/**
N  * @}
N  */
N
N/** @defgroup Number_of_valid_bits_in_last_word_of_the_message   
N  * @{
N  */  
N#define IS_HASH_VALIDBITSNUMBER(VALIDBITS) ((VALIDBITS) <= 0x1F)
N
N/**
N  * @}
N  */
N
N/** @defgroup HASH_interrupts_definition   
N  * @{
N  */  
N#define HASH_IT_DINI               HASH_IMR_DINIM  /*!< A new block can be entered into the input buffer (DIN) */
N#define HASH_IT_DCI                HASH_IMR_DCIM   /*!< Digest calculation complete                            */
N
N#define IS_HASH_IT(IT) ((((IT) & (uint32_t)0xFFFFFFFC) == 0x00000000) && ((IT) != 0x00000000))
N#define IS_HASH_GET_IT(IT) (((IT) == HASH_IT_DINI) || ((IT) == HASH_IT_DCI))
N				   
N/**
N  * @}
N  */
N
N/** @defgroup HASH_flags_definition   
N  * @{
N  */  
N#define HASH_FLAG_DINIS            HASH_SR_DINIS  /*!< 16 locations are free in the DIN : A new block can be entered into the input buffer */
N#define HASH_FLAG_DCIS             HASH_SR_DCIS   /*!< Digest calculation complete                                                         */
N#define HASH_FLAG_DMAS             HASH_SR_DMAS   /*!< DMA interface is enabled (DMAE=1) or a transfer is ongoing                          */
N#define HASH_FLAG_BUSY             HASH_SR_BUSY   /*!< The hash core is Busy : processing a block of data                                  */
N#define HASH_FLAG_DINNE            HASH_CR_DINNE  /*!< DIN not empty : The input buffer contains at least one word of data                 */
N
N#define IS_HASH_GET_FLAG(FLAG) (((FLAG) == HASH_FLAG_DINIS) || \
N                                ((FLAG) == HASH_FLAG_DCIS)  || \
N                                ((FLAG) == HASH_FLAG_DMAS)  || \
N                                ((FLAG) == HASH_FLAG_BUSY)  || \
N                                ((FLAG) == HASH_FLAG_DINNE)) 
X#define IS_HASH_GET_FLAG(FLAG) (((FLAG) == HASH_FLAG_DINIS) ||                                 ((FLAG) == HASH_FLAG_DCIS)  ||                                 ((FLAG) == HASH_FLAG_DMAS)  ||                                 ((FLAG) == HASH_FLAG_BUSY)  ||                                 ((FLAG) == HASH_FLAG_DINNE)) 
N
N#define IS_HASH_CLEAR_FLAG(FLAG)(((FLAG) == HASH_FLAG_DINIS) || \
N                                 ((FLAG) == HASH_FLAG_DCIS))                                 
X#define IS_HASH_CLEAR_FLAG(FLAG)(((FLAG) == HASH_FLAG_DINIS) ||                                  ((FLAG) == HASH_FLAG_DCIS))                                 
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/ 
N  
N/*  Function used to set the HASH configuration to the default reset state ****/
Nvoid HASH_DeInit(void);
N
N/* HASH Configuration function ************************************************/
Nvoid HASH_Init(HASH_InitTypeDef* HASH_InitStruct);
Nvoid HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct);
Nvoid HASH_Reset(void);
N
N/* HASH Message Digest generation functions ***********************************/
Nvoid HASH_DataIn(uint32_t Data);
Nuint8_t HASH_GetInFIFOWordsNbr(void);
Nvoid HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber);
Nvoid HASH_StartDigest(void);
Nvoid HASH_AutoStartDigest(FunctionalState NewState);
Nvoid HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest);
N
N/* HASH Context swapping functions ********************************************/
Nvoid HASH_SaveContext(HASH_Context* HASH_ContextSave);
Nvoid HASH_RestoreContext(HASH_Context* HASH_ContextRestore);
N
N/* HASH DMA interface function ************************************************/
Nvoid HASH_DMACmd(FunctionalState NewState);
N
N/* HASH Interrupts and flags management functions *****************************/
Nvoid HASH_ITConfig(uint32_t HASH_IT, FunctionalState NewState);
NFlagStatus HASH_GetFlagStatus(uint32_t HASH_FLAG);
Nvoid HASH_ClearFlag(uint32_t HASH_FLAG);
NITStatus HASH_GetITStatus(uint32_t HASH_IT);
Nvoid HASH_ClearITPendingBit(uint32_t HASH_IT);
N
N/* High Level SHA1 functions **************************************************/
NErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20]);
NErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen,
N                      uint8_t *Input, uint32_t Ilen,
N                      uint8_t Output[20]);
N
N/* High Level MD5 functions ***************************************************/
NErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16]);
NErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen,
N                     uint8_t *Input, uint32_t Ilen,
N                     uint8_t Output[16]);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__STM32F4xx_HASH_H */
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 99 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_rng.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_rng.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_rng.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the Random 
N  *          Number Generator(RNG) firmware library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_RNG_H
N#define __STM32F4xx_RNG_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup RNG
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/
N/* Exported constants --------------------------------------------------------*/ 
N
N/** @defgroup RNG_Exported_Constants
N  * @{
N  */
N  
N/** @defgroup RNG_flags_definition  
N  * @{
N  */ 
N#define RNG_FLAG_DRDY               ((uint8_t)0x0001) /*!< Data ready */
N#define RNG_FLAG_CECS               ((uint8_t)0x0002) /*!< Clock error current status */
N#define RNG_FLAG_SECS               ((uint8_t)0x0004) /*!< Seed error current status */
N
N#define IS_RNG_GET_FLAG(RNG_FLAG) (((RNG_FLAG) == RNG_FLAG_DRDY) || \
N                                   ((RNG_FLAG) == RNG_FLAG_CECS) || \
N                                   ((RNG_FLAG) == RNG_FLAG_SECS))
X#define IS_RNG_GET_FLAG(RNG_FLAG) (((RNG_FLAG) == RNG_FLAG_DRDY) ||                                    ((RNG_FLAG) == RNG_FLAG_CECS) ||                                    ((RNG_FLAG) == RNG_FLAG_SECS))
N#define IS_RNG_CLEAR_FLAG(RNG_FLAG) (((RNG_FLAG) == RNG_FLAG_CECS) || \
N                                    ((RNG_FLAG) == RNG_FLAG_SECS))
X#define IS_RNG_CLEAR_FLAG(RNG_FLAG) (((RNG_FLAG) == RNG_FLAG_CECS) ||                                     ((RNG_FLAG) == RNG_FLAG_SECS))
N/**
N  * @}
N  */ 
N
N/** @defgroup RNG_interrupts_definition   
N  * @{
N  */  
N#define RNG_IT_CEI                  ((uint8_t)0x20) /*!< Clock error interrupt */
N#define RNG_IT_SEI                  ((uint8_t)0x40) /*!< Seed error interrupt */
N
N#define IS_RNG_IT(IT) ((((IT) & (uint8_t)0x9F) == 0x00) && ((IT) != 0x00))
N#define IS_RNG_GET_IT(RNG_IT) (((RNG_IT) == RNG_IT_CEI) || ((RNG_IT) == RNG_IT_SEI))
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/ 
N
N/*  Function used to set the RNG configuration to the default reset state *****/ 
Nvoid RNG_DeInit(void);
N
N/* Configuration function *****************************************************/
Nvoid RNG_Cmd(FunctionalState NewState);
N
N/* Get 32 bit Random number function ******************************************/
Nuint32_t RNG_GetRandomNumber(void);
N
N/* Interrupts and flags management functions **********************************/
Nvoid RNG_ITConfig(FunctionalState NewState);
NFlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG);
Nvoid RNG_ClearFlag(uint8_t RNG_FLAG);
NITStatus RNG_GetITStatus(uint8_t RNG_IT);
Nvoid RNG_ClearITPendingBit(uint8_t RNG_IT);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__STM32F4xx_RNG_H */
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 100 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_can.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_can.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_can.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the CAN firmware 
N  *          library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_CAN_H
N#define __STM32F4xx_CAN_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup CAN
N  * @{
N  */
N
N/* Exported types ------------------------------------------------------------*/
N
N#define IS_CAN_ALL_PERIPH(PERIPH) (((PERIPH) == CAN1) || \
N                                   ((PERIPH) == CAN2))
X#define IS_CAN_ALL_PERIPH(PERIPH) (((PERIPH) == CAN1) ||                                    ((PERIPH) == CAN2))
N
N/** 
N  * @brief  CAN init structure definition
N  */
Ntypedef struct
N{
N  uint16_t CAN_Prescaler;   /*!< Specifies the length of a time quantum. 
N                                 It ranges from 1 to 1024. */
N  
N  uint8_t CAN_Mode;         /*!< Specifies the CAN operating mode.
N                                 This parameter can be a value of @ref CAN_operating_mode */
N
N  uint8_t CAN_SJW;          /*!< Specifies the maximum number of time quanta 
N                                 the CAN hardware is allowed to lengthen or 
N                                 shorten a bit to perform resynchronization.
N                                 This parameter can be a value of @ref CAN_synchronisation_jump_width */
N
N  uint8_t CAN_BS1;          /*!< Specifies the number of time quanta in Bit 
N                                 Segment 1. This parameter can be a value of 
N                                 @ref CAN_time_quantum_in_bit_segment_1 */
N
N  uint8_t CAN_BS2;          /*!< Specifies the number of time quanta in Bit Segment 2.
N                                 This parameter can be a value of @ref CAN_time_quantum_in_bit_segment_2 */
N  
N  FunctionalState CAN_TTCM; /*!< Enable or disable the time triggered communication mode.
N                                This parameter can be set either to ENABLE or DISABLE. */
N  
N  FunctionalState CAN_ABOM;  /*!< Enable or disable the automatic bus-off management.
N                                  This parameter can be set either to ENABLE or DISABLE. */
N
N  FunctionalState CAN_AWUM;  /*!< Enable or disable the automatic wake-up mode. 
N                                  This parameter can be set either to ENABLE or DISABLE. */
N
N  FunctionalState CAN_NART;  /*!< Enable or disable the non-automatic retransmission mode.
N                                  This parameter can be set either to ENABLE or DISABLE. */
N
N  FunctionalState CAN_RFLM;  /*!< Enable or disable the Receive FIFO Locked mode.
N                                  This parameter can be set either to ENABLE or DISABLE. */
N
N  FunctionalState CAN_TXFP;  /*!< Enable or disable the transmit FIFO priority.
N                                  This parameter can be set either to ENABLE or DISABLE. */
N} CAN_InitTypeDef;
N
N/** 
N  * @brief  CAN filter init structure definition
N  */
Ntypedef struct
N{
N  uint16_t CAN_FilterIdHigh;         /*!< Specifies the filter identification number (MSBs for a 32-bit
N                                              configuration, first one for a 16-bit configuration).
N                                              This parameter can be a value between 0x0000 and 0xFFFF */
N
N  uint16_t CAN_FilterIdLow;          /*!< Specifies the filter identification number (LSBs for a 32-bit
N                                              configuration, second one for a 16-bit configuration).
N                                              This parameter can be a value between 0x0000 and 0xFFFF */
N
N  uint16_t CAN_FilterMaskIdHigh;     /*!< Specifies the filter mask number or identification number,
N                                              according to the mode (MSBs for a 32-bit configuration,
N                                              first one for a 16-bit configuration).
N                                              This parameter can be a value between 0x0000 and 0xFFFF */
N
N  uint16_t CAN_FilterMaskIdLow;      /*!< Specifies the filter mask number or identification number,
N                                              according to the mode (LSBs for a 32-bit configuration,
N                                              second one for a 16-bit configuration).
N                                              This parameter can be a value between 0x0000 and 0xFFFF */
N
N  uint16_t CAN_FilterFIFOAssignment; /*!< Specifies the FIFO (0 or 1) which will be assigned to the filter.
N                                              This parameter can be a value of @ref CAN_filter_FIFO */
N  
N  uint8_t CAN_FilterNumber;          /*!< Specifies the filter which will be initialized. It ranges from 0 to 13. */
N
N  uint8_t CAN_FilterMode;            /*!< Specifies the filter mode to be initialized.
N                                              This parameter can be a value of @ref CAN_filter_mode */
N
N  uint8_t CAN_FilterScale;           /*!< Specifies the filter scale.
N                                              This parameter can be a value of @ref CAN_filter_scale */
N
N  FunctionalState CAN_FilterActivation; /*!< Enable or disable the filter.
N                                              This parameter can be set either to ENABLE or DISABLE. */
N} CAN_FilterInitTypeDef;
N
N/** 
N  * @brief  CAN Tx message structure definition  
N  */
Ntypedef struct
N{
N  uint32_t StdId;  /*!< Specifies the standard identifier.
N                        This parameter can be a value between 0 to 0x7FF. */
N
N  uint32_t ExtId;  /*!< Specifies the extended identifier.
N                        This parameter can be a value between 0 to 0x1FFFFFFF. */
N
N  uint8_t IDE;     /*!< Specifies the type of identifier for the message that 
N                        will be transmitted. This parameter can be a value 
N                        of @ref CAN_identifier_type */
N
N  uint8_t RTR;     /*!< Specifies the type of frame for the message that will 
N                        be transmitted. This parameter can be a value of 
N                        @ref CAN_remote_transmission_request */
N
N  uint8_t DLC;     /*!< Specifies the length of the frame that will be 
N                        transmitted. This parameter can be a value between 
N                        0 to 8 */
N
N  uint8_t Data[8]; /*!< Contains the data to be transmitted. It ranges from 0 
N                        to 0xFF. */
N} CanTxMsg;
N
N/** 
N  * @brief  CAN Rx message structure definition  
N  */
Ntypedef struct
N{
N  uint32_t StdId;  /*!< Specifies the standard identifier.
N                        This parameter can be a value between 0 to 0x7FF. */
N
N  uint32_t ExtId;  /*!< Specifies the extended identifier.
N                        This parameter can be a value between 0 to 0x1FFFFFFF. */
N
N  uint8_t IDE;     /*!< Specifies the type of identifier for the message that 
N                        will be received. This parameter can be a value of 
N                        @ref CAN_identifier_type */
N
N  uint8_t RTR;     /*!< Specifies the type of frame for the received message.
N                        This parameter can be a value of 
N                        @ref CAN_remote_transmission_request */
N
N  uint8_t DLC;     /*!< Specifies the length of the frame that will be received.
N                        This parameter can be a value between 0 to 8 */
N
N  uint8_t Data[8]; /*!< Contains the data to be received. It ranges from 0 to 
N                        0xFF. */
N
N  uint8_t FMI;     /*!< Specifies the index of the filter the message stored in 
N                        the mailbox passes through. This parameter can be a 
N                        value between 0 to 0xFF */
N} CanRxMsg;
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup CAN_Exported_Constants
N  * @{
N  */
N
N/** @defgroup CAN_InitStatus 
N  * @{
N  */
N
N#define CAN_InitStatus_Failed              ((uint8_t)0x00) /*!< CAN initialization failed */
N#define CAN_InitStatus_Success             ((uint8_t)0x01) /*!< CAN initialization OK */
N
N
N/* Legacy defines */
N#define CANINITFAILED    CAN_InitStatus_Failed
N#define CANINITOK        CAN_InitStatus_Success
N/**
N  * @}
N  */
N
N/** @defgroup CAN_operating_mode 
N  * @{
N  */
N
N#define CAN_Mode_Normal             ((uint8_t)0x00)  /*!< normal mode */
N#define CAN_Mode_LoopBack           ((uint8_t)0x01)  /*!< loopback mode */
N#define CAN_Mode_Silent             ((uint8_t)0x02)  /*!< silent mode */
N#define CAN_Mode_Silent_LoopBack    ((uint8_t)0x03)  /*!< loopback combined with silent mode */
N
N#define IS_CAN_MODE(MODE) (((MODE) == CAN_Mode_Normal) || \
N                           ((MODE) == CAN_Mode_LoopBack)|| \
N                           ((MODE) == CAN_Mode_Silent) || \
N                           ((MODE) == CAN_Mode_Silent_LoopBack))
X#define IS_CAN_MODE(MODE) (((MODE) == CAN_Mode_Normal) ||                            ((MODE) == CAN_Mode_LoopBack)||                            ((MODE) == CAN_Mode_Silent) ||                            ((MODE) == CAN_Mode_Silent_LoopBack))
N/**
N  * @}
N  */
N
N
N /**
N  * @defgroup CAN_operating_mode 
N  * @{
N  */  
N#define CAN_OperatingMode_Initialization  ((uint8_t)0x00) /*!< Initialization mode */
N#define CAN_OperatingMode_Normal          ((uint8_t)0x01) /*!< Normal mode */
N#define CAN_OperatingMode_Sleep           ((uint8_t)0x02) /*!< sleep mode */
N
N
N#define IS_CAN_OPERATING_MODE(MODE) (((MODE) == CAN_OperatingMode_Initialization) ||\
N                                    ((MODE) == CAN_OperatingMode_Normal)|| \
N																		((MODE) == CAN_OperatingMode_Sleep))
X#define IS_CAN_OPERATING_MODE(MODE) (((MODE) == CAN_OperatingMode_Initialization) ||                                    ((MODE) == CAN_OperatingMode_Normal)|| 																		((MODE) == CAN_OperatingMode_Sleep))
N/**
N  * @}
N  */
N  
N/**
N  * @defgroup CAN_operating_mode_status
N  * @{
N  */  
N
N#define CAN_ModeStatus_Failed    ((uint8_t)0x00)                /*!< CAN entering the specific mode failed */
N#define CAN_ModeStatus_Success   ((uint8_t)!CAN_ModeStatus_Failed)   /*!< CAN entering the specific mode Succeed */
N/**
N  * @}
N  */
N
N/** @defgroup CAN_synchronisation_jump_width 
N  * @{
N  */
N#define CAN_SJW_1tq                 ((uint8_t)0x00)  /*!< 1 time quantum */
N#define CAN_SJW_2tq                 ((uint8_t)0x01)  /*!< 2 time quantum */
N#define CAN_SJW_3tq                 ((uint8_t)0x02)  /*!< 3 time quantum */
N#define CAN_SJW_4tq                 ((uint8_t)0x03)  /*!< 4 time quantum */
N
N#define IS_CAN_SJW(SJW) (((SJW) == CAN_SJW_1tq) || ((SJW) == CAN_SJW_2tq)|| \
N                         ((SJW) == CAN_SJW_3tq) || ((SJW) == CAN_SJW_4tq))
X#define IS_CAN_SJW(SJW) (((SJW) == CAN_SJW_1tq) || ((SJW) == CAN_SJW_2tq)||                          ((SJW) == CAN_SJW_3tq) || ((SJW) == CAN_SJW_4tq))
N/**
N  * @}
N  */
N
N/** @defgroup CAN_time_quantum_in_bit_segment_1 
N  * @{
N  */
N#define CAN_BS1_1tq                 ((uint8_t)0x00)  /*!< 1 time quantum */
N#define CAN_BS1_2tq                 ((uint8_t)0x01)  /*!< 2 time quantum */
N#define CAN_BS1_3tq                 ((uint8_t)0x02)  /*!< 3 time quantum */
N#define CAN_BS1_4tq                 ((uint8_t)0x03)  /*!< 4 time quantum */
N#define CAN_BS1_5tq                 ((uint8_t)0x04)  /*!< 5 time quantum */
N#define CAN_BS1_6tq                 ((uint8_t)0x05)  /*!< 6 time quantum */
N#define CAN_BS1_7tq                 ((uint8_t)0x06)  /*!< 7 time quantum */
N#define CAN_BS1_8tq                 ((uint8_t)0x07)  /*!< 8 time quantum */
N#define CAN_BS1_9tq                 ((uint8_t)0x08)  /*!< 9 time quantum */
N#define CAN_BS1_10tq                ((uint8_t)0x09)  /*!< 10 time quantum */
N#define CAN_BS1_11tq                ((uint8_t)0x0A)  /*!< 11 time quantum */
N#define CAN_BS1_12tq                ((uint8_t)0x0B)  /*!< 12 time quantum */
N#define CAN_BS1_13tq                ((uint8_t)0x0C)  /*!< 13 time quantum */
N#define CAN_BS1_14tq                ((uint8_t)0x0D)  /*!< 14 time quantum */
N#define CAN_BS1_15tq                ((uint8_t)0x0E)  /*!< 15 time quantum */
N#define CAN_BS1_16tq                ((uint8_t)0x0F)  /*!< 16 time quantum */
N
N#define IS_CAN_BS1(BS1) ((BS1) <= CAN_BS1_16tq)
N/**
N  * @}
N  */
N
N/** @defgroup CAN_time_quantum_in_bit_segment_2 
N  * @{
N  */
N#define CAN_BS2_1tq                 ((uint8_t)0x00)  /*!< 1 time quantum */
N#define CAN_BS2_2tq                 ((uint8_t)0x01)  /*!< 2 time quantum */
N#define CAN_BS2_3tq                 ((uint8_t)0x02)  /*!< 3 time quantum */
N#define CAN_BS2_4tq                 ((uint8_t)0x03)  /*!< 4 time quantum */
N#define CAN_BS2_5tq                 ((uint8_t)0x04)  /*!< 5 time quantum */
N#define CAN_BS2_6tq                 ((uint8_t)0x05)  /*!< 6 time quantum */
N#define CAN_BS2_7tq                 ((uint8_t)0x06)  /*!< 7 time quantum */
N#define CAN_BS2_8tq                 ((uint8_t)0x07)  /*!< 8 time quantum */
N
N#define IS_CAN_BS2(BS2) ((BS2) <= CAN_BS2_8tq)
N/**
N  * @}
N  */
N
N/** @defgroup CAN_clock_prescaler 
N  * @{
N  */
N#define IS_CAN_PRESCALER(PRESCALER) (((PRESCALER) >= 1) && ((PRESCALER) <= 1024))
N/**
N  * @}
N  */
N
N/** @defgroup CAN_filter_number 
N  * @{
N  */
N#define IS_CAN_FILTER_NUMBER(NUMBER) ((NUMBER) <= 27)
N/**
N  * @}
N  */
N
N/** @defgroup CAN_filter_mode 
N  * @{
N  */
N#define CAN_FilterMode_IdMask       ((uint8_t)0x00)  /*!< identifier/mask mode */
N#define CAN_FilterMode_IdList       ((uint8_t)0x01)  /*!< identifier list mode */
N
N#define IS_CAN_FILTER_MODE(MODE) (((MODE) == CAN_FilterMode_IdMask) || \
N                                  ((MODE) == CAN_FilterMode_IdList))
X#define IS_CAN_FILTER_MODE(MODE) (((MODE) == CAN_FilterMode_IdMask) ||                                   ((MODE) == CAN_FilterMode_IdList))
N/**
N  * @}
N  */
N
N/** @defgroup CAN_filter_scale 
N  * @{
N  */
N#define CAN_FilterScale_16bit       ((uint8_t)0x00) /*!< Two 16-bit filters */
N#define CAN_FilterScale_32bit       ((uint8_t)0x01) /*!< One 32-bit filter */
N
N#define IS_CAN_FILTER_SCALE(SCALE) (((SCALE) == CAN_FilterScale_16bit) || \
N                                    ((SCALE) == CAN_FilterScale_32bit))
X#define IS_CAN_FILTER_SCALE(SCALE) (((SCALE) == CAN_FilterScale_16bit) ||                                     ((SCALE) == CAN_FilterScale_32bit))
N/**
N  * @}
N  */
N
N/** @defgroup CAN_filter_FIFO
N  * @{
N  */
N#define CAN_Filter_FIFO0             ((uint8_t)0x00)  /*!< Filter FIFO 0 assignment for filter x */
N#define CAN_Filter_FIFO1             ((uint8_t)0x01)  /*!< Filter FIFO 1 assignment for filter x */
N#define IS_CAN_FILTER_FIFO(FIFO) (((FIFO) == CAN_FilterFIFO0) || \
N                                  ((FIFO) == CAN_FilterFIFO1))
X#define IS_CAN_FILTER_FIFO(FIFO) (((FIFO) == CAN_FilterFIFO0) ||                                   ((FIFO) == CAN_FilterFIFO1))
N
N/* Legacy defines */
N#define CAN_FilterFIFO0  CAN_Filter_FIFO0
N#define CAN_FilterFIFO1  CAN_Filter_FIFO1
N/**
N  * @}
N  */
N
N/** @defgroup CAN_Start_bank_filter_for_slave_CAN 
N  * @{
N  */
N#define IS_CAN_BANKNUMBER(BANKNUMBER) (((BANKNUMBER) >= 1) && ((BANKNUMBER) <= 27))
N/**
N  * @}
N  */
N
N/** @defgroup CAN_Tx 
N  * @{
N  */
N#define IS_CAN_TRANSMITMAILBOX(TRANSMITMAILBOX) ((TRANSMITMAILBOX) <= ((uint8_t)0x02))
N#define IS_CAN_STDID(STDID)   ((STDID) <= ((uint32_t)0x7FF))
N#define IS_CAN_EXTID(EXTID)   ((EXTID) <= ((uint32_t)0x1FFFFFFF))
N#define IS_CAN_DLC(DLC)       ((DLC) <= ((uint8_t)0x08))
N/**
N  * @}
N  */
N
N/** @defgroup CAN_identifier_type 
N  * @{
N  */
N#define CAN_Id_Standard             ((uint32_t)0x00000000)  /*!< Standard Id */
N#define CAN_Id_Extended             ((uint32_t)0x00000004)  /*!< Extended Id */
N#define IS_CAN_IDTYPE(IDTYPE) (((IDTYPE) == CAN_Id_Standard) || \
N                               ((IDTYPE) == CAN_Id_Extended))
X#define IS_CAN_IDTYPE(IDTYPE) (((IDTYPE) == CAN_Id_Standard) ||                                ((IDTYPE) == CAN_Id_Extended))
N
N/* Legacy defines */
N#define CAN_ID_STD      CAN_Id_Standard           
N#define CAN_ID_EXT      CAN_Id_Extended
N/**
N  * @}
N  */
N
N/** @defgroup CAN_remote_transmission_request 
N  * @{
N  */
N#define CAN_RTR_Data                ((uint32_t)0x00000000)  /*!< Data frame */
N#define CAN_RTR_Remote              ((uint32_t)0x00000002)  /*!< Remote frame */
N#define IS_CAN_RTR(RTR) (((RTR) == CAN_RTR_Data) || ((RTR) == CAN_RTR_Remote))
N
N/* Legacy defines */
N#define CAN_RTR_DATA     CAN_RTR_Data         
N#define CAN_RTR_REMOTE   CAN_RTR_Remote
N/**
N  * @}
N  */
N
N/** @defgroup CAN_transmit_constants 
N  * @{
N  */
N#define CAN_TxStatus_Failed         ((uint8_t)0x00)/*!< CAN transmission failed */
N#define CAN_TxStatus_Ok             ((uint8_t)0x01) /*!< CAN transmission succeeded */
N#define CAN_TxStatus_Pending        ((uint8_t)0x02) /*!< CAN transmission pending */
N#define CAN_TxStatus_NoMailBox      ((uint8_t)0x04) /*!< CAN cell did not provide 
N                                                         an empty mailbox */
N/* Legacy defines */	
N#define CANTXFAILED                  CAN_TxStatus_Failed
N#define CANTXOK                      CAN_TxStatus_Ok
N#define CANTXPENDING                 CAN_TxStatus_Pending
N#define CAN_NO_MB                    CAN_TxStatus_NoMailBox
N/**
N  * @}
N  */
N
N/** @defgroup CAN_receive_FIFO_number_constants 
N  * @{
N  */
N#define CAN_FIFO0                 ((uint8_t)0x00) /*!< CAN FIFO 0 used to receive */
N#define CAN_FIFO1                 ((uint8_t)0x01) /*!< CAN FIFO 1 used to receive */
N
N#define IS_CAN_FIFO(FIFO) (((FIFO) == CAN_FIFO0) || ((FIFO) == CAN_FIFO1))
N/**
N  * @}
N  */
N
N/** @defgroup CAN_sleep_constants 
N  * @{
N  */
N#define CAN_Sleep_Failed     ((uint8_t)0x00) /*!< CAN did not enter the sleep mode */
N#define CAN_Sleep_Ok         ((uint8_t)0x01) /*!< CAN entered the sleep mode */
N
N/* Legacy defines */	
N#define CANSLEEPFAILED   CAN_Sleep_Failed
N#define CANSLEEPOK       CAN_Sleep_Ok
N/**
N  * @}
N  */
N
N/** @defgroup CAN_wake_up_constants 
N  * @{
N  */
N#define CAN_WakeUp_Failed        ((uint8_t)0x00) /*!< CAN did not leave the sleep mode */
N#define CAN_WakeUp_Ok            ((uint8_t)0x01) /*!< CAN leaved the sleep mode */
N
N/* Legacy defines */
N#define CANWAKEUPFAILED   CAN_WakeUp_Failed        
N#define CANWAKEUPOK       CAN_WakeUp_Ok        
N/**
N  * @}
N  */
N
N/**
N  * @defgroup CAN_Error_Code_constants
N  * @{
N  */                                                         
N#define CAN_ErrorCode_NoErr           ((uint8_t)0x00) /*!< No Error */ 
N#define	CAN_ErrorCode_StuffErr        ((uint8_t)0x10) /*!< Stuff Error */ 
N#define	CAN_ErrorCode_FormErr         ((uint8_t)0x20) /*!< Form Error */ 
N#define	CAN_ErrorCode_ACKErr          ((uint8_t)0x30) /*!< Acknowledgment Error */ 
N#define	CAN_ErrorCode_BitRecessiveErr ((uint8_t)0x40) /*!< Bit Recessive Error */ 
N#define	CAN_ErrorCode_BitDominantErr  ((uint8_t)0x50) /*!< Bit Dominant Error */ 
N#define	CAN_ErrorCode_CRCErr          ((uint8_t)0x60) /*!< CRC Error  */ 
N#define	CAN_ErrorCode_SoftwareSetErr  ((uint8_t)0x70) /*!< Software Set Error */ 
N/**
N  * @}
N  */
N
N/** @defgroup CAN_flags 
N  * @{
N  */
N/* If the flag is 0x3XXXXXXX, it means that it can be used with CAN_GetFlagStatus()
N   and CAN_ClearFlag() functions. */
N/* If the flag is 0x1XXXXXXX, it means that it can only be used with 
N   CAN_GetFlagStatus() function.  */
N
N/* Transmit Flags */
N#define CAN_FLAG_RQCP0             ((uint32_t)0x38000001) /*!< Request MailBox0 Flag */
N#define CAN_FLAG_RQCP1             ((uint32_t)0x38000100) /*!< Request MailBox1 Flag */
N#define CAN_FLAG_RQCP2             ((uint32_t)0x38010000) /*!< Request MailBox2 Flag */
N
N/* Receive Flags */
N#define CAN_FLAG_FMP0              ((uint32_t)0x12000003) /*!< FIFO 0 Message Pending Flag */
N#define CAN_FLAG_FF0               ((uint32_t)0x32000008) /*!< FIFO 0 Full Flag            */
N#define CAN_FLAG_FOV0              ((uint32_t)0x32000010) /*!< FIFO 0 Overrun Flag         */
N#define CAN_FLAG_FMP1              ((uint32_t)0x14000003) /*!< FIFO 1 Message Pending Flag */
N#define CAN_FLAG_FF1               ((uint32_t)0x34000008) /*!< FIFO 1 Full Flag            */
N#define CAN_FLAG_FOV1              ((uint32_t)0x34000010) /*!< FIFO 1 Overrun Flag         */
N
N/* Operating Mode Flags */
N#define CAN_FLAG_WKU               ((uint32_t)0x31000008) /*!< Wake up Flag */
N#define CAN_FLAG_SLAK              ((uint32_t)0x31000012) /*!< Sleep acknowledge Flag */
N/* @note When SLAK interrupt is disabled (SLKIE=0), no polling on SLAKI is possible. 
N         In this case the SLAK bit can be polled.*/
N
N/* Error Flags */
N#define CAN_FLAG_EWG               ((uint32_t)0x10F00001) /*!< Error Warning Flag   */
N#define CAN_FLAG_EPV               ((uint32_t)0x10F00002) /*!< Error Passive Flag   */
N#define CAN_FLAG_BOF               ((uint32_t)0x10F00004) /*!< Bus-Off Flag         */
N#define CAN_FLAG_LEC               ((uint32_t)0x30F00070) /*!< Last error code Flag */
N
N#define IS_CAN_GET_FLAG(FLAG) (((FLAG) == CAN_FLAG_LEC)  || ((FLAG) == CAN_FLAG_BOF)   || \
N                               ((FLAG) == CAN_FLAG_EPV)  || ((FLAG) == CAN_FLAG_EWG)   || \
N                               ((FLAG) == CAN_FLAG_WKU)  || ((FLAG) == CAN_FLAG_FOV0)  || \
N                               ((FLAG) == CAN_FLAG_FF0)  || ((FLAG) == CAN_FLAG_FMP0)  || \
N                               ((FLAG) == CAN_FLAG_FOV1) || ((FLAG) == CAN_FLAG_FF1)   || \
N                               ((FLAG) == CAN_FLAG_FMP1) || ((FLAG) == CAN_FLAG_RQCP2) || \
N                               ((FLAG) == CAN_FLAG_RQCP1)|| ((FLAG) == CAN_FLAG_RQCP0) || \
N                               ((FLAG) == CAN_FLAG_SLAK ))
X#define IS_CAN_GET_FLAG(FLAG) (((FLAG) == CAN_FLAG_LEC)  || ((FLAG) == CAN_FLAG_BOF)   ||                                ((FLAG) == CAN_FLAG_EPV)  || ((FLAG) == CAN_FLAG_EWG)   ||                                ((FLAG) == CAN_FLAG_WKU)  || ((FLAG) == CAN_FLAG_FOV0)  ||                                ((FLAG) == CAN_FLAG_FF0)  || ((FLAG) == CAN_FLAG_FMP0)  ||                                ((FLAG) == CAN_FLAG_FOV1) || ((FLAG) == CAN_FLAG_FF1)   ||                                ((FLAG) == CAN_FLAG_FMP1) || ((FLAG) == CAN_FLAG_RQCP2) ||                                ((FLAG) == CAN_FLAG_RQCP1)|| ((FLAG) == CAN_FLAG_RQCP0) ||                                ((FLAG) == CAN_FLAG_SLAK ))
N
N#define IS_CAN_CLEAR_FLAG(FLAG)(((FLAG) == CAN_FLAG_LEC) || ((FLAG) == CAN_FLAG_RQCP2) || \
N                                ((FLAG) == CAN_FLAG_RQCP1)  || ((FLAG) == CAN_FLAG_RQCP0) || \
N                                ((FLAG) == CAN_FLAG_FF0)  || ((FLAG) == CAN_FLAG_FOV0) ||\
N                                ((FLAG) == CAN_FLAG_FF1) || ((FLAG) == CAN_FLAG_FOV1) || \
N                                ((FLAG) == CAN_FLAG_WKU) || ((FLAG) == CAN_FLAG_SLAK))
X#define IS_CAN_CLEAR_FLAG(FLAG)(((FLAG) == CAN_FLAG_LEC) || ((FLAG) == CAN_FLAG_RQCP2) ||                                 ((FLAG) == CAN_FLAG_RQCP1)  || ((FLAG) == CAN_FLAG_RQCP0) ||                                 ((FLAG) == CAN_FLAG_FF0)  || ((FLAG) == CAN_FLAG_FOV0) ||                                ((FLAG) == CAN_FLAG_FF1) || ((FLAG) == CAN_FLAG_FOV1) ||                                 ((FLAG) == CAN_FLAG_WKU) || ((FLAG) == CAN_FLAG_SLAK))
N/**
N  * @}
N  */
N
N  
N/** @defgroup CAN_interrupts 
N  * @{
N  */ 
N#define CAN_IT_TME                  ((uint32_t)0x00000001) /*!< Transmit mailbox empty Interrupt*/
N
N/* Receive Interrupts */
N#define CAN_IT_FMP0                 ((uint32_t)0x00000002) /*!< FIFO 0 message pending Interrupt*/
N#define CAN_IT_FF0                  ((uint32_t)0x00000004) /*!< FIFO 0 full Interrupt*/
N#define CAN_IT_FOV0                 ((uint32_t)0x00000008) /*!< FIFO 0 overrun Interrupt*/
N#define CAN_IT_FMP1                 ((uint32_t)0x00000010) /*!< FIFO 1 message pending Interrupt*/
N#define CAN_IT_FF1                  ((uint32_t)0x00000020) /*!< FIFO 1 full Interrupt*/
N#define CAN_IT_FOV1                 ((uint32_t)0x00000040) /*!< FIFO 1 overrun Interrupt*/
N
N/* Operating Mode Interrupts */
N#define CAN_IT_WKU                  ((uint32_t)0x00010000) /*!< Wake-up Interrupt*/
N#define CAN_IT_SLK                  ((uint32_t)0x00020000) /*!< Sleep acknowledge Interrupt*/
N
N/* Error Interrupts */
N#define CAN_IT_EWG                  ((uint32_t)0x00000100) /*!< Error warning Interrupt*/
N#define CAN_IT_EPV                  ((uint32_t)0x00000200) /*!< Error passive Interrupt*/
N#define CAN_IT_BOF                  ((uint32_t)0x00000400) /*!< Bus-off Interrupt*/
N#define CAN_IT_LEC                  ((uint32_t)0x00000800) /*!< Last error code Interrupt*/
N#define CAN_IT_ERR                  ((uint32_t)0x00008000) /*!< Error Interrupt*/
N
N/* Flags named as Interrupts : kept only for FW compatibility */
N#define CAN_IT_RQCP0   CAN_IT_TME
N#define CAN_IT_RQCP1   CAN_IT_TME
N#define CAN_IT_RQCP2   CAN_IT_TME
N
N
N#define IS_CAN_IT(IT)        (((IT) == CAN_IT_TME) || ((IT) == CAN_IT_FMP0)  ||\
N                             ((IT) == CAN_IT_FF0)  || ((IT) == CAN_IT_FOV0)  ||\
N                             ((IT) == CAN_IT_FMP1) || ((IT) == CAN_IT_FF1)   ||\
N                             ((IT) == CAN_IT_FOV1) || ((IT) == CAN_IT_EWG)   ||\
N                             ((IT) == CAN_IT_EPV)  || ((IT) == CAN_IT_BOF)   ||\
N                             ((IT) == CAN_IT_LEC)  || ((IT) == CAN_IT_ERR)   ||\
N                             ((IT) == CAN_IT_WKU)  || ((IT) == CAN_IT_SLK))
X#define IS_CAN_IT(IT)        (((IT) == CAN_IT_TME) || ((IT) == CAN_IT_FMP0)  ||                             ((IT) == CAN_IT_FF0)  || ((IT) == CAN_IT_FOV0)  ||                             ((IT) == CAN_IT_FMP1) || ((IT) == CAN_IT_FF1)   ||                             ((IT) == CAN_IT_FOV1) || ((IT) == CAN_IT_EWG)   ||                             ((IT) == CAN_IT_EPV)  || ((IT) == CAN_IT_BOF)   ||                             ((IT) == CAN_IT_LEC)  || ((IT) == CAN_IT_ERR)   ||                             ((IT) == CAN_IT_WKU)  || ((IT) == CAN_IT_SLK))
N
N#define IS_CAN_CLEAR_IT(IT) (((IT) == CAN_IT_TME) || ((IT) == CAN_IT_FF0)    ||\
N                             ((IT) == CAN_IT_FOV0)|| ((IT) == CAN_IT_FF1)    ||\
N                             ((IT) == CAN_IT_FOV1)|| ((IT) == CAN_IT_EWG)    ||\
N                             ((IT) == CAN_IT_EPV) || ((IT) == CAN_IT_BOF)    ||\
N                             ((IT) == CAN_IT_LEC) || ((IT) == CAN_IT_ERR)    ||\
N                             ((IT) == CAN_IT_WKU) || ((IT) == CAN_IT_SLK))
X#define IS_CAN_CLEAR_IT(IT) (((IT) == CAN_IT_TME) || ((IT) == CAN_IT_FF0)    ||                             ((IT) == CAN_IT_FOV0)|| ((IT) == CAN_IT_FF1)    ||                             ((IT) == CAN_IT_FOV1)|| ((IT) == CAN_IT_EWG)    ||                             ((IT) == CAN_IT_EPV) || ((IT) == CAN_IT_BOF)    ||                             ((IT) == CAN_IT_LEC) || ((IT) == CAN_IT_ERR)    ||                             ((IT) == CAN_IT_WKU) || ((IT) == CAN_IT_SLK))
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/  
N
N/*  Function used to set the CAN configuration to the default reset state *****/ 
Nvoid CAN_DeInit(CAN_TypeDef* CANx);
N
N/* Initialization and Configuration functions *********************************/ 
Nuint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct);
Nvoid CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct);
Nvoid CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct);
Nvoid CAN_SlaveStartBank(uint8_t CAN_BankNumber); 
Nvoid CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState);
Nvoid CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState);
N
N/* CAN Frames Transmission functions ******************************************/
Nuint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage);
Nuint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox);
Nvoid CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox);
N
N/* CAN Frames Reception functions *********************************************/
Nvoid CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage);
Nvoid CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber);
Nuint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber);
N
N/* Operation modes functions **************************************************/
Nuint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode);
Nuint8_t CAN_Sleep(CAN_TypeDef* CANx);
Nuint8_t CAN_WakeUp(CAN_TypeDef* CANx);
N
N/* CAN Bus Error management functions *****************************************/
Nuint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx);
Nuint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx);
Nuint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx);
N
N/* Interrupts and flags management functions **********************************/
Nvoid CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState);
NFlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG);
Nvoid CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG);
NITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT);
Nvoid CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM32F4xx_CAN_H */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 101 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_dac.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_dac.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_dac.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the DAC firmware 
N  *          library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_DAC_H
N#define __STM32F4xx_DAC_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup DAC
N  * @{
N  */
N
N/* Exported types ------------------------------------------------------------*/
N
N/** 
N  * @brief  DAC Init structure definition
N  */
N
Ntypedef struct
N{
N  uint32_t DAC_Trigger;                      /*!< Specifies the external trigger for the selected DAC channel.
N                                                  This parameter can be a value of @ref DAC_trigger_selection */
N
N  uint32_t DAC_WaveGeneration;               /*!< Specifies whether DAC channel noise waves or triangle waves
N                                                  are generated, or whether no wave is generated.
N                                                  This parameter can be a value of @ref DAC_wave_generation */
N
N  uint32_t DAC_LFSRUnmask_TriangleAmplitude; /*!< Specifies the LFSR mask for noise wave generation or
N                                                  the maximum amplitude triangle generation for the DAC channel. 
N                                                  This parameter can be a value of @ref DAC_lfsrunmask_triangleamplitude */
N
N  uint32_t DAC_OutputBuffer;                 /*!< Specifies whether the DAC channel output buffer is enabled or disabled.
N                                                  This parameter can be a value of @ref DAC_output_buffer */
N}DAC_InitTypeDef;
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup DAC_Exported_Constants
N  * @{
N  */
N
N/** @defgroup DAC_trigger_selection 
N  * @{
N  */
N
N#define DAC_Trigger_None                   ((uint32_t)0x00000000) /*!< Conversion is automatic once the DAC1_DHRxxxx register 
N                                                                       has been loaded, and not by external trigger */
N#define DAC_Trigger_T2_TRGO                ((uint32_t)0x00000024) /*!< TIM2 TRGO selected as external conversion trigger for DAC channel */
N#define DAC_Trigger_T4_TRGO                ((uint32_t)0x0000002C) /*!< TIM4 TRGO selected as external conversion trigger for DAC channel */
N#define DAC_Trigger_T5_TRGO                ((uint32_t)0x0000001C) /*!< TIM5 TRGO selected as external conversion trigger for DAC channel */
N#define DAC_Trigger_T6_TRGO                ((uint32_t)0x00000004) /*!< TIM6 TRGO selected as external conversion trigger for DAC channel */
N#define DAC_Trigger_T7_TRGO                ((uint32_t)0x00000014) /*!< TIM7 TRGO selected as external conversion trigger for DAC channel */
N#define DAC_Trigger_T8_TRGO                ((uint32_t)0x0000000C) /*!< TIM8 TRGO selected as external conversion trigger for DAC channel */                                                                       
N
N#define DAC_Trigger_Ext_IT9                ((uint32_t)0x00000034) /*!< EXTI Line9 event selected as external conversion trigger for DAC channel */
N#define DAC_Trigger_Software               ((uint32_t)0x0000003C) /*!< Conversion started by software trigger for DAC channel */
N
N#define IS_DAC_TRIGGER(TRIGGER) (((TRIGGER) == DAC_Trigger_None) || \
N                                 ((TRIGGER) == DAC_Trigger_T6_TRGO) || \
N                                 ((TRIGGER) == DAC_Trigger_T8_TRGO) || \
N                                 ((TRIGGER) == DAC_Trigger_T7_TRGO) || \
N                                 ((TRIGGER) == DAC_Trigger_T5_TRGO) || \
N                                 ((TRIGGER) == DAC_Trigger_T2_TRGO) || \
N                                 ((TRIGGER) == DAC_Trigger_T4_TRGO) || \
N                                 ((TRIGGER) == DAC_Trigger_Ext_IT9) || \
N                                 ((TRIGGER) == DAC_Trigger_Software))
X#define IS_DAC_TRIGGER(TRIGGER) (((TRIGGER) == DAC_Trigger_None) ||                                  ((TRIGGER) == DAC_Trigger_T6_TRGO) ||                                  ((TRIGGER) == DAC_Trigger_T8_TRGO) ||                                  ((TRIGGER) == DAC_Trigger_T7_TRGO) ||                                  ((TRIGGER) == DAC_Trigger_T5_TRGO) ||                                  ((TRIGGER) == DAC_Trigger_T2_TRGO) ||                                  ((TRIGGER) == DAC_Trigger_T4_TRGO) ||                                  ((TRIGGER) == DAC_Trigger_Ext_IT9) ||                                  ((TRIGGER) == DAC_Trigger_Software))
N
N/**
N  * @}
N  */
N
N/** @defgroup DAC_wave_generation 
N  * @{
N  */
N
N#define DAC_WaveGeneration_None            ((uint32_t)0x00000000)
N#define DAC_WaveGeneration_Noise           ((uint32_t)0x00000040)
N#define DAC_WaveGeneration_Triangle        ((uint32_t)0x00000080)
N#define IS_DAC_GENERATE_WAVE(WAVE) (((WAVE) == DAC_WaveGeneration_None) || \
N                                    ((WAVE) == DAC_WaveGeneration_Noise) || \
N                                    ((WAVE) == DAC_WaveGeneration_Triangle))
X#define IS_DAC_GENERATE_WAVE(WAVE) (((WAVE) == DAC_WaveGeneration_None) ||                                     ((WAVE) == DAC_WaveGeneration_Noise) ||                                     ((WAVE) == DAC_WaveGeneration_Triangle))
N/**
N  * @}
N  */
N
N/** @defgroup DAC_lfsrunmask_triangleamplitude
N  * @{
N  */
N
N#define DAC_LFSRUnmask_Bit0                ((uint32_t)0x00000000) /*!< Unmask DAC channel LFSR bit0 for noise wave generation */
N#define DAC_LFSRUnmask_Bits1_0             ((uint32_t)0x00000100) /*!< Unmask DAC channel LFSR bit[1:0] for noise wave generation */
N#define DAC_LFSRUnmask_Bits2_0             ((uint32_t)0x00000200) /*!< Unmask DAC channel LFSR bit[2:0] for noise wave generation */
N#define DAC_LFSRUnmask_Bits3_0             ((uint32_t)0x00000300) /*!< Unmask DAC channel LFSR bit[3:0] for noise wave generation */
N#define DAC_LFSRUnmask_Bits4_0             ((uint32_t)0x00000400) /*!< Unmask DAC channel LFSR bit[4:0] for noise wave generation */
N#define DAC_LFSRUnmask_Bits5_0             ((uint32_t)0x00000500) /*!< Unmask DAC channel LFSR bit[5:0] for noise wave generation */
N#define DAC_LFSRUnmask_Bits6_0             ((uint32_t)0x00000600) /*!< Unmask DAC channel LFSR bit[6:0] for noise wave generation */
N#define DAC_LFSRUnmask_Bits7_0             ((uint32_t)0x00000700) /*!< Unmask DAC channel LFSR bit[7:0] for noise wave generation */
N#define DAC_LFSRUnmask_Bits8_0             ((uint32_t)0x00000800) /*!< Unmask DAC channel LFSR bit[8:0] for noise wave generation */
N#define DAC_LFSRUnmask_Bits9_0             ((uint32_t)0x00000900) /*!< Unmask DAC channel LFSR bit[9:0] for noise wave generation */
N#define DAC_LFSRUnmask_Bits10_0            ((uint32_t)0x00000A00) /*!< Unmask DAC channel LFSR bit[10:0] for noise wave generation */
N#define DAC_LFSRUnmask_Bits11_0            ((uint32_t)0x00000B00) /*!< Unmask DAC channel LFSR bit[11:0] for noise wave generation */
N#define DAC_TriangleAmplitude_1            ((uint32_t)0x00000000) /*!< Select max triangle amplitude of 1 */
N#define DAC_TriangleAmplitude_3            ((uint32_t)0x00000100) /*!< Select max triangle amplitude of 3 */
N#define DAC_TriangleAmplitude_7            ((uint32_t)0x00000200) /*!< Select max triangle amplitude of 7 */
N#define DAC_TriangleAmplitude_15           ((uint32_t)0x00000300) /*!< Select max triangle amplitude of 15 */
N#define DAC_TriangleAmplitude_31           ((uint32_t)0x00000400) /*!< Select max triangle amplitude of 31 */
N#define DAC_TriangleAmplitude_63           ((uint32_t)0x00000500) /*!< Select max triangle amplitude of 63 */
N#define DAC_TriangleAmplitude_127          ((uint32_t)0x00000600) /*!< Select max triangle amplitude of 127 */
N#define DAC_TriangleAmplitude_255          ((uint32_t)0x00000700) /*!< Select max triangle amplitude of 255 */
N#define DAC_TriangleAmplitude_511          ((uint32_t)0x00000800) /*!< Select max triangle amplitude of 511 */
N#define DAC_TriangleAmplitude_1023         ((uint32_t)0x00000900) /*!< Select max triangle amplitude of 1023 */
N#define DAC_TriangleAmplitude_2047         ((uint32_t)0x00000A00) /*!< Select max triangle amplitude of 2047 */
N#define DAC_TriangleAmplitude_4095         ((uint32_t)0x00000B00) /*!< Select max triangle amplitude of 4095 */
N
N#define IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(VALUE) (((VALUE) == DAC_LFSRUnmask_Bit0) || \
N                                                      ((VALUE) == DAC_LFSRUnmask_Bits1_0) || \
N                                                      ((VALUE) == DAC_LFSRUnmask_Bits2_0) || \
N                                                      ((VALUE) == DAC_LFSRUnmask_Bits3_0) || \
N                                                      ((VALUE) == DAC_LFSRUnmask_Bits4_0) || \
N                                                      ((VALUE) == DAC_LFSRUnmask_Bits5_0) || \
N                                                      ((VALUE) == DAC_LFSRUnmask_Bits6_0) || \
N                                                      ((VALUE) == DAC_LFSRUnmask_Bits7_0) || \
N                                                      ((VALUE) == DAC_LFSRUnmask_Bits8_0) || \
N                                                      ((VALUE) == DAC_LFSRUnmask_Bits9_0) || \
N                                                      ((VALUE) == DAC_LFSRUnmask_Bits10_0) || \
N                                                      ((VALUE) == DAC_LFSRUnmask_Bits11_0) || \
N                                                      ((VALUE) == DAC_TriangleAmplitude_1) || \
N                                                      ((VALUE) == DAC_TriangleAmplitude_3) || \
N                                                      ((VALUE) == DAC_TriangleAmplitude_7) || \
N                                                      ((VALUE) == DAC_TriangleAmplitude_15) || \
N                                                      ((VALUE) == DAC_TriangleAmplitude_31) || \
N                                                      ((VALUE) == DAC_TriangleAmplitude_63) || \
N                                                      ((VALUE) == DAC_TriangleAmplitude_127) || \
N                                                      ((VALUE) == DAC_TriangleAmplitude_255) || \
N                                                      ((VALUE) == DAC_TriangleAmplitude_511) || \
N                                                      ((VALUE) == DAC_TriangleAmplitude_1023) || \
N                                                      ((VALUE) == DAC_TriangleAmplitude_2047) || \
N                                                      ((VALUE) == DAC_TriangleAmplitude_4095))
X#define IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(VALUE) (((VALUE) == DAC_LFSRUnmask_Bit0) ||                                                       ((VALUE) == DAC_LFSRUnmask_Bits1_0) ||                                                       ((VALUE) == DAC_LFSRUnmask_Bits2_0) ||                                                       ((VALUE) == DAC_LFSRUnmask_Bits3_0) ||                                                       ((VALUE) == DAC_LFSRUnmask_Bits4_0) ||                                                       ((VALUE) == DAC_LFSRUnmask_Bits5_0) ||                                                       ((VALUE) == DAC_LFSRUnmask_Bits6_0) ||                                                       ((VALUE) == DAC_LFSRUnmask_Bits7_0) ||                                                       ((VALUE) == DAC_LFSRUnmask_Bits8_0) ||                                                       ((VALUE) == DAC_LFSRUnmask_Bits9_0) ||                                                       ((VALUE) == DAC_LFSRUnmask_Bits10_0) ||                                                       ((VALUE) == DAC_LFSRUnmask_Bits11_0) ||                                                       ((VALUE) == DAC_TriangleAmplitude_1) ||                                                       ((VALUE) == DAC_TriangleAmplitude_3) ||                                                       ((VALUE) == DAC_TriangleAmplitude_7) ||                                                       ((VALUE) == DAC_TriangleAmplitude_15) ||                                                       ((VALUE) == DAC_TriangleAmplitude_31) ||                                                       ((VALUE) == DAC_TriangleAmplitude_63) ||                                                       ((VALUE) == DAC_TriangleAmplitude_127) ||                                                       ((VALUE) == DAC_TriangleAmplitude_255) ||                                                       ((VALUE) == DAC_TriangleAmplitude_511) ||                                                       ((VALUE) == DAC_TriangleAmplitude_1023) ||                                                       ((VALUE) == DAC_TriangleAmplitude_2047) ||                                                       ((VALUE) == DAC_TriangleAmplitude_4095))
N/**
N  * @}
N  */
N
N/** @defgroup DAC_output_buffer 
N  * @{
N  */
N
N#define DAC_OutputBuffer_Enable            ((uint32_t)0x00000000)
N#define DAC_OutputBuffer_Disable           ((uint32_t)0x00000002)
N#define IS_DAC_OUTPUT_BUFFER_STATE(STATE) (((STATE) == DAC_OutputBuffer_Enable) || \
N                                           ((STATE) == DAC_OutputBuffer_Disable))
X#define IS_DAC_OUTPUT_BUFFER_STATE(STATE) (((STATE) == DAC_OutputBuffer_Enable) ||                                            ((STATE) == DAC_OutputBuffer_Disable))
N/**
N  * @}
N  */
N
N/** @defgroup DAC_Channel_selection 
N  * @{
N  */
N
N#define DAC_Channel_1                      ((uint32_t)0x00000000)
N#define DAC_Channel_2                      ((uint32_t)0x00000010)
N#define IS_DAC_CHANNEL(CHANNEL) (((CHANNEL) == DAC_Channel_1) || \
N                                 ((CHANNEL) == DAC_Channel_2))
X#define IS_DAC_CHANNEL(CHANNEL) (((CHANNEL) == DAC_Channel_1) ||                                  ((CHANNEL) == DAC_Channel_2))
N/**
N  * @}
N  */
N
N/** @defgroup DAC_data_alignement 
N  * @{
N  */
N
N#define DAC_Align_12b_R                    ((uint32_t)0x00000000)
N#define DAC_Align_12b_L                    ((uint32_t)0x00000004)
N#define DAC_Align_8b_R                     ((uint32_t)0x00000008)
N#define IS_DAC_ALIGN(ALIGN) (((ALIGN) == DAC_Align_12b_R) || \
N                             ((ALIGN) == DAC_Align_12b_L) || \
N                             ((ALIGN) == DAC_Align_8b_R))
X#define IS_DAC_ALIGN(ALIGN) (((ALIGN) == DAC_Align_12b_R) ||                              ((ALIGN) == DAC_Align_12b_L) ||                              ((ALIGN) == DAC_Align_8b_R))
N/**
N  * @}
N  */
N
N/** @defgroup DAC_wave_generation 
N  * @{
N  */
N
N#define DAC_Wave_Noise                     ((uint32_t)0x00000040)
N#define DAC_Wave_Triangle                  ((uint32_t)0x00000080)
N#define IS_DAC_WAVE(WAVE) (((WAVE) == DAC_Wave_Noise) || \
N                           ((WAVE) == DAC_Wave_Triangle))
X#define IS_DAC_WAVE(WAVE) (((WAVE) == DAC_Wave_Noise) ||                            ((WAVE) == DAC_Wave_Triangle))
N/**
N  * @}
N  */
N
N/** @defgroup DAC_data 
N  * @{
N  */
N
N#define IS_DAC_DATA(DATA) ((DATA) <= 0xFFF0) 
N/**
N  * @}
N  */
N  
N/** @defgroup DAC_interrupts_definition 
N  * @{
N  */   
N#define DAC_IT_DMAUDR                      ((uint32_t)0x00002000)  
N#define IS_DAC_IT(IT) (((IT) == DAC_IT_DMAUDR)) 
N
N/**
N  * @}
N  */ 
N
N/** @defgroup DAC_flags_definition 
N  * @{
N  */ 
N  
N#define DAC_FLAG_DMAUDR                    ((uint32_t)0x00002000)  
N#define IS_DAC_FLAG(FLAG) (((FLAG) == DAC_FLAG_DMAUDR))  
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/  
N
N/*  Function used to set the DAC configuration to the default reset state *****/  
Nvoid DAC_DeInit(void);
N
N/*  DAC channels configuration: trigger, output buffer, data format functions */
Nvoid DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct);
Nvoid DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct);
Nvoid DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState);
Nvoid DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState);
Nvoid DAC_DualSoftwareTriggerCmd(FunctionalState NewState);
Nvoid DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState);
Nvoid DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data);
Nvoid DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data);
Nvoid DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1);
Nuint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel);
N
N/* DMA management functions ***************************************************/
Nvoid DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState);
N
N/* Interrupts and flags management functions **********************************/
Nvoid DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState);
NFlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG);
Nvoid DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG);
NITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT);
Nvoid DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__STM32F4xx_DAC_H */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 102 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_dcmi.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_dcmi.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_dcmi.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the DCMI firmware library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_DCMI_H
N#define __STM32F4xx_DCMI_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup DCMI
N  * @{
N  */ 
N
N/* Exported types ------------------------------------------------------------*/
N/** 
N  * @brief   DCMI Init structure definition  
N  */ 
Ntypedef struct
N{
N  uint16_t DCMI_CaptureMode;      /*!< Specifies the Capture Mode: Continuous or Snapshot.
N                                       This parameter can be a value of @ref DCMI_Capture_Mode */
N
N  uint16_t DCMI_SynchroMode;      /*!< Specifies the Synchronization Mode: Hardware or Embedded.
N                                       This parameter can be a value of @ref DCMI_Synchronization_Mode */
N
N  uint16_t DCMI_PCKPolarity;      /*!< Specifies the Pixel clock polarity: Falling or Rising.
N                                       This parameter can be a value of @ref DCMI_PIXCK_Polarity */
N
N  uint16_t DCMI_VSPolarity;       /*!< Specifies the Vertical synchronization polarity: High or Low.
N                                       This parameter can be a value of @ref DCMI_VSYNC_Polarity */
N
N  uint16_t DCMI_HSPolarity;       /*!< Specifies the Horizontal synchronization polarity: High or Low.
N                                       This parameter can be a value of @ref DCMI_HSYNC_Polarity */
N
N  uint16_t DCMI_CaptureRate;      /*!< Specifies the frequency of frame capture: All, 1/2 or 1/4.
N                                       This parameter can be a value of @ref DCMI_Capture_Rate */
N
N  uint16_t DCMI_ExtendedDataMode; /*!< Specifies the data width: 8-bit, 10-bit, 12-bit or 14-bit.
N                                       This parameter can be a value of @ref DCMI_Extended_Data_Mode */
N} DCMI_InitTypeDef;
N
N/** 
N  * @brief   DCMI CROP Init structure definition  
N  */ 
Ntypedef struct
N{
N  uint16_t DCMI_VerticalStartLine;      /*!< Specifies the Vertical start line count from which the image capture
N                                             will start. This parameter can be a value between 0x00 and 0x1FFF */
N
N  uint16_t DCMI_HorizontalOffsetCount;  /*!< Specifies the number of pixel clocks to count before starting a capture.
N                                             This parameter can be a value between 0x00 and 0x3FFF */
N
N  uint16_t DCMI_VerticalLineCount;      /*!< Specifies the number of lines to be captured from the starting point.
N                                             This parameter can be a value between 0x00 and 0x3FFF */
N
N  uint16_t DCMI_CaptureCount;           /*!< Specifies the number of pixel clocks to be captured from the starting
N                                             point on the same line.
N                                             This parameter can be a value between 0x00 and 0x3FFF */
N} DCMI_CROPInitTypeDef;
N
N/** 
N  * @brief   DCMI Embedded Synchronisation CODE Init structure definition  
N  */ 
Ntypedef struct
N{
N  uint8_t DCMI_FrameStartCode; /*!< Specifies the code of the frame start delimiter. */
N  uint8_t DCMI_LineStartCode;  /*!< Specifies the code of the line start delimiter. */
N  uint8_t DCMI_LineEndCode;    /*!< Specifies the code of the line end delimiter. */
N  uint8_t DCMI_FrameEndCode;   /*!< Specifies the code of the frame end delimiter. */
N} DCMI_CodesInitTypeDef;
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup DCMI_Exported_Constants
N  * @{
N  */
N
N/** @defgroup DCMI_Capture_Mode 
N  * @{
N  */ 
N#define DCMI_CaptureMode_Continuous    ((uint16_t)0x0000) /*!< The received data are transferred continuously 
N                                                               into the destination memory through the DMA */
N#define DCMI_CaptureMode_SnapShot      ((uint16_t)0x0002) /*!< Once activated, the interface waits for the start of 
N                                                               frame and then transfers a single frame through the DMA */
N#define IS_DCMI_CAPTURE_MODE(MODE)(((MODE) == DCMI_CaptureMode_Continuous) || \
N                                   ((MODE) == DCMI_CaptureMode_SnapShot))
X#define IS_DCMI_CAPTURE_MODE(MODE)(((MODE) == DCMI_CaptureMode_Continuous) ||                                    ((MODE) == DCMI_CaptureMode_SnapShot))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DCMI_Synchronization_Mode
N  * @{
N  */ 
N#define DCMI_SynchroMode_Hardware    ((uint16_t)0x0000) /*!< Hardware synchronization data capture (frame/line start/stop)
N                                                             is synchronized with the HSYNC/VSYNC signals */
N#define DCMI_SynchroMode_Embedded    ((uint16_t)0x0010) /*!< Embedded synchronization data capture is synchronized with 
N                                                             synchronization codes embedded in the data flow */
N#define IS_DCMI_SYNCHRO(MODE)(((MODE) == DCMI_SynchroMode_Hardware) || \
N                              ((MODE) == DCMI_SynchroMode_Embedded))
X#define IS_DCMI_SYNCHRO(MODE)(((MODE) == DCMI_SynchroMode_Hardware) ||                               ((MODE) == DCMI_SynchroMode_Embedded))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DCMI_PIXCK_Polarity 
N  * @{
N  */ 
N#define DCMI_PCKPolarity_Falling    ((uint16_t)0x0000) /*!< Pixel clock active on Falling edge */
N#define DCMI_PCKPolarity_Rising     ((uint16_t)0x0020) /*!< Pixel clock active on Rising edge */
N#define IS_DCMI_PCKPOLARITY(POLARITY)(((POLARITY) == DCMI_PCKPolarity_Falling) || \
N                                      ((POLARITY) == DCMI_PCKPolarity_Rising))
X#define IS_DCMI_PCKPOLARITY(POLARITY)(((POLARITY) == DCMI_PCKPolarity_Falling) ||                                       ((POLARITY) == DCMI_PCKPolarity_Rising))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DCMI_VSYNC_Polarity 
N  * @{
N  */ 
N#define DCMI_VSPolarity_Low     ((uint16_t)0x0000) /*!< Vertical synchronization active Low */
N#define DCMI_VSPolarity_High    ((uint16_t)0x0080) /*!< Vertical synchronization active High */
N#define IS_DCMI_VSPOLARITY(POLARITY)(((POLARITY) == DCMI_VSPolarity_Low) || \
N                                     ((POLARITY) == DCMI_VSPolarity_High))
X#define IS_DCMI_VSPOLARITY(POLARITY)(((POLARITY) == DCMI_VSPolarity_Low) ||                                      ((POLARITY) == DCMI_VSPolarity_High))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DCMI_HSYNC_Polarity 
N  * @{
N  */ 
N#define DCMI_HSPolarity_Low     ((uint16_t)0x0000) /*!< Horizontal synchronization active Low */
N#define DCMI_HSPolarity_High    ((uint16_t)0x0040) /*!< Horizontal synchronization active High */
N#define IS_DCMI_HSPOLARITY(POLARITY)(((POLARITY) == DCMI_HSPolarity_Low) || \
N                                     ((POLARITY) == DCMI_HSPolarity_High))
X#define IS_DCMI_HSPOLARITY(POLARITY)(((POLARITY) == DCMI_HSPolarity_Low) ||                                      ((POLARITY) == DCMI_HSPolarity_High))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DCMI_Capture_Rate 
N  * @{
N  */ 
N#define DCMI_CaptureRate_All_Frame     ((uint16_t)0x0000) /*!< All frames are captured */
N#define DCMI_CaptureRate_1of2_Frame    ((uint16_t)0x0100) /*!< Every alternate frame captured */
N#define DCMI_CaptureRate_1of4_Frame    ((uint16_t)0x0200) /*!< One frame in 4 frames captured */
N#define IS_DCMI_CAPTURE_RATE(RATE) (((RATE) == DCMI_CaptureRate_All_Frame) || \
N                                    ((RATE) == DCMI_CaptureRate_1of2_Frame) ||\
N                                    ((RATE) == DCMI_CaptureRate_1of4_Frame))
X#define IS_DCMI_CAPTURE_RATE(RATE) (((RATE) == DCMI_CaptureRate_All_Frame) ||                                     ((RATE) == DCMI_CaptureRate_1of2_Frame) ||                                    ((RATE) == DCMI_CaptureRate_1of4_Frame))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DCMI_Extended_Data_Mode 
N  * @{
N  */ 
N#define DCMI_ExtendedDataMode_8b     ((uint16_t)0x0000) /*!< Interface captures 8-bit data on every pixel clock */
N#define DCMI_ExtendedDataMode_10b    ((uint16_t)0x0400) /*!< Interface captures 10-bit data on every pixel clock */
N#define DCMI_ExtendedDataMode_12b    ((uint16_t)0x0800) /*!< Interface captures 12-bit data on every pixel clock */
N#define DCMI_ExtendedDataMode_14b    ((uint16_t)0x0C00) /*!< Interface captures 14-bit data on every pixel clock */
N#define IS_DCMI_EXTENDED_DATA(DATA)(((DATA) == DCMI_ExtendedDataMode_8b) || \
N                                    ((DATA) == DCMI_ExtendedDataMode_10b) ||\
N                                    ((DATA) == DCMI_ExtendedDataMode_12b) ||\
N                                    ((DATA) == DCMI_ExtendedDataMode_14b))
X#define IS_DCMI_EXTENDED_DATA(DATA)(((DATA) == DCMI_ExtendedDataMode_8b) ||                                     ((DATA) == DCMI_ExtendedDataMode_10b) ||                                    ((DATA) == DCMI_ExtendedDataMode_12b) ||                                    ((DATA) == DCMI_ExtendedDataMode_14b))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DCMI_interrupt_sources 
N  * @{
N  */ 
N#define DCMI_IT_FRAME    ((uint16_t)0x0001)
N#define DCMI_IT_OVF      ((uint16_t)0x0002)
N#define DCMI_IT_ERR      ((uint16_t)0x0004)
N#define DCMI_IT_VSYNC    ((uint16_t)0x0008)
N#define DCMI_IT_LINE     ((uint16_t)0x0010)
N#define IS_DCMI_CONFIG_IT(IT) ((((IT) & (uint16_t)0xFFE0) == 0x0000) && ((IT) != 0x0000))
N#define IS_DCMI_GET_IT(IT) (((IT) == DCMI_IT_FRAME) || \
N                            ((IT) == DCMI_IT_OVF) || \
N                            ((IT) == DCMI_IT_ERR) || \
N                            ((IT) == DCMI_IT_VSYNC) || \
N                            ((IT) == DCMI_IT_LINE))
X#define IS_DCMI_GET_IT(IT) (((IT) == DCMI_IT_FRAME) ||                             ((IT) == DCMI_IT_OVF) ||                             ((IT) == DCMI_IT_ERR) ||                             ((IT) == DCMI_IT_VSYNC) ||                             ((IT) == DCMI_IT_LINE))
N/**
N  * @}
N  */ 
N
N
N/** @defgroup DCMI_Flags 
N  * @{
N  */ 
N/** 
N  * @brief   DCMI SR register  
N  */ 
N#define DCMI_FLAG_HSYNC     ((uint16_t)0x2001)
N#define DCMI_FLAG_VSYNC     ((uint16_t)0x2002)
N#define DCMI_FLAG_FNE       ((uint16_t)0x2004)
N/** 
N  * @brief   DCMI RISR register  
N  */ 
N#define DCMI_FLAG_FRAMERI    ((uint16_t)0x0001)
N#define DCMI_FLAG_OVFRI      ((uint16_t)0x0002)
N#define DCMI_FLAG_ERRRI      ((uint16_t)0x0004)
N#define DCMI_FLAG_VSYNCRI    ((uint16_t)0x0008)
N#define DCMI_FLAG_LINERI     ((uint16_t)0x0010)
N/** 
N  * @brief   DCMI MISR register  
N  */ 
N#define DCMI_FLAG_FRAMEMI    ((uint16_t)0x1001)
N#define DCMI_FLAG_OVFMI      ((uint16_t)0x1002)
N#define DCMI_FLAG_ERRMI      ((uint16_t)0x1004)
N#define DCMI_FLAG_VSYNCMI    ((uint16_t)0x1008)
N#define DCMI_FLAG_LINEMI     ((uint16_t)0x1010)
N#define IS_DCMI_GET_FLAG(FLAG) (((FLAG) == DCMI_FLAG_HSYNC) || \
N                                ((FLAG) == DCMI_FLAG_VSYNC) || \
N                                ((FLAG) == DCMI_FLAG_FNE) || \
N                                ((FLAG) == DCMI_FLAG_FRAMERI) || \
N                                ((FLAG) == DCMI_FLAG_OVFRI) || \
N                                ((FLAG) == DCMI_FLAG_ERRRI) || \
N                                ((FLAG) == DCMI_FLAG_VSYNCRI) || \
N                                ((FLAG) == DCMI_FLAG_LINERI) || \
N                                ((FLAG) == DCMI_FLAG_FRAMEMI) || \
N                                ((FLAG) == DCMI_FLAG_OVFMI) || \
N                                ((FLAG) == DCMI_FLAG_ERRMI) || \
N                                ((FLAG) == DCMI_FLAG_VSYNCMI) || \
N                                ((FLAG) == DCMI_FLAG_LINEMI))
X#define IS_DCMI_GET_FLAG(FLAG) (((FLAG) == DCMI_FLAG_HSYNC) ||                                 ((FLAG) == DCMI_FLAG_VSYNC) ||                                 ((FLAG) == DCMI_FLAG_FNE) ||                                 ((FLAG) == DCMI_FLAG_FRAMERI) ||                                 ((FLAG) == DCMI_FLAG_OVFRI) ||                                 ((FLAG) == DCMI_FLAG_ERRRI) ||                                 ((FLAG) == DCMI_FLAG_VSYNCRI) ||                                 ((FLAG) == DCMI_FLAG_LINERI) ||                                 ((FLAG) == DCMI_FLAG_FRAMEMI) ||                                 ((FLAG) == DCMI_FLAG_OVFMI) ||                                 ((FLAG) == DCMI_FLAG_ERRMI) ||                                 ((FLAG) == DCMI_FLAG_VSYNCMI) ||                                 ((FLAG) == DCMI_FLAG_LINEMI))
N                                
N#define IS_DCMI_CLEAR_FLAG(FLAG) ((((FLAG) & (uint16_t)0xFFE0) == 0x0000) && ((FLAG) != 0x0000))
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/ 
N
N/*  Function used to set the DCMI configuration to the default reset state ****/ 
Nvoid DCMI_DeInit(void);
N
N/* Initialization and Configuration functions *********************************/
Nvoid DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct);
Nvoid DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct);
Nvoid DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct);
Nvoid DCMI_CROPCmd(FunctionalState NewState);
Nvoid DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct);
Nvoid DCMI_JPEGCmd(FunctionalState NewState);
N
N/* Image capture functions ****************************************************/
Nvoid DCMI_Cmd(FunctionalState NewState);
Nvoid DCMI_CaptureCmd(FunctionalState NewState);
Nuint32_t DCMI_ReadData(void);
N
N/* Interrupts and flags management functions **********************************/
Nvoid DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState);
NFlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG);
Nvoid DCMI_ClearFlag(uint16_t DCMI_FLAG);
NITStatus DCMI_GetITStatus(uint16_t DCMI_IT);
Nvoid DCMI_ClearITPendingBit(uint16_t DCMI_IT);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__STM32F4xx_DCMI_H */
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 103 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#include "stm32f4xx_fsmc.h"
L 1 "..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\stm32f4xx_fsmc.h" 1
N/**
N  ******************************************************************************
N  * @file    stm32f4xx_fsmc.h
N  * @author  MCD Application Team
N  * @version V1.3.0
N  * @date    08-November-2013
N  * @brief   This file contains all the functions prototypes for the FSMC firmware 
N  *          library.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM32F4xx_FSMC_H
N#define __STM32F4xx_FSMC_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N
N/** @addtogroup STM32F4xx_StdPeriph_Driver
N  * @{
N  */
N
N/** @addtogroup FSMC
N  * @{
N  */
N
N/* Exported types ------------------------------------------------------------*/
N
N/** 
N  * @brief  Timing parameters For NOR/SRAM Banks  
N  */
Ntypedef struct
N{
N  uint32_t FSMC_AddressSetupTime;       /*!< Defines the number of HCLK cycles to configure
N                                             the duration of the address setup time. 
N                                             This parameter can be a value between 0 and 0xF.
N                                             @note This parameter is not used with synchronous NOR Flash memories. */
N
N  uint32_t FSMC_AddressHoldTime;        /*!< Defines the number of HCLK cycles to configure
N                                             the duration of the address hold time.
N                                             This parameter can be a value between 0 and 0xF. 
N                                             @note This parameter is not used with synchronous NOR Flash memories.*/
N
N  uint32_t FSMC_DataSetupTime;          /*!< Defines the number of HCLK cycles to configure
N                                             the duration of the data setup time.
N                                             This parameter can be a value between 0 and 0xFF.
N                                             @note This parameter is used for SRAMs, ROMs and asynchronous multiplexed NOR Flash memories. */
N
N  uint32_t FSMC_BusTurnAroundDuration;  /*!< Defines the number of HCLK cycles to configure
N                                             the duration of the bus turnaround.
N                                             This parameter can be a value between 0 and 0xF.
N                                             @note This parameter is only used for multiplexed NOR Flash memories. */
N
N  uint32_t FSMC_CLKDivision;            /*!< Defines the period of CLK clock output signal, expressed in number of HCLK cycles.
N                                             This parameter can be a value between 1 and 0xF.
N                                             @note This parameter is not used for asynchronous NOR Flash, SRAM or ROM accesses. */
N
N  uint32_t FSMC_DataLatency;            /*!< Defines the number of memory clock cycles to issue
N                                             to the memory before getting the first data.
N                                             The parameter value depends on the memory type as shown below:
N                                              - It must be set to 0 in case of a CRAM
N                                              - It is don't care in asynchronous NOR, SRAM or ROM accesses
N                                              - It may assume a value between 0 and 0xF in NOR Flash memories
N                                                with synchronous burst mode enable */
N
N  uint32_t FSMC_AccessMode;             /*!< Specifies the asynchronous access mode. 
N                                             This parameter can be a value of @ref FSMC_Access_Mode */
N}FSMC_NORSRAMTimingInitTypeDef;
N
N/** 
N  * @brief  FSMC NOR/SRAM Init structure definition
N  */
Ntypedef struct
N{
N  uint32_t FSMC_Bank;                /*!< Specifies the NOR/SRAM memory bank that will be used.
N                                          This parameter can be a value of @ref FSMC_NORSRAM_Bank */
N
N  uint32_t FSMC_DataAddressMux;      /*!< Specifies whether the address and data values are
N                                          multiplexed on the data bus or not. 
N                                          This parameter can be a value of @ref FSMC_Data_Address_Bus_Multiplexing */
N
N  uint32_t FSMC_MemoryType;          /*!< Specifies the type of external memory attached to
N                                          the corresponding memory bank.
N                                          This parameter can be a value of @ref FSMC_Memory_Type */
N
N  uint32_t FSMC_MemoryDataWidth;     /*!< Specifies the external memory device width.
N                                          This parameter can be a value of @ref FSMC_Data_Width */
N
N  uint32_t FSMC_BurstAccessMode;     /*!< Enables or disables the burst access mode for Flash memory,
N                                          valid only with synchronous burst Flash memories.
N                                          This parameter can be a value of @ref FSMC_Burst_Access_Mode */
N
N  uint32_t FSMC_AsynchronousWait;     /*!< Enables or disables wait signal during asynchronous transfers,
N                                          valid only with asynchronous Flash memories.
N                                          This parameter can be a value of @ref FSMC_AsynchronousWait */                                          
N
N  uint32_t FSMC_WaitSignalPolarity;  /*!< Specifies the wait signal polarity, valid only when accessing
N                                          the Flash memory in burst mode.
N                                          This parameter can be a value of @ref FSMC_Wait_Signal_Polarity */
N
N  uint32_t FSMC_WrapMode;            /*!< Enables or disables the Wrapped burst access mode for Flash
N                                          memory, valid only when accessing Flash memories in burst mode.
N                                          This parameter can be a value of @ref FSMC_Wrap_Mode */
N
N  uint32_t FSMC_WaitSignalActive;    /*!< Specifies if the wait signal is asserted by the memory one
N                                          clock cycle before the wait state or during the wait state,
N                                          valid only when accessing memories in burst mode. 
N                                          This parameter can be a value of @ref FSMC_Wait_Timing */
N
N  uint32_t FSMC_WriteOperation;      /*!< Enables or disables the write operation in the selected bank by the FSMC. 
N                                          This parameter can be a value of @ref FSMC_Write_Operation */
N
N  uint32_t FSMC_WaitSignal;          /*!< Enables or disables the wait state insertion via wait
N                                          signal, valid for Flash memory access in burst mode. 
N                                          This parameter can be a value of @ref FSMC_Wait_Signal */
N
N  uint32_t FSMC_ExtendedMode;        /*!< Enables or disables the extended mode.
N                                          This parameter can be a value of @ref FSMC_Extended_Mode */
N
N  uint32_t FSMC_WriteBurst;          /*!< Enables or disables the write burst operation.
N                                          This parameter can be a value of @ref FSMC_Write_Burst */ 
N
N  FSMC_NORSRAMTimingInitTypeDef* FSMC_ReadWriteTimingStruct; /*!< Timing Parameters for write and read access if the  Extended Mode is not used*/  
N
N  FSMC_NORSRAMTimingInitTypeDef* FSMC_WriteTimingStruct;     /*!< Timing Parameters for write access if the  Extended Mode is used*/      
N}FSMC_NORSRAMInitTypeDef;
N
N/** 
N  * @brief  Timing parameters For FSMC NAND and PCCARD Banks
N  */
Ntypedef struct
N{
N  uint32_t FSMC_SetupTime;      /*!< Defines the number of HCLK cycles to setup address before
N                                     the command assertion for NAND Flash read or write access
N                                     to common/Attribute or I/O memory space (depending on
N                                     the memory space timing to be configured).
N                                     This parameter can be a value between 0 and 0xFF.*/
N
N  uint32_t FSMC_WaitSetupTime;  /*!< Defines the minimum number of HCLK cycles to assert the
N                                     command for NAND Flash read or write access to
N                                     common/Attribute or I/O memory space (depending on the
N                                     memory space timing to be configured). 
N                                     This parameter can be a number between 0x00 and 0xFF */
N
N  uint32_t FSMC_HoldSetupTime;  /*!< Defines the number of HCLK clock cycles to hold address
N                                     (and data for write access) after the command de-assertion
N                                     for NAND Flash read or write access to common/Attribute
N                                     or I/O memory space (depending on the memory space timing
N                                     to be configured).
N                                     This parameter can be a number between 0x00 and 0xFF */
N
N  uint32_t FSMC_HiZSetupTime;   /*!< Defines the number of HCLK clock cycles during which the
N                                     data bus is kept in HiZ after the start of a NAND Flash
N                                     write access to common/Attribute or I/O memory space (depending
N                                     on the memory space timing to be configured).
N                                     This parameter can be a number between 0x00 and 0xFF */
N}FSMC_NAND_PCCARDTimingInitTypeDef;
N
N/** 
N  * @brief  FSMC NAND Init structure definition
N  */
Ntypedef struct
N{
N  uint32_t FSMC_Bank;              /*!< Specifies the NAND memory bank that will be used.
N                                      This parameter can be a value of @ref FSMC_NAND_Bank */
N
N  uint32_t FSMC_Waitfeature;      /*!< Enables or disables the Wait feature for the NAND Memory Bank.
N                                       This parameter can be any value of @ref FSMC_Wait_feature */
N
N  uint32_t FSMC_MemoryDataWidth;  /*!< Specifies the external memory device width.
N                                       This parameter can be any value of @ref FSMC_Data_Width */
N
N  uint32_t FSMC_ECC;              /*!< Enables or disables the ECC computation.
N                                       This parameter can be any value of @ref FSMC_ECC */
N
N  uint32_t FSMC_ECCPageSize;      /*!< Defines the page size for the extended ECC.
N                                       This parameter can be any value of @ref FSMC_ECC_Page_Size */
N
N  uint32_t FSMC_TCLRSetupTime;    /*!< Defines the number of HCLK cycles to configure the
N                                       delay between CLE low and RE low.
N                                       This parameter can be a value between 0 and 0xFF. */
N
N  uint32_t FSMC_TARSetupTime;     /*!< Defines the number of HCLK cycles to configure the
N                                       delay between ALE low and RE low.
N                                       This parameter can be a number between 0x0 and 0xFF */ 
N
N  FSMC_NAND_PCCARDTimingInitTypeDef*  FSMC_CommonSpaceTimingStruct;   /*!< FSMC Common Space Timing */ 
N
N  FSMC_NAND_PCCARDTimingInitTypeDef*  FSMC_AttributeSpaceTimingStruct; /*!< FSMC Attribute Space Timing */
N}FSMC_NANDInitTypeDef;
N
N/** 
N  * @brief  FSMC PCCARD Init structure definition
N  */
N
Ntypedef struct
N{
N  uint32_t FSMC_Waitfeature;    /*!< Enables or disables the Wait feature for the Memory Bank.
N                                    This parameter can be any value of @ref FSMC_Wait_feature */
N
N  uint32_t FSMC_TCLRSetupTime;  /*!< Defines the number of HCLK cycles to configure the
N                                     delay between CLE low and RE low.
N                                     This parameter can be a value between 0 and 0xFF. */
N
N  uint32_t FSMC_TARSetupTime;   /*!< Defines the number of HCLK cycles to configure the
N                                     delay between ALE low and RE low.
N                                     This parameter can be a number between 0x0 and 0xFF */ 
N
N  
N  FSMC_NAND_PCCARDTimingInitTypeDef*  FSMC_CommonSpaceTimingStruct; /*!< FSMC Common Space Timing */
N
N  FSMC_NAND_PCCARDTimingInitTypeDef*  FSMC_AttributeSpaceTimingStruct;  /*!< FSMC Attribute Space Timing */ 
N  
N  FSMC_NAND_PCCARDTimingInitTypeDef*  FSMC_IOSpaceTimingStruct; /*!< FSMC IO Space Timing */  
N}FSMC_PCCARDInitTypeDef;
N
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup FSMC_Exported_Constants
N  * @{
N  */
N
N/** @defgroup FSMC_NORSRAM_Bank 
N  * @{
N  */
N#define FSMC_Bank1_NORSRAM1                      ((uint32_t)0x00000000)
N#define FSMC_Bank1_NORSRAM2                      ((uint32_t)0x00000002)
N#define FSMC_Bank1_NORSRAM3                      ((uint32_t)0x00000004)
N#define FSMC_Bank1_NORSRAM4                      ((uint32_t)0x00000006)
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_NAND_Bank 
N  * @{
N  */  
N#define FSMC_Bank2_NAND                          ((uint32_t)0x00000010)
N#define FSMC_Bank3_NAND                          ((uint32_t)0x00000100)
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_PCCARD_Bank 
N  * @{
N  */    
N#define FSMC_Bank4_PCCARD                        ((uint32_t)0x00001000)
N/**
N  * @}
N  */
N
N#define IS_FSMC_NORSRAM_BANK(BANK) (((BANK) == FSMC_Bank1_NORSRAM1) || \
N                                    ((BANK) == FSMC_Bank1_NORSRAM2) || \
N                                    ((BANK) == FSMC_Bank1_NORSRAM3) || \
N                                    ((BANK) == FSMC_Bank1_NORSRAM4))
X#define IS_FSMC_NORSRAM_BANK(BANK) (((BANK) == FSMC_Bank1_NORSRAM1) ||                                     ((BANK) == FSMC_Bank1_NORSRAM2) ||                                     ((BANK) == FSMC_Bank1_NORSRAM3) ||                                     ((BANK) == FSMC_Bank1_NORSRAM4))
N
N#define IS_FSMC_NAND_BANK(BANK) (((BANK) == FSMC_Bank2_NAND) || \
N                                 ((BANK) == FSMC_Bank3_NAND))
X#define IS_FSMC_NAND_BANK(BANK) (((BANK) == FSMC_Bank2_NAND) ||                                  ((BANK) == FSMC_Bank3_NAND))
N
N#define IS_FSMC_GETFLAG_BANK(BANK) (((BANK) == FSMC_Bank2_NAND) || \
N                                    ((BANK) == FSMC_Bank3_NAND) || \
N                                    ((BANK) == FSMC_Bank4_PCCARD))
X#define IS_FSMC_GETFLAG_BANK(BANK) (((BANK) == FSMC_Bank2_NAND) ||                                     ((BANK) == FSMC_Bank3_NAND) ||                                     ((BANK) == FSMC_Bank4_PCCARD))
N
N#define IS_FSMC_IT_BANK(BANK) (((BANK) == FSMC_Bank2_NAND) || \
N                               ((BANK) == FSMC_Bank3_NAND) || \
N                               ((BANK) == FSMC_Bank4_PCCARD))
X#define IS_FSMC_IT_BANK(BANK) (((BANK) == FSMC_Bank2_NAND) ||                                ((BANK) == FSMC_Bank3_NAND) ||                                ((BANK) == FSMC_Bank4_PCCARD))
N
N/** @defgroup FSMC_NOR_SRAM_Controller 
N  * @{
N  */
N
N/** @defgroup FSMC_Data_Address_Bus_Multiplexing 
N  * @{
N  */
N
N#define FSMC_DataAddressMux_Disable                ((uint32_t)0x00000000)
N#define FSMC_DataAddressMux_Enable                 ((uint32_t)0x00000002)
N#define IS_FSMC_MUX(MUX) (((MUX) == FSMC_DataAddressMux_Disable) || \
N                          ((MUX) == FSMC_DataAddressMux_Enable))
X#define IS_FSMC_MUX(MUX) (((MUX) == FSMC_DataAddressMux_Disable) ||                           ((MUX) == FSMC_DataAddressMux_Enable))
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Memory_Type 
N  * @{
N  */
N
N#define FSMC_MemoryType_SRAM                     ((uint32_t)0x00000000)
N#define FSMC_MemoryType_PSRAM                    ((uint32_t)0x00000004)
N#define FSMC_MemoryType_NOR                      ((uint32_t)0x00000008)
N#define IS_FSMC_MEMORY(MEMORY) (((MEMORY) == FSMC_MemoryType_SRAM) || \
N                                ((MEMORY) == FSMC_MemoryType_PSRAM)|| \
N                                ((MEMORY) == FSMC_MemoryType_NOR))
X#define IS_FSMC_MEMORY(MEMORY) (((MEMORY) == FSMC_MemoryType_SRAM) ||                                 ((MEMORY) == FSMC_MemoryType_PSRAM)||                                 ((MEMORY) == FSMC_MemoryType_NOR))
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Data_Width 
N  * @{
N  */
N
N#define FSMC_MemoryDataWidth_8b                  ((uint32_t)0x00000000)
N#define FSMC_MemoryDataWidth_16b                 ((uint32_t)0x00000010)
N#define IS_FSMC_MEMORY_WIDTH(WIDTH) (((WIDTH) == FSMC_MemoryDataWidth_8b) || \
N                                     ((WIDTH) == FSMC_MemoryDataWidth_16b))
X#define IS_FSMC_MEMORY_WIDTH(WIDTH) (((WIDTH) == FSMC_MemoryDataWidth_8b) ||                                      ((WIDTH) == FSMC_MemoryDataWidth_16b))
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Burst_Access_Mode 
N  * @{
N  */
N
N#define FSMC_BurstAccessMode_Disable             ((uint32_t)0x00000000) 
N#define FSMC_BurstAccessMode_Enable              ((uint32_t)0x00000100)
N#define IS_FSMC_BURSTMODE(STATE) (((STATE) == FSMC_BurstAccessMode_Disable) || \
N                                  ((STATE) == FSMC_BurstAccessMode_Enable))
X#define IS_FSMC_BURSTMODE(STATE) (((STATE) == FSMC_BurstAccessMode_Disable) ||                                   ((STATE) == FSMC_BurstAccessMode_Enable))
N/**
N  * @}
N  */
N    
N/** @defgroup FSMC_AsynchronousWait 
N  * @{
N  */
N#define FSMC_AsynchronousWait_Disable            ((uint32_t)0x00000000)
N#define FSMC_AsynchronousWait_Enable             ((uint32_t)0x00008000)
N#define IS_FSMC_ASYNWAIT(STATE) (((STATE) == FSMC_AsynchronousWait_Disable) || \
N                                 ((STATE) == FSMC_AsynchronousWait_Enable))
X#define IS_FSMC_ASYNWAIT(STATE) (((STATE) == FSMC_AsynchronousWait_Disable) ||                                  ((STATE) == FSMC_AsynchronousWait_Enable))
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Wait_Signal_Polarity 
N  * @{
N  */
N#define FSMC_WaitSignalPolarity_Low              ((uint32_t)0x00000000)
N#define FSMC_WaitSignalPolarity_High             ((uint32_t)0x00000200)
N#define IS_FSMC_WAIT_POLARITY(POLARITY) (((POLARITY) == FSMC_WaitSignalPolarity_Low) || \
N                                         ((POLARITY) == FSMC_WaitSignalPolarity_High))
X#define IS_FSMC_WAIT_POLARITY(POLARITY) (((POLARITY) == FSMC_WaitSignalPolarity_Low) ||                                          ((POLARITY) == FSMC_WaitSignalPolarity_High))
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Wrap_Mode 
N  * @{
N  */
N#define FSMC_WrapMode_Disable                    ((uint32_t)0x00000000)
N#define FSMC_WrapMode_Enable                     ((uint32_t)0x00000400) 
N#define IS_FSMC_WRAP_MODE(MODE) (((MODE) == FSMC_WrapMode_Disable) || \
N                                 ((MODE) == FSMC_WrapMode_Enable))
X#define IS_FSMC_WRAP_MODE(MODE) (((MODE) == FSMC_WrapMode_Disable) ||                                  ((MODE) == FSMC_WrapMode_Enable))
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Wait_Timing 
N  * @{
N  */
N#define FSMC_WaitSignalActive_BeforeWaitState    ((uint32_t)0x00000000)
N#define FSMC_WaitSignalActive_DuringWaitState    ((uint32_t)0x00000800) 
N#define IS_FSMC_WAIT_SIGNAL_ACTIVE(ACTIVE) (((ACTIVE) == FSMC_WaitSignalActive_BeforeWaitState) || \
N                                            ((ACTIVE) == FSMC_WaitSignalActive_DuringWaitState))
X#define IS_FSMC_WAIT_SIGNAL_ACTIVE(ACTIVE) (((ACTIVE) == FSMC_WaitSignalActive_BeforeWaitState) ||                                             ((ACTIVE) == FSMC_WaitSignalActive_DuringWaitState))
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Write_Operation 
N  * @{
N  */
N#define FSMC_WriteOperation_Disable                     ((uint32_t)0x00000000)
N#define FSMC_WriteOperation_Enable                      ((uint32_t)0x00001000)
N#define IS_FSMC_WRITE_OPERATION(OPERATION) (((OPERATION) == FSMC_WriteOperation_Disable) || \
N                                            ((OPERATION) == FSMC_WriteOperation_Enable))                         
X#define IS_FSMC_WRITE_OPERATION(OPERATION) (((OPERATION) == FSMC_WriteOperation_Disable) ||                                             ((OPERATION) == FSMC_WriteOperation_Enable))                         
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Wait_Signal 
N  * @{
N  */
N#define FSMC_WaitSignal_Disable                  ((uint32_t)0x00000000)
N#define FSMC_WaitSignal_Enable                   ((uint32_t)0x00002000) 
N#define IS_FSMC_WAITE_SIGNAL(SIGNAL) (((SIGNAL) == FSMC_WaitSignal_Disable) || \
N                                      ((SIGNAL) == FSMC_WaitSignal_Enable))
X#define IS_FSMC_WAITE_SIGNAL(SIGNAL) (((SIGNAL) == FSMC_WaitSignal_Disable) ||                                       ((SIGNAL) == FSMC_WaitSignal_Enable))
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Extended_Mode 
N  * @{
N  */
N#define FSMC_ExtendedMode_Disable                ((uint32_t)0x00000000)
N#define FSMC_ExtendedMode_Enable                 ((uint32_t)0x00004000)
N
N#define IS_FSMC_EXTENDED_MODE(MODE) (((MODE) == FSMC_ExtendedMode_Disable) || \
N                                     ((MODE) == FSMC_ExtendedMode_Enable)) 
X#define IS_FSMC_EXTENDED_MODE(MODE) (((MODE) == FSMC_ExtendedMode_Disable) ||                                      ((MODE) == FSMC_ExtendedMode_Enable)) 
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Write_Burst 
N  * @{
N  */
N
N#define FSMC_WriteBurst_Disable                  ((uint32_t)0x00000000)
N#define FSMC_WriteBurst_Enable                   ((uint32_t)0x00080000) 
N#define IS_FSMC_WRITE_BURST(BURST) (((BURST) == FSMC_WriteBurst_Disable) || \
N                                    ((BURST) == FSMC_WriteBurst_Enable))
X#define IS_FSMC_WRITE_BURST(BURST) (((BURST) == FSMC_WriteBurst_Disable) ||                                     ((BURST) == FSMC_WriteBurst_Enable))
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Address_Setup_Time 
N  * @{
N  */
N#define IS_FSMC_ADDRESS_SETUP_TIME(TIME) ((TIME) <= 0xF)
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Address_Hold_Time 
N  * @{
N  */
N#define IS_FSMC_ADDRESS_HOLD_TIME(TIME) ((TIME) <= 0xF)
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Data_Setup_Time 
N  * @{
N  */
N#define IS_FSMC_DATASETUP_TIME(TIME) (((TIME) > 0) && ((TIME) <= 0xFF))
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Bus_Turn_around_Duration 
N  * @{
N  */
N#define IS_FSMC_TURNAROUND_TIME(TIME) ((TIME) <= 0xF)
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_CLK_Division 
N  * @{
N  */
N#define IS_FSMC_CLK_DIV(DIV) ((DIV) <= 0xF)
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Data_Latency 
N  * @{
N  */
N#define IS_FSMC_DATA_LATENCY(LATENCY) ((LATENCY) <= 0xF)
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Access_Mode 
N  * @{
N  */
N#define FSMC_AccessMode_A                        ((uint32_t)0x00000000)
N#define FSMC_AccessMode_B                        ((uint32_t)0x10000000) 
N#define FSMC_AccessMode_C                        ((uint32_t)0x20000000)
N#define FSMC_AccessMode_D                        ((uint32_t)0x30000000)
N#define IS_FSMC_ACCESS_MODE(MODE) (((MODE) == FSMC_AccessMode_A) || \
N                                   ((MODE) == FSMC_AccessMode_B) || \
N                                   ((MODE) == FSMC_AccessMode_C) || \
N                                   ((MODE) == FSMC_AccessMode_D))
X#define IS_FSMC_ACCESS_MODE(MODE) (((MODE) == FSMC_AccessMode_A) ||                                    ((MODE) == FSMC_AccessMode_B) ||                                    ((MODE) == FSMC_AccessMode_C) ||                                    ((MODE) == FSMC_AccessMode_D))
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N  
N/** @defgroup FSMC_NAND_PCCARD_Controller 
N  * @{
N  */
N
N/** @defgroup FSMC_Wait_feature 
N  * @{
N  */
N#define FSMC_Waitfeature_Disable                 ((uint32_t)0x00000000)
N#define FSMC_Waitfeature_Enable                  ((uint32_t)0x00000002)
N#define IS_FSMC_WAIT_FEATURE(FEATURE) (((FEATURE) == FSMC_Waitfeature_Disable) || \
N                                       ((FEATURE) == FSMC_Waitfeature_Enable))
X#define IS_FSMC_WAIT_FEATURE(FEATURE) (((FEATURE) == FSMC_Waitfeature_Disable) ||                                        ((FEATURE) == FSMC_Waitfeature_Enable))
N/**
N  * @}
N  */
N
N
N/** @defgroup FSMC_ECC 
N  * @{
N  */
N#define FSMC_ECC_Disable                         ((uint32_t)0x00000000)
N#define FSMC_ECC_Enable                          ((uint32_t)0x00000040)
N#define IS_FSMC_ECC_STATE(STATE) (((STATE) == FSMC_ECC_Disable) || \
N                                  ((STATE) == FSMC_ECC_Enable))
X#define IS_FSMC_ECC_STATE(STATE) (((STATE) == FSMC_ECC_Disable) ||                                   ((STATE) == FSMC_ECC_Enable))
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_ECC_Page_Size 
N  * @{
N  */
N#define FSMC_ECCPageSize_256Bytes                ((uint32_t)0x00000000)
N#define FSMC_ECCPageSize_512Bytes                ((uint32_t)0x00020000)
N#define FSMC_ECCPageSize_1024Bytes               ((uint32_t)0x00040000)
N#define FSMC_ECCPageSize_2048Bytes               ((uint32_t)0x00060000)
N#define FSMC_ECCPageSize_4096Bytes               ((uint32_t)0x00080000)
N#define FSMC_ECCPageSize_8192Bytes               ((uint32_t)0x000A0000)
N#define IS_FSMC_ECCPAGE_SIZE(SIZE) (((SIZE) == FSMC_ECCPageSize_256Bytes) || \
N                                    ((SIZE) == FSMC_ECCPageSize_512Bytes) || \
N                                    ((SIZE) == FSMC_ECCPageSize_1024Bytes) || \
N                                    ((SIZE) == FSMC_ECCPageSize_2048Bytes) || \
N                                    ((SIZE) == FSMC_ECCPageSize_4096Bytes) || \
N                                    ((SIZE) == FSMC_ECCPageSize_8192Bytes))
X#define IS_FSMC_ECCPAGE_SIZE(SIZE) (((SIZE) == FSMC_ECCPageSize_256Bytes) ||                                     ((SIZE) == FSMC_ECCPageSize_512Bytes) ||                                     ((SIZE) == FSMC_ECCPageSize_1024Bytes) ||                                     ((SIZE) == FSMC_ECCPageSize_2048Bytes) ||                                     ((SIZE) == FSMC_ECCPageSize_4096Bytes) ||                                     ((SIZE) == FSMC_ECCPageSize_8192Bytes))
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_TCLR_Setup_Time 
N  * @{
N  */
N#define IS_FSMC_TCLR_TIME(TIME) ((TIME) <= 0xFF)
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_TAR_Setup_Time 
N  * @{
N  */
N#define IS_FSMC_TAR_TIME(TIME) ((TIME) <= 0xFF)
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Setup_Time 
N  * @{
N  */
N#define IS_FSMC_SETUP_TIME(TIME) ((TIME) <= 0xFF)
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Wait_Setup_Time 
N  * @{
N  */
N#define IS_FSMC_WAIT_TIME(TIME) ((TIME) <= 0xFF)
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Hold_Setup_Time 
N  * @{
N  */
N#define IS_FSMC_HOLD_TIME(TIME) ((TIME) <= 0xFF)
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_HiZ_Setup_Time 
N  * @{
N  */
N#define IS_FSMC_HIZ_TIME(TIME) ((TIME) <= 0xFF)
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Interrupt_sources 
N  * @{
N  */
N#define FSMC_IT_RisingEdge                       ((uint32_t)0x00000008)
N#define FSMC_IT_Level                            ((uint32_t)0x00000010)
N#define FSMC_IT_FallingEdge                      ((uint32_t)0x00000020)
N#define IS_FSMC_IT(IT) ((((IT) & (uint32_t)0xFFFFFFC7) == 0x00000000) && ((IT) != 0x00000000))
N#define IS_FSMC_GET_IT(IT) (((IT) == FSMC_IT_RisingEdge) || \
N                            ((IT) == FSMC_IT_Level) || \
N                            ((IT) == FSMC_IT_FallingEdge)) 
X#define IS_FSMC_GET_IT(IT) (((IT) == FSMC_IT_RisingEdge) ||                             ((IT) == FSMC_IT_Level) ||                             ((IT) == FSMC_IT_FallingEdge)) 
N/**
N  * @}
N  */
N
N/** @defgroup FSMC_Flags 
N  * @{
N  */
N#define FSMC_FLAG_RisingEdge                     ((uint32_t)0x00000001)
N#define FSMC_FLAG_Level                          ((uint32_t)0x00000002)
N#define FSMC_FLAG_FallingEdge                    ((uint32_t)0x00000004)
N#define FSMC_FLAG_FEMPT                          ((uint32_t)0x00000040)
N#define IS_FSMC_GET_FLAG(FLAG) (((FLAG) == FSMC_FLAG_RisingEdge) || \
N                                ((FLAG) == FSMC_FLAG_Level) || \
N                                ((FLAG) == FSMC_FLAG_FallingEdge) || \
N                                ((FLAG) == FSMC_FLAG_FEMPT))
X#define IS_FSMC_GET_FLAG(FLAG) (((FLAG) == FSMC_FLAG_RisingEdge) ||                                 ((FLAG) == FSMC_FLAG_Level) ||                                 ((FLAG) == FSMC_FLAG_FallingEdge) ||                                 ((FLAG) == FSMC_FLAG_FEMPT))
N
N#define IS_FSMC_CLEAR_FLAG(FLAG) ((((FLAG) & (uint32_t)0xFFFFFFF8) == 0x00000000) && ((FLAG) != 0x00000000))
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/ 
N
N/* NOR/SRAM Controller functions **********************************************/
Nvoid FSMC_NORSRAMDeInit(uint32_t FSMC_Bank);
Nvoid FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct);
Nvoid FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct);
Nvoid FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState);
N
N/* NAND Controller functions **************************************************/
Nvoid FSMC_NANDDeInit(uint32_t FSMC_Bank);
Nvoid FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct);
Nvoid FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct);
Nvoid FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState);
Nvoid FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState);
Nuint32_t FSMC_GetECC(uint32_t FSMC_Bank);
N
N/* PCCARD Controller functions ************************************************/
Nvoid FSMC_PCCARDDeInit(void);
Nvoid FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct);
Nvoid FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct);
Nvoid FSMC_PCCARDCmd(FunctionalState NewState);
N
N/* Interrupts and flags management functions **********************************/
Nvoid FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState);
NFlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG);
Nvoid FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG);
NITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT);
Nvoid FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__STM32F4xx_FSMC_H */
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */ 
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 104 "..\..\User\bsp_stm32f4xx\stm32f4xx_conf.h" 2
N#endif /* STM32F40_41xxx */
N
N/* Exported types ------------------------------------------------------------*/
N/* Exported constants --------------------------------------------------------*/
N
N/* If an external clock source is used, then the value of the following define
N   should be set to the value of the external clock source, else, if no external
N   clock is used, keep this define commented */
N/*#define I2S_EXTERNAL_CLOCK_VAL   12288000 */ /* Value of the external clock in Hz */
N
N
N/* Uncomment the line below to expanse the "assert_param" macro in the
N   Standard Peripheral Library drivers code */
N/* #define USE_FULL_ASSERT    1 */
N
N
N/*
N	用户可以选择是否使能ST固件库的断言供能。使能断言的方法有两种：
N	(1) 在C编译器的预定义宏选项中定义USE_FULL_ASSERT。
N	(2) 在本文件取消"#define USE_FULL_ASSERT    1"行的注释。
N*/
N/* 取消下面代码行的注释则固件库代码会展开assert_param宏进行断言 */
N/* #define USE_FULL_ASSERT    1 */
N
N#ifdef  USE_FULL_ASSERT
S	/*
S		assert_param宏用于函数形参检查。如果expr是false，它将调用assert_failed()函数报告发生错误的源文件
S		和行号。如果expr是true，将不执行任何操作。
S
S		assert_failed() 函数在stm32f10x_assert.c文件(这是普林芯驰建立的文件)
S	*/
S	#define assert_param(expr) ((expr) ? (void)0 : assert_failed((uint8_t *)__FILE__, __LINE__))
S
S	void assert_failed(uint8_t* file, uint32_t line);
N#else
N	#define assert_param(expr) ((void)0)
N#endif
N
N#endif /* __STM32F4xx_CONF_H */
N
N/***************************** 普林芯驰 www.spacetouch.co (END OF FILE) *********************************/
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 9115 "..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\stm32f4xx.h" 2
N#endif /* USE_STDPERIPH_DRIVER */
N
N/** @addtogroup Exported_macro
N  * @{
N  */
N
N#define SET_BIT(REG, BIT)     ((REG) |= (BIT))
N
N#define CLEAR_BIT(REG, BIT)   ((REG) &= ~(BIT))
N
N#define READ_BIT(REG, BIT)    ((REG) & (BIT))
N
N#define CLEAR_REG(REG)        ((REG) = (0x0))
N
N#define WRITE_REG(REG, VAL)   ((REG) = (VAL))
N
N#define READ_REG(REG)         ((REG))
N
N#define MODIFY_REG(REG, CLEARMASK, SETMASK)  WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))
N
N/**
N  * @}
N  */
N
N#ifdef __cplusplus
S}
N#endif /* __cplusplus */
N
N#endif /* __STM32F4xx_H */
N
N/**
N  * @}
N  */
N
N  /**
N  * @}
N  */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 41 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include <stdio.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5060044
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X#if !0L && (0L || !0L || !0L)
N/* always defined in C++ and non-strict C for consistency of debug info */
N  #ifdef __clang__
S    typedef __builtin_va_list __va_list;
N  #else
N    typedef struct __va_list __va_list;
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
N#if defined(__STRICT_ANSI__) && !__FILE_INCOMPLETE
X#if 0L && !__FILE_INCOMPLETE
Sstruct __FILE {
S    union {
S        long __FILE_alignment;
S#ifdef __TARGET_ARCH_AARCH64
S        char __FILE_size[136];
S#else /* __TARGET_ARCH_AARCH64 */
S        char __FILE_size[84];
S#endif /* __TARGET_ARCH_AARCH64 */
S    } __FILE_opaque;
S};
S    /*
S     * FILE must be an object type (C99 - 7.19.1) and an object type fully
S     * describes an object [including its static size] (C99 - 6.2.5).
S     * This definition is a placeholder which matches the struct __FILE in
S     * size and alignment as used internally by libc.
S     */
N#endif
N
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N
N#pragma __printf_args
Nextern _ARMABI int __ARM_snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int __ARM_vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
Nextern _ARMABI int __ARM_vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
N#pragma __printf_args
Nextern _ARMABI int asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N#endif
N#pragma __printf_args
Nextern _ARMABI int __ARM_asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int __ARM_vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N   /*
N    * dynamically allocates a buffer of the right size for the
N    * formatted string, and returns it in (*strp). Formal return value
N    * is the same as any other printf variant, except that it returns
N    * -1 if the buffer could not be allocated.
N    *
N    * (The functions with __ARM_ prefixed names are identical to the
N    * ones without, but are available in all compilation modes without
N    * violating user namespace.)
N    */
N
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S#if !defined(__STRICT_ANSI__)
S    using ::std::asprintf;
S    using ::std::vasprintf;
S#endif
S    using ::std::__ARM_asprintf;
S    using ::std::__ARM_vasprintf;
S    using ::std::__ARM_vsnprintf;
S    using ::std::__ARM_snprintf;
S    using ::std::__ARM_vsscanf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 42 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include <string.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060044
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
X#elif !0L
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 43 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N
N#ifndef TRUE
N	#define TRUE  1
N#endif
N
N#ifndef FALSE
N	#define FALSE 0
N#endif
N
N
Ntypedef enum
N{
N    OFF = 0,
N    ON  = !OFF,
N}on_off_t;
N
N
N#define RTC_TIMER_ID  0
N
N
N/* 通过取消注释或者添加注释的方式控制是否包含底层驱动模块 */
N#include "bsp_uart_fifo.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_uart_fifo.h" 1
N/*
N*********************************************************************************************************
N*
N*	模块名称 : 串口中断+FIFO驱动模块
N*	文件名称 : bsp_uart_fifo.h
N*	版    本 : V1.0
N*	说    明 : 头文件
N*
N*	Copyright (C), 2023-2024, 普林芯驰 www.spacetouch.co
N*
N*********************************************************************************************************
N*/
N
N#ifndef _BSP_USART_FIFO_H_
N#define _BSP_USART_FIFO_H_
N
N#define readOnly(x)	x->CR1 |= 4;	x->CR1 &= 0xFFFFFFF7;		//串口x配置为只读，CR1->RE=1, CR1->TE=0
N#define sendOnly(x)	x->CR1 |= 8;	x->CR1 &= 0xFFFFFFFB;		//串口x配置为只写，CR1->RE=0, CR1->TE=1
N
N
N/*
N	如果需要更改串口对应的管脚，请自行修改 bsp_uart_fifo.c文件中的 static void InitHardUart(void)函数
N*/
N
N 
N/*
N    普林芯驰FT_F4 串口分配：
N    【串口1】 RS232 芯片第1路。
N        PB6/USART1_TX	  --- 打印调试口
N        PB7/USART1_RX
N
N    【串口2】 PA2 管脚用于以太网； RX管脚用于接收GPS信号
N        PA2/USART2_TX/ETH_MDIO (用于以太网，不做串口发送用)
N        PA3/USART2_RX	;接GPS模块输出
N
N    【串口3】 RS485 通信 - TTL 跳线 和 排针
N        PB10/USART3_TX
N        PB11/USART3_RX
N
N    【串口4】 --- 不做串口用。
N    【串口5】 --- 不做串口用。
N
N    【串口6】--- GPRS模块 （硬件流控）
N        PC6/USART6_TX
N        PC7/USART6_RX
N        PG8/USART6_RTS
N        PG15/USART6_CTS
N*/
N#define	UART1_FIFO_EN	1
N#define	UART2_FIFO_EN	1
N#define	UART3_FIFO_EN	0
N#define	UART4_FIFO_EN	0
N#define	UART5_FIFO_EN	0
N#define	UART6_FIFO_EN	0
N
N/* RS485芯片发送使能GPIO, PB2 */
N#define RCC_RS485_TXEN 	RCC_AHB1Periph_GPIOB
N#define PORT_RS485_TXEN  GPIOB
N#define PIN_RS485_TXEN	 GPIO_Pin_2
N
N#define RS485_RX_EN()	PORT_RS485_TXEN->BSRRH = PIN_RS485_TXEN
N#define RS485_TX_EN()	PORT_RS485_TXEN->BSRRL = PIN_RS485_TXEN
N 
N
N/* 定义端口号 */
Ntypedef enum
N{
N	COM1 = 0,	/* USART1  PA9, PA10 或  PB6, PB7*/
N	COM2 = 1,	/* USART2, PD5,PD6 或 PA2, PA3 */
N	COM3 = 2,	/* USART3, PB10, PB11 */
N	COM4 = 3,	/* UART4, PC10, PC11 */
N	COM5 = 4,	/* UART5, PC12, PD2 */
N	COM6 = 5	/* USART6, PC6, PC7 */
N}COM_PORT_E;
N
N/* 定义串口波特率和FIFO缓冲区大小，分为发送缓冲区和接收缓冲区, 支持全双工 */
N#if UART1_FIFO_EN == 1
X#if 1 == 1
N	#define UART1_BAUD			115200
N	#define UART1_TX_BUF_SIZE	1*1024
N	#define UART1_RX_BUF_SIZE	1*1024
N#endif
N
N#if UART2_FIFO_EN == 1
X#if 1 == 1
N	#define UART2_BAUD			512000
N	#define UART2_TX_BUF_SIZE	4*1024
N	#define UART2_RX_BUF_SIZE	1*1024
N#endif
N
N#if UART3_FIFO_EN == 1
X#if 0 == 1
S	#define UART3_BAUD			9600
S	#define UART3_TX_BUF_SIZE	1*1024
S	#define UART3_RX_BUF_SIZE	1*1024
N#endif
N
N#if UART4_FIFO_EN == 1
X#if 0 == 1
S	#define UART4_BAUD			115200
S	#define UART4_TX_BUF_SIZE	1*1024
S	#define UART4_RX_BUF_SIZE	1*1024
N#endif
N
N#if UART5_FIFO_EN == 1
X#if 0 == 1
S	#define UART5_BAUD			115200
S	#define UART5_TX_BUF_SIZE	1*1024
S	#define UART5_RX_BUF_SIZE	1*1024
N#endif
N
N#if UART6_FIFO_EN == 1
X#if 0 == 1
S	#define UART6_BAUD			115200
S	#define UART6_TX_BUF_SIZE	1*1024
S	#define UART6_RX_BUF_SIZE	1*1024
N#endif
N
N/* 串口设备结构体 */
Ntypedef struct
N{
N	USART_TypeDef *uart;		/* STM32内部串口设备指针 */
N	uint8_t *pTxBuf;			/* 发送缓冲区 */
N	uint8_t *pRxBuf;			/* 接收缓冲区 */
N	uint16_t usTxBufSize;		/* 发送缓冲区大小 */
N	uint16_t usRxBufSize;		/* 接收缓冲区大小 */
N	uint16_t usTxWrite;			/* 发送缓冲区写指针 */
N	uint16_t usTxRead;			/* 发送缓冲区读指针 */
N	uint16_t usTxCount;			/* 等待发送的数据个数 */
N
N	uint16_t usRxWrite;			/* 接收缓冲区写指针 */
N	uint16_t usRxRead;			/* 接收缓冲区读指针 */
N	uint16_t usRxCount;			/* 还未读取的新数据个数 */
N
N	void (*SendBefor)(void); 	/* 开始发送之前的回调函数指针（主要用于RS485切换到发送模式） */
N	void (*SendOver)(void); 	/* 发送完毕的回调函数指针（主要用于RS485将发送模式切换为接收模式） */
N	void (*ReciveNew)(void);	/* 串口收到数据的回调函数指针 */
N}UART_T;
N
Nvoid bsp_InitUart(void);
Nvoid comSendBuf(COM_PORT_E _ucPort, uint8_t *_ucaBuf, uint16_t _usLen);
Nvoid comSendChar(COM_PORT_E _ucPort, uint8_t _ucByte);
Nuint8_t comGetChar(COM_PORT_E _ucPort, uint8_t *_pByte);
N
Nvoid comClearTxFifo(COM_PORT_E _ucPort);
Nvoid comClearRxFifo(COM_PORT_E _ucPort);
N
N#endif
N
N/***************************** 普林芯驰 www.spacetouch.co (END OF FILE) *********************************/
L 65 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_led.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_led.h" 1
N/*
N*********************************************************************************************************
N*
N*	模块名称 : LED指示灯驱动模块
N*	文件名称 : bsp_led.h
N*	版    本 : V1.0
N*	说    明 : 头文件
N*
N*	Copyright (C), 2023-2024, 普林芯驰 www.spacetouch.co
N*
N*********************************************************************************************************
N*/
N
N#ifndef __BSP_LED_H
N#define __BSP_LED_H
N
N/* 供外部调用的函数声明 */
Nvoid bsp_InitLed(void);
Nvoid bsp_LedOn(uint8_t _no);
Nvoid bsp_LedOff(uint8_t _no);
Nvoid bsp_LedToggle(uint8_t _no);
Nuint8_t bsp_IsLedOn(uint8_t _no);
N
N#endif
N
N/***************************** 普林芯驰 www.spacetouch.co (END OF FILE) *********************************/
L 66 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_timer.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_timer.h" 1
N/*
N*********************************************************************************************************
N*
N*	模块名称 : 定时器模块
N*	文件名称 : bsp_timer.h
N*	版    本 : V1.1
N*	说    明 : 头文件
N*
N*	Copyright (C), 2023-2024, 普林芯驰 www.spacetouch.co
N*
N*********************************************************************************************************
N*/
N
N#ifndef __BSP_TIMER_H
N#define __BSP_TIMER_H
Nextern __IO int32_t g_iRunTime;
Xextern volatile int32_t g_iRunTime;
N/*
N	在此定义若干个软件定时器全局变量
N	注意，必须增加__IO 即 volatile，因为这个变量在中断和主程序中同时被访问，有可能造成编译器错误优化。
N*/
N#define TMR_COUNT	4		/* 软件定时器的个数 （定时器ID范围 0 - 3) */
N
N/* 定时器结构体，成员变量必须是 volatile, 否则C编译器优化时可能有问题 */
Ntypedef enum
N{
N	TMR_ONCE_MODE = 0,		/* 一次工作模式 */
N	TMR_AUTO_MODE = 1		/* 自动定时工作模式 */
N}TMR_MODE_E;
N
N/* 定时器结构体，成员变量必须是 volatile, 否则C编译器优化时可能有问题 */
Ntypedef struct
N{
N	volatile uint8_t Mode;		/* 计数器模式，1次性 */
N	volatile uint8_t Flag;		/* 定时到达标志  */
N	volatile uint32_t Count;	/* 计数器 */
N	volatile uint32_t PreLoad;	/* 计数器预装值 */
N}SOFT_TMR;
N
N/* 提供给其他C文件调用的函数 */
Nvoid bsp_InitTimer(void);
Nvoid bsp_DelayMS(uint32_t n);
Nvoid bsp_DelayUS(uint32_t n);
Nvoid bsp_StartTimer(uint8_t _id, uint32_t _period);
Nvoid bsp_StartAutoTimer(uint8_t _id, uint32_t _period);
Nvoid bsp_StopTimer(uint8_t _id);
Nuint8_t bsp_CheckTimer(uint8_t _id);
Nint32_t bsp_GetRunTime(void);
N
N#endif
N
N/***************************** 普林芯驰 www.spacetouch.co (END OF FILE) *********************************/
L 67 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_iwdg.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_iwdg.h" 1
N/*
N*********************************************************************************************************
N*	                                  
N*	模块名称 : 看门狗程序头文件
N*	文件名称 : bsp_iwdg.h
N*	版    本 : V1.0
N*	说    明 : IWDG例程。
N*	修改记录 :
N*		版本号  日期         作者    说明
N*		v1.0    2012-12-12 stm32f4  ST固件库V1.0.2版本。
N*
N*	Copyright (C), 2023-2024
N*   QQ超级群：216681322
N*   BLOG: http://blog.sina.com.cn/u/2565749395
N*********************************************************************************************************
N*/
N
N#ifndef _BSP_IWDG_H
N#define _BSP_IWDG_H
N
N
N
N/** 描述    : 独立看门狗初始化*/
Nvoid bsp_InitIwdg(uint32_t _ulIWDGTime);
N
N
N/** 描述    : 喂独立看门狗*/
Nvoid IWDG_Feed(void);
N
N#endif
L 68 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N//#include "bsp_key.h"
N#include "bsp_beep.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_beep.h" 1
N/*
N*********************************************************************************************************
N*
N*	模块名称 : 蜂鸣器模块
N*	文件名称 : bsp_beep.h
N*	版    本 : V1.0
N*	说    明 : 头文件
N*
N*	Copyright (C), 2012-2013, 普林芯驰 www.spacetouch.co
N*
N*********************************************************************************************************
N*/
N
N#ifndef __BSP_BEEP_H
N#define __BSP_BEEP_H
N
Ntypedef struct _BEEP_T
N{
N	uint8_t ucEnalbe;
N	uint8_t ucState;
N	uint16_t usBeepTime;
N	uint16_t usStopTime;
N	uint16_t usCycle;
N	uint16_t usCount;
N	uint16_t usCycleCount;
N	uint8_t ucMute;		/* 1表示静音 */	
N}BEEP_T;
N
N/* 供外部调用的函数声明 */
Nvoid BEEP_InitHard(void);
Nvoid BEEP_Start(uint16_t _usBeepTime, uint16_t _usStopTime, uint16_t _usCycle);
Nvoid BEEP_Stop(void);
Nvoid BEEP_KeyTone(void);
Nvoid BEEP_Pro(void);
N
Nvoid BEEP_Pause(void);
Nvoid BEEP_Resume(void);
N
N#endif
N
N/***************************** 普林芯驰 www.spacetouch.co (END OF FILE) *********************************/
L 70 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_rtc.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_rtc.h" 1
N/*
N*********************************************************************************************************
N*
N*	模块名称 : RTC
N*	文件名称 : bsp_rtc.c
N*	版    本 : V1.0
N*	说    明 : RTC底层驱动
N*	Copyright (C), 2023-2024, 普林芯驰 www.spacetouch.co
N*
N*********************************************************************************************************
N*/
N
N#ifndef __BSP_RTC_H
N#define __BSP_RTC_H
N#include "stm32f4xx.h"
N
Nvoid RTC_TimeShow(void);
Nvoid RTC_AlarmShow(void);
Nvoid RTC_TimeRegulate(void);
Nuint8_t USART_Scanf(uint32_t value);
Nvoid RTC_DateShow(void);
Nvoid bsp_InitRTC(void);
Nvoid RTC_Config(void);
N
N#endif
N
N/***************************** 普林芯驰 www.spacetouch.co (END OF FILE) *********************************/
N
L 71 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_hp_osc.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_hp_osc.h" 1
N#ifndef __BSP_HP_OSC_H
N#define __BSP_HP_OSC_H
N
Nvoid hp_osc_init(void);
Nvoid hp_osc_deinit(void);
N
N#endif
L 72 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_adc.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_adc.h" 1
N#ifndef __ADC_H
N#define	__ADC_H
N
N#include "stm32f4xx.h"
N// 注意：用作ADC采集的IO必须没有复用，否则采集电压会有影响
N/********************ADC1输入通道（引脚）配置**************************/
N#define    ADC_x                          ADC1
N#define    ADC_APBxClock_FUN             RCC_APB2PeriphClockCmd
N#define    ADC_CLK                       RCC_APB2Periph_ADC1
N
N/********************led ADC CHECK输入通道（引脚）配置**************************/
N#define    ADC_GPIO_APBxClock_FUN        RCC_AHB1PeriphClockCmd
N#define    ADC_GPIO_CLK                  RCC_AHB1Periph_GPIOA  
N#define    ADC_PORT                      GPIOA
N
N
N#define    ADC_PIN                       GPIO_Pin_0
N#define    ADC_CHANNEL                   ADC_Channel_0
N
N/********************ADC CHECK输入通道（引脚）配置**************************/
N#define    VREF_ADC_GPIO_APBxClock_FUN        RCC_AHB1PeriphClockCmd
N#define    VREF_ADC_GPIO_CLK                  RCC_AHB1Periph_GPIOC  
N#define    VREF_ADC_PORT                      GPIOC
N
N
N#define    VREF_ADC_PIN                       GPIO_Pin_0
N#define    VREF_ADC_CHANNEL                   ADC_Channel_10
N
N
N/********************AT ADC CHECK输入通道（引脚）配置**************************/
N#define    AT_ADC_GPIO_APBxClock_FUN        RCC_AHB1PeriphClockCmd
N#define    AT_ADC_GPIO_CLK                  RCC_AHB1Periph_GPIOA  
N#define    AT_ADC_PORT                      GPIOA
N
N
N#define    AT_ADC_PIN                       GPIO_Pin_2
N#define    AT_ADC_CHANNEL                   ADC_Channel_2
N
N//extern __IO uint16_t ADC_ConvertedValue;
N//void ADCx_Init(void);
N//uint16_t  Get_ADCx_Value(void);
N
N//void vr13_ADCx_Init(void);
N//void vref_ADCx_Init(void);
N
Nvoid  adc_current_init(void);
Nvoid  scl_pu_adc(void);
Nvoid adc_scl_pu_init(void);
Nvoid VREF_PIN_Adc_Init(void);
Nvoid adc_at_init(void);
Nvoid  adc_at_deinit(void);
Nu16 Get_Adc(void);
Nu16 Get_Adc_Average(u8 ch,u8 times);
Nvoid  VREF_X_Adc_Init(void);
N#endif /* __ADC_H */
N
N
L 73 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_adc_dma.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_adc_dma.h" 1
N/*
N*********************************************************************************************************
N*
N*	模块名称 : ADC驱动模块
N*	文件名称 : bsp_adc.c
N*	版    本 : V1.0
N*	说    明 : adc头文件
N*	修改记录 :
N*		版本号    日期        作者     说明
N*		V1.0    2014-01-08   armfly   正式发布
N*
N*	Copyright (C), 2013-2014, 安富莱电子 www.armfly.com
N*
N*********************************************************************************************************
N*/
N
N#ifndef __BSP_ADC_DMA_H
N#define __BSP_ADC_DMA_H
N
N#include "stm32f4xx.h"
N
Nvoid bsp_InitADC(void);
Nfloat GetTemp(uint16_t advalue);
N
Nextern __IO uint16_t g_adc_value[];
Xextern volatile uint16_t g_adc_value[];
N
N//ADC DMA方式， ADC采样结果 g_adc_value[] 的索引号
N#define     ADC_RANK_CPP            0
N#define     ADC_RANK_AVDD_CMU       1
N#define     ADC_RANK_AMP            2
N#define     ADC_RANK_VREF           3
N#define     ADC_RANK_BGR       4
N#define     ADC_RANK_VMIC0          5
N#define     ADC_RANK_STM32_VREF     6
N#define     ADC_RANK_STM32_VBAT     7
N
N#endif
N
N/***************************** 安富莱电子 www.armfly.com (END OF FILE) *********************************/
L 74 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_dac.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_dac.h" 1
N#ifndef __BSP_DAC_H
N#define __BSP_DAC_H
N
Nvoid dac_init(void);
Nvoid dac_deinit(void);
Nvoid dac_volt_2x_set(double volt);
N    
N#endif
N
L 75 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_power_supply.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_power_supply.h" 1
N#ifndef __BSP_POWER_CTRL_H
N#define __BSP_POWER_CTRL_H	 
N#include "stm32f4xx.h" 
N//////////////////////////////////////////////////////////////////////////////////	 
N//本程序只供学习使用，未经作者许可，不得用于其它任何用途
N//ALIENTEK STM32F407开发板
N//蜂鸣器驱动代码	   
N//正点原子@ALIENTEK
N//技术论坛:www.openedv.com
N//创建日期:2014/5/3
N//版本：V1.0
N//版权所有，盗版必究。
N//Copyright(C) 广州市星翼电子科技有限公司 2014-2024
N//All rights reserved									  
N////////////////////////////////////////////////////////////////////////////////// 
N
N#define	POWER_OFF	  0
N#define	POWER_ON		1
N
Nvoid volt_out_init(void);//初始化	
Nvoid volt_out_enable(void);
Nvoid volt_out_disable(void);
Nvoid short_100R_init(void);
N
N 
N#endif
L 76 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N//#include "bsp_spi_flash.h"
N//#include "bsp_cpu_flash.h"
N#include "bsp_sdio_sd.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_sdio_sd.h" 1
N/**
N  ******************************************************************************
N  * @file    stm324xg_eval_sdio_sd.h
N  * @author  MCD Application Team
N  * @version V1.1.2
N  * @date    19-September-2013
N  * @brief   This file contains all the functions prototypes for the SD Card 
N  *          stm324xg_eval_sdio_sd driver firmware library.
N  *
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __STM324xG_EVAL_SDIO_SD_H
N#define __STM324xG_EVAL_SDIO_SD_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "stm32f4xx.h"
N	 
N
N	 
N/* 定义检测卡插入的GPIO. 普林芯驰FT_F4开发板卡插入信号为 PE2 */
N#ifdef STM32_X3
S	#define SD_DETECT_PIN                    GPIO_Pin_0
S	#define SD_DETECT_GPIO_PORT              GPIOE
S	#define SD_DETECT_GPIO_CLK               RCC_AHB1Periph_GPIOE
N#else	/* STM32_F4 */
N	#define SD_DETECT_PIN                    GPIO_Pin_7
N	#define SD_DETECT_GPIO_PORT              GPIOC
N	#define SD_DETECT_GPIO_CLK               RCC_AHB1Periph_GPIOC
N#endif
N
N#define SDIO_FIFO_ADDRESS                ((uint32_t)0x40012C80)
N/**
N  * @brief  SDIO Intialization Frequency (400KHz max)
N  */
N#define SDIO_INIT_CLK_DIV                ((uint8_t)0x76)
N/**
N  * @brief  SDIO Data Transfer Frequency (25MHz max)
N  */
N#define SDIO_TRANSFER_CLK_DIV            ((uint8_t)0x0)		/* 缺省是0， */
N
N#define SD_SDIO_DMA                   DMA2
N#define SD_SDIO_DMA_CLK               RCC_AHB1Periph_DMA2
N
N#define SD_SDIO_DMA_STREAM3	          3
N//#define SD_SDIO_DMA_STREAM6           6
N
N
N#ifdef SD_SDIO_DMA_STREAM3
N #define SD_SDIO_DMA_STREAM            DMA2_Stream3
N #define SD_SDIO_DMA_CHANNEL           DMA_Channel_4
N #define SD_SDIO_DMA_FLAG_FEIF         DMA_FLAG_FEIF3
N #define SD_SDIO_DMA_FLAG_DMEIF        DMA_FLAG_DMEIF3
N #define SD_SDIO_DMA_FLAG_TEIF         DMA_FLAG_TEIF3
N #define SD_SDIO_DMA_FLAG_HTIF         DMA_FLAG_HTIF3
N #define SD_SDIO_DMA_FLAG_TCIF         DMA_FLAG_TCIF3
N #define SD_SDIO_DMA_IRQn              DMA2_Stream3_IRQn
N #define SD_SDIO_DMA_IRQHANDLER        DMA2_Stream3_IRQHandler
N#elif defined SD_SDIO_DMA_STREAM6
X#elif 0L
S #define SD_SDIO_DMA_STREAM            DMA2_Stream6
S #define SD_SDIO_DMA_CHANNEL           DMA_Channel_4
S #define SD_SDIO_DMA_FLAG_FEIF         DMA_FLAG_FEIF6
S #define SD_SDIO_DMA_FLAG_DMEIF        DMA_FLAG_DMEIF6
S #define SD_SDIO_DMA_FLAG_TEIF         DMA_FLAG_TEIF6
S #define SD_SDIO_DMA_FLAG_HTIF         DMA_FLAG_HTIF6
S #define SD_SDIO_DMA_FLAG_TCIF         DMA_FLAG_TCIF6
S #define SD_SDIO_DMA_IRQn              DMA2_Stream6_IRQn
S #define SD_SDIO_DMA_IRQHANDLER        DMA2_Stream6_IRQHandler
N#endif /* SD_SDIO_DMA_STREAM3 */
N
N/** @addtogroup Utilities
N  * @{
N  */
N  
N/** @addtogroup STM32_EVAL
N  * @{
N  */ 
N
N/** @addtogroup STM324xG_EVAL
N  * @{
N  */
N  
N/** @addtogroup STM324xG_EVAL_SDIO_SD
N  * @{
N  */  
N
N/** @defgroup STM324xG_EVAL_SDIO_SD_Exported_Types
N  * @{
N  */ 
Ntypedef enum
N{
N/** 
N  * @brief  SDIO specific error defines  
N  */   
N  SD_CMD_CRC_FAIL                    = (1), /*!< Command response received (but CRC check failed) */
N  SD_DATA_CRC_FAIL                   = (2), /*!< Data bock sent/received (CRC check Failed) */
N  SD_CMD_RSP_TIMEOUT                 = (3), /*!< Command response timeout */
N  SD_DATA_TIMEOUT                    = (4), /*!< Data time out */
N  SD_TX_UNDERRUN                     = (5), /*!< Transmit FIFO under-run */
N  SD_RX_OVERRUN                      = (6), /*!< Receive FIFO over-run */
N  SD_START_BIT_ERR                   = (7), /*!< Start bit not detected on all data signals in widE bus mode */
N  SD_CMD_OUT_OF_RANGE                = (8), /*!< CMD's argument was out of range.*/
N  SD_ADDR_MISALIGNED                 = (9), /*!< Misaligned address */
N  SD_BLOCK_LEN_ERR                   = (10), /*!< Transferred block length is not allowed for the card or the number of transferred bytes does not match the block length */
N  SD_ERASE_SEQ_ERR                   = (11), /*!< An error in the sequence of erase command occurs.*/
N  SD_BAD_ERASE_PARAM                 = (12), /*!< An Invalid selection for erase groups */
N  SD_WRITE_PROT_VIOLATION            = (13), /*!< Attempt to program a write protect block */
N  SD_LOCK_UNLOCK_FAILED              = (14), /*!< Sequence or password error has been detected in unlock command or if there was an attempt to access a locked card */
N  SD_COM_CRC_FAILED                  = (15), /*!< CRC check of the previous command failed */
N  SD_ILLEGAL_CMD                     = (16), /*!< Command is not legal for the card state */
N  SD_CARD_ECC_FAILED                 = (17), /*!< Card internal ECC was applied but failed to correct the data */
N  SD_CC_ERROR                        = (18), /*!< Internal card controller error */
N  SD_GENERAL_UNKNOWN_ERROR           = (19), /*!< General or Unknown error */
N  SD_STREAM_READ_UNDERRUN            = (20), /*!< The card could not sustain data transfer in stream read operation. */
N  SD_STREAM_WRITE_OVERRUN            = (21), /*!< The card could not sustain data programming in stream mode */
N  SD_CID_CSD_OVERWRITE               = (22), /*!< CID/CSD overwrite error */
N  SD_WP_ERASE_SKIP                   = (23), /*!< only partial address space was erased */
N  SD_CARD_ECC_DISABLED               = (24), /*!< Command has been executed without using internal ECC */
N  SD_ERASE_RESET                     = (25), /*!< Erase sequence was cleared before executing because an out of erase sequence command was received */
N  SD_AKE_SEQ_ERROR                   = (26), /*!< Error in sequence of authentication. */
N  SD_INVALID_VOLTRANGE               = (27),
N  SD_ADDR_OUT_OF_RANGE               = (28),
N  SD_SWITCH_ERROR                    = (29),
N  SD_SDIO_DISABLED                   = (30),
N  SD_SDIO_FUNCTION_BUSY              = (31),
N  SD_SDIO_FUNCTION_FAILED            = (32),
N  SD_SDIO_UNKNOWN_FUNCTION           = (33),
N
N/** 
N  * @brief  Standard error defines   
N  */ 
N  SD_INTERNAL_ERROR, 
N  SD_NOT_CONFIGURED,
N  SD_REQUEST_PENDING, 
N  SD_REQUEST_NOT_APPLICABLE, 
N  SD_INVALID_PARAMETER,  
N  SD_UNSUPPORTED_FEATURE,  
N  SD_UNSUPPORTED_HW,  
N  SD_ERROR,  
N  SD_OK = 0 
N} SD_Error;
N
N/** 
N  * @brief  SDIO Transfer state  
N  */   
Ntypedef enum
N{
N  SD_TRANSFER_OK  = 0,
N  SD_TRANSFER_BUSY = 1,
N  SD_TRANSFER_ERROR
N} SDTransferState;
N
N/** 
N  * @brief  SD Card States 
N  */   
Ntypedef enum
N{
N  SD_CARD_READY                  = ((uint32_t)0x00000001),
N  SD_CARD_IDENTIFICATION         = ((uint32_t)0x00000002),
N  SD_CARD_STANDBY                = ((uint32_t)0x00000003),
N  SD_CARD_TRANSFER               = ((uint32_t)0x00000004),
N  SD_CARD_SENDING                = ((uint32_t)0x00000005),
N  SD_CARD_RECEIVING              = ((uint32_t)0x00000006),
N  SD_CARD_PROGRAMMING            = ((uint32_t)0x00000007),
N  SD_CARD_DISCONNECTED           = ((uint32_t)0x00000008),
N  SD_CARD_ERROR                  = ((uint32_t)0x000000FF)
N}SDCardState;
N
N
N/** 
N  * @brief  Card Specific Data: CSD Register   
N  */ 
Ntypedef struct
N{
N  __IO uint8_t  CSDStruct;            /*!< CSD structure */
X  volatile uint8_t  CSDStruct;             
N  __IO uint8_t  SysSpecVersion;       /*!< System specification version */
X  volatile uint8_t  SysSpecVersion;        
N  __IO uint8_t  Reserved1;            /*!< Reserved */
X  volatile uint8_t  Reserved1;             
N  __IO uint8_t  TAAC;                 /*!< Data read access-time 1 */
X  volatile uint8_t  TAAC;                  
N  __IO uint8_t  NSAC;                 /*!< Data read access-time 2 in CLK cycles */
X  volatile uint8_t  NSAC;                  
N  __IO uint8_t  MaxBusClkFrec;        /*!< Max. bus clock frequency */
X  volatile uint8_t  MaxBusClkFrec;         
N  __IO uint16_t CardComdClasses;      /*!< Card command classes */
X  volatile uint16_t CardComdClasses;       
N  __IO uint8_t  RdBlockLen;           /*!< Max. read data block length */
X  volatile uint8_t  RdBlockLen;            
N  __IO uint8_t  PartBlockRead;        /*!< Partial blocks for read allowed */
X  volatile uint8_t  PartBlockRead;         
N  __IO uint8_t  WrBlockMisalign;      /*!< Write block misalignment */
X  volatile uint8_t  WrBlockMisalign;       
N  __IO uint8_t  RdBlockMisalign;      /*!< Read block misalignment */
X  volatile uint8_t  RdBlockMisalign;       
N  __IO uint8_t  DSRImpl;              /*!< DSR implemented */
X  volatile uint8_t  DSRImpl;               
N  __IO uint8_t  Reserved2;            /*!< Reserved */
X  volatile uint8_t  Reserved2;             
N  __IO uint32_t DeviceSize;           /*!< Device Size */
X  volatile uint32_t DeviceSize;            
N  __IO uint8_t  MaxRdCurrentVDDMin;   /*!< Max. read current @ VDD min */
X  volatile uint8_t  MaxRdCurrentVDDMin;    
N  __IO uint8_t  MaxRdCurrentVDDMax;   /*!< Max. read current @ VDD max */
X  volatile uint8_t  MaxRdCurrentVDDMax;    
N  __IO uint8_t  MaxWrCurrentVDDMin;   /*!< Max. write current @ VDD min */
X  volatile uint8_t  MaxWrCurrentVDDMin;    
N  __IO uint8_t  MaxWrCurrentVDDMax;   /*!< Max. write current @ VDD max */
X  volatile uint8_t  MaxWrCurrentVDDMax;    
N  __IO uint8_t  DeviceSizeMul;        /*!< Device size multiplier */
X  volatile uint8_t  DeviceSizeMul;         
N  __IO uint8_t  EraseGrSize;          /*!< Erase group size */
X  volatile uint8_t  EraseGrSize;           
N  __IO uint8_t  EraseGrMul;           /*!< Erase group size multiplier */
X  volatile uint8_t  EraseGrMul;            
N  __IO uint8_t  WrProtectGrSize;      /*!< Write protect group size */
X  volatile uint8_t  WrProtectGrSize;       
N  __IO uint8_t  WrProtectGrEnable;    /*!< Write protect group enable */
X  volatile uint8_t  WrProtectGrEnable;     
N  __IO uint8_t  ManDeflECC;           /*!< Manufacturer default ECC */
X  volatile uint8_t  ManDeflECC;            
N  __IO uint8_t  WrSpeedFact;          /*!< Write speed factor */
X  volatile uint8_t  WrSpeedFact;           
N  __IO uint8_t  MaxWrBlockLen;        /*!< Max. write data block length */
X  volatile uint8_t  MaxWrBlockLen;         
N  __IO uint8_t  WriteBlockPaPartial;  /*!< Partial blocks for write allowed */
X  volatile uint8_t  WriteBlockPaPartial;   
N  __IO uint8_t  Reserved3;            /*!< Reserded */
X  volatile uint8_t  Reserved3;             
N  __IO uint8_t  ContentProtectAppli;  /*!< Content protection application */
X  volatile uint8_t  ContentProtectAppli;   
N  __IO uint8_t  FileFormatGrouop;     /*!< File format group */
X  volatile uint8_t  FileFormatGrouop;      
N  __IO uint8_t  CopyFlag;             /*!< Copy flag (OTP) */
X  volatile uint8_t  CopyFlag;              
N  __IO uint8_t  PermWrProtect;        /*!< Permanent write protection */
X  volatile uint8_t  PermWrProtect;         
N  __IO uint8_t  TempWrProtect;        /*!< Temporary write protection */
X  volatile uint8_t  TempWrProtect;         
N  __IO uint8_t  FileFormat;           /*!< File Format */
X  volatile uint8_t  FileFormat;            
N  __IO uint8_t  ECC;                  /*!< ECC code */
X  volatile uint8_t  ECC;                   
N  __IO uint8_t  CSD_CRC;              /*!< CSD CRC */
X  volatile uint8_t  CSD_CRC;               
N  __IO uint8_t  Reserved4;            /*!< always 1*/
X  volatile uint8_t  Reserved4;             
N} SD_CSD;
N
N/** 
N  * @brief  Card Identification Data: CID Register   
N  */
Ntypedef struct
N{
N  __IO uint8_t  ManufacturerID;       /*!< ManufacturerID */
X  volatile uint8_t  ManufacturerID;        
N  __IO uint16_t OEM_AppliID;          /*!< OEM/Application ID */
X  volatile uint16_t OEM_AppliID;           
N  __IO uint32_t ProdName1;            /*!< Product Name part1 */
X  volatile uint32_t ProdName1;             
N  __IO uint8_t  ProdName2;            /*!< Product Name part2*/
X  volatile uint8_t  ProdName2;             
N  __IO uint8_t  ProdRev;              /*!< Product Revision */
X  volatile uint8_t  ProdRev;               
N  __IO uint32_t ProdSN;               /*!< Product Serial Number */
X  volatile uint32_t ProdSN;                
N  __IO uint8_t  Reserved1;            /*!< Reserved1 */
X  volatile uint8_t  Reserved1;             
N  __IO uint16_t ManufactDate;         /*!< Manufacturing Date */
X  volatile uint16_t ManufactDate;          
N  __IO uint8_t  CID_CRC;              /*!< CID CRC */
X  volatile uint8_t  CID_CRC;               
N  __IO uint8_t  Reserved2;            /*!< always 1 */
X  volatile uint8_t  Reserved2;             
N} SD_CID;
N
N/** 
N  * @brief SD Card Status 
N  */
Ntypedef struct
N{
N  __IO uint8_t DAT_BUS_WIDTH;
X  volatile uint8_t DAT_BUS_WIDTH;
N  __IO uint8_t SECURED_MODE;
X  volatile uint8_t SECURED_MODE;
N  __IO uint16_t SD_CARD_TYPE;
X  volatile uint16_t SD_CARD_TYPE;
N  __IO uint32_t SIZE_OF_PROTECTED_AREA;
X  volatile uint32_t SIZE_OF_PROTECTED_AREA;
N  __IO uint8_t SPEED_CLASS;
X  volatile uint8_t SPEED_CLASS;
N  __IO uint8_t PERFORMANCE_MOVE;
X  volatile uint8_t PERFORMANCE_MOVE;
N  __IO uint8_t AU_SIZE;
X  volatile uint8_t AU_SIZE;
N  __IO uint16_t ERASE_SIZE;
X  volatile uint16_t ERASE_SIZE;
N  __IO uint8_t ERASE_TIMEOUT;
X  volatile uint8_t ERASE_TIMEOUT;
N  __IO uint8_t ERASE_OFFSET;
X  volatile uint8_t ERASE_OFFSET;
N} SD_CardStatus;
N
N
N/** 
N  * @brief SD Card information 
N  */
Ntypedef struct
N{
N  SD_CSD SD_csd;
N  SD_CID SD_cid;
N  uint64_t CardCapacity;  /*!< Card Capacity */
N  uint32_t CardBlockSize; /*!< Card Block Size */
N  uint16_t RCA;
N  uint8_t CardType;
N} SD_CardInfo;
N
Nextern SD_CardInfo SDCardInfo;	  /* 供其它外部文件调用 */
N/**
N  * @}
N  */
N  
N/** @defgroup STM324xG_EVAL_SDIO_SD_Exported_Constants
N  * @{
N  */ 
N
N/** 
N  * @brief SDIO Commands  Index 
N  */
N#define SD_CMD_GO_IDLE_STATE                       ((uint8_t)0)
N#define SD_CMD_SEND_OP_COND                        ((uint8_t)1)
N#define SD_CMD_ALL_SEND_CID                        ((uint8_t)2)
N#define SD_CMD_SET_REL_ADDR                        ((uint8_t)3) /*!< SDIO_SEND_REL_ADDR for SD Card */
N#define SD_CMD_SET_DSR                             ((uint8_t)4)
N#define SD_CMD_SDIO_SEN_OP_COND                    ((uint8_t)5)
N#define SD_CMD_HS_SWITCH                           ((uint8_t)6)
N#define SD_CMD_SEL_DESEL_CARD                      ((uint8_t)7)
N#define SD_CMD_HS_SEND_EXT_CSD                     ((uint8_t)8)
N#define SD_CMD_SEND_CSD                            ((uint8_t)9)
N#define SD_CMD_SEND_CID                            ((uint8_t)10)
N#define SD_CMD_READ_DAT_UNTIL_STOP                 ((uint8_t)11) /*!< SD Card doesn't support it */
N#define SD_CMD_STOP_TRANSMISSION                   ((uint8_t)12)
N#define SD_CMD_SEND_STATUS                         ((uint8_t)13)
N#define SD_CMD_HS_BUSTEST_READ                     ((uint8_t)14)
N#define SD_CMD_GO_INACTIVE_STATE                   ((uint8_t)15)
N#define SD_CMD_SET_BLOCKLEN                        ((uint8_t)16)
N#define SD_CMD_READ_SINGLE_BLOCK                   ((uint8_t)17)
N#define SD_CMD_READ_MULT_BLOCK                     ((uint8_t)18)
N#define SD_CMD_HS_BUSTEST_WRITE                    ((uint8_t)19)
N#define SD_CMD_WRITE_DAT_UNTIL_STOP                ((uint8_t)20) /*!< SD Card doesn't support it */
N#define SD_CMD_SET_BLOCK_COUNT                     ((uint8_t)23) /*!< SD Card doesn't support it */
N#define SD_CMD_WRITE_SINGLE_BLOCK                  ((uint8_t)24)
N#define SD_CMD_WRITE_MULT_BLOCK                    ((uint8_t)25)
N#define SD_CMD_PROG_CID                            ((uint8_t)26) /*!< reserved for manufacturers */
N#define SD_CMD_PROG_CSD                            ((uint8_t)27)
N#define SD_CMD_SET_WRITE_PROT                      ((uint8_t)28)
N#define SD_CMD_CLR_WRITE_PROT                      ((uint8_t)29)
N#define SD_CMD_SEND_WRITE_PROT                     ((uint8_t)30)
N#define SD_CMD_SD_ERASE_GRP_START                  ((uint8_t)32) /*!< To set the address of the first write
N                                                                  block to be erased. (For SD card only) */
N#define SD_CMD_SD_ERASE_GRP_END                    ((uint8_t)33) /*!< To set the address of the last write block of the
N                                                                  continuous range to be erased. (For SD card only) */
N#define SD_CMD_ERASE_GRP_START                     ((uint8_t)35) /*!< To set the address of the first write block to be erased.
N                                                                  (For MMC card only spec 3.31) */
N
N#define SD_CMD_ERASE_GRP_END                       ((uint8_t)36) /*!< To set the address of the last write block of the
N                                                                  continuous range to be erased. (For MMC card only spec 3.31) */
N
N#define SD_CMD_ERASE                               ((uint8_t)38)
N#define SD_CMD_FAST_IO                             ((uint8_t)39) /*!< SD Card doesn't support it */
N#define SD_CMD_GO_IRQ_STATE                        ((uint8_t)40) /*!< SD Card doesn't support it */
N#define SD_CMD_LOCK_UNLOCK                         ((uint8_t)42)
N#define SD_CMD_APP_CMD                             ((uint8_t)55)
N#define SD_CMD_GEN_CMD                             ((uint8_t)56)
N#define SD_CMD_NO_CMD                              ((uint8_t)64)
N
N/** 
N  * @brief Following commands are SD Card Specific commands.
N  *        SDIO_APP_CMD should be sent before sending these commands. 
N  */
N#define SD_CMD_APP_SD_SET_BUSWIDTH                 ((uint8_t)6)  /*!< For SD Card only */
N#define SD_CMD_SD_APP_STAUS                        ((uint8_t)13) /*!< For SD Card only */
N#define SD_CMD_SD_APP_SEND_NUM_WRITE_BLOCKS        ((uint8_t)22) /*!< For SD Card only */
N#define SD_CMD_SD_APP_OP_COND                      ((uint8_t)41) /*!< For SD Card only */
N#define SD_CMD_SD_APP_SET_CLR_CARD_DETECT          ((uint8_t)42) /*!< For SD Card only */
N#define SD_CMD_SD_APP_SEND_SCR                     ((uint8_t)51) /*!< For SD Card only */
N#define SD_CMD_SDIO_RW_DIRECT                      ((uint8_t)52) /*!< For SD I/O Card only */
N#define SD_CMD_SDIO_RW_EXTENDED                    ((uint8_t)53) /*!< For SD I/O Card only */
N
N/** 
N  * @brief Following commands are SD Card Specific security commands.
N  *        SDIO_APP_CMD should be sent before sending these commands. 
N  */
N#define SD_CMD_SD_APP_GET_MKB                      ((uint8_t)43) /*!< For SD Card only */
N#define SD_CMD_SD_APP_GET_MID                      ((uint8_t)44) /*!< For SD Card only */
N#define SD_CMD_SD_APP_SET_CER_RN1                  ((uint8_t)45) /*!< For SD Card only */
N#define SD_CMD_SD_APP_GET_CER_RN2                  ((uint8_t)46) /*!< For SD Card only */
N#define SD_CMD_SD_APP_SET_CER_RES2                 ((uint8_t)47) /*!< For SD Card only */
N#define SD_CMD_SD_APP_GET_CER_RES1                 ((uint8_t)48) /*!< For SD Card only */
N#define SD_CMD_SD_APP_SECURE_READ_MULTIPLE_BLOCK   ((uint8_t)18) /*!< For SD Card only */
N#define SD_CMD_SD_APP_SECURE_WRITE_MULTIPLE_BLOCK  ((uint8_t)25) /*!< For SD Card only */
N#define SD_CMD_SD_APP_SECURE_ERASE                 ((uint8_t)38) /*!< For SD Card only */
N#define SD_CMD_SD_APP_CHANGE_SECURE_AREA           ((uint8_t)49) /*!< For SD Card only */
N#define SD_CMD_SD_APP_SECURE_WRITE_MKB             ((uint8_t)48) /*!< For SD Card only */
N  
N/* Uncomment the following line to select the SDIO Data transfer mode */  
N#if !defined (SD_DMA_MODE) && !defined (SD_POLLING_MODE)
X#if !0L && !0L
N#define SD_DMA_MODE                                ((uint32_t)0x00000000)
N/*#define SD_POLLING_MODE                            ((uint32_t)0x00000002)*/
N#endif
N
N/**
N  * @brief  SD detection on its memory slot
N  */
N#define SD_PRESENT                                 ((uint8_t)0x01)
N#define SD_NOT_PRESENT                             ((uint8_t)0x00)
N
N/** 
N  * @brief Supported SD Memory Cards 
N  */
N#define SDIO_STD_CAPACITY_SD_CARD_V1_1             ((uint32_t)0x00000000)
N#define SDIO_STD_CAPACITY_SD_CARD_V2_0             ((uint32_t)0x00000001)
N#define SDIO_HIGH_CAPACITY_SD_CARD                 ((uint32_t)0x00000002)
N#define SDIO_MULTIMEDIA_CARD                       ((uint32_t)0x00000003)
N#define SDIO_SECURE_DIGITAL_IO_CARD                ((uint32_t)0x00000004)
N#define SDIO_HIGH_SPEED_MULTIMEDIA_CARD            ((uint32_t)0x00000005)
N#define SDIO_SECURE_DIGITAL_IO_COMBO_CARD          ((uint32_t)0x00000006)
N#define SDIO_HIGH_CAPACITY_MMC_CARD                ((uint32_t)0x00000007)
N
N/**
N  * @}
N  */ 
N  
N/** @defgroup STM324xG_EVAL_SDIO_SD_Exported_Macros
N  * @{
N  */ 
N/**
N  * @}
N  */ 
N
N/** @defgroup STM324xG_EVAL_SDIO_SD_Exported_Functions
N  * @{
N  */ 
Nvoid SD_DeInit(void);
NSD_Error SD_Init(void);
NSDTransferState SD_GetStatus(void);
NSDCardState SD_GetState(void);
Nuint8_t SD_Detect(void);
NSD_Error SD_PowerON(void);
NSD_Error SD_PowerOFF(void);
NSD_Error SD_InitializeCards(void);
NSD_Error SD_GetCardInfo(SD_CardInfo *cardinfo);
NSD_Error SD_GetCardStatus(SD_CardStatus *cardstatus);
NSD_Error SD_EnableWideBusOperation(uint32_t WideMode);
NSD_Error SD_SelectDeselect(uint64_t addr);
NSD_Error SD_ReadBlock(uint8_t *readbuff, uint64_t ReadAddr, uint16_t BlockSize);
NSD_Error SD_ReadMultiBlocks(uint8_t *readbuff, uint64_t ReadAddr, uint16_t BlockSize, uint32_t NumberOfBlocks);
NSD_Error SD_WriteBlock(uint8_t *writebuff, uint64_t WriteAddr, uint16_t BlockSize);
NSD_Error SD_WriteMultiBlocks(uint8_t *writebuff, uint64_t WriteAddr, uint16_t BlockSize, uint32_t NumberOfBlocks);
NSDTransferState SD_GetTransferState(void);
NSD_Error SD_StopTransfer(void);
NSD_Error SD_Erase(uint64_t startaddr, uint64_t endaddr);
NSD_Error SD_SendStatus(uint32_t *pcardstatus);
NSD_Error SD_SendSDStatus(uint32_t *psdstatus);
NSD_Error SD_ProcessIRQSrc(void);
Nvoid SD_ProcessDMAIRQ(void);
NSD_Error SD_WaitReadOperation(void);
NSD_Error SD_WaitWriteOperation(void);
NSD_Error SD_HighSpeed(void);
N
N/*********************************/
Nvoid SD_LowLevel_DeInit(void);
Nvoid SD_LowLevel_Init(void);
Nvoid SD_LowLevel_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize);
Nvoid SD_LowLevel_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize);
Nvoid SDIO_Interrupts_Config(void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __STM324xG_EVAL_SDIO_SD_H */
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 79 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_spi_bus.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_spi_bus.h" 1
N/*
N*********************************************************************************************************
N*
N*	模块名称 : SPI总线驱动
N*	文件名称 : bsp_spi_bus.h
N*	版    本 : V1.0
N*	说    明 : 头文件
N*
N*	Copyright (C), 2014-2015, 普林芯驰 www.spacetouch.co
N*
N*********************************************************************************************************
N*/
N
N#ifndef __BSP_SPI_BUS_H
N#define __BSP_SPI_BUS_H
N
N#define SOFT_SPI		/* 定义此行表示使用GPIO模拟SPI接口 */
N//#define HARD_SPI		/* 定义此行表示使用CPU的硬件SPI接口 */
N
N/*
N	【SPI时钟最快是2分频，不支持不分频】
N	如果是SPI1，2分频时SCK时钟 = 42M，4分频时SCK时钟 = 21M
N	如果是SPI3, 2分频时SCK时钟 = 21M
N*/
N#define SPI_SPEED_42M		SPI_BaudRatePrescaler_2
N#define SPI_SPEED_21M		SPI_BaudRatePrescaler_4
N#define SPI_SPEED_5_2M		SPI_BaudRatePrescaler_8
N#define SPI_SPEED_2_6M		SPI_BaudRatePrescaler_16
N#define SPI_SPEED_1_3M		SPI_BaudRatePrescaler_32
N#define SPI_SPEED_0_6M		SPI_BaudRatePrescaler_64
N
Nvoid bsp_InitSPIBus(void);
N
Nvoid bsp_spiWrite0(uint8_t _ucByte);
Nuint8_t bsp_spiRead0(void);
N
Nvoid bsp_spiWrite1(uint8_t _ucByte);
Nuint8_t bsp_spiRead1(void);
N
Nuint8_t bsp_SpiBusBusy(void);
N
Nvoid bsp_SPI_Init(uint16_t _cr1);
N
Nvoid bsp_SpiBusEnter(void);
Nvoid bsp_SpiBusExit(void);
Nuint8_t bsp_SpiBusBusy(void);
Nvoid bsp_SetSpiSck(uint8_t _data);
N
N#endif
N
N/***************************** 普林芯驰 www.spacetouch.co (END OF FILE) *********************************/
L 80 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_spi_bus_asu.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_spi_bus_asu.h" 1
N/*
N*********************************************************************************************************
N*
N*	模块名称 : SPI总线驱动
N*	文件名称 : bsp_spi_bus.h
N*	版    本 : V1.0
N*	说    明 : 头文件
N*
N*	Copyright (C), 2014-2015, 普林芯驰 www.spacetouch.co
N*
N*********************************************************************************************************
N*/
N
N#ifndef __BSP_SPI_BUS_ASU_H
N#define __BSP_SPI_BUS_ASU_H
N
N#define SOFT_SPI_ASU		/* 定义此行表示使用GPIO模拟SPI接口 */
N//#define HARD_SPI		/* 定义此行表示使用CPU的硬件SPI接口 */
N
N/*
N	【SPI时钟最快是2分频，不支持不分频】
N	如果是SPI1，2分频时SCK时钟 = 42M，4分频时SCK时钟 = 21M
N	如果是SPI3, 2分频时SCK时钟 = 21M
N*/
N#define SPI_SPEED_42M		SPI_BaudRatePrescaler_2
N#define SPI_SPEED_21M		SPI_BaudRatePrescaler_4
N#define SPI_SPEED_5_2M		SPI_BaudRatePrescaler_8
N#define SPI_SPEED_2_6M		SPI_BaudRatePrescaler_16
N#define SPI_SPEED_1_3M		SPI_BaudRatePrescaler_32
N#define SPI_SPEED_0_6M		SPI_BaudRatePrescaler_64
N
Nvoid bsp_asu_init(void);
Nvoid bsp_asu_deinit(void);
N
Nuint8_t bsp_spiWrite0_ASU(uint8_t _ucByte);
Nuint8_t bsp_spiRead0_ASU(void);
N
Nvoid bsp_spiWrite1_ASU(uint8_t _ucByte);
Nuint8_t bsp_spiRead1_ASU(void);
N
Nuint8_t bsp_SpiBusBusy_asu(void);
N
Nvoid bsp_SPI_Init_ASU(uint16_t _cr1);
N
Nvoid bsp_SpiBusEnter_ASU(void);
Nvoid bsp_SpiBusExit_ASU(void);
Nuint8_t bsp_SpiBusBusy_ASU(void);
Nvoid bsp_SetSpiSck_ASU(uint8_t _data);
N
N#endif
N
N/***************************** 普林芯驰 www.spacetouch.co (END OF FILE) *********************************/
L 81 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_spi_flash.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_spi_flash.h" 1
N/*
N*********************************************************************************************************
N*
N*	模块名称 : SPI接口串行FLASH 读写模块
N*	文件名称 : bsp_spi_flash.h
N*	版    本 : V1.0
N*	说    明 : 头文件
N*
N*	Copyright (C), 2023-2024, 普林芯驰 www.spacetouch.co
N*
N*********************************************************************************************************
N*/
N
N#ifndef _BSP_SPI_FLASH_H
N#define _BSP_SPI_FLASH_H
N
N#define SF_MAX_PAGE_SIZE	(4 * 1024)
N
N/* 定义串行Flash ID */
Nenum
N{
N    UC25HD20_ID    = 0xB36012,
N	SST25VF016B_ID = 0xBF2541,
N	MX25L1606E_ID  = 0xC22015,
N	W25Q64_ID    = 0xEF4017,
N	W25Q128_ID   = 0xEF4018,
N    P25Q32H_ID   = 0x856016
N};
N
Ntypedef struct
N{
N	uint32_t ChipID;		/* 芯片ID */
N	char ChipName[16];		/* 芯片型号字符串，主要用于显示 */
N	uint32_t TotalSize;		/* 总容量 */
N	uint16_t SectorSize;		/* 页面大小 */
N}SFLASH_T;
N
Nvoid bsp_InitSFlash(void);
Nuint32_t sf_ReadID(void);
Nvoid sf_EraseChip(void);
Nvoid sf_EraseSector(uint32_t _uiSectorAddr);
Nvoid sf_PageWrite(uint8_t * _pBuf, uint32_t _uiWriteAddr, uint16_t _usSize);
Nuint8_t sf_WriteBuffer(uint8_t* _pBuf, uint32_t _uiWriteAddr, uint16_t _usWriteSize);
Nvoid sf_ReadBuffer(uint8_t * _pBuf, uint32_t _uiReadAddr, uint32_t _uiSize);
Nvoid sf_ReadInfo(void);
N
Nextern SFLASH_T g_tSF;
N
N#endif
N
N/***************************** 普林芯驰 www.spacetouch.co (END OF FILE) *********************************/
L 82 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_lcd_st7789.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_lcd_st7789.h" 1
N#ifndef __BSP_LCD_ST7789_H__
N#define __BSP_LCD_ST7789_H__
N
N#include "stdbool.h"
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdbool.h" 1
N/* stdbool.h: ISO/IEC 9899:1999 (C99), section 7.16 */
N
N/* Copyright (C) ARM Ltd., 2002
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N#ifndef __bool_true_false_are_defined
N#define __bool_true_false_are_defined 1
N#define __ARMCLIB_VERSION 5060044
N
N  #ifndef __cplusplus /* In C++, 'bool', 'true' and 'false' and keywords */
N    #define bool _Bool
N    #define true 1
N    #define false 0
N  #else
S    #ifdef __GNUC__
S      /* GNU C++ supports direct inclusion of stdbool.h to provide C99
S         compatibility by defining _Bool */
S      #define _Bool bool
S    #endif
N  #endif
N
N#endif /* __bool_true_false_are_defined */
N
L 5 "..\..\User\bsp_stm32f4xx\inc\bsp_lcd_st7789.h" 2
N
N#define BSP_LCD_WIDTH       240
N#define BSP_LCD_HEIGHT      320
N
N//画笔颜色
N#define WHITE               0xFFFF
N#define BLACK         	    0x0000	  
N#define BLUE           	    0x001F  
N#define BRED                0xF81F
N#define GRED                0xFFE0
N#define GBLUE               0x07FF
N#define RED           	    0xF800
N#define MAGENTA       	    0xF81F
N#define GREEN         	    0x07E0
N#define CYAN          	    0x7FFF
N#define YELLOW        	    0xFFE0
N#define BROWN 			    0xBC40 //棕色
N#define BRRED 			    0xFC07 //棕红色
N#define GRAY  			    0x8430 //灰色
N#define DARKBLUE      	    0x01CF	//深蓝色
N#define LIGHTBLUE      	    0x7D7C	//浅蓝色  
N#define GRAYBLUE       	    0x5458 //灰蓝色
N#define LIGHTGREEN     	    0x841F //浅绿色
N#define LGRAY 			    0xC618 //浅灰色(PANNEL),窗体背景色
N#define LGRAYBLUE           0xA651 //浅灰蓝色(中间层颜色)
N#define LBBLUE              0x2B12 //浅棕蓝色(选择条目的反色)
N
N/*
N * 函数名：bsp_lcd_init
N * 描述  ：LCD显示初始化
N * 输入  ：void
N * 输出  ：void
N */
Nvoid bsp_lcd_init(void);
N
N/*
N * 函数名：bsp_lcd_send_data
N * 描述  ：LCD发送数据
N * 输入  ：uint8_t *send_data       需要发送的显示数据
N *         uint16_t data_len     显示数据长度
N * 输出  ：void
N */
Nbool bsp_lcd_send_data(uint8_t *send_data, uint16_t data_len);
X_Bool bsp_lcd_send_data(uint8_t *send_data, uint16_t data_len);
N
N/*
N * 函数名：bsp_lcd_send_cmd
N * 描述  ：LCD发送命令
N * 输入  ：uint8_t *send_cmd       需要发送的命令数据
N *         uint16_t cmd_len     命令数据长度
N * 输出  ：void
N */
Nbool bsp_lcd_send_cmd(uint8_t *send_cmd, uint16_t cmd_len);
X_Bool bsp_lcd_send_cmd(uint8_t *send_cmd, uint16_t cmd_len);
N
N#endif
N
L 83 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_i2c_gpio.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_i2c_gpio.h" 1
N/*
N*********************************************************************************************************
N*
N*	模块名称 : I2C总线驱动模块
N*	文件名称 : bsp_i2c_gpio.h
N*	版    本 : V1.0
N*	说    明 : 头文件。
N*
N*	Copyright (C), 2012-2013, 普林芯驰 www.spacetouch.co
N*
N*********************************************************************************************************
N*/
N
N#ifndef _BSP_I2C_GPIO_H
N#define _BSP_I2C_GPIO_H
N
N#define I2C_WR	0		/* 写控制bit */
N#define I2C_RD	1		/* 读控制bit */
N
Nvoid bsp_InitI2C(void);
Nvoid i2c_Start(void);
Nvoid i2c_Stop(void);
Nvoid i2c_SendByte(uint8_t _ucByte);
Nuint8_t i2c_ReadByte(void);
Nuint8_t i2c_WaitAck(void);
Nvoid i2c_Ack(void);
Nvoid i2c_NAck(void);
Nuint8_t i2c_CheckDevice(uint8_t _Address);
N
N#endif
L 84 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_ch440r.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_ch440r.h" 1
N#ifndef __BSP_CH440R_H
N#define __BSP_CH440R_H
N
N
Nvoid bsp_ch440r_init(void);
Nvoid bsp_ch440r_ctrl(uint8_t ctrl);
N
N#endif
L 85 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_ch440r_ex.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_ch440r_ex.h" 1
N#ifndef __BSP_CH440R_EX_H
N#define __BSP_CH440R_EX_H
N
N
N#define CH440R_EX_CTRL_ALL_DETACH    1<<0
N#define CH440R_EX_CTRL_I2C           1<<1
N#define CH440R_EX_CTRL_IO_S1         1<<2
N#define CH440R_EX_CTRL_UART          1<<3
N#define CH440R_EX_CTRL_IO_S2         1<<4
N#define CH440R_EX_CTRL_UC_DETACH     1<<5
N#define CH440R_EX_CTRL_IOTEST_DETACH 1<<6
N
N
N
Nvoid bsp_ch440r_init_ex(void);
Nvoid bsp_ch440r_ctrl_ex(uint8_t ctrl);
N
N#endif
L 86 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N
N
N#include "bsp_eeprom_24xx.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_eeprom_24xx.h" 1
N/*
N*********************************************************************************************************
N*
N*	模块名称 : 串行EEPROM 24xx02驱动模块
N*	文件名称 : bsp_eeprom_24xx.h
N*	版    本 : V1.0
N*	说    明 : 头文件
N*
N*	修改记录 :
N*		版本号  日期       作者    说明
N*		v1.0    2012-10-12 plxc  ST固件库版本 V2.1.0
N*
N*	Copyright (C), 2012-2013, 普林芯驰 www.spacetouch.co
N*
N*********************************************************************************************************
N*/
N
N#ifndef _BSP_EEPROM_24XX_H
N#define _BSP_EEPROM_24XX_H
N
N#define AT24C02
N//#define AT24C128
N
N#ifdef AT24C02
N	#define EE_MODEL_NAME		"AT24C02"
N	#define EE_DEV_ADDR			0xA0		/* 设备地址 */
N	#define EE_PAGE_SIZE		8			/* 页面大小(字节) */
N	#define EE_SIZE				256			/* 总容量(字节) */
N	#define EE_ADDR_BYTES		1			/* 地址字节个数 */
N#endif
N
N#ifdef AT24C128
S	#define EE_MODEL_NAME		"AT24C128"
S	#define EE_DEV_ADDR			0xA0		/* 设备地址 */
S	#define EE_PAGE_SIZE		64			/* 页面大小(字节) */
S	#define EE_SIZE				(16*1024)	/* 总容量(字节) */
S	#define EE_ADDR_BYTES		2			/* 地址字节个数 */
N#endif
N
Nuint8_t ee_CheckOk(void);
Nuint8_t ee_ReadBytes(uint8_t *_pReadBuf, uint16_t _usAddress, uint16_t _usSize);
Nuint8_t ee_WriteBytes(uint8_t *_pWriteBuf, uint16_t _usAddress, uint16_t _usSize);
N
N#endif
N
N/***************************** 普林芯驰 www.spacetouch.co (END OF FILE) *********************************/
L 89 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_timer_capture.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_timer_capture.h" 1
N#ifndef __BSP_TIMER_CAPTURE_H
N#define __BSP_TIMER_CAPTURE_H
N
Nvoid pwm_measure_start(void);
Nvoid pwm_measure_reset(void);
Nu32 pwm_measure_stop(void);
N    
Nvoid tick_init(void);
Nvoid set_tick(u32 us);
Nvoid wait_tick(void);
Nvoid reset_tick(void);
N
Nvoid tos_sem_create(uint32_t *var, uint32_t val);
Nvoid tos_knl_sched_lock(void);
Nvoid tos_knl_sched_unlock(void);
N
N#endif
L 90 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_prog_robot_comm.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_prog_robot_comm.h" 1
N#ifndef __BSP_ROBOT_UI_H
N#define __BSP_ROBOT_UI_H
N
N//回应机台
Ntypedef enum
N{
N    ROBOT_ACK_IDLE = 0,
N    ROBOT_ACK_BUSY,
N    ROBOT_ACK_PASS,
N    ROBOT_ACK_FAIL
N    
N}robot_ack_t;
N
Nvoid robot_com_init(void);
Nvoid ack_to_robot(robot_ack_t ack_status);
N
N#endif
L 91 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N#include "bsp_socket.h"
L 1 "..\..\User\bsp_stm32f4xx\inc\bsp_socket.h" 1
N#ifndef __BSP_SOCKET_H
N#define __BSP_SOCKET_H
N
Nvoid bsp_kiwi_ft_init(void);
Nvoid bsp_kiwi_relay_init(void);
Nvoid bsp_kiwi_onoff_init(void);
Nvoid bsp_kiwi_onoff_deinit(void);
Nvoid bsp_kiwi_ft_relay_on(void);
Nvoid bsp_kiwi_ft_relay_off(void);
Nvoid bsp_kiwi_onoff_hi(void);
Nvoid bsp_kiwi_onoff_lo(void);
N
N#endif
L 92 "..\..\User\bsp_stm32f4xx\bsp.h" 2
N
N
N//#include "bsp_si4730.h"
N//#include "bsp_hmc5883l.h"
N//#include "bsp_mpu6050.h"
N//#include "bsp_bh1750.h"
N//#include "bsp_bmp085.h"
N//#include "bsp_wm8978.h"
N//#include "bsp_fsmc_sram.h"
N//#include "bsp_nand_flash.h"
N//#include "bsp_nor_flash.h"
N//#include "LCD_RA8875.h"
N//#include "LCD_SPFD5420.h"
N//#include "bsp_touch.h"
N//#include "bsp_camera.h"
N//#include "bsp_ad7606.h"
N//#include "bsp_gps.h"
N//#include "bsp_oled.h"
N//#include "bsp_mg323.h"
N
N/* 提供给其他C文件调用的函数 */
Nvoid bsp_Init(void);
Nvoid bsp_Idle(void);
N
N#endif
N
N/***************************** 普林芯驰 www.spacetouch.co (END OF FILE) *********************************/
L 6 "..\..\User\kiwi_ft\__kiwi_ft_common.h" 2
N#include "debug.h"
L 1 "..\..\User\debug.h" 1
N#ifndef __DEBUG_H
N#define __DEBUG_H
N#include <stdarg.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdarg.h" 1
N/* stdarg.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.8 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright (C) ARM Ltd., 1991-1999. All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdarg_h
N#define __stdarg_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifndef __STDARG_DECLS
N  #define __STDARG_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N/*
N * stdarg.h declares a type and defines macros for advancing through a
N * list of arguments whose number and types are not known to the called
N * function when it is translated. A function may be called with a variable
N * number of arguments of differing types. Its parameter list contains one or
N * more parameters. The rightmost parameter plays a special role in the access
N * mechanism, and will be called parmN in this description.
N */
N
N/* N.B. <stdio.h> is required to declare vfprintf() without defining      */
N/* va_list.  Clearly the type __va_list there must keep in step.          */
N#ifdef __clang__
S  typedef __builtin_va_list va_list;
S  #define va_start(ap, param) __builtin_va_start(ap, param)
S  #define va_end(ap)          __builtin_va_end(ap)
S  #define va_arg(ap, type)    __builtin_va_arg(ap, type)
S  #if __STDC_VERSION__ >= 199900L || __cplusplus >= 201103L || !defined(__STRICT_ANSI__)
S  #define va_copy(dest, src)  __builtin_va_copy(dest, src)
S  #endif
N#else
N  #ifdef __TARGET_ARCH_AARCH64
S    typedef struct __va_list {
S      void *__stack;
S      void *__gr_top;
S      void *__vr_top;
S      int __gr_offs;
S      int __vr_offs;
S    } va_list;
N  #else
N    typedef struct __va_list { void *__ap; } va_list;
N  #endif
N   /*
N    * an array type suitable for holding information needed by the macro va_arg
N    * and the function va_end. The called function shall declare a variable
N    * (referred to as ap) having type va_list. The variable ap may be passed as
N    * an argument to another function.
N    * Note: va_list is an array type so that when an object of that type
N    * is passed as an argument it gets passed by reference.
N    */
N  #define va_start(ap, parmN) __va_start(ap, parmN)
N
N   /*
N    * The va_start macro shall be executed before any access to the unnamed
N    * arguments. The parameter ap points to an object that has type va_list.
N    * The va_start macro initialises ap for subsequent use by va_arg and
N    * va_end. The parameter parmN is the identifier of the rightmost parameter
N    * in the variable parameter list in the function definition (the one just
N    * before the '...'). If the parameter parmN is declared with the register
N    * storage class an error is given.
N    * If parmN is a narrow type (char, short, float) an error is given in
N    * strict ANSI mode, or a warning otherwise.
N    * Returns: no value.
N    */
N  #define va_arg(ap, type) __va_arg(ap, type)
N
N   /*
N    * The va_arg macro expands to an expression that has the type and value of
N    * the next argument in the call. The parameter ap shall be the same as the
N    * va_list ap initialised by va_start. Each invocation of va_arg modifies
N    * ap so that successive arguments are returned in turn. The parameter
N    * 'type' is a type name such that the type of a pointer to an object that
N    * has the specified type can be obtained simply by postfixing a * to
N    * 'type'. If type is a narrow type, an error is given in strict ANSI
N    * mode, or a warning otherwise. If the type is an array or function type,
N    * an error is given.
N    * In non-strict ANSI mode, 'type' is allowed to be any expression.
N    * Returns: The first invocation of the va_arg macro after that of the
N    *          va_start macro returns the value of the argument after that
N    *          specified by parmN. Successive invocations return the values of
N    *          the remaining arguments in succession.
N    *          The result is cast to 'type', even if 'type' is narrow.
N    */
N
N#define __va_copy(dest, src) ((void)((dest) = (src)))
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N   /* va_copy is in C99 and non-strict C90 and non-strict C++
N    * __va_copy is always present.
N    */
N  #define va_copy(dest, src) ((void)((dest) = (src)))
N
N   /* The va_copy macro makes the va_list dest be a copy of
N    * the va_list src, as if the va_start macro had been applied
N    * to it followed by the same sequence of uses of the va_arg
N    * macro as had previously been used to reach the present state
N    * of src.
N    */
N#endif
N
N#define va_end(ap) __va_end(ap)
N   /*
N    * The va_end macro facilitates a normal return from the function whose
N    * variable argument list was referenced by the expansion of va_start that
N    * initialised the va_list ap. If the va_end macro is not invoked before
N    * the return, the behaviour is undefined.
N    * Returns: no value.
N    */
N#endif /* __clang__ */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N
N    #ifdef __GNUC__
N     /* be cooperative with glibc */
N     typedef __CLIBNS va_list __gnuc_va_list;
X     typedef  va_list __gnuc_va_list;
N     #define __GNUC_VA_LIST
N     #undef __need___va_list
N    #endif
N
N  #endif /* __STDARG_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDARG_NO_EXPORTS
S      using ::std::va_list;
S    #endif
N  #endif /* __cplusplus */
N#endif
N
N/* end of stdarg.h */
N
L 4 "..\..\User\debug.h" 2
N
N//#define debug(fmt,...)			printf(fmt, ##__VA_ARGS__)
N//void debug(const char *fmt, ...);
N
N#endif
L 7 "..\..\User\kiwi_ft\__kiwi_ft_common.h" 2
N#include "lwrb.h"
L 1 "..\..\User\lwrb\lwrb.h" 1
N/**
N * \file            lwrb.h
N * \brief           LwRB - Lightweight ring buffer
N */
N
N/*
N * Copyright (c) 2020 Tilen MAJERLE
N *
N * Permission is hereby granted, free of charge, to any person
N * obtaining a copy of this software and associated documentation
N * files (the "Software"), to deal in the Software without restriction,
N * including without limitation the rights to use, copy, modify, merge,
N * publish, distribute, sublicense, and/or sell copies of the Software,
N * and to permit persons to whom the Software is furnished to do so,
N * subject to the following conditions:
N *
N * The above copyright notice and this permission notice shall be
N * included in all copies or substantial portions of the Software.
N *
N * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
N * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
N * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
N * AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
N * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
N * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
N * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
N * OTHER DEALINGS IN THE SOFTWARE.
N *
N * This file is part of LwRB - Lightweight ring buffer library.
N *
N * Author:          Tilen MAJERLE <tilen@majerle.eu>
N * Version:         v2.0.3
N */
N#ifndef LWRB_HDR_H
N#define LWRB_HDR_H
N
N#include <string.h>
N#include <stdint.h>
N
N#ifdef __cplusplus
Sextern "C" {
N#endif /* __cplusplus */
N
N/**
N * \defgroup        LWRB Lightweight ring buffer manager
N * \brief           Lightweight ring buffer manager
N * \{
N */
N
N/**
N * \brief           Enable buffer structure pointer parameters as volatile
N * To use this feature, uncomment keyword below, or define in global compiler settings
N */
N#ifndef LWRB_VOLATILE
N#define LWRB_VOLATILE                            volatile 
N#endif
N
N/**
N * \brief           Adds 2 magic words to make sure if memory is corrupted
N *                  application can detect wrong data pointer and maximum size
N */
N#ifndef LWRB_USE_MAGIC
N#define LWRB_USE_MAGIC                          1
N#endif
N
N/**
N * \brief           Event type for buffer operations
N */
Ntypedef enum {
N    LWRB_EVT_READ,                              /*!< Read event */
N    LWRB_EVT_WRITE,                             /*!< Write event */
N    LWRB_EVT_RESET,                             /*!< Reset event */
N} lwrb_evt_type_t;
N
N/**
N * \brief           Buffer structure forward declaration
N */
Nstruct lwrb;
N
N/**
N * \brief           Event callback function type
N * \param[in]       buff: Buffer handle for event
N * \param[in]       evt: Event type
N * \param[in]       bp: Number of bytes written or read (when used), depends on event type
N */
Ntypedef void (*lwrb_evt_fn)(struct lwrb* buff, lwrb_evt_type_t evt, size_t bp);
N
N/**
N * \brief           Buffer structure
N */
Ntypedef struct lwrb {
N#if LWRB_USE_MAGIC
X#if 1
N    uint32_t magic1;                            /*!< Magic 1 word */
N#endif /* LWRB_USE_MAGIC */
N    uint8_t* buff;                              /*!< Pointer to buffer data.
N                                                    Buffer is considered initialized when `buff != NULL` and `size > 0` */
N    LWRB_VOLATILE size_t size;                  /*!< Size of buffer data. Size of actual buffer is `1` byte less than value holds */
X    volatile size_t size;                   
N    LWRB_VOLATILE size_t r;                     /*!< Next read pointer. Buffer is considered empty when `r == w` and full when `w == r - 1` */
X    volatile size_t r;                      
N    LWRB_VOLATILE size_t w;                     /*!< Next write pointer. Buffer is considered empty when `r == w` and full when `w == r - 1` */
X    volatile size_t w;                      
N    lwrb_evt_fn evt_fn;                         /*!< Pointer to event callback function */
N#if LWRB_USE_MAGIC
X#if 1
N    uint32_t magic2;                            /*!< Magic 2 word */
N#endif /* LWRB_USE_MAGIC */
N} lwrb_t;
N
Nuint8_t     lwrb_init(lwrb_t* buff, void* buffdata, size_t size);
Nuint8_t     lwrb_is_ready(lwrb_t* buff);
Nvoid        lwrb_free(lwrb_t* buff);
Nvoid        lwrb_reset(lwrb_t* buff);
Nvoid        lwrb_set_evt_fn(lwrb_t* buff, lwrb_evt_fn fn);
N
N/* Read/Write functions */
Nsize_t      lwrb_write(lwrb_t* buff, const void* data, size_t btw);
Nsize_t      lwrb_read(lwrb_t* buff, void* data, size_t btr);
Nsize_t      lwrb_peek(lwrb_t* buff, size_t skip_count, void* data, size_t btp);
N
N/* Buffer size information */
Nsize_t      lwrb_get_free(lwrb_t* buff);
Nsize_t      lwrb_get_full(lwrb_t* buff);
N
N/* Read data block management */
Nvoid*       lwrb_get_linear_block_read_address(lwrb_t* buff);
Nsize_t      lwrb_get_linear_block_read_length(lwrb_t* buff);
Nsize_t      lwrb_skip(lwrb_t* buff, size_t len);
N
N/* Write data block management */
Nvoid*       lwrb_get_linear_block_write_address(lwrb_t* buff);
Nsize_t      lwrb_get_linear_block_write_length(lwrb_t* buff);
Nsize_t      lwrb_advance(lwrb_t* buff, size_t len);
N
N/**
N * \}
N */
N
N#ifdef __cplusplus
S}
N#endif /* __cplusplus */
N
N#endif /* LWRB_HDR_H */
L 8 "..\..\User\kiwi_ft\__kiwi_ft_common.h" 2
N#include "ft_common.h"
L 1 "..\..\User\berry_ft\ft_common.h" 1
N#ifndef __BERRY_FT_COMMON_H
N#define __BERRY_FT_COMMON_H
N/* 此文件应当只被ft 实现测试项的文件包含 */
N
N#include "stm32f4xx.h" 
N#include "__kiwi_ft_err.h"
L 1 "..\..\User\kiwi_ft\__kiwi_ft_err.h" 1
N#ifndef __KIWI_FT_ERR_H
N#define __KIWI_FT_ERR_H
N
N//! \name finit state machine return value
N//! @{
Ntypedef enum
N{
N    fsm_rt_err_io_s2          = -54,
N    fsm_rt_err_io_s1          = -53,
N    fsm_rt_err_bist_cache     = -52,
N    fsm_rt_err_bist_asu       = -51,
N    fsm_rt_err_flash_4k       = -50,
N    fsm_rt_err_flash_2k       = -49,
N    fsm_rt_err_spl_loss_track = -48,
N    fsm_rt_err_hibernate_ack  = -47,
N    fsm_rt_err_no_load_current = -46,
N    fsm_rt_err_lpv            = -45,
N    fsm_rt_err_pmu_asu        = -44,
N    fsm_rt_err_spl_flash_check = -43,
N    fsm_rt_err_spl_flash_oversize = -42,
N    fsm_rt_err_spl_head_crc32 = -41,
N    fsm_rt_err_spl_body_crc32 = -40,
N    fsm_rt_err_spl_ack_timeout  = -39,
N    fsm_rt_err_chip_id  = -38,
N    fsm_rt_err_sum_check = -37,
N    fsm_rt_err_ack_timeout = -36,
N    fsm_rt_err_brom_ack = -35,
N    fsm_rt_err_uart = -34,
N    fsm_rt_err_i2c = -33,
N    fsm_rt_err_bist_usb_ram = -32,
N    fsm_rt_err_lradc = -31,
N    fsm_rt_err_pattern_startup_timeout = -30,
N    fsm_rt_err_bist_cache_ram = -29,
N    fsm_rt_err_bist_npu_ram = -28,
N    fsm_rt_err_bist_udsp_ram = -27,
N    fsm_rt_err_exit_standby = -26,
N    fsm_rt_err_standby_current = -25,
N    fsm_rt_err_enter_standby = -24,
N    fsm_rt_err_bist_timeout = -23,
N    fsm_rt_err_bist_adc_ram = -22,
N    fsm_rt_err_bist_aon_mem_buf = -21,
N    fsm_rt_err_bgr       = -20,
N    fsm_rt_err_avdd_cmu  = -19,
N    fsm_rt_err_cpp       = -18,
N    fsm_rt_err_osc_core   = -17,
N    fsm_rt_err_osc_pmu   = -16,
N    fsm_rt_err_osc_audio   = -15,
N    fsm_rt_err_audio_thd = -14,
N    fsm_rt_err_pattern_run_timeout = -13,
N    fsm_rt_err_efuse_check    = -12,
N    fsm_rt_err_efuse_dump_all = -11,
N    fsm_rt_err_efuse_program_all = -10,
N    fsm_rt_err_efuse_init   = -9,
N    fsm_rt_err_flash        = -8,                 //flash写完扇区校验失败或者超过写范围等因素
N    fsm_rt_err_asu          = -7,
N    fsm_rt_err_no_bin       = -6,
N    fsm_rt_err_fatfs        = -5,
N    fsm_rt_func_type_err    = -4,
N    fsm_rt_efuse_err        = -3,
N    fsm_rt_xor_err          = -2,    //! xor_check error
N    fsm_rt_err              = -1,    //!< fsm error, error code can be get from other interface
N    fsm_rt_cpl              = 0,     //!< fsm complete
N    fsm_rt_on_going         = 1,     //!< fsm on-going
N    fsm_rt_wait_for_obj     = 2,     //!< fsm wait for object
N    fsm_rt_asyn             = 3,     //!< fsm asynchronose mode, you can check it later.
N} fsm_rt_t;
N
N
N
N
N#endif
L 7 "..\..\User\berry_ft\ft_common.h" 2
N#include "adc_cali.h"
L 1 "..\..\User\berry_ft\adc_cali.h" 1
N#ifndef __ADC_CALI_H
N#define __ADC_CALI_H
N
Nextern u16 g_verfint;
N
N#define VREFINT   1.202f  //内部基准电压典型值1.2V 范围1.16~1.26
N
Nuint8_t is_adc_cali_success(void);
N
N
N#endif
L 8 "..\..\User\berry_ft\ft_common.h" 2
N#include "bsp_timer.h"
N#include "berry.h"
L 1 "..\..\User\BERRY_TWI\berry.h" 1
N#ifndef __BERRY_H__
N#define	__BERRY_H__
N
N#include "berry_common.h"
L 1 "..\..\User\BERRY_TWI\berry_common.h" 1
N#ifndef __BERRY_COMMON_H
N#define __BERRY_COMMON_H
N
N//#include "cmsis_os.h"
N#include "bsp.h"
N#include "io_mode.h"
L 1 "..\..\User\ft_support\io_mode.h" 1
N#ifndef __IO_MODE_H
N#define __IO_MODE_H
N
N
Ntypedef enum {
N    IO_MODE_TIM = 0,
N    IO_MODE_FLOAT_OUTPUT,
N    IO_MODE_FLOAT_INPUT,
N    IO_MODE_PUSH_PULL_OUTPUT,
N    IO_MODE_ANALOG_INPUT
N} IO_ModeTypeDef;
N
Nvoid IO_Config(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, IO_ModeTypeDef mode);
N
N#endif
L 7 "..\..\User\BERRY_TWI\berry_common.h" 2
N
N//#include "usart.h"
N//#include "delay.h"
N
N#define debug_twi(fmt,arg...)   printf("[TWI_DEBUG]"fmt,##arg)
N#define debug(fmt,arg...)   printf(fmt,##arg)
N
N//#define debug(fmt, arg...) DEBUG("[%s:%d]" fmt "\r\n",__func__, __LINE__, ##arg)
N//#define DEBUG       printf
N//#define osDelay     bsp_DelayMS
N
N
N//// berry?????
N//#define DBG_CFG (0x14)
N//#define ANA_CFG0 (0x15)
N//#define ANA_CFG1 (0x16)
N//#define ANA_CFG2 (0x17)
N//#define DFT_CFG0  (0x18)
N//#define DFT_CFG1  (0x19)
N
N//#define SYS_CTL (0x40)
N//#define SYS_CTL_BUS_HLD (1u << 0)
N//#define SYS_CTL_BUS_CLR (1u << 1)
N//#define SYS_CTL_DBG_REQ (1u << 2)
N
N//#define SPU_STAT (0x80)
N//#define SPU_STAT_WRK (1u << 0)
N//#define SPU_PD (0x81)
N//#define SPU_RAWL (0x82)
N//#define SPU_RAWH (0x83)
N
N//#define EFUSE_CTL (0xc0)
N//#define EFUSE_STA (0xc1)
N//#define EFUSE_ADDR (0xc2)
N//#define EFUSE_RD_DATA (0xc3)
N
N//#define	EC_NO_ERROR			(0)
N//#define	EC_SWI_BIT			(1)
N//#define	EC_SWI_ACK			(2)
N//#define	EC_SWI_TIMEOUT		(3)
N//#define	EC_TWI_BIT			(4)
N//#define	EC_TWI_ACK_DEV_ADDR	(5)
N//#define	EC_TWI_ACK_REG_ADDR	(6)
N//#define	EC_TWI_ACK_WDATA	(7)
N//#define	EC_TWI_RW_LOCK		(8)
N//#define	EC_DEBUG_LOCK		(9)
N//#define	EC_SPU_READ_TIMEOUT	(10)
N//#define	EC_SPU_READ_LOCK	(11)
N//#define	EC_EFUSE_WRITE_TIMEOUT	(12)
N//#define	EC_EFUSE_READ_TIMEOUT	(13)
N//#define EC_ADC_NO_BEST_TRIM     (14)
N
N 
N
N
N// TWI_SCK?????????
N#define twi_sck_delay()     \
N    do                      \
N    {                       \
N        volatile u32 t = 50; \
N        while (t--)         \
N            ;               \
N    } while (0)
X#define twi_sck_delay()         do                          {                               volatile u32 t = 50;         while (t--)                     ;                   } while (0)
N
Nvoid tick_init(void);
Nvoid set_tick(u32 us);
Nvoid wait_tick(void);
Nvoid reset_tick(void);
N
Nvoid tos_sem_create(uint32_t *var, uint32_t val);
Nvoid tos_knl_sched_lock(void);
Nvoid tos_knl_sched_unlock(void);
N
N#endif
L 5 "..\..\User\BERRY_TWI\berry.h" 2
N 
N
N 
N//#define key_release()      BRY_SDA_KEY_CTL(Bit_SET)
N
Ntypedef struct
N{
N    #define	SPU_AUX_DAT_LEN_MAX	(32)
N    
N	u16 spu_raw;
N	u16 spu_ev;
N	u16 spu_bl;
N	u8 spu_aux[SPU_AUX_DAT_LEN_MAX];
X	u8 spu_aux[(32)];
N}spu_debug_data_t;
N
Nvoid berry_init(void);
N
Ns32 berry_enter_bus(void);
Ns32 berry_request_bus(void);
Ns32 berry_release_bus(void);
N
N
Nvoid berry_clk_400k_enable(void);
Nvoid berry_clk_400k_disable(void);
N
Ns32 berry_efuse_bit_program(u8 efuse_bit_addr,u8* pbit,u8 bit_len);
Ns32 berry_efuse_read(u8 efuse_addr,u8* pbuf,u8 len);
N
Ns32 berry_debug_mode_enter(void);
Ns32 berry_debug_mode_exit1(void);
N
Ns32 berry_32k_trim( u32 trim_freq[]);
Ns32 berry_vr13_trim(  u32 vr13_trim_tab[]);
Ns32 berry_lp_trim(u32 lp_adv_tab[]);
N
Ns32 berry_read_spu_data(spu_debug_data_t *spu_data);
N
Ns32 berry_scp_trim(u32 trim_scp[]);
N
N#endif
L 10 "..\..\User\berry_ft\ft_common.h" 2
N#include "bsp_power_supply.h"
N#include "stm32f4xx.h"
N#include "berry_drv.h"
L 1 "..\..\User\BERRY_TWI\berry_drv.h" 1
N#ifndef __BERRY_DRV_H
N#define __BERRY_DRV_H
N
N#include "bsp.h"
N
N
Ns32 berry_read_bytes(u8 reg_addr, u8 *pbuf, u8 len);
Ns32 berry_write_byte(u8 reg_addr, u8 val);
Ns32 berry_read_byte(u8 reg_addr, u8 *pval);
N
N#endif
L 13 "..\..\User\berry_ft\ft_common.h" 2
N#include "test_interface.h"
L 1 "..\..\User\factory_test\test_interface.h" 1
N#ifndef __TEST_INTERFACE_H
N#define __TEST_INTERFACE_H
N
N//#define SEN_CAP_PORT        GPIOB
N//#define SEN_CAP_PIN         GPIO_Pin_15
N
N#define VOUT_EN_PORT        GPIOD
N#define VOUT_EN_PIN         GPIO_Pin_15
N
N//#define SCL_PORT            GPIOB
N//#define SCL_PIN             GPIO_Pin_6
N
N//#define SDA_PORT            GPIOB
N//#define SDA_PIN             GPIO_Pin_7
N
N
N//#define SCL_PU_PORT         GPIOA
N//#define SCL_PU_PIN          GPIO_Pin_0
N
N//#define SDA_PU_PORT         GPIOA
N//#define SDA_PU_PIN          GPIO_Pin_1
N
N
N//#define AT_SWITCH_PORT      GPIOC
N//#define AT_SWITCH_PIN       GPIO_Pin_6
N
N 
Nstruct  test_power_ops  //test interface Operations
N{
N    void (*init)(void);
N    void (*on)(void);
N    void (*off)(void);
N    void (*consumption_on)(void);
N    void (*consumption_off)(void);
N};
Nextern struct test_power_ops test_power;
N
N#endif
L 14 "..\..\User\berry_ft\ft_common.h" 2
N#include "lcd.h"
L 1 "..\..\User\lcd.h" 1
N#ifndef __LCD_H
N#define __LCD_H
N
Ntypedef enum
N{
N    DISP_SHOW_LOG = 0,
N    DISP_SHOW_NG,
N    DISP_SHOW_PASS,
N} disp_show_type_enum;
N
Nvoid display_set_addr(uint16_t start_x, uint16_t start_y, uint16_t end_x, uint16_t end_y);
N
Nvoid display_fill(uint16_t start_x, uint16_t start_y, uint16_t end_x, uint16_t end_y, uint16_t fill_color);
Nvoid display_show_string(char *p, uint16_t font_color, uint16_t bg_color);
Nvoid display_show_logger(char *p,  uint16_t bg_color);
N/*
N * 函数名：display_show_log
N * 描述  ：LCD 日志模式显示
N * 输入  ：void
N * 输出  ：void
N */
Nvoid display_show_log(disp_show_type_enum show_type, const char *fmt, ...);
N
N#define LCD_SHOW_LOG(fmt, ...)          display_show_log(DISP_SHOW_LOG, fmt, ##__VA_ARGS__)
N#define LCD_SHOW_NG(fmt, ...)           display_show_log(DISP_SHOW_NG, fmt, ##__VA_ARGS__)
N#define LCD_SHOW_PASS(fmt, ...)         display_show_log(DISP_SHOW_PASS, fmt, ##__VA_ARGS__)
N
N#endif
L 15 "..\..\User\berry_ft\ft_common.h" 2
N
N#define timer_creat()        static int32_t timer=0
N#define timer_start(var)     timer=g_iRunTime+var
N#define is_time_up()        ((g_iRunTime - timer) < (UINT32_MAX/2))
N
N#define LOG_WARM_FT_EFUSE()     debug("{warm: efuse not new}");
N
N
N 
Ntypedef enum
N{
N    ec_none=0,
N    ec_bus,
N    ec_current_pre_test,
N    ec_current_post_test,
N
N    ec_bus_request,
N    ec_err_smoking,
N    ec_key_smoke_enable_fail,
N    ec_key_smoke_disable_fail,
N    ec_cap_smoke_enable_fail,
N    ec_cap_smoke_disable_fail,
N    ec_efuse_read_fail,
N
N    ec_lp_trim_adv_get_fail,
N    ec_lp_no_suitble_volt,
N    ec_lp_trimed,
N
N    ec_vr13_adv_get_fail,
N    ec_vr13_trim_ng,
N    ec_vr13_trimed,
N
N//    ec_adc__fail,
N//    ec_vr13_trim_ng,
N//    ec_vr13_trimed,
N    
N    ec_scp_get_fail,
N    ec_scp_no_suitable_current,
N
N    ec_32k_get_fail,
N    ec_32k_no_suitable_freq,
N    ec_32k_trimed,
N
N    ec_efuse_rewrite_zero,
N    ec_efuse_write_fail,
N    ec_efuse_read_check_fail,  //
N    ec_efuse_readback_fail,
N    ec_max,
N
N}ft_err_code_t;
N
N
N//! @}
N
N
N
N
N
N
Ntypedef struct
N{
N    fsm_rt_t (*current_run)(void); //当前执行函数
N}ms_ops_t;
N
N//typedef union
N//{
N//    struct
N//    {
N//        uint64_t burn_time      : 1;    // FSM_CFG[0]   字节低位，bit顺序前
N//        uint64_t warn_en        : 1;    // FSM_CFG[1]
N//        uint64_t key_lock_en    : 1;    // FSM_CFG[2]
N//        uint64_t sns_lock_en    : 1;    // FSM_CFG[3]
N//        uint64_t ocp1_en        : 1;    // FSM_CFG[4]
N//        uint64_t sns_fdoub      : 1;    // FSM_CFG[5]
N//        uint64_t adc_sns_sel    : 1;    // FSM_CFG[6]
N//        uint64_t pwr_const      : 1;    // PWM_CFG[0]
N
N//        uint64_t warm_tar       : 1;    // PWM_CFG[3]
N//        uint64_t burn_tar       : 1;    // PWM_CFG[5]
N//        uint64_t key_en         : 1;    // KEY_CFG[0]
N//        uint64_t swi_en         : 1;    // KEY_CFG[1] 
N//        uint64_t vr13_trim      : 4;    // ANA_CFG0[0:3]  ----------------------
N
N//        uint64_t scp_trim       : 4;    // ANA_CFG0[4:7]
N//        uint64_t osc32k_trim    : 4;    // ANA_CFG1[0:3]
N
N//        uint64_t adc_offset     : 3;    // ANA_CFG1[4:6]
N//        uint64_t lp_trim        : 3;    // ANA_CFG2[0:2]
N
N//        uint64_t ldo_volt       : 3;    // ANA_CFG2[3:5]
N//        uint64_t adc_gain       : 2;    // ANA_CFG2[6:7] -----------------------
N//        uint64_t tsamp          : 2;    // SPU_TIMCFG[0:1]
N//        uint64_t spuen          : 1;
N
N//        uint64_t tscan          : 3;
N//        uint64_t evrspd         : 2;
N//        uint64_t evfspd         : 2;
N
N//        uint64_t blrspd         : 2;
N//        uint64_t blfspd         : 2;
N//        uint64_t prddeb         : 2;
N//        uint64_t prudeb         : 2;
N
N//        uint64_t rsmoke         : 1;
N//        uint64_t tapcnt         : 2;
N
N//        uint64_t rprdthr        : 4;
N//        uint64_t fprdthr        : 4;
N//    }bits;
N//    
N//    uint8_t byte[8];
N//    
N//    struct
N//    {
N//        uint64_t config : 12;  //[0，11]  配置区
N//        uint64_t trim   : 23;  //[12,34]  trim区
N//        uint64_t spu    : 29;  //         spu区
N//    }zone;  /* 分为三个区域   */
N
N//    uint64_t all;
N
N//} efuse_t;
N// 
N
N//typedef struct 
N//{
N//    ft_err_code_t err_code;
N
N//    /* 测量结果 */
N//    float       current_pre_test; //测试前的功耗
N//    float       current_post_test; //测试后的功耗
N//    uint32_t    key_pressed_ack_time;
N//    uint32_t    key_release_ack_time;
N//    uint32_t    cap_add_ack_time;
N//    uint32_t    cap_remove_ack_time;
N//    //uint32_t    osc32k_tab[16];
N
N//    /*  trim值 */
N//    uint8_t     lp_trim;
N//    uint8_t     vr13_trim;
N//    uint8_t     scp_trim;
N//    uint8_t     osc32k_trim;
N//    uint8_t     adc_gain;
N//    uint8_t     adc_offset;
N
N//    /* efuse值，ft前后 */
N//    efuse_t     efuse_pre_test;
N//    efuse_t     efuse_data_to_write;
N//    efuse_t     efuse_readback;
N//    //efuse_t     bin;
N//    
N//}test_object_t;   /* 测试结果 */
N
N//extern test_object_t chip;   /* 测试结果 */
N
N
N#define printf_efuse(str,v) LCD_SHOW_PASS("%s %02x|%02x|%02x|%02x|%02x|%02x|%02x|%02x", str,\
N                                    v.byte[0],v.byte[1],v.byte[2],v.byte[3],v.byte[4],v.byte[5],v.byte[6],v.byte[7]);
X#define printf_efuse(str,v) LCD_SHOW_PASS("%s %02x|%02x|%02x|%02x|%02x|%02x|%02x|%02x", str,                                    v.byte[0],v.byte[1],v.byte[2],v.byte[3],v.byte[4],v.byte[5],v.byte[6],v.byte[7]);
N
N 
N
N#define ng_num  chip_cout.params.count_ng  
N#define ok_num  chip_cout.params.count_ok 
N
N 
N//extern const efuse_t omc_map;
N
N//void ft_hard_init(void);
N//void ft_power(on_off_t state);
Nfloat adc_conv_current(uint32_t adc);
Nuint8_t best_u32_index_find(u32 tar, u32 volt[], uint8_t len);
Nuint8_t best_float_index_find(float tar, float volt[], uint8_t len);
N//void float_all_conect_pin(void);
N
N 
N
Nvoid ft_fsm_loop(void);
Nvoid berry_ft_init(void);
Nvoid berry_ft_task(void);
N
Nvoid signal_fifo_clean(void);
Nvoid disp_type_config_t(uint8_t *puc);
Nvoid trim_diff_save(void);
N//void ft_msg_show(test_object_t *p);
N
N 
N//void somek_pin_init(void);
Nuint8_t ft_VREF(void);
N
N 
N
N 
N
N#endif
L 9 "..\..\User\kiwi_ft\__kiwi_ft_common.h" 2
N#include "platform.h"
L 1 "..\..\User\kiwi_ft\spv40\platform.h" 1
N/*
N * Copyright (c) 2012-2019 Andes Technology Corporation
N * All rights reserved.
N *
N */
N
N#ifndef __PLATFORM_H__
N#define __PLATFORM_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N//#include "core_v5.h"
N#include "spv40.h"
L 1 "..\..\User\kiwi_ft\spv40\spv40.h" 1
N/*
N * Copyright (c) 2012-2019 Andes Technology Corporation
N * All rights reserved.
N *
N */
N
N#ifndef __SPV40_H__
N#define __SPV40_H__
N
N
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N#include "stdint.h"
N/*******************************************************************************
N * Clock-related Definitions
N ******************************************************************************/
N#define KHz                     1000
N#define MHz                     1000000
N
N#define US						1
N#define MS						1000
N
N/*******************************************************************************
N * PLIC (NCEPLIC100 IP) Interrupt Source Definition
N * Global interrupt sources are assigned small unsigned integer identifiers,
N * beginning at 1. An interrupt ID of 0 is reserved to mean 'no interrupt'.
N * IDs are also used to break ties when two or more interrupt sources have the
N * same assigned priority: Smaller values of ID take precedence over larger
N * values of ID.
N ******************************************************************************/
N#define    IRQ_SOURCE_WDOG     	1
N#define    IRQ_SOURCE_PMU      	2
N#define    IRQ_SOURCE_LRADC    	3
N#define    IRQ_SOURCE_ADUI     	4
N#define    IRQ_SOURCE_UDSP     	5
N#define    IRQ_SOURCE_NPU_TAB  	6
N#define    IRQ_SOURCE_NPU_RES  	7
N#define    IRQ_SOURCE_TIMER0   	8
N#define    IRQ_SOURCE_TIMER1   	9
N#define    IRQ_SOURCE_TIMER2   	10
N#define    IRQ_SOURCE_TIMER3   	11
N#define    IRQ_SOURCE_CAPTURE0 	12
N#define    IRQ_SOURCE_CAPTURE1 	13
N#define    IRQ_SOURCE_CAPTURE2 	14
N#define    IRQ_SOURCE_CAPTURE3 	15
N#define    IRQ_SOURCE_IRRX     	16
N#define    IRQ_SOURCE_IRTX     	17
N#define    IRQ_SOURCE_SPI0     	18
N#define    IRQ_SOURCE_SPI1     	19
N#define    IRQ_SOURCE_SDC      	20
N#define    IRQ_SOURCE_ADC      	21
N#define    IRQ_SOURCE_DAC      	22
N#define    IRQ_SOURCE_SRC      	23
N#define    IRQ_SOURCE_DMA      	24
N#define    IRQ_SOURCE_MMU      	25
N#define    IRQ_SOURCE_NORC     	26
N#define    IRQ_SOURCE_UART0    	27
N#define    IRQ_SOURCE_UART1    	28
N#define    IRQ_SOURCE_UART2    	29
N#define    IRQ_SOURCE_I2C0     	30
N#define    IRQ_SOURCE_I2C1     	31
N#define    IRQ_SOURCE_ASI0     	32
N#define    IRQ_SOURCE_ASI1     	33
N#define    IRQ_SOURCE_USB_MAC  	34
N#define    IRQ_SOURCE_USB_DMA  	35
N#define    IRQ_SOURCE_GPIO0    	36
N#define    IRQ_SOURCE_GPIO1    	37
N#define    IRQ_SOURCE_PWM      	38
N#define    IRQ_SOURCE_CAMERA   	39
N#define    IRQ_SOURCE_UART3    	40
N#define    IRQ_SOURCE_PSRAM    	41
N#define    IRQ_SOURCE_MPU      	42
N
N/*******************************************************************************
N * SPV40 Memory Region / Memory-mapped Peripheral Description
N ******************************************************************************/
N
N#define    _IO_(addr)              (addr)
N#define    PLIC_BASE               _IO_(0x10000000)
N#define    PLMT_BASE               _IO_(0x12000000)
N#define    PLIC_SW_BASE            _IO_(0x12400000)
N#define    PLDM_BASE               _IO_(0x12800000)
N
N#define    CPU_ILM_BASE            _IO_(0x00000000)
N#define    CPU_DLM_BASE            _IO_(0x00100000)
N#define    CODE_SRAM_L1C_BASE      _IO_(0x40000000)
N#define    CODE_ILM_L1C_BASE       _IO_(0x41000000)
N#define    CODE_DLM_L1C_BASE       _IO_(0x41100000)
N#define    CODE_AON_L1C_BASE       _IO_(0x42000000)
N#define    CODE_L2C_L1C_BASE       _IO_(0x48000000)
N#define    CODE_L2N_L1C_BASE       _IO_(0x4C000000)
N#define    DATA_SRAM_L1C_BASE      _IO_(0x50000000)
N#define    DATA_ILM_L1C_BASE       _IO_(0x51000000)
N#define    DATA_DLM_L1C_BASE       _IO_(0x51100000)
N#define    DATA_AON_L1C_BASE       _IO_(0x52000000)
N#define    DATA_L2C_L1C_BASE       _IO_(0x58000000)
N#define    DATA_L2N_L1C_BASE       _IO_(0x5C000000)
N#define    CODE_SRAM_L1N_BASE      _IO_(0x60000000)
N#define    CODE_ILM_L1N_BASE       _IO_(0x61000000)
N#define    CODE_DLM_L1N_BASE       _IO_(0x61100000)
N#define    CODE_AON_L1N_BASE       _IO_(0x62000000)
N#define    CODE_L2C_L1N_BASE       _IO_(0x68000000)
N#define    CODE_L2N_L1N_BASE       _IO_(0x6C000000)
N#define    DATA_SRAM_L1N_BASE      _IO_(0x70000000)
N#define    DATA_ILM_L1N_BASE       _IO_(0x71000000)
N#define    DATA_DLM_L1N_BASE       _IO_(0x71100000)
N#define    DATA_AON_L1N_BASE       _IO_(0x72000000)
N#define    DATA_L2C_L1N_BASE       _IO_(0x78000000)
N#define    DATA_L2N_L1N_BASE       _IO_(0x7C000000)
N
N#define    CPU_ILM_SIZE            0x00010000
N#define    CPU_DLM_SIZE            0x00040000
N#define    CODE_SRAM_L1C_SIZE      0x00040000
N#define    CODE_ILM_L1C_SIZE       0x00010000
N#define    CODE_DLM_L1C_SIZE       0x00040000
N#define    CODE_AON_L1C_SIZE       0x00001000
N#define    CODE_L2C_L1C_SIZE       0x01000000
N#define    CODE_L2N_L1C_SIZE       0x01000000
N#define    DATA_SRAM_L1C_SIZE      0x00040000
N#define    DATA_ILM_L1C_SIZE       0x00010000
N#define    DATA_DLM_L1C_SIZE       0x00040000
N#define    DATA_AON_L1C_SIZE       0x00001000
N#define    DATA_L2C_L1C_SIZE       0x01000000
N#define    DATA_L2N_L1C_SIZE       0x01000000
N#define    CODE_SRAM_L1N_SIZE      0x00040000
N#define    CODE_ILM_L1N_SIZE       0x00010000
N#define    CODE_DLM_L1N_SIZE       0x00040000
N#define    CODE_AON_L1N_SIZE       0x00001000
N#define    CODE_L2C_L1N_SIZE       0x01000000
N#define    CODE_L2N_L1N_SIZE       0x01000000
N#define    DATA_SRAM_L1N_SIZE      0x00040000
N#define    DATA_ILM_L1N_SIZE       0x00010000
N#define    DATA_DLM_L1N_SIZE       0x00040000
N#define    DATA_AON_L1N_SIZE       0x00001000
N#define    DATA_L2C_L1N_SIZE       0x01000000
N#define    DATA_L2N_L1N_SIZE       0x01000000
N
N
N
N#ifndef __ASSEMBLER__
N
N#define __I                     volatile const	/* 'read only' permissions    */
N#define __O                     volatile        /* 'write only' permissions   */
N#define __IO                    volatile        /* 'read / write' permissions */
N
N/*******************************************************************************
N * Global Data For Essential SoC Configurations
N ******************************************************************************/
N
N//typedef enum
N//{
N//	DISABLE,
N//	ENABLE
N//} Options_EnableEnum;
N
N//typedef enum
N//{
N//	RESET = 0UL,
N//	SET = 1UL
N//} Options_StateEnum;
N
N//typedef enum
N//{
N//	OFF = 0UL,
N//	ON	= 1UL
N//} Options_SwitchEnum;
N
N/**
N * @brief
N * @details
N */
Ntypedef struct {
N	__IO uint32_t MTIME_Period_Counts;
X	volatile uint32_t MTIME_Period_Counts;
N	__IO uint32_t Sys_Ticks;
X	volatile uint32_t Sys_Ticks;
N	__IO uint32_t Delay_Cycle_Timebase;
X	volatile uint32_t Delay_Cycle_Timebase;
N} SOC_RUNTIME;
N
N/*****************************************************************************
N * PLMT - Machine Timer Unit (NCEPLMT100)
N ****************************************************************************/
Ntypedef struct {
N	__IO uint32_t MTIME_L; /* 0x00 Machine Time (L)*/
X	volatile uint32_t MTIME_L;  
N	__IO uint32_t MTIME_H; /* 0x04 Machine Time (H)*/
X	volatile uint32_t MTIME_H;  
N	__IO uint32_t MTIMECMP_L; /* 0x08 Machine Time Compare (L)*/
X	volatile uint32_t MTIMECMP_L;  
N	__IO uint32_t MTIMECMP_H; /* 0x0c Machine Time Compare (H)*/
X	volatile uint32_t MTIMECMP_H;  
N} PLMT_RegDef;
N
N/*****************************************************************************
N * D25F CPU Core Device Declaration
N ****************************************************************************/
N#define 	DEV_MTIME              ((PLMT_RegDef *) PLMT_BASE)
N
N#endif	/* __ASSEMBLER__ */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif	/* __SPV40_H__ */
L 16 "..\..\User\kiwi_ft\spv40\platform.h" 2
N/* ============== Add peripheral header reference here ====================== */
N
N#include "base_space.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 1
N#ifndef __BASEA_SPACE_H__
N#define __BASEA_SPACE_H__
N#include "dev_udsp_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_udsp_field.h" 1
N#ifndef __DEV_UDSP_FIELD_H__
N#define __DEV_UDSP_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************uDSP_CHNn_SLA***********************************/
Ntypedef struct{
N
N    __IO uint32_t SRC_LOWER_ADDR      : 32;
X    volatile uint32_t SRC_LOWER_ADDR      : 32;
N}DEV_UDSP_uDSP_CHNn_SLA_Field;
N/****DEV_UDSPuDSP_CHNn_SLA end****/
N
N/***********************************uDSP_CHNn_SUA***********************************/
Ntypedef struct{
N
N    __IO uint32_t SRC_UPPER_ADDR      : 32;
X    volatile uint32_t SRC_UPPER_ADDR      : 32;
N}DEV_UDSP_uDSP_CHNn_SUA_Field;
N/****DEV_UDSPuDSP_CHNn_SUA end****/
N
N/***********************************uDSP_CHNn_SCA***********************************/
Ntypedef struct{
N
N    __IO uint32_t SRC_CURRENT_ADDR    : 32;
X    volatile uint32_t SRC_CURRENT_ADDR    : 32;
N}DEV_UDSP_uDSP_CHNn_SCA_Field;
N/****DEV_UDSPuDSP_CHNn_SCA end****/
N
N/***********************************uDSP_CHNn_SMF***********************************/
Ntypedef struct{
N
N    __IO uint32_t SRC_DATA_LENGTH     : 12;
X    volatile uint32_t SRC_DATA_LENGTH     : 12;
N    __IO uint32_t SRC_DATA_WIDTH      : 2;
X    volatile uint32_t SRC_DATA_WIDTH      : 2;
N    __IO uint32_t SRC_DATA_FORMAT     : 1;
X    volatile uint32_t SRC_DATA_FORMAT     : 1;
N    __IO uint32_t SRC_DATA_TYPE       : 1;
X    volatile uint32_t SRC_DATA_TYPE       : 1;
N    __IO uint32_t SRC_OFFSET_ADDR     : 16;
X    volatile uint32_t SRC_OFFSET_ADDR     : 16;
N}DEV_UDSP_uDSP_CHNn_SMF_Field;
N/****DEV_UDSPuDSP_CHNn_SMF end****/
N
N/***********************************uDSP_CHNn_DLA***********************************/
Ntypedef struct{
N
N    __IO uint32_t DST_LOWER_ADDR      : 32;
X    volatile uint32_t DST_LOWER_ADDR      : 32;
N}DEV_UDSP_uDSP_CHNn_DLA_Field;
N/****DEV_UDSPuDSP_CHNn_DLA end****/
N
N/***********************************uDSP_CHNn_DUA***********************************/
Ntypedef struct{
N
N    __IO uint32_t DST_UPPER_ADDR      : 32;
X    volatile uint32_t DST_UPPER_ADDR      : 32;
N}DEV_UDSP_uDSP_CHNn_DUA_Field;
N/****DEV_UDSPuDSP_CHNn_DUA end****/
N
N/***********************************uDSP_CHNn_DCA***********************************/
Ntypedef struct{
N
N    __IO uint32_t DST_CURRENT_ADDR    : 32;
X    volatile uint32_t DST_CURRENT_ADDR    : 32;
N}DEV_UDSP_uDSP_CHNn_DCA_Field;
N/****DEV_UDSPuDSP_CHNn_DCA end****/
N
N/***********************************uDSP_CHNn_DMF***********************************/
Ntypedef struct{
N
N    __IO uint32_t DST_DATA_LENGTH     : 12;
X    volatile uint32_t DST_DATA_LENGTH     : 12;
N    __IO uint32_t DST_DATA_WIDTH      : 2;
X    volatile uint32_t DST_DATA_WIDTH      : 2;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t DST_DATA_TYPE       : 1;
X    volatile uint32_t DST_DATA_TYPE       : 1;
N    __IO uint32_t DST_OFFSET_ADDR     : 16;
X    volatile uint32_t DST_OFFSET_ADDR     : 16;
N}DEV_UDSP_uDSP_CHNn_DMF_Field;
N/****DEV_UDSPuDSP_CHNn_DMF end****/
N
N/***********************************uDSP_CHNn_LMF0***********************************/
Ntypedef struct{
N
N    __IO uint32_t SMA_WR_BUF0_SEL     : 1;
X    volatile uint32_t SMA_WR_BUF0_SEL     : 1;
N    __IO uint32_t SMA_RD_BUF0_SEL     : 1;
X    volatile uint32_t SMA_RD_BUF0_SEL     : 1;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t SMA_BUF0_WSA        : 4;
X    volatile uint32_t SMA_BUF0_WSA        : 4;
N    __IO uint32_t SMA_BUF0_RSA        : 4;
X    volatile uint32_t SMA_BUF0_RSA        : 4;
N         uint32_t RESERVED1           : 4;
N    __IO uint32_t SMA_WR_BUF1_SEL     : 1;
X    volatile uint32_t SMA_WR_BUF1_SEL     : 1;
N    __IO uint32_t SMA_RD_BUF1_SEL     : 1;
X    volatile uint32_t SMA_RD_BUF1_SEL     : 1;
N         uint32_t RESERVED2           : 2;
N    __IO uint32_t SMA_BUF1_WSA        : 4;
X    volatile uint32_t SMA_BUF1_WSA        : 4;
N    __IO uint32_t SMA_BUF1_RSA        : 4;
X    volatile uint32_t SMA_BUF1_RSA        : 4;
N    __IO uint32_t FIR_BUF1_WSA        : 4;
X    volatile uint32_t FIR_BUF1_WSA        : 4;
N}DEV_UDSP_uDSP_CHNn_LMF0_Field;
N/****DEV_UDSPuDSP_CHNn_LMF0 end****/
N
N/***********************************uDSP_CHNn_LMF1***********************************/
Ntypedef struct{
N
N    __IO uint32_t ATAN_BUF0_WSA       : 2;
X    volatile uint32_t ATAN_BUF0_WSA       : 2;
N    __IO uint32_t ATAN_BUF0_RSA       : 2;
X    volatile uint32_t ATAN_BUF0_RSA       : 2;
N    __IO uint32_t ABS2_BUF0_WSA       : 2;
X    volatile uint32_t ABS2_BUF0_WSA       : 2;
N    __IO uint32_t ABS2_BUF0_RSA       : 2;
X    volatile uint32_t ABS2_BUF0_RSA       : 2;
N    __IO uint32_t SQRT_BUF0_WSA       : 2;
X    volatile uint32_t SQRT_BUF0_WSA       : 2;
N    __IO uint32_t SQRT_BUF0_RSA       : 2;
X    volatile uint32_t SQRT_BUF0_RSA       : 2;
N    __IO uint32_t FBK_BUF0_WSA        : 2;
X    volatile uint32_t FBK_BUF0_WSA        : 2;
N    __IO uint32_t FBK_BUF0_RSA        : 2;
X    volatile uint32_t FBK_BUF0_RSA        : 2;
N    __IO uint32_t LOG_BUF0_WSA        : 2;
X    volatile uint32_t LOG_BUF0_WSA        : 2;
N    __IO uint32_t LOG_BUF0_RSA        : 2;
X    volatile uint32_t LOG_BUF0_RSA        : 2;
N    __IO uint32_t MAC_BUF0_WSA        : 4;
X    volatile uint32_t MAC_BUF0_WSA        : 4;
N    __IO uint32_t MAC_BUF0_RSA        : 4;
X    volatile uint32_t MAC_BUF0_RSA        : 4;
N    __IO uint32_t FIR_BUF0_WSA        : 2;
X    volatile uint32_t FIR_BUF0_WSA        : 2;
N    __IO uint32_t FIR_BUF0_RSA        : 2;
X    volatile uint32_t FIR_BUF0_RSA        : 2;
N}DEV_UDSP_uDSP_CHNn_LMF1_Field;
N/****DEV_UDSPuDSP_CHNn_LMF1 end****/
N
N/***********************************uDSP_CHNn_LMF2***********************************/
Ntypedef struct{
N
N    __IO uint32_t WIN_BUF1_RSA        : 8;
X    volatile uint32_t WIN_BUF1_RSA        : 8;
N    __IO uint32_t COS_BUF1_RSA        : 8;
X    volatile uint32_t COS_BUF1_RSA        : 8;
N    __IO uint32_t MUL_BUF1_RSA        : 8;
X    volatile uint32_t MUL_BUF1_RSA        : 8;
N    __IO uint32_t SQRT_BUF1_RSA       : 8;
X    volatile uint32_t SQRT_BUF1_RSA       : 8;
N}DEV_UDSP_uDSP_CHNn_LMF2_Field;
N/****DEV_UDSPuDSP_CHNn_LMF2 end****/
N
N/***********************************uDSP_CHNn_LMF3***********************************/
Ntypedef struct{
N
N    __IO uint32_t FBK_BUF1_RSA        : 8;
X    volatile uint32_t FBK_BUF1_RSA        : 8;
N    __IO uint32_t MAC_BUF1_RSA        : 8;
X    volatile uint32_t MAC_BUF1_RSA        : 8;
N    __IO uint32_t FIR_BUF1_RSA        : 8;
X    volatile uint32_t FIR_BUF1_RSA        : 8;
N    __IO uint32_t DIV_BUF1_RSA        : 8;
X    volatile uint32_t DIV_BUF1_RSA        : 8;
N}DEV_UDSP_uDSP_CHNn_LMF3_Field;
N/****DEV_UDSPuDSP_CHNn_LMF3 end****/
N
N/***********************************uDSP_CHNn_LMF4***********************************/
Ntypedef struct{
N
N    __IO uint32_t COS_SHIFT_SEL       : 4;
X    volatile uint32_t COS_SHIFT_SEL       : 4;
N    __IO uint32_t FFT_SHIFT_SEL       : 4;
X    volatile uint32_t FFT_SHIFT_SEL       : 4;
N    __IO uint32_t MUL_SHIFT_SEL       : 4;
X    volatile uint32_t MUL_SHIFT_SEL       : 4;
N    __IO uint32_t IFFT_SHIFT_SEL      : 4;
X    volatile uint32_t IFFT_SHIFT_SEL      : 4;
N    __IO uint32_t SQRT_SHIFT_SEL      : 4;
X    volatile uint32_t SQRT_SHIFT_SEL      : 4;
N    __IO uint32_t MAC_SHIFT_SEL       : 4;
X    volatile uint32_t MAC_SHIFT_SEL       : 4;
N    __IO uint32_t FIR_SHIFT_SEL       : 4;
X    volatile uint32_t FIR_SHIFT_SEL       : 4;
N    __IO uint32_t DIV_SHIFT_SEL       : 4;
X    volatile uint32_t DIV_SHIFT_SEL       : 4;
N}DEV_UDSP_uDSP_CHNn_LMF4_Field;
N/****DEV_UDSPuDSP_CHNn_LMF4 end****/
N
N/***********************************uDSP_CHNn_CFG0***********************************/
Ntypedef struct{
N
N    __IO uint32_t SMR                 : 1;
X    volatile uint32_t SMR                 : 1;
N    __IO uint32_t PRE                 : 1;
X    volatile uint32_t PRE                 : 1;
N    __IO uint32_t WIN                 : 1;
X    volatile uint32_t WIN                 : 1;
N    __IO uint32_t COS                 : 1;
X    volatile uint32_t COS                 : 1;
N    __IO uint32_t FFT                 : 1;
X    volatile uint32_t FFT                 : 1;
N    __IO uint32_t MUL                 : 1;
X    volatile uint32_t MUL                 : 1;
N    __IO uint32_t IFFT                : 1;
X    volatile uint32_t IFFT                : 1;
N    __IO uint32_t ATAN                : 1;
X    volatile uint32_t ATAN                : 1;
N    __IO uint32_t ABS2                : 1;
X    volatile uint32_t ABS2                : 1;
N    __IO uint32_t SQRT                : 1;
X    volatile uint32_t SQRT                : 1;
N    __IO uint32_t FBK                 : 1;
X    volatile uint32_t FBK                 : 1;
N    __IO uint32_t LOG                 : 1;
X    volatile uint32_t LOG                 : 1;
N    __IO uint32_t MAC                 : 1;
X    volatile uint32_t MAC                 : 1;
N    __IO uint32_t FIR                 : 1;
X    volatile uint32_t FIR                 : 1;
N    __IO uint32_t DIV                 : 1;
X    volatile uint32_t DIV                 : 1;
N    __IO uint32_t SMW                 : 1;
X    volatile uint32_t SMW                 : 1;
N         uint32_t RESERVED0           : 4;
N    __IO uint32_t FFT_POINT           : 3;
X    volatile uint32_t FFT_POINT           : 3;
N    __IO uint32_t LOG_CAL             : 1;
X    volatile uint32_t LOG_CAL             : 1;
N    __IO uint32_t LOG_8BIT            : 1;
X    volatile uint32_t LOG_8BIT            : 1;
N    __IO uint32_t BUF_SWAP            : 1;
X    volatile uint32_t BUF_SWAP            : 1;
N         uint32_t RESERVED1           : 6;
N}DEV_UDSP_uDSP_CHNn_CFG0_Field;
N/****DEV_UDSPuDSP_CHNn_CFG0 end****/
N
N/***********************************uDSP_CHNn_CFG1***********************************/
Ntypedef struct{
N
N    __IO uint32_t BANK_NUM            : 16;
X    volatile uint32_t BANK_NUM            : 16;
N    __IO uint32_t MFCC_NUM            : 16;
X    volatile uint32_t MFCC_NUM            : 16;
N}DEV_UDSP_uDSP_CHNn_CFG1_Field;
N/****DEV_UDSPuDSP_CHNn_CFG1 end****/
N
N/***********************************uDSP_EN***********************************/
Ntypedef struct{
N
N    __IO uint32_t CHN_EN              : 8;
X    volatile uint32_t CHN_EN              : 8;
N         uint32_t RESERVED0           : 8;
N    __O  uint32_t CHN_EN_WE           : 8;
X    volatile  uint32_t CHN_EN_WE           : 8;
N         uint32_t RESERVED1           : 8;
N}DEV_UDSP_uDSP_EN_Field;
N/****DEV_UDSPuDSP_EN end****/
N
N/***********************************uDSP_IE***********************************/
Ntypedef struct{
N
N    __IO uint32_t END                 : 8;
X    volatile uint32_t END                 : 8;
N         uint32_t RESERVED0           : 8;
N    __IO uint32_t FFT_BIT31_OF        : 1;
X    volatile uint32_t FFT_BIT31_OF        : 1;
N    __IO uint32_t FFT_BIT32_OF        : 1;
X    volatile uint32_t FFT_BIT32_OF        : 1;
N         uint32_t RESERVED1           : 14;
N}DEV_UDSP_uDSP_IE_Field;
N/****DEV_UDSPuDSP_IE end****/
N
N/***********************************uDSP_PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t END                 : 8;
X    volatile uint32_t END                 : 8;
N         uint32_t RESERVED0           : 8;
N    __IO uint32_t FFT_BIT31_OF        : 1;
X    volatile uint32_t FFT_BIT31_OF        : 1;
N    __IO uint32_t FFT_BIT32_OF        : 1;
X    volatile uint32_t FFT_BIT32_OF        : 1;
N         uint32_t RESERVED1           : 14;
N}DEV_UDSP_uDSP_PD_Field;
N/****DEV_UDSPuDSP_PD end****/
N
N/***********************************uDSP_BIST_CFG***********************************/
Ntypedef struct{
N
N    __IO uint32_t BUF0_RM             : 4;
X    volatile uint32_t BUF0_RM             : 4;
N    __IO uint32_t BUF0_RME            : 1;
X    volatile uint32_t BUF0_RME            : 1;
N    __IO uint32_t BUF0_BIST_LS        : 1;
X    volatile uint32_t BUF0_BIST_LS        : 1;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t BUF1_RM             : 4;
X    volatile uint32_t BUF1_RM             : 4;
N    __IO uint32_t BUF1_RME            : 1;
X    volatile uint32_t BUF1_RME            : 1;
N    __IO uint32_t BUF1_BIST_LS        : 1;
X    volatile uint32_t BUF1_BIST_LS        : 1;
N         uint32_t RESERVED1           : 2;
N         uint32_t RESERVED2           : 16;
N}DEV_UDSP_uDSP_BIST_CFG_Field;
N/****DEV_UDSPuDSP_BIST_CFG end****/
N
N/***********************************uDSP_BIST_EN***********************************/
Ntypedef struct{
N
N    __IO uint32_t BUF0_BIST_EN        : 1;
X    volatile uint32_t BUF0_BIST_EN        : 1;
N    __IO uint32_t BUF1_BIST_EN        : 1;
X    volatile uint32_t BUF1_BIST_EN        : 1;
N         uint32_t RESERVED0           : 30;
N}DEV_UDSP_uDSP_BIST_EN_Field;
N/****DEV_UDSPuDSP_BIST_EN end****/
N
N/***********************************uDSP_BIST_DONE***********************************/
Ntypedef struct{
N
N    __I  uint32_t BUF0_BIST_DONE      : 1;
X    volatile const  uint32_t BUF0_BIST_DONE      : 1;
N    __I  uint32_t BUF1_BIST_DONE      : 1;
X    volatile const  uint32_t BUF1_BIST_DONE      : 1;
N         uint32_t RESERVED0           : 30;
N}DEV_UDSP_uDSP_BIST_DONE_Field;
N/****DEV_UDSPuDSP_BIST_DONE end****/
N
N/***********************************uDSP_BIST_FAIL***********************************/
Ntypedef struct{
N
N    __I  uint32_t BUF0_BIST_FAIL      : 1;
X    volatile const  uint32_t BUF0_BIST_FAIL      : 1;
N    __I  uint32_t BUF1_BIST_FAIL      : 1;
X    volatile const  uint32_t BUF1_BIST_FAIL      : 1;
N         uint32_t RESERVED0           : 30;
N}DEV_UDSP_uDSP_BIST_FAIL_Field;
N/****DEV_UDSPuDSP_BIST_FAIL end****/
N
N/***********************************uDSP_CHN register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    SLA;                                     /* 0x0    uDSP Channel 0 Source Lower ADDR */
X        volatile    uint32_t    SLA;                                      
N        DEV_UDSP_uDSP_CHNn_SLA_Field    SLA_f;
N    };
N    union
N    {
N        __IO    uint32_t    SUA;                                     /* 0x4    uDSP Channel 0 Source Upper ADDR */
X        volatile    uint32_t    SUA;                                      
N        DEV_UDSP_uDSP_CHNn_SUA_Field    SUA_f;
N    };
N    union
N    {
N        __IO    uint32_t    SCA;                                     /* 0x8    uDSP Channel 0 Source Current ADDR */
X        volatile    uint32_t    SCA;                                      
N        DEV_UDSP_uDSP_CHNn_SCA_Field    SCA_f;
N    };
N    union
N    {
N        __IO    uint32_t    SMF;                                     /* 0xc    uDSP Channel 0 Source Memory Format */
X        volatile    uint32_t    SMF;                                      
N        DEV_UDSP_uDSP_CHNn_SMF_Field    SMF_f;
N    };
N    union
N    {
N        __IO    uint32_t    DLA;                                     /* 0x10    uDSP Channel 0 Destination Lower ADDR */
X        volatile    uint32_t    DLA;                                      
N        DEV_UDSP_uDSP_CHNn_DLA_Field    DLA_f;
N    };
N    union
N    {
N        __IO    uint32_t    DUA;                                     /* 0x14    uDSP Channel 0 Destination Upper ADDR */
X        volatile    uint32_t    DUA;                                      
N        DEV_UDSP_uDSP_CHNn_DUA_Field    DUA_f;
N    };
N    union
N    {
N        __IO    uint32_t    DCA;                                     /* 0x18    uDSP Channel 0 Destination Current ADDR */
X        volatile    uint32_t    DCA;                                      
N        DEV_UDSP_uDSP_CHNn_DCA_Field    DCA_f;
N    };
N    union
N    {
N        __IO    uint32_t    DMF;                                     /* 0x1c    uDSP Channel 0 Destination Memory Format */
X        volatile    uint32_t    DMF;                                      
N        DEV_UDSP_uDSP_CHNn_DMF_Field    DMF_f;
N    };
N    union
N    {
N        __IO    uint32_t    LMF0;                                    /* 0x20    uDSP Channel 0 Local Memory Format 0 */
X        volatile    uint32_t    LMF0;                                     
N        DEV_UDSP_uDSP_CHNn_LMF0_Field    LMF0_f;
N    };
N    union
N    {
N        __IO    uint32_t    LMF1;                                    /* 0x24    uDSP Channel 0 Local Memory Format 1 */
X        volatile    uint32_t    LMF1;                                     
N        DEV_UDSP_uDSP_CHNn_LMF1_Field    LMF1_f;
N    };
N    union
N    {
N        __IO    uint32_t    LMF2;                                    /* 0x28    uDSP Channel 0 Local Memory Format 2 */
X        volatile    uint32_t    LMF2;                                     
N        DEV_UDSP_uDSP_CHNn_LMF2_Field    LMF2_f;
N    };
N    union
N    {
N        __IO    uint32_t    LMF3;                                    /* 0x2c    uDSP Channel 0 Local Memory Format 3 */
X        volatile    uint32_t    LMF3;                                     
N        DEV_UDSP_uDSP_CHNn_LMF3_Field    LMF3_f;
N    };
N    union
N    {
N        __IO    uint32_t    LMF4;                                    /* 0x30    uDSP Channel 0 Local Memory Format 4 */
X        volatile    uint32_t    LMF4;                                     
N        DEV_UDSP_uDSP_CHNn_LMF4_Field    LMF4_f;
N    };
N    uint32_t    RESERVED0[19];
N    union
N    {
N        __IO    uint32_t    CFG0;                                    /* 0x80    uDSP Channel 0 Configure 0 */
X        volatile    uint32_t    CFG0;                                     
N        DEV_UDSP_uDSP_CHNn_CFG0_Field    CFG0_f;
N    };
N    union
N    {
N        __IO    uint32_t    CFG1;                                    /* 0x84    uDSP Channel 0 Configure 1 */
X        volatile    uint32_t    CFG1;                                     
N        DEV_UDSP_uDSP_CHNn_CFG1_Field    CFG1_f;
N    };
N    uint32_t    RESERVED1[30];
N}uDSP_CHN_RegDef_f;
N/****uDSP_CHN end****/
N
N/***********************************DEV_UDSP register***********************************/
Ntypedef struct{
N
N    union
N    {
N        uDSP_CHN_RegDef_f    CHN[8];                                  /* 0x0    uDSP Channel 0 Source Lower ADDR */
N    };
N    uint32_t    RESERVED0[512];
N    union
N    {
N        __IO    uint32_t    EN;                                      /* 0x1000    uDSP Channel 1 Source Upper ADDR */
X        volatile    uint32_t    EN;                                       
N        DEV_UDSP_uDSP_EN_Field    EN_f;
N    };
N    union
N    {
N        __IO    uint32_t    IE;                                      /* 0x1004    uDSP Channel 1 Source Memory Format */
X        volatile    uint32_t    IE;                                       
N        DEV_UDSP_uDSP_IE_Field    IE_f;
N    };
N    union
N    {
N        __IO    uint32_t    PD;                                      /* 0x1008    uDSP Channel 1 Destination Upper ADDR */
X        volatile    uint32_t    PD;                                       
N        DEV_UDSP_uDSP_PD_Field    PD_f;
N    };
N    uint32_t    RESERVED1[1021];
N    union
N    {
N        __IO    uint32_t    BIST_CFG;                                /* 0x2000    uDSP Channel 1 Destination Memory Format */
X        volatile    uint32_t    BIST_CFG;                                 
N        DEV_UDSP_uDSP_BIST_CFG_Field    BIST_CFG_f;
N    };
N    union
N    {
N        __IO    uint32_t    BIST_EN;                                 /* 0x2004    uDSP Channel 1 Local Memory Format 1 */
X        volatile    uint32_t    BIST_EN;                                  
N        DEV_UDSP_uDSP_BIST_EN_Field    BIST_EN_f;
N    };
N    union
N    {
N        __I     uint32_t    BIST_DONE;                               /* 0x2008    uDSP Channel 1 Local Memory Format 3 */
X        volatile const     uint32_t    BIST_DONE;                                
N        DEV_UDSP_uDSP_BIST_DONE_Field    BIST_DONE_f;
N    };
N    union
N    {
N        __I     uint32_t    BIST_FAIL;                               /* 0x200c    uDSP Channel 1 Configure 0 */
X        volatile const     uint32_t    BIST_FAIL;                                
N        DEV_UDSP_uDSP_BIST_FAIL_Field    BIST_FAIL_f;
N    };
N}DEV_UDSP_RegDef_f;
N/****DEV_UDSP end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 4 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N//#include "dev_dmac_field.h"
N#include "dev_npu_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_npu_field.h" 1
N#ifndef __DEV_NPU_FIELD_H__
N#define __DEV_NPU_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************DBG***********************************/
Ntypedef struct{
N
N    __I  uint32_t TOP_STATE           : 3;
X    volatile const  uint32_t TOP_STATE           : 3;
N    __I  uint32_t LOOP_INC            : 1;
X    volatile const  uint32_t LOOP_INC            : 1;
N    __I  uint32_t FSB1ST_DIM3         : 1;
X    volatile const  uint32_t FSB1ST_DIM3         : 1;
N    __I  uint32_t FSBLAST_DIM3        : 1;
X    volatile const  uint32_t FSBLAST_DIM3        : 1;
N    __I  uint32_t FSB1ST_DIM4         : 1;
X    volatile const  uint32_t FSB1ST_DIM4         : 1;
N    __I  uint32_t FSBLAST_DIM4        : 1;
X    volatile const  uint32_t FSBLAST_DIM4        : 1;
N    __I  uint32_t PREF_STATE          : 3;
X    volatile const  uint32_t PREF_STATE          : 3;
N    __I  uint32_t LYIDX               : 15;
X    volatile const  uint32_t LYIDX               : 15;
N    __I  uint32_t NPU_REQ             : 1;
X    volatile const  uint32_t NPU_REQ             : 1;
N    __I  uint32_t CONV_STATE          : 3;
X    volatile const  uint32_t CONV_STATE          : 3;
N    __I  uint32_t ACTV_STATE          : 2;
X    volatile const  uint32_t ACTV_STATE          : 2;
N}DEV_NPU_DBG_Field;
N/****DEV_NPUDBG end****/
N
N/***********************************PKL_ADR***********************************/
Ntypedef struct{
N
N    __IO uint32_t PKL_ADR             : 32;
X    volatile uint32_t PKL_ADR             : 32;
N}DEV_NPU_PKL_ADR_Field;
N/****DEV_NPUPKL_ADR end****/
N
N/***********************************PKU_ADR***********************************/
Ntypedef struct{
N
N    __IO uint32_t PKU_ADR             : 32;
X    volatile uint32_t PKU_ADR             : 32;
N}DEV_NPU_PKU_ADR_Field;
N/****DEV_NPUPKU_ADR end****/
N
N/***********************************PKC_ADR***********************************/
Ntypedef struct{
N
N    __IO uint32_t PKC_ADR             : 32;
X    volatile uint32_t PKC_ADR             : 32;
N}DEV_NPU_PKC_ADR_Field;
N/****DEV_NPUPKC_ADR end****/
N
N/***********************************MDL_ADR***********************************/
Ntypedef struct{
N
N    __IO uint32_t MDL_ADR             : 32;
X    volatile uint32_t MDL_ADR             : 32;
N}DEV_NPU_MDL_ADR_Field;
N/****DEV_NPUMDL_ADR end****/
N
N/***********************************PING_ADR***********************************/
Ntypedef struct{
N
N    __IO uint32_t PING_ADR            : 32;
X    volatile uint32_t PING_ADR            : 32;
N}DEV_NPU_PING_ADR_Field;
N/****DEV_NPUPING_ADR end****/
N
N/***********************************PONG_ADR***********************************/
Ntypedef struct{
N
N    __IO uint32_t PONG_ADR            : 32;
X    volatile uint32_t PONG_ADR            : 32;
N}DEV_NPU_PONG_ADR_Field;
N/****DEV_NPUPONG_ADR end****/
N
N/***********************************PPLEN***********************************/
Ntypedef struct{
N
N    __IO uint32_t PPLEN               : 32;
X    volatile uint32_t PPLEN               : 32;
N}DEV_NPU_PPLEN_Field;
N/****DEV_NPUPPLEN end****/
N
N/***********************************BIA_ADR***********************************/
Ntypedef struct{
N
N    __IO uint32_t BIA_ADR             : 32;
X    volatile uint32_t BIA_ADR             : 32;
N}DEV_NPU_BIA_ADR_Field;
N/****DEV_NPUBIA_ADR end****/
N
N/***********************************RES_ADR***********************************/
Ntypedef struct{
N
N    __IO uint32_t RES_ADR             : 32;
X    volatile uint32_t RES_ADR             : 32;
N}DEV_NPU_RES_ADR_Field;
N/****DEV_NPURES_ADR end****/
N
N/***********************************EN***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N         uint32_t RESERVED0           : 31;
N}DEV_NPU_EN_Field;
N/****DEV_NPUEN end****/
N
N/***********************************IE***********************************/
Ntypedef struct{
N
N    __IO uint32_t RES_IE              : 1;
X    volatile uint32_t RES_IE              : 1;
N    __IO uint32_t TAB_IE              : 1;
X    volatile uint32_t TAB_IE              : 1;
N         uint32_t RESERVED0           : 30;
N}DEV_NPU_IE_Field;
N/****DEV_NPUIE end****/
N
N/***********************************PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t RES_PD              : 1;
X    volatile uint32_t RES_PD              : 1;
N    __IO uint32_t TAB_PD              : 1;
X    volatile uint32_t TAB_PD              : 1;
N         uint32_t RESERVED0           : 30;
N}DEV_NPU_PD_Field;
N/****DEV_NPUPD end****/
N
N/***********************************MBK***********************************/
Ntypedef struct{
N
N         uint32_t RESERVED0           : 14;
N    __IO uint32_t SKIPIN              : 1;
X    volatile uint32_t SKIPIN              : 1;
N    __IO uint32_t SKIPOU              : 1;
X    volatile uint32_t SKIPOU              : 1;
N    __IO uint32_t BSID                : 8;
X    volatile uint32_t BSID                : 8;
N    __IO uint32_t BSSPAN              : 8;
X    volatile uint32_t BSSPAN              : 8;
N}DEV_NPU_MBK_Field;
N/****DEV_NPUMBK end****/
N
N/***********************************PPRDY***********************************/
Ntypedef struct{
N
N    __IO uint32_t PPRDY               : 1;
X    volatile uint32_t PPRDY               : 1;
N         uint32_t RESERVED0           : 30;
N}DEV_NPU_PPRDY_Field;
N/****DEV_NPUPPRDY end****/
N
N/***********************************RAM***********************************/
Ntypedef struct{
N
N    __IO uint32_t RM                  : 4;
X    volatile uint32_t RM                  : 4;
N    __IO uint32_t RME                 : 1;
X    volatile uint32_t RME                 : 1;
N    __IO uint32_t LS                  : 1;
X    volatile uint32_t LS                  : 1;
N         uint32_t RESERVED0           : 26;
N}DEV_NPU_RAM_Field;
N/****DEV_NPURAM end****/
N
N/***********************************BIST_TEST***********************************/
Ntypedef struct{
N
N    __IO uint32_t BTEST               : 1;
X    volatile uint32_t BTEST               : 1;
N         uint32_t RESERVED0           : 31;
N}DEV_NPU_BIST_TEST_Field;
N/****DEV_NPUBIST_TEST end****/
N
N/***********************************BIST_DONE***********************************/
Ntypedef struct{
N
N    __I  uint32_t BDONE               : 1;
X    volatile const  uint32_t BDONE               : 1;
N         uint32_t RESERVED0           : 31;
N}DEV_NPU_BIST_DONE_Field;
N/****DEV_NPUBIST_DONE end****/
N
N/***********************************BIST_FAIL***********************************/
Ntypedef struct{
N
N    __I  uint32_t BFAIL               : 1;
X    volatile const  uint32_t BFAIL               : 1;
N         uint32_t RESERVED0           : 31;
N}DEV_NPU_BIST_FAIL_Field;
N/****DEV_NPUBIST_FAIL end****/
N
N/***********************************WCYC***********************************/
Ntypedef struct{
N
N    __IO uint32_t WCYC                : 32;
X    volatile uint32_t WCYC                : 32;
N}DEV_NPU_WCYC_Field;
N/****DEV_NPUWCYC end****/
N
N/***********************************TCYC***********************************/
Ntypedef struct{
N
N    __IO uint32_t TCYC                : 32;
X    volatile uint32_t TCYC                : 32;
N}DEV_NPU_TCYC_Field;
N/****DEV_NPUTCYC end****/
N
N/***********************************DEV_NPU register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __I     uint32_t    DBG;                                     /* 0x0    Debug signals */
X        volatile const     uint32_t    DBG;                                      
N        DEV_NPU_DBG_Field    DBG_f;
N    };
N    union
N    {
N        __IO    uint32_t    PKL_ADR;                                 /* 0x4    Input packet buffer low address, inclusive, align with 4 */
X        volatile    uint32_t    PKL_ADR;                                  
N        DEV_NPU_PKL_ADR_Field    PKL_ADR_f;
N    };
N    union
N    {
N        __IO    uint32_t    PKU_ADR;                                 /* 0x8    Input packet buffer upper address, exclusive, align with 4 */
X        volatile    uint32_t    PKU_ADR;                                  
N        DEV_NPU_PKU_ADR_Field    PKU_ADR_f;
N    };
N    union
N    {
N        __IO    uint32_t    PKC_ADR;                                 /* 0xc    Input packet current address, align with 4 */
X        volatile    uint32_t    PKC_ADR;                                  
N        DEV_NPU_PKC_ADR_Field    PKC_ADR_f;
N    };
N    union
N    {
N        __IO    uint32_t    MDL_ADR;                                 /* 0x10    MDL address, align with 4 */
X        volatile    uint32_t    MDL_ADR;                                  
N        DEV_NPU_MDL_ADR_Field    MDL_ADR_f;
N    };
N    union
N    {
N        __IO    uint32_t    PING_ADR;                                /* 0x14    Ping address, align with 4 */
X        volatile    uint32_t    PING_ADR;                                 
N        DEV_NPU_PING_ADR_Field    PING_ADR_f;
N    };
N    union
N    {
N        __IO    uint32_t    PONG_ADR;                                /* 0x18    Pong address, align with 4 */
X        volatile    uint32_t    PONG_ADR;                                 
N        DEV_NPU_PONG_ADR_Field    PONG_ADR_f;
N    };
N    union
N    {
N        __IO    uint32_t    PPLEN;                                   /* 0x1c    Ping/pong buffer length in byte, align with 4 */
X        volatile    uint32_t    PPLEN;                                    
N        DEV_NPU_PPLEN_Field    PPLEN_f;
N    };
N    union
N    {
N        __IO    uint32_t    BIA_ADR;                                 /* 0x20    Bias address, align with 4 */
X        volatile    uint32_t    BIA_ADR;                                  
N        DEV_NPU_BIA_ADR_Field    BIA_ADR_f;
N    };
N    union
N    {
N        __IO    uint32_t    RES_ADR;                                 /* 0x24    Result address, align with 4 */
X        volatile    uint32_t    RES_ADR;                                  
N        DEV_NPU_RES_ADR_Field    RES_ADR_f;
N    };
N    union
N    {
N        __IO    uint32_t    EN;                                      /* 0x28    NPU enable */
X        volatile    uint32_t    EN;                                       
N        DEV_NPU_EN_Field    EN_f;
N    };
N    union
N    {
N        __IO    uint32_t    IE;                                      /* 0x2c    Interrupt enable */
X        volatile    uint32_t    IE;                                       
N        DEV_NPU_IE_Field    IE_f;
N    };
N    union
N    {
N        __IO    uint32_t    PD;                                      /* 0x30    Interrupt pending */
X        volatile    uint32_t    PD;                                       
N        DEV_NPU_PD_Field    PD_f;
N    };
N    union
N    {
N        __IO    uint32_t    MBK;                                     /* 0x34    MBK settings */
X        volatile    uint32_t    MBK;                                      
N        DEV_NPU_MBK_Field    MBK_f;
N    };
N    union
N    {
N        __IO    uint32_t    PPRDY;                                   /* 0x38    Ping/pong ready */
X        volatile    uint32_t    PPRDY;                                    
N        DEV_NPU_PPRDY_Field    PPRDY_f;
N    };
N    union
N    {
N        __IO    uint32_t    RAM;                                     /* 0x3c    Sram rm/rme settings */
X        volatile    uint32_t    RAM;                                      
N        DEV_NPU_RAM_Field    RAM_f;
N    };
N    union
N    {
N        __IO    uint32_t    BIST_TEST;                               /* 0x40    Bist Start */
X        volatile    uint32_t    BIST_TEST;                                
N        DEV_NPU_BIST_TEST_Field    BIST_TEST_f;
N    };
N    union
N    {
N        __I     uint32_t    BIST_DONE;                               /* 0x44    Bist Done */
X        volatile const     uint32_t    BIST_DONE;                                
N        DEV_NPU_BIST_DONE_Field    BIST_DONE_f;
N    };
N    union
N    {
N        __I     uint32_t    BIST_FAIL;                               /* 0x48    Bist Fail */
X        volatile const     uint32_t    BIST_FAIL;                                
N        DEV_NPU_BIST_FAIL_Field    BIST_FAIL_f;
N    };
N    union
N    {
N        __IO    uint32_t    WCYC;                                    /* 0x4c    Wait-for-knl cycle counter */
X        volatile    uint32_t    WCYC;                                     
N        DEV_NPU_WCYC_Field    WCYC_f;
N    };
N    union
N    {
N        __IO    uint32_t    TCYC;                                    /* 0x50    Total working cycle counter */
X        volatile    uint32_t    TCYC;                                     
N        DEV_NPU_TCYC_Field    TCYC_f;
N    };
N}DEV_NPU_RegDef_f;
N/****DEV_NPU end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 6 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_memc_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_memc_field.h" 1
N#ifndef __DEV_MEMC_FIELD_H__
N#define __DEV_MEMC_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************RAM0_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t RM                  : 4;
X    volatile uint32_t RM                  : 4;
N    __IO uint32_t RME                 : 1;
X    volatile uint32_t RME                 : 1;
N    __IO uint32_t TEST1               : 1;
X    volatile uint32_t TEST1               : 1;
N    __IO uint32_t LS                  : 1;
X    volatile uint32_t LS                  : 1;
N         uint32_t RESERVED0           : 25;
N}DEV_MEMC_RAM0_CTL_Field;
N/****DEV_MEMCRAM0_CTL end****/
N
N/***********************************RAM1_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t RM                  : 4;
X    volatile uint32_t RM                  : 4;
N    __IO uint32_t RME                 : 1;
X    volatile uint32_t RME                 : 1;
N    __IO uint32_t TEST1               : 1;
X    volatile uint32_t TEST1               : 1;
N    __IO uint32_t LS                  : 1;
X    volatile uint32_t LS                  : 1;
N         uint32_t RESERVED0           : 25;
N}DEV_MEMC_RAM1_CTL_Field;
N/****DEV_MEMCRAM1_CTL end****/
N
N/***********************************RAM2_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t RM                  : 4;
X    volatile uint32_t RM                  : 4;
N    __IO uint32_t RME                 : 1;
X    volatile uint32_t RME                 : 1;
N    __IO uint32_t TEST1               : 1;
X    volatile uint32_t TEST1               : 1;
N    __IO uint32_t LS                  : 1;
X    volatile uint32_t LS                  : 1;
N         uint32_t RESERVED0           : 25;
N}DEV_MEMC_RAM2_CTL_Field;
N/****DEV_MEMCRAM2_CTL end****/
N
N/***********************************RAM3_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t RM                  : 4;
X    volatile uint32_t RM                  : 4;
N    __IO uint32_t RME                 : 1;
X    volatile uint32_t RME                 : 1;
N    __IO uint32_t TEST1               : 1;
X    volatile uint32_t TEST1               : 1;
N    __IO uint32_t LS                  : 1;
X    volatile uint32_t LS                  : 1;
N         uint32_t RESERVED0           : 25;
N}DEV_MEMC_RAM3_CTL_Field;
N/****DEV_MEMCRAM3_CTL end****/
N
N/***********************************RAM4_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t RM                  : 4;
X    volatile uint32_t RM                  : 4;
N    __IO uint32_t RME                 : 1;
X    volatile uint32_t RME                 : 1;
N    __IO uint32_t TEST1               : 1;
X    volatile uint32_t TEST1               : 1;
N    __IO uint32_t LS                  : 1;
X    volatile uint32_t LS                  : 1;
N         uint32_t RESERVED0           : 25;
N}DEV_MEMC_RAM4_CTL_Field;
N/****DEV_MEMCRAM4_CTL end****/
N
N/***********************************RAM5_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t RM                  : 4;
X    volatile uint32_t RM                  : 4;
N    __IO uint32_t RME                 : 1;
X    volatile uint32_t RME                 : 1;
N    __IO uint32_t TEST1               : 1;
X    volatile uint32_t TEST1               : 1;
N    __IO uint32_t LS                  : 1;
X    volatile uint32_t LS                  : 1;
N         uint32_t RESERVED0           : 25;
N}DEV_MEMC_RAM5_CTL_Field;
N/****DEV_MEMCRAM5_CTL end****/
N
N/***********************************RAM6_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t RM                  : 4;
X    volatile uint32_t RM                  : 4;
N    __IO uint32_t RME                 : 1;
X    volatile uint32_t RME                 : 1;
N    __IO uint32_t TEST1               : 1;
X    volatile uint32_t TEST1               : 1;
N    __IO uint32_t LS                  : 1;
X    volatile uint32_t LS                  : 1;
N         uint32_t RESERVED0           : 25;
N}DEV_MEMC_RAM6_CTL_Field;
N/****DEV_MEMCRAM6_CTL end****/
N
N/***********************************RAM7_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t RM                  : 4;
X    volatile uint32_t RM                  : 4;
N    __IO uint32_t RME                 : 1;
X    volatile uint32_t RME                 : 1;
N    __IO uint32_t TEST1               : 1;
X    volatile uint32_t TEST1               : 1;
N    __IO uint32_t LS                  : 1;
X    volatile uint32_t LS                  : 1;
N         uint32_t RESERVED0           : 25;
N}DEV_MEMC_RAM7_CTL_Field;
N/****DEV_MEMCRAM7_CTL end****/
N
N/***********************************ILM_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t RM                  : 4;
X    volatile uint32_t RM                  : 4;
N    __IO uint32_t RME                 : 1;
X    volatile uint32_t RME                 : 1;
N    __IO uint32_t TEST1               : 1;
X    volatile uint32_t TEST1               : 1;
N    __IO uint32_t LS                  : 1;
X    volatile uint32_t LS                  : 1;
N    __IO uint32_t BROM_WDIS           : 1;
X    volatile uint32_t BROM_WDIS           : 1;
N         uint32_t RESERVED0           : 24;
N}DEV_MEMC_ILM_CTL_Field;
N/****DEV_MEMCILM_CTL end****/
N
N/***********************************DLM_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t RM                  : 4;
X    volatile uint32_t RM                  : 4;
N    __IO uint32_t RME                 : 1;
X    volatile uint32_t RME                 : 1;
N    __IO uint32_t TEST1               : 1;
X    volatile uint32_t TEST1               : 1;
N    __IO uint32_t LS                  : 1;
X    volatile uint32_t LS                  : 1;
N         uint32_t RESERVED0           : 25;
N}DEV_MEMC_DLM_CTL_Field;
N/****DEV_MEMCDLM_CTL end****/
N
N/***********************************BTB_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t RM                  : 4;
X    volatile uint32_t RM                  : 4;
N    __IO uint32_t RME                 : 1;
X    volatile uint32_t RME                 : 1;
N    __IO uint32_t TEST1               : 1;
X    volatile uint32_t TEST1               : 1;
N    __IO uint32_t LS                  : 1;
X    volatile uint32_t LS                  : 1;
N         uint32_t RESERVED0           : 25;
N}DEV_MEMC_BTB_CTL_Field;
N/****DEV_MEMCBTB_CTL end****/
N
N/***********************************ICACHE_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t RM                  : 4;
X    volatile uint32_t RM                  : 4;
N    __IO uint32_t RME                 : 1;
X    volatile uint32_t RME                 : 1;
N    __IO uint32_t TEST1               : 1;
X    volatile uint32_t TEST1               : 1;
N    __IO uint32_t LS                  : 1;
X    volatile uint32_t LS                  : 1;
N         uint32_t RESERVED0           : 25;
N}DEV_MEMC_ICACHE_CTL_Field;
N/****DEV_MEMCICACHE_CTL end****/
N
N/***********************************DCACHE_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t RM                  : 4;
X    volatile uint32_t RM                  : 4;
N    __IO uint32_t RME                 : 1;
X    volatile uint32_t RME                 : 1;
N    __IO uint32_t TEST1               : 1;
X    volatile uint32_t TEST1               : 1;
N    __IO uint32_t LS                  : 1;
X    volatile uint32_t LS                  : 1;
N         uint32_t RESERVED0           : 25;
N}DEV_MEMC_DCACHE_CTL_Field;
N/****DEV_MEMCDCACHE_CTL end****/
N
N/***********************************RAM_SEL0***********************************/
Ntypedef struct{
N
N    __IO uint32_t MEM_SEL             : 32;
X    volatile uint32_t MEM_SEL             : 32;
N}DEV_MEMC_RAM_SEL0_Field;
N/****DEV_MEMCRAM_SEL0 end****/
N
N/***********************************RAM_SEL1***********************************/
Ntypedef struct{
N
N    __IO uint32_t MEM_SEL             : 32;
X    volatile uint32_t MEM_SEL             : 32;
N}DEV_MEMC_RAM_SEL1_Field;
N/****DEV_MEMCRAM_SEL1 end****/
N
N/***********************************BIST_TEST***********************************/
Ntypedef struct{
N
N    __IO uint32_t SYS_RAM             : 8;
X    volatile uint32_t SYS_RAM             : 8;
N    __IO uint32_t CPU_RAM             : 6;
X    volatile uint32_t CPU_RAM             : 6;
N    __IO uint32_t USB_RAM             : 1;
X    volatile uint32_t USB_RAM             : 1;
N         uint32_t RESERVED0           : 17;
N}DEV_MEMC_BIST_TEST_Field;
N/****DEV_MEMCBIST_TEST end****/
N
N/***********************************BIST_DONE***********************************/
Ntypedef struct{
N
N    __I  uint32_t SYS_RAM             : 8;
X    volatile const  uint32_t SYS_RAM             : 8;
N    __I  uint32_t CPU_RAM             : 6;
X    volatile const  uint32_t CPU_RAM             : 6;
N    __I  uint32_t USB_RAM             : 1;
X    volatile const  uint32_t USB_RAM             : 1;
N         uint32_t RESERVED0           : 17;
N}DEV_MEMC_BIST_DONE_Field;
N/****DEV_MEMCBIST_DONE end****/
N
N/***********************************BIST_FAIL***********************************/
Ntypedef struct{
N
N    __I  uint32_t SYS_RAM             : 8;
X    volatile const  uint32_t SYS_RAM             : 8;
N    __I  uint32_t CPU_RAM             : 6;
X    volatile const  uint32_t CPU_RAM             : 6;
N    __I  uint32_t USB_RAM             : 1;
X    volatile const  uint32_t USB_RAM             : 1;
N         uint32_t RESERVED0           : 17;
N}DEV_MEMC_BIST_FAIL_Field;
N/****DEV_MEMCBIST_FAIL end****/
N
N/***********************************DEV_MEMC register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    RAM0_CTL;                                /* 0x0    RAM0 Control */
X        volatile    uint32_t    RAM0_CTL;                                 
N        DEV_MEMC_RAM0_CTL_Field    RAM0_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    RAM1_CTL;                                /* 0x4    RAM1 Control */
X        volatile    uint32_t    RAM1_CTL;                                 
N        DEV_MEMC_RAM1_CTL_Field    RAM1_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    RAM2_CTL;                                /* 0x8    RAM2 Control */
X        volatile    uint32_t    RAM2_CTL;                                 
N        DEV_MEMC_RAM2_CTL_Field    RAM2_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    RAM3_CTL;                                /* 0xc    RAM3 Control */
X        volatile    uint32_t    RAM3_CTL;                                 
N        DEV_MEMC_RAM3_CTL_Field    RAM3_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    RAM4_CTL;                                /* 0x10    RAM4 Control */
X        volatile    uint32_t    RAM4_CTL;                                 
N        DEV_MEMC_RAM4_CTL_Field    RAM4_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    RAM5_CTL;                                /* 0x14    RAM5 Control */
X        volatile    uint32_t    RAM5_CTL;                                 
N        DEV_MEMC_RAM5_CTL_Field    RAM5_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    RAM6_CTL;                                /* 0x18    RAM6 Control */
X        volatile    uint32_t    RAM6_CTL;                                 
N        DEV_MEMC_RAM6_CTL_Field    RAM6_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    RAM7_CTL;                                /* 0x1c    RAM7 Control */
X        volatile    uint32_t    RAM7_CTL;                                 
N        DEV_MEMC_RAM7_CTL_Field    RAM7_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    ILM_CTL;                                 /* 0x20    ILM RAM Control */
X        volatile    uint32_t    ILM_CTL;                                  
N        DEV_MEMC_ILM_CTL_Field    ILM_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    DLM_CTL;                                 /* 0x24    DLM RAM Control */
X        volatile    uint32_t    DLM_CTL;                                  
N        DEV_MEMC_DLM_CTL_Field    DLM_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    BTB_CTL;                                 /* 0x28    BTB RAM Control */
X        volatile    uint32_t    BTB_CTL;                                  
N        DEV_MEMC_BTB_CTL_Field    BTB_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    ICACHE_CTL;                              /* 0x2c    ICache RAM Control */
X        volatile    uint32_t    ICACHE_CTL;                               
N        DEV_MEMC_ICACHE_CTL_Field    ICACHE_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    DCACHE_CTL;                              /* 0x30    DCache RAM Control */
X        volatile    uint32_t    DCACHE_CTL;                               
N        DEV_MEMC_DCACHE_CTL_Field    DCACHE_CTL_f;
N    };
N    uint32_t    RESERVED0[3];
N    union
N    {
N        __IO    uint32_t    RAM_SEL0;                                /* 0x40    RAM0 SEL */
X        volatile    uint32_t    RAM_SEL0;                                 
N        DEV_MEMC_RAM_SEL0_Field    RAM_SEL0_f;
N    };
N    union
N    {
N        __IO    uint32_t    RAM_SEL1;                                /* 0x44    RAM1 SEL */
X        volatile    uint32_t    RAM_SEL1;                                 
N        DEV_MEMC_RAM_SEL1_Field    RAM_SEL1_f;
N    };
N    uint32_t    RESERVED1[2];
N    union
N    {
N        __IO    uint32_t    BIST_TEST;                               /* 0x50    Bist Start */
X        volatile    uint32_t    BIST_TEST;                                
N        DEV_MEMC_BIST_TEST_Field    BIST_TEST_f;
N    };
N    union
N    {
N        __I     uint32_t    BIST_DONE;                               /* 0x54    Bist Done */
X        volatile const     uint32_t    BIST_DONE;                                
N        DEV_MEMC_BIST_DONE_Field    BIST_DONE_f;
N    };
N    union
N    {
N        __I     uint32_t    BIST_FAIL;                               /* 0x58    Bist Fail */
X        volatile const     uint32_t    BIST_FAIL;                                
N        DEV_MEMC_BIST_FAIL_Field    BIST_FAIL_f;
N    };
N}DEV_MEMC_RegDef_f;
N/****DEV_MEMC end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 7 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_cache_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_cache_field.h" 1
N#ifndef __DEV_CACHE_FIELD_H__
N#define __DEV_CACHE_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************RAM_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t RM                  : 4;
X    volatile uint32_t RM                  : 4;
N    __IO uint32_t RME                 : 1;
X    volatile uint32_t RME                 : 1;
N    __IO uint32_t LS                  : 1;
X    volatile uint32_t LS                  : 1;
N    __IO uint32_t TEST1               : 1;
X    volatile uint32_t TEST1               : 1;
N         uint32_t RESERVED0           : 25;
N}DEV_CACHE_RAM_CTL_Field;
N/****DEV_CACHERAM_CTL end****/
N
N/***********************************BIST_TEST***********************************/
Ntypedef struct{
N
N    __IO uint32_t BIST_TEST           : 1;
X    volatile uint32_t BIST_TEST           : 1;
N         uint32_t RESERVED0           : 31;
N}DEV_CACHE_BIST_TEST_Field;
N/****DEV_CACHEBIST_TEST end****/
N
N/***********************************BIST_DONE***********************************/
Ntypedef struct{
N
N    __IO uint32_t BIST_DONE           : 1;
X    volatile uint32_t BIST_DONE           : 1;
N         uint32_t RESERVED0           : 31;
N}DEV_CACHE_BIST_DONE_Field;
N/****DEV_CACHEBIST_DONE end****/
N
N/***********************************BIST_FAIL***********************************/
Ntypedef struct{
N
N    __IO uint32_t BIST_FAIL           : 1;
X    volatile uint32_t BIST_FAIL           : 1;
N         uint32_t RESERVED0           : 31;
N}DEV_CACHE_BIST_FAIL_Field;
N/****DEV_CACHEBIST_FAIL end****/
N
N/***********************************DEV_CACHE register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    RAM_CTL;                                 /* 0x0    RAM Control */
X        volatile    uint32_t    RAM_CTL;                                  
N        DEV_CACHE_RAM_CTL_Field    RAM_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    BIST_TEST;                               /* 0x4    Bist Start */
X        volatile    uint32_t    BIST_TEST;                                
N        DEV_CACHE_BIST_TEST_Field    BIST_TEST_f;
N    };
N    union
N    {
N        __IO    uint32_t    BIST_DONE;                               /* 0x8    Bist Done */
X        volatile    uint32_t    BIST_DONE;                                
N        DEV_CACHE_BIST_DONE_Field    BIST_DONE_f;
N    };
N    union
N    {
N        __IO    uint32_t    BIST_FAIL;                               /* 0xc    Bist Fail */
X        volatile    uint32_t    BIST_FAIL;                                
N        DEV_CACHE_BIST_FAIL_Field    BIST_FAIL_f;
N    };
N}DEV_CACHE_RegDef_f;
N/****DEV_CACHE end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 8 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_norc_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_norc_field.h" 1
N#ifndef __DEV_NORC_FIELD_H__
N#define __DEV_NORC_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t SPI_WIDTH           : 2;
X    volatile uint32_t SPI_WIDTH           : 2;
N    __IO uint32_t ADR_MODE            : 1;
X    volatile uint32_t ADR_MODE            : 1;
N    __IO uint32_t FAST_MODE           : 1;
X    volatile uint32_t FAST_MODE           : 1;
N    __IO uint32_t DIO_MODE            : 1;
X    volatile uint32_t DIO_MODE            : 1;
N    __IO uint32_t DDR_MODE            : 1;
X    volatile uint32_t DDR_MODE            : 1;
N    __IO uint32_t WAIT_CYCLE          : 2;
X    volatile uint32_t WAIT_CYCLE          : 2;
N    __IO uint32_t DUMY_CYCLE          : 4;
X    volatile uint32_t DUMY_CYCLE          : 4;
N    __IO uint32_t DELAY_CHAIN         : 5;
X    volatile uint32_t DELAY_CHAIN         : 5;
N    __IO uint32_t HOLD_MODE           : 1;
X    volatile uint32_t HOLD_MODE           : 1;
N    __IO uint32_t HOLD_CYCLE          : 2;
X    volatile uint32_t HOLD_CYCLE          : 2;
N    __IO uint32_t STOP_CYCLE          : 2;
X    volatile uint32_t STOP_CYCLE          : 2;
N    __IO uint32_t SPI_MODE            : 2;
X    volatile uint32_t SPI_MODE            : 2;
N    __IO uint32_t NOR_WAIT            : 1;
X    volatile uint32_t NOR_WAIT            : 1;
N    __IO uint32_t PREF_EN             : 1;
X    volatile uint32_t PREF_EN             : 1;
N    __IO uint32_t PREF_MODE           : 1;
X    volatile uint32_t PREF_MODE           : 1;
N    __IO uint32_t UNCA_CONT           : 1;
X    volatile uint32_t UNCA_CONT           : 1;
N    __IO uint32_t CACH_CONT           : 1;
X    volatile uint32_t CACH_CONT           : 1;
N    __IO uint32_t SOFT_CONT           : 1;
X    volatile uint32_t SOFT_CONT           : 1;
N    __IO uint32_t DUAL_DEPTH          : 1;
X    volatile uint32_t DUAL_DEPTH          : 1;
N    __IO uint32_t DUAL_WIDTH          : 1;
X    volatile uint32_t DUAL_WIDTH          : 1;
N}DEV_NORC_CTL_Field;
N/****DEV_NORCCTL end****/
N
N/***********************************SOFT_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t SOFT_STA            : 1;
X    volatile uint32_t SOFT_STA            : 1;
N    __IO uint32_t BUFF_CLR            : 1;
X    volatile uint32_t BUFF_CLR            : 1;
N    __IO uint32_t CMD_STA             : 1;
X    volatile uint32_t CMD_STA             : 1;
N    __IO uint32_t CMD_NSS             : 1;
X    volatile uint32_t CMD_NSS             : 1;
N    __IO uint32_t CMD_DAT             : 8;
X    volatile uint32_t CMD_DAT             : 8;
N         uint32_t RESERVED0           : 20;
N}DEV_NORC_SOFT_CTL_Field;
N/****DEV_NORCSOFT_CTL end****/
N
N/***********************************SOFT_STA***********************************/
Ntypedef struct{
N
N    __I  uint32_t FIFO_LEVEL          : 4;
X    volatile const  uint32_t FIFO_LEVEL          : 4;
N    __I  uint32_t EMPTY               : 1;
X    volatile const  uint32_t EMPTY               : 1;
N    __I  uint32_t BUS_IDLE            : 1;
X    volatile const  uint32_t BUS_IDLE            : 1;
N         uint32_t RESERVED0           : 26;
N}DEV_NORC_SOFT_STA_Field;
N/****DEV_NORCSOFT_STA end****/
N
N/***********************************SOFT_BASE***********************************/
Ntypedef struct{
N
N    __IO uint32_t BASE_ADDR           : 26;
X    volatile uint32_t BASE_ADDR           : 26;
N         uint32_t RESERVED0           : 6;
N}DEV_NORC_SOFT_BASE_Field;
N/****DEV_NORCSOFT_BASE end****/
N
N/***********************************SOFT_LEN***********************************/
Ntypedef struct{
N
N    __IO uint32_t LENGTH              : 26;
X    volatile uint32_t LENGTH              : 26;
N         uint32_t RESERVED0           : 6;
N}DEV_NORC_SOFT_LEN_Field;
N/****DEV_NORCSOFT_LEN end****/
N
N/***********************************SOFT_CNT***********************************/
Ntypedef struct{
N
N    __I  uint32_t COUNTER             : 26;
X    volatile const  uint32_t COUNTER             : 26;
N         uint32_t RESERVED0           : 6;
N}DEV_NORC_SOFT_CNT_Field;
N/****DEV_NORCSOFT_CNT end****/
N
N/***********************************SOFT_DATA***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_NORC_SOFT_DATA_Field;
N/****DEV_NORCSOFT_DATA end****/
N
N/***********************************SOFT_PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t BLOCK_PD            : 1;
X    volatile uint32_t BLOCK_PD            : 1;
N    __IO uint32_t LENGTH_PD           : 1;
X    volatile uint32_t LENGTH_PD           : 1;
N    __IO uint32_t FIFO_UF_PD          : 1;
X    volatile uint32_t FIFO_UF_PD          : 1;
N         uint32_t RESERVED0           : 29;
N}DEV_NORC_SOFT_PD_Field;
N/****DEV_NORCSOFT_PD end****/
N
N/***********************************SOFT_IE***********************************/
Ntypedef struct{
N
N    __IO uint32_t BLOCK_IE            : 1;
X    volatile uint32_t BLOCK_IE            : 1;
N    __IO uint32_t LENGTH_IE           : 1;
X    volatile uint32_t LENGTH_IE           : 1;
N    __IO uint32_t FIFO_UF_IE          : 1;
X    volatile uint32_t FIFO_UF_IE          : 1;
N         uint32_t RESERVED0           : 13;
N    __IO uint32_t DMA_EN              : 1;
X    volatile uint32_t DMA_EN              : 1;
N         uint32_t RESERVED1           : 15;
N}DEV_NORC_SOFT_IE_Field;
N/****DEV_NORCSOFT_IE end****/
N
N/***********************************ENCRY_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN0                 : 1;
X    volatile uint32_t EN0                 : 1;
N    __IO uint32_t EN1                 : 1;
X    volatile uint32_t EN1                 : 1;
N         uint32_t RESERVED0           : 3;
N    __IO uint32_t ALG                 : 1;
X    volatile uint32_t ALG                 : 1;
N         uint32_t RESERVED1           : 26;
N}DEV_NORC_ENCRY_CTL_Field;
N/****DEV_NORCENCRY_CTL end****/
N
N/***********************************ENCRY_SEED***********************************/
Ntypedef struct{
N
N    __O  uint32_t SEED                : 32;
X    volatile  uint32_t SEED                : 32;
N}DEV_NORC_ENCRY_SEED_Field;
N/****DEV_NORCENCRY_SEED end****/
N
N/***********************************ENCRY_BASE0***********************************/
Ntypedef struct{
N
N         uint32_t RESERVED0           : 12;
N    __IO uint32_t ADDR                : 14;
X    volatile uint32_t ADDR                : 14;
N         uint32_t RESERVED1           : 6;
N}DEV_NORC_ENCRY_BASE0_Field;
N/****DEV_NORCENCRY_BASE0 end****/
N
N/***********************************ENCRY_END0***********************************/
Ntypedef struct{
N
N         uint32_t RESERVED0           : 12;
N    __IO uint32_t ADDR                : 14;
X    volatile uint32_t ADDR                : 14;
N         uint32_t RESERVED1           : 6;
N}DEV_NORC_ENCRY_END0_Field;
N/****DEV_NORCENCRY_END0 end****/
N
N/***********************************ENCRY_BASE1***********************************/
Ntypedef struct{
N
N         uint32_t RESERVED0           : 12;
N    __IO uint32_t ADDR                : 14;
X    volatile uint32_t ADDR                : 14;
N         uint32_t RESERVED1           : 6;
N}DEV_NORC_ENCRY_BASE1_Field;
N/****DEV_NORCENCRY_BASE1 end****/
N
N/***********************************ENCRY_END1***********************************/
Ntypedef struct{
N
N         uint32_t RESERVED0           : 12;
N    __IO uint32_t ADDR                : 14;
X    volatile uint32_t ADDR                : 14;
N         uint32_t RESERVED1           : 6;
N}DEV_NORC_ENCRY_END1_Field;
N/****DEV_NORCENCRY_END1 end****/
N
N/***********************************PERF_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t STA                 : 1;
X    volatile uint32_t STA                 : 1;
N    __IO uint32_t SEL                 : 1;
X    volatile uint32_t SEL                 : 1;
N         uint32_t RESERVED0           : 29;
N}DEV_NORC_PERF_CTL_Field;
N/****DEV_NORCPERF_CTL end****/
N
N/***********************************PERF_SUM***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_NORC_PERF_SUM_Field;
N/****DEV_NORCPERF_SUM end****/
N
N/***********************************PERF_CNT***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_NORC_PERF_CNT_Field;
N/****DEV_NORCPERF_CNT end****/
N
N/***********************************DEV_NORC register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    CTL;                                     /* 0x0    NORCTRL Control */
X        volatile    uint32_t    CTL;                                      
N        DEV_NORC_CTL_Field    CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    SOFT_CTL;                                /* 0x4    Software Control */
X        volatile    uint32_t    SOFT_CTL;                                 
N        DEV_NORC_SOFT_CTL_Field    SOFT_CTL_f;
N    };
N    union
N    {
N        __I     uint32_t    SOFT_STA;                                /* 0x8    Software STATUS */
X        volatile const     uint32_t    SOFT_STA;                                 
N        DEV_NORC_SOFT_STA_Field    SOFT_STA_f;
N    };
N    union
N    {
N        __IO    uint32_t    SOFT_BASE;                               /* 0xc    Software Base Address */
X        volatile    uint32_t    SOFT_BASE;                                
N        DEV_NORC_SOFT_BASE_Field    SOFT_BASE_f;
N    };
N    union
N    {
N        __IO    uint32_t    SOFT_LEN;                                /* 0x10    Software Length */
X        volatile    uint32_t    SOFT_LEN;                                 
N        DEV_NORC_SOFT_LEN_Field    SOFT_LEN_f;
N    };
N    union
N    {
N        __I     uint32_t    SOFT_CNT;                                /* 0x14    Software Counter */
X        volatile const     uint32_t    SOFT_CNT;                                 
N        DEV_NORC_SOFT_CNT_Field    SOFT_CNT_f;
N    };
N    union
N    {
N        __I     uint32_t    SOFT_DATA;                               /* 0x18    Software Data */
X        volatile const     uint32_t    SOFT_DATA;                                
N        DEV_NORC_SOFT_DATA_Field    SOFT_DATA_f;
N    };
N    uint32_t    RESERVED0;
N    union
N    {
N        __IO    uint32_t    SOFT_PD;                                 /* 0x20    Software Pending */
X        volatile    uint32_t    SOFT_PD;                                  
N        DEV_NORC_SOFT_PD_Field    SOFT_PD_f;
N    };
N    union
N    {
N        __IO    uint32_t    SOFT_IE;                                 /* 0x24    Software Interrupt Enable */
X        volatile    uint32_t    SOFT_IE;                                  
N        DEV_NORC_SOFT_IE_Field    SOFT_IE_f;
N    };
N    uint32_t    RESERVED1[2];
N    union
N    {
N        __IO    uint32_t    ENCRY_CTL;                               /* 0x30    Encrypt Control */
X        volatile    uint32_t    ENCRY_CTL;                                
N        DEV_NORC_ENCRY_CTL_Field    ENCRY_CTL_f;
N    };
N    union
N    {
N        __O     uint32_t    ENCRY_SEED;                              /* 0x34    Encrypt Seed */
X        volatile     uint32_t    ENCRY_SEED;                               
N        DEV_NORC_ENCRY_SEED_Field    ENCRY_SEED_f;
N    };
N    union
N    {
N        __IO    uint32_t    ENCRY_BASE0;                             /* 0x38    Encrypt Area0 Start Address */
X        volatile    uint32_t    ENCRY_BASE0;                              
N        DEV_NORC_ENCRY_BASE0_Field    ENCRY_BASE0_f;
N    };
N    union
N    {
N        __IO    uint32_t    ENCRY_END0;                              /* 0x3c    Encrypt Area0 End Address */
X        volatile    uint32_t    ENCRY_END0;                               
N        DEV_NORC_ENCRY_END0_Field    ENCRY_END0_f;
N    };
N    union
N    {
N        __IO    uint32_t    ENCRY_BASE1;                             /* 0x40    Encrypt Area1 Start Address */
X        volatile    uint32_t    ENCRY_BASE1;                              
N        DEV_NORC_ENCRY_BASE1_Field    ENCRY_BASE1_f;
N    };
N    union
N    {
N        __IO    uint32_t    ENCRY_END1;                              /* 0x44    Encrypt Area1 End Address */
X        volatile    uint32_t    ENCRY_END1;                               
N        DEV_NORC_ENCRY_END1_Field    ENCRY_END1_f;
N    };
N    uint32_t    RESERVED2[2];
N    union
N    {
N        __IO    uint32_t    PERF_CTL;                                /* 0x50    Performance Control */
X        volatile    uint32_t    PERF_CTL;                                 
N        DEV_NORC_PERF_CTL_Field    PERF_CTL_f;
N    };
N    union
N    {
N        __I     uint32_t    PERF_SUM;                                /* 0x54    Performance Summary */
X        volatile const     uint32_t    PERF_SUM;                                 
N        DEV_NORC_PERF_SUM_Field    PERF_SUM_f;
N    };
N    union
N    {
N        __I     uint32_t    PERF_CNT;                                /* 0x58    Performance Counter */
X        volatile const     uint32_t    PERF_CNT;                                 
N        DEV_NORC_PERF_CNT_Field    PERF_CNT_f;
N    };
N}DEV_NORC_RegDef_f;
N/****DEV_NORC end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 9 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_mpu_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_mpu_field.h" 1
N#ifndef __DEV_MPU_FIELD_H__
N#define __DEV_MPU_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************STA_ADDR***********************************/
Ntypedef struct{
N
N    __IO uint32_t VAULE               : 32;
X    volatile uint32_t VAULE               : 32;
N}DEV_MPU_STA_ADDR_Field;
N/****DEV_MPUSTA_ADDR end****/
N
N/***********************************END_ADDR***********************************/
Ntypedef struct{
N
N    __IO uint32_t VALUE               : 32;
X    volatile uint32_t VALUE               : 32;
N}DEV_MPU_END_ADDR_Field;
N/****DEV_MPUEND_ADDR end****/
N
N/***********************************STA_MASK***********************************/
Ntypedef struct{
N
N    __IO uint32_t VAULE               : 32;
X    volatile uint32_t VAULE               : 32;
N}DEV_MPU_STA_MASK_Field;
N/****DEV_MPUSTA_MASK end****/
N
N/***********************************CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t IE                  : 1;
X    volatile uint32_t IE                  : 1;
N    __IO uint32_t MODE                : 2;
X    volatile uint32_t MODE                : 2;
N    __IO uint32_t SEL                 : 3;
X    volatile uint32_t SEL                 : 3;
N         uint32_t RESERVED0           : 25;
N}DEV_MPU_CTL_Field;
N/****DEV_MPUCTL end****/
N
N/***********************************PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t HIT                 : 1;
X    volatile uint32_t HIT                 : 1;
N         uint32_t RESERVED0           : 7;
N    __I  uint32_t CNT                 : 24;
X    volatile const  uint32_t CNT                 : 24;
N}DEV_MPU_PD_Field;
N/****DEV_MPUPD end****/
N
N/***********************************HIT_ADDR***********************************/
Ntypedef struct{
N
N    __I  uint32_t VALUE               : 32;
X    volatile const  uint32_t VALUE               : 32;
N}DEV_MPU_HIT_ADDR_Field;
N/****DEV_MPUHIT_ADDR end****/
N
N/***********************************DEV_MPU register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    STA_ADDR;                                /* 0x0    MPU Start Address */
X        volatile    uint32_t    STA_ADDR;                                 
N        DEV_MPU_STA_ADDR_Field    STA_ADDR_f;
N    };
N    union
N    {
N        __IO    uint32_t    END_ADDR;                                /* 0x4    MPU End Address */
X        volatile    uint32_t    END_ADDR;                                 
N        DEV_MPU_END_ADDR_Field    END_ADDR_f;
N    };
N    union
N    {
N        __IO    uint32_t    STA_MASK;                                /* 0x8    MPU Address Mask */
X        volatile    uint32_t    STA_MASK;                                 
N        DEV_MPU_STA_MASK_Field    STA_MASK_f;
N    };
N    union
N    {
N        __IO    uint32_t    CTL;                                     /* 0xc    MPU Control */
X        volatile    uint32_t    CTL;                                      
N        DEV_MPU_CTL_Field    CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    PD;                                      /* 0x10    MPU Pending */
X        volatile    uint32_t    PD;                                       
N        DEV_MPU_PD_Field    PD_f;
N    };
N    union
N    {
N        __I     uint32_t    HIT_ADDR;                                /* 0x14    MPU Hit Address */
X        volatile const     uint32_t    HIT_ADDR;                                 
N        DEV_MPU_HIT_ADDR_Field    HIT_ADDR_f;
N    };
N}DEV_MPU_RegDef_f;
N/****DEV_MPU end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 10 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "psram_rwc_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\psram_rwc_field.h" 1
N#ifndef __PSRAM_RWC_FIELD_H__
N#define __PSRAM_RWC_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************PSRAM_RWC_CFG1***********************************/
Ntypedef struct{
N
N    __IO uint32_t SPI_MODE            : 1;
X    volatile uint32_t SPI_MODE            : 1;
N    __IO uint32_t WARP_LEN            : 4;
X    volatile uint32_t WARP_LEN            : 4;
N    __IO uint32_t QUAD_EN             : 1;
X    volatile uint32_t QUAD_EN             : 1;
N    __IO uint32_t TX_HOLD_CYC         : 2;
X    volatile uint32_t TX_HOLD_CYC         : 2;
N    __IO uint32_t RX_HOLD_CYC         : 2;
X    volatile uint32_t RX_HOLD_CYC         : 2;
N    __IO uint32_t DELAY_CHIAN_SEL     : 5;
X    volatile uint32_t DELAY_CHIAN_SEL     : 5;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t RBX_EN              : 1;
X    volatile uint32_t RBX_EN              : 1;
N    __IO uint32_t PREF_EN             : 1;
X    volatile uint32_t PREF_EN             : 1;
N    __IO uint32_t PREF_MODE           : 1;
X    volatile uint32_t PREF_MODE           : 1;
N    __IO uint32_t CEN_MAX_CYC         : 13;
X    volatile uint32_t CEN_MAX_CYC         : 13;
N}PSRAM_RWC_PSRAM_RWC_CFG1_Field;
N/****PSRAM_RWCPSRAM_RWC_CFG1 end****/
N
N/***********************************PSRAM_RWC_CFG2***********************************/
Ntypedef struct{
N
N    __IO uint32_t WAIT_CYC            : 4;
X    volatile uint32_t WAIT_CYC            : 4;
N         uint32_t RESERVED0           : 4;
N    __IO uint32_t RD_CMD_CODE         : 3;
X    volatile uint32_t RD_CMD_CODE         : 3;
N    __IO uint32_t WR_CMD_CODE         : 2;
X    volatile uint32_t WR_CMD_CODE         : 2;
N         uint32_t RESERVED1           : 19;
N}PSRAM_RWC_PSRAM_RWC_CFG2_Field;
N/****PSRAM_RWCPSRAM_RWC_CFG2 end****/
N
N/***********************************PSRAM_RWC_STA***********************************/
Ntypedef struct{
N
N    __I  uint32_t RWC_IDLE            : 1;
X    volatile const  uint32_t RWC_IDLE            : 1;
N    __I  uint32_t RWC_PREF            : 1;
X    volatile const  uint32_t RWC_PREF            : 1;
N    __I  uint32_t RWC_READ            : 1;
X    volatile const  uint32_t RWC_READ            : 1;
N    __I  uint32_t RWC_WRITE           : 1;
X    volatile const  uint32_t RWC_WRITE           : 1;
N    __I  uint32_t PSRAM_IDLE          : 1;
X    volatile const  uint32_t PSRAM_IDLE          : 1;
N    __I  uint32_t PSRAM_TX_CMD        : 1;
X    volatile const  uint32_t PSRAM_TX_CMD        : 1;
N    __I  uint32_t PSRAM_RX_CMD        : 1;
X    volatile const  uint32_t PSRAM_RX_CMD        : 1;
N    __I  uint32_t PSRAM_TX_DATA       : 1;
X    volatile const  uint32_t PSRAM_TX_DATA       : 1;
N    __I  uint32_t PSRAM_RX_DATA       : 1;
X    volatile const  uint32_t PSRAM_RX_DATA       : 1;
N    __I  uint32_t PSRAM_TX_HOLD       : 1;
X    volatile const  uint32_t PSRAM_TX_HOLD       : 1;
N    __I  uint32_t PSRAM_RX_HOLD       : 1;
X    volatile const  uint32_t PSRAM_RX_HOLD       : 1;
N         uint32_t RESERVED0           : 21;
N}PSRAM_RWC_PSRAM_RWC_STA_Field;
N/****PSRAM_RWCPSRAM_RWC_STA end****/
N
N/***********************************PSRAM_RWC register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    PSRAM_RWC_CFG1;                          /* 0x0    PSRAM_RWC Configure1 */
X        volatile    uint32_t    PSRAM_RWC_CFG1;                           
N        PSRAM_RWC_PSRAM_RWC_CFG1_Field    PSRAM_RWC_CFG1_f;
N    };
N    union
N    {
N        __IO    uint32_t    PSRAM_RWC_CFG2;                          /* 0x4    PSRAM_RWC Configure2 */
X        volatile    uint32_t    PSRAM_RWC_CFG2;                           
N        PSRAM_RWC_PSRAM_RWC_CFG2_Field    PSRAM_RWC_CFG2_f;
N    };
N    union
N    {
N        __I     uint32_t    PSRAM_RWC_STA;                           /* 0x8    PSRAM_RWC Status */
X        volatile const     uint32_t    PSRAM_RWC_STA;                            
N        PSRAM_RWC_PSRAM_RWC_STA_Field    PSRAM_RWC_STA_f;
N    };
N}PSRAM_RWC_RegDef_f;
N/****PSRAM_RWC end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 11 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_chip_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_chip_field.h" 1
N#ifndef __DEV_CHIP_FIELD_H__
N#define __DEV_CHIP_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************ID***********************************/
Ntypedef struct{
N
N    __I  uint32_t ID                  : 32;
X    volatile const  uint32_t ID                  : 32;
N}DEV_CHIP_ID_Field;
N/****DEV_CHIPID end****/
N
N/***********************************OTP_DATA0***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_CHIP_OTP_DATA0_Field;
N/****DEV_CHIPOTP_DATA0 end****/
N
N/***********************************OTP_DATA1***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_CHIP_OTP_DATA1_Field;
N/****DEV_CHIPOTP_DATA1 end****/
N
N/***********************************OTP_DATA2***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_CHIP_OTP_DATA2_Field;
N/****DEV_CHIPOTP_DATA2 end****/
N
N/***********************************OTP_DATA3***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_CHIP_OTP_DATA3_Field;
N/****DEV_CHIPOTP_DATA3 end****/
N
N/***********************************OTP_DATA4***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_CHIP_OTP_DATA4_Field;
N/****DEV_CHIPOTP_DATA4 end****/
N
N/***********************************OTP_DATA5***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_CHIP_OTP_DATA5_Field;
N/****DEV_CHIPOTP_DATA5 end****/
N
N/***********************************OTP_DATA6***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_CHIP_OTP_DATA6_Field;
N/****DEV_CHIPOTP_DATA6 end****/
N
N/***********************************OTP_DATA7***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_CHIP_OTP_DATA7_Field;
N/****DEV_CHIPOTP_DATA7 end****/
N
N/***********************************DEV_CHIP register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __I     uint32_t    ID;                                      /* 0x0    Chip ID */
X        volatile const     uint32_t    ID;                                       
N        DEV_CHIP_ID_Field    ID_f;
N    };
N    uint32_t    RESERVED0[3];
N    union
N    {
N        __I     uint32_t    OTP_DATA0;                               /* 0x10    Efuse Data0 */
X        volatile const     uint32_t    OTP_DATA0;                                
N        DEV_CHIP_OTP_DATA0_Field    OTP_DATA0_f;
N    };
N    union
N    {
N        __I     uint32_t    OTP_DATA1;                               /* 0x14    Efuse Data1 */
X        volatile const     uint32_t    OTP_DATA1;                                
N        DEV_CHIP_OTP_DATA1_Field    OTP_DATA1_f;
N    };
N    union
N    {
N        __I     uint32_t    OTP_DATA2;                               /* 0x18    Efuse Data2 */
X        volatile const     uint32_t    OTP_DATA2;                                
N        DEV_CHIP_OTP_DATA2_Field    OTP_DATA2_f;
N    };
N    union
N    {
N        __I     uint32_t    OTP_DATA3;                               /* 0x1c    Efuse Data3 */
X        volatile const     uint32_t    OTP_DATA3;                                
N        DEV_CHIP_OTP_DATA3_Field    OTP_DATA3_f;
N    };
N    union
N    {
N        __I     uint32_t    OTP_DATA4;                               /* 0x20    Efuse Data4 */
X        volatile const     uint32_t    OTP_DATA4;                                
N        DEV_CHIP_OTP_DATA4_Field    OTP_DATA4_f;
N    };
N    union
N    {
N        __I     uint32_t    OTP_DATA5;                               /* 0x24    Efuse Data5 */
X        volatile const     uint32_t    OTP_DATA5;                                
N        DEV_CHIP_OTP_DATA5_Field    OTP_DATA5_f;
N    };
N    union
N    {
N        __I     uint32_t    OTP_DATA6;                               /* 0x28    Efuse Data6 */
X        volatile const     uint32_t    OTP_DATA6;                                
N        DEV_CHIP_OTP_DATA6_Field    OTP_DATA6_f;
N    };
N    union
N    {
N        __I     uint32_t    OTP_DATA7;                               /* 0x2c    Efuse Data7 */
X        volatile const     uint32_t    OTP_DATA7;                                
N        DEV_CHIP_OTP_DATA7_Field    OTP_DATA7_f;
N    };
N}DEV_CHIP_RegDef_f;
N/****DEV_CHIP end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 12 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_cmu_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_cmu_field.h" 1
N#ifndef __DEV_CMU_FIELD_H__
N#define __DEV_CMU_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CLKEN0***********************************/
Ntypedef struct{
N
N    __IO uint32_t DMA                 : 1;
X    volatile uint32_t DMA                 : 1;
N    __IO uint32_t GPIO                : 1;
X    volatile uint32_t GPIO                : 1;
N    __IO uint32_t EFUSE               : 1;
X    volatile uint32_t EFUSE               : 1;
N    __IO uint32_t ASU                 : 1;
X    volatile uint32_t ASU                 : 1;
N    __IO uint32_t EINT                : 1;
X    volatile uint32_t EINT                : 1;
N    __IO uint32_t TIMER               : 1;
X    volatile uint32_t TIMER               : 1;
N    __IO uint32_t TICK                : 1;
X    volatile uint32_t TICK                : 1;
N    __IO uint32_t SPI0                : 1;
X    volatile uint32_t SPI0                : 1;
N    __IO uint32_t SPI11                : 1;
X    volatile uint32_t SPI11                : 1;
N    __IO uint32_t UART0               : 1;
X    volatile uint32_t UART0               : 1;
N    __IO uint32_t UART1               : 1;
X    volatile uint32_t UART1               : 1;
N    __IO uint32_t UART2               : 1;
X    volatile uint32_t UART2               : 1;
N    __IO uint32_t I2C0                : 1;
X    volatile uint32_t I2C0                : 1;
N    __IO uint32_t I2C11                : 1;
X    volatile uint32_t I2C11                : 1;
N    __IO uint32_t ASI0                : 1;
X    volatile uint32_t ASI0                : 1;
N    __IO uint32_t ASI1                : 1;
X    volatile uint32_t ASI1                : 1;
N    __IO uint32_t IRRX                : 1;
X    volatile uint32_t IRRX                : 1;
N    __IO uint32_t IRTX                : 1;
X    volatile uint32_t IRTX                : 1;
N    __IO uint32_t PWM                 : 1;
X    volatile uint32_t PWM                 : 1;
N    __IO uint32_t SDC                 : 1;
X    volatile uint32_t SDC                 : 1;
N    __IO uint32_t USB                 : 1;
X    volatile uint32_t USB                 : 1;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t ADC11                 : 1;
X    volatile uint32_t ADC11                 : 1;
N    __IO uint32_t DAC11                 : 1;
X    volatile uint32_t DAC11                 : 1;
N    __IO uint32_t SRC                 : 1;
X    volatile uint32_t SRC                 : 1;
N    __IO uint32_t NPU                 : 1;
X    volatile uint32_t NPU                 : 1;
N    __IO uint32_t UDSP                : 1;
X    volatile uint32_t UDSP                : 1;
N    __IO uint32_t AON                 : 1;
X    volatile uint32_t AON                 : 1;
N    __IO uint32_t CAMERA              : 1;
X    volatile uint32_t CAMERA              : 1;
N    __IO uint32_t UART3               : 1;
X    volatile uint32_t UART3               : 1;
N    __IO uint32_t MPU11                 : 1;
X    volatile uint32_t MPU11                 : 1;
N         uint32_t RESERVED1           : 1;
N}DEV_CMU_CLKEN0_Field;
N/****DEV_CMUCLKEN0 end****/
N
N/***********************************CLKEN1***********************************/
Ntypedef struct{
N
N    __IO uint32_t CPU                 : 1;
X    volatile uint32_t CPU                 : 1;
N    __IO uint32_t SYS                 : 1;
X    volatile uint32_t SYS                 : 1;
N    __IO uint32_t NORC                : 1;
X    volatile uint32_t NORC                : 1;
N    __IO uint32_t CACHE               : 1;
X    volatile uint32_t CACHE               : 1;
N    __IO uint32_t RAM0                : 1;
X    volatile uint32_t RAM0                : 1;
N    __IO uint32_t RAM1                : 1;
X    volatile uint32_t RAM1                : 1;
N    __IO uint32_t RAM2                : 1;
X    volatile uint32_t RAM2                : 1;
N    __IO uint32_t RAM3                : 1;
X    volatile uint32_t RAM3                : 1;
N    __IO uint32_t RAM4                : 1;
X    volatile uint32_t RAM4                : 1;
N    __IO uint32_t RAM5                : 1;
X    volatile uint32_t RAM5                : 1;
N    __IO uint32_t RAM6                : 1;
X    volatile uint32_t RAM6                : 1;
N    __IO uint32_t RAM7                : 1;
X    volatile uint32_t RAM7                : 1;
N    __IO uint32_t DEV                 : 1;
X    volatile uint32_t DEV                 : 1;
N    __IO uint32_t HST                 : 1;
X    volatile uint32_t HST                 : 1;
N    __IO uint32_t MEM                 : 1;
X    volatile uint32_t MEM                 : 1;
N    __IO uint32_t PSRAM               : 1;
X    volatile uint32_t PSRAM               : 1;
N         uint32_t RESERVED0           : 16;
N}DEV_CMU_CLKEN1_Field;
N/****DEV_CMUCLKEN1 end****/
N
N/***********************************SYSCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t CORE_SEL            : 3;
X    volatile uint32_t CORE_SEL            : 3;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t CORE_DIV            : 3;
X    volatile uint32_t CORE_DIV            : 3;
N         uint32_t RESERVED1           : 1;
N    __IO uint32_t SYS_DIV             : 3;
X    volatile uint32_t SYS_DIV             : 3;
N         uint32_t RESERVED2           : 21;
N}DEV_CMU_SYSCLK_Field;
N/****DEV_CMUSYSCLK end****/
N
N/***********************************SPInCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 3;
X    volatile uint32_t SEL                 : 3;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t DIV                 : 3;
X    volatile uint32_t DIV                 : 3;
N         uint32_t RESERVED1           : 25;
N}DEV_CMU_SPInCLK_Field;
N/****DEV_CMUSPInCLK end****/
N
N/***********************************I2CnCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 2;
X    volatile uint32_t SEL                 : 2;
N         uint32_t RESERVED0           : 30;
N}DEV_CMU_I2CnCLK_Field;
N/****DEV_CMUI2CnCLK end****/
N
N/***********************************UARTnCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 2;
X    volatile uint32_t SEL                 : 2;
N         uint32_t RESERVED0           : 30;
N}DEV_CMU_UARTnCLK_Field;
N/****DEV_CMUUARTnCLK end****/
N
N/***********************************NOR0CLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 3;
X    volatile uint32_t SEL                 : 3;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t DIV                 : 3;
X    volatile uint32_t DIV                 : 3;
N         uint32_t RESERVED1           : 25;
N}DEV_CMU_NOR0CLK_Field;
N/****DEV_CMUNOR0CLK end****/
N
N/***********************************PWMnCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t SEL                 : 3;
X    volatile uint32_t SEL                 : 3;
N    __IO uint32_t DIV                 : 13;
X    volatile uint32_t DIV                 : 13;
N         uint32_t RESERVED0           : 15;
N}DEV_CMU_PWMnCLK_Field;
N/****DEV_CMUPWMnCLK end****/
N
N/***********************************TIMERnCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t SEL                 : 3;
X    volatile uint32_t SEL                 : 3;
N         uint32_t RESERVED0           : 28;
N}DEV_CMU_TIMERnCLK_Field;
N/****DEV_CMUTIMERnCLK end****/
N
N/***********************************ADCCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t SEL                 : 3;
X    volatile uint32_t SEL                 : 3;
N    __IO uint32_t DIV                 : 8;
X    volatile uint32_t DIV                 : 8;
N         uint32_t RESERVED0           : 20;
N}DEV_CMU_ADCCLK_Field;
N/****DEV_CMUADCCLK end****/
N
N/***********************************DACCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t SEL                 : 3;
X    volatile uint32_t SEL                 : 3;
N    __IO uint32_t DIG_DIV             : 4;
X    volatile uint32_t DIG_DIV             : 4;
N    __IO uint32_t ANA_DIV             : 2;
X    volatile uint32_t ANA_DIV             : 2;
N         uint32_t RESERVED0           : 2;
N         uint32_t RESERVED1           : 20;
N}DEV_CMU_DACCLK_Field;
N/****DEV_CMUDACCLK end****/
N
N/***********************************ASInCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 3;
X    volatile uint32_t SEL                 : 3;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t DIV                 : 8;
X    volatile uint32_t DIV                 : 8;
N         uint32_t RESERVED1           : 20;
N}DEV_CMU_ASInCLK_Field;
N/****DEV_CMUASInCLK end****/
N
N/***********************************IRRXCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 2;
X    volatile uint32_t SEL                 : 2;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t DIV                 : 8;
X    volatile uint32_t DIV                 : 8;
N         uint32_t RESERVED1           : 20;
N}DEV_CMU_IRRXCLK_Field;
N/****DEV_CMUIRRXCLK end****/
N
N/***********************************IRTXCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 2;
X    volatile uint32_t SEL                 : 2;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t DIV                 : 4;
X    volatile uint32_t DIV                 : 4;
N         uint32_t RESERVED1           : 24;
N}DEV_CMU_IRTXCLK_Field;
N/****DEV_CMUIRTXCLK end****/
N
N/***********************************TICKCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 3;
X    volatile uint32_t SEL                 : 3;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t DIV                 : 2;
X    volatile uint32_t DIV                 : 2;
N         uint32_t RESERVED1           : 26;
N}DEV_CMU_TICKCLK_Field;
N/****DEV_CMUTICKCLK end****/
N
N/***********************************SDCCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 3;
X    volatile uint32_t SEL                 : 3;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t DIV                 : 8;
X    volatile uint32_t DIV                 : 8;
N         uint32_t RESERVED1           : 20;
N}DEV_CMU_SDCCLK_Field;
N/****DEV_CMUSDCCLK end****/
N
N/***********************************USBCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t SEL                 : 2;
X    volatile uint32_t SEL                 : 2;
N         uint32_t RESERVED1           : 1;
N}DEV_CMU_USBCLK_Field;
N/****DEV_CMUUSBCLK end****/
N
N/***********************************CP2CLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t SEL                 : 2;
X    volatile uint32_t SEL                 : 2;
N    __IO uint32_t DIV                 : 4;
X    volatile uint32_t DIV                 : 4;
N         uint32_t RESERVED1           : 24;
N}DEV_CMU_CP2CLK_Field;
N/****DEV_CMUCP2CLK end****/
N
N/***********************************HSCALCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t SEL                 : 3;
X    volatile uint32_t SEL                 : 3;
N         uint32_t RESERVED0           : 28;
N}DEV_CMU_HSCALCLK_Field;
N/****DEV_CMUHSCALCLK end****/
N
N/***********************************DLYCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t SEL                 : 2;
X    volatile uint32_t SEL                 : 2;
N         uint32_t RESERVED0           : 29;
N}DEV_CMU_DLYCLK_Field;
N/****DEV_CMUDLYCLK end****/
N
N/***********************************CAMERACLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 3;
X    volatile uint32_t SEL                 : 3;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t DIV                 : 3;
X    volatile uint32_t DIV                 : 3;
N         uint32_t RESERVED1           : 25;
N}DEV_CMU_CAMERACLK_Field;
N/****DEV_CMUCAMERACLK end****/
N
N/***********************************UART3CLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 2;
X    volatile uint32_t SEL                 : 2;
N         uint32_t RESERVED0           : 30;
N}DEV_CMU_UART3CLK_Field;
N/****DEV_CMUUART3CLK end****/
N
N/***********************************PSRAMCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 3;
X    volatile uint32_t SEL                 : 3;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t DIV                 : 3;
X    volatile uint32_t DIV                 : 3;
N         uint32_t RESERVED1           : 25;
N}DEV_CMU_PSRAMCLK_Field;
N/****DEV_CMUPSRAMCLK end****/
N
N/***********************************CLKDET***********************************/
Ntypedef struct{
N
N    __IO uint32_t OSC_DEV_DET         : 1;
X    volatile uint32_t OSC_DEV_DET         : 1;
N    __IO uint32_t OSC_XTAL_DET        : 1;
X    volatile uint32_t OSC_XTAL_DET        : 1;
N    __IO uint32_t OSC_USB_DET         : 1;
X    volatile uint32_t OSC_USB_DET         : 1;
N    __IO uint32_t PLL_CORE_DET        : 1;
X    volatile uint32_t PLL_CORE_DET        : 1;
N    __IO uint32_t PLL_AUDIO_DET       : 1;
X    volatile uint32_t PLL_AUDIO_DET       : 1;
N    __IO uint32_t PLL_USB_DET         : 1;
X    volatile uint32_t PLL_USB_DET         : 1;
N    __IO uint32_t EXT_CLK_DET         : 1;
X    volatile uint32_t EXT_CLK_DET         : 1;
N    __IO uint32_t EXT_CLK2_DET        : 1;
X    volatile uint32_t EXT_CLK2_DET        : 1;
N         uint32_t RESERVED0           : 24;
N}DEV_CMU_CLKDET_Field;
N/****DEV_CMUCLKDET end****/
N
N/***********************************CLKRDY***********************************/
Ntypedef struct{
N
N    __I  uint32_t OSC_DEV_RDY         : 1;
X    volatile const  uint32_t OSC_DEV_RDY         : 1;
N    __I  uint32_t OSC_XTAL_RDY        : 1;
X    volatile const  uint32_t OSC_XTAL_RDY        : 1;
N    __I  uint32_t OSC_USB_RDY         : 1;
X    volatile const  uint32_t OSC_USB_RDY         : 1;
N    __I  uint32_t PLL_CORE_RDY        : 1;
X    volatile const  uint32_t PLL_CORE_RDY        : 1;
N    __I  uint32_t PLL_AUDIO_RDY       : 1;
X    volatile const  uint32_t PLL_AUDIO_RDY       : 1;
N    __I  uint32_t PLL_USB_RDY         : 1;
X    volatile const  uint32_t PLL_USB_RDY         : 1;
N    __I  uint32_t EXT_CLK_RDY         : 1;
X    volatile const  uint32_t EXT_CLK_RDY         : 1;
N    __I  uint32_t EXT_CLK2_RDY        : 1;
X    volatile const  uint32_t EXT_CLK2_RDY        : 1;
N         uint32_t RESERVED0           : 24;
N}DEV_CMU_CLKRDY_Field;
N/****DEV_CMUCLKRDY end****/
N
N/***********************************DBGCTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 7;
X    volatile uint32_t SEL                 : 7;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t DIV                 : 3;
X    volatile uint32_t DIV                 : 3;
N         uint32_t RESERVED1           : 21;
N}DEV_CMU_DBGCTL_Field;
N/****DEV_CMUDBGCTL end****/
N
N/***********************************TESTCTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t OSC_ADC             : 1;
X    volatile uint32_t OSC_ADC             : 1;
N    __IO uint32_t OSC_DEV             : 1;
X    volatile uint32_t OSC_DEV             : 1;
N    __IO uint32_t OSC_XTAL            : 1;
X    volatile uint32_t OSC_XTAL            : 1;
N    __IO uint32_t OSC_USB             : 1;
X    volatile uint32_t OSC_USB             : 1;
N    __IO uint32_t PLL_CORE            : 1;
X    volatile uint32_t PLL_CORE            : 1;
N    __IO uint32_t PLL_AUDIO           : 1;
X    volatile uint32_t PLL_AUDIO           : 1;
N    __IO uint32_t PLL_USB             : 1;
X    volatile uint32_t PLL_USB             : 1;
N    __IO uint32_t USB_SOF             : 1;
X    volatile uint32_t USB_SOF             : 1;
N    __I  uint32_t P_TEST              : 1;
X    volatile const  uint32_t P_TEST              : 1;
N         uint32_t RESERVED0           : 23;
N}DEV_CMU_TESTCTL_Field;
N/****DEV_CMUTESTCTL end****/
N
N/***********************************DEV_CMU register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    CLKEN0;                                  /* 0x0    Clock Enable */
X        volatile    uint32_t    CLKEN0;                                   
N        DEV_CMU_CLKEN0_Field    CLKEN0_f;
N    };
N    union
N    {
N        __IO    uint32_t    CLKEN1;                                  /* 0x4    Clock Enable */
X        volatile    uint32_t    CLKEN1;                                   
N        DEV_CMU_CLKEN1_Field    CLKEN1_f;
N    };
N    uint32_t    RESERVED0[2];
N    union
N    {
N        __IO    uint32_t    SYSCLK;                                  /* 0x10    System Clock */
X        volatile    uint32_t    SYSCLK;                                   
N        DEV_CMU_SYSCLK_Field    SYSCLK_f;
N    };
N    uint32_t    RESERVED1[3];
N    union
N    {
N        __IO    uint32_t    SPInCLK[2];                              /* 0x20    SPI0 Clock */
X        volatile    uint32_t    SPInCLK[2];                               
N        DEV_CMU_SPInCLK_Field    SPInCLK_f[2];
N    };
N    union
N    {
N        __IO    uint32_t    I2CnCLK[2];                              /* 0x28    I2C0 Clock */
X        volatile    uint32_t    I2CnCLK[2];                               
N        DEV_CMU_I2CnCLK_Field    I2CnCLK_f[2];
N    };
N    union
N    {
N        __IO    uint32_t    UARTnCLK[3];                             /* 0x30    UART0 Clock */
X        volatile    uint32_t    UARTnCLK[3];                              
N        DEV_CMU_UARTnCLK_Field    UARTnCLK_f[3];
N    };
N    union
N    {
N        __IO    uint32_t    NOR0CLK;                                 /* 0x3c    NOR0 Clock */
X        volatile    uint32_t    NOR0CLK;                                  
N        DEV_CMU_NOR0CLK_Field    NOR0CLK_f;
N    };
N    union
N    {
N        __IO    uint32_t    PWMnCLK[8];                              /* 0x40    PWM0 Clock */
X        volatile    uint32_t    PWMnCLK[8];                               
N        DEV_CMU_PWMnCLK_Field    PWMnCLK_f[8];
N    };
N    union
N    {
N        __IO    uint32_t    TIMERnCLK[4];                            /* 0x60    Timer0 Clock */
X        volatile    uint32_t    TIMERnCLK[4];                             
N        DEV_CMU_TIMERnCLK_Field    TIMERnCLK_f[4];
N    };
N    union
N    {
N        __IO    uint32_t    ADCCLK;                                  /* 0x70    Audio ADC Clock */
X        volatile    uint32_t    ADCCLK;                                   
N        DEV_CMU_ADCCLK_Field    ADCCLK_f;
N    };
N    union
N    {
N        __IO    uint32_t    DACCLK;                                  /* 0x74    Audio DAC Clock */
X        volatile    uint32_t    DACCLK;                                   
N        DEV_CMU_DACCLK_Field    DACCLK_f;
N    };
N    union
N    {
N        __IO    uint32_t    ASInCLK[2];                              /* 0x78    Audio Serial Interface0 Clock */
X        volatile    uint32_t    ASInCLK[2];                               
N        DEV_CMU_ASInCLK_Field    ASInCLK_f[2];
N    };
N    union
N    {
N        __IO    uint32_t    IRRXCLK;                                 /* 0x80    IRRX Clock */
X        volatile    uint32_t    IRRXCLK;                                  
N        DEV_CMU_IRRXCLK_Field    IRRXCLK_f;
N    };
N    union
N    {
N        __IO    uint32_t    IRTXCLK;                                 /* 0x84    IRTX Clock */
X        volatile    uint32_t    IRTXCLK;                                  
N        DEV_CMU_IRTXCLK_Field    IRTXCLK_f;
N    };
N    union
N    {
N        __IO    uint32_t    TICKCLK;                                 /* 0x88    TICK Clock */
X        volatile    uint32_t    TICKCLK;                                  
N        DEV_CMU_TICKCLK_Field    TICKCLK_f;
N    };
N    union
N    {
N        __IO    uint32_t    SDCCLK;                                  /* 0x8c    SD Controller Clock */
X        volatile    uint32_t    SDCCLK;                                   
N        DEV_CMU_SDCCLK_Field    SDCCLK_f;
N    };
N    union
N    {
N        __IO    uint32_t    USBCLK;                                  /* 0x90    USB Controller Clock */
X        volatile    uint32_t    USBCLK;                                   
N        DEV_CMU_USBCLK_Field    USBCLK_f;
N    };
N    union
N    {
N        __IO    uint32_t    CP2CLK;                                  /* 0x94    Charge Pump Clock 2 */
X        volatile    uint32_t    CP2CLK;                                   
N        DEV_CMU_CP2CLK_Field    CP2CLK_f;
N    };
N    union
N    {
N        __IO    uint32_t    HSCALCLK;                                /* 0x98    Headset Calibration Clock */
X        volatile    uint32_t    HSCALCLK;                                 
N        DEV_CMU_HSCALCLK_Field    HSCALCLK_f;
N    };
N    union
N    {
N        __IO    uint32_t    DLYCLK;                                  /* 0x9c    DMIC Delay Clock */
X        volatile    uint32_t    DLYCLK;                                   
N        DEV_CMU_DLYCLK_Field    DLYCLK_f;
N    };
N    union
N    {
N        __IO    uint32_t    CAMERACLK;                               /* 0xa0    CAMERA Clock */
X        volatile    uint32_t    CAMERACLK;                                
N        DEV_CMU_CAMERACLK_Field    CAMERACLK_f;
N    };
N    union
N    {
N        __IO    uint32_t    UART3CLK;                                /* 0xa4    UART3 Clock */
X        volatile    uint32_t    UART3CLK;                                 
N        DEV_CMU_UART3CLK_Field    UART3CLK_f;
N    };
N    union
N    {
N        __IO    uint32_t    PSRAMCLK;                                /* 0xa8    PSRAM Clock */
X        volatile    uint32_t    PSRAMCLK;                                 
N        DEV_CMU_PSRAMCLK_Field    PSRAMCLK_f;
N    };
N    uint32_t    RESERVED2[17];
N    union
N    {
N        __IO    uint32_t    CLKDET;                                  /* 0xf0    Clock Detect */
X        volatile    uint32_t    CLKDET;                                   
N        DEV_CMU_CLKDET_Field    CLKDET_f;
N    };
N    union
N    {
N        __I     uint32_t    CLKRDY;                                  /* 0xf4    Clock Ready */
X        volatile const     uint32_t    CLKRDY;                                   
N        DEV_CMU_CLKRDY_Field    CLKRDY_f;
N    };
N    union
N    {
N        __IO    uint32_t    DBGCTL;                                  /* 0xf8    Debug Control */
X        volatile    uint32_t    DBGCTL;                                   
N        DEV_CMU_DBGCTL_Field    DBGCTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    TESTCTL;                                 /* 0xfc    Test Control */
X        volatile    uint32_t    TESTCTL;                                  
N        DEV_CMU_TESTCTL_Field    TESTCTL_f;
N    };
N}DEV_CMU_RegDef_f;
N/****DEV_CMU end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 13 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_rmu_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_rmu_field.h" 1
N#ifndef __DEV_RMU_FIELD_H__
N#define __DEV_RMU_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N //下面结构体内变量与stm32 宏冲突 
N#undef ADC
N#undef DAC 
N#undef SPI1
N#undef TICK
N#undef AON
N#undef I2C1
N#undef MPU
N
N
N/***********************************RSTEN0***********************************/
Ntypedef struct{
N
N    __IO uint32_t DMA                 : 1;
X    volatile uint32_t DMA                 : 1;
N    __IO uint32_t GPIO                : 1;
X    volatile uint32_t GPIO                : 1;
N    __IO uint32_t EFUSE               : 1;
X    volatile uint32_t EFUSE               : 1;
N    __IO uint32_t ASU                 : 1;
X    volatile uint32_t ASU                 : 1;
N    __IO uint32_t EINT                : 1;
X    volatile uint32_t EINT                : 1;
N    __IO uint32_t TIMER               : 1;
X    volatile uint32_t TIMER               : 1;
N    __IO uint32_t TICK                : 1;
X    volatile uint32_t TICK                : 1;
N    __IO uint32_t SPI0                : 1;
X    volatile uint32_t SPI0                : 1;
N    __IO uint32_t SPI1                : 1;
X    volatile uint32_t SPI1                : 1;
N    __IO uint32_t UART0               : 1;
X    volatile uint32_t UART0               : 1;
N    __IO uint32_t UART1               : 1;
X    volatile uint32_t UART1               : 1;
N    __IO uint32_t UART2               : 1;
X    volatile uint32_t UART2               : 1;
N    __IO uint32_t I2C0                : 1;
X    volatile uint32_t I2C0                : 1;
N    __IO uint32_t I2C1                : 1;
X    volatile uint32_t I2C1                : 1;
N    __IO uint32_t ASI0                : 1;
X    volatile uint32_t ASI0                : 1;
N    __IO uint32_t ASI1                : 1;
X    volatile uint32_t ASI1                : 1;
N    __IO uint32_t IRRX                : 1;
X    volatile uint32_t IRRX                : 1;
N    __IO uint32_t IRTX                : 1;
X    volatile uint32_t IRTX                : 1;
N    __IO uint32_t PWM                 : 1;
X    volatile uint32_t PWM                 : 1;
N    __IO uint32_t SDC                 : 1;
X    volatile uint32_t SDC                 : 1;
N    __IO uint32_t USB                 : 1;
X    volatile uint32_t USB                 : 1;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t ADC                 : 1;
X    volatile uint32_t ADC                 : 1;
N    __IO uint32_t DAC                 : 1;
X    volatile uint32_t DAC                 : 1;
N    __IO uint32_t SRC                 : 1;
X    volatile uint32_t SRC                 : 1;
N    __IO uint32_t NPU                 : 1;
X    volatile uint32_t NPU                 : 1;
N    __IO uint32_t UDSP                : 1;
X    volatile uint32_t UDSP                : 1;
N    __IO uint32_t AON                 : 1;
X    volatile uint32_t AON                 : 1;
N    __IO uint32_t CAMERA              : 1;
X    volatile uint32_t CAMERA              : 1;
N    __IO uint32_t UART3               : 1;
X    volatile uint32_t UART3               : 1;
N    __IO uint32_t MPU                 : 1;
X    volatile uint32_t MPU                 : 1;
N         uint32_t RESERVED1           : 1;
N}DEV_RMU_RSTEN0_Field;
N/****DEV_RMURSTEN0 end****/
N
N/***********************************RSTEN1***********************************/
Ntypedef struct{
N
N    __IO uint32_t CPU                 : 1;
X    volatile uint32_t CPU                 : 1;
N    __IO uint32_t SYS                 : 1;
X    volatile uint32_t SYS                 : 1;
N    __IO uint32_t NORC                : 1;
X    volatile uint32_t NORC                : 1;
N    __IO uint32_t CACHE               : 1;
X    volatile uint32_t CACHE               : 1;
N    __IO uint32_t RAM0                : 1;
X    volatile uint32_t RAM0                : 1;
N    __IO uint32_t RAM1                : 1;
X    volatile uint32_t RAM1                : 1;
N    __IO uint32_t RAM2                : 1;
X    volatile uint32_t RAM2                : 1;
N    __IO uint32_t RAM3                : 1;
X    volatile uint32_t RAM3                : 1;
N    __IO uint32_t RAM4                : 1;
X    volatile uint32_t RAM4                : 1;
N    __IO uint32_t RAM5                : 1;
X    volatile uint32_t RAM5                : 1;
N    __IO uint32_t RAM6                : 1;
X    volatile uint32_t RAM6                : 1;
N    __IO uint32_t RAM7                : 1;
X    volatile uint32_t RAM7                : 1;
N    __IO uint32_t DEV_BUS             : 1;
X    volatile uint32_t DEV_BUS             : 1;
N    __IO uint32_t HST_BUS             : 1;
X    volatile uint32_t HST_BUS             : 1;
N    __IO uint32_t MEM_BUS             : 1;
X    volatile uint32_t MEM_BUS             : 1;
N    __IO uint32_t PSRAM               : 1;
X    volatile uint32_t PSRAM               : 1;
N         uint32_t RESERVED0           : 16;
N}DEV_RMU_RSTEN1_Field;
N/****DEV_RMURSTEN1 end****/
N
N/***********************************CPUVEC***********************************/
Ntypedef struct{
N
N    __IO uint32_t BOOT_ADDR           : 32;
X    volatile uint32_t BOOT_ADDR           : 32;
N}DEV_RMU_CPUVEC_Field;
N/****DEV_RMUCPUVEC end****/
N
N/***********************************WDOG***********************************/
Ntypedef struct{
N
N    __IO uint32_t WDOG_EN             : 1;
X    volatile uint32_t WDOG_EN             : 1;
N    __O  uint32_t WDOG_CLR            : 1;
X    volatile  uint32_t WDOG_CLR            : 1;
N    __IO uint32_t IRQ_EN              : 1;
X    volatile uint32_t IRQ_EN              : 1;
N    __IO uint32_t RESET_EN            : 1;
X    volatile uint32_t RESET_EN            : 1;
N    __IO uint32_t WDOG_TIME           : 3;
X    volatile uint32_t WDOG_TIME           : 3;
N    __IO uint32_t DEFER_EN            : 1;
X    volatile uint32_t DEFER_EN            : 1;
N    __IO uint32_t DEFER_TIME          : 2;
X    volatile uint32_t DEFER_TIME          : 2;
N    __I  uint32_t WDOG_PD             : 1;
X    volatile const  uint32_t WDOG_PD             : 1;
N         uint32_t RESERVED0           : 21;
N}DEV_RMU_WDOG_Field;
N/****DEV_RMUWDOG end****/
N
N/***********************************BOOT***********************************/
Ntypedef struct{
N
N    __IO uint32_t BOOT_EN             : 1;
X    volatile uint32_t BOOT_EN             : 1;
N    __O  uint32_t RE_BOOT             : 1;
X    volatile  uint32_t RE_BOOT             : 1;
N    __IO uint32_t BOOT_SWT            : 1;
X    volatile uint32_t BOOT_SWT            : 1;
N    __IO uint32_t BOOT_SEL            : 2;
X    volatile uint32_t BOOT_SEL            : 2;
N    __IO uint32_t JTAG_SWT            : 1;
X    volatile uint32_t JTAG_SWT            : 1;
N    __IO uint32_t JTAG_SEL            : 2;
X    volatile uint32_t JTAG_SEL            : 2;
N    __IO uint32_t JTAG_RST_CPU        : 1;
X    volatile uint32_t JTAG_RST_CPU        : 1;
N    __IO uint32_t JTAG_RST_DEV        : 1;
X    volatile uint32_t JTAG_RST_DEV        : 1;
N    __IO uint32_t JTAG_RST_GPIO       : 1;
X    volatile uint32_t JTAG_RST_GPIO       : 1;
N    __IO uint32_t JTAG_RST_MEM        : 1;
X    volatile uint32_t JTAG_RST_MEM        : 1;
N    __IO uint32_t PGM_EN              : 1;
X    volatile uint32_t PGM_EN              : 1;
N    __IO uint32_t PGM_HRD             : 1;
X    volatile uint32_t PGM_HRD             : 1;
N    __IO uint32_t PGM_KEY             : 1;
X    volatile uint32_t PGM_KEY             : 1;
N    __IO uint32_t PGM_SOF             : 1;
X    volatile uint32_t PGM_SOF             : 1;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t PGM_SWT             : 1;
X    volatile uint32_t PGM_SWT             : 1;
N    __IO uint32_t PGM_SEL             : 1;
X    volatile uint32_t PGM_SEL             : 1;
N         uint32_t RESERVED1           : 2;
N    __IO uint32_t CPU_BOOT            : 1;
X    volatile uint32_t CPU_BOOT            : 1;
N    __IO uint32_t JTAG_POL            : 1;
X    volatile uint32_t JTAG_POL            : 1;
N    __IO uint32_t VEC_MODE            : 1;
X    volatile uint32_t VEC_MODE            : 1;
N    __IO uint32_t FIX_MODE            : 1;
X    volatile uint32_t FIX_MODE            : 1;
N    __IO uint32_t NOR_MODE            : 1;
X    volatile uint32_t NOR_MODE            : 1;
N    __IO uint32_t JTAG_WIRE           : 1;
X    volatile uint32_t JTAG_WIRE           : 1;
N         uint32_t RESERVED2           : 1;
N         uint32_t RESERVED3           : 4;
N}DEV_RMU_BOOT_Field;
N/****DEV_RMUBOOT end****/
N
N/***********************************PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t POWER               : 1;
X    volatile uint32_t POWER               : 1;
N    __IO uint32_t ONOFF               : 1;
X    volatile uint32_t ONOFF               : 1;
N    __IO uint32_t P_RSTN              : 1;
X    volatile uint32_t P_RSTN              : 1;
N    __IO uint32_t WDOG                : 1;
X    volatile uint32_t WDOG                : 1;
N    __IO uint32_t BOOT                : 1;
X    volatile uint32_t BOOT                : 1;
N         uint32_t RESERVED0           : 27;
N}DEV_RMU_PD_Field;
N/****DEV_RMUPD end****/
N
N/***********************************DEV_RMU register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    RSTEN0;                                  /* 0x0    Reset Enable */
X        volatile    uint32_t    RSTEN0;                                   
N        DEV_RMU_RSTEN0_Field    RSTEN0_f;
N    };
N    union
N    {
N        __IO    uint32_t    RSTEN1;                                  /* 0x4    Reset Enable */
X        volatile    uint32_t    RSTEN1;                                   
N        DEV_RMU_RSTEN1_Field    RSTEN1_f;
N    };
N    uint32_t    RESERVED0[3];
N    union
N    {
N        __IO    uint32_t    CPUVEC;                                  /* 0x14    CPU Reset Vector */
X        volatile    uint32_t    CPUVEC;                                   
N        DEV_RMU_CPUVEC_Field    CPUVEC_f;
N    };
N    uint32_t    RESERVED1[2];
N    union
N    {
N        __IO    uint32_t    WDOG;                                    /* 0x20    Watch Dog Control */
X        volatile    uint32_t    WDOG;                                     
N        DEV_RMU_WDOG_Field    WDOG_f;
N    };
N    union
N    {
N        __IO    uint32_t    BOOT;                                    /* 0x24    Boot Control */
X        volatile    uint32_t    BOOT;                                     
N        DEV_RMU_BOOT_Field    BOOT_f;
N    };
N    uint32_t    RESERVED2[6];
N    union
N    {
N        __IO    uint32_t    PD;                                      /* 0x40    RMU Pending */
X        volatile    uint32_t    PD;                                       
N        DEV_RMU_PD_Field    PD_f;
N    };
N}DEV_RMU_RegDef_f;
N/****DEV_RMU end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 14 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_wfi_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_wfi_field.h" 1
N#ifndef __DEV_WFI_FIELD_H__
N#define __DEV_WFI_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t CPU                 : 1;
X    volatile uint32_t CPU                 : 1;
N    __IO uint32_t SYS                 : 1;
X    volatile uint32_t SYS                 : 1;
N    __IO uint32_t NORC                : 1;
X    volatile uint32_t NORC                : 1;
N    __IO uint32_t CACHE               : 1;
X    volatile uint32_t CACHE               : 1;
N    __IO uint32_t RAM0                : 1;
X    volatile uint32_t RAM0                : 1;
N    __IO uint32_t RAM1                : 1;
X    volatile uint32_t RAM1                : 1;
N    __IO uint32_t RAM2                : 1;
X    volatile uint32_t RAM2                : 1;
N    __IO uint32_t RAM3                : 1;
X    volatile uint32_t RAM3                : 1;
N    __IO uint32_t RAM4                : 1;
X    volatile uint32_t RAM4                : 1;
N    __IO uint32_t RAM5                : 1;
X    volatile uint32_t RAM5                : 1;
N    __IO uint32_t RAM6                : 1;
X    volatile uint32_t RAM6                : 1;
N    __IO uint32_t RAM7                : 1;
X    volatile uint32_t RAM7                : 1;
N    __IO uint32_t DEV                 : 1;
X    volatile uint32_t DEV                 : 1;
N    __IO uint32_t HST                 : 1;
X    volatile uint32_t HST                 : 1;
N    __IO uint32_t MEM                 : 1;
X    volatile uint32_t MEM                 : 1;
N    __IO uint32_t PSRAM               : 1;
X    volatile uint32_t PSRAM               : 1;
N         uint32_t RESERVED0           : 16;
N}DEV_WFI_CTL_Field;
N/****DEV_WFICTL end****/
N
N/***********************************MASK0***********************************/
Ntypedef struct{
N
N    __IO uint32_t MASK0               : 32;
X    volatile uint32_t MASK0               : 32;
N}DEV_WFI_MASK0_Field;
N/****DEV_WFIMASK0 end****/
N
N/***********************************MASK1***********************************/
Ntypedef struct{
N
N    __IO uint32_t MASK1               : 32;
X    volatile uint32_t MASK1               : 32;
N}DEV_WFI_MASK1_Field;
N/****DEV_WFIMASK1 end****/
N
N/***********************************STA0***********************************/
Ntypedef struct{
N
N    __I  uint32_t STATUS              : 32;
X    volatile const  uint32_t STATUS              : 32;
N}DEV_WFI_STA0_Field;
N/****DEV_WFISTA0 end****/
N
N/***********************************STA1***********************************/
Ntypedef struct{
N
N    __I  uint32_t STATUS              : 32;
X    volatile const  uint32_t STATUS              : 32;
N}DEV_WFI_STA1_Field;
N/****DEV_WFISTA1 end****/
N
N/***********************************NMI_MASK0***********************************/
Ntypedef struct{
N
N    __IO uint32_t MASK                : 32;
X    volatile uint32_t MASK                : 32;
N}DEV_WFI_NMI_MASK0_Field;
N/****DEV_WFINMI_MASK0 end****/
N
N/***********************************NMI_MASK1***********************************/
Ntypedef struct{
N
N    __IO uint32_t MASK                : 32;
X    volatile uint32_t MASK                : 32;
N}DEV_WFI_NMI_MASK1_Field;
N/****DEV_WFINMI_MASK1 end****/
N
N/***********************************NMI_STA0***********************************/
Ntypedef struct{
N
N    __I  uint32_t STAT0               : 32;
X    volatile const  uint32_t STAT0               : 32;
N}DEV_WFI_NMI_STA0_Field;
N/****DEV_WFINMI_STA0 end****/
N
N/***********************************NMI_STA1***********************************/
Ntypedef struct{
N
N    __I  uint32_t STAT1               : 32;
X    volatile const  uint32_t STAT1               : 32;
N}DEV_WFI_NMI_STA1_Field;
N/****DEV_WFINMI_STA1 end****/
N
N/***********************************DEV_WFI register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    CTL;                                     /* 0x0    Wake For Interrupt Control */
X        volatile    uint32_t    CTL;                                      
N        DEV_WFI_CTL_Field    CTL_f;
N    };
N    uint32_t    RESERVED0[3];
N    union
N    {
N        __IO    uint32_t    MASK0;                                   /* 0x10    Wake For Interrupt Mask0 */
X        volatile    uint32_t    MASK0;                                    
N        DEV_WFI_MASK0_Field    MASK0_f;
N    };
N    union
N    {
N        __IO    uint32_t    MASK1;                                   /* 0x14    Wake For Interrupt Mask1 */
X        volatile    uint32_t    MASK1;                                    
N        DEV_WFI_MASK1_Field    MASK1_f;
N    };
N    union
N    {
N        __I     uint32_t    STA0;                                    /* 0x18    Wake For Interrupt Status0 */
X        volatile const     uint32_t    STA0;                                     
N        DEV_WFI_STA0_Field    STA0_f;
N    };
N    union
N    {
N        __I     uint32_t    STA1;                                    /* 0x1c    Wake For Interrupt Status1 */
X        volatile const     uint32_t    STA1;                                     
N        DEV_WFI_STA1_Field    STA1_f;
N    };
N    union
N    {
N        __IO    uint32_t    NMI_MASK0;                               /* 0x20    Non Mask Interrupt Mask0 */
X        volatile    uint32_t    NMI_MASK0;                                
N        DEV_WFI_NMI_MASK0_Field    NMI_MASK0_f;
N    };
N    union
N    {
N        __IO    uint32_t    NMI_MASK1;                               /* 0x24    Non Mask Interrupt Mask1 */
X        volatile    uint32_t    NMI_MASK1;                                
N        DEV_WFI_NMI_MASK1_Field    NMI_MASK1_f;
N    };
N    union
N    {
N        __I     uint32_t    NMI_STA0;                                /* 0x28    Non Mask Interrupt Status0 */
X        volatile const     uint32_t    NMI_STA0;                                 
N        DEV_WFI_NMI_STA0_Field    NMI_STA0_f;
N    };
N    union
N    {
N        __I     uint32_t    NMI_STA1;                                /* 0x2c    Non Mask Interrupt Status1 */
X        volatile const     uint32_t    NMI_STA1;                                 
N        DEV_WFI_NMI_STA1_Field    NMI_STA1_f;
N    };
N}DEV_WFI_RegDef_f;
N/****DEV_WFI end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 15 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_ureg_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_ureg_field.h" 1
N#ifndef __DEV_UREG_FIELD_H__
N#define __DEV_UREG_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************SB_PHY_CTRL0***********************************/
Ntypedef struct{
N
N    __IO uint32_t RESET               : 1;
X    volatile uint32_t RESET               : 1;
N    __IO uint32_t EN_PHY              : 1;
X    volatile uint32_t EN_PHY              : 1;
N    __IO uint32_t PLL_EN              : 1;
X    volatile uint32_t PLL_EN              : 1;
N    __IO uint32_t CLK_SEL             : 1;
X    volatile uint32_t CLK_SEL             : 1;
N    __IO uint32_t DIV_TRIM_EN         : 1;
X    volatile uint32_t DIV_TRIM_EN         : 1;
N    __IO uint32_t SELF_TEST           : 1;
X    volatile uint32_t SELF_TEST           : 1;
N    __IO uint32_t SIM_FAST            : 1;
X    volatile uint32_t SIM_FAST            : 1;
N    __IO uint32_t DIV_VALUE_SEL       : 1;
X    volatile uint32_t DIV_VALUE_SEL       : 1;
N    __IO uint32_t FSZR_CNTL           : 4;
X    volatile uint32_t FSZR_CNTL           : 4;
N    __IO uint32_t HSZR_CNTL           : 4;
X    volatile uint32_t HSZR_CNTL           : 4;
N    __IO uint32_t DIV_INT_I           : 9;
X    volatile uint32_t DIV_INT_I           : 9;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t PULLDPDN            : 1;
X    volatile uint32_t PULLDPDN            : 1;
N    __IO uint32_t PULLDMDN            : 1;
X    volatile uint32_t PULLDMDN            : 1;
N         uint32_t RESERVED1           : 3;
N}DEV_UREG_SB_PHY_CTRL0_Field;
N/****DEV_UREGSB_PHY_CTRL0 end****/
N
N/***********************************SB_PHY_CTRL1***********************************/
Ntypedef struct{
N
N    __IO uint32_t DIV_FRAC_I          : 21;
X    volatile uint32_t DIV_FRAC_I          : 21;
N    __IO uint32_t FRAC_EN_I           : 1;
X    volatile uint32_t FRAC_EN_I           : 1;
N         uint32_t RESERVED0           : 10;
N}DEV_UREG_SB_PHY_CTRL1_Field;
N/****DEV_UREGSB_PHY_CTRL1 end****/
N
N/***********************************SB_PHY_CTRL2***********************************/
Ntypedef struct{
N
N    __IO uint32_t VSTATUS             : 32;
X    volatile uint32_t VSTATUS             : 32;
N}DEV_UREG_SB_PHY_CTRL2_Field;
N/****DEV_UREGSB_PHY_CTRL2 end****/
N
N/***********************************SB_PLL_CTRL***********************************/
Ntypedef struct{
N
N    __IO uint32_t FORCE_LOCK          : 1;
X    volatile uint32_t FORCE_LOCK          : 1;
N    __IO uint32_t DELAY_X1            : 1;
X    volatile uint32_t DELAY_X1            : 1;
N    __IO uint32_t LOCK_TIME           : 2;
X    volatile uint32_t LOCK_TIME           : 2;
N    __IO uint32_t DITHER_EN           : 1;
X    volatile uint32_t DITHER_EN           : 1;
N    __IO uint32_t DITHER_BIT          : 1;
X    volatile uint32_t DITHER_BIT          : 1;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t REG_VCO_LV          : 2;
X    volatile uint32_t REG_VCO_LV          : 2;
N    __IO uint32_t ICP_SEL             : 3;
X    volatile uint32_t ICP_SEL             : 3;
N         uint32_t RESERVED1           : 3;
N    __IO uint32_t RC32M_CTUNE         : 7;
X    volatile uint32_t RC32M_CTUNE         : 7;
N         uint32_t RESERVED2           : 1;
N    __IO uint32_t USB_SOF_EN          : 1;
X    volatile uint32_t USB_SOF_EN          : 1;
N    __IO uint32_t OSC_USB_EN          : 1;
X    volatile uint32_t OSC_USB_EN          : 1;
N    __IO uint32_t PLL_USB_EN          : 1;
X    volatile uint32_t PLL_USB_EN          : 1;
N         uint32_t RESERVED3           : 1;
N    __IO uint32_t OSC_USB_SEL         : 1;
X    volatile uint32_t OSC_USB_SEL         : 1;
N    __IO uint32_t OSC_USB_DIV         : 1;
X    volatile uint32_t OSC_USB_DIV         : 1;
N         uint32_t RESERVED4           : 2;
N}DEV_UREG_SB_PLL_CTRL_Field;
N/****DEV_UREGSB_PLL_CTRL end****/
N
N/***********************************SB_DBG_CTRL0***********************************/
Ntypedef struct{
N
N    __IO uint32_t DEBUG0              : 8;
X    volatile uint32_t DEBUG0              : 8;
N    __IO uint32_t DEBUG1              : 8;
X    volatile uint32_t DEBUG1              : 8;
N    __IO uint32_t DEBUG2              : 8;
X    volatile uint32_t DEBUG2              : 8;
N    __IO uint32_t DEBUG3              : 8;
X    volatile uint32_t DEBUG3              : 8;
N}DEV_UREG_SB_DBG_CTRL0_Field;
N/****DEV_UREGSB_DBG_CTRL0 end****/
N
N/***********************************SB_DBG_CTRL1***********************************/
Ntypedef struct{
N
N    __IO uint32_t DEBUG4              : 8;
X    volatile uint32_t DEBUG4              : 8;
N         uint32_t RESERVED0           : 24;
N}DEV_UREG_SB_DBG_CTRL1_Field;
N/****DEV_UREGSB_DBG_CTRL1 end****/
N
N/***********************************SB_PHY_STAT0***********************************/
Ntypedef struct{
N
N    __I  uint32_t CLK_STATE           : 1;
X    volatile const  uint32_t CLK_STATE           : 1;
N    __I  uint32_t TRIM_LOCK           : 1;
X    volatile const  uint32_t TRIM_LOCK           : 1;
N    __I  uint32_t BIST_PASS           : 1;
X    volatile const  uint32_t BIST_PASS           : 1;
N         uint32_t RESERVED0           : 13;
N    __I  uint32_t DIV_INT_O           : 11;
X    volatile const  uint32_t DIV_INT_O           : 11;
N         uint32_t RESERVED1           : 5;
N}DEV_UREG_SB_PHY_STAT0_Field;
N/****DEV_UREGSB_PHY_STAT0 end****/
N
N/***********************************SB_PHY_STAT1***********************************/
Ntypedef struct{
N
N    __I  uint32_t DIV_FRAC_O          : 21;
X    volatile const  uint32_t DIV_FRAC_O          : 21;
N         uint32_t RESERVED0           : 11;
N}DEV_UREG_SB_PHY_STAT1_Field;
N/****DEV_UREGSB_PHY_STAT1 end****/
N
N/***********************************SB_CTR_BIST0***********************************/
Ntypedef struct{
N
N    __IO uint32_t PHY_FAKE_CRC2       : 5;
X    volatile uint32_t PHY_FAKE_CRC2       : 5;
N    __IO uint32_t PHY_FAKE_ENDP       : 2;
X    volatile uint32_t PHY_FAKE_ENDP       : 2;
N    __IO uint32_t PHY_FAKE_EN         : 1;
X    volatile uint32_t PHY_FAKE_EN         : 1;
N    __IO uint32_t PHY_FAKE_ADDR       : 7;
X    volatile uint32_t PHY_FAKE_ADDR       : 7;
N    __IO uint32_t PHY_FAKE_REQ        : 1;
X    volatile uint32_t PHY_FAKE_REQ        : 1;
N    __IO uint32_t PHY_FAKE_CRC1       : 8;
X    volatile uint32_t PHY_FAKE_CRC1       : 8;
N    __IO uint32_t PHY_FAKE_CRC0       : 8;
X    volatile uint32_t PHY_FAKE_CRC0       : 8;
N}DEV_UREG_SB_CTR_BIST0_Field;
N/****DEV_UREGSB_CTR_BIST0 end****/
N
N/***********************************SB_CTR_BIST1***********************************/
Ntypedef struct{
N
N    __IO uint32_t PHY_FAKE_data0      : 8;
X    volatile uint32_t PHY_FAKE_data0      : 8;
N    __IO uint32_t PHY_FAKE_data1      : 8;
X    volatile uint32_t PHY_FAKE_data1      : 8;
N    __IO uint32_t PHY_FAKE_data2      : 8;
X    volatile uint32_t PHY_FAKE_data2      : 8;
N    __IO uint32_t PHY_FAKE_data3      : 8;
X    volatile uint32_t PHY_FAKE_data3      : 8;
N}DEV_UREG_SB_CTR_BIST1_Field;
N/****DEV_UREGSB_CTR_BIST1 end****/
N
N/***********************************SB_CTR_BIST2***********************************/
Ntypedef struct{
N
N    __IO uint32_t PHY_FAKE_data4      : 8;
X    volatile uint32_t PHY_FAKE_data4      : 8;
N    __IO uint32_t PHY_FAKE_data5      : 8;
X    volatile uint32_t PHY_FAKE_data5      : 8;
N    __IO uint32_t PHY_FAKE_data6      : 8;
X    volatile uint32_t PHY_FAKE_data6      : 8;
N    __IO uint32_t PHY_FAKE_data7      : 8;
X    volatile uint32_t PHY_FAKE_data7      : 8;
N}DEV_UREG_SB_CTR_BIST2_Field;
N/****DEV_UREGSB_CTR_BIST2 end****/
N
N/***********************************DEV_UREG register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    USB_PHY_CTRL0;                           /* 0x0    USB PHY Control0 */
X        volatile    uint32_t    USB_PHY_CTRL0;                            
N        DEV_UREG_SB_PHY_CTRL0_Field    USB_PHY_CTRL0_f;
N    };
N    union
N    {
N        __IO    uint32_t    USB_PHY_CTRL1;                           /* 0x4    USB PHY Control1 */
X        volatile    uint32_t    USB_PHY_CTRL1;                            
N        DEV_UREG_SB_PHY_CTRL1_Field    USB_PHY_CTRL1_f;
N    };
N    union
N    {
N        __IO    uint32_t    USB_PHY_CTRL2;                           /* 0x8    USB PHY Control2 */
X        volatile    uint32_t    USB_PHY_CTRL2;                            
N        DEV_UREG_SB_PHY_CTRL2_Field    USB_PHY_CTRL2_f;
N    };
N    union
N    {
N        __IO    uint32_t    USB_PLL_CTRL;                            /* 0xc    USB PLL Control */
X        volatile    uint32_t    USB_PLL_CTRL;                             
N        DEV_UREG_SB_PLL_CTRL_Field    USB_PLL_CTRL_f;
N    };
N    union
N    {
N        __IO    uint32_t    USB_DBG_CTRL0;                           /* 0x10    USB Debug Control0 */
X        volatile    uint32_t    USB_DBG_CTRL0;                            
N        DEV_UREG_SB_DBG_CTRL0_Field    USB_DBG_CTRL0_f;
N    };
N    union
N    {
N        __IO    uint32_t    USB_DBG_CTRL1;                           /* 0x14    USB Debug Control1 */
X        volatile    uint32_t    USB_DBG_CTRL1;                            
N        DEV_UREG_SB_DBG_CTRL1_Field    USB_DBG_CTRL1_f;
N    };
N    union
N    {
N        __I     uint32_t    USB_PHY_STAT0;                           /* 0x18    USB PHY Status0 */
X        volatile const     uint32_t    USB_PHY_STAT0;                            
N        DEV_UREG_SB_PHY_STAT0_Field    USB_PHY_STAT0_f;
N    };
N    union
N    {
N        __I     uint32_t    USB_PHY_STAT1;                           /* 0x1c    USB PHY Status1 */
X        volatile const     uint32_t    USB_PHY_STAT1;                            
N        DEV_UREG_SB_PHY_STAT1_Field    USB_PHY_STAT1_f;
N    };
N    union
N    {
N        __IO    uint32_t    USB_CTR_BIST0;                           /* 0x20    USB controller BIST signal part 1 */
X        volatile    uint32_t    USB_CTR_BIST0;                            
N        DEV_UREG_SB_CTR_BIST0_Field    USB_CTR_BIST0_f;
N    };
N    union
N    {
N        __IO    uint32_t    USB_CTR_BIST1;                           /* 0x24    USB controller BIST signal part 2 */
X        volatile    uint32_t    USB_CTR_BIST1;                            
N        DEV_UREG_SB_CTR_BIST1_Field    USB_CTR_BIST1_f;
N    };
N    union
N    {
N        __IO    uint32_t    USB_CTR_BIST2;                           /* 0x28    USB controller BIST signal part3 */
X        volatile    uint32_t    USB_CTR_BIST2;                            
N        DEV_UREG_SB_CTR_BIST2_Field    USB_CTR_BIST2_f;
N    };
N}DEV_UREG_RegDef_f;
N/****DEV_UREG end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 16 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_global_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_global_field.h" 1
N#ifndef __DEV_GLOBAL_FIELD_H__
N#define __DEV_GLOBAL_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************DVDD_GLOBAL0***********************************/
Ntypedef struct{
N
N    __IO uint32_t VALUE               : 32;
X    volatile uint32_t VALUE               : 32;
N}DEV_GLOBAL_DVDD_GLOBAL0_Field;
N/****DEV_GLOBALDVDD_GLOBAL0 end****/
N
N/***********************************DVDD_GLOBAL1***********************************/
Ntypedef struct{
N
N    __IO uint32_t VALUE               : 32;
X    volatile uint32_t VALUE               : 32;
N}DEV_GLOBAL_DVDD_GLOBAL1_Field;
N/****DEV_GLOBALDVDD_GLOBAL1 end****/
N
N/***********************************DVDD_GLOBAL2***********************************/
Ntypedef struct{
N
N    __IO uint32_t VALUE               : 32;
X    volatile uint32_t VALUE               : 32;
N}DEV_GLOBAL_DVDD_GLOBAL2_Field;
N/****DEV_GLOBALDVDD_GLOBAL2 end****/
N
N/***********************************DVDD_GLOBAL3***********************************/
Ntypedef struct{
N
N    __IO uint32_t VALUE               : 32;
X    volatile uint32_t VALUE               : 32;
N}DEV_GLOBAL_DVDD_GLOBAL3_Field;
N/****DEV_GLOBALDVDD_GLOBAL3 end****/
N
N/***********************************DVDD_GLOBAL4***********************************/
Ntypedef struct{
N
N    __IO uint32_t VALUE               : 32;
X    volatile uint32_t VALUE               : 32;
N}DEV_GLOBAL_DVDD_GLOBAL4_Field;
N/****DEV_GLOBALDVDD_GLOBAL4 end****/
N
N/***********************************DVDD_GLOBAL5***********************************/
Ntypedef struct{
N
N    __IO uint32_t VALUE               : 32;
X    volatile uint32_t VALUE               : 32;
N}DEV_GLOBAL_DVDD_GLOBAL5_Field;
N/****DEV_GLOBALDVDD_GLOBAL5 end****/
N
N/***********************************DVDD_GLOBAL6***********************************/
Ntypedef struct{
N
N    __IO uint32_t VALUE               : 32;
X    volatile uint32_t VALUE               : 32;
N}DEV_GLOBAL_DVDD_GLOBAL6_Field;
N/****DEV_GLOBALDVDD_GLOBAL6 end****/
N
N/***********************************DVDD_GLOBAL7***********************************/
Ntypedef struct{
N
N    __IO uint32_t VALUE               : 32;
X    volatile uint32_t VALUE               : 32;
N}DEV_GLOBAL_DVDD_GLOBAL7_Field;
N/****DEV_GLOBALDVDD_GLOBAL7 end****/
N
N/***********************************DEV_GLOBAL register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    DVDD_GLOBAL0;                            /* 0x0    DVDD Global Register */
X        volatile    uint32_t    DVDD_GLOBAL0;                             
N        DEV_GLOBAL_DVDD_GLOBAL0_Field    DVDD_GLOBAL0_f;
N    };
N    union
N    {
N        __IO    uint32_t    DVDD_GLOBAL1;                            /* 0x4    DVDD Global Register */
X        volatile    uint32_t    DVDD_GLOBAL1;                             
N        DEV_GLOBAL_DVDD_GLOBAL1_Field    DVDD_GLOBAL1_f;
N    };
N    union
N    {
N        __IO    uint32_t    DVDD_GLOBAL2;                            /* 0x8    DVDD Global Register */
X        volatile    uint32_t    DVDD_GLOBAL2;                             
N        DEV_GLOBAL_DVDD_GLOBAL2_Field    DVDD_GLOBAL2_f;
N    };
N    union
N    {
N        __IO    uint32_t    DVDD_GLOBAL3;                            /* 0xc    DVDD Global Register */
X        volatile    uint32_t    DVDD_GLOBAL3;                             
N        DEV_GLOBAL_DVDD_GLOBAL3_Field    DVDD_GLOBAL3_f;
N    };
N    union
N    {
N        __IO    uint32_t    DVDD_GLOBAL4;                            /* 0x10    DVDD Global Register */
X        volatile    uint32_t    DVDD_GLOBAL4;                             
N        DEV_GLOBAL_DVDD_GLOBAL4_Field    DVDD_GLOBAL4_f;
N    };
N    union
N    {
N        __IO    uint32_t    DVDD_GLOBAL5;                            /* 0x14    DVDD Global Register */
X        volatile    uint32_t    DVDD_GLOBAL5;                             
N        DEV_GLOBAL_DVDD_GLOBAL5_Field    DVDD_GLOBAL5_f;
N    };
N    union
N    {
N        __IO    uint32_t    DVDD_GLOBAL6;                            /* 0x18    DVDD Global Register */
X        volatile    uint32_t    DVDD_GLOBAL6;                             
N        DEV_GLOBAL_DVDD_GLOBAL6_Field    DVDD_GLOBAL6_f;
N    };
N    union
N    {
N        __IO    uint32_t    DVDD_GLOBAL7;                            /* 0x1c    DVDD Global Register */
X        volatile    uint32_t    DVDD_GLOBAL7;                             
N        DEV_GLOBAL_DVDD_GLOBAL7_Field    DVDD_GLOBAL7_f;
N    };
N}DEV_GLOBAL_RegDef_f;
N/****DEV_GLOBAL end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 17 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_timer_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_timer_field.h" 1
N#ifndef __DEV_TIMER_FIELD_H__
N#define __DEV_TIMER_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************IE***********************************/
Ntypedef struct{
N
N    __IO uint32_t TIMER0              : 1;
X    volatile uint32_t TIMER0              : 1;
N    __IO uint32_t TIMER1              : 1;
X    volatile uint32_t TIMER1              : 1;
N    __IO uint32_t TIMER2              : 1;
X    volatile uint32_t TIMER2              : 1;
N    __IO uint32_t TIMER3              : 1;
X    volatile uint32_t TIMER3              : 1;
N         uint32_t RESERVED0           : 4;
N    __IO uint32_t CAPTURE0            : 1;
X    volatile uint32_t CAPTURE0            : 1;
N    __IO uint32_t CAPTURE1            : 1;
X    volatile uint32_t CAPTURE1            : 1;
N    __IO uint32_t CAPTURE2            : 1;
X    volatile uint32_t CAPTURE2            : 1;
N    __IO uint32_t CAPTURE3            : 1;
X    volatile uint32_t CAPTURE3            : 1;
N         uint32_t RESERVED1           : 4;
N    __IO uint32_t DMA_EN0             : 1;
X    volatile uint32_t DMA_EN0             : 1;
N    __IO uint32_t DMA_EN1             : 1;
X    volatile uint32_t DMA_EN1             : 1;
N    __IO uint32_t DMA_EN2             : 1;
X    volatile uint32_t DMA_EN2             : 1;
N    __IO uint32_t DMA_EN3             : 1;
X    volatile uint32_t DMA_EN3             : 1;
N         uint32_t RESERVED2           : 12;
N}DEV_TIMER_IE_Field;
N/****DEV_TIMERIE end****/
N
N/***********************************PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t TIMER0              : 1;
X    volatile uint32_t TIMER0              : 1;
N    __IO uint32_t TIMER1              : 1;
X    volatile uint32_t TIMER1              : 1;
N    __IO uint32_t TIMER2              : 1;
X    volatile uint32_t TIMER2              : 1;
N    __IO uint32_t TIMER3              : 1;
X    volatile uint32_t TIMER3              : 1;
N         uint32_t RESERVED0           : 4;
N    __IO uint32_t CAPTURE0            : 1;
X    volatile uint32_t CAPTURE0            : 1;
N    __IO uint32_t CAPTURE1            : 1;
X    volatile uint32_t CAPTURE1            : 1;
N    __IO uint32_t CAPTURE2            : 1;
X    volatile uint32_t CAPTURE2            : 1;
N    __IO uint32_t CAPTURE3            : 1;
X    volatile uint32_t CAPTURE3            : 1;
N         uint32_t RESERVED1           : 20;
N}DEV_TIMER_PD_Field;
N/****DEV_TIMERPD end****/
N
N/***********************************n_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t RUN                 : 1;
X    volatile uint32_t RUN                 : 1;
N    __IO uint32_t RELOAD_EN           : 1;
X    volatile uint32_t RELOAD_EN           : 1;
N    __IO uint32_t DIRECTION           : 1;
X    volatile uint32_t DIRECTION           : 1;
N    __O  uint32_t RESTART             : 1;
X    volatile  uint32_t RESTART             : 1;
N    __IO uint32_t MODE                : 2;
X    volatile uint32_t MODE                : 2;
N    __IO uint32_t EDGE                : 2;
X    volatile uint32_t EDGE                : 2;
N    __IO uint32_t GPIO_SRC            : 5;
X    volatile uint32_t GPIO_SRC            : 5;
N         uint32_t RESERVED0           : 3;
N    __IO uint32_t DEBOUNCE            : 3;
X    volatile uint32_t DEBOUNCE            : 3;
N    __IO uint32_t CAP_FMT             : 1;
X    volatile uint32_t CAP_FMT             : 1;
N    __IO uint32_t PREDIVL             : 5;
X    volatile uint32_t PREDIVL             : 5;
N    __IO uint32_t CAP_POL             : 1;
X    volatile uint32_t CAP_POL             : 1;
N         uint32_t RESERVED1           : 6;
N}DEV_TIMER_n_CTL_Field;
N/****DEV_TIMERn_CTL end****/
N
N/***********************************n_LEN***********************************/
Ntypedef struct{
N
N    __IO uint32_t LENGTH              : 32;
X    volatile uint32_t LENGTH              : 32;
N}DEV_TIMER_n_LEN_Field;
N/****DEV_TIMERn_LEN end****/
N
N/***********************************n_VAL***********************************/
Ntypedef struct{
N
N    __I  uint32_t VALUE               : 32;
X    volatile const  uint32_t VALUE               : 32;
N}DEV_TIMER_n_VAL_Field;
N/****DEV_TIMERn_VAL end****/
N
N/***********************************n_CAP***********************************/
Ntypedef struct{
N
N    __I  uint32_t VALUE               : 31;
X    volatile const  uint32_t VALUE               : 31;
N    __I  uint32_t POL                 : 1;
X    volatile const  uint32_t POL                 : 1;
N}DEV_TIMER_n_CAP_Field;
N/****DEV_TIMERn_CAP end****/
N
N/***********************************TIMER register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    CTL;                                     /* 0x20    Timer0 Control */
X        volatile    uint32_t    CTL;                                      
N        DEV_TIMER_n_CTL_Field    CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    LEN;                                     /* 0x24    Timer0 Length */
X        volatile    uint32_t    LEN;                                      
N        DEV_TIMER_n_LEN_Field    LEN_f;
N    };
N    union
N    {
N        __I     uint32_t    VAL;                                     /* 0x28    Timer0 Current Value */
X        volatile const     uint32_t    VAL;                                      
N        DEV_TIMER_n_VAL_Field    VAL_f;
N    };
N    union
N    {
N        __I     uint32_t    CAP;                                     /* 0x2c    Timer0 Capture Value */
X        volatile const     uint32_t    CAP;                                      
N        DEV_TIMER_n_CAP_Field    CAP_f;
N    };
N    uint32_t    RESERVED0[4];
N}TIMER_RegDef_f;
N/****TIMER end****/
N
N/***********************************DEV_TIMER register***********************************/
Ntypedef struct{
N
N    uint32_t    RESERVED0;
N    union
N    {
N        __IO    uint32_t    IE;                                      /* 0x4    Timer Interrupt Enable */
X        volatile    uint32_t    IE;                                       
N        DEV_TIMER_IE_Field    IE_f;
N    };
N    union
N    {
N        __IO    uint32_t    PD;                                      /* 0x8    Timer Interrupt Pending */
X        volatile    uint32_t    PD;                                       
N        DEV_TIMER_PD_Field    PD_f;
N    };
N    uint32_t    RESERVED1[5];
N    union
N    {
N        TIMER_RegDef_f    TIMER[4];                                /* 0x20    Timer0 Control */
N    };
N}DEV_TIMER_RegDef_f;
N/****DEV_TIMER end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 18 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_efuse_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_efuse_field.h" 1
N#ifndef __DEV_EFUSE_FIELD_H__
N#define __DEV_EFUSE_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************PSW***********************************/
Ntypedef struct{
N
N    __O  uint32_t KEY                 : 32;
X    volatile  uint32_t KEY                 : 32;
N}DEV_EFUSE_PSW_Field;
N/****DEV_EFUSEPSW end****/
N
N/***********************************ADR***********************************/
Ntypedef struct{
N
N    __IO uint32_t ADDR                : 10;
X    volatile uint32_t ADDR                : 10;
N         uint32_t RESERVED0           : 22;
N}DEV_EFUSE_ADR_Field;
N/****DEV_EFUSEADR end****/
N
N/***********************************CMD***********************************/
Ntypedef struct{
N
N    __IO uint32_t RUN                 : 1;
X    volatile uint32_t RUN                 : 1;
N    __IO uint32_t CMD                 : 2;
X    volatile uint32_t CMD                 : 2;
N    __IO uint32_t PG_MODE             : 1;
X    volatile uint32_t PG_MODE             : 1;
N    __IO uint32_t SECTOR              : 2;
X    volatile uint32_t SECTOR              : 2;
N         uint32_t RESERVED0           : 26;
N}DEV_EFUSE_CMD_Field;
N/****DEV_EFUSECMD end****/
N
N/***********************************TIM***********************************/
Ntypedef struct{
N
N    __IO uint32_t READ_ADDR           : 2;
X    volatile uint32_t READ_ADDR           : 2;
N    __IO uint32_t READ_STOB           : 2;
X    volatile uint32_t READ_STOB           : 2;
N    __IO uint32_t PROG_ADDR           : 4;
X    volatile uint32_t PROG_ADDR           : 4;
N    __IO uint32_t PROG_STOB           : 8;
X    volatile uint32_t PROG_STOB           : 8;
N         uint32_t RESERVED0           : 16;
N}DEV_EFUSE_TIM_Field;
N/****DEV_EFUSETIM end****/
N
N/***********************************VALUE0***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_EFUSE_VALUE0_Field;
N/****DEV_EFUSEVALUE0 end****/
N
N/***********************************VALUE1***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_EFUSE_VALUE1_Field;
N/****DEV_EFUSEVALUE1 end****/
N
N/***********************************VALUE2***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_EFUSE_VALUE2_Field;
N/****DEV_EFUSEVALUE2 end****/
N
N/***********************************VALUE3***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_EFUSE_VALUE3_Field;
N/****DEV_EFUSEVALUE3 end****/
N
N/***********************************VALUE4***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_EFUSE_VALUE4_Field;
N/****DEV_EFUSEVALUE4 end****/
N
N/***********************************VALUE5***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_EFUSE_VALUE5_Field;
N/****DEV_EFUSEVALUE5 end****/
N
N/***********************************VALUE6***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_EFUSE_VALUE6_Field;
N/****DEV_EFUSEVALUE6 end****/
N
N/***********************************VALUE7***********************************/
Ntypedef struct{
N
N    __I  uint32_t DATA                : 32;
X    volatile const  uint32_t DATA                : 32;
N}DEV_EFUSE_VALUE7_Field;
N/****DEV_EFUSEVALUE7 end****/
N
N/***********************************DEV_EFUSE register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __O     uint32_t    PSW;                                     /* 0x0    Efuse Password */
X        volatile     uint32_t    PSW;                                      
N        DEV_EFUSE_PSW_Field    PSW_f;
N    };
N    union
N    {
N        __IO    uint32_t    ADR;                                     /* 0x4    Efuse Program Address */
X        volatile    uint32_t    ADR;                                      
N        DEV_EFUSE_ADR_Field    ADR_f;
N    };
N    union
N    {
N        __IO    uint32_t    CMD;                                     /* 0x8    Efuse Command */
X        volatile    uint32_t    CMD;                                      
N        DEV_EFUSE_CMD_Field    CMD_f;
N    };
N    union
N    {
N        __IO    uint32_t    TIM;                                     /* 0xc    Efuse Timing */
X        volatile    uint32_t    TIM;                                      
N        DEV_EFUSE_TIM_Field    TIM_f;
N    };
N    uint32_t    RESERVED0[4];
N    union
N    {
N        __I     uint32_t    VALUE0;                                  /* 0x20    Efuse Data[31:0] */
X        volatile const     uint32_t    VALUE0;                                   
N        DEV_EFUSE_VALUE0_Field    VALUE0_f;
N    };
N    union
N    {
N        __I     uint32_t    VALUE1;                                  /* 0x24    Efuse Data[63:32] */
X        volatile const     uint32_t    VALUE1;                                   
N        DEV_EFUSE_VALUE1_Field    VALUE1_f;
N    };
N    union
N    {
N        __I     uint32_t    VALUE2;                                  /* 0x28    Efuse Data[95:64] */
X        volatile const     uint32_t    VALUE2;                                   
N        DEV_EFUSE_VALUE2_Field    VALUE2_f;
N    };
N    union
N    {
N        __I     uint32_t    VALUE3;                                  /* 0x2c    Efuse Data[127:96] */
X        volatile const     uint32_t    VALUE3;                                   
N        DEV_EFUSE_VALUE3_Field    VALUE3_f;
N    };
N    union
N    {
N        __I     uint32_t    VALUE4;                                  /* 0x30    Efuse Data[159:128] */
X        volatile const     uint32_t    VALUE4;                                   
N        DEV_EFUSE_VALUE4_Field    VALUE4_f;
N    };
N    union
N    {
N        __I     uint32_t    VALUE5;                                  /* 0x34    Efuse Data[191:160] */
X        volatile const     uint32_t    VALUE5;                                   
N        DEV_EFUSE_VALUE5_Field    VALUE5_f;
N    };
N    union
N    {
N        __I     uint32_t    VALUE6;                                  /* 0x38    Efuse Data[223:192] */
X        volatile const     uint32_t    VALUE6;                                   
N        DEV_EFUSE_VALUE6_Field    VALUE6_f;
N    };
N    union
N    {
N        __I     uint32_t    VALUE7;                                  /* 0x3c    Efuse Data[255:224] */
X        volatile const     uint32_t    VALUE7;                                   
N        DEV_EFUSE_VALUE7_Field    VALUE7_f;
N    };
N}DEV_EFUSE_RegDef_f;
N/****DEV_EFUSE end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 19 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_osc_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_osc_field.h" 1
N#ifndef __AON_OSC_FIELD_H__
N#define __AON_OSC_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************DEV_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t DEV_EN              : 1;
X    volatile uint32_t DEV_EN              : 1;
N         uint32_t RESERVED0           : 31;
N}AON_OSC_DEV_CTL_Field;
N/****AON_OSCDEV_CTL end****/
N
N/***********************************XTAL_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t CAPON               : 1;
X    volatile uint32_t CAPON               : 1;
N    __IO uint32_t BUFSEL              : 1;
X    volatile uint32_t BUFSEL              : 1;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t GMCTL               : 4;
X    volatile uint32_t GMCTL               : 4;
N    __IO uint32_t OCAPC               : 4;
X    volatile uint32_t OCAPC               : 4;
N    __IO uint32_t OCAPF               : 5;
X    volatile uint32_t OCAPF               : 5;
N    __IO uint32_t ICAPC               : 4;
X    volatile uint32_t ICAPC               : 4;
N    __IO uint32_t ICAPF               : 5;
X    volatile uint32_t ICAPF               : 5;
N    __IO uint32_t DEBEN               : 1;
X    volatile uint32_t DEBEN               : 1;
N    __IO uint32_t TESTEN              : 1;
X    volatile uint32_t TESTEN              : 1;
N         uint32_t RESERVED1           : 4;
N}AON_OSC_XTAL_CTL_Field;
N/****AON_OSCXTAL_CTL end****/
N
N/***********************************TRIM***********************************/
Ntypedef struct{
N
N    __IO uint32_t ADC_TRIM            : 6;
X    volatile uint32_t ADC_TRIM            : 6;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t DEV_TRIM            : 7;
X    volatile uint32_t DEV_TRIM            : 7;
N         uint32_t RESERVED1           : 1;
N    __IO uint32_t AUDIO_PLL_TRIM      : 4;
X    volatile uint32_t AUDIO_PLL_TRIM      : 4;
N         uint32_t RESERVED2           : 4;
N         uint32_t RESERVED3           : 8;
N}AON_OSC_TRIM_Field;
N/****AON_OSCTRIM end****/
N
N/***********************************TEST***********************************/
Ntypedef struct{
N
N    __IO uint32_t TEST_EN             : 1;
X    volatile uint32_t TEST_EN             : 1;
N    __IO uint32_t DTEST_SEL           : 3;
X    volatile uint32_t DTEST_SEL           : 3;
N    __IO uint32_t DTEST_DIV           : 3;
X    volatile uint32_t DTEST_DIV           : 3;
N    __IO uint32_t DTEST_EN            : 1;
X    volatile uint32_t DTEST_EN            : 1;
N    __IO uint32_t ATEST_SEL           : 1;
X    volatile uint32_t ATEST_SEL           : 1;
N         uint32_t RESERVED0           : 3;
N         uint32_t RESERVED1           : 20;
N}AON_OSC_TEST_Field;
N/****AON_OSCTEST end****/
N
N/***********************************AON_OSC register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    DEV_CTL;                                 /* 0x0    OSC Device Clock Control(24M) */
X        volatile    uint32_t    DEV_CTL;                                  
N        AON_OSC_DEV_CTL_Field    DEV_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    XTAL_CTL;                                /* 0x4    OSC XTAL Clock Control(24M) */
X        volatile    uint32_t    XTAL_CTL;                                 
N        AON_OSC_XTAL_CTL_Field    XTAL_CTL_f;
N    };
N    uint32_t    RESERVED0[2];
N    union
N    {
N        __IO    uint32_t    TRIM;                                    /* 0x10    OSC Trim */
X        volatile    uint32_t    TRIM;                                     
N        AON_OSC_TRIM_Field    TRIM_f;
N    };
N    union
N    {
N        __IO    uint32_t    TEST;                                    /* 0x14    OSC Test */
X        volatile    uint32_t    TEST;                                     
N        AON_OSC_TEST_Field    TEST_f;
N    };
N}AON_OSC_RegDef_f;
N/****AON_OSC end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 20 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_pll_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_pll_field.h" 1
N#ifndef __AON_PLL_FIELD_H__
N#define __AON_PLL_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CORE_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t SEL                 : 2;
X    volatile uint32_t SEL                 : 2;
N    __IO uint32_t CUST                : 1;
X    volatile uint32_t CUST                : 1;
N    __IO uint32_t FREQ                : 7;
X    volatile uint32_t FREQ                : 7;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t POSTDIV             : 4;
X    volatile uint32_t POSTDIV             : 4;
N    __IO uint32_t LOOPDIV             : 9;
X    volatile uint32_t LOOPDIV             : 9;
N    __IO uint32_t PREDIV              : 5;
X    volatile uint32_t PREDIV              : 5;
N    __IO uint32_t BYPASS              : 1;
X    volatile uint32_t BYPASS              : 1;
N         uint32_t RESERVED1           : 1;
N}AON_PLL_CORE_CTL_Field;
N/****AON_PLLCORE_CTL end****/
N
N/***********************************CORE_DBG***********************************/
Ntypedef struct{
N
N    __IO uint32_t ICHP                : 2;
X    volatile uint32_t ICHP                : 2;
N    __IO uint32_t LPF_RS              : 2;
X    volatile uint32_t LPF_RS              : 2;
N    __IO uint32_t FORCEVC             : 1;
X    volatile uint32_t FORCEVC             : 1;
N    __IO uint32_t SETVC               : 3;
X    volatile uint32_t SETVC               : 3;
N    __IO uint32_t TSTSEL              : 2;
X    volatile uint32_t TSTSEL              : 2;
N    __IO uint32_t TSTEN               : 1;
X    volatile uint32_t TSTEN               : 1;
N         uint32_t RESERVED0           : 5;
N         uint32_t RESERVED1           : 16;
N}AON_PLL_CORE_DBG_Field;
N/****AON_PLLCORE_DBG end****/
N
N/***********************************AUDIO_CTL0***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t FRAC_EN             : 1;
X    volatile uint32_t FRAC_EN             : 1;
N    __IO uint32_t SEL                 : 2;
X    volatile uint32_t SEL                 : 2;
N    __IO uint32_t ICP                 : 4;
X    volatile uint32_t ICP                 : 4;
N    __IO uint32_t POSTDIV             : 5;
X    volatile uint32_t POSTDIV             : 5;
N         uint32_t RESERVED0           : 3;
N    __IO uint32_t INTEG               : 5;
X    volatile uint32_t INTEG               : 5;
N         uint32_t RESERVED1           : 11;
N}AON_PLL_AUDIO_CTL0_Field;
N/****AON_PLLAUDIO_CTL0 end****/
N
N/***********************************AUDIO_CTL1***********************************/
Ntypedef struct{
N
N    __IO uint32_t FRAC                : 20;
X    volatile uint32_t FRAC                : 20;
N         uint32_t RESERVED0           : 12;
N}AON_PLL_AUDIO_CTL1_Field;
N/****AON_PLLAUDIO_CTL1 end****/
N
N/***********************************LOCK_STAT***********************************/
Ntypedef struct{
N
N    __I  uint32_t PLL_CORE_LOCK       : 1;
X    volatile const  uint32_t PLL_CORE_LOCK       : 1;
N    __I  uint32_t PLL_AUDIO_LOCK      : 1;
X    volatile const  uint32_t PLL_AUDIO_LOCK      : 1;
N    __I  uint32_t PLL_AUDIO_UNLOCK    : 1;
X    volatile const  uint32_t PLL_AUDIO_UNLOCK    : 1;
N    __I  uint32_t PLL_AUDIO_LOCK_DIR  : 1;
X    volatile const  uint32_t PLL_AUDIO_LOCK_DIR  : 1;
N         uint32_t RESERVED0           : 28;
N}AON_PLL_LOCK_STAT_Field;
N/****AON_PLLLOCK_STAT end****/
N
N/***********************************AON_PLL register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    CORE_CTL;                                /* 0x0    Core PLL Control */
X        volatile    uint32_t    CORE_CTL;                                 
N        AON_PLL_CORE_CTL_Field    CORE_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    CORE_DBG;                                /* 0x4    Core PLL Debug */
X        volatile    uint32_t    CORE_DBG;                                 
N        AON_PLL_CORE_DBG_Field    CORE_DBG_f;
N    };
N    uint32_t    RESERVED0[2];
N    union
N    {
N        __IO    uint32_t    AUDIO_CTL0;                              /* 0x10    Audio PLL Control0 */
X        volatile    uint32_t    AUDIO_CTL0;                               
N        AON_PLL_AUDIO_CTL0_Field    AUDIO_CTL0_f;
N    };
N    union
N    {
N        __IO    uint32_t    AUDIO_CTL1;                              /* 0x14    Audio PLL Control1 */
X        volatile    uint32_t    AUDIO_CTL1;                               
N        AON_PLL_AUDIO_CTL1_Field    AUDIO_CTL1_f;
N    };
N    uint32_t    RESERVED1[2];
N    union
N    {
N        __I     uint32_t    LOCK_STAT;                               /* 0x20    PLL Lock State */
X        volatile const     uint32_t    LOCK_STAT;                                
N        AON_PLL_LOCK_STAT_Field    LOCK_STAT_f;
N    };
N}AON_PLL_RegDef_f;
N/****AON_PLL end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 21 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_cmu_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_cmu_field.h" 1
N#ifndef __AON_CMU_FIELD_H__
N#define __AON_CMU_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CLKEN0***********************************/
Ntypedef struct{
N
N    __IO uint32_t LRADC               : 1;
X    volatile uint32_t LRADC               : 1;
N    __IO uint32_t AUDI                : 1;
X    volatile uint32_t AUDI                : 1;
N    __IO uint32_t BUFF                : 1;
X    volatile uint32_t BUFF                : 1;
N    __IO uint32_t DEB                 : 1;
X    volatile uint32_t DEB                 : 1;
N         uint32_t RESERVED0           : 4;
N    __IO uint32_t CLKMOD_AON          : 1;
X    volatile uint32_t CLKMOD_AON          : 1;
N    __IO uint32_t CLKSEL_AON          : 1;
X    volatile uint32_t CLKSEL_AON          : 1;
N         uint32_t RESERVED1           : 10;
N}AON_CMU_CLKEN0_Field;
N/****AON_CMUCLKEN0 end****/
N
N/***********************************LRADCCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 2;
X    volatile uint32_t SEL                 : 2;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t DIV                 : 8;
X    volatile uint32_t DIV                 : 8;
N         uint32_t RESERVED1           : 20;
N}AON_CMU_LRADCCLK_Field;
N/****AON_CMULRADCCLK end****/
N
N/***********************************DMICCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 2;
X    volatile uint32_t SEL                 : 2;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t DIV                 : 8;
X    volatile uint32_t DIV                 : 8;
N         uint32_t RESERVED1           : 20;
N}AON_CMU_DMICCLK_Field;
N/****AON_CMUDMICCLK end****/
N
N/***********************************I2SRXCLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 2;
X    volatile uint32_t SEL                 : 2;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t DIV                 : 8;
X    volatile uint32_t DIV                 : 8;
N         uint32_t RESERVED1           : 20;
N}AON_CMU_I2SRXCLK_Field;
N/****AON_CMUI2SRXCLK end****/
N
N/***********************************CMUDBG***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 6;
X    volatile uint32_t SEL                 : 6;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t DIV                 : 3;
X    volatile uint32_t DIV                 : 3;
N         uint32_t RESERVED1           : 21;
N}AON_CMU_CMUDBG_Field;
N/****AON_CMUCMUDBG end****/
N
N/***********************************AON_CMU register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    CLKEN0;                                  /* 0x0    Clock Enable */
X        volatile    uint32_t    CLKEN0;                                   
N        AON_CMU_CLKEN0_Field    CLKEN0_f;
N    };
N    uint32_t    RESERVED0[3];
N    union
N    {
N        __IO    uint32_t    LRADCCLK;                                /* 0x10    LRADC Clock Control */
X        volatile    uint32_t    LRADCCLK;                                 
N        AON_CMU_LRADCCLK_Field    LRADCCLK_f;
N    };
N    union
N    {
N        __IO    uint32_t    DMICCLK;                                 /* 0x14    DMIC Clock Control */
X        volatile    uint32_t    DMICCLK;                                  
N        AON_CMU_DMICCLK_Field    DMICCLK_f;
N    };
N    union
N    {
N        __IO    uint32_t    I2SRXCLK;                                /* 0x18    I2SRX Clock Control */
X        volatile    uint32_t    I2SRXCLK;                                 
N        AON_CMU_I2SRXCLK_Field    I2SRXCLK_f;
N    };
N    uint32_t    RESERVED1[55];
N    union
N    {
N        __IO    uint32_t    CMUDBG;                                  /* 0xf8    Clock Debug Output */
X        volatile    uint32_t    CMUDBG;                                   
N        AON_CMU_CMUDBG_Field    CMUDBG_f;
N    };
N}AON_CMU_RegDef_f;
N/****AON_CMU end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 22 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_pmu_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_pmu_field.h" 1
N#ifndef __AON_PMU_FIELD_H__
N#define __AON_PMU_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************PWR_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t STATE               : 2;
X    volatile uint32_t STATE               : 2;
N    __IO uint32_t RESTART_TIME        : 2;
X    volatile uint32_t RESTART_TIME        : 2;
N    __IO uint32_t PMU_SPEED           : 1;
X    volatile uint32_t PMU_SPEED           : 1;
N         uint32_t RESERVED0           : 3;
N    __IO uint32_t BIAS_NORM_EN        : 1;
X    volatile uint32_t BIAS_NORM_EN        : 1;
N    __IO uint32_t IOVCC_NORM_EN       : 1;
X    volatile uint32_t IOVCC_NORM_EN       : 1;
N    __IO uint32_t DVDD_NORM_EN        : 1;
X    volatile uint32_t DVDD_NORM_EN        : 1;
N    __IO uint32_t VDDQ_NORM_EN        : 1;
X    volatile uint32_t VDDQ_NORM_EN        : 1;
N    __IO uint32_t AVCC_NORM_EN        : 1;
X    volatile uint32_t AVCC_NORM_EN        : 1;
N    __IO uint32_t CPP_NORM_EN         : 1;
X    volatile uint32_t CPP_NORM_EN         : 1;
N         uint32_t RESERVED1           : 2;
N    __IO uint32_t BIAS_FORCE_EN       : 1;
X    volatile uint32_t BIAS_FORCE_EN       : 1;
N    __IO uint32_t IOVCC_FORCE_EN      : 1;
X    volatile uint32_t IOVCC_FORCE_EN      : 1;
N    __IO uint32_t DVDD_FORCE_EN       : 1;
X    volatile uint32_t DVDD_FORCE_EN       : 1;
N    __IO uint32_t VDDQ_FORCE_EN       : 1;
X    volatile uint32_t VDDQ_FORCE_EN       : 1;
N    __IO uint32_t AVCC_FORCE_EN       : 1;
X    volatile uint32_t AVCC_FORCE_EN       : 1;
N    __IO uint32_t CPP_FORCE_EN        : 1;
X    volatile uint32_t CPP_FORCE_EN        : 1;
N         uint32_t RESERVED2           : 2;
N    __IO uint32_t IOVCC_DET_EN        : 1;
X    volatile uint32_t IOVCC_DET_EN        : 1;
N    __IO uint32_t DVDD_DET_EN         : 1;
X    volatile uint32_t DVDD_DET_EN         : 1;
N    __IO uint32_t AVCC_DET_EN         : 1;
X    volatile uint32_t AVCC_DET_EN         : 1;
N    __IO uint32_t CPP_DET_EN          : 1;
X    volatile uint32_t CPP_DET_EN          : 1;
N         uint32_t RESERVED3           : 4;
N}AON_PMU_PWR_CTL_Field;
N/****AON_PMUPWR_CTL end****/
N
N/***********************************VOL_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t SVCC_VOL            : 3;
X    volatile uint32_t SVCC_VOL            : 3;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t SVDD_VOL            : 2;
X    volatile uint32_t SVDD_VOL            : 2;
N         uint32_t RESERVED1           : 2;
N    __IO uint32_t DVDD_VOL            : 3;
X    volatile uint32_t DVDD_VOL            : 3;
N         uint32_t RESERVED2           : 1;
N    __IO uint32_t AVCC_VOL            : 3;
X    volatile uint32_t AVCC_VOL            : 3;
N         uint32_t RESERVED3           : 1;
N    __IO uint32_t IOVCC_VOL           : 4;
X    volatile uint32_t IOVCC_VOL           : 4;
N    __IO uint32_t CPP_VOL             : 2;
X    volatile uint32_t CPP_VOL             : 2;
N         uint32_t RESERVED4           : 2;
N    __IO uint32_t AVDD_VOL            : 2;
X    volatile uint32_t AVDD_VOL            : 2;
N         uint32_t RESERVED5           : 6;
N}AON_PMU_VOL_CTL_Field;
N/****AON_PMUVOL_CTL end****/
N
N/***********************************CLK_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t OSC_DEV_KEEP        : 1;
X    volatile uint32_t OSC_DEV_KEEP        : 1;
N    __IO uint32_t OSC_XTAL_KEEP       : 1;
X    volatile uint32_t OSC_XTAL_KEEP       : 1;
N    __IO uint32_t PLL_CORE_KEEP       : 1;
X    volatile uint32_t PLL_CORE_KEEP       : 1;
N    __IO uint32_t PLL_AUDIO_KEEP      : 1;
X    volatile uint32_t PLL_AUDIO_KEEP      : 1;
N         uint32_t RESERVED0           : 28;
N}AON_PMU_CLK_CTL_Field;
N/****AON_PMUCLK_CTL end****/
N
N/***********************************REF_TRIM***********************************/
Ntypedef struct{
N
N    __IO uint32_t VREF_TRIM           : 5;
X    volatile uint32_t VREF_TRIM           : 5;
N         uint32_t RESERVED0           : 3;
N    __IO uint32_t IREF_TRIM           : 4;
X    volatile uint32_t IREF_TRIM           : 4;
N    __IO uint32_t VBG1_TRIM           : 3;
X    volatile uint32_t VBG1_TRIM           : 3;
N         uint32_t RESERVED1           : 1;
N    __IO uint32_t CMU_VBG2_TRIM       : 3;
X    volatile uint32_t CMU_VBG2_TRIM       : 3;
N         uint32_t RESERVED2           : 13;
N}AON_PMU_REF_TRIM_Field;
N/****AON_PMUREF_TRIM end****/
N
N/***********************************ONOFF***********************************/
Ntypedef struct{
N
N    __I  uint32_t ONOFF_IN            : 1;
X    volatile const  uint32_t ONOFF_IN            : 1;
N    __I  uint32_t PWR_STA             : 1;
X    volatile const  uint32_t PWR_STA             : 1;
N    __I  uint32_t ONOFF_DEB           : 1;
X    volatile const  uint32_t ONOFF_DEB           : 1;
N    __IO uint32_t ONOFF_BOOT          : 1;
X    volatile uint32_t ONOFF_BOOT          : 1;
N    __IO uint32_t ONOFF_DEB_TIME      : 2;
X    volatile uint32_t ONOFF_DEB_TIME      : 2;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t ONOFF_SHORT_TIME    : 3;
X    volatile uint32_t ONOFF_SHORT_TIME    : 3;
N    __IO uint32_t ONOFF_ULONG_TIME    : 1;
X    volatile uint32_t ONOFF_ULONG_TIME    : 1;
N    __IO uint32_t ONOFF_LONG_TIME     : 2;
X    volatile uint32_t ONOFF_LONG_TIME     : 2;
N         uint32_t RESERVED1           : 2;
N    __IO uint32_t ONOFF_SPEED         : 1;
X    volatile uint32_t ONOFF_SPEED         : 1;
N    __IO uint32_t ONOFF_SEL           : 1;
X    volatile uint32_t ONOFF_SEL           : 1;
N    __IO uint32_t GPIO_SEL            : 1;
X    volatile uint32_t GPIO_SEL            : 1;
N         uint32_t RESERVED2           : 1;
N    __IO uint32_t ONOFF_EDGE          : 3;
X    volatile uint32_t ONOFF_EDGE          : 3;
N         uint32_t RESERVED3           : 9;
N}AON_PMU_ONOFF_Field;
N/****AON_PMUONOFF end****/
N
N/***********************************PWR_STA***********************************/
Ntypedef struct{
N
N    __IO uint32_t DVDDOK              : 1;
X    volatile uint32_t DVDDOK              : 1;
N    __IO uint32_t AVCCOK              : 1;
X    volatile uint32_t AVCCOK              : 1;
N    __IO uint32_t IOVCCOK             : 1;
X    volatile uint32_t IOVCCOK             : 1;
N    __IO uint32_t CPPOK               : 1;
X    volatile uint32_t CPPOK               : 1;
N         uint32_t RESERVED0           : 28;
N}AON_PMU_PWR_STA_Field;
N/****AON_PMUPWR_STA end****/
N
N/***********************************IE***********************************/
Ntypedef struct{
N
N    __IO uint32_t ONOFF_SHORT         : 1;
X    volatile uint32_t ONOFF_SHORT         : 1;
N    __IO uint32_t ONOFF_LONG          : 1;
X    volatile uint32_t ONOFF_LONG          : 1;
N    __IO uint32_t ONOFF_ULONG         : 1;
X    volatile uint32_t ONOFF_ULONG         : 1;
N    __IO uint32_t ONOFF_XLONG         : 1;
X    volatile uint32_t ONOFF_XLONG         : 1;
N    __IO uint32_t ONOFF_EDGE          : 1;
X    volatile uint32_t ONOFF_EDGE          : 1;
N         uint32_t RESERVED0           : 27;
N}AON_PMU_IE_Field;
N/****AON_PMUIE end****/
N
N/***********************************PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t ONOFF_SHORT         : 1;
X    volatile uint32_t ONOFF_SHORT         : 1;
N    __IO uint32_t ONOFF_LONG          : 1;
X    volatile uint32_t ONOFF_LONG          : 1;
N    __IO uint32_t ONOFF_ULONG         : 1;
X    volatile uint32_t ONOFF_ULONG         : 1;
N    __IO uint32_t ONOFF_XLONG         : 1;
X    volatile uint32_t ONOFF_XLONG         : 1;
N    __IO uint32_t ONOFF_EDGE          : 1;
X    volatile uint32_t ONOFF_EDGE          : 1;
N         uint32_t RESERVED0           : 27;
N}AON_PMU_PD_Field;
N/****AON_PMUPD end****/
N
N/***********************************WKEN***********************************/
Ntypedef struct{
N
N    __IO uint32_t ONOFF_SHORT         : 1;
X    volatile uint32_t ONOFF_SHORT         : 1;
N    __IO uint32_t ONOFF_LONG          : 1;
X    volatile uint32_t ONOFF_LONG          : 1;
N    __IO uint32_t ONOFF_ULONG         : 1;
X    volatile uint32_t ONOFF_ULONG         : 1;
N    __IO uint32_t ONOFF_XLONG         : 1;
X    volatile uint32_t ONOFF_XLONG         : 1;
N    __IO uint32_t ONOFF_EDGE          : 1;
X    volatile uint32_t ONOFF_EDGE          : 1;
N         uint32_t RESERVED0           : 27;
N}AON_PMU_WKEN_Field;
N/****AON_PMUWKEN end****/
N
N/***********************************RSTEN***********************************/
Ntypedef struct{
N
N    __IO uint32_t RESET_SHORT         : 1;
X    volatile uint32_t RESET_SHORT         : 1;
N    __IO uint32_t RESET_LONG          : 1;
X    volatile uint32_t RESET_LONG          : 1;
N    __IO uint32_t RESET_ULONG         : 1;
X    volatile uint32_t RESET_ULONG         : 1;
N    __IO uint32_t RESET_XLONG         : 1;
X    volatile uint32_t RESET_XLONG         : 1;
N    __IO uint32_t RESET_SVDD          : 1;
X    volatile uint32_t RESET_SVDD          : 1;
N         uint32_t RESERVED0           : 3;
N    __IO uint32_t RESTART_SHORT       : 1;
X    volatile uint32_t RESTART_SHORT       : 1;
N    __IO uint32_t RESTART_LONG        : 1;
X    volatile uint32_t RESTART_LONG        : 1;
N    __IO uint32_t RESTART_ULONG       : 1;
X    volatile uint32_t RESTART_ULONG       : 1;
N    __IO uint32_t RESTART_XLONG       : 1;
X    volatile uint32_t RESTART_XLONG       : 1;
N    __IO uint32_t RESTART_SVDD        : 1;
X    volatile uint32_t RESTART_SVDD        : 1;
N         uint32_t RESERVED1           : 16;
N}AON_PMU_RSTEN_Field;
N/****AON_PMURSTEN end****/
N
N/***********************************AON_PMU register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    PWR_CTL;                                 /* 0x0    PMU Power Control */
X        volatile    uint32_t    PWR_CTL;                                  
N        AON_PMU_PWR_CTL_Field    PWR_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    VOL_CTL;                                 /* 0x4    PMU Voltage Control */
X        volatile    uint32_t    VOL_CTL;                                  
N        AON_PMU_VOL_CTL_Field    VOL_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    CLK_CTL;                                 /* 0x8    PMU Clock Control */
X        volatile    uint32_t    CLK_CTL;                                  
N        AON_PMU_CLK_CTL_Field    CLK_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    REF_TRIM;                                /* 0xc    PMU Reference Control */
X        volatile    uint32_t    REF_TRIM;                                 
N        AON_PMU_REF_TRIM_Field    REF_TRIM_f;
N    };
N    union
N    {
N        __IO    uint32_t    ONOFF;                                   /* 0x10    PMU Onoff Control */
X        volatile    uint32_t    ONOFF;                                    
N        AON_PMU_ONOFF_Field    ONOFF_f;
N    };
N    union
N    {
N        __IO    uint32_t    PWR_STA;                                 /* 0x14    PMU Status */
X        volatile    uint32_t    PWR_STA;                                  
N        AON_PMU_PWR_STA_Field    PWR_STA_f;
N    };
N    uint32_t    RESERVED0[2];
N    union
N    {
N        __IO    uint32_t    IE;                                      /* 0x20    PMU Interrupt Control */
X        volatile    uint32_t    IE;                                       
N        AON_PMU_IE_Field    IE_f;
N    };
N    union
N    {
N        __IO    uint32_t    PD;                                      /* 0x24    PMU Pending */
X        volatile    uint32_t    PD;                                       
N        AON_PMU_PD_Field    PD_f;
N    };
N    union
N    {
N        __IO    uint32_t    WKEN;                                    /* 0x28    PMU Reset Control */
X        volatile    uint32_t    WKEN;                                     
N        AON_PMU_WKEN_Field    WKEN_f;
N    };
N    union
N    {
N        __IO    uint32_t    RSTEN;                                   /* 0x2c    PMU Wakeup */
X        volatile    uint32_t    RSTEN;                                    
N        AON_PMU_RSTEN_Field    RSTEN_f;
N    };
N}AON_PMU_RegDef_f;
N/****AON_PMU end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 23 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_rmu_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_rmu_field.h" 1
N#ifndef __AON_RMU_FIELD_H__
N#define __AON_RMU_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************RSTEN0***********************************/
Ntypedef struct{
N
N    __IO uint32_t LRADC               : 1;
X    volatile uint32_t LRADC               : 1;
N    __IO uint32_t AUDI                : 1;
X    volatile uint32_t AUDI                : 1;
N    __IO uint32_t BUFF                : 1;
X    volatile uint32_t BUFF                : 1;
N         uint32_t RESERVED0           : 5;
N         uint32_t RESERVED1           : 24;
N}AON_RMU_RSTEN0_Field;
N/****AON_RMURSTEN0 end****/
N
N/***********************************AON_RMU register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    RSTEN0;                                  /* 0x0    Alway On Reset Enable */
X        volatile    uint32_t    RSTEN0;                                   
N        AON_RMU_RSTEN0_Field    RSTEN0_f;
N    };
N}AON_RMU_RegDef_f;
N/****AON_RMU end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 24 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_gpio_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_gpio_field.h" 1
N#ifndef __AON_GPIO_FIELD_H__
N#define __AON_GPIO_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************SPIOn_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t MFP                 : 4;
X    volatile uint32_t MFP                 : 4;
N    __IO uint32_t OE                  : 1;
X    volatile uint32_t OE                  : 1;
N    __IO uint32_t IE                  : 1;
X    volatile uint32_t IE                  : 1;
N    __IO uint32_t PE                  : 1;
X    volatile uint32_t PE                  : 1;
N    __IO uint32_t PS                  : 1;
X    volatile uint32_t PS                  : 1;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t O                   : 1;
X    volatile uint32_t O                   : 1;
N    __IO uint32_t LB                  : 1;
X    volatile uint32_t LB                  : 1;
N         uint32_t RESERVED1           : 1;
N    __IO uint32_t DS                  : 1;
X    volatile uint32_t DS                  : 1;
N    __IO uint32_t OV                  : 1;
X    volatile uint32_t OV                  : 1;
N    __IO uint32_t IV                  : 1;
X    volatile uint32_t IV                  : 1;
N         uint32_t RESERVED2           : 17;
N}AON_GPIO_SPIOn_CTL_Field;
N/****AON_GPIOSPIOn_CTL end****/
N
N/***********************************SPIO_IN***********************************/
Ntypedef struct{
N
N    __I  uint32_t IN                  : 6;
X    volatile const  uint32_t IN                  : 6;
N         uint32_t RESERVED0           : 26;
N}AON_GPIO_SPIO_IN_Field;
N/****AON_GPIOSPIO_IN end****/
N
N/***********************************SPIO_IC***********************************/
Ntypedef struct{
N
N    __IO uint32_t SOURCE              : 4;
X    volatile uint32_t SOURCE              : 4;
N    __IO uint32_t EVENT               : 3;
X    volatile uint32_t EVENT               : 3;
N         uint32_t RESERVED0           : 25;
N}AON_GPIO_SPIO_IC_Field;
N/****AON_GPIOSPIO_IC end****/
N
N/***********************************SPIO_ONOFF2***********************************/
Ntypedef struct{
N
N    __IO uint32_t SOURCE              : 3;
X    volatile uint32_t SOURCE              : 3;
N         uint32_t RESERVED0           : 1;
N         uint32_t RESERVED1           : 28;
N}AON_GPIO_SPIO_ONOFF2_Field;
N/****AON_GPIOSPIO_ONOFF2 end****/
N
N/***********************************DBIO_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t GRP_SEL             : 6;
X    volatile uint32_t GRP_SEL             : 6;
N    __IO uint32_t BIT_EN              : 1;
X    volatile uint32_t BIT_EN              : 1;
N    __IO uint32_t BIT_SEL             : 4;
X    volatile uint32_t BIT_SEL             : 4;
N         uint32_t RESERVED0           : 20;
N}AON_GPIO_DBIO_CTL_Field;
N/****AON_GPIODBIO_CTL end****/
N
N/***********************************DBIO_OE0***********************************/
Ntypedef struct{
N
N    __IO uint32_t OE                  : 6;
X    volatile uint32_t OE                  : 6;
N         uint32_t RESERVED0           : 26;
N}AON_GPIO_DBIO_OE0_Field;
N/****AON_GPIODBIO_OE0 end****/
N
N/***********************************DBIO_IE0***********************************/
Ntypedef struct{
N
N    __IO uint32_t IE                  : 6;
X    volatile uint32_t IE                  : 6;
N         uint32_t RESERVED0           : 26;
N}AON_GPIO_DBIO_IE0_Field;
N/****AON_GPIODBIO_IE0 end****/
N
N/***********************************AON_GPIO register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    SPIOn_CTL[6];                            /* 0x0    SPIO Control */
X        volatile    uint32_t    SPIOn_CTL[6];                             
N        AON_GPIO_SPIOn_CTL_Field    SPIOn_CTL_f[6];
N    };
N    uint32_t    RESERVED0[2];
N    union
N    {
N        __I     uint32_t    SPIO_IN;                                 /* 0x20    SPIO Input */
X        volatile const     uint32_t    SPIO_IN;                                  
N        AON_GPIO_SPIO_IN_Field    SPIO_IN_f;
N    };
N    uint32_t    RESERVED1[7];
N    union
N    {
N        __IO    uint32_t    SPIO_IC;                                 /* 0x40    SPIO Interrupt Control */
X        volatile    uint32_t    SPIO_IC;                                  
N        AON_GPIO_SPIO_IC_Field    SPIO_IC_f;
N    };
N    union
N    {
N        __IO    uint32_t    SPIO_ONOFF2;                             /* 0x44    SPIO ONOFF Control */
X        volatile    uint32_t    SPIO_ONOFF2;                              
N        AON_GPIO_SPIO_ONOFF2_Field    SPIO_ONOFF2_f;
N    };
N    uint32_t    RESERVED2[6];
N    union
N    {
N        __IO    uint32_t    DBIO_CTL;                                /* 0x60    Debug IO Control */
X        volatile    uint32_t    DBIO_CTL;                                 
N        AON_GPIO_DBIO_CTL_Field    DBIO_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    DBIO_OE0;                                /* 0x64    Debug IO Output Enable */
X        volatile    uint32_t    DBIO_OE0;                                 
N        AON_GPIO_DBIO_OE0_Field    DBIO_OE0_f;
N    };
N    union
N    {
N        __IO    uint32_t    DBIO_IE0;                                /* 0x68    Debug IO Input Enable */
X        volatile    uint32_t    DBIO_IE0;                                 
N        AON_GPIO_DBIO_IE0_Field    DBIO_IE0_f;
N    };
N}AON_GPIO_RegDef_f;
N/****AON_GPIO end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 25 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_mem_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_mem_field.h" 1
N#ifndef __AON_MEM_FIELD_H__
N#define __AON_MEM_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************C_RAM0_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t RM                  : 4;
X    volatile uint32_t RM                  : 4;
N    __IO uint32_t RME                 : 1;
X    volatile uint32_t RME                 : 1;
N    __IO uint32_t LS                  : 1;
X    volatile uint32_t LS                  : 1;
N         uint32_t RESERVED0           : 26;
N}AON_MEM_C_RAM0_CTL_Field;
N/****AON_MEMC_RAM0_CTL end****/
N
N/***********************************C_BIST_TEST***********************************/
Ntypedef struct{
N
N    __IO uint32_t BIST_TEST           : 1;
X    volatile uint32_t BIST_TEST           : 1;
N         uint32_t RESERVED0           : 31;
N}AON_MEM_C_BIST_TEST_Field;
N/****AON_MEMC_BIST_TEST end****/
N
N/***********************************C_BIST_DONE***********************************/
Ntypedef struct{
N
N    __I  uint32_t BIST_DONE           : 1;
X    volatile const  uint32_t BIST_DONE           : 1;
N         uint32_t RESERVED0           : 31;
N}AON_MEM_C_BIST_DONE_Field;
N/****AON_MEMC_BIST_DONE end****/
N
N/***********************************C_BIST_FAIL***********************************/
Ntypedef struct{
N
N    __I  uint32_t BIST_FAIL           : 1;
X    volatile const  uint32_t BIST_FAIL           : 1;
N         uint32_t RESERVED0           : 31;
N}AON_MEM_C_BIST_FAIL_Field;
N/****AON_MEMC_BIST_FAIL end****/
N
N/***********************************AON_MEM register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    MEMC_RAM0_CTL;                           /* 0x0    RAM Control */
X        volatile    uint32_t    MEMC_RAM0_CTL;                            
N        AON_MEM_C_RAM0_CTL_Field    MEMC_RAM0_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    MEMC_BIST_TEST;                          /* 0x4    Bist Start */
X        volatile    uint32_t    MEMC_BIST_TEST;                           
N        AON_MEM_C_BIST_TEST_Field    MEMC_BIST_TEST_f;
N    };
N    union
N    {
N        __I     uint32_t    MEMC_BIST_DONE;                          /* 0x8    Bist Done */
X        volatile const     uint32_t    MEMC_BIST_DONE;                           
N        AON_MEM_C_BIST_DONE_Field    MEMC_BIST_DONE_f;
N    };
N    union
N    {
N        __I     uint32_t    MEMC_BIST_FAIL;                          /* 0xc    Bist Fail */
X        volatile const     uint32_t    MEMC_BIST_FAIL;                           
N        AON_MEM_C_BIST_FAIL_Field    MEMC_BIST_FAIL_f;
N    };
N}AON_MEM_RegDef_f;
N/****AON_MEM end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 26 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_global_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_global_field.h" 1
N#ifndef __AON_GLOBAL_FIELD_H__
N#define __AON_GLOBAL_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************SVDD_GLOBAL0***********************************/
Ntypedef struct{
N
N    __IO uint32_t VALUE               : 32;
X    volatile uint32_t VALUE               : 32;
N}AON_GLOBAL_SVDD_GLOBAL0_Field;
N/****AON_GLOBALSVDD_GLOBAL0 end****/
N
N/***********************************SVDD_GLOBAL1***********************************/
Ntypedef struct{
N
N    __IO uint32_t VALUE               : 32;
X    volatile uint32_t VALUE               : 32;
N}AON_GLOBAL_SVDD_GLOBAL1_Field;
N/****AON_GLOBALSVDD_GLOBAL1 end****/
N
N/***********************************SVDD_GLOBAL2***********************************/
Ntypedef struct{
N
N    __IO uint32_t VALUE               : 32;
X    volatile uint32_t VALUE               : 32;
N}AON_GLOBAL_SVDD_GLOBAL2_Field;
N/****AON_GLOBALSVDD_GLOBAL2 end****/
N
N/***********************************SVDD_GLOBAL3***********************************/
Ntypedef struct{
N
N    __IO uint32_t VALUE               : 32;
X    volatile uint32_t VALUE               : 32;
N}AON_GLOBAL_SVDD_GLOBAL3_Field;
N/****AON_GLOBALSVDD_GLOBAL3 end****/
N
N/***********************************SVDD_GLOBAL4***********************************/
Ntypedef struct{
N
N    __IO uint32_t VALUE               : 32;
X    volatile uint32_t VALUE               : 32;
N}AON_GLOBAL_SVDD_GLOBAL4_Field;
N/****AON_GLOBALSVDD_GLOBAL4 end****/
N
N/***********************************SVDD_GLOBAL5***********************************/
Ntypedef struct{
N
N    __IO uint32_t VALUE               : 32;
X    volatile uint32_t VALUE               : 32;
N}AON_GLOBAL_SVDD_GLOBAL5_Field;
N/****AON_GLOBALSVDD_GLOBAL5 end****/
N
N/***********************************SVDD_GLOBAL6***********************************/
Ntypedef struct{
N
N    __IO uint32_t VALUE               : 32;
X    volatile uint32_t VALUE               : 32;
N}AON_GLOBAL_SVDD_GLOBAL6_Field;
N/****AON_GLOBALSVDD_GLOBAL6 end****/
N
N/***********************************SVDD_GLOBAL7***********************************/
Ntypedef struct{
N
N    __IO uint32_t VALUE               : 32;
X    volatile uint32_t VALUE               : 32;
N}AON_GLOBAL_SVDD_GLOBAL7_Field;
N/****AON_GLOBALSVDD_GLOBAL7 end****/
N
N/***********************************AON_GLOBAL register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    SVDD_GLOBAL0;                            /* 0x0    SVDD Global Register */
X        volatile    uint32_t    SVDD_GLOBAL0;                             
N        AON_GLOBAL_SVDD_GLOBAL0_Field    SVDD_GLOBAL0_f;
N    };
N    union
N    {
N        __IO    uint32_t    SVDD_GLOBAL1;                            /* 0x4    SVDD Global Register */
X        volatile    uint32_t    SVDD_GLOBAL1;                             
N        AON_GLOBAL_SVDD_GLOBAL1_Field    SVDD_GLOBAL1_f;
N    };
N    union
N    {
N        __IO    uint32_t    SVDD_GLOBAL2;                            /* 0x8    SVDD Global Register */
X        volatile    uint32_t    SVDD_GLOBAL2;                             
N        AON_GLOBAL_SVDD_GLOBAL2_Field    SVDD_GLOBAL2_f;
N    };
N    union
N    {
N        __IO    uint32_t    SVDD_GLOBAL3;                            /* 0xc    SVDD Global Register */
X        volatile    uint32_t    SVDD_GLOBAL3;                             
N        AON_GLOBAL_SVDD_GLOBAL3_Field    SVDD_GLOBAL3_f;
N    };
N    union
N    {
N        __IO    uint32_t    SVDD_GLOBAL4;                            /* 0x10    SVDD Global Register */
X        volatile    uint32_t    SVDD_GLOBAL4;                             
N        AON_GLOBAL_SVDD_GLOBAL4_Field    SVDD_GLOBAL4_f;
N    };
N    union
N    {
N        __IO    uint32_t    SVDD_GLOBAL5;                            /* 0x14    SVDD Global Register */
X        volatile    uint32_t    SVDD_GLOBAL5;                             
N        AON_GLOBAL_SVDD_GLOBAL5_Field    SVDD_GLOBAL5_f;
N    };
N    union
N    {
N        __IO    uint32_t    SVDD_GLOBAL6;                            /* 0x18    SVDD Global Register */
X        volatile    uint32_t    SVDD_GLOBAL6;                             
N        AON_GLOBAL_SVDD_GLOBAL6_Field    SVDD_GLOBAL6_f;
N    };
N    union
N    {
N        __IO    uint32_t    SVDD_GLOBAL7;                            /* 0x1c    SVDD Global Register */
X        volatile    uint32_t    SVDD_GLOBAL7;                             
N        AON_GLOBAL_SVDD_GLOBAL7_Field    SVDD_GLOBAL7_f;
N    };
N}AON_GLOBAL_RegDef_f;
N/****AON_GLOBAL end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 27 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_lradc_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_lradc_field.h" 1
N#ifndef __AON_LRADC_FIELD_H__
N#define __AON_LRADC_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CFGn***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t MODE                : 1;
X    volatile uint32_t MODE                : 1;
N    __IO uint32_t SR                  : 2;
X    volatile uint32_t SR                  : 2;
N    __IO uint32_t AVG                 : 3;
X    volatile uint32_t AVG                 : 3;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t SVK_LVL             : 10;
X    volatile uint32_t SVK_LVL             : 10;
N    __IO uint32_t SVK_EN              : 1;
X    volatile uint32_t SVK_EN              : 1;
N    __IO uint32_t SVK_TYPE            : 1;
X    volatile uint32_t SVK_TYPE            : 1;
N    __IO uint32_t SVK_EDGE            : 3;
X    volatile uint32_t SVK_EDGE            : 3;
N         uint32_t RESERVED1           : 1;
N         uint32_t RESERVED2           : 8;
N}AON_LRADC_CFGn_Field;
N/****AON_LRADCCFGn end****/
N
N/***********************************ANA***********************************/
Ntypedef struct{
N
N    __IO uint32_t LRADC_EN            : 1;
X    volatile uint32_t LRADC_EN            : 1;
N    __IO uint32_t LPCMP_EN            : 1;
X    volatile uint32_t LPCMP_EN            : 1;
N    __IO uint32_t LPCMP_VOL           : 1;
X    volatile uint32_t LPCMP_VOL           : 1;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t LRADC_PGA           : 3;
X    volatile uint32_t LRADC_PGA           : 3;
N    __IO uint32_t LRADC_MIC           : 1;
X    volatile uint32_t LRADC_MIC           : 1;
N    __IO uint32_t LRADC_VREF_SEL      : 1;
X    volatile uint32_t LRADC_VREF_SEL      : 1;
N         uint32_t RESERVED1           : 23;
N}AON_LRADC_ANA_Field;
N/****AON_LRADCANA end****/
N
N/***********************************MKV0***********************************/
Ntypedef struct{
N
N    __IO uint32_t KEY_EN              : 1;
X    volatile uint32_t KEY_EN              : 1;
N    __IO uint32_t DEB_EN              : 1;
X    volatile uint32_t DEB_EN              : 1;
N    __IO uint32_t DEB_TIME            : 2;
X    volatile uint32_t DEB_TIME            : 2;
N    __IO uint32_t KEY_SRC             : 4;
X    volatile uint32_t KEY_SRC             : 4;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t KEY_THD0            : 10;
X    volatile uint32_t KEY_THD0            : 10;
N    __IO uint32_t KEY_THD1            : 10;
X    volatile uint32_t KEY_THD1            : 10;
N         uint32_t RESERVED1           : 2;
N}AON_LRADC_MKV0_Field;
N/****AON_LRADCMKV0 end****/
N
N/***********************************MKV1***********************************/
Ntypedef struct{
N
N    __IO uint32_t KEY_THD2            : 10;
X    volatile uint32_t KEY_THD2            : 10;
N    __IO uint32_t KEY_THD3            : 10;
X    volatile uint32_t KEY_THD3            : 10;
N    __IO uint32_t KEY_THD4            : 10;
X    volatile uint32_t KEY_THD4            : 10;
N         uint32_t RESERVED0           : 2;
N}AON_LRADC_MKV1_Field;
N/****AON_LRADCMKV1 end****/
N
N/***********************************MKV2***********************************/
Ntypedef struct{
N
N    __IO uint32_t MVK0_EDGE           : 3;
X    volatile uint32_t MVK0_EDGE           : 3;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t MVK1_EDGE           : 3;
X    volatile uint32_t MVK1_EDGE           : 3;
N         uint32_t RESERVED1           : 1;
N    __IO uint32_t MVK2_EDGE           : 3;
X    volatile uint32_t MVK2_EDGE           : 3;
N         uint32_t RESERVED2           : 1;
N    __IO uint32_t MVK3_EDGE           : 3;
X    volatile uint32_t MVK3_EDGE           : 3;
N         uint32_t RESERVED3           : 1;
N    __IO uint32_t MVK4_EDGE           : 3;
X    volatile uint32_t MVK4_EDGE           : 3;
N         uint32_t RESERVED4           : 1;
N    __IO uint32_t MVK5_EDGE           : 3;
X    volatile uint32_t MVK5_EDGE           : 3;
N         uint32_t RESERVED5           : 9;
N}AON_LRADC_MKV2_Field;
N/****AON_LRADCMKV2 end****/
N
N/***********************************CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t LRADC_NUM           : 3;
X    volatile uint32_t LRADC_NUM           : 3;
N    __IO uint32_t FRADC_CHN           : 4;
X    volatile uint32_t FRADC_CHN           : 4;
N    __IO uint32_t LRADC_SELM          : 1;
X    volatile uint32_t LRADC_SELM          : 1;
N         uint32_t RESERVED0           : 23;
N}AON_LRADC_CTL_Field;
N/****AON_LRADCCTL end****/
N
N/***********************************IE***********************************/
Ntypedef struct{
N
N    __IO uint32_t LRADC00_END_IE      : 1;
X    volatile uint32_t LRADC00_END_IE      : 1;
N    __IO uint32_t LRADC01_END_IE      : 1;
X    volatile uint32_t LRADC01_END_IE      : 1;
N    __IO uint32_t LRADC02_END_IE      : 1;
X    volatile uint32_t LRADC02_END_IE      : 1;
N    __IO uint32_t LRADC03_END_IE      : 1;
X    volatile uint32_t LRADC03_END_IE      : 1;
N    __IO uint32_t LRADC04_END_IE      : 1;
X    volatile uint32_t LRADC04_END_IE      : 1;
N    __IO uint32_t LRADC05_END_IE      : 1;
X    volatile uint32_t LRADC05_END_IE      : 1;
N    __IO uint32_t LRADC06_END_IE      : 1;
X    volatile uint32_t LRADC06_END_IE      : 1;
N    __IO uint32_t LRADC07_END_IE      : 1;
X    volatile uint32_t LRADC07_END_IE      : 1;
N    __IO uint32_t LRADC08_END_IE      : 1;
X    volatile uint32_t LRADC08_END_IE      : 1;
N    __IO uint32_t LRADC09_END_IE      : 1;
X    volatile uint32_t LRADC09_END_IE      : 1;
N    __IO uint32_t LRADC10_END_IE      : 1;
X    volatile uint32_t LRADC10_END_IE      : 1;
N    __IO uint32_t LRADC11_END_IE      : 1;
X    volatile uint32_t LRADC11_END_IE      : 1;
N    __IO uint32_t LRADC00_SVK_IE      : 1;
X    volatile uint32_t LRADC00_SVK_IE      : 1;
N    __IO uint32_t LRADC01_SVK_IE      : 1;
X    volatile uint32_t LRADC01_SVK_IE      : 1;
N    __IO uint32_t LRADC02_SVK_IE      : 1;
X    volatile uint32_t LRADC02_SVK_IE      : 1;
N    __IO uint32_t LRADC03_SVK_IE      : 1;
X    volatile uint32_t LRADC03_SVK_IE      : 1;
N    __IO uint32_t LRADC04_SVK_IE      : 1;
X    volatile uint32_t LRADC04_SVK_IE      : 1;
N    __IO uint32_t LRADC05_SVK_IE      : 1;
X    volatile uint32_t LRADC05_SVK_IE      : 1;
N    __IO uint32_t LRADC06_SVK_IE      : 1;
X    volatile uint32_t LRADC06_SVK_IE      : 1;
N    __IO uint32_t LRADC07_SVK_IE      : 1;
X    volatile uint32_t LRADC07_SVK_IE      : 1;
N    __IO uint32_t LRADC08_SVK_IE      : 1;
X    volatile uint32_t LRADC08_SVK_IE      : 1;
N    __IO uint32_t LRADC09_SVK_IE      : 1;
X    volatile uint32_t LRADC09_SVK_IE      : 1;
N    __IO uint32_t LRADC10_SVK_IE      : 1;
X    volatile uint32_t LRADC10_SVK_IE      : 1;
N    __IO uint32_t LRADC11_SVK_IE      : 1;
X    volatile uint32_t LRADC11_SVK_IE      : 1;
N    __IO uint32_t LRADC_MVK0_IE       : 1;
X    volatile uint32_t LRADC_MVK0_IE       : 1;
N    __IO uint32_t LRADC_MVK1_IE       : 1;
X    volatile uint32_t LRADC_MVK1_IE       : 1;
N    __IO uint32_t LRADC_MVK2_IE       : 1;
X    volatile uint32_t LRADC_MVK2_IE       : 1;
N    __IO uint32_t LRADC_MVK3_IE       : 1;
X    volatile uint32_t LRADC_MVK3_IE       : 1;
N    __IO uint32_t LRADC_MVK4_IE       : 1;
X    volatile uint32_t LRADC_MVK4_IE       : 1;
N    __IO uint32_t LRADC_MVK5_IE       : 1;
X    volatile uint32_t LRADC_MVK5_IE       : 1;
N         uint32_t RESERVED0           : 2;
N}AON_LRADC_IE_Field;
N/****AON_LRADCIE end****/
N
N/***********************************WKEN***********************************/
Ntypedef struct{
N
N    __IO uint32_t LRADC00_END_WKEN    : 1;
X    volatile uint32_t LRADC00_END_WKEN    : 1;
N    __IO uint32_t LRADC01_END_WKEN    : 1;
X    volatile uint32_t LRADC01_END_WKEN    : 1;
N    __IO uint32_t LRADC02_END_WKEN    : 1;
X    volatile uint32_t LRADC02_END_WKEN    : 1;
N    __IO uint32_t LRADC03_END_WKEN    : 1;
X    volatile uint32_t LRADC03_END_WKEN    : 1;
N    __IO uint32_t LRADC04_END_WKEN    : 1;
X    volatile uint32_t LRADC04_END_WKEN    : 1;
N    __IO uint32_t LRADC05_END_WKEN    : 1;
X    volatile uint32_t LRADC05_END_WKEN    : 1;
N    __IO uint32_t LRADC06_END_WKEN    : 1;
X    volatile uint32_t LRADC06_END_WKEN    : 1;
N    __IO uint32_t LRADC07_END_WKEN    : 1;
X    volatile uint32_t LRADC07_END_WKEN    : 1;
N    __IO uint32_t LRADC08_END_WKEN    : 1;
X    volatile uint32_t LRADC08_END_WKEN    : 1;
N    __IO uint32_t LRADC09_END_WKEN    : 1;
X    volatile uint32_t LRADC09_END_WKEN    : 1;
N    __IO uint32_t LRADC10_END_WKEN    : 1;
X    volatile uint32_t LRADC10_END_WKEN    : 1;
N    __IO uint32_t LRADC11_END_WKEN    : 1;
X    volatile uint32_t LRADC11_END_WKEN    : 1;
N    __IO uint32_t LRADC00_SVK_WKEN    : 1;
X    volatile uint32_t LRADC00_SVK_WKEN    : 1;
N    __IO uint32_t LRADC01_SVK_WKEN    : 1;
X    volatile uint32_t LRADC01_SVK_WKEN    : 1;
N    __IO uint32_t LRADC02_SVK_WKEN    : 1;
X    volatile uint32_t LRADC02_SVK_WKEN    : 1;
N    __IO uint32_t LRADC03_SVK_WKEN    : 1;
X    volatile uint32_t LRADC03_SVK_WKEN    : 1;
N    __IO uint32_t LRADC04_SVK_WKEN    : 1;
X    volatile uint32_t LRADC04_SVK_WKEN    : 1;
N    __IO uint32_t LRADC05_SVK_WKEN    : 1;
X    volatile uint32_t LRADC05_SVK_WKEN    : 1;
N    __IO uint32_t LRADC06_SVK_WKEN    : 1;
X    volatile uint32_t LRADC06_SVK_WKEN    : 1;
N    __IO uint32_t LRADC07_SVK_WKEN    : 1;
X    volatile uint32_t LRADC07_SVK_WKEN    : 1;
N    __IO uint32_t LRADC08_SVK_WKEN    : 1;
X    volatile uint32_t LRADC08_SVK_WKEN    : 1;
N    __IO uint32_t LRADC09_SVK_WKEN    : 1;
X    volatile uint32_t LRADC09_SVK_WKEN    : 1;
N    __IO uint32_t LRADC10_SVK_WKEN    : 1;
X    volatile uint32_t LRADC10_SVK_WKEN    : 1;
N    __IO uint32_t LRADC11_SVK_WKEN    : 1;
X    volatile uint32_t LRADC11_SVK_WKEN    : 1;
N    __IO uint32_t LRADC_MVK0_WKEN     : 1;
X    volatile uint32_t LRADC_MVK0_WKEN     : 1;
N    __IO uint32_t LRADC_MVK1_WKEN     : 1;
X    volatile uint32_t LRADC_MVK1_WKEN     : 1;
N    __IO uint32_t LRADC_MVK2_WKEN     : 1;
X    volatile uint32_t LRADC_MVK2_WKEN     : 1;
N    __IO uint32_t LRADC_MVK3_WKEN     : 1;
X    volatile uint32_t LRADC_MVK3_WKEN     : 1;
N    __IO uint32_t LRADC_MVK4_WKEN     : 1;
X    volatile uint32_t LRADC_MVK4_WKEN     : 1;
N    __IO uint32_t LRADC_MVK5_WKEN     : 1;
X    volatile uint32_t LRADC_MVK5_WKEN     : 1;
N         uint32_t RESERVED0           : 2;
N}AON_LRADC_WKEN_Field;
N/****AON_LRADCWKEN end****/
N
N/***********************************PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t LRADC00_END_PD      : 1;
X    volatile uint32_t LRADC00_END_PD      : 1;
N    __IO uint32_t LRADC01_END_PD      : 1;
X    volatile uint32_t LRADC01_END_PD      : 1;
N    __IO uint32_t LRADC02_END_PD      : 1;
X    volatile uint32_t LRADC02_END_PD      : 1;
N    __IO uint32_t LRADC03_END_PD      : 1;
X    volatile uint32_t LRADC03_END_PD      : 1;
N    __IO uint32_t LRADC04_END_PD      : 1;
X    volatile uint32_t LRADC04_END_PD      : 1;
N    __IO uint32_t LRADC05_END_PD      : 1;
X    volatile uint32_t LRADC05_END_PD      : 1;
N    __IO uint32_t LRADC06_END_PD      : 1;
X    volatile uint32_t LRADC06_END_PD      : 1;
N    __IO uint32_t LRADC07_END_PD      : 1;
X    volatile uint32_t LRADC07_END_PD      : 1;
N    __IO uint32_t LRADC08_END_PD      : 1;
X    volatile uint32_t LRADC08_END_PD      : 1;
N    __IO uint32_t LRADC09_END_PD      : 1;
X    volatile uint32_t LRADC09_END_PD      : 1;
N    __IO uint32_t LRADC10_END_PD      : 1;
X    volatile uint32_t LRADC10_END_PD      : 1;
N    __IO uint32_t LRADC11_END_PD      : 1;
X    volatile uint32_t LRADC11_END_PD      : 1;
N    __IO uint32_t LRADC00_SVK_PD      : 1;
X    volatile uint32_t LRADC00_SVK_PD      : 1;
N    __IO uint32_t LRADC01_SVK_PD      : 1;
X    volatile uint32_t LRADC01_SVK_PD      : 1;
N    __IO uint32_t LRADC02_SVK_PD      : 1;
X    volatile uint32_t LRADC02_SVK_PD      : 1;
N    __IO uint32_t LRADC03_SVK_PD      : 1;
X    volatile uint32_t LRADC03_SVK_PD      : 1;
N    __IO uint32_t LRADC04_SVK_PD      : 1;
X    volatile uint32_t LRADC04_SVK_PD      : 1;
N    __IO uint32_t LRADC05_SVK_PD      : 1;
X    volatile uint32_t LRADC05_SVK_PD      : 1;
N    __IO uint32_t LRADC06_SVK_PD      : 1;
X    volatile uint32_t LRADC06_SVK_PD      : 1;
N    __IO uint32_t LRADC07_SVK_PD      : 1;
X    volatile uint32_t LRADC07_SVK_PD      : 1;
N    __IO uint32_t LRADC08_SVK_PD      : 1;
X    volatile uint32_t LRADC08_SVK_PD      : 1;
N    __IO uint32_t LRADC09_SVK_PD      : 1;
X    volatile uint32_t LRADC09_SVK_PD      : 1;
N    __IO uint32_t LRADC10_SVK_PD      : 1;
X    volatile uint32_t LRADC10_SVK_PD      : 1;
N    __IO uint32_t LRADC11_SVK_PD      : 1;
X    volatile uint32_t LRADC11_SVK_PD      : 1;
N    __IO uint32_t LRADC_MVK0_PD       : 1;
X    volatile uint32_t LRADC_MVK0_PD       : 1;
N    __IO uint32_t LRADC_MVK1_PD       : 1;
X    volatile uint32_t LRADC_MVK1_PD       : 1;
N    __IO uint32_t LRADC_MVK2_PD       : 1;
X    volatile uint32_t LRADC_MVK2_PD       : 1;
N    __IO uint32_t LRADC_MVK3_PD       : 1;
X    volatile uint32_t LRADC_MVK3_PD       : 1;
N    __IO uint32_t LRADC_MVK4_PD       : 1;
X    volatile uint32_t LRADC_MVK4_PD       : 1;
N    __IO uint32_t LRADC_MVK5_PD       : 1;
X    volatile uint32_t LRADC_MVK5_PD       : 1;
N         uint32_t RESERVED0           : 2;
N}AON_LRADC_PD_Field;
N/****AON_LRADCPD end****/
N
N/***********************************DATn***********************************/
Ntypedef struct{
N
N    __IO uint32_t DATA                : 10;
X    volatile uint32_t DATA                : 10;
N         uint32_t RESERVED0           : 22;
N}AON_LRADC_DATn_Field;
N/****AON_LRADCDATn end****/
N
N/***********************************KEYD***********************************/
Ntypedef struct{
N
N    __I  uint32_t LRADC00_SVK         : 1;
X    volatile const  uint32_t LRADC00_SVK         : 1;
N    __I  uint32_t LRADC01_SVK         : 1;
X    volatile const  uint32_t LRADC01_SVK         : 1;
N    __I  uint32_t LRADC02_SVK         : 1;
X    volatile const  uint32_t LRADC02_SVK         : 1;
N    __I  uint32_t LRADC03_SVK         : 1;
X    volatile const  uint32_t LRADC03_SVK         : 1;
N    __I  uint32_t LRADC04_SVK         : 1;
X    volatile const  uint32_t LRADC04_SVK         : 1;
N    __I  uint32_t LRADC05_SVK         : 1;
X    volatile const  uint32_t LRADC05_SVK         : 1;
N    __I  uint32_t LRADC06_SVK         : 1;
X    volatile const  uint32_t LRADC06_SVK         : 1;
N    __I  uint32_t LRADC07_SVK         : 1;
X    volatile const  uint32_t LRADC07_SVK         : 1;
N    __I  uint32_t LRADC08_SVK         : 1;
X    volatile const  uint32_t LRADC08_SVK         : 1;
N    __I  uint32_t LRADC09_SVK         : 1;
X    volatile const  uint32_t LRADC09_SVK         : 1;
N    __I  uint32_t LRADC10_SVK         : 1;
X    volatile const  uint32_t LRADC10_SVK         : 1;
N    __I  uint32_t LRADC11_SVK         : 1;
X    volatile const  uint32_t LRADC11_SVK         : 1;
N    __I  uint32_t LRADC_MVK0          : 1;
X    volatile const  uint32_t LRADC_MVK0          : 1;
N    __I  uint32_t LRADC_MVK1          : 1;
X    volatile const  uint32_t LRADC_MVK1          : 1;
N    __I  uint32_t LRADC_MVK2          : 1;
X    volatile const  uint32_t LRADC_MVK2          : 1;
N    __I  uint32_t LRADC_MVK3          : 1;
X    volatile const  uint32_t LRADC_MVK3          : 1;
N    __I  uint32_t LRADC_MVK4          : 1;
X    volatile const  uint32_t LRADC_MVK4          : 1;
N    __I  uint32_t LRADC_MVK5          : 1;
X    volatile const  uint32_t LRADC_MVK5          : 1;
N         uint32_t RESERVED0           : 14;
N}AON_LRADC_KEYD_Field;
N/****AON_LRADCKEYD end****/
N
N/***********************************AON_LRADC register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    CFGn[12];                                /* 0x0    LRADC Channel 00 Configuration */
X        volatile    uint32_t    CFGn[12];                                 
N        AON_LRADC_CFGn_Field    CFGn_f[12];
N    };
N    union
N    {
N        __IO    uint32_t    ANA;                                     /* 0x30    LRADC Analog Control */
X        volatile    uint32_t    ANA;                                      
N        AON_LRADC_ANA_Field    ANA_f;
N    };
N    union
N    {
N        __IO    uint32_t    MKV0;                                    /* 0x34    LRADC Key Control0 */
X        volatile    uint32_t    MKV0;                                     
N        AON_LRADC_MKV0_Field    MKV0_f;
N    };
N    union
N    {
N        __IO    uint32_t    MKV1;                                    /* 0x38    LRADC Key Control1 */
X        volatile    uint32_t    MKV1;                                     
N        AON_LRADC_MKV1_Field    MKV1_f;
N    };
N    union
N    {
N        __IO    uint32_t    MKV2;                                    /* 0x3c    LRADC Key Control2 */
X        volatile    uint32_t    MKV2;                                     
N        AON_LRADC_MKV2_Field    MKV2_f;
N    };
N    union
N    {
N        __IO    uint32_t    CTL;                                     /* 0x40    LRADC Control */
X        volatile    uint32_t    CTL;                                      
N        AON_LRADC_CTL_Field    CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    IE;                                      /* 0x44    LRADC Interrupt Enable */
X        volatile    uint32_t    IE;                                       
N        AON_LRADC_IE_Field    IE_f;
N    };
N    union
N    {
N        __IO    uint32_t    WKEN;                                    /* 0x48    LRADC Wakeup Enable */
X        volatile    uint32_t    WKEN;                                     
N        AON_LRADC_WKEN_Field    WKEN_f;
N    };
N    union
N    {
N        __IO    uint32_t    PD;                                      /* 0x4c    LRADC Interrupt Pending */
X        volatile    uint32_t    PD;                                       
N        AON_LRADC_PD_Field    PD_f;
N    };
N    union
N    {
N        __IO    uint32_t    DATn[12];                                /* 0x50    LRADC Channel 00 Out */
X        volatile    uint32_t    DATn[12];                                 
N        AON_LRADC_DATn_Field    DATn_f[12];
N    };
N    union
N    {
N        __I     uint32_t    KEYD;                                    /* 0x80    LRADC Key Data */
X        volatile const     uint32_t    KEYD;                                     
N        AON_LRADC_KEYD_Field    KEYD_f;
N    };
N}AON_LRADC_RegDef_f;
N/****AON_LRADC end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 28 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_audi_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_audi_field.h" 1
N#ifndef __AON_AUDI_FIELD_H__
N#define __AON_AUDI_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************ADC_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t ADC_STA             : 1;
X    volatile uint32_t ADC_STA             : 1;
N    __IO uint32_t DCLK_SEL            : 1;
X    volatile uint32_t DCLK_SEL            : 1;
N         uint32_t RESERVED0           : 13;
N    __IO uint32_t MADC0_RANGE         : 1;
X    volatile uint32_t MADC0_RANGE         : 1;
N         uint32_t RESERVED1           : 16;
N}AON_AUDI_ADC_CTL_Field;
N/****AON_AUDIADC_CTL end****/
N
N/***********************************DMIC_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t DMIC_EN             : 1;
X    volatile uint32_t DMIC_EN             : 1;
N    __IO uint32_t DMIC_MODE           : 1;
X    volatile uint32_t DMIC_MODE           : 1;
N    __IO uint32_t DMIC_DELAY          : 2;
X    volatile uint32_t DMIC_DELAY          : 2;
N    __IO uint32_t PCM_CLKEN           : 1;
X    volatile uint32_t PCM_CLKEN           : 1;
N    __IO uint32_t PCM_RSTEN           : 1;
X    volatile uint32_t PCM_RSTEN           : 1;
N    __IO uint32_t DMIC_EN_F           : 1;
X    volatile uint32_t DMIC_EN_F           : 1;
N         uint32_t RESERVED0           : 25;
N}AON_AUDI_DMIC_CTL_Field;
N/****AON_AUDIDMIC_CTL end****/
N
N/***********************************I2SRX_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t MODE                : 1;
X    volatile uint32_t MODE                : 1;
N    __IO uint32_t WIDTH               : 2;
X    volatile uint32_t WIDTH               : 2;
N    __IO uint32_t INTER               : 1;
X    volatile uint32_t INTER               : 1;
N         uint32_t RESERVED0           : 27;
N}AON_AUDI_I2SRX_CTL_Field;
N/****AON_AUDII2SRX_CTL end****/
N
N/***********************************IE0***********************************/
Ntypedef struct{
N
N    __IO uint32_t SLOT0_IE            : 1;
X    volatile uint32_t SLOT0_IE            : 1;
N    __IO uint32_t SLOT1_IE            : 1;
X    volatile uint32_t SLOT1_IE            : 1;
N         uint32_t RESERVED0           : 6;
N    __IO uint32_t WRAP0_IE            : 1;
X    volatile uint32_t WRAP0_IE            : 1;
N    __IO uint32_t WRAP1_IE            : 1;
X    volatile uint32_t WRAP1_IE            : 1;
N         uint32_t RESERVED1           : 6;
N    __IO uint32_t VAD0_IE             : 1;
X    volatile uint32_t VAD0_IE             : 1;
N    __IO uint32_t VAD1_IE             : 1;
X    volatile uint32_t VAD1_IE             : 1;
N    __IO uint32_t UPD0_IE             : 1;
X    volatile uint32_t UPD0_IE             : 1;
N    __IO uint32_t UPD1_IE             : 1;
X    volatile uint32_t UPD1_IE             : 1;
N         uint32_t RESERVED2           : 1;
N         uint32_t RESERVED3           : 1;
N    __IO uint32_t VAD0_DET            : 1;
X    volatile uint32_t VAD0_DET            : 1;
N    __IO uint32_t VAD1_DET            : 1;
X    volatile uint32_t VAD1_DET            : 1;
N    __IO uint32_t FIFO0_OV            : 1;
X    volatile uint32_t FIFO0_OV            : 1;
N    __IO uint32_t FIFO1_OV            : 1;
X    volatile uint32_t FIFO1_OV            : 1;
N         uint32_t RESERVED4           : 6;
N}AON_AUDI_IE0_Field;
N/****AON_AUDIIE0 end****/
N
N/***********************************WKEN***********************************/
Ntypedef struct{
N
N    __IO uint32_t SLOT0_IE            : 1;
X    volatile uint32_t SLOT0_IE            : 1;
N    __IO uint32_t SLOT1_IE            : 1;
X    volatile uint32_t SLOT1_IE            : 1;
N         uint32_t RESERVED0           : 6;
N    __IO uint32_t WRAP0_IE            : 1;
X    volatile uint32_t WRAP0_IE            : 1;
N    __IO uint32_t WRAP1_IE            : 1;
X    volatile uint32_t WRAP1_IE            : 1;
N         uint32_t RESERVED1           : 6;
N    __IO uint32_t VAD0_IE             : 1;
X    volatile uint32_t VAD0_IE             : 1;
N    __IO uint32_t VAD1_IE             : 1;
X    volatile uint32_t VAD1_IE             : 1;
N    __IO uint32_t UPD0_IE             : 1;
X    volatile uint32_t UPD0_IE             : 1;
N    __IO uint32_t UPD1_IE             : 1;
X    volatile uint32_t UPD1_IE             : 1;
N         uint32_t RESERVED2           : 1;
N         uint32_t RESERVED3           : 1;
N    __IO uint32_t VAD0_DET            : 1;
X    volatile uint32_t VAD0_DET            : 1;
N    __IO uint32_t VAD1_DET            : 1;
X    volatile uint32_t VAD1_DET            : 1;
N    __IO uint32_t FIFO0_OV            : 1;
X    volatile uint32_t FIFO0_OV            : 1;
N    __IO uint32_t FIFO1_OV            : 1;
X    volatile uint32_t FIFO1_OV            : 1;
N         uint32_t RESERVED4           : 6;
N}AON_AUDI_WKEN_Field;
N/****AON_AUDIWKEN end****/
N
N/***********************************PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t SLOT0_PD            : 1;
X    volatile uint32_t SLOT0_PD            : 1;
N    __IO uint32_t SLOT1_PD            : 1;
X    volatile uint32_t SLOT1_PD            : 1;
N         uint32_t RESERVED0           : 6;
N    __IO uint32_t WRAP0_PD            : 1;
X    volatile uint32_t WRAP0_PD            : 1;
N    __IO uint32_t WRAP1_PD            : 1;
X    volatile uint32_t WRAP1_PD            : 1;
N         uint32_t RESERVED1           : 6;
N    __IO uint32_t VAD0_PD             : 1;
X    volatile uint32_t VAD0_PD             : 1;
N    __IO uint32_t VAD1_PD             : 1;
X    volatile uint32_t VAD1_PD             : 1;
N    __IO uint32_t UPD0_PD             : 1;
X    volatile uint32_t UPD0_PD             : 1;
N    __IO uint32_t UPD1_PD             : 1;
X    volatile uint32_t UPD1_PD             : 1;
N         uint32_t RESERVED2           : 1;
N         uint32_t RESERVED3           : 1;
N    __I  uint32_t VAD0_DET            : 1;
X    volatile const  uint32_t VAD0_DET            : 1;
N    __I  uint32_t VAD1_DET            : 1;
X    volatile const  uint32_t VAD1_DET            : 1;
N    __IO uint32_t FIFO0_OV            : 1;
X    volatile uint32_t FIFO0_OV            : 1;
N    __IO uint32_t FIFO1_OV            : 1;
X    volatile uint32_t FIFO1_OV            : 1;
N         uint32_t RESERVED4           : 6;
N}AON_AUDI_PD_Field;
N/****AON_AUDIPD end****/
N
N/***********************************CHNn_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t CHN_STA             : 1;
X    volatile uint32_t CHN_STA             : 1;
N    __IO uint32_t CHN_SAV             : 1;
X    volatile uint32_t CHN_SAV             : 1;
N    __IO uint32_t CHN_AUTO            : 1;
X    volatile uint32_t CHN_AUTO            : 1;
N    __IO uint32_t FIFO_AUTO           : 1;
X    volatile uint32_t FIFO_AUTO           : 1;
N    __IO uint32_t CHN_SEL             : 4;
X    volatile uint32_t CHN_SEL             : 4;
N    __IO uint32_t DCB_SEL             : 2;
X    volatile uint32_t DCB_SEL             : 2;
N    __IO uint32_t DCB_IIR             : 2;
X    volatile uint32_t DCB_IIR             : 2;
N    __IO uint32_t SAMP_DIV            : 3;
X    volatile uint32_t SAMP_DIV            : 3;
N    __IO uint32_t CHN_RST             : 1;
X    volatile uint32_t CHN_RST             : 1;
N    __IO uint32_t DCB_VAL             : 16;
X    volatile uint32_t DCB_VAL             : 16;
N}AON_AUDI_CHNn_CTL_Field;
N/****AON_AUDICHNn_CTL end****/
N
N/***********************************CHNn_BASE***********************************/
Ntypedef struct{
N
N    __IO uint32_t ADDR                : 32;
X    volatile uint32_t ADDR                : 32;
N}AON_AUDI_CHNn_BASE_Field;
N/****AON_AUDICHNn_BASE end****/
N
N/***********************************CHNn_SIZE***********************************/
Ntypedef struct{
N
N    __IO uint32_t WORD_NUM            : 16;
X    volatile uint32_t WORD_NUM            : 16;
N    __IO uint32_t SLOT_NUM            : 16;
X    volatile uint32_t SLOT_NUM            : 16;
N}AON_AUDI_CHNn_SIZE_Field;
N/****AON_AUDICHNn_SIZE end****/
N
N/***********************************CHNn_CNT***********************************/
Ntypedef struct{
N
N    __I  uint32_t WORD_CNT            : 16;
X    volatile const  uint32_t WORD_CNT            : 16;
N    __I  uint32_t SLOT_CNT            : 16;
X    volatile const  uint32_t SLOT_CNT            : 16;
N}AON_AUDI_CHNn_CNT_Field;
N/****AON_AUDICHNn_CNT end****/
N
N/***********************************CHNn_GAIN***********************************/
Ntypedef struct{
N
N    __IO uint32_t GAIN                : 3;
X    volatile uint32_t GAIN                : 3;
N         uint32_t RESERVED0           : 29;
N}AON_AUDI_CHNn_GAIN_Field;
N/****AON_AUDICHNn_GAIN end****/
N
N/***********************************VADn_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t MODE                : 2;
X    volatile uint32_t MODE                : 2;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t NUM                 : 4;
X    volatile uint32_t NUM                 : 4;
N         uint32_t RESERVED1           : 24;
N}AON_AUDI_VADn_CTL_Field;
N/****AON_AUDIVADn_CTL end****/
N
N/***********************************VADn_CFG0***********************************/
Ntypedef struct{
N
N    __IO uint32_t PWR_THD             : 26;
X    volatile uint32_t PWR_THD             : 26;
N         uint32_t RESERVED0           : 6;
N}AON_AUDI_VADn_CFG0_Field;
N/****AON_AUDIVADn_CFG0 end****/
N
N/***********************************VADn_CFG1***********************************/
Ntypedef struct{
N
N    __IO uint32_t ACR_THD             : 16;
X    volatile uint32_t ACR_THD             : 16;
N    __IO uint32_t ACR_SPD             : 4;
X    volatile uint32_t ACR_SPD             : 4;
N    __IO uint32_t ACR_MODE            : 1;
X    volatile uint32_t ACR_MODE            : 1;
N         uint32_t RESERVED0           : 11;
N}AON_AUDI_VADn_CFG1_Field;
N/****AON_AUDIVADn_CFG1 end****/
N
N/***********************************VADn_CFG2***********************************/
Ntypedef struct{
N
N    __IO uint32_t ACR_LVL0            : 8;
X    volatile uint32_t ACR_LVL0            : 8;
N    __IO uint32_t ACR_LVL1            : 8;
X    volatile uint32_t ACR_LVL1            : 8;
N    __IO uint32_t ACR_LVL2            : 8;
X    volatile uint32_t ACR_LVL2            : 8;
N    __IO uint32_t ACR_WGH0            : 4;
X    volatile uint32_t ACR_WGH0            : 4;
N    __IO uint32_t ACR_WGH1            : 4;
X    volatile uint32_t ACR_WGH1            : 4;
N}AON_AUDI_VADn_CFG2_Field;
N/****AON_AUDIVADn_CFG2 end****/
N
N/***********************************VADn_PWR***********************************/
Ntypedef struct{
N
N    __I  uint32_t VAD_PWR             : 26;
X    volatile const  uint32_t VAD_PWR             : 26;
N         uint32_t RESERVED0           : 6;
N}AON_AUDI_VADn_PWR_Field;
N/****AON_AUDIVADn_PWR end****/
N
N/***********************************VADn_ACR***********************************/
Ntypedef struct{
N
N    __I  uint32_t ACR_CNT             : 8;
X    volatile const  uint32_t ACR_CNT             : 8;
N    __I  uint32_t ACR_SCO             : 4;
X    volatile const  uint32_t ACR_SCO             : 4;
N         uint32_t RESERVED0           : 20;
N}AON_AUDI_VADn_ACR_Field;
N/****AON_AUDIVADn_ACR end****/
N
N/***********************************DBG_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N         uint32_t RESERVED0           : 31;
N}AON_AUDI_DBG_CTL_Field;
N/****AON_AUDIDBG_CTL end****/
N
N/***********************************BIST_TEST***********************************/
Ntypedef struct{
N
N    __IO uint32_t TEST                : 1;
X    volatile uint32_t TEST                : 1;
N         uint32_t RESERVED0           : 31;
N}AON_AUDI_BIST_TEST_Field;
N/****AON_AUDIBIST_TEST end****/
N
N/***********************************BIST_DONE***********************************/
Ntypedef struct{
N
N    __IO uint32_t DONE                : 1;
X    volatile uint32_t DONE                : 1;
N         uint32_t RESERVED0           : 31;
N}AON_AUDI_BIST_DONE_Field;
N/****AON_AUDIBIST_DONE end****/
N
N/***********************************BIST_FAIL***********************************/
Ntypedef struct{
N
N    __IO uint32_t FAIL                : 1;
X    volatile uint32_t FAIL                : 1;
N         uint32_t RESERVED0           : 31;
N}AON_AUDI_BIST_FAIL_Field;
N/****AON_AUDIBIST_FAIL end****/
N
N/***********************************AUDI_CHN register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    CTL;                                     /* 0x100    Channel0 Control */
X        volatile    uint32_t    CTL;                                      
N        AON_AUDI_CHNn_CTL_Field    CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    BASE;                                    /* 0x104    Channel0 Base */
X        volatile    uint32_t    BASE;                                     
N        AON_AUDI_CHNn_BASE_Field    BASE_f;
N    };
N    union
N    {
N        __IO    uint32_t    SIZE;                                    /* 0x108    Channel0 Size */
X        volatile    uint32_t    SIZE;                                     
N        AON_AUDI_CHNn_SIZE_Field    SIZE_f;
N    };
N    union
N    {
N        __I     uint32_t    CNT;                                     /* 0x10c    Channel0 Counter */
X        volatile const     uint32_t    CNT;                                      
N        AON_AUDI_CHNn_CNT_Field    CNT_f;
N    };
N    union
N    {
N        __IO    uint32_t    GAIN;                                    /* 0x110    Channel0 Gain */
X        volatile    uint32_t    GAIN;                                     
N        AON_AUDI_CHNn_GAIN_Field    GAIN_f;
N    };
N    uint32_t    RESERVED0[3];
N}AUDI_CHN_RegDef_f;
N/****AUDI_CHN end****/
N
N/***********************************AUDI_VAD register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    CTL;                                     /* 0x200    Channel0 Size */
X        volatile    uint32_t    CTL;                                      
N        AON_AUDI_VADn_CTL_Field    CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    CFG0;                                    /* 0x204    Channel0 Gain */
X        volatile    uint32_t    CFG0;                                     
N        AON_AUDI_VADn_CFG0_Field    CFG0_f;
N    };
N    union
N    {
N        __IO    uint32_t    CFG1;                                    /* 0x208    Channel1 Base */
X        volatile    uint32_t    CFG1;                                     
N        AON_AUDI_VADn_CFG1_Field    CFG1_f;
N    };
N    union
N    {
N        __IO    uint32_t    CFG2;                                    /* 0x20c    Channel1 Counter */
X        volatile    uint32_t    CFG2;                                     
N        AON_AUDI_VADn_CFG2_Field    CFG2_f;
N    };
N    union
N    {
N        #undef PWR //处理与stm32 宏冲突
N        __I     uint32_t    PWR;                                     /* 0x210    Channel1 Gain */
X        volatile const     uint32_t    PWR;                                      
N        AON_AUDI_VADn_PWR_Field    PWR_f;
N    };
N    union
N    {
N        __I     uint32_t    ACR;                                     /* 0x214    VAD0 Control */
X        volatile const     uint32_t    ACR;                                      
N        AON_AUDI_VADn_ACR_Field    ACR_f;
N    };
N    uint32_t    RESERVED0[2];
N}AUDI_VAD_RegDef_f;
N/****AUDI_VAD end****/
N
N/***********************************AON_AUDI register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    ADC_CTL;                                 /* 0x0    ADC Control */
X        volatile    uint32_t    ADC_CTL;                                  
N        AON_AUDI_ADC_CTL_Field    ADC_CTL_f;
N    };
N    uint32_t    RESERVED0[3];
N    union
N    {
N        __IO    uint32_t    DMIC_CTL;                                /* 0x10    DMIC Control */
X        volatile    uint32_t    DMIC_CTL;                                 
N        AON_AUDI_DMIC_CTL_Field    DMIC_CTL_f;
N    };
N    uint32_t    RESERVED1[3];
N    union
N    {
N        __IO    uint32_t    I2SRX_CTL;                               /* 0x20    I2SRX Control */
X        volatile    uint32_t    I2SRX_CTL;                                
N        AON_AUDI_I2SRX_CTL_Field    I2SRX_CTL_f;
N    };
N    uint32_t    RESERVED2[23];
N    union
N    {
N        __IO    uint32_t    IE0;                                     /* 0x80    Audio Input Interrupt Enable */
X        volatile    uint32_t    IE0;                                      
N        AON_AUDI_IE0_Field    IE0_f;
N    };
N    union
N    {
N        __IO    uint32_t    WKEN;                                    /* 0x84    Audio Input Wakeup Enable */
X        volatile    uint32_t    WKEN;                                     
N        AON_AUDI_WKEN_Field    WKEN_f;
N    };
N    union
N    {
N        __IO    uint32_t    PD;                                      /* 0x88    Audio Input Interrupt Pending */
X        volatile    uint32_t    PD;                                       
N        AON_AUDI_PD_Field    PD_f;
N    };
N    uint32_t    RESERVED3[29];
N    union
N    {
N        AUDI_CHN_RegDef_f    CHN[2];                                  /* 0x100    Channel0 Control */
N    };
N    uint32_t    RESERVED4[48];
N    union
N    {
N        AUDI_VAD_RegDef_f    VAD[2];                                  /* 0x200    Channel1 Base */
N    };
N    uint32_t    RESERVED5[48];
N    union
N    {
N        __IO    uint32_t    DBG_CTL;                                 /* 0x300    VAD0 Config0 */
X        volatile    uint32_t    DBG_CTL;                                  
N        AON_AUDI_DBG_CTL_Field    DBG_CTL_f;
N    };
N    uint32_t    RESERVED6[63];
N    union
N    {
N        __IO    uint32_t    BIST_TEST;                               /* 0x400    VAD0 Config2 */
X        volatile    uint32_t    BIST_TEST;                                
N        AON_AUDI_BIST_TEST_Field    BIST_TEST_f;
N    };
N    union
N    {
N        __IO    uint32_t    BIST_DONE;                               /* 0x404    VAD1 Average Cross Rate */
X        volatile    uint32_t    BIST_DONE;                                
N        AON_AUDI_BIST_DONE_Field    BIST_DONE_f;
N    };
N    union
N    {
N        __IO    uint32_t    BIST_FAIL;                               /* 0x408    VAD1 Control */
X        volatile    uint32_t    BIST_FAIL;                                
N        AON_AUDI_BIST_FAIL_Field    BIST_FAIL_f;
N    };
N}AON_AUDI_RegDef_f;
N/****AON_AUDI end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 29 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_spin_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_spin_field.h" 1
N#ifndef __DEV_SPIN_FIELD_H__
N#define __DEV_SPIN_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t SPI_EN              : 1;
X    volatile uint32_t SPI_EN              : 1;
N    __IO uint32_t SPI_CS              : 1;
X    volatile uint32_t SPI_CS              : 1;
N    __IO uint32_t SPI_TX_EN           : 1;
X    volatile uint32_t SPI_TX_EN           : 1;
N    __IO uint32_t SPI_RX_EN           : 1;
X    volatile uint32_t SPI_RX_EN           : 1;
N    __IO uint32_t CS_MODE             : 1;
X    volatile uint32_t CS_MODE             : 1;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t SPI_WIDTH           : 2;
X    volatile uint32_t SPI_WIDTH           : 2;
N    __IO uint32_t DIO_MODE            : 1;
X    volatile uint32_t DIO_MODE            : 1;
N    __IO uint32_t MS_MODE             : 1;
X    volatile uint32_t MS_MODE             : 1;
N    __IO uint32_t SPI_MODE            : 2;
X    volatile uint32_t SPI_MODE            : 2;
N    __IO uint32_t DELAY_CHAIN         : 5;
X    volatile uint32_t DELAY_CHAIN         : 5;
N    __IO uint32_t TX_FIFO_RST         : 1;
X    volatile uint32_t TX_FIFO_RST         : 1;
N    __IO uint32_t RX_FIFO_RST         : 1;
X    volatile uint32_t RX_FIFO_RST         : 1;
N    __IO uint32_t TX_FIFO_THR         : 5;
X    volatile uint32_t TX_FIFO_THR         : 5;
N    __IO uint32_t RX_FIFO_THR         : 5;
X    volatile uint32_t RX_FIFO_THR         : 5;
N    __IO uint32_t LOOP_BACK           : 1;
X    volatile uint32_t LOOP_BACK           : 1;
N    __IO uint32_t DIO_SWAP            : 1;
X    volatile uint32_t DIO_SWAP            : 1;
N    __IO uint32_t LSB_MODE            : 1;
X    volatile uint32_t LSB_MODE            : 1;
N}DEV_SPIn_CTL_Field;
N/****DEV_SPInCTL end****/
N
N/***********************************STA***********************************/
Ntypedef struct{
N
N    __IO uint32_t SPI_WORK            : 1;
X    volatile uint32_t SPI_WORK            : 1;
N         uint32_t RESERVED0           : 7;
N    __I  uint32_t SPI_IDLE            : 1;
X    volatile const  uint32_t SPI_IDLE            : 1;
N         uint32_t RESERVED1           : 7;
N    __I  uint32_t TX_LEVEL            : 5;
X    volatile const  uint32_t TX_LEVEL            : 5;
N    __I  uint32_t TX_FULL             : 1;
X    volatile const  uint32_t TX_FULL             : 1;
N    __I  uint32_t TX_EMPTY            : 1;
X    volatile const  uint32_t TX_EMPTY            : 1;
N         uint32_t RESERVED2           : 1;
N    __I  uint32_t RX_LEVEL            : 5;
X    volatile const  uint32_t RX_LEVEL            : 5;
N    __I  uint32_t RX_FULL             : 1;
X    volatile const  uint32_t RX_FULL             : 1;
N    __I  uint32_t RX_EMPTY            : 1;
X    volatile const  uint32_t RX_EMPTY            : 1;
N         uint32_t RESERVED3           : 1;
N}DEV_SPIn_STA_Field;
N/****DEV_SPInSTA end****/
N
N/***********************************RX_NUM***********************************/
Ntypedef struct{
N
N    __IO uint32_t RX_NUM              : 24;
X    volatile uint32_t RX_NUM              : 24;
N    __IO uint32_t RX_START            : 1;
X    volatile uint32_t RX_START            : 1;
N         uint32_t RESERVED0           : 7;
N}DEV_SPIn_RX_NUM_Field;
N/****DEV_SPInRX_NUM end****/
N
N/***********************************RX_CNT***********************************/
Ntypedef struct{
N
N    __I  uint32_t RX_CNT              : 24;
X    volatile const  uint32_t RX_CNT              : 24;
N         uint32_t RESERVED0           : 8;
N}DEV_SPIn_RX_CNT_Field;
N/****DEV_SPInRX_CNT end****/
N
N/***********************************TX_DATA***********************************/
Ntypedef struct{
N
N    __O  uint32_t TX_DATA             : 8;
X    volatile  uint32_t TX_DATA             : 8;
N         uint32_t RESERVED0           : 24;
N}DEV_SPIn_TX_DATA_Field;
N/****DEV_SPInTX_DATA end****/
N
N/***********************************RX_DATA***********************************/
Ntypedef struct{
N
N    __I  uint32_t RX_DATA             : 8;
X    volatile const  uint32_t RX_DATA             : 8;
N         uint32_t RESERVED0           : 24;
N}DEV_SPIn_RX_DATA_Field;
N/****DEV_SPInRX_DATA end****/
N
N/***********************************PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t TX_THR              : 1;
X    volatile uint32_t TX_THR              : 1;
N    __IO uint32_t RX_THR              : 1;
X    volatile uint32_t RX_THR              : 1;
N    __IO uint32_t TX_OF               : 1;
X    volatile uint32_t TX_OF               : 1;
N    __IO uint32_t RX_UF               : 1;
X    volatile uint32_t RX_UF               : 1;
N    __IO uint32_t TX_END              : 1;
X    volatile uint32_t TX_END              : 1;
N    __IO uint32_t RX_END              : 1;
X    volatile uint32_t RX_END              : 1;
N    __IO uint32_t TX_UF               : 1;
X    volatile uint32_t TX_UF               : 1;
N    __IO uint32_t RX_OF               : 1;
X    volatile uint32_t RX_OF               : 1;
N         uint32_t RESERVED0           : 24;
N}DEV_SPIn_PD_Field;
N/****DEV_SPInPD end****/
N
N/***********************************IE***********************************/
Ntypedef struct{
N
N    __IO uint32_t TX_THR              : 1;
X    volatile uint32_t TX_THR              : 1;
N    __IO uint32_t RX_THR              : 1;
X    volatile uint32_t RX_THR              : 1;
N    __IO uint32_t TX_OF               : 1;
X    volatile uint32_t TX_OF               : 1;
N    __IO uint32_t RX_UF               : 1;
X    volatile uint32_t RX_UF               : 1;
N    __IO uint32_t TX_END              : 1;
X    volatile uint32_t TX_END              : 1;
N    __IO uint32_t RX_END              : 1;
X    volatile uint32_t RX_END              : 1;
N    __IO uint32_t TX_UF               : 1;
X    volatile uint32_t TX_UF               : 1;
N    __IO uint32_t RX_OF               : 1;
X    volatile uint32_t RX_OF               : 1;
N         uint32_t RESERVED0           : 8;
N    __IO uint32_t TX_DMA_EN           : 1;
X    volatile uint32_t TX_DMA_EN           : 1;
N    __IO uint32_t RX_DMA_EN           : 1;
X    volatile uint32_t RX_DMA_EN           : 1;
N         uint32_t RESERVED1           : 14;
N}DEV_SPIn_IE_Field;
N/****DEV_SPInIE end****/
N
N/***********************************DEV_SPIn register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    CTL;                                     /* 0x0    SPI Control */
X        volatile    uint32_t    CTL;                                      
N        DEV_SPIn_CTL_Field    CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    STA;                                     /* 0x4    SPI STATUS */
X        volatile    uint32_t    STA;                                      
N        DEV_SPIn_STA_Field    STA_f;
N    };
N    union
N    {
N        __IO    uint32_t    RX_NUM;                                  /* 0x8    RX Number */
X        volatile    uint32_t    RX_NUM;                                   
N        DEV_SPIn_RX_NUM_Field    RX_NUM_f;
N    };
N    union
N    {
N        __I     uint32_t    RX_CNT;                                  /* 0xc    RX Counter */
X        volatile const     uint32_t    RX_CNT;                                   
N        DEV_SPIn_RX_CNT_Field    RX_CNT_f;
N    };
N    union
N    {
N        __IO    uint32_t    TX_DATA;                                 /* 0x10    TX Data(FIFO) */
X        volatile    uint32_t    TX_DATA;                                  
N        DEV_SPIn_TX_DATA_Field    TX_DATA_f;
N    };
N    union
N    {
N        __I     uint32_t    RX_DATA;                                 /* 0x14    RX Data(FIFO) */
X        volatile const     uint32_t    RX_DATA;                                  
N        DEV_SPIn_RX_DATA_Field    RX_DATA_f;
N    };
N    uint32_t    RESERVED0[2];
N    union
N    {
N        __IO    uint32_t    PD;                                      /* 0x20    SPI Pending */
X        volatile    uint32_t    PD;                                       
N        DEV_SPIn_PD_Field    PD_f;
N    };
N    union
N    {
N        __IO    uint32_t    IE;                                      /* 0x24    SPI Interrupt Enable */
X        volatile    uint32_t    IE;                                       
N        DEV_SPIn_IE_Field    IE_f;
N    };
N}DEV_SPIn_RegDef_f;
N/****DEV_SPIn end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 30 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_pwm_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_pwm_field.h" 1
N#ifndef __DEV_PWM_FIELD_H__
N#define __DEV_PWM_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************DutyMode_n_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t MODE                : 2;
X    volatile uint32_t MODE                : 2;
N         uint32_t RESERVED0           : 1;
N         uint32_t RESERVED1           : 4;
N    __IO uint32_t LEN                 : 8;
X    volatile uint32_t LEN                 : 8;
N    __IO uint32_t DUTY                : 9;
X    volatile uint32_t DUTY                : 9;
N    __IO uint32_t CLK_OUT             : 1;
X    volatile uint32_t CLK_OUT             : 1;
N    __IO uint32_t NUM                 : 6;
X    volatile uint32_t NUM                 : 6;
N}DEV_PWM_DutyMode_n_CTL_Field;
N/****DEV_PWMDutyMode_n_CTL end****/
N
N/***********************************BreathMode_n_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t MODE                : 2;
X    volatile uint32_t MODE                : 2;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t QNUM                : 4;
X    volatile uint32_t QNUM                : 4;
N         uint32_t RESERVED1           : 8;
N    __IO uint32_t LNUM                : 8;
X    volatile uint32_t LNUM                : 8;
N    __IO uint32_t HNUM                : 8;
X    volatile uint32_t HNUM                : 8;
N}DEV_PWM_BreathMode_n_CTL_Field;
N/****DEV_PWMBreathMode_n_CTL end****/
N
N/***********************************SoftMode_n_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t MODE                : 2;
X    volatile uint32_t MODE                : 2;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t WIDTH               : 4;
X    volatile uint32_t WIDTH               : 4;
N    __IO uint32_t RPT                 : 4;
X    volatile uint32_t RPT                 : 4;
N    __IO uint32_t FMT                 : 2;
X    volatile uint32_t FMT                 : 2;
N    __IO uint32_t FIFO_CONT           : 1;
X    volatile uint32_t FIFO_CONT           : 1;
N    __IO uint32_t LEN                 : 1;
X    volatile uint32_t LEN                 : 1;
N    __IO uint32_t FIFO_THR            : 5;
X    volatile uint32_t FIFO_THR            : 5;
N    __IO uint32_t FIFO_RST            : 1;
X    volatile uint32_t FIFO_RST            : 1;
N    __IO uint32_t OUT_FMT             : 2;
X    volatile uint32_t OUT_FMT             : 2;
N    __IO uint32_t SGN_FMT             : 1;
X    volatile uint32_t SGN_FMT             : 1;
N    __IO uint32_t CLK_OUT             : 1;
X    volatile uint32_t CLK_OUT             : 1;
N    __IO uint32_t MOD_OUT             : 1;
X    volatile uint32_t MOD_OUT             : 1;
N         uint32_t RESERVED1           : 1;
N    __IO uint32_t OUT_VAL             : 2;
X    volatile uint32_t OUT_VAL             : 2;
N         uint32_t RESERVED2           : 1;
N    __O  uint32_t OUT_SET             : 1;
X    volatile  uint32_t OUT_SET             : 1;
N}DEV_PWM_SoftMode_n_CTL_Field;
N/****DEV_PWMSoftMode_n_CTL end****/
N
N/***********************************PDMMode_n_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t MODE                : 2;
X    volatile uint32_t MODE                : 2;
N         uint32_t RESERVED0           : 1;
N         uint32_t RESERVED1           : 10;
N    __IO uint32_t FIFO_CONT           : 1;
X    volatile uint32_t FIFO_CONT           : 1;
N         uint32_t RESERVED2           : 1;
N    __IO uint32_t FIFO_THR            : 5;
X    volatile uint32_t FIFO_THR            : 5;
N    __IO uint32_t FIFO_RST            : 1;
X    volatile uint32_t FIFO_RST            : 1;
N         uint32_t RESERVED3           : 1;
N    __IO uint32_t CLK_OUT             : 1;
X    volatile uint32_t CLK_OUT             : 1;
N         uint32_t RESERVED4           : 6;
N}DEV_PWM_PDMMode_n_CTL_Field;
N/****DEV_PWMPDMMode_n_CTL end****/
N
N/***********************************0_TX_DAT***********************************/
Ntypedef struct{
N
N    __O  uint32_t DATA                : 32;
X    volatile  uint32_t DATA                : 32;
N}DEV_PWM_0_TX_DAT_Field;
N/****DEV_PWM0_TX_DAT end****/
N
N/***********************************0_STA***********************************/
Ntypedef struct{
N
N    __I  uint32_t FULL                : 1;
X    volatile const  uint32_t FULL                : 1;
N    __I  uint32_t EMPTY               : 1;
X    volatile const  uint32_t EMPTY               : 1;
N    __I  uint32_t WLEVEL              : 5;
X    volatile const  uint32_t WLEVEL              : 5;
N         uint32_t RESERVED0           : 25;
N}DEV_PWM_0_STA_Field;
N/****DEV_PWM0_STA end****/
N
N/***********************************2_TX_DAT***********************************/
Ntypedef struct{
N
N    __O  uint32_t DATA                : 32;
X    volatile  uint32_t DATA                : 32;
N}DEV_PWM_2_TX_DAT_Field;
N/****DEV_PWM2_TX_DAT end****/
N
N/***********************************2_STA***********************************/
Ntypedef struct{
N
N    __I  uint32_t FULL                : 1;
X    volatile const  uint32_t FULL                : 1;
N    __I  uint32_t EMPTY               : 1;
X    volatile const  uint32_t EMPTY               : 1;
N    __I  uint32_t WLEVEL              : 5;
X    volatile const  uint32_t WLEVEL              : 5;
N         uint32_t RESERVED0           : 25;
N}DEV_PWM_2_STA_Field;
N/****DEV_PWM2_STA end****/
N
N/***********************************PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t PWM_END             : 8;
X    volatile uint32_t PWM_END             : 8;
N    __IO uint32_t BTH_END             : 8;
X    volatile uint32_t BTH_END             : 8;
N    __IO uint32_t FIFO0_THR           : 1;
X    volatile uint32_t FIFO0_THR           : 1;
N    __IO uint32_t FIFO0_OF            : 1;
X    volatile uint32_t FIFO0_OF            : 1;
N    __IO uint32_t FIFO0_UF            : 1;
X    volatile uint32_t FIFO0_UF            : 1;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t FIFO1_THR           : 1;
X    volatile uint32_t FIFO1_THR           : 1;
N    __IO uint32_t FIFO1_OF            : 1;
X    volatile uint32_t FIFO1_OF            : 1;
N    __IO uint32_t FIFO1_UF            : 1;
X    volatile uint32_t FIFO1_UF            : 1;
N    __IO uint32_t DAT0_END            : 1;
X    volatile uint32_t DAT0_END            : 1;
N    __IO uint32_t DAT2_END            : 1;
X    volatile uint32_t DAT2_END            : 1;
N         uint32_t RESERVED1           : 7;
N}DEV_PWM_PD_Field;
N/****DEV_PWMPD end****/
N
N/***********************************IE***********************************/
Ntypedef struct{
N
N    __IO uint32_t PWM_END             : 8;
X    volatile uint32_t PWM_END             : 8;
N    __IO uint32_t BTH_END             : 8;
X    volatile uint32_t BTH_END             : 8;
N    __IO uint32_t FIFO0_THR           : 1;
X    volatile uint32_t FIFO0_THR           : 1;
N    __IO uint32_t FIFO0_OF            : 1;
X    volatile uint32_t FIFO0_OF            : 1;
N    __IO uint32_t FIFO0_UF            : 1;
X    volatile uint32_t FIFO0_UF            : 1;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t FIFO1_THR           : 1;
X    volatile uint32_t FIFO1_THR           : 1;
N    __IO uint32_t FIFO1_OF            : 1;
X    volatile uint32_t FIFO1_OF            : 1;
N    __IO uint32_t FIFO1_UF            : 1;
X    volatile uint32_t FIFO1_UF            : 1;
N    __IO uint32_t DAT0_END            : 1;
X    volatile uint32_t DAT0_END            : 1;
N    __IO uint32_t DAT2_END            : 1;
X    volatile uint32_t DAT2_END            : 1;
N         uint32_t RESERVED1           : 3;
N    __IO uint32_t DMA0_EN             : 1;
X    volatile uint32_t DMA0_EN             : 1;
N    __IO uint32_t DMA1_EN             : 1;
X    volatile uint32_t DMA1_EN             : 1;
N         uint32_t RESERVED2           : 2;
N}DEV_PWM_IE_Field;
N/****DEV_PWMIE end****/
N
N/***********************************PHA0***********************************/
Ntypedef struct{
N
N    __IO uint32_t DUTY0               : 9;
X    volatile uint32_t DUTY0               : 9;
N    __IO uint32_t DUTY1               : 9;
X    volatile uint32_t DUTY1               : 9;
N    __IO uint32_t DUTY2               : 9;
X    volatile uint32_t DUTY2               : 9;
N         uint32_t RESERVED0           : 5;
N}DEV_PWM_PHA0_Field;
N/****DEV_PWMPHA0 end****/
N
N/***********************************PHA1***********************************/
Ntypedef struct{
N
N    __IO uint32_t LEN                 : 8;
X    volatile uint32_t LEN                 : 8;
N         uint32_t RESERVED0           : 23;
N}DEV_PWM_PHA1_Field;
N/****DEV_PWMPHA1 end****/
N
N/***********************************DTR***********************************/
Ntypedef struct{
N
N    __IO uint32_t PWM0_EN             : 1;
X    volatile uint32_t PWM0_EN             : 1;
N    __IO uint32_t PWM1_EN             : 1;
X    volatile uint32_t PWM1_EN             : 1;
N    __IO uint32_t PWM2_EN             : 1;
X    volatile uint32_t PWM2_EN             : 1;
N    __IO uint32_t OC0_ENABLE          : 1;
X    volatile uint32_t OC0_ENABLE          : 1;
N    __IO uint32_t OC1_ENABLE          : 1;
X    volatile uint32_t OC1_ENABLE          : 1;
N    __IO uint32_t OC2_ENABLE          : 1;
X    volatile uint32_t OC2_ENABLE          : 1;
N    __IO uint32_t DEADTIME            : 8;
X    volatile uint32_t DEADTIME            : 8;
N    __IO uint32_t OC0H_P              : 1;
X    volatile uint32_t OC0H_P              : 1;
N    __IO uint32_t OC0L_P              : 1;
X    volatile uint32_t OC0L_P              : 1;
N    __IO uint32_t OC0H_IP             : 1;
X    volatile uint32_t OC0H_IP             : 1;
N    __IO uint32_t OC0L_IP             : 1;
X    volatile uint32_t OC0L_IP             : 1;
N    __IO uint32_t OC1H_P              : 1;
X    volatile uint32_t OC1H_P              : 1;
N    __IO uint32_t OC1L_P              : 1;
X    volatile uint32_t OC1L_P              : 1;
N    __IO uint32_t OC1H_IP             : 1;
X    volatile uint32_t OC1H_IP             : 1;
N    __IO uint32_t OC1L_IP             : 1;
X    volatile uint32_t OC1L_IP             : 1;
N    __IO uint32_t OC2H_P              : 1;
X    volatile uint32_t OC2H_P              : 1;
N    __IO uint32_t OC2L_P              : 1;
X    volatile uint32_t OC2L_P              : 1;
N    __IO uint32_t OC2H_IP             : 1;
X    volatile uint32_t OC2H_IP             : 1;
N    __IO uint32_t OC2L_IP             : 1;
X    volatile uint32_t OC2L_IP             : 1;
N    __IO uint32_t CNT_MODE            : 2;
X    volatile uint32_t CNT_MODE            : 2;
N         uint32_t RESERVED0           : 4;
N}DEV_PWM_DTR_Field;
N/****DEV_PWMDTR end****/
N
N/***********************************DEV_PWM register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    CTL[8];                                  /* 0x0    PWM0 Control */
X        volatile    uint32_t    CTL[8];                                   
N        DEV_PWM_DutyMode_n_CTL_Field    DutyModeCTL_f[8];
N        DEV_PWM_BreathMode_n_CTL_Field    BreathModeCTL_f[8];
N        DEV_PWM_SoftMode_n_CTL_Field    SoftModeCTL_f[8];
N        DEV_PWM_PDMMode_n_CTL_Field    PDMModeCTL_f[8];
N    };
N    union
N    {
N        __O     uint32_t    PWM0_TX_DAT;                             /* 0x20    FIFO Write Data */
X        volatile     uint32_t    PWM0_TX_DAT;                              
N        DEV_PWM_0_TX_DAT_Field    PWM0_TX_DAT_f;
N    };
N    union
N    {
N        __I     uint32_t    PWM0_STA;                                /* 0x24    FIFO Status */
X        volatile const     uint32_t    PWM0_STA;                                 
N        DEV_PWM_0_STA_Field    PWM0_STA_f;
N    };
N    union
N    {
N        __O     uint32_t    PWM2_TX_DAT;                             /* 0x28    FIFO Write Data */
X        volatile     uint32_t    PWM2_TX_DAT;                              
N        DEV_PWM_2_TX_DAT_Field    PWM2_TX_DAT_f;
N    };
N    union
N    {
N        __I     uint32_t    PWM2_STA;                                /* 0x2c    FIFO Status */
X        volatile const     uint32_t    PWM2_STA;                                 
N        DEV_PWM_2_STA_Field    PWM2_STA_f;
N    };
N    uint32_t    RESERVED0[4];
N    union
N    {
N        __IO    uint32_t    PD;                                      /* 0x40    PWM Pending */
X        volatile    uint32_t    PD;                                       
N        DEV_PWM_PD_Field    PD_f;
N    };
N    union
N    {
N        __IO    uint32_t    IE;                                      /* 0x44    PWM Interrupt Enable */
X        volatile    uint32_t    IE;                                       
N        DEV_PWM_IE_Field    IE_f;
N    };
N    uint32_t    RESERVED1[3];
N    union
N    {
N        __IO    uint32_t    PHA0;                                    /* 0x54    DEADTIME Control PWM_Duty */
X        volatile    uint32_t    PHA0;                                     
N        DEV_PWM_PHA0_Field    PHA0_f;
N    };
N    union
N    {
N        __IO    uint32_t    PHA1;                                    /* 0x58    DEADTIME Control PWM_Len */
X        volatile    uint32_t    PHA1;                                     
N        DEV_PWM_PHA1_Field    PHA1_f;
N    };
N    union
N    {
N        __IO    uint32_t    DTR;                                     /* 0x5c    DEADTIME Control Configuration */
X        volatile    uint32_t    DTR;                                      
N        DEV_PWM_DTR_Field    DTR_f;
N    };
N}DEV_PWM_RegDef_f;
N/****DEV_PWM end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 31 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_camera_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_camera_field.h" 1
N#ifndef __DEV_CAMERA_FIELD_H__
N#define __DEV_CAMERA_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t CAMERA_EN           : 1;
X    volatile uint32_t CAMERA_EN           : 1;
N    __IO uint32_t CAMERA_TYPE         : 1;
X    volatile uint32_t CAMERA_TYPE         : 1;
N    __I  uint32_t FREE_CLK_MODE       : 1;
X    volatile const  uint32_t FREE_CLK_MODE       : 1;
N    __IO uint32_t WORK_MODE           : 2;
X    volatile uint32_t WORK_MODE           : 2;
N    __IO uint32_t RX_FIFO_RST         : 1;
X    volatile uint32_t RX_FIFO_RST         : 1;
N    __IO uint32_t RX_FIFO_THR         : 5;
X    volatile uint32_t RX_FIFO_THR         : 5;
N    __IO uint32_t Camera_SWAP         : 1;
X    volatile uint32_t Camera_SWAP         : 1;
N    __IO uint32_t DELAY_CHAIN         : 5;
X    volatile uint32_t DELAY_CHAIN         : 5;
N    __IO uint32_t Camera_mode         : 2;
X    volatile uint32_t Camera_mode         : 2;
N         uint32_t RESERVED0           : 13;
N}DEV_CAMERA_CTL_Field;
N/****DEV_CAMERACTL end****/
N
N/***********************************STA***********************************/
Ntypedef struct{
N
N    __IO uint32_t CAMERA_WORK         : 1;
X    volatile uint32_t CAMERA_WORK         : 1;
N    __I  uint32_t CAMERA_STA          : 1;
X    volatile const  uint32_t CAMERA_STA          : 1;
N    __I  uint32_t DATA_TYPE           : 2;
X    volatile const  uint32_t DATA_TYPE           : 2;
N    __I  uint32_t RX_LEVEL            : 5;
X    volatile const  uint32_t RX_LEVEL            : 5;
N    __I  uint32_t RX_FULL             : 1;
X    volatile const  uint32_t RX_FULL             : 1;
N    __I  uint32_t RX_EMPTY            : 1;
X    volatile const  uint32_t RX_EMPTY            : 1;
N         uint32_t RESERVED0           : 21;
N}DEV_CAMERA_STA_Field;
N/****DEV_CAMERASTA end****/
N
N/***********************************RANGE***********************************/
Ntypedef struct{
N
N    __I  uint32_t IMAGE_HEIGHT        : 16;
X    volatile const  uint32_t IMAGE_HEIGHT        : 16;
N    __I  uint32_t IMAGE_WIDTH         : 16;
X    volatile const  uint32_t IMAGE_WIDTH         : 16;
N}DEV_CAMERA_RANGE_Field;
N/****DEV_CAMERARANGE end****/
N
N/***********************************RX_DATA***********************************/
Ntypedef struct{
N
N    __I  uint32_t RX_DATA             : 8;
X    volatile const  uint32_t RX_DATA             : 8;
N         uint32_t RESERVED0           : 24;
N}DEV_CAMERA_RX_DATA_Field;
N/****DEV_CAMERARX_DATA end****/
N
N/***********************************IE***********************************/
Ntypedef struct{
N
N    __IO uint32_t RX_THR              : 1;
X    volatile uint32_t RX_THR              : 1;
N    __IO uint32_t RX_END              : 1;
X    volatile uint32_t RX_END              : 1;
N    __IO uint32_t RX_OF               : 1;
X    volatile uint32_t RX_OF               : 1;
N    __IO uint32_t RX_UF               : 1;
X    volatile uint32_t RX_UF               : 1;
N    __IO uint32_t RXRange             : 1;
X    volatile uint32_t RXRange             : 1;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t RX_DMA_EN           : 1;
X    volatile uint32_t RX_DMA_EN           : 1;
N         uint32_t RESERVED1           : 24;
N}DEV_CAMERA_IE_Field;
N/****DEV_CAMERAIE end****/
N
N/***********************************PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t RX_THR              : 1;
X    volatile uint32_t RX_THR              : 1;
N    __IO uint32_t RX_END              : 1;
X    volatile uint32_t RX_END              : 1;
N    __IO uint32_t RX_OF               : 1;
X    volatile uint32_t RX_OF               : 1;
N    __IO uint32_t RX_UF               : 1;
X    volatile uint32_t RX_UF               : 1;
N    __IO uint32_t RX_RANGE_ERR        : 1;
X    volatile uint32_t RX_RANGE_ERR        : 1;
N         uint32_t RESERVED0           : 27;
N}DEV_CAMERA_PD_Field;
N/****DEV_CAMERAPD end****/
N
N/***********************************RANGE_CNT***********************************/
Ntypedef struct{
N
N    __I  uint32_t IMAGE_HEIGHT        : 16;
X    volatile const  uint32_t IMAGE_HEIGHT        : 16;
N    __I  uint32_t IMAGE_WIDTH         : 16;
X    volatile const  uint32_t IMAGE_WIDTH         : 16;
N}DEV_CAMERA_RANGE_CNT_Field;
N/****DEV_CAMERARANGE_CNT end****/
N
N/***********************************DEV_CAMERA register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    CTL;                                     /* 0x0    CAMERA Control */
X        volatile    uint32_t    CTL;                                      
N        DEV_CAMERA_CTL_Field    CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    STA;                                     /* 0x4    CAMERA State */
X        volatile    uint32_t    STA;                                      
N        DEV_CAMERA_STA_Field    STA_f;
N    };
N    union
N    {
N        __I     uint32_t    RANGE;                                   /* 0x8    CAMERA RANGE */
X        volatile const     uint32_t    RANGE;                                    
N        DEV_CAMERA_RANGE_Field    RANGE_f;
N    };
N    union
N    {
N        __I     uint32_t    RX_DATA;                                 /* 0xc    CAMERA Receive Data */
X        volatile const     uint32_t    RX_DATA;                                  
N        DEV_CAMERA_RX_DATA_Field    RX_DATA_f;
N    };
N    union
N    {
N        __IO    uint32_t    IE;                                      /* 0x10    CAMERA_IE */
X        volatile    uint32_t    IE;                                       
N        DEV_CAMERA_IE_Field    IE_f;
N    };
N    union
N    {
N        __IO    uint32_t    PD;                                      /* 0x14    CAMERA_PD */
X        volatile    uint32_t    PD;                                       
N        DEV_CAMERA_PD_Field    PD_f;
N    };
N    union
N    {
N        __I     uint32_t    RANGE_CNT;                               /* 0x18    CAMERA RANGE Counter */
X        volatile const     uint32_t    RANGE_CNT;                                
N        DEV_CAMERA_RANGE_CNT_Field    RANGE_CNT_f;
N    };
N}DEV_CAMERA_RegDef_f;
N/****DEV_CAMERA end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 32 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_uartn_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_uartn_field.h" 1
N#ifndef __DEV_UARTN_FIELD_H__
N#define __DEV_UARTN_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CFG***********************************/
Ntypedef struct{
N
N    __IO uint32_t DATA_WIDTH          : 2;
X    volatile uint32_t DATA_WIDTH          : 2;
N    __IO uint32_t STOP_BIT            : 1;
X    volatile uint32_t STOP_BIT            : 1;
N    __IO uint32_t LOOPBACK_EN         : 1;
X    volatile uint32_t LOOPBACK_EN         : 1;
N    __IO uint32_t PARITY_EN           : 1;
X    volatile uint32_t PARITY_EN           : 1;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t PARITY_SEL          : 2;
X    volatile uint32_t PARITY_SEL          : 2;
N    __IO uint32_t TX_FIFO_THR         : 4;
X    volatile uint32_t TX_FIFO_THR         : 4;
N    __IO uint32_t RX_FIFO_THR         : 4;
X    volatile uint32_t RX_FIFO_THR         : 4;
N    __IO uint32_t AFC                 : 1;
X    volatile uint32_t AFC                 : 1;
N    __IO uint32_t RTS                 : 1;
X    volatile uint32_t RTS                 : 1;
N         uint32_t RESERVED1           : 2;
N    __IO uint32_t TO_DIV              : 6;
X    volatile uint32_t TO_DIV              : 6;
N         uint32_t RESERVED2           : 6;
N}DEV_UARTn_CFG_Field;
N/****DEV_UARTnCFG end****/
N
N/***********************************DIV***********************************/
Ntypedef struct{
N
N    __IO uint32_t TX_DIV              : 16;
X    volatile uint32_t TX_DIV              : 16;
N    __IO uint32_t RX_DIV              : 16;
X    volatile uint32_t RX_DIV              : 16;
N}DEV_UARTn_DIV_Field;
N/****DEV_UARTnDIV end****/
N
N/***********************************CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t TX_EN               : 1;
X    volatile uint32_t TX_EN               : 1;
N    __IO uint32_t RX_EN               : 1;
X    volatile uint32_t RX_EN               : 1;
N    __IO uint32_t TX_DMA_EN           : 1;
X    volatile uint32_t TX_DMA_EN           : 1;
N    __IO uint32_t RX_DMA_EN           : 1;
X    volatile uint32_t RX_DMA_EN           : 1;
N    __IO uint32_t TX_FIFO_RST         : 1;
X    volatile uint32_t TX_FIFO_RST         : 1;
N    __IO uint32_t RX_FIFO_RST         : 1;
X    volatile uint32_t RX_FIFO_RST         : 1;
N    __IO uint32_t ABD                 : 1;
X    volatile uint32_t ABD                 : 1;
N         uint32_t RESERVED0           : 25;
N}DEV_UARTn_CTL_Field;
N/****DEV_UARTnCTL end****/
N
N/***********************************IE***********************************/
Ntypedef struct{
N
N    __IO uint32_t TX_FIFO_THR         : 1;
X    volatile uint32_t TX_FIFO_THR         : 1;
N    __IO uint32_t RX_FIFO_THR         : 1;
X    volatile uint32_t RX_FIFO_THR         : 1;
N    __IO uint32_t TX_FIFO_OF          : 1;
X    volatile uint32_t TX_FIFO_OF          : 1;
N    __IO uint32_t RX_FIFO_OF          : 1;
X    volatile uint32_t RX_FIFO_OF          : 1;
N    __IO uint32_t RX_FIFO_UF          : 1;
X    volatile uint32_t RX_FIFO_UF          : 1;
N    __IO uint32_t FRAME_ERR           : 1;
X    volatile uint32_t FRAME_ERR           : 1;
N    __IO uint32_t PARITY_ERR          : 1;
X    volatile uint32_t PARITY_ERR          : 1;
N    __IO uint32_t TIME_OUT            : 1;
X    volatile uint32_t TIME_OUT            : 1;
N    __IO uint32_t DET_END             : 1;
X    volatile uint32_t DET_END             : 1;
N    __IO uint32_t TX_END              : 1;
X    volatile uint32_t TX_END              : 1;
N         uint32_t RESERVED0           : 22;
N}DEV_UARTn_IE_Field;
N/****DEV_UARTnIE end****/
N
N/***********************************PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t TX_FIFO_THR         : 1;
X    volatile uint32_t TX_FIFO_THR         : 1;
N    __IO uint32_t RX_FIFO_THR         : 1;
X    volatile uint32_t RX_FIFO_THR         : 1;
N    __IO uint32_t TX_FIFO_OF          : 1;
X    volatile uint32_t TX_FIFO_OF          : 1;
N    __IO uint32_t RX_FIFO_OF          : 1;
X    volatile uint32_t RX_FIFO_OF          : 1;
N    __IO uint32_t RX_FIFO_UF          : 1;
X    volatile uint32_t RX_FIFO_UF          : 1;
N    __IO uint32_t FRAME_ERR           : 1;
X    volatile uint32_t FRAME_ERR           : 1;
N    __IO uint32_t PARITY_ERR          : 1;
X    volatile uint32_t PARITY_ERR          : 1;
N    __IO uint32_t TIME_OUT            : 1;
X    volatile uint32_t TIME_OUT            : 1;
N    __IO uint32_t DET_END             : 1;
X    volatile uint32_t DET_END             : 1;
N    __IO uint32_t TX_END              : 1;
X    volatile uint32_t TX_END              : 1;
N         uint32_t RESERVED0           : 22;
N}DEV_UARTn_PD_Field;
N/****DEV_UARTnPD end****/
N
N/***********************************STA***********************************/
Ntypedef struct{
N
N    __I  uint32_t TX_FIFO_WLVL        : 5;
X    volatile const  uint32_t TX_FIFO_WLVL        : 5;
N    __I  uint32_t TX_FIFO_EMPTY       : 1;
X    volatile const  uint32_t TX_FIFO_EMPTY       : 1;
N    __I  uint32_t TX_FIFO_FULL        : 1;
X    volatile const  uint32_t TX_FIFO_FULL        : 1;
N    __I  uint32_t TX_BUSY             : 1;
X    volatile const  uint32_t TX_BUSY             : 1;
N    __I  uint32_t RX_FIFO_RLVL        : 5;
X    volatile const  uint32_t RX_FIFO_RLVL        : 5;
N    __I  uint32_t RX_FIFO_EMPTY       : 1;
X    volatile const  uint32_t RX_FIFO_EMPTY       : 1;
N    __I  uint32_t RX_FIFO_FULL        : 1;
X    volatile const  uint32_t RX_FIFO_FULL        : 1;
N    __I  uint32_t RX_BUSY             : 1;
X    volatile const  uint32_t RX_BUSY             : 1;
N    __I  uint32_t CTS                 : 1;
X    volatile const  uint32_t CTS                 : 1;
N         uint32_t RESERVED0           : 15;
N}DEV_UARTn_STA_Field;
N/****DEV_UARTnSTA end****/
N
N/***********************************RX_CNT***********************************/
Ntypedef struct{
N
N    __I  uint32_t RX_CNT              : 16;
X    volatile const  uint32_t RX_CNT              : 16;
N         uint32_t RESERVED0           : 16;
N}DEV_UARTn_RX_CNT_Field;
N/****DEV_UARTnRX_CNT end****/
N
N/***********************************TX_DAT***********************************/
Ntypedef struct{
N
N    __O  uint32_t TX_DAT              : 8;
X    volatile  uint32_t TX_DAT              : 8;
N         uint32_t RESERVED0           : 24;
N}DEV_UARTn_TX_DAT_Field;
N/****DEV_UARTnTX_DAT end****/
N
N/***********************************RX_DAT***********************************/
Ntypedef struct{
N
N    __O  uint32_t RX_DAT              : 8;
X    volatile  uint32_t RX_DAT              : 8;
N         uint32_t RESERVED0           : 24;
N}DEV_UARTn_RX_DAT_Field;
N/****DEV_UARTnRX_DAT end****/
N
N/***********************************DEV_UARTn register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    CFG;                                     /* 0x0    UART Configure */
X        volatile    uint32_t    CFG;                                      
N        DEV_UARTn_CFG_Field    CFG_f;
N    };
N    union
N    {
N        __IO    uint32_t    DIV;                                     /* 0x4    UART Divide */
X        volatile    uint32_t    DIV;                                      
N        DEV_UARTn_DIV_Field    DIV_f;
N    };
N    uint32_t    RESERVED0;
N    union
N    {
N        __IO    uint32_t    CTL;                                     /* 0xc    UART Control */
X        volatile    uint32_t    CTL;                                      
N        DEV_UARTn_CTL_Field    CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    IE;                                      /* 0x10    UART Interrupt Enable */
X        volatile    uint32_t    IE;                                       
N        DEV_UARTn_IE_Field    IE_f;
N    };
N    union
N    {
N        __IO    uint32_t    PD;                                      /* 0x14    UART Interrupt Pending */
X        volatile    uint32_t    PD;                                       
N        DEV_UARTn_PD_Field    PD_f;
N    };
N    union
N    {
N        __I     uint32_t    STA;                                     /* 0x18    UART Status */
X        volatile const     uint32_t    STA;                                      
N        DEV_UARTn_STA_Field    STA_f;
N    };
N    union
N    {
N        __I     uint32_t    RX_CNT;                                  /* 0x1c    UART Rx Counter
X        volatile const     uint32_t    RX_CNT;                                  
N(used for Auto Baud Rate Detect) */
N        DEV_UARTn_RX_CNT_Field    RX_CNT_f;
N    };
N    union
N    {
N        __IO    uint32_t    TX_DAT;                                  /* 0x20    UART Tx Data(FIFO) */
X        volatile    uint32_t    TX_DAT;                                   
N        DEV_UARTn_TX_DAT_Field    TX_DAT_f;
N    };
N    union
N    {
N        __IO    uint32_t    RX_DAT;                                  /* 0x24    UART Rx Data(FIFO) */
X        volatile    uint32_t    RX_DAT;                                   
N        DEV_UARTn_RX_DAT_Field    RX_DAT_f;
N    };
N}DEV_UARTn_RegDef_f;
N/****DEV_UARTn end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 33 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_iicn_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_iicn_field.h" 1
N#ifndef __DEV_IICN_FIELD_H__
N#define __DEV_IICN_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CFG***********************************/
Ntypedef struct{
N
N    __IO uint32_t MODE                : 1;
X    volatile uint32_t MODE                : 1;
N    __IO uint32_t SLV_ADDR            : 7;
X    volatile uint32_t SLV_ADDR            : 7;
N    __IO uint32_t DIV_COE             : 8;
X    volatile uint32_t DIV_COE             : 8;
N    __IO uint32_t IIC_EN              : 1;
X    volatile uint32_t IIC_EN              : 1;
N         uint32_t RESERVED0           : 15;
N}DEV_IICn_CFG_Field;
N/****DEV_IICnCFG end****/
N
N/***********************************CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t TX_DAT              : 8;
X    volatile uint32_t TX_DAT              : 8;
N    __IO uint32_t TX_ACK              : 1;
X    volatile uint32_t TX_ACK              : 1;
N         uint32_t RESERVED0           : 3;
N    __IO uint32_t CMD                 : 2;
X    volatile uint32_t CMD                 : 2;
N         uint32_t RESERVED1           : 18;
N}DEV_IICn_CTL_Field;
N/****DEV_IICnCTL end****/
N
N/***********************************IE***********************************/
Ntypedef struct{
N
N    __IO uint32_t STOP_DET            : 1;
X    volatile uint32_t STOP_DET            : 1;
N    __IO uint32_t BYTE_END            : 1;
X    volatile uint32_t BYTE_END            : 1;
N    __IO uint32_t NACK_DET            : 1;
X    volatile uint32_t NACK_DET            : 1;
N    __IO uint32_t START_DET           : 1;
X    volatile uint32_t START_DET           : 1;
N    __IO uint32_t BUS_ERR             : 1;
X    volatile uint32_t BUS_ERR             : 1;
N         uint32_t RESERVED0           : 27;
N}DEV_IICn_IE_Field;
N/****DEV_IICnIE end****/
N
N/***********************************PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t STOP_DET            : 1;
X    volatile uint32_t STOP_DET            : 1;
N    __IO uint32_t BYTE_END            : 1;
X    volatile uint32_t BYTE_END            : 1;
N    __IO uint32_t NACK_DET            : 1;
X    volatile uint32_t NACK_DET            : 1;
N    __IO uint32_t START_DET           : 1;
X    volatile uint32_t START_DET           : 1;
N    __IO uint32_t BUS_ERR             : 1;
X    volatile uint32_t BUS_ERR             : 1;
N         uint32_t RESERVED0           : 27;
N}DEV_IICn_PD_Field;
N/****DEV_IICnPD end****/
N
N/***********************************STA***********************************/
Ntypedef struct{
N
N    __I  uint32_t BUSY                : 1;
X    volatile const  uint32_t BUSY                : 1;
N    __I  uint32_t RX_ACK              : 1;
X    volatile const  uint32_t RX_ACK              : 1;
N    __I  uint32_t RW_FLAG             : 1;
X    volatile const  uint32_t RW_FLAG             : 1;
N    __I  uint32_t ADDR_VALID          : 1;
X    volatile const  uint32_t ADDR_VALID          : 1;
N    __I  uint32_t TX_BUF_FULL         : 1;
X    volatile const  uint32_t TX_BUF_FULL         : 1;
N    __I  uint32_t RX_BUF_FULL         : 1;
X    volatile const  uint32_t RX_BUF_FULL         : 1;
N         uint32_t RESERVED0           : 26;
N}DEV_IICn_STA_Field;
N/****DEV_IICnSTA end****/
N
N/***********************************RX_DAT***********************************/
Ntypedef struct{
N
N    __I  uint32_t RX_DAT              : 8;
X    volatile const  uint32_t RX_DAT              : 8;
N         uint32_t RESERVED0           : 24;
N}DEV_IICn_RX_DAT_Field;
N/****DEV_IICnRX_DAT end****/
N
N/***********************************DEV_IICn register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    CFG;                                     /* 0x0    IIC Configure */
X        volatile    uint32_t    CFG;                                      
N        DEV_IICn_CFG_Field    CFG_f;
N    };
N    union
N    {
N        __IO    uint32_t    CTL;                                     /* 0x4    IIC Control */
X        volatile    uint32_t    CTL;                                      
N        DEV_IICn_CTL_Field    CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    IE;                                      /* 0x8    IIC Interrupt Enable */
X        volatile    uint32_t    IE;                                       
N        DEV_IICn_IE_Field    IE_f;
N    };
N    union
N    {
N        __IO    uint32_t    PD;                                      /* 0xc    IIC Interrupt Pending */
X        volatile    uint32_t    PD;                                       
N        DEV_IICn_PD_Field    PD_f;
N    };
N    union
N    {
N        __I     uint32_t    STA;                                     /* 0x10    IIC Status */
X        volatile const     uint32_t    STA;                                      
N        DEV_IICn_STA_Field    STA_f;
N    };
N    union
N    {
N        __I     uint32_t    RX_DAT;                                  /* 0x14    IIC Rx Data(FIFO) */
X        volatile const     uint32_t    RX_DAT;                                   
N        DEV_IICn_RX_DAT_Field    RX_DAT_f;
N    };
N}DEV_IICn_RegDef_f;
N/****DEV_IICn end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 34 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_asin_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_asin_field.h" 1
N#ifndef __DEV_ASIN_FIELD_H__
N#define __DEV_ASIN_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CFG***********************************/
Ntypedef struct{
N
N    __IO uint32_t MODE_SEL            : 2;
X    volatile uint32_t MODE_SEL            : 2;
N    __IO uint32_t FRM_FMT             : 2;
X    volatile uint32_t FRM_FMT             : 2;
N    __IO uint32_t CHN_NUM             : 3;
X    volatile uint32_t CHN_NUM             : 3;
N    __IO uint32_t MASTER              : 1;
X    volatile uint32_t MASTER              : 1;
N    __IO uint32_t CHN_WIDTH           : 1;
X    volatile uint32_t CHN_WIDTH           : 1;
N    __IO uint32_t DSD_CTL             : 1;
X    volatile uint32_t DSD_CTL             : 1;
N    __IO uint32_t VLD_WIDTH           : 2;
X    volatile uint32_t VLD_WIDTH           : 2;
N    __IO uint32_t DAT_FMT             : 2;
X    volatile uint32_t DAT_FMT             : 2;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t LOOPBACK            : 1;
X    volatile uint32_t LOOPBACK            : 1;
N    __IO uint32_t TX_FIFO_THR         : 6;
X    volatile uint32_t TX_FIFO_THR         : 6;
N    __IO uint32_t DSD_DAT_FMT         : 2;
X    volatile uint32_t DSD_DAT_FMT         : 2;
N    __IO uint32_t RX_FIFO_THR         : 6;
X    volatile uint32_t RX_FIFO_THR         : 6;
N    __IO uint32_t LSB_MODE            : 1;
X    volatile uint32_t LSB_MODE            : 1;
N         uint32_t RESERVED1           : 1;
N}DEV_ASIn_CFG_Field;
N/****DEV_ASInCFG end****/
N
N/***********************************CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t TX_EN               : 1;
X    volatile uint32_t TX_EN               : 1;
N    __IO uint32_t RX_EN               : 1;
X    volatile uint32_t RX_EN               : 1;
N    __IO uint32_t TX_DMA_EN           : 1;
X    volatile uint32_t TX_DMA_EN           : 1;
N    __IO uint32_t RX_DMA_EN           : 1;
X    volatile uint32_t RX_DMA_EN           : 1;
N    __IO uint32_t TX_SRC_SEL          : 1;
X    volatile uint32_t TX_SRC_SEL          : 1;
N    __IO uint32_t RX_SRC_SEL          : 1;
X    volatile uint32_t RX_SRC_SEL          : 1;
N    __IO uint32_t TX_FIFO_RST         : 1;
X    volatile uint32_t TX_FIFO_RST         : 1;
N    __IO uint32_t RX_FIFO_RST         : 1;
X    volatile uint32_t RX_FIFO_RST         : 1;
N    __IO uint32_t Slot0_en            : 1;
X    volatile uint32_t Slot0_en            : 1;
N    __IO uint32_t Slot1_en            : 1;
X    volatile uint32_t Slot1_en            : 1;
N    __IO uint32_t Slot2_en            : 1;
X    volatile uint32_t Slot2_en            : 1;
N    __IO uint32_t Slot3_en            : 1;
X    volatile uint32_t Slot3_en            : 1;
N    __IO uint32_t Slot4_en            : 1;
X    volatile uint32_t Slot4_en            : 1;
N    __IO uint32_t Slot5_en            : 1;
X    volatile uint32_t Slot5_en            : 1;
N    __IO uint32_t Slot6_en            : 1;
X    volatile uint32_t Slot6_en            : 1;
N    __IO uint32_t Slot7_en            : 1;
X    volatile uint32_t Slot7_en            : 1;
N    __IO uint32_t IO_STA              : 2;
X    volatile uint32_t IO_STA              : 2;
N         uint32_t RESERVED0           : 14;
N}DEV_ASIn_CTL_Field;
N/****DEV_ASInCTL end****/
N
N/***********************************IE***********************************/
Ntypedef struct{
N
N    __IO uint32_t TX_IRQ              : 1;
X    volatile uint32_t TX_IRQ              : 1;
N    __IO uint32_t TX_FIFO_OF          : 1;
X    volatile uint32_t TX_FIFO_OF          : 1;
N    __IO uint32_t TX_FIFO_UF          : 1;
X    volatile uint32_t TX_FIFO_UF          : 1;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t RX_IRQ              : 1;
X    volatile uint32_t RX_IRQ              : 1;
N    __IO uint32_t RX_FIFO_OF          : 1;
X    volatile uint32_t RX_FIFO_OF          : 1;
N    __IO uint32_t RX_FIFO_UF          : 1;
X    volatile uint32_t RX_FIFO_UF          : 1;
N         uint32_t RESERVED1           : 25;
N}DEV_ASIn_IE_Field;
N/****DEV_ASInIE end****/
N
N/***********************************PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t TX_IRQ              : 1;
X    volatile uint32_t TX_IRQ              : 1;
N    __IO uint32_t TX_FIFO_OF          : 1;
X    volatile uint32_t TX_FIFO_OF          : 1;
N    __IO uint32_t TX_FIFO_UF          : 1;
X    volatile uint32_t TX_FIFO_UF          : 1;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t RX_IRQ              : 1;
X    volatile uint32_t RX_IRQ              : 1;
N    __IO uint32_t RX_FIFO_OF          : 1;
X    volatile uint32_t RX_FIFO_OF          : 1;
N    __IO uint32_t RX_FIFO_UF          : 1;
X    volatile uint32_t RX_FIFO_UF          : 1;
N         uint32_t RESERVED1           : 25;
N}DEV_ASIn_PD_Field;
N/****DEV_ASInPD end****/
N
N/***********************************STA***********************************/
Ntypedef struct{
N
N    __I  uint32_t TX_FIFO_WLVL        : 6;
X    volatile const  uint32_t TX_FIFO_WLVL        : 6;
N         uint32_t RESERVED0           : 2;
N    __I  uint32_t TX_FIFO_AEMP        : 1;
X    volatile const  uint32_t TX_FIFO_AEMP        : 1;
N    __I  uint32_t TX_FIFO_EMPT        : 1;
X    volatile const  uint32_t TX_FIFO_EMPT        : 1;
N    __I  uint32_t TX_FIFO_AFUL        : 1;
X    volatile const  uint32_t TX_FIFO_AFUL        : 1;
N    __I  uint32_t TX_FIFO_FULL        : 1;
X    volatile const  uint32_t TX_FIFO_FULL        : 1;
N    __I  uint32_t TX_BUSY             : 1;
X    volatile const  uint32_t TX_BUSY             : 1;
N         uint32_t RESERVED1           : 3;
N    __I  uint32_t RX_FIFO_RLVL        : 6;
X    volatile const  uint32_t RX_FIFO_RLVL        : 6;
N         uint32_t RESERVED2           : 2;
N    __I  uint32_t RX_FIFO_AEMP        : 1;
X    volatile const  uint32_t RX_FIFO_AEMP        : 1;
N    __I  uint32_t RX_FIFO_EMPT        : 1;
X    volatile const  uint32_t RX_FIFO_EMPT        : 1;
N    __I  uint32_t RX_FIFO_AFUL        : 1;
X    volatile const  uint32_t RX_FIFO_AFUL        : 1;
N    __I  uint32_t RX_FIFO_FULL        : 1;
X    volatile const  uint32_t RX_FIFO_FULL        : 1;
N    __I  uint32_t RX_BUSY             : 1;
X    volatile const  uint32_t RX_BUSY             : 1;
N         uint32_t RESERVED3           : 3;
N}DEV_ASIn_STA_Field;
N/****DEV_ASInSTA end****/
N
N/***********************************TX_CNT***********************************/
Ntypedef struct{
N
N    __I  uint32_t TX_CNT              : 32;
X    volatile const  uint32_t TX_CNT              : 32;
N}DEV_ASIn_TX_CNT_Field;
N/****DEV_ASInTX_CNT end****/
N
N/***********************************RX_CNT***********************************/
Ntypedef struct{
N
N    __I  uint32_t RX_CNT              : 32;
X    volatile const  uint32_t RX_CNT              : 32;
N}DEV_ASIn_RX_CNT_Field;
N/****DEV_ASInRX_CNT end****/
N
N/***********************************TX_BUF***********************************/
Ntypedef struct{
N
N    __O  uint32_t TX_DAT              : 32;
X    volatile  uint32_t TX_DAT              : 32;
N}DEV_ASIn_TX_BUF_Field;
N/****DEV_ASInTX_BUF end****/
N
N/***********************************RX_BUF***********************************/
Ntypedef struct{
N
N    __I  uint32_t RX_DAT              : 32;
X    volatile const  uint32_t RX_DAT              : 32;
N}DEV_ASIn_RX_BUF_Field;
N/****DEV_ASInRX_BUF end****/
N
N/***********************************DEV_ASIn register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    CFG;                                     /* 0x0    ASI Configure */
X        volatile    uint32_t    CFG;                                      
N        DEV_ASIn_CFG_Field    CFG_f;
N    };
N    uint32_t    RESERVED0;
N    union
N    {
N        __IO    uint32_t    CTL;                                     /* 0x8    ASI Control */
X        volatile    uint32_t    CTL;                                      
N        DEV_ASIn_CTL_Field    CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    IE;                                      /* 0xc    ASI Interrupt Enable */
X        volatile    uint32_t    IE;                                       
N        DEV_ASIn_IE_Field    IE_f;
N    };
N    union
N    {
N        __IO    uint32_t    PD;                                      /* 0x10    ASI Interrupt Pending */
X        volatile    uint32_t    PD;                                       
N        DEV_ASIn_PD_Field    PD_f;
N    };
N    union
N    {
N        __I     uint32_t    STA;                                     /* 0x14    ASI Status */
X        volatile const     uint32_t    STA;                                      
N        DEV_ASIn_STA_Field    STA_f;
N    };
N    union
N    {
N        __I     uint32_t    TX_CNT;                                  /* 0x18    ASI TX Frame Counter */
X        volatile const     uint32_t    TX_CNT;                                   
N        DEV_ASIn_TX_CNT_Field    TX_CNT_f;
N    };
N    union
N    {
N        __I     uint32_t    RX_CNT;                                  /* 0x1c    ASI RX Frame Counter */
X        volatile const     uint32_t    RX_CNT;                                   
N        DEV_ASIn_RX_CNT_Field    RX_CNT_f;
N    };
N    union
N    {
N        __O     uint32_t    TX_BUF;                                  /* 0x20    ASI TX FIFO */
X        volatile     uint32_t    TX_BUF;                                   
N        DEV_ASIn_TX_BUF_Field    TX_BUF_f;
N    };
N    union
N    {
N        __I     uint32_t    RX_BUF;                                  /* 0x24    ASI RX FIFO */
X        volatile const     uint32_t    RX_BUF;                                   
N        DEV_ASIn_RX_BUF_Field    RX_BUF_f;
N    };
N}DEV_ASIn_RegDef_f;
N/****DEV_ASIn end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 35 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "ir_rx_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\ir_rx_field.h" 1
N#ifndef __IR_RX_FIELD_H__
N#define __IR_RX_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************IR_RX_NEC_09MS***********************************/
Ntypedef struct{
N
N    __IO uint32_t LOWER_CNT           : 16;
X    volatile uint32_t LOWER_CNT           : 16;
N    __IO uint32_t UPPER_CNT           : 16;
X    volatile uint32_t UPPER_CNT           : 16;
N}IR_RX_IR_RX_NEC_09MS_Field;
N/****IR_RXIR_RX_NEC_09MS end****/
N
N/***********************************IR_RX_NEC_13MS***********************************/
Ntypedef struct{
N
N    __IO uint32_t LOWER_CNT           : 16;
X    volatile uint32_t LOWER_CNT           : 16;
N    __IO uint32_t UPPER_CNT           : 16;
X    volatile uint32_t UPPER_CNT           : 16;
N}IR_RX_IR_RX_NEC_13MS_Field;
N/****IR_RXIR_RX_NEC_13MS end****/
N
N/***********************************IR_RX_NEC_11MS***********************************/
Ntypedef struct{
N
N    __IO uint32_t LOWER_CNT           : 16;
X    volatile uint32_t LOWER_CNT           : 16;
N    __IO uint32_t UPPER_CNT           : 16;
X    volatile uint32_t UPPER_CNT           : 16;
N}IR_RX_IR_RX_NEC_11MS_Field;
N/****IR_RXIR_RX_NEC_11MS end****/
N
N/***********************************IR_RX_9012_04MS***********************************/
Ntypedef struct{
N
N    __IO uint32_t LOWER_CNT           : 16;
X    volatile uint32_t LOWER_CNT           : 16;
N    __IO uint32_t UPPER_CNT           : 16;
X    volatile uint32_t UPPER_CNT           : 16;
N}IR_RX_IR_RX_9012_04MS_Field;
N/****IR_RXIR_RX_9012_04MS end****/
N
N/***********************************IR_RX_9012_09MS***********************************/
Ntypedef struct{
N
N    __IO uint32_t LOWER_CNT           : 16;
X    volatile uint32_t LOWER_CNT           : 16;
N    __IO uint32_t UPPER_CNT           : 16;
X    volatile uint32_t UPPER_CNT           : 16;
N}IR_RX_IR_RX_9012_09MS_Field;
N/****IR_RXIR_RX_9012_09MS end****/
N
N/***********************************IR_RX_DATA_P5MS***********************************/
Ntypedef struct{
N
N    __IO uint32_t LOWER_CNT           : 16;
X    volatile uint32_t LOWER_CNT           : 16;
N    __IO uint32_t UPPER_CNT           : 16;
X    volatile uint32_t UPPER_CNT           : 16;
N}IR_RX_IR_RX_DATA_P5MS_Field;
N/****IR_RXIR_RX_DATA_P5MS end****/
N
N/***********************************IR_RX_DATA_01MS***********************************/
Ntypedef struct{
N
N    __IO uint32_t LOWER_CNT           : 16;
X    volatile uint32_t LOWER_CNT           : 16;
N    __IO uint32_t UPPER_CNT           : 16;
X    volatile uint32_t UPPER_CNT           : 16;
N}IR_RX_IR_RX_DATA_01MS_Field;
N/****IR_RXIR_RX_DATA_01MS end****/
N
N/***********************************IR_RX_DATA_02MS***********************************/
Ntypedef struct{
N
N    __IO uint32_t LOWER_CNT           : 16;
X    volatile uint32_t LOWER_CNT           : 16;
N    __IO uint32_t UPPER_CNT           : 16;
X    volatile uint32_t UPPER_CNT           : 16;
N}IR_RX_IR_RX_DATA_02MS_Field;
N/****IR_RXIR_RX_DATA_02MS end****/
N
N/***********************************IR_RX_CFG***********************************/
Ntypedef struct{
N
N    __IO uint32_t DEB_WIDTH           : 8;
X    volatile uint32_t DEB_WIDTH           : 8;
N    __IO uint32_t LOOP_BACK           : 1;
X    volatile uint32_t LOOP_BACK           : 1;
N         uint32_t RESERVED0           : 7;
N    __IO uint32_t TIME_OUT_NUM        : 16;
X    volatile uint32_t TIME_OUT_NUM        : 16;
N}IR_RX_IR_RX_CFG_Field;
N/****IR_RXIR_RX_CFG end****/
N
N/***********************************IR_RX_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t RX_EN               : 1;
X    volatile uint32_t RX_EN               : 1;
N         uint32_t RESERVED0           : 31;
N}IR_RX_IR_RX_CTL_Field;
N/****IR_RXIR_RX_CTL end****/
N
N/***********************************IR_RX_IE***********************************/
Ntypedef struct{
N
N    __IO uint32_t FRAME_END           : 1;
X    volatile uint32_t FRAME_END           : 1;
N    __IO uint32_t TIME_OUT            : 1;
X    volatile uint32_t TIME_OUT            : 1;
N    __IO uint32_t HEAD_ERR            : 1;
X    volatile uint32_t HEAD_ERR            : 1;
N    __IO uint32_t DATA_NEG_ERR        : 1;
X    volatile uint32_t DATA_NEG_ERR        : 1;
N    __IO uint32_t DATA_POS_ERR        : 1;
X    volatile uint32_t DATA_POS_ERR        : 1;
N    __IO uint32_t DATA_CMP_ERR        : 1;
X    volatile uint32_t DATA_CMP_ERR        : 1;
N    __IO uint32_t HEAD_RPT_ERR        : 1;
X    volatile uint32_t HEAD_RPT_ERR        : 1;
N    __IO uint32_t DATA_RPT_ERR        : 1;
X    volatile uint32_t DATA_RPT_ERR        : 1;
N         uint32_t RESERVED0           : 24;
N}IR_RX_IR_RX_IE_Field;
N/****IR_RXIR_RX_IE end****/
N
N/***********************************IR_RX_PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t FRAME_END           : 1;
X    volatile uint32_t FRAME_END           : 1;
N    __IO uint32_t TIME_OUT            : 1;
X    volatile uint32_t TIME_OUT            : 1;
N    __IO uint32_t HEAD_ERR            : 1;
X    volatile uint32_t HEAD_ERR            : 1;
N    __IO uint32_t DATA_NEG_ERR        : 1;
X    volatile uint32_t DATA_NEG_ERR        : 1;
N    __IO uint32_t DATA_POS_ERR        : 1;
X    volatile uint32_t DATA_POS_ERR        : 1;
N    __IO uint32_t DATA_CMP_ERR        : 1;
X    volatile uint32_t DATA_CMP_ERR        : 1;
N    __IO uint32_t HEAD_RPT_ERR        : 1;
X    volatile uint32_t HEAD_RPT_ERR        : 1;
N    __IO uint32_t DATA_RPT_ERR        : 1;
X    volatile uint32_t DATA_RPT_ERR        : 1;
N         uint32_t RESERVED0           : 24;
N}IR_RX_IR_RX_PD_Field;
N/****IR_RXIR_RX_PD end****/
N
N/***********************************IR_RX_STA_CNT0***********************************/
Ntypedef struct{
N
N    __I  uint32_t CNT                 : 16;
X    volatile const  uint32_t CNT                 : 16;
N         uint32_t RESERVED0           : 16;
N}IR_RX_IR_RX_STA_CNT0_Field;
N/****IR_RXIR_RX_STA_CNT0 end****/
N
N/***********************************IR_RX_STA_CNT1***********************************/
Ntypedef struct{
N
N    __I  uint32_t CNT                 : 16;
X    volatile const  uint32_t CNT                 : 16;
N         uint32_t RESERVED0           : 16;
N}IR_RX_IR_RX_STA_CNT1_Field;
N/****IR_RXIR_RX_STA_CNT1 end****/
N
N/***********************************IR_RX_STA_CNT2***********************************/
Ntypedef struct{
N
N    __I  uint32_t CNT                 : 16;
X    volatile const  uint32_t CNT                 : 16;
N         uint32_t RESERVED0           : 16;
N}IR_RX_IR_RX_STA_CNT2_Field;
N/****IR_RXIR_RX_STA_CNT2 end****/
N
N/***********************************IR_RX_STA_CNT3***********************************/
Ntypedef struct{
N
N    __I  uint32_t CNT                 : 16;
X    volatile const  uint32_t CNT                 : 16;
N         uint32_t RESERVED0           : 16;
N}IR_RX_IR_RX_STA_CNT3_Field;
N/****IR_RXIR_RX_STA_CNT3 end****/
N
N/***********************************IR_RX_STA***********************************/
Ntypedef struct{
N
N    __I  uint32_t RX_NEC              : 1;
X    volatile const  uint32_t RX_NEC              : 1;
N    __I  uint32_t RX_NEC_RPT          : 1;
X    volatile const  uint32_t RX_NEC_RPT          : 1;
N    __I  uint32_t RX_9012             : 1;
X    volatile const  uint32_t RX_9012             : 1;
N    __I  uint32_t RX_9012_RPT         : 1;
X    volatile const  uint32_t RX_9012_RPT         : 1;
N         uint32_t RESERVED0           : 28;
N}IR_RX_IR_RX_STA_Field;
N/****IR_RXIR_RX_STA end****/
N
N/***********************************IR_RX_DAT***********************************/
Ntypedef struct{
N
N    __I  uint32_t IR_DAT              : 8;
X    volatile const  uint32_t IR_DAT              : 8;
N    __I  uint32_t IR_CMD              : 8;
X    volatile const  uint32_t IR_CMD              : 8;
N         uint32_t RESERVED0           : 16;
N}IR_RX_IR_RX_DAT_Field;
N/****IR_RXIR_RX_DAT end****/
N
N/***********************************IR_RX register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    IR_RX_NEC_09MS;                          /* 0x0    IR Rx NEC 09ms Count Register */
X        volatile    uint32_t    IR_RX_NEC_09MS;                           
N        IR_RX_IR_RX_NEC_09MS_Field    IR_RX_NEC_09MS_f;
N    };
N    union
N    {
N        __IO    uint32_t    IR_RX_NEC_13MS;                          /* 0x4    IR Rx NEC 13.5ms Count Register */
X        volatile    uint32_t    IR_RX_NEC_13MS;                           
N        IR_RX_IR_RX_NEC_13MS_Field    IR_RX_NEC_13MS_f;
N    };
N    union
N    {
N        __IO    uint32_t    IR_RX_NEC_11MS;                          /* 0x8    IR Rx NEC 11.25ms Count Register(Repeat) */
X        volatile    uint32_t    IR_RX_NEC_11MS;                           
N        IR_RX_IR_RX_NEC_11MS_Field    IR_RX_NEC_11MS_f;
N    };
N    union
N    {
N        __IO    uint32_t    IR_RX_9012_04MS;                         /* 0xc    IR Rx 9012 04ms Count Register */
X        volatile    uint32_t    IR_RX_9012_04MS;                          
N        IR_RX_IR_RX_9012_04MS_Field    IR_RX_9012_04MS_f;
N    };
N    union
N    {
N        __IO    uint32_t    IR_RX_9012_09MS;                         /* 0x10    IR Rx 9012 09ms Count Register */
X        volatile    uint32_t    IR_RX_9012_09MS;                          
N        IR_RX_IR_RX_9012_09MS_Field    IR_RX_9012_09MS_f;
N    };
N    union
N    {
N        __IO    uint32_t    IR_RX_DATA_P5MS;                         /* 0x14    IR Rx Data 0.5625ms Count Register */
X        volatile    uint32_t    IR_RX_DATA_P5MS;                          
N        IR_RX_IR_RX_DATA_P5MS_Field    IR_RX_DATA_P5MS_f;
N    };
N    union
N    {
N        __IO    uint32_t    IR_RX_DATA_01MS;                         /* 0x18    IR Rx Data 1.1250ms Count Register */
X        volatile    uint32_t    IR_RX_DATA_01MS;                          
N        IR_RX_IR_RX_DATA_01MS_Field    IR_RX_DATA_01MS_f;
N    };
N    union
N    {
N        __IO    uint32_t    IR_RX_DATA_02MS;                         /* 0x1c    IR Rx Data 2.2500ms Count Register */
X        volatile    uint32_t    IR_RX_DATA_02MS;                          
N        IR_RX_IR_RX_DATA_02MS_Field    IR_RX_DATA_02MS_f;
N    };
N    union
N    {
N        __IO    uint32_t    IR_RX_CFG;                               /* 0x20    IR Rx Configure Register */
X        volatile    uint32_t    IR_RX_CFG;                                
N        IR_RX_IR_RX_CFG_Field    IR_RX_CFG_f;
N    };
N    union
N    {
N        __IO    uint32_t    IR_RX_CTL;                               /* 0x24    IR Rx Control Register */
X        volatile    uint32_t    IR_RX_CTL;                                
N        IR_RX_IR_RX_CTL_Field    IR_RX_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    IR_RX_IE;                                /* 0x28    IR Rx Interrupt Enable Register */
X        volatile    uint32_t    IR_RX_IE;                                 
N        IR_RX_IR_RX_IE_Field    IR_RX_IE_f;
N    };
N    union
N    {
N        __IO    uint32_t    IR_RX_PD;                                /* 0x2c    IR Rx Interrupt Pending Register */
X        volatile    uint32_t    IR_RX_PD;                                 
N        IR_RX_IR_RX_PD_Field    IR_RX_PD_f;
N    };
N    union
N    {
N        __I     uint32_t    IR_RX_STA_CNT0;                          /* 0x30    IR RX Status CNT0 Register */
X        volatile const     uint32_t    IR_RX_STA_CNT0;                           
N        IR_RX_IR_RX_STA_CNT0_Field    IR_RX_STA_CNT0_f;
N    };
N    union
N    {
N        __I     uint32_t    IR_RX_STA_CNT1;                          /* 0x34    IR RX Status CNT1 Register */
X        volatile const     uint32_t    IR_RX_STA_CNT1;                           
N        IR_RX_IR_RX_STA_CNT1_Field    IR_RX_STA_CNT1_f;
N    };
N    union
N    {
N        __I     uint32_t    IR_RX_STA_CNT2;                          /* 0x38    IR RX Status CNT2 Register */
X        volatile const     uint32_t    IR_RX_STA_CNT2;                           
N        IR_RX_IR_RX_STA_CNT2_Field    IR_RX_STA_CNT2_f;
N    };
N    union
N    {
N        __I     uint32_t    IR_RX_STA_CNT3;                          /* 0x3c    IR RX Status CNT3 Register */
X        volatile const     uint32_t    IR_RX_STA_CNT3;                           
N        IR_RX_IR_RX_STA_CNT3_Field    IR_RX_STA_CNT3_f;
N    };
N    uint32_t    RESERVED0[4];
N    union
N    {
N        __I     uint32_t    IR_RX_STA;                               /* 0x50    IR Rx Status Register */
X        volatile const     uint32_t    IR_RX_STA;                                
N        IR_RX_IR_RX_STA_Field    IR_RX_STA_f;
N    };
N    union
N    {
N        __I     uint32_t    IR_RX_DAT;                               /* 0x54    IR Rx Data Register */
X        volatile const     uint32_t    IR_RX_DAT;                                
N        IR_RX_IR_RX_DAT_Field    IR_RX_DAT_f;
N    };
N}IR_RX_RegDef_f;
N/****IR_RX end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 36 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_adc_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_adc_field.h" 1
N#ifndef __DEV_ADC_FIELD_H__
N#define __DEV_ADC_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CHNn_CFG***********************************/
Ntypedef struct{
N
N    __IO uint32_t CHN_EN              : 1;
X    volatile uint32_t CHN_EN              : 1;
N    __IO uint32_t MODE_SEL            : 1;
X    volatile uint32_t MODE_SEL            : 1;
N    __IO uint32_t CIC_SEL             : 2;
X    volatile uint32_t CIC_SEL             : 2;
N    __IO uint32_t CIC_CLK_SEL         : 1;
X    volatile uint32_t CIC_CLK_SEL         : 1;
N    __IO uint32_t CIC_DAT_SEL         : 1;
X    volatile uint32_t CIC_DAT_SEL         : 1;
N    __IO uint32_t CIC_CLK_DIV         : 2;
X    volatile uint32_t CIC_CLK_DIV         : 2;
N    __IO uint32_t FIR_CLK_SEL         : 1;
X    volatile uint32_t FIR_CLK_SEL         : 1;
N    __IO uint32_t FIR_CLK_DIV         : 3;
X    volatile uint32_t FIR_CLK_DIV         : 3;
N    __IO uint32_t VOL                 : 4;
X    volatile uint32_t VOL                 : 4;
N    __IO uint32_t HPF_EN              : 1;
X    volatile uint32_t HPF_EN              : 1;
N    __IO uint32_t HPF_COEF            : 3;
X    volatile uint32_t HPF_COEF            : 3;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t CIC_CLK_PHASE       : 1;
X    volatile uint32_t CIC_CLK_PHASE       : 1;
N    __IO uint32_t DMIC_DLY_SEL        : 2;
X    volatile uint32_t DMIC_DLY_SEL        : 2;
N    __IO uint32_t DMIC_CLK_DIV        : 3;
X    volatile uint32_t DMIC_CLK_DIV        : 3;
N    __IO uint32_t DMIC_PIN_SEL        : 1;
X    volatile uint32_t DMIC_PIN_SEL        : 1;
N    __IO uint32_t MIX_SRC_SEL         : 2;
X    volatile uint32_t MIX_SRC_SEL         : 2;
N    __IO uint32_t MIX_GAIN            : 1;
X    volatile uint32_t MIX_GAIN            : 1;
N         uint32_t RESERVED1           : 1;
N}DEV_ADC_CHNn_CFG_Field;
N/****DEV_ADCCHNn_CFG end****/
N
N/***********************************CFG***********************************/
Ntypedef struct{
N
N         uint32_t RESERVED0           : 6;
N    __IO uint32_t ADC_WIDTH           : 1;
X    volatile uint32_t ADC_WIDTH           : 1;
N         uint32_t RESERVED1           : 1;
N    __IO uint32_t HFUL_TH             : 6;
X    volatile uint32_t HFUL_TH             : 6;
N         uint32_t RESERVED2           : 2;
N    __IO uint32_t DBG_IN_EN           : 1;
X    volatile uint32_t DBG_IN_EN           : 1;
N    __IO uint32_t DBG_OUT_EN          : 1;
X    volatile uint32_t DBG_OUT_EN          : 1;
N    __IO uint32_t DBG_CHN_SEL         : 2;
X    volatile uint32_t DBG_CHN_SEL         : 2;
N    __IO uint32_t FIFO_CLK_SEL        : 2;
X    volatile uint32_t FIFO_CLK_SEL        : 2;
N         uint32_t RESERVED3           : 2;
N    __IO uint32_t FIFO_DAT_SEL        : 4;
X    volatile uint32_t FIFO_DAT_SEL        : 4;
N         uint32_t RESERVED4           : 4;
N}DEV_ADC_CFG_Field;
N/****DEV_ADCCFG end****/
N
N/***********************************CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t ADC_EN              : 1;
X    volatile uint32_t ADC_EN              : 1;
N    __IO uint32_t DMA_EN              : 1;
X    volatile uint32_t DMA_EN              : 1;
N    __IO uint32_t SRC_SEL             : 1;
X    volatile uint32_t SRC_SEL             : 1;
N    __IO uint32_t RX_FIFO_RST         : 1;
X    volatile uint32_t RX_FIFO_RST         : 1;
N         uint32_t RESERVED0           : 28;
N}DEV_ADC_CTL_Field;
N/****DEV_ADCCTL end****/
N
N/***********************************IE***********************************/
Ntypedef struct{
N
N    __IO uint32_t RX_IRQ              : 1;
X    volatile uint32_t RX_IRQ              : 1;
N    __IO uint32_t RX_FIFO_OF          : 1;
X    volatile uint32_t RX_FIFO_OF          : 1;
N    __IO uint32_t RX_FIFO_UF          : 1;
X    volatile uint32_t RX_FIFO_UF          : 1;
N         uint32_t RESERVED0           : 29;
N}DEV_ADC_IE_Field;
N/****DEV_ADCIE end****/
N
N/***********************************PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t RX_IRQ              : 1;
X    volatile uint32_t RX_IRQ              : 1;
N    __IO uint32_t RX_FIFO_OF          : 1;
X    volatile uint32_t RX_FIFO_OF          : 1;
N    __IO uint32_t RX_FIFO_UF          : 1;
X    volatile uint32_t RX_FIFO_UF          : 1;
N         uint32_t RESERVED0           : 29;
N}DEV_ADC_PD_Field;
N/****DEV_ADCPD end****/
N
N/***********************************STA***********************************/
Ntypedef struct{
N
N    __I  uint32_t RX_FIFO_RLVL        : 6;
X    volatile const  uint32_t RX_FIFO_RLVL        : 6;
N         uint32_t RESERVED0           : 2;
N    __I  uint32_t RX_FIFO_HEMP        : 1;
X    volatile const  uint32_t RX_FIFO_HEMP        : 1;
N    __I  uint32_t RX_FIFO_EMPT        : 1;
X    volatile const  uint32_t RX_FIFO_EMPT        : 1;
N    __I  uint32_t RX_FIFO_HFUL        : 1;
X    volatile const  uint32_t RX_FIFO_HFUL        : 1;
N    __I  uint32_t RX_FIFO_FULL        : 1;
X    volatile const  uint32_t RX_FIFO_FULL        : 1;
N         uint32_t RESERVED1           : 20;
N}DEV_ADC_STA_Field;
N/****DEV_ADCSTA end****/
N
N/***********************************RBUF***********************************/
Ntypedef struct{
N
N         uint32_t RESERVED0           : 8;
N    __I  uint32_t RBUF                : 24;
X    volatile const  uint32_t RBUF                : 24;
N}DEV_ADC_RBUF_Field;
N/****DEV_ADCRBUF end****/
N
N/***********************************GAIN_CFG***********************************/
Ntypedef struct{
N
N    __IO uint32_t AGC_EN              : 1;
X    volatile uint32_t AGC_EN              : 1;
N    __IO uint32_t NOISE_GATE_EN       : 1;
X    volatile uint32_t NOISE_GATE_EN       : 1;
N    __IO uint32_t Hysteresis          : 2;
X    volatile uint32_t Hysteresis          : 2;
N    __IO uint32_t Min_gain            : 4;
X    volatile uint32_t Min_gain            : 4;
N    __IO uint32_t Max_gain            : 4;
X    volatile uint32_t Max_gain            : 4;
N         uint32_t RESERVED0           : 4;
N    __IO uint32_t Noise_level         : 8;
X    volatile uint32_t Noise_level         : 8;
N    __IO uint32_t Target_level        : 8;
X    volatile uint32_t Target_level        : 8;
N}DEV_ADC_GAIN_CFG_Field;
N/****DEV_ADCGAIN_CFG end****/
N
N/***********************************PEAK_AT***********************************/
Ntypedef struct{
N
N    __IO uint32_t ATTACK_TIME         : 32;
X    volatile uint32_t ATTACK_TIME         : 32;
N}DEV_ADC_PEAK_AT_Field;
N/****DEV_ADCPEAK_AT end****/
N
N/***********************************PEAK_RT***********************************/
Ntypedef struct{
N
N    __IO uint32_t RELEASE_TIME        : 32;
X    volatile uint32_t RELEASE_TIME        : 32;
N}DEV_ADC_PEAK_RT_Field;
N/****DEV_ADCPEAK_RT end****/
N
N/***********************************GAIN_AT***********************************/
Ntypedef struct{
N
N    __IO uint32_t ATTACK_TIME         : 32;
X    volatile uint32_t ATTACK_TIME         : 32;
N}DEV_ADC_GAIN_AT_Field;
N/****DEV_ADCGAIN_AT end****/
N
N/***********************************GAIN_RT***********************************/
Ntypedef struct{
N
N    __IO uint32_t RELEASE_TIME        : 32;
X    volatile uint32_t RELEASE_TIME        : 32;
N}DEV_ADC_GAIN_RT_Field;
N/****DEV_ADCGAIN_RT end****/
N
N/***********************************BIST_EN***********************************/
Ntypedef struct{
N
N    __IO uint32_t CHN0_BIST_EN        : 1;
X    volatile uint32_t CHN0_BIST_EN        : 1;
N    __IO uint32_t CHN1_BIST_EN        : 1;
X    volatile uint32_t CHN1_BIST_EN        : 1;
N    __IO uint32_t CHN2_BIST_EN        : 1;
X    volatile uint32_t CHN2_BIST_EN        : 1;
N    __IO uint32_t CHN3_BIST_EN        : 1;
X    volatile uint32_t CHN3_BIST_EN        : 1;
N    __IO uint32_t CHN0_BIST_RME       : 1;
X    volatile uint32_t CHN0_BIST_RME       : 1;
N    __IO uint32_t CHN1_BIST_RME       : 1;
X    volatile uint32_t CHN1_BIST_RME       : 1;
N    __IO uint32_t CHN2_BIST_RME       : 1;
X    volatile uint32_t CHN2_BIST_RME       : 1;
N    __IO uint32_t CHN3_BIST_RME       : 1;
X    volatile uint32_t CHN3_BIST_RME       : 1;
N    __IO uint32_t CHN0_BIST_LS        : 1;
X    volatile uint32_t CHN0_BIST_LS        : 1;
N    __IO uint32_t CHN1_BIST_LS        : 1;
X    volatile uint32_t CHN1_BIST_LS        : 1;
N    __IO uint32_t CHN2_BIST_LS        : 1;
X    volatile uint32_t CHN2_BIST_LS        : 1;
N    __IO uint32_t CHN3_BIST_LS        : 1;
X    volatile uint32_t CHN3_BIST_LS        : 1;
N         uint32_t RESERVED0           : 20;
N}DEV_ADC_BIST_EN_Field;
N/****DEV_ADCBIST_EN end****/
N
N/***********************************BIST_RM***********************************/
Ntypedef struct{
N
N    __IO uint32_t CHN0_RAM_RM         : 4;
X    volatile uint32_t CHN0_RAM_RM         : 4;
N    __IO uint32_t CHN1_RAM_RM         : 4;
X    volatile uint32_t CHN1_RAM_RM         : 4;
N    __IO uint32_t CHN2_RAM_RM         : 4;
X    volatile uint32_t CHN2_RAM_RM         : 4;
N    __IO uint32_t CHN3_RAM_RM         : 4;
X    volatile uint32_t CHN3_RAM_RM         : 4;
N         uint32_t RESERVED0           : 16;
N}DEV_ADC_BIST_RM_Field;
N/****DEV_ADCBIST_RM end****/
N
N/***********************************BIST_DONE***********************************/
Ntypedef struct{
N
N    __I  uint32_t CHN0_RAM_DONE       : 1;
X    volatile const  uint32_t CHN0_RAM_DONE       : 1;
N    __I  uint32_t CHN1_RAM_DONE       : 1;
X    volatile const  uint32_t CHN1_RAM_DONE       : 1;
N    __I  uint32_t CHN2_RAM_DONE       : 1;
X    volatile const  uint32_t CHN2_RAM_DONE       : 1;
N    __I  uint32_t CHN3_RAM_DONE       : 1;
X    volatile const  uint32_t CHN3_RAM_DONE       : 1;
N         uint32_t RESERVED0           : 28;
N}DEV_ADC_BIST_DONE_Field;
N/****DEV_ADCBIST_DONE end****/
N
N/***********************************BIST_FAIL***********************************/
Ntypedef struct{
N
N    __I  uint32_t CHN0_RAM_FAIL       : 1;
X    volatile const  uint32_t CHN0_RAM_FAIL       : 1;
N    __I  uint32_t CHN1_RAM_FAIL       : 1;
X    volatile const  uint32_t CHN1_RAM_FAIL       : 1;
N    __I  uint32_t CHN2_RAM_FAIL       : 1;
X    volatile const  uint32_t CHN2_RAM_FAIL       : 1;
N    __I  uint32_t CHN3_RAM_FAIL       : 1;
X    volatile const  uint32_t CHN3_RAM_FAIL       : 1;
N         uint32_t RESERVED0           : 28;
N}DEV_ADC_BIST_FAIL_Field;
N/****DEV_ADCBIST_FAIL end****/
N
N/***********************************MIC_CTRL0***********************************/
Ntypedef struct{
N
N    __IO uint32_t MIC0_EN             : 1;
X    volatile uint32_t MIC0_EN             : 1;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t MIC0_MODE           : 2;
X    volatile uint32_t MIC0_MODE           : 2;
N    __IO uint32_t MIC0_GAIN           : 3;
X    volatile uint32_t MIC0_GAIN           : 3;
N         uint32_t RESERVED1           : 1;
N    __IO uint32_t MIC1_EN             : 1;
X    volatile uint32_t MIC1_EN             : 1;
N         uint32_t RESERVED2           : 1;
N    __IO uint32_t MIC1_MODE           : 2;
X    volatile uint32_t MIC1_MODE           : 2;
N    __IO uint32_t MIC1_GAIN           : 3;
X    volatile uint32_t MIC1_GAIN           : 3;
N         uint32_t RESERVED3           : 1;
N    __IO uint32_t MIC2_EN             : 1;
X    volatile uint32_t MIC2_EN             : 1;
N         uint32_t RESERVED4           : 1;
N    __IO uint32_t MIC2_MODE           : 2;
X    volatile uint32_t MIC2_MODE           : 2;
N    __IO uint32_t MIC2_GAIN           : 3;
X    volatile uint32_t MIC2_GAIN           : 3;
N         uint32_t RESERVED5           : 1;
N    __IO uint32_t MIC3_EN             : 1;
X    volatile uint32_t MIC3_EN             : 1;
N         uint32_t RESERVED6           : 1;
N    __IO uint32_t MIC3_MODE           : 2;
X    volatile uint32_t MIC3_MODE           : 2;
N    __IO uint32_t MIC3_GAIN           : 3;
X    volatile uint32_t MIC3_GAIN           : 3;
N         uint32_t RESERVED7           : 1;
N}DEV_ADC_MIC_CTRL0_Field;
N/****DEV_ADCMIC_CTRL0 end****/
N
N/***********************************MIC_CTRL1***********************************/
Ntypedef struct{
N
N    __IO uint32_t MIC_CHOP_EN         : 1;
X    volatile uint32_t MIC_CHOP_EN         : 1;
N    __IO uint32_t MIC_VCMI_CHOP_EN    : 1;
X    volatile uint32_t MIC_VCMI_CHOP_EN    : 1;
N    __IO uint32_t MIC_VCMI_SEL        : 1;
X    volatile uint32_t MIC_VCMI_SEL        : 1;
N    __IO uint32_t MIC_PD_STUP         : 1;
X    volatile uint32_t MIC_PD_STUP         : 1;
N    __IO uint32_t MIC_IBIAS_CTRL      : 2;
X    volatile uint32_t MIC_IBIAS_CTRL      : 2;
N    __IO uint32_t MIC_BYP_EN          : 1;
X    volatile uint32_t MIC_BYP_EN          : 1;
N    __IO uint32_t MIC_MIX_BYP_EN      : 1;
X    volatile uint32_t MIC_MIX_BYP_EN      : 1;
N    __IO uint32_t MIC_CAP_CHG         : 1;
X    volatile uint32_t MIC_CAP_CHG         : 1;
N         uint32_t RESERVED0           : 23;
N}DEV_ADC_MIC_CTRL1_Field;
N/****DEV_ADCMIC_CTRL1 end****/
N
N/***********************************MIX_CTRL0***********************************/
Ntypedef struct{
N
N    __IO uint32_t MIX0_EN             : 1;
X    volatile uint32_t MIX0_EN             : 1;
N    __IO uint32_t MIX0_MIC0_EN        : 1;
X    volatile uint32_t MIX0_MIC0_EN        : 1;
N    __IO uint32_t MIX0_MIC1_EN        : 1;
X    volatile uint32_t MIX0_MIC1_EN        : 1;
N    __IO uint32_t MIX0_MIC2_EN        : 1;
X    volatile uint32_t MIX0_MIC2_EN        : 1;
N    __IO uint32_t MIX0_GAIN           : 4;
X    volatile uint32_t MIX0_GAIN           : 4;
N    __IO uint32_t MIX1_EN             : 1;
X    volatile uint32_t MIX1_EN             : 1;
N    __IO uint32_t MIX1_MIC0_EN        : 1;
X    volatile uint32_t MIX1_MIC0_EN        : 1;
N    __IO uint32_t MIX1_MIC1_EN        : 1;
X    volatile uint32_t MIX1_MIC1_EN        : 1;
N    __IO uint32_t MIX1_MIC2_EN        : 1;
X    volatile uint32_t MIX1_MIC2_EN        : 1;
N    __IO uint32_t MIX1_GAIN           : 4;
X    volatile uint32_t MIX1_GAIN           : 4;
N         uint32_t RESERVED0           : 16;
N}DEV_ADC_MIX_CTRL0_Field;
N/****DEV_ADCMIX_CTRL0 end****/
N
N/***********************************MIX_CTRL1***********************************/
Ntypedef struct{
N
N    __IO uint32_t MIX_CHOP_EN         : 1;
X    volatile uint32_t MIX_CHOP_EN         : 1;
N    __IO uint32_t MIX_PD_STUP         : 1;
X    volatile uint32_t MIX_PD_STUP         : 1;
N    __IO uint32_t ZC_COMP_EN          : 1;
X    volatile uint32_t ZC_COMP_EN          : 1;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t MIX_IBIAS_CTRL      : 2;
X    volatile uint32_t MIX_IBIAS_CTRL      : 2;
N         uint32_t RESERVED1           : 26;
N}DEV_ADC_MIX_CTRL1_Field;
N/****DEV_ADCMIX_CTRL1 end****/
N
N/***********************************SDM_CTRL0***********************************/
Ntypedef struct{
N
N    __IO uint32_t ADC_START           : 1;
X    volatile uint32_t ADC_START           : 1;
N         uint32_t RESERVED0           : 31;
N}DEV_ADC_SDM_CTRL0_Field;
N/****DEV_ADCSDM_CTRL0 end****/
N
N/***********************************SDM_CTRL1***********************************/
Ntypedef struct{
N
N    __IO uint32_t ADC0_EN             : 1;
X    volatile uint32_t ADC0_EN             : 1;
N    __IO uint32_t ADC1_EN             : 1;
X    volatile uint32_t ADC1_EN             : 1;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t ADC_IBOTA1_CTRL     : 2;
X    volatile uint32_t ADC_IBOTA1_CTRL     : 2;
N    __IO uint32_t ADC_IBOTA2_CTRL     : 2;
X    volatile uint32_t ADC_IBOTA2_CTRL     : 2;
N    __IO uint32_t ADC_CHOP_EN         : 1;
X    volatile uint32_t ADC_CHOP_EN         : 1;
N         uint32_t RESERVED1           : 1;
N    __IO uint32_t ADC_CHOP_DIV        : 2;
X    volatile uint32_t ADC_CHOP_DIV        : 2;
N    __IO uint32_t ADC_NONOV           : 2;
X    volatile uint32_t ADC_NONOV           : 2;
N    __IO uint32_t ADC_DEM_PD          : 1;
X    volatile uint32_t ADC_DEM_PD          : 1;
N    __IO uint32_t ADC_BKDEM_EN        : 1;
X    volatile uint32_t ADC_BKDEM_EN        : 1;
N    __IO uint32_t ADC_DITHER_EN       : 1;
X    volatile uint32_t ADC_DITHER_EN       : 1;
N         uint32_t RESERVED2           : 1;
N    __IO uint32_t ADC_DITHER_SEL      : 2;
X    volatile uint32_t ADC_DITHER_SEL      : 2;
N    __IO uint32_t ADC_AMPDET_DEM      : 1;
X    volatile uint32_t ADC_AMPDET_DEM      : 1;
N    __IO uint32_t ADC_AMPDET_DITHER   : 1;
X    volatile uint32_t ADC_AMPDET_DITHER   : 1;
N    __IO uint32_t ADC_VREF_CHG        : 1;
X    volatile uint32_t ADC_VREF_CHG        : 1;
N         uint32_t RESERVED3           : 1;
N    __IO uint32_t ADC0_CLKDIV_SEL     : 2;
X    volatile uint32_t ADC0_CLKDIV_SEL     : 2;
N    __IO uint32_t ADC1_CLKDIV_SEL     : 2;
X    volatile uint32_t ADC1_CLKDIV_SEL     : 2;
N         uint32_t RESERVED4           : 4;
N}DEV_ADC_SDM_CTRL1_Field;
N/****DEV_ADCSDM_CTRL1 end****/
N
N/***********************************RSVD_CTRL***********************************/
Ntypedef struct{
N
N    __IO uint32_t ADC0_RSVD           : 6;
X    volatile uint32_t ADC0_RSVD           : 6;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t ADC1_RSVD           : 6;
X    volatile uint32_t ADC1_RSVD           : 6;
N         uint32_t RESERVED1           : 2;
N         uint32_t RESERVED2           : 16;
N}DEV_ADC_RSVD_CTRL_Field;
N/****DEV_ADCRSVD_CTRL end****/
N
N/***********************************VMIC0_CTRL***********************************/
Ntypedef struct{
N
N    __IO uint32_t VMIC0_EN            : 1;
X    volatile uint32_t VMIC0_EN            : 1;
N    __IO uint32_t VMIC0_BYPASS        : 1;
X    volatile uint32_t VMIC0_BYPASS        : 1;
N    __IO uint32_t VMIC0_DISCHG        : 1;
X    volatile uint32_t VMIC0_DISCHG        : 1;
N    __IO uint32_t VMIC0_REF_SEL       : 1;
X    volatile uint32_t VMIC0_REF_SEL       : 1;
N    __IO uint32_t VMIC0_VOL           : 4;
X    volatile uint32_t VMIC0_VOL           : 4;
N         uint32_t RESERVED0           : 24;
N}DEV_ADC_VMIC0_CTRL_Field;
N/****DEV_ADCVMIC0_CTRL end****/
N
N/***********************************VMIC1_CTRL***********************************/
Ntypedef struct{
N
N    __IO uint32_t VMIC1_EN            : 1;
X    volatile uint32_t VMIC1_EN            : 1;
N    __IO uint32_t VMIC1_BYPASS        : 1;
X    volatile uint32_t VMIC1_BYPASS        : 1;
N    __IO uint32_t VMIC1_DISCHG        : 1;
X    volatile uint32_t VMIC1_DISCHG        : 1;
N    __IO uint32_t VMIC1_REF_SEL       : 1;
X    volatile uint32_t VMIC1_REF_SEL       : 1;
N    __IO uint32_t VMIC1_VOL           : 4;
X    volatile uint32_t VMIC1_VOL           : 4;
N         uint32_t RESERVED0           : 24;
N}DEV_ADC_VMIC1_CTRL_Field;
N/****DEV_ADCVMIC1_CTRL end****/
N
N/***********************************VMIC_RAMP0***********************************/
Ntypedef struct{
N
N    __IO uint32_t VMIC0_RAMP_UP_EN    : 1;
X    volatile uint32_t VMIC0_RAMP_UP_EN    : 1;
N    __IO uint32_t VMIC0_RAMP_DN_EN    : 1;
X    volatile uint32_t VMIC0_RAMP_DN_EN    : 1;
N    __IO uint32_t VMIC1_RAMP_UP_EN    : 1;
X    volatile uint32_t VMIC1_RAMP_UP_EN    : 1;
N    __IO uint32_t VMIC1_RAMP_DN_EN    : 1;
X    volatile uint32_t VMIC1_RAMP_DN_EN    : 1;
N    __IO uint32_t FAST_STUP_VMIC      : 1;
X    volatile uint32_t FAST_STUP_VMIC      : 1;
N         uint32_t RESERVED0           : 11;
N    __IO uint32_t RAMP_TIME           : 16;
X    volatile uint32_t RAMP_TIME           : 16;
N}DEV_ADC_VMIC_RAMP0_Field;
N/****DEV_ADCVMIC_RAMP0 end****/
N
N/***********************************VMIC_RAMP1***********************************/
Ntypedef struct{
N
N    __IO uint32_t HIGH_NUM            : 16;
X    volatile uint32_t HIGH_NUM            : 16;
N    __IO uint32_t TOTAL_NUM           : 16;
X    volatile uint32_t TOTAL_NUM           : 16;
N}DEV_ADC_VMIC_RAMP1_Field;
N/****DEV_ADCVMIC_RAMP1 end****/
N
N/***********************************ANA_PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t ADC0_OVF            : 1;
X    volatile uint32_t ADC0_OVF            : 1;
N    __IO uint32_t ADC1_OVF            : 1;
X    volatile uint32_t ADC1_OVF            : 1;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t OUT_ZEROCROSS       : 1;
X    volatile uint32_t OUT_ZEROCROSS       : 1;
N         uint32_t RESERVED1           : 3;
N         uint32_t RESERVED2           : 24;
N}DEV_ADC_ANA_PD_Field;
N/****DEV_ADCANA_PD end****/
N
N/***********************************DEV_ADC register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    CHNn_CFG[4];                             /* 0x0    ADC Channel 0 Configure */
X        volatile    uint32_t    CHNn_CFG[4];                              
N        DEV_ADC_CHNn_CFG_Field    CHNn_CFG_f[4];
N    };
N    union
N    {
N        __IO    uint32_t    CFG;                                     /* 0x10    ADC Configure */
X        volatile    uint32_t    CFG;                                      
N        DEV_ADC_CFG_Field    CFG_f;
N    };
N    union
N    {
N        __IO    uint32_t    CTL;                                     /* 0x14    ADC Control */
X        volatile    uint32_t    CTL;                                      
N        DEV_ADC_CTL_Field    CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    IE;                                      /* 0x18    ADC Interrupt Enable */
X        volatile    uint32_t    IE;                                       
N        DEV_ADC_IE_Field    IE_f;
N    };
N    union
N    {
N        __IO    uint32_t    PD;                                      /* 0x1c    ADC Interrupt Pending */
X        volatile    uint32_t    PD;                                       
N        DEV_ADC_PD_Field    PD_f;
N    };
N    union
N    {
N        __I     uint32_t    STA;                                     /* 0x20    ADC Status */
X        volatile const     uint32_t    STA;                                      
N        DEV_ADC_STA_Field    STA_f;
N    };
N    union
N    {
N        __I     uint32_t    RBUF;                                    /* 0x24    ADCRBUF */
X        volatile const     uint32_t    RBUF;                                     
N        DEV_ADC_RBUF_Field    RBUF_f;
N    };
N    uint32_t    RESERVED0[2];
N    union
N    {
N        __IO    uint32_t    GAIN_CFG;                                /* 0x30    ADC Gain Configure */
X        volatile    uint32_t    GAIN_CFG;                                 
N        DEV_ADC_GAIN_CFG_Field    GAIN_CFG_f;
N    };
N    union
N    {
N        __IO    uint32_t    PEAK_AT;                                 /* 0x34    ADC Peak Attack. Time */
X        volatile    uint32_t    PEAK_AT;                                  
N        DEV_ADC_PEAK_AT_Field    PEAK_AT_f;
N    };
N    union
N    {
N        __IO    uint32_t    PEAK_RT;                                 /* 0x38    ADC Peak Release Time */
X        volatile    uint32_t    PEAK_RT;                                  
N        DEV_ADC_PEAK_RT_Field    PEAK_RT_f;
N    };
N    union
N    {
N        __IO    uint32_t    GAIN_AT;                                 /* 0x3c    ADC Gain Attack. Time */
X        volatile    uint32_t    GAIN_AT;                                  
N        DEV_ADC_GAIN_AT_Field    GAIN_AT_f;
N    };
N    union
N    {
N        __IO    uint32_t    GAIN_RT;                                 /* 0x40    ADC Gain Release Time */
X        volatile    uint32_t    GAIN_RT;                                  
N        DEV_ADC_GAIN_RT_Field    GAIN_RT_f;
N    };
N    uint32_t    RESERVED1[3];
N    union
N    {
N        __IO    uint32_t    BIST_EN;                                 /* 0x50    ADC BIST Enable */
X        volatile    uint32_t    BIST_EN;                                  
N        DEV_ADC_BIST_EN_Field    BIST_EN_f;
N    };
N    union
N    {
N        __IO    uint32_t    BIST_RM;                                 /* 0x54    ADC BIST Read Margin */
X        volatile    uint32_t    BIST_RM;                                  
N        DEV_ADC_BIST_RM_Field    BIST_RM_f;
N    };
N    union
N    {
N        __I     uint32_t    BIST_DONE;                               /* 0x58    ADC BIST done */
X        volatile const     uint32_t    BIST_DONE;                                
N        DEV_ADC_BIST_DONE_Field    BIST_DONE_f;
N    };
N    union
N    {
N        __I     uint32_t    BIST_FAIL;                               /* 0x5c    ADC BIST fail */
X        volatile const     uint32_t    BIST_FAIL;                                
N        DEV_ADC_BIST_FAIL_Field    BIST_FAIL_f;
N    };
N    uint32_t    RESERVED2[8];
N    union
N    {
N        __IO    uint32_t    MIC_CTRL0;                               /* 0x80    ADC Mic Control 0 */
X        volatile    uint32_t    MIC_CTRL0;                                
N        DEV_ADC_MIC_CTRL0_Field    MIC_CTRL0_f;
N    };
N    union
N    {
N        __IO    uint32_t    MIC_CTRL1;                               /* 0x84    ADC Mic Control 1 */
X        volatile    uint32_t    MIC_CTRL1;                                
N        DEV_ADC_MIC_CTRL1_Field    MIC_CTRL1_f;
N    };
N    union
N    {
N        __IO    uint32_t    MIX_CTRL0;                               /* 0x88    ADC Mix Control 0 */
X        volatile    uint32_t    MIX_CTRL0;                                
N        DEV_ADC_MIX_CTRL0_Field    MIX_CTRL0_f;
N    };
N    union
N    {
N        __IO    uint32_t    MIX_CTRL1;                               /* 0x8c    ADC Mix Control 1 */
X        volatile    uint32_t    MIX_CTRL1;                                
N        DEV_ADC_MIX_CTRL1_Field    MIX_CTRL1_f;
N    };
N    union
N    {
N        __IO    uint32_t    SDM_CTRL0;                               /* 0x90    ADC SDM Control 0 */
X        volatile    uint32_t    SDM_CTRL0;                                
N        DEV_ADC_SDM_CTRL0_Field    SDM_CTRL0_f;
N    };
N    union
N    {
N        __IO    uint32_t    SDM_CTRL1;                               /* 0x94    ADC SDM Control 1 */
X        volatile    uint32_t    SDM_CTRL1;                                
N        DEV_ADC_SDM_CTRL1_Field    SDM_CTRL1_f;
N    };
N    union
N    {
N        __IO    uint32_t    RSVD_CTRL;                               /* 0x98    ADC RSVD Control */
X        volatile    uint32_t    RSVD_CTRL;                                
N        DEV_ADC_RSVD_CTRL_Field    RSVD_CTRL_f;
N    };
N    union
N    {
N        __IO    uint32_t    VMIC0_CTRL;                              /* 0x9c    ADC VMIC0 Control */
X        volatile    uint32_t    VMIC0_CTRL;                               
N        DEV_ADC_VMIC0_CTRL_Field    VMIC0_CTRL_f;
N    };
N    union
N    {
N        __IO    uint32_t    VMIC1_CTRL;                              /* 0xa0    ADC VMIC1 Control */
X        volatile    uint32_t    VMIC1_CTRL;                               
N        DEV_ADC_VMIC1_CTRL_Field    VMIC1_CTRL_f;
N    };
N    union
N    {
N        __IO    uint32_t    VMIC_RAMP0;                              /* 0xa4    ADC VMIC Ramp Control 0 */
X        volatile    uint32_t    VMIC_RAMP0;                               
N        DEV_ADC_VMIC_RAMP0_Field    VMIC_RAMP0_f;
N    };
N    union
N    {
N        __IO    uint32_t    VMIC_RAMP1;                              /* 0xa8    ADC VMIC Ramp Control 1 */
X        volatile    uint32_t    VMIC_RAMP1;                               
N        DEV_ADC_VMIC_RAMP1_Field    VMIC_RAMP1_f;
N    };
N    uint32_t    RESERVED3[17];
N    union
N    {
N        __IO    uint32_t    ANA_PD;                                  /* 0xf0    ADC Analog Status */
X        volatile    uint32_t    ANA_PD;                                   
N        DEV_ADC_ANA_PD_Field    ANA_PD_f;
N    };
N}DEV_ADC_RegDef_f;
N/****DEV_ADC end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 37 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_dac_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_dac_field.h" 1
N#ifndef __DEV_DAC_FIELD_H__
N#define __DEV_DAC_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************HNL_IIRn_B0***********************************/
Ntypedef struct{
N
N    __IO uint32_t B0                  : 32;
X    volatile uint32_t B0                  : 32;
N}DEV_DAC_HNL_IIRn_B0_Field;
N/****DEV_DACHNL_IIRn_B0 end****/
N
N/***********************************HNL_IIRn_B1***********************************/
Ntypedef struct{
N
N    __IO uint32_t B1                  : 32;
X    volatile uint32_t B1                  : 32;
N}DEV_DAC_HNL_IIRn_B1_Field;
N/****DEV_DACHNL_IIRn_B1 end****/
N
N/***********************************HNL_IIRn_B2***********************************/
Ntypedef struct{
N
N    __IO uint32_t B2                  : 32;
X    volatile uint32_t B2                  : 32;
N}DEV_DAC_HNL_IIRn_B2_Field;
N/****DEV_DACHNL_IIRn_B2 end****/
N
N/***********************************HNL_IIRn_A1***********************************/
Ntypedef struct{
N
N    __IO uint32_t A1                  : 32;
X    volatile uint32_t A1                  : 32;
N}DEV_DAC_HNL_IIRn_A1_Field;
N/****DEV_DACHNL_IIRn_A1 end****/
N
N/***********************************HNL_IIRn_A2***********************************/
Ntypedef struct{
N
N    __IO uint32_t A2                  : 32;
X    volatile uint32_t A2                  : 32;
N}DEV_DAC_HNL_IIRn_A2_Field;
N/****DEV_DACHNL_IIRn_A2 end****/
N
N/***********************************HNL_IIR7_B0***********************************/
Ntypedef struct{
N
N    __IO uint32_t B0                  : 32;
X    volatile uint32_t B0                  : 32;
N}DEV_DAC_HNL_IIR7_B0_Field;
N/****DEV_DACHNL_IIR7_B0 end****/
N
N/***********************************HNL_IIR7_B1***********************************/
Ntypedef struct{
N
N    __IO uint32_t B1                  : 32;
X    volatile uint32_t B1                  : 32;
N}DEV_DAC_HNL_IIR7_B1_Field;
N/****DEV_DACHNL_IIR7_B1 end****/
N
N/***********************************HNL_IIR7_B2***********************************/
Ntypedef struct{
N
N    __IO uint32_t B2                  : 32;
X    volatile uint32_t B2                  : 32;
N}DEV_DAC_HNL_IIR7_B2_Field;
N/****DEV_DACHNL_IIR7_B2 end****/
N
N/***********************************HNL_IIR7_A1***********************************/
Ntypedef struct{
N
N    __IO uint32_t A1                  : 32;
X    volatile uint32_t A1                  : 32;
N}DEV_DAC_HNL_IIR7_A1_Field;
N/****DEV_DACHNL_IIR7_A1 end****/
N
N/***********************************HNL_IIR7_A2***********************************/
Ntypedef struct{
N
N    __IO uint32_t A2                  : 32;
X    volatile uint32_t A2                  : 32;
N}DEV_DAC_HNL_IIR7_A2_Field;
N/****DEV_DACHNL_IIR7_A2 end****/
N
N/***********************************HNR_IIRn_B0***********************************/
Ntypedef struct{
N
N    __IO uint32_t B0                  : 32;
X    volatile uint32_t B0                  : 32;
N}DEV_DAC_HNR_IIRn_B0_Field;
N/****DEV_DACHNR_IIRn_B0 end****/
N
N/***********************************HNR_IIRn_B1***********************************/
Ntypedef struct{
N
N    __IO uint32_t B1                  : 32;
X    volatile uint32_t B1                  : 32;
N}DEV_DAC_HNR_IIRn_B1_Field;
N/****DEV_DACHNR_IIRn_B1 end****/
N
N/***********************************HNR_IIRn_B2***********************************/
Ntypedef struct{
N
N    __IO uint32_t B2                  : 32;
X    volatile uint32_t B2                  : 32;
N}DEV_DAC_HNR_IIRn_B2_Field;
N/****DEV_DACHNR_IIRn_B2 end****/
N
N/***********************************HNR_IIRn_A1***********************************/
Ntypedef struct{
N
N    __IO uint32_t A1                  : 32;
X    volatile uint32_t A1                  : 32;
N}DEV_DAC_HNR_IIRn_A1_Field;
N/****DEV_DACHNR_IIRn_A1 end****/
N
N/***********************************HNR_IIRn_A2***********************************/
Ntypedef struct{
N
N    __IO uint32_t A2                  : 32;
X    volatile uint32_t A2                  : 32;
N}DEV_DAC_HNR_IIRn_A2_Field;
N/****DEV_DACHNR_IIRn_A2 end****/
N
N/***********************************HNR_IIR7_B0***********************************/
Ntypedef struct{
N
N    __IO uint32_t B0                  : 32;
X    volatile uint32_t B0                  : 32;
N}DEV_DAC_HNR_IIR7_B0_Field;
N/****DEV_DACHNR_IIR7_B0 end****/
N
N/***********************************HNR_IIR7_B1***********************************/
Ntypedef struct{
N
N    __IO uint32_t B1                  : 32;
X    volatile uint32_t B1                  : 32;
N}DEV_DAC_HNR_IIR7_B1_Field;
N/****DEV_DACHNR_IIR7_B1 end****/
N
N/***********************************HNR_IIR7_B2***********************************/
Ntypedef struct{
N
N    __IO uint32_t B2                  : 32;
X    volatile uint32_t B2                  : 32;
N}DEV_DAC_HNR_IIR7_B2_Field;
N/****DEV_DACHNR_IIR7_B2 end****/
N
N/***********************************HNR_IIR7_A1***********************************/
Ntypedef struct{
N
N    __IO uint32_t A1                  : 32;
X    volatile uint32_t A1                  : 32;
N}DEV_DAC_HNR_IIR7_A1_Field;
N/****DEV_DACHNR_IIR7_A1 end****/
N
N/***********************************HNR_IIR7_A2***********************************/
Ntypedef struct{
N
N    __IO uint32_t A2                  : 32;
X    volatile uint32_t A2                  : 32;
N}DEV_DAC_HNR_IIR7_A2_Field;
N/****DEV_DACHNR_IIR7_A2 end****/
N
N/***********************************RC_LMTH***********************************/
Ntypedef struct{
N
N    __IO uint32_t LMTH                : 32;
X    volatile uint32_t LMTH                : 32;
N}DEV_DAC_RC_LMTH_Field;
N/****DEV_DACRC_LMTH end****/
N
N/***********************************RC_SLOP***********************************/
Ntypedef struct{
N
N    __IO uint32_t SLOP                : 32;
X    volatile uint32_t SLOP                : 32;
N}DEV_DAC_RC_SLOP_Field;
N/****DEV_DACRC_SLOP end****/
N
N/***********************************RC_PEAK_AT***********************************/
Ntypedef struct{
N
N    __IO uint32_t ATTACK_TIME         : 32;
X    volatile uint32_t ATTACK_TIME         : 32;
N}DEV_DAC_RC_PEAK_AT_Field;
N/****DEV_DACRC_PEAK_AT end****/
N
N/***********************************RC_PEAK_RT***********************************/
Ntypedef struct{
N
N    __IO uint32_t RELEASE_TIME        : 32;
X    volatile uint32_t RELEASE_TIME        : 32;
N}DEV_DAC_RC_PEAK_RT_Field;
N/****DEV_DACRC_PEAK_RT end****/
N
N/***********************************RC_GAIN_AT***********************************/
Ntypedef struct{
N
N    __IO uint32_t ATTACK_TIME         : 32;
X    volatile uint32_t ATTACK_TIME         : 32;
N}DEV_DAC_RC_GAIN_AT_Field;
N/****DEV_DACRC_GAIN_AT end****/
N
N/***********************************RC_GAIN_RT***********************************/
Ntypedef struct{
N
N    __IO uint32_t RELEASE_TIME        : 32;
X    volatile uint32_t RELEASE_TIME        : 32;
N}DEV_DAC_RC_GAIN_RT_Field;
N/****DEV_DACRC_GAIN_RT end****/
N
N/***********************************SD_COE_B1***********************************/
Ntypedef struct{
N
N    __IO uint32_t B1                  : 32;
X    volatile uint32_t B1                  : 32;
N}DEV_DAC_SD_COE_B1_Field;
N/****DEV_DACSD_COE_B1 end****/
N
N/***********************************SD_COE_B2***********************************/
Ntypedef struct{
N
N    __IO uint32_t B2                  : 32;
X    volatile uint32_t B2                  : 32;
N}DEV_DAC_SD_COE_B2_Field;
N/****DEV_DACSD_COE_B2 end****/
N
N/***********************************SD_COE_A1***********************************/
Ntypedef struct{
N
N    __IO uint32_t A1                  : 32;
X    volatile uint32_t A1                  : 32;
N}DEV_DAC_SD_COE_A1_Field;
N/****DEV_DACSD_COE_A1 end****/
N
N/***********************************SD_COE_A2***********************************/
Ntypedef struct{
N
N    __IO uint32_t A2                  : 32;
X    volatile uint32_t A2                  : 32;
N}DEV_DAC_SD_COE_A2_Field;
N/****DEV_DACSD_COE_A2 end****/
N
N/***********************************SD_COE_A3***********************************/
Ntypedef struct{
N
N    __IO uint32_t A3                  : 32;
X    volatile uint32_t A3                  : 32;
N}DEV_DAC_SD_COE_A3_Field;
N/****DEV_DACSD_COE_A3 end****/
N
N/***********************************CFG0***********************************/
Ntypedef struct{
N
N    __IO uint32_t SIN_SRC             : 1;
X    volatile uint32_t SIN_SRC             : 1;
N    __IO uint32_t DMIC_SRC            : 1;
X    volatile uint32_t DMIC_SRC            : 1;
N    __IO uint32_t IIR_SR_IN           : 2;
X    volatile uint32_t IIR_SR_IN           : 2;
N    __IO uint32_t SRC_SEL             : 1;
X    volatile uint32_t SRC_SEL             : 1;
N    __IO uint32_t DITHER_EN           : 1;
X    volatile uint32_t DITHER_EN           : 1;
N    __IO uint32_t DITHER_SEL          : 2;
X    volatile uint32_t DITHER_SEL          : 2;
N    __IO uint32_t HEMP_TH             : 6;
X    volatile uint32_t HEMP_TH             : 6;
N    __IO uint32_t DACL_INVERSE        : 1;
X    volatile uint32_t DACL_INVERSE        : 1;
N    __IO uint32_t DACR_INVERSE        : 1;
X    volatile uint32_t DACR_INVERSE        : 1;
N    __IO uint32_t CHNL_IIR_SEL        : 8;
X    volatile uint32_t CHNL_IIR_SEL        : 8;
N    __IO uint32_t CHNR_IIR_SEL        : 8;
X    volatile uint32_t CHNR_IIR_SEL        : 8;
N}DEV_DAC_CFG0_Field;
N/****DEV_DACCFG0 end****/
N
N/***********************************CFG1***********************************/
Ntypedef struct{
N
N    __IO uint32_t DACL_MIX_SOURCE     : 4;
X    volatile uint32_t DACL_MIX_SOURCE     : 4;
N    __IO uint32_t DACR_MIX_SOURCE     : 4;
X    volatile uint32_t DACR_MIX_SOURCE     : 4;
N    __IO uint32_t DACL_MIX_GAIN       : 2;
X    volatile uint32_t DACL_MIX_GAIN       : 2;
N    __IO uint32_t DACR_MIX_GAIN       : 2;
X    volatile uint32_t DACR_MIX_GAIN       : 2;
N    __IO uint32_t DBG_IN_EN           : 1;
X    volatile uint32_t DBG_IN_EN           : 1;
N    __IO uint32_t DBG_OUT_EN          : 1;
X    volatile uint32_t DBG_OUT_EN          : 1;
N    __IO uint32_t DBG_CHN_SEL         : 1;
X    volatile uint32_t DBG_CHN_SEL         : 1;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t DAC_VOL_L           : 6;
X    volatile uint32_t DAC_VOL_L           : 6;
N         uint32_t RESERVED1           : 2;
N    __IO uint32_t DAC_VOL_R           : 6;
X    volatile uint32_t DAC_VOL_R           : 6;
N         uint32_t RESERVED2           : 2;
N}DEV_DAC_CFG1_Field;
N/****DEV_DACCFG1 end****/
N
N/***********************************CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t TX_EN               : 1;
X    volatile uint32_t TX_EN               : 1;
N    __IO uint32_t DMA_EN              : 1;
X    volatile uint32_t DMA_EN              : 1;
N    __IO uint32_t TX_FIFO_RST         : 1;
X    volatile uint32_t TX_FIFO_RST         : 1;
N    __IO uint32_t EQ_EN               : 1;
X    volatile uint32_t EQ_EN               : 1;
N    __IO uint32_t ANC_EN              : 1;
X    volatile uint32_t ANC_EN              : 1;
N    __IO uint32_t DRC_EN              : 1;
X    volatile uint32_t DRC_EN              : 1;
N    __IO uint32_t DSD_EN              : 1;
X    volatile uint32_t DSD_EN              : 1;
N         uint32_t RESERVED0           : 25;
N}DEV_DAC_CTL_Field;
N/****DEV_DACCTL end****/
N
N/***********************************IE***********************************/
Ntypedef struct{
N
N    __IO uint32_t TX_IRQ              : 1;
X    volatile uint32_t TX_IRQ              : 1;
N    __IO uint32_t TX_FIFO_OF          : 1;
X    volatile uint32_t TX_FIFO_OF          : 1;
N    __IO uint32_t TX_FIFO_UF          : 1;
X    volatile uint32_t TX_FIFO_UF          : 1;
N         uint32_t RESERVED0           : 29;
N}DEV_DAC_IE_Field;
N/****DEV_DACIE end****/
N
N/***********************************PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t TX_IRQ              : 1;
X    volatile uint32_t TX_IRQ              : 1;
N    __IO uint32_t TX_FIFO_OF          : 1;
X    volatile uint32_t TX_FIFO_OF          : 1;
N    __IO uint32_t TX_FIFO_UF          : 1;
X    volatile uint32_t TX_FIFO_UF          : 1;
N         uint32_t RESERVED0           : 29;
N}DEV_DAC_PD_Field;
N/****DEV_DACPD end****/
N
N/***********************************STA***********************************/
Ntypedef struct{
N
N    __I  uint32_t TX_FIFO_WLVL        : 6;
X    volatile const  uint32_t TX_FIFO_WLVL        : 6;
N         uint32_t RESERVED0           : 2;
N    __I  uint32_t TX_FIFO_HEMP        : 1;
X    volatile const  uint32_t TX_FIFO_HEMP        : 1;
N    __I  uint32_t TX_FIFO_EMPT        : 1;
X    volatile const  uint32_t TX_FIFO_EMPT        : 1;
N    __I  uint32_t TX_FIFO_HFUL        : 1;
X    volatile const  uint32_t TX_FIFO_HFUL        : 1;
N    __I  uint32_t TX_FIFO_FULL        : 1;
X    volatile const  uint32_t TX_FIFO_FULL        : 1;
N         uint32_t RESERVED1           : 20;
N}DEV_DAC_STA_Field;
N/****DEV_DACSTA end****/
N
N/***********************************TBUF***********************************/
Ntypedef struct{
N
N    __O  uint32_t TBUF                : 32;
X    volatile  uint32_t TBUF                : 32;
N}DEV_DAC_TBUF_Field;
N/****DEV_DACTBUF end****/
N
N/***********************************CFG2***********************************/
Ntypedef struct{
N
N    __IO uint32_t CIC_SR_OUT          : 2;
X    volatile uint32_t CIC_SR_OUT          : 2;
N    __IO uint32_t ANA_CLK_DIV         : 2;
X    volatile uint32_t ANA_CLK_DIV         : 2;
N    __IO uint32_t MONO_EN             : 1;
X    volatile uint32_t MONO_EN             : 1;
N    __IO uint32_t DCB_EN              : 1;
X    volatile uint32_t DCB_EN              : 1;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t DSD_FMT_16BIT       : 1;
X    volatile uint32_t DSD_FMT_16BIT       : 1;
N    __IO uint32_t DSD_FMT_BO          : 1;
X    volatile uint32_t DSD_FMT_BO          : 1;
N    __IO uint32_t DSD_FMT_START       : 2;
X    volatile uint32_t DSD_FMT_START       : 2;
N    __IO uint32_t DAC_FMT_16BIT       : 1;
X    volatile uint32_t DAC_FMT_16BIT       : 1;
N    __IO uint32_t DAC_FMT_USEHI       : 1;
X    volatile uint32_t DAC_FMT_USEHI       : 1;
N         uint32_t RESERVED1           : 2;
N    __IO uint32_t DSD_VOL_L           : 6;
X    volatile uint32_t DSD_VOL_L           : 6;
N         uint32_t RESERVED2           : 2;
N    __IO uint32_t DSD_VOL_R           : 6;
X    volatile uint32_t DSD_VOL_R           : 6;
N         uint32_t RESERVED3           : 2;
N}DEV_DAC_CFG2_Field;
N/****DEV_DACCFG2 end****/
N
N/***********************************DCB***********************************/
Ntypedef struct{
N
N    __IO uint32_t DCB                 : 24;
X    volatile uint32_t DCB                 : 24;
N         uint32_t RESERVED0           : 8;
N}DEV_DAC_DCB_Field;
N/****DEV_DACDCB end****/
N
N/***********************************BIST_RM***********************************/
Ntypedef struct{
N
N    __IO uint32_t RAM_RM              : 4;
X    volatile uint32_t RAM_RM              : 4;
N         uint32_t RESERVED0           : 28;
N}DEV_DAC_BIST_RM_Field;
N/****DEV_DACBIST_RM end****/
N
N/***********************************BIST_EN***********************************/
Ntypedef struct{
N
N    __IO uint32_t RAM_EN              : 1;
X    volatile uint32_t RAM_EN              : 1;
N    __IO uint32_t RAM_RME             : 1;
X    volatile uint32_t RAM_RME             : 1;
N    __IO uint32_t RAM_LS              : 1;
X    volatile uint32_t RAM_LS              : 1;
N         uint32_t RESERVED0           : 29;
N}DEV_DAC_BIST_EN_Field;
N/****DEV_DACBIST_EN end****/
N
N/***********************************BIST_DONE***********************************/
Ntypedef struct{
N
N    __I  uint32_t RAM_DONE            : 1;
X    volatile const  uint32_t RAM_DONE            : 1;
N         uint32_t RESERVED0           : 31;
N}DEV_DAC_BIST_DONE_Field;
N/****DEV_DACBIST_DONE end****/
N
N/***********************************BIST_FAIL***********************************/
Ntypedef struct{
N
N    __I  uint32_t RAM_FAIL            : 1;
X    volatile const  uint32_t RAM_FAIL            : 1;
N         uint32_t RESERVED0           : 31;
N}DEV_DAC_BIST_FAIL_Field;
N/****DEV_DACBIST_FAIL end****/
N
N/***********************************DA_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t DAC0_EN             : 1;
X    volatile uint32_t DAC0_EN             : 1;
N    __IO uint32_t DAC1_EN             : 1;
X    volatile uint32_t DAC1_EN             : 1;
N    __IO uint32_t DAC_CHOP_EN         : 1;
X    volatile uint32_t DAC_CHOP_EN         : 1;
N    __IO uint32_t DAC_GBW_SEL         : 1;
X    volatile uint32_t DAC_GBW_SEL         : 1;
N    __IO uint32_t DAC_CHOP_DIV        : 2;
X    volatile uint32_t DAC_CHOP_DIV        : 2;
N    __IO uint32_t DAC_IBIAS_CTRL      : 2;
X    volatile uint32_t DAC_IBIAS_CTRL      : 2;
N    __IO uint32_t DAC_NONOV           : 2;
X    volatile uint32_t DAC_NONOV           : 2;
N    __IO uint32_t DAC_OPFB_PD         : 1;
X    volatile uint32_t DAC_OPFB_PD         : 1;
N    __IO uint32_t DAC_CLK_INVSEL      : 1;
X    volatile uint32_t DAC_CLK_INVSEL      : 1;
N    __IO uint32_t DAC_CLK_DLY         : 2;
X    volatile uint32_t DAC_CLK_DLY         : 2;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t LO_VCMI_BYP         : 1;
X    volatile uint32_t LO_VCMI_BYP         : 1;
N    __IO uint32_t LO_VCMI_CHOP        : 1;
X    volatile uint32_t LO_VCMI_CHOP        : 1;
N    __IO uint32_t DAC_RSVD_11         : 6;
X    volatile uint32_t DAC_RSVD_11         : 6;
N         uint32_t RESERVED1           : 8;
N}DEV_DAC_DA_CTL_Field;
N/****DEV_DACDA_CTL end****/
N
N/***********************************CP_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t CP_EN               : 1;
X    volatile uint32_t CP_EN               : 1;
N    __IO uint32_t CP_HS_EN            : 1;
X    volatile uint32_t CP_HS_EN            : 1;
N    __IO uint32_t CP_CLK_SEL          : 1;
X    volatile uint32_t CP_CLK_SEL          : 1;
N    __IO uint32_t CP_CLK_INV_SEL      : 1;
X    volatile uint32_t CP_CLK_INV_SEL      : 1;
N    __IO uint32_t CP_CLK_DIV          : 2;
X    volatile uint32_t CP_CLK_DIV          : 2;
N    __IO uint32_t CP_CLK_NONOV        : 2;
X    volatile uint32_t CP_CLK_NONOV        : 2;
N    __IO uint32_t CP_CLK_DLY          : 2;
X    volatile uint32_t CP_CLK_DLY          : 2;
N         uint32_t RESERVED0           : 22;
N}DEV_DAC_CP_CTL_Field;
N/****DEV_DACCP_CTL end****/
N
N/***********************************HP_CTL0***********************************/
Ntypedef struct{
N
N    __IO uint32_t HSPA0_EN            : 1;
X    volatile uint32_t HSPA0_EN            : 1;
N    __IO uint32_t HSPA1_EN            : 1;
X    volatile uint32_t HSPA1_EN            : 1;
N    __IO uint32_t HSPA0_DAC0_EN       : 1;
X    volatile uint32_t HSPA0_DAC0_EN       : 1;
N    __IO uint32_t HSPA0_DAC1_EN       : 1;
X    volatile uint32_t HSPA0_DAC1_EN       : 1;
N    __IO uint32_t HSPA0_MIX0_EN       : 1;
X    volatile uint32_t HSPA0_MIX0_EN       : 1;
N    __IO uint32_t HSPA0_MIX1_EN       : 1;
X    volatile uint32_t HSPA0_MIX1_EN       : 1;
N    __IO uint32_t HSPA1_DAC0_EN       : 1;
X    volatile uint32_t HSPA1_DAC0_EN       : 1;
N    __IO uint32_t HSPA1_DAC1_EN       : 1;
X    volatile uint32_t HSPA1_DAC1_EN       : 1;
N    __IO uint32_t HSPA1_MIX0_EN       : 1;
X    volatile uint32_t HSPA1_MIX0_EN       : 1;
N    __IO uint32_t HSPA1_MIX1_EN       : 1;
X    volatile uint32_t HSPA1_MIX1_EN       : 1;
N    __IO uint32_t HSPA_IBGM1_CTL      : 2;
X    volatile uint32_t HSPA_IBGM1_CTL      : 2;
N    __IO uint32_t HSPA_IBGM2_CTL      : 2;
X    volatile uint32_t HSPA_IBGM2_CTL      : 2;
N    __IO uint32_t HSPA_IBGM3_CTL      : 2;
X    volatile uint32_t HSPA_IBGM3_CTL      : 2;
N    __IO uint32_t HSPA_IBIAS_CTL      : 2;
X    volatile uint32_t HSPA_IBIAS_CTL      : 2;
N    __IO uint32_t HSCAL0_EN           : 1;
X    volatile uint32_t HSCAL0_EN           : 1;
N    __IO uint32_t HSCAL1_EN           : 1;
X    volatile uint32_t HSCAL1_EN           : 1;
N    __IO uint32_t GMIC0_EN            : 1;
X    volatile uint32_t GMIC0_EN            : 1;
N    __IO uint32_t GMIC1_EN            : 1;
X    volatile uint32_t GMIC1_EN            : 1;
N    __IO uint32_t HPFBSW0_EN          : 1;
X    volatile uint32_t HPFBSW0_EN          : 1;
N    __IO uint32_t HPFBSW1_EN          : 1;
X    volatile uint32_t HPFBSW1_EN          : 1;
N    __IO uint32_t GMIC0_S78_EN        : 1;
X    volatile uint32_t GMIC0_S78_EN        : 1;
N    __IO uint32_t GMIC1_S78_EN        : 1;
X    volatile uint32_t GMIC1_S78_EN        : 1;
N         uint32_t RESERVED0           : 6;
N}DEV_DAC_HP_CTL0_Field;
N/****DEV_DACHP_CTL0 end****/
N
N/***********************************LO_CTL0***********************************/
Ntypedef struct{
N
N    __IO uint32_t LO0_EN              : 1;
X    volatile uint32_t LO0_EN              : 1;
N    __IO uint32_t LO0_DIFF_EN         : 1;
X    volatile uint32_t LO0_DIFF_EN         : 1;
N    __IO uint32_t LO1_EN              : 1;
X    volatile uint32_t LO1_EN              : 1;
N    __IO uint32_t LO1_DIFF_EN         : 1;
X    volatile uint32_t LO1_DIFF_EN         : 1;
N    __IO uint32_t LO0_DAC0_EN         : 1;
X    volatile uint32_t LO0_DAC0_EN         : 1;
N    __IO uint32_t LO0_DAC1_EN         : 1;
X    volatile uint32_t LO0_DAC1_EN         : 1;
N    __IO uint32_t LO0_MIX0_EN         : 1;
X    volatile uint32_t LO0_MIX0_EN         : 1;
N    __IO uint32_t LO0_MIX1_EN         : 1;
X    volatile uint32_t LO0_MIX1_EN         : 1;
N    __IO uint32_t LO1_DAC0_EN         : 1;
X    volatile uint32_t LO1_DAC0_EN         : 1;
N    __IO uint32_t LO1_DAC1_EN         : 1;
X    volatile uint32_t LO1_DAC1_EN         : 1;
N    __IO uint32_t LO1_MIX0_EN         : 1;
X    volatile uint32_t LO1_MIX0_EN         : 1;
N    __IO uint32_t LO1_MIX1_EN         : 1;
X    volatile uint32_t LO1_MIX1_EN         : 1;
N    __IO uint32_t LO_CHOP_EN          : 1;
X    volatile uint32_t LO_CHOP_EN          : 1;
N    __IO uint32_t LO_FASTSTUP         : 1;
X    volatile uint32_t LO_FASTSTUP         : 1;
N    __IO uint32_t LO_VCMSTUP_CTL      : 2;
X    volatile uint32_t LO_VCMSTUP_CTL      : 2;
N    __IO uint32_t LO_PD_STUP          : 1;
X    volatile uint32_t LO_PD_STUP          : 1;
N    __IO uint32_t LO_IBIAS_CTL        : 2;
X    volatile uint32_t LO_IBIAS_CTL        : 2;
N         uint32_t RESERVED0           : 13;
N}DEV_DAC_LO_CTL0_Field;
N/****DEV_DACLO_CTL0 end****/
N
N/***********************************LO_CTL1***********************************/
Ntypedef struct{
N
N    __IO uint32_t LO0_RAMP_UP_EN      : 1;
X    volatile uint32_t LO0_RAMP_UP_EN      : 1;
N    __IO uint32_t LO0_RAMP_DN_EN      : 1;
X    volatile uint32_t LO0_RAMP_DN_EN      : 1;
N    __IO uint32_t LO1_RAMP_UP_EN      : 1;
X    volatile uint32_t LO1_RAMP_UP_EN      : 1;
N    __IO uint32_t LO1_RAMP_DN_EN      : 1;
X    volatile uint32_t LO1_RAMP_DN_EN      : 1;
N         uint32_t RESERVED0           : 12;
N    __IO uint32_t RAMP_TIME           : 16;
X    volatile uint32_t RAMP_TIME           : 16;
N}DEV_DAC_LO_CTL1_Field;
N/****DEV_DACLO_CTL1 end****/
N
N/***********************************LO_CTL2***********************************/
Ntypedef struct{
N
N    __IO uint32_t HIGH_NUM            : 16;
X    volatile uint32_t HIGH_NUM            : 16;
N    __IO uint32_t TOTAL_NUM           : 16;
X    volatile uint32_t TOTAL_NUM           : 16;
N}DEV_DAC_LO_CTL2_Field;
N/****DEV_DACLO_CTL2 end****/
N
N/***********************************HP_CTL1***********************************/
Ntypedef struct{
N
N    __IO uint32_t DIV_CNT             : 8;
X    volatile uint32_t DIV_CNT             : 8;
N         uint32_t RESERVED0           : 24;
N}DEV_DAC_HP_CTL1_Field;
N/****DEV_DACHP_CTL1 end****/
N
N/***********************************CHNL_IIR register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    B0;                                      /* 0x0    Left. Channel IIR0 Coefficient B0 */
X        volatile    uint32_t    B0;                                       
N        DEV_DAC_HNL_IIRn_B0_Field    B0_f;
N    };
N    union
N    {
N        __IO    uint32_t    B1;                                      /* 0x4    Left. Channel IIR0 Coefficient B1 */
X        volatile    uint32_t    B1;                                       
N        DEV_DAC_HNL_IIRn_B1_Field    B1_f;
N    };
N    union
N    {
N        __IO    uint32_t    B2;                                      /* 0x8    Left. Channel IIR0 Coefficient B2 */
X        volatile    uint32_t    B2;                                       
N        DEV_DAC_HNL_IIRn_B2_Field    B2_f;
N    };
N    union
N    {
N        __IO    uint32_t    A1;                                      /* 0xc    Left. Channel IIR0 Coefficient A1 */
X        volatile    uint32_t    A1;                                       
N        DEV_DAC_HNL_IIRn_A1_Field    A1_f;
N    };
N    union
N    {
N        __IO    uint32_t    A2;                                      /* 0x10    Left. Channel IIR0 Coefficient A2 */
X        volatile    uint32_t    A2;                                       
N        DEV_DAC_HNL_IIRn_A2_Field    A2_f;
N    };
N    uint32_t    RESERVED0[59];
N}CHNL_IIR_RegDef_f;
N/****CHNL_IIR end****/
N
N/***********************************CHNR_IIR register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    B0;                                      /* 0x800    Left. Channel IIR2 Coefficient B0 */
X        volatile    uint32_t    B0;                                       
N        DEV_DAC_HNR_IIRn_B0_Field    B0_f;
N    };
N    union
N    {
N        __IO    uint32_t    B1;                                      /* 0x804    Left. Channel IIR2 Coefficient B1 */
X        volatile    uint32_t    B1;                                       
N        DEV_DAC_HNR_IIRn_B1_Field    B1_f;
N    };
N    union
N    {
N        __IO    uint32_t    B2;                                      /* 0x808    Left. Channel IIR2 Coefficient B2 */
X        volatile    uint32_t    B2;                                       
N        DEV_DAC_HNR_IIRn_B2_Field    B2_f;
N    };
N    union
N    {
N        __IO    uint32_t    A1;                                      /* 0x80c    Left. Channel IIR2 Coefficient A1 */
X        volatile    uint32_t    A1;                                       
N        DEV_DAC_HNR_IIRn_A1_Field    A1_f;
N    };
N    union
N    {
N        __IO    uint32_t    A2;                                      /* 0x810    Left. Channel IIR2 Coefficient A2 */
X        volatile    uint32_t    A2;                                       
N        DEV_DAC_HNR_IIRn_A2_Field    A2_f;
N    };
N    uint32_t    RESERVED0[59];
N}CHNR_IIR_RegDef_f;
N/****CHNR_IIR end****/
N
N/***********************************DEV_DAC register***********************************/
Ntypedef struct{
N
N    union
N    {
N        CHNL_IIR_RegDef_f    CHNL_IIR[7];                             /* 0x0    Left. Channel IIR0 Coefficient B0 */
N    };
N    union
N    {
N        __IO    uint32_t    CHNL_IIR7_B0;                            /* 0x700    Left. Channel IIR2 Coefficient B2 */
X        volatile    uint32_t    CHNL_IIR7_B0;                             
N        DEV_DAC_HNL_IIR7_B0_Field    CHNL_IIR7_B0_f;
N    };
N    union
N    {
N        __IO    uint32_t    CHNL_IIR7_B1;                            /* 0x704    Left. Channel IIR2 Coefficient A2 */
X        volatile    uint32_t    CHNL_IIR7_B1;                             
N        DEV_DAC_HNL_IIR7_B1_Field    CHNL_IIR7_B1_f;
N    };
N    union
N    {
N        __IO    uint32_t    CHNL_IIR7_B2;                            /* 0x708    Left. Channel IIR3 Coefficient B1 */
X        volatile    uint32_t    CHNL_IIR7_B2;                             
N        DEV_DAC_HNL_IIR7_B2_Field    CHNL_IIR7_B2_f;
N    };
N    union
N    {
N        __IO    uint32_t    CHNL_IIR7_A1;                            /* 0x70c    Left. Channel IIR3 Coefficient A1 */
X        volatile    uint32_t    CHNL_IIR7_A1;                             
N        DEV_DAC_HNL_IIR7_A1_Field    CHNL_IIR7_A1_f;
N    };
N    union
N    {
N        __IO    uint32_t    CHNL_IIR7_A2;                            /* 0x710    Left. Channel IIR3 Coefficient A2 */
X        volatile    uint32_t    CHNL_IIR7_A2;                             
N        DEV_DAC_HNL_IIR7_A2_Field    CHNL_IIR7_A2_f;
N    };
N    uint32_t    RESERVED0[59];
N    union
N    {
N        CHNR_IIR_RegDef_f    CHNR_IIR[7];                             /* 0x800    Left. Channel IIR4 Coefficient B0 */
N    };
N    union
N    {
N        __IO    uint32_t    CHNR_IIR7_B0;                            /* 0xf00    Left. Channel IIR5 Coefficient B2 */
X        volatile    uint32_t    CHNR_IIR7_B0;                             
N        DEV_DAC_HNR_IIR7_B0_Field    CHNR_IIR7_B0_f;
N    };
N    union
N    {
N        __IO    uint32_t    CHNR_IIR7_B1;                            /* 0xf04    Left. Channel IIR5 Coefficient A1 */
X        volatile    uint32_t    CHNR_IIR7_B1;                             
N        DEV_DAC_HNR_IIR7_B1_Field    CHNR_IIR7_B1_f;
N    };
N    union
N    {
N        __IO    uint32_t    CHNR_IIR7_B2;                            /* 0xf08    Left. Channel IIR5 Coefficient A2 */
X        volatile    uint32_t    CHNR_IIR7_B2;                             
N        DEV_DAC_HNR_IIR7_B2_Field    CHNR_IIR7_B2_f;
N    };
N    union
N    {
N        __IO    uint32_t    CHNR_IIR7_A1;                            /* 0xf0c    Left. Channel IIR6 Coefficient B0 */
X        volatile    uint32_t    CHNR_IIR7_A1;                             
N        DEV_DAC_HNR_IIR7_A1_Field    CHNR_IIR7_A1_f;
N    };
N    union
N    {
N        __IO    uint32_t    CHNR_IIR7_A2;                            /* 0xf10    Left. Channel IIR6 Coefficient B1 */
X        volatile    uint32_t    CHNR_IIR7_A2;                             
N        DEV_DAC_HNR_IIR7_A2_Field    CHNR_IIR7_A2_f;
N    };
N    uint32_t    RESERVED1[28];
N    union
N    {
N        __IO    uint32_t    DRC_LMTH;                                /* 0xf84    Left. Channel IIR6 Coefficient B2 */
X        volatile    uint32_t    DRC_LMTH;                                 
N        DEV_DAC_RC_LMTH_Field    DRC_LMTH_f;
N    };
N    union
N    {
N        __IO    uint32_t    DRC_SLOP;                                /* 0xf88    Left. Channel IIR6 Coefficient A1 */
X        volatile    uint32_t    DRC_SLOP;                                 
N        DEV_DAC_RC_SLOP_Field    DRC_SLOP_f;
N    };
N    union
N    {
N        __IO    uint32_t    DRC_PEAK_AT;                             /* 0xf8c    Left. Channel IIR6 Coefficient A2 */
X        volatile    uint32_t    DRC_PEAK_AT;                              
N        DEV_DAC_RC_PEAK_AT_Field    DRC_PEAK_AT_f;
N    };
N    union
N    {
N        __IO    uint32_t    DRC_PEAK_RT;                             /* 0xf90    Left. Channel IIR7 Coefficient B0 */
X        volatile    uint32_t    DRC_PEAK_RT;                              
N        DEV_DAC_RC_PEAK_RT_Field    DRC_PEAK_RT_f;
N    };
N    union
N    {
N        __IO    uint32_t    DRC_GAIN_AT;                             /* 0xf94    Left. Channel IIR7 Coefficient B1 */
X        volatile    uint32_t    DRC_GAIN_AT;                              
N        DEV_DAC_RC_GAIN_AT_Field    DRC_GAIN_AT_f;
N    };
N    union
N    {
N        __IO    uint32_t    DRC_GAIN_RT;                             /* 0xf98    Left. Channel IIR7 Coefficient B2 */
X        volatile    uint32_t    DRC_GAIN_RT;                              
N        DEV_DAC_RC_GAIN_RT_Field    DRC_GAIN_RT_f;
N    };
N    uint32_t    RESERVED2[9];
N    union
N    {
N        __IO    uint32_t    DSD_COE_B1;                              /* 0xfc0    Left. Channel IIR7 Coefficient A1 */
X        volatile    uint32_t    DSD_COE_B1;                               
N        DEV_DAC_SD_COE_B1_Field    DSD_COE_B1_f;
N    };
N    union
N    {
N        __IO    uint32_t    DSD_COE_B2;                              /* 0xfc4    Left. Channel IIR7 Coefficient A2 */
X        volatile    uint32_t    DSD_COE_B2;                               
N        DEV_DAC_SD_COE_B2_Field    DSD_COE_B2_f;
N    };
N    union
N    {
N        __IO    uint32_t    DSD_COE_A1;                              /* 0xfc8    Right Channel IIR0 Coefficient B0 */
X        volatile    uint32_t    DSD_COE_A1;                               
N        DEV_DAC_SD_COE_A1_Field    DSD_COE_A1_f;
N    };
N    union
N    {
N        __IO    uint32_t    DSD_COE_A2;                              /* 0xfcc    Right Channel IIR0 Coefficient B1 */
X        volatile    uint32_t    DSD_COE_A2;                               
N        DEV_DAC_SD_COE_A2_Field    DSD_COE_A2_f;
N    };
N    union
N    {
N        __IO    uint32_t    DSD_COE_A3;                              /* 0xfd0    Right Channel IIR0 Coefficient B2 */
X        volatile    uint32_t    DSD_COE_A3;                               
N        DEV_DAC_SD_COE_A3_Field    DSD_COE_A3_f;
N    };
N    uint32_t    RESERVED3[11];
N    union
N    {
N        __IO    uint32_t    CFG0;                                    /* 0x1000    Right Channel IIR0 Coefficient A1 */
X        volatile    uint32_t    CFG0;                                     
N        DEV_DAC_CFG0_Field    CFG0_f;
N    };
N    union
N    {
N        __IO    uint32_t    CFG1;                                    /* 0x1004    Right Channel IIR0 Coefficient A2 */
X        volatile    uint32_t    CFG1;                                     
N        DEV_DAC_CFG1_Field    CFG1_f;
N    };
N    union
N    {
N        __IO    uint32_t    CTL;                                     /* 0x1008    Right Channel IIR1 Coefficient B0 */
X        volatile    uint32_t    CTL;                                      
N        DEV_DAC_CTL_Field    CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    IE;                                      /* 0x100c    Right Channel IIR1 Coefficient B1 */
X        volatile    uint32_t    IE;                                       
N        DEV_DAC_IE_Field    IE_f;
N    };
N    union
N    {
N        __IO    uint32_t    PD;                                      /* 0x1010    Right Channel IIR1 Coefficient B2 */
X        volatile    uint32_t    PD;                                       
N        DEV_DAC_PD_Field    PD_f;
N    };
N    union
N    {
N        __I     uint32_t    STA;                                     /* 0x1014    Right Channel IIR1 Coefficient A1 */
X        volatile const     uint32_t    STA;                                      
N        DEV_DAC_STA_Field    STA_f;
N    };
N    union
N    {
N        __O     uint32_t    TBUF;                                    /* 0x1018    Right Channel IIR1 Coefficient A2 */
X        volatile     uint32_t    TBUF;                                     
N        DEV_DAC_TBUF_Field    TBUF_f;
N    };
N    union
N    {
N        __IO    uint32_t    CFG2;                                    /* 0x101c    Right Channel IIR2 Coefficient B0 */
X        volatile    uint32_t    CFG2;                                     
N        DEV_DAC_CFG2_Field    CFG2_f;
N    };
N    union
N    {
N        __IO    uint32_t    DCB;                                     /* 0x1020    Right Channel IIR2 Coefficient B1 */
X        volatile    uint32_t    DCB;                                      
N        DEV_DAC_DCB_Field    DCB_f;
N    };
N    uint32_t    RESERVED4[1015];
N    union
N    {
N        __IO    uint32_t    BIST_RM;                                 /* 0x2000    Right Channel IIR2 Coefficient B2 */
X        volatile    uint32_t    BIST_RM;                                  
N        DEV_DAC_BIST_RM_Field    BIST_RM_f;
N    };
N    union
N    {
N        __IO    uint32_t    BIST_EN;                                 /* 0x2004    Right Channel IIR2 Coefficient A1 */
X        volatile    uint32_t    BIST_EN;                                  
N        DEV_DAC_BIST_EN_Field    BIST_EN_f;
N    };
N    union
N    {
N        __I     uint32_t    BIST_DONE;                               /* 0x2008    Right Channel IIR2 Coefficient A2 */
X        volatile const     uint32_t    BIST_DONE;                                
N        DEV_DAC_BIST_DONE_Field    BIST_DONE_f;
N    };
N    union
N    {
N        __I     uint32_t    BIST_FAIL;                               /* 0x200c    Right Channel IIR3 Coefficient B0 */
X        volatile const     uint32_t    BIST_FAIL;                                
N        DEV_DAC_BIST_FAIL_Field    BIST_FAIL_f;
N    };
N    uint32_t    RESERVED5[6140];
N    union
N    {
N        __IO    uint32_t    DA_CTL;                                  /* 0x8000    Right Channel IIR3 Coefficient B1 */
X        volatile    uint32_t    DA_CTL;                                   
N        DEV_DAC_DA_CTL_Field    DA_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    CP_CTL;                                  /* 0x8004    Right Channel IIR3 Coefficient B2 */
X        volatile    uint32_t    CP_CTL;                                   
N        DEV_DAC_CP_CTL_Field    CP_CTL_f;
N    };
N    union
N    {
N        __IO    uint32_t    HP_CTL0;                                 /* 0x8008    Right Channel IIR3 Coefficient A1 */
X        volatile    uint32_t    HP_CTL0;                                  
N        DEV_DAC_HP_CTL0_Field    HP_CTL0_f;
N    };
N    union
N    {
N        __IO    uint32_t    LO_CTL0;                                 /* 0x800c    Right Channel IIR3 Coefficient A2 */
X        volatile    uint32_t    LO_CTL0;                                  
N        DEV_DAC_LO_CTL0_Field    LO_CTL0_f;
N    };
N    union
N    {
N        __IO    uint32_t    LO_CTL1;                                 /* 0x8010    Right Channel IIR4 Coefficient B0 */
X        volatile    uint32_t    LO_CTL1;                                  
N        DEV_DAC_LO_CTL1_Field    LO_CTL1_f;
N    };
N    union
N    {
N        __IO    uint32_t    LO_CTL2;                                 /* 0x8014    Right Channel IIR4 Coefficient B1 */
X        volatile    uint32_t    LO_CTL2;                                  
N        DEV_DAC_LO_CTL2_Field    LO_CTL2_f;
N    };
N    union
N    {
N        __IO    uint32_t    HP_CTL1;                                 /* 0x8018    Right Channel IIR4 Coefficient B2 */
X        volatile    uint32_t    HP_CTL1;                                  
N        DEV_DAC_HP_CTL1_Field    HP_CTL1_f;
N    };
N}DEV_DAC_RegDef_f;
N/****DEV_DAC end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 38 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_src_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_src_field.h" 1
N#ifndef __DEV_SRC_FIELD_H__
N#define __DEV_SRC_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CHNn_LSR***********************************/
Ntypedef struct{
N
N    __IO uint32_t LSR                 : 32;
X    volatile uint32_t LSR                 : 32;
N}DEV_SRC_CHNn_LSR_Field;
N/****DEV_SRCCHNn_LSR end****/
N
N/***********************************CHNn_USR***********************************/
Ntypedef struct{
N
N    __IO uint32_t USR                 : 32;
X    volatile uint32_t USR                 : 32;
N}DEV_SRC_CHNn_USR_Field;
N/****DEV_SRCCHNn_USR end****/
N
N/***********************************CHNn_LTH***********************************/
Ntypedef struct{
N
N    __IO uint32_t LTH                 : 12;
X    volatile uint32_t LTH                 : 12;
N         uint32_t RESERVED0           : 20;
N}DEV_SRC_CHNn_LTH_Field;
N/****DEV_SRCCHNn_LTH end****/
N
N/***********************************CHNn_UTH***********************************/
Ntypedef struct{
N
N    __IO uint32_t UTH                 : 12;
X    volatile uint32_t UTH                 : 12;
N         uint32_t RESERVED0           : 20;
N}DEV_SRC_CHNn_UTH_Field;
N/****DEV_SRCCHNn_UTH end****/
N
N/***********************************CHNn_CFG***********************************/
Ntypedef struct{
N
N    __IO uint32_t Enable              : 1;
X    volatile uint32_t Enable              : 1;
N    __IO uint32_t MODE_SEL            : 1;
X    volatile uint32_t MODE_SEL            : 1;
N    __IO uint32_t CBUF_EN             : 1;
X    volatile uint32_t CBUF_EN             : 1;
N    __IO uint32_t MONO                : 1;
X    volatile uint32_t MONO                : 1;
N    __IO uint32_t TX_DEV_SEL          : 3;
X    volatile uint32_t TX_DEV_SEL          : 3;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t RX_DEV_SEL          : 3;
X    volatile uint32_t RX_DEV_SEL          : 3;
N         uint32_t RESERVED1           : 1;
N    __IO uint32_t WBUF_HALF_LVL       : 2;
X    volatile uint32_t WBUF_HALF_LVL       : 2;
N         uint32_t RESERVED2           : 2;
N    __IO uint32_t SHIFT_SEL0          : 2;
X    volatile uint32_t SHIFT_SEL0          : 2;
N    __IO uint32_t SHIFT_SEL1          : 2;
X    volatile uint32_t SHIFT_SEL1          : 2;
N    __IO uint32_t SHIFT_SEL2          : 2;
X    volatile uint32_t SHIFT_SEL2          : 2;
N    __IO uint32_t SHIFT_SEL3          : 2;
X    volatile uint32_t SHIFT_SEL3          : 2;
N    __IO uint32_t INPUT_FMT           : 2;
X    volatile uint32_t INPUT_FMT           : 2;
N    __IO uint32_t OUTPUT_FMT          : 2;
X    volatile uint32_t OUTPUT_FMT          : 2;
N         uint32_t RESERVED3           : 4;
N}DEV_SRC_CHNn_CFG_Field;
N/****DEV_SRCCHNn_CFG end****/
N
N/***********************************CHNn_IE***********************************/
Ntypedef struct{
N
N    __IO uint32_t TX_FIFO_HEMP        : 1;
X    volatile uint32_t TX_FIFO_HEMP        : 1;
N    __IO uint32_t RX_FIFO_HFUL        : 1;
X    volatile uint32_t RX_FIFO_HFUL        : 1;
N    __IO uint32_t TX_FIFO_OF          : 1;
X    volatile uint32_t TX_FIFO_OF          : 1;
N    __IO uint32_t RX_FIFO_UF          : 1;
X    volatile uint32_t RX_FIFO_UF          : 1;
N    __IO uint32_t WBUF_AF             : 1;
X    volatile uint32_t WBUF_AF             : 1;
N    __IO uint32_t WBUF_AE             : 1;
X    volatile uint32_t WBUF_AE             : 1;
N         uint32_t RESERVED0           : 26;
N}DEV_SRC_CHNn_IE_Field;
N/****DEV_SRCCHNn_IE end****/
N
N/***********************************CHNn_PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t TX_FIFO_HEMP        : 1;
X    volatile uint32_t TX_FIFO_HEMP        : 1;
N    __IO uint32_t RX_FIFO_HFUL        : 1;
X    volatile uint32_t RX_FIFO_HFUL        : 1;
N    __IO uint32_t TX_FIFO_OF          : 1;
X    volatile uint32_t TX_FIFO_OF          : 1;
N    __IO uint32_t RX_FIFO_UF          : 1;
X    volatile uint32_t RX_FIFO_UF          : 1;
N    __IO uint32_t WBUF_AF             : 1;
X    volatile uint32_t WBUF_AF             : 1;
N    __IO uint32_t WBUF_AE             : 1;
X    volatile uint32_t WBUF_AE             : 1;
N         uint32_t RESERVED0           : 26;
N}DEV_SRC_CHNn_PD_Field;
N/****DEV_SRCCHNn_PD end****/
N
N/***********************************CHNn_STA***********************************/
Ntypedef struct{
N
N    __I  uint32_t WBUF_WLVL           : 12;
X    volatile const  uint32_t WBUF_WLVL           : 12;
N    __I  uint32_t WBUF_AF             : 1;
X    volatile const  uint32_t WBUF_AF             : 1;
N    __I  uint32_t WBUF_AE             : 1;
X    volatile const  uint32_t WBUF_AE             : 1;
N         uint32_t RESERVED0           : 2;
N    __I  uint32_t TX_FIFO_WLVL        : 3;
X    volatile const  uint32_t TX_FIFO_WLVL        : 3;
N         uint32_t RESERVED1           : 1;
N    __I  uint32_t RX_FIFO_RLVL        : 3;
X    volatile const  uint32_t RX_FIFO_RLVL        : 3;
N         uint32_t RESERVED2           : 1;
N         uint32_t RESERVED3           : 8;
N}DEV_SRC_CHNn_STA_Field;
N/****DEV_SRCCHNn_STA end****/
N
N/***********************************CHNn_CBUF***********************************/
Ntypedef struct{
N
N         uint32_t RESERVED0           : 8;
N    __O  uint32_t CBUF                : 24;
X    volatile  uint32_t CBUF                : 24;
N}DEV_SRC_CHNn_CBUF_Field;
N/****DEV_SRCCHNn_CBUF end****/
N
N/***********************************CHNn_WBUF***********************************/
Ntypedef struct{
N
N    __O  uint32_t WBUF                : 32;
X    volatile  uint32_t WBUF                : 32;
N}DEV_SRC_CHNn_WBUF_Field;
N/****DEV_SRCCHNn_WBUF end****/
N
N/***********************************CHNn_RBUF***********************************/
Ntypedef struct{
N
N    __I  uint32_t RBUF                : 32;
X    volatile const  uint32_t RBUF                : 32;
N}DEV_SRC_CHNn_RBUF_Field;
N/****DEV_SRCCHNn_RBUF end****/
N
N/***********************************BIST_RM***********************************/
Ntypedef struct{
N
N    __IO uint32_t CHN0_CBUF_RM        : 4;
X    volatile uint32_t CHN0_CBUF_RM        : 4;
N    __IO uint32_t CHN0_RBUF_RM        : 4;
X    volatile uint32_t CHN0_RBUF_RM        : 4;
N    __IO uint32_t CHN0_FBUF_RM        : 4;
X    volatile uint32_t CHN0_FBUF_RM        : 4;
N         uint32_t RESERVED0           : 4;
N    __IO uint32_t CHN1_CBUF_RM        : 4;
X    volatile uint32_t CHN1_CBUF_RM        : 4;
N    __IO uint32_t CHN1_RBUF_RM        : 4;
X    volatile uint32_t CHN1_RBUF_RM        : 4;
N    __IO uint32_t CHN1_FBUF_RM        : 4;
X    volatile uint32_t CHN1_FBUF_RM        : 4;
N         uint32_t RESERVED1           : 4;
N}DEV_SRC_BIST_RM_Field;
N/****DEV_SRCBIST_RM end****/
N
N/***********************************BIST_EN***********************************/
Ntypedef struct{
N
N    __IO uint32_t CHN0_CBUF_EN        : 1;
X    volatile uint32_t CHN0_CBUF_EN        : 1;
N    __IO uint32_t CHN0_CBUF_RME       : 1;
X    volatile uint32_t CHN0_CBUF_RME       : 1;
N    __IO uint32_t CHN0_WBUF_EN        : 1;
X    volatile uint32_t CHN0_WBUF_EN        : 1;
N    __IO uint32_t CHN0_WBUF_RME       : 1;
X    volatile uint32_t CHN0_WBUF_RME       : 1;
N    __IO uint32_t CHN0_FBUF_EN        : 1;
X    volatile uint32_t CHN0_FBUF_EN        : 1;
N    __IO uint32_t CHN0_FBUF_RME       : 1;
X    volatile uint32_t CHN0_FBUF_RME       : 1;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t CHN0_CBUF_LS        : 1;
X    volatile uint32_t CHN0_CBUF_LS        : 1;
N    __IO uint32_t CHN0_WBUF_LS        : 1;
X    volatile uint32_t CHN0_WBUF_LS        : 1;
N    __IO uint32_t CHN0_FBUF_LS        : 1;
X    volatile uint32_t CHN0_FBUF_LS        : 1;
N         uint32_t RESERVED1           : 5;
N    __IO uint32_t CHN1_CBUF_EN        : 1;
X    volatile uint32_t CHN1_CBUF_EN        : 1;
N    __IO uint32_t CHN1_CBUF_RME       : 1;
X    volatile uint32_t CHN1_CBUF_RME       : 1;
N    __IO uint32_t CHN1_RBUF_EN        : 1;
X    volatile uint32_t CHN1_RBUF_EN        : 1;
N    __IO uint32_t CHN1_RBUF_RME       : 1;
X    volatile uint32_t CHN1_RBUF_RME       : 1;
N    __IO uint32_t CHN1_FBUF_EN        : 1;
X    volatile uint32_t CHN1_FBUF_EN        : 1;
N    __IO uint32_t CHN1_FBUF_RME       : 1;
X    volatile uint32_t CHN1_FBUF_RME       : 1;
N         uint32_t RESERVED2           : 2;
N    __IO uint32_t CHN1_CBUF_LS        : 1;
X    volatile uint32_t CHN1_CBUF_LS        : 1;
N    __IO uint32_t CHN1_RBUF_LS        : 1;
X    volatile uint32_t CHN1_RBUF_LS        : 1;
N    __IO uint32_t CHN1_FBUF_LS        : 1;
X    volatile uint32_t CHN1_FBUF_LS        : 1;
N         uint32_t RESERVED3           : 5;
N}DEV_SRC_BIST_EN_Field;
N/****DEV_SRCBIST_EN end****/
N
N/***********************************BIST_DONE***********************************/
Ntypedef struct{
N
N    __I  uint32_t CHN0_CBUF_DONE      : 1;
X    volatile const  uint32_t CHN0_CBUF_DONE      : 1;
N    __I  uint32_t CHN0_DBUF_DONE      : 1;
X    volatile const  uint32_t CHN0_DBUF_DONE      : 1;
N    __I  uint32_t CHN0_FBUF_DONE      : 1;
X    volatile const  uint32_t CHN0_FBUF_DONE      : 1;
N         uint32_t RESERVED0           : 13;
N    __I  uint32_t CHN1_CBUF_DONE      : 1;
X    volatile const  uint32_t CHN1_CBUF_DONE      : 1;
N    __I  uint32_t CHN1_DBUF_DONE      : 1;
X    volatile const  uint32_t CHN1_DBUF_DONE      : 1;
N    __I  uint32_t CHN1_FBUF_DONE      : 1;
X    volatile const  uint32_t CHN1_FBUF_DONE      : 1;
N         uint32_t RESERVED1           : 13;
N}DEV_SRC_BIST_DONE_Field;
N/****DEV_SRCBIST_DONE end****/
N
N/***********************************BIST_FAIL***********************************/
Ntypedef struct{
N
N    __I  uint32_t CHN0_CBUF_FAIL      : 1;
X    volatile const  uint32_t CHN0_CBUF_FAIL      : 1;
N    __I  uint32_t CHN0_DBUF_FAIL      : 1;
X    volatile const  uint32_t CHN0_DBUF_FAIL      : 1;
N    __I  uint32_t CHN0_FBUF_FAIL      : 1;
X    volatile const  uint32_t CHN0_FBUF_FAIL      : 1;
N         uint32_t RESERVED0           : 13;
N    __I  uint32_t CHN1_CBUF_FAIL      : 1;
X    volatile const  uint32_t CHN1_CBUF_FAIL      : 1;
N    __I  uint32_t CHN1_DBUF_FAIL      : 1;
X    volatile const  uint32_t CHN1_DBUF_FAIL      : 1;
N    __I  uint32_t CHN1_FBUF_FAIL      : 1;
X    volatile const  uint32_t CHN1_FBUF_FAIL      : 1;
N         uint32_t RESERVED1           : 13;
N}DEV_SRC_BIST_FAIL_Field;
N/****DEV_SRCBIST_FAIL end****/
N
N/***********************************SRC_CHN register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    LSR;                                     /* 0x0    SRC CHNn Lower Sample-Rate Ratio */
X        volatile    uint32_t    LSR;                                      
N        DEV_SRC_CHNn_LSR_Field    LSR_f;
N    };
N    union
N    {
N        __IO    uint32_t    USR;                                     /* 0x4    SRC CHNn Upper Sample-Rate Ratio */
X        volatile    uint32_t    USR;                                      
N        DEV_SRC_CHNn_USR_Field    USR_f;
N    };
N    union
N    {
N        __IO    uint32_t    LTH;                                     /* 0x8    SRC CHNn Lower Threshold */
X        volatile    uint32_t    LTH;                                      
N        DEV_SRC_CHNn_LTH_Field    LTH_f;
N    };
N    union
N    {
N        __IO    uint32_t    UTH;                                     /* 0xc    SRC CHNn Upper Threshold */
X        volatile    uint32_t    UTH;                                      
N        DEV_SRC_CHNn_UTH_Field    UTH_f;
N    };
N    union
N    {
N        __IO    uint32_t    CFG;                                     /* 0x10    SRC CHNn Configure */
X        volatile    uint32_t    CFG;                                      
N        DEV_SRC_CHNn_CFG_Field    CFG_f;
N    };
N    union
N    {
N        __IO    uint32_t    IE;                                      /* 0x14    SRC CHNn Interrupt Enable */
X        volatile    uint32_t    IE;                                       
N        DEV_SRC_CHNn_IE_Field    IE_f;
N    };
N    union
N    {
N        __IO    uint32_t    PD;                                      /* 0x18    SRC CHNn Interrupt Pending */
X        volatile    uint32_t    PD;                                       
N        DEV_SRC_CHNn_PD_Field    PD_f;
N    };
N    union
N    {
N        __I     uint32_t    STA;                                     /* 0x1c    SRC CHNn Status */
X        volatile const     uint32_t    STA;                                      
N        DEV_SRC_CHNn_STA_Field    STA_f;
N    };
N    union
N    {
N        __IO    uint32_t    CBUF;                                    /* 0x20    SRC CHNn COE buffer */
X        volatile    uint32_t    CBUF;                                     
N        DEV_SRC_CHNn_CBUF_Field    CBUF_f;
N    };
N    union
N    {
N        __O     uint32_t    WBUF;                                    /* 0x24    SRC CHNn Data Input buffer */
X        volatile     uint32_t    WBUF;                                     
N        DEV_SRC_CHNn_WBUF_Field    WBUF_f;
N    };
N    union
N    {
N        __I     uint32_t    RBUF;                                    /* 0x28    SRC CHNn Data Output buffer */
X        volatile const     uint32_t    RBUF;                                     
N        DEV_SRC_CHNn_RBUF_Field    RBUF_f;
N    };
N    uint32_t    RESERVED0[53];
N}SRC_CHN_RegDef_f;
N/****SRC_CHN end****/
N
N/***********************************DEV_SRC register***********************************/
Ntypedef struct{
N
N    union
N    {
N        SRC_CHN_RegDef_f    CHN[2];                                  /* 0x0    SRC CHNn Lower Sample-Rate Ratio */
N    };
N    uint32_t    RESERVED0[896];
N    union
N    {
N        __IO    uint32_t    BIST_RM;                                 /* 0x1000    SRC CHNn Configure */
X        volatile    uint32_t    BIST_RM;                                  
N        DEV_SRC_BIST_RM_Field    BIST_RM_f;
N    };
N    union
N    {
N        __IO    uint32_t    BIST_EN;                                 /* 0x1004    SRC CHNn Interrupt Pending */
X        volatile    uint32_t    BIST_EN;                                  
N        DEV_SRC_BIST_EN_Field    BIST_EN_f;
N    };
N    union
N    {
N        __I     uint32_t    BIST_DONE;                               /* 0x1008    SRC CHNn COE buffer */
X        volatile const     uint32_t    BIST_DONE;                                
N        DEV_SRC_BIST_DONE_Field    BIST_DONE_f;
N    };
N    union
N    {
N        __I     uint32_t    BIST_FAIL;                               /* 0x100c    SRC CHNn Data Output buffer */
X        volatile const     uint32_t    BIST_FAIL;                                
N        DEV_SRC_BIST_FAIL_Field    BIST_FAIL_f;
N    };
N}DEV_SRC_RegDef_f;
N/****DEV_SRC end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 39 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_gpio_field.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_gpio_field.h" 1
N#ifndef __DEV_GPIO_FIELD_H__
N#define __DEV_GPIO_FIELD_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************n_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t MFP                 : 4;
X    volatile uint32_t MFP                 : 4;
N    __IO uint32_t OE                  : 1;
X    volatile uint32_t OE                  : 1;
N    __IO uint32_t IE                  : 1;
X    volatile uint32_t IE                  : 1;
N    __IO uint32_t PE                  : 1;
X    volatile uint32_t PE                  : 1;
N    __IO uint32_t PS                  : 1;
X    volatile uint32_t PS                  : 1;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t O                   : 1;
X    volatile uint32_t O                   : 1;
N    __IO uint32_t LB                  : 1;
X    volatile uint32_t LB                  : 1;
N    __IO uint32_t FAST                : 1;
X    volatile uint32_t FAST                : 1;
N    __IO uint32_t DS                  : 1;
X    volatile uint32_t DS                  : 1;
N    __IO uint32_t OV                  : 1;
X    volatile uint32_t OV                  : 1;
N    __IO uint32_t IV                  : 1;
X    volatile uint32_t IV                  : 1;
N         uint32_t RESERVED1           : 17;
N}DEV_GPIO_n_CTL_Field;
N/****DEV_GPIOn_CTL end****/
N
N/***********************************OUT0***********************************/
Ntypedef struct{
N
N    __IO uint32_t OUT                 : 32;
X    volatile uint32_t OUT                 : 32;
N}DEV_GPIO_OUT0_Field;
N/****DEV_GPIOOUT0 end****/
N
N/***********************************OUT1***********************************/
Ntypedef struct{
N
N    __IO uint32_t OUT                 : 8;
X    volatile uint32_t OUT                 : 8;
N         uint32_t RESERVED0           : 24;
N}DEV_GPIO_OUT1_Field;
N/****DEV_GPIOOUT1 end****/
N
N/***********************************IN0***********************************/
Ntypedef struct{
N
N    __I  uint32_t IN                  : 32;
X    volatile const  uint32_t IN                  : 32;
N}DEV_GPIO_IN0_Field;
N/****DEV_GPIOIN0 end****/
N
N/***********************************IN1***********************************/
Ntypedef struct{
N
N    __I  uint32_t IN                  : 8;
X    volatile const  uint32_t IN                  : 8;
N         uint32_t RESERVED0           : 24;
N}DEV_GPIO_IN1_Field;
N/****DEV_GPIOIN1 end****/
N
N/***********************************RSTN***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 6;
X    volatile uint32_t SEL                 : 6;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N    __IO uint32_t PU                  : 1;
X    volatile uint32_t PU                  : 1;
N         uint32_t RESERVED1           : 22;
N}DEV_GPIO_RSTN_Field;
N/****DEV_GPIORSTN end****/
N
N/***********************************ECLK***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 6;
X    volatile uint32_t SEL                 : 6;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N         uint32_t RESERVED1           : 23;
N}DEV_GPIO_ECLK_Field;
N/****DEV_GPIOECLK end****/
N
N/***********************************ECLK2***********************************/
Ntypedef struct{
N
N    __IO uint32_t SEL                 : 6;
X    volatile uint32_t SEL                 : 6;
N         uint32_t RESERVED0           : 2;
N    __IO uint32_t EN                  : 1;
X    volatile uint32_t EN                  : 1;
N         uint32_t RESERVED1           : 23;
N}DEV_GPIO_ECLK2_Field;
N/****DEV_GPIOECLK2 end****/
N
N/***********************************ICn***********************************/
Ntypedef struct{
N
N    __IO uint32_t SOURCE              : 6;
X    volatile uint32_t SOURCE              : 6;
N    __IO uint32_t EVENT               : 3;
X    volatile uint32_t EVENT               : 3;
N         uint32_t RESERVED0           : 23;
N}DEV_GPIO_ICn_Field;
N/****DEV_GPIOICn end****/
N
N/***********************************IE0***********************************/
Ntypedef struct{
N
N    __IO uint32_t IE                  : 4;
X    volatile uint32_t IE                  : 4;
N         uint32_t RESERVED0           : 28;
N}DEV_GPIO_IE0_Field;
N/****DEV_GPIOIE0 end****/
N
N/***********************************IE1***********************************/
Ntypedef struct{
N
N    __IO uint32_t IE                  : 4;
X    volatile uint32_t IE                  : 4;
N         uint32_t RESERVED0           : 28;
N}DEV_GPIO_IE1_Field;
N/****DEV_GPIOIE1 end****/
N
N/***********************************PD***********************************/
Ntypedef struct{
N
N    __IO uint32_t PD                  : 4;
X    volatile uint32_t PD                  : 4;
N         uint32_t RESERVED0           : 28;
N}DEV_GPIO_PD_Field;
N/****DEV_GPIOPD end****/
N
N/***********************************DBIO_CTL***********************************/
Ntypedef struct{
N
N    __IO uint32_t GRP_SEL             : 6;
X    volatile uint32_t GRP_SEL             : 6;
N         uint32_t RESERVED0           : 1;
N    __IO uint32_t BIT_EN              : 1;
X    volatile uint32_t BIT_EN              : 1;
N    __IO uint32_t BIT_SEL             : 4;
X    volatile uint32_t BIT_SEL             : 4;
N         uint32_t RESERVED1           : 20;
N}DEV_GPIO_DBIO_CTL_Field;
N/****DEV_GPIODBIO_CTL end****/
N
N/***********************************DBIO_OE0***********************************/
Ntypedef struct{
N
N    __IO uint32_t OE                  : 32;
X    volatile uint32_t OE                  : 32;
N}DEV_GPIO_DBIO_OE0_Field;
N/****DEV_GPIODBIO_OE0 end****/
N
N/***********************************DBIO_IE0***********************************/
Ntypedef struct{
N
N    __IO uint32_t IE                  : 32;
X    volatile uint32_t IE                  : 32;
N}DEV_GPIO_DBIO_IE0_Field;
N/****DEV_GPIODBIO_IE0 end****/
N
N/***********************************DBIO_IE1***********************************/
Ntypedef struct{
N
N    __IO uint32_t IE                  : 8;
X    volatile uint32_t IE                  : 8;
N         uint32_t RESERVED0           : 24;
N}DEV_GPIO_DBIO_IE1_Field;
N/****DEV_GPIODBIO_IE1 end****/
N
N/***********************************DBIO_OUT0***********************************/
Ntypedef struct{
N
N    __I  uint32_t OUT                 : 32;
X    volatile const  uint32_t OUT                 : 32;
N}DEV_GPIO_DBIO_OUT0_Field;
N/****DEV_GPIODBIO_OUT0 end****/
N
N/***********************************DBIO_OUT1***********************************/
Ntypedef struct{
N
N    __I  uint32_t OUT                 : 8;
X    volatile const  uint32_t OUT                 : 8;
N         uint32_t RESERVED0           : 24;
N}DEV_GPIO_DBIO_OUT1_Field;
N/****DEV_GPIODBIO_OUT1 end****/
N
N/***********************************DEV_GPIO register***********************************/
Ntypedef struct{
N
N    union
N    {
N        __IO    uint32_t    CTL[40];                                 /* 0x0    GPIO Control */
X        volatile    uint32_t    CTL[40];                                  
N        DEV_GPIO_n_CTL_Field    CTL_f[40];
N    };
N    uint32_t    RESERVED0[24];
N    union
N    {
N        __IO    uint32_t    OUT0;                                    /* 0x100    GPIO Output0 */
X        volatile    uint32_t    OUT0;                                     
N        DEV_GPIO_OUT0_Field    OUT0_f;
N    };
N    union
N    {
N        __IO    uint32_t    OUT1;                                    /* 0x104    GPIO Output1 */
X        volatile    uint32_t    OUT1;                                     
N        DEV_GPIO_OUT1_Field    OUT1_f;
N    };
N    uint32_t    RESERVED1[2];
N    union
N    {
N        __I     uint32_t    IN0;                                     /* 0x110    GPIO Input0 */
X        volatile const     uint32_t    IN0;                                      
N        DEV_GPIO_IN0_Field    IN0_f;
N    };
N    union
N    {
N        __I     uint32_t    IN1;                                     /* 0x114    GPIO Input1 */
X        volatile const     uint32_t    IN1;                                      
N        DEV_GPIO_IN1_Field    IN1_f;
N    };
N    uint32_t    RESERVED2[2];
N    union
N    {
N        __IO    uint32_t    RSTN;                                    /* 0x120    GPIO Reset */
X        volatile    uint32_t    RSTN;                                     
N        DEV_GPIO_RSTN_Field    RSTN_f;
N    };
N    uint32_t    RESERVED3;
N    union
N    {
N        __IO    uint32_t    ECLK;                                    /* 0x128    GPIO External Clock */
X        volatile    uint32_t    ECLK;                                     
N        DEV_GPIO_ECLK_Field    ECLK_f;
N    };
N    union
N    {
N        __IO    uint32_t    ECLK2;                                   /* 0x12c    GPIO External Clock2 */
X        volatile    uint32_t    ECLK2;                                    
N        DEV_GPIO_ECLK2_Field    ECLK2_f;
N    };
N    uint32_t    RESERVED4[52];
N    union
N    {
N        __IO    uint32_t    ICn[4];                                  /* 0x200    GPIO Interrupt Control */
X        volatile    uint32_t    ICn[4];                                   
N        DEV_GPIO_ICn_Field    ICn_f[4];
N    };
N    uint32_t    RESERVED5[4];
N    union
N    {
N        __IO    uint32_t    IE0;                                     /* 0x220    GPIO Interrupt Enable */
X        volatile    uint32_t    IE0;                                      
N        DEV_GPIO_IE0_Field    IE0_f;
N    };
N    union
N    {
N        __IO    uint32_t    IE1;                                     /* 0x224    GPIO Interrupt Enable */
X        volatile    uint32_t    IE1;                                      
N        DEV_GPIO_IE1_Field    IE1_f;
N    };
N    union
N    {
N        __IO    uint32_t    PD;                                      /* 0x228    GPIO Pending */
X        volatile    uint32_t    PD;                                       
N        DEV_GPIO_PD_Field    PD_f;
N    };
N    uint32_t    RESERVED6[53];
N    union
N    {
N        __IO    uint32_t    DBIO_CTL;                                /* 0x300    Debug IO Control */
X        volatile    uint32_t    DBIO_CTL;                                 
N        DEV_GPIO_DBIO_CTL_Field    DBIO_CTL_f;
N    };
N    uint32_t    RESERVED7[3];
N    union
N    {
N        __IO    uint32_t    DBIO_OE0;                                /* 0x310    Debug IO Output Enable */
X        volatile    uint32_t    DBIO_OE0;                                 
N        DEV_GPIO_DBIO_OE0_Field    DBIO_OE0_f;
N    };
N    uint32_t    RESERVED8[3];
N    union
N    {
N        __IO    uint32_t    DBIO_IE0;                                /* 0x320    Debug IO Input Enable */
X        volatile    uint32_t    DBIO_IE0;                                 
N        DEV_GPIO_DBIO_IE0_Field    DBIO_IE0_f;
N    };
N    union
N    {
N        __IO    uint32_t    DBIO_IE1;                                /* 0x324    Debug IO Input Enable */
X        volatile    uint32_t    DBIO_IE1;                                 
N        DEV_GPIO_DBIO_IE1_Field    DBIO_IE1_f;
N    };
N    uint32_t    RESERVED9[2];
N    union
N    {
N        __I     uint32_t    DBIO_OUT0;                               /* 0x330    Debug IO Ouput Value for Read back */
X        volatile const     uint32_t    DBIO_OUT0;                                
N        DEV_GPIO_DBIO_OUT0_Field    DBIO_OUT0_f;
N    };
N    union
N    {
N        __I     uint32_t    DBIO_OUT1;                               /* 0x334    Debug IO Ouput Value for Read back */
X        volatile const     uint32_t    DBIO_OUT1;                                
N        DEV_GPIO_DBIO_OUT1_Field    DBIO_OUT1_f;
N    };
N}DEV_GPIO_RegDef_f;
N/****DEV_GPIO end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 40 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N
N#include "csr_mmu.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\csr_mmu.h" 1
N#ifndef __CSR_MMU_H__
N#define __CSR_MMU_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************MMU_PAGEn***********************************/
N#define CSR_MMU_PAGEn_USE_DISABLE                               (0x0UL<<8)
N#define CSR_MMU_PAGEn_USE_ENABLE                                (0x1UL<<8)
N#define CSR_MMU_PAGEn_USE_MASK                                  (0x1UL<<8)
N#define CSR_MMU_PAGEn_NUM_MASK                                  (0x7fUL<<0)
N/****MMU_PAGEn end****/
N
N
N/***********************************MMU_IE***********************************/
N#define CSR_MMU_IE_PG_ERROR_DISABLE                             (0x0UL<<1)
N#define CSR_MMU_IE_PG_ERROR_ENABLE                              (0x1UL<<1)
N#define CSR_MMU_IE_PG_ERROR_MASK                                (0x1UL<<1)
N#define CSR_MMU_IE_PG_MISS_DISABLE                              (0x0UL<<0)
N#define CSR_MMU_IE_PG_MISS_ENABLE                               (0x1UL<<0)
N#define CSR_MMU_IE_PG_MISS_MASK                                 (0x1UL<<0)
N/****MMU_IE end****/
N
N
N/***********************************MMU_PD***********************************/
N#define CSR_MMU_PD_PG_ERROR                                     (0x1UL<<1)
N#define CSR_MMU_PD_PG_MISS                                      (0x1UL<<0)
N/****MMU_PD end****/
N
N
N/***********************************MMU_MA***********************************/
N#define CSR_MMU_MA_ADDR_MASK                                    (0x7ffffUL<<0)
N/****MMU_MA end****/
N
N
N/***********************************MMU_CTL***********************************/
N#define CSR_MMU_CTL_MMU_USE_ST_ALWAYSENABLE                     (0x0UL<<3)
N#define CSR_MMU_CTL_MMU_USE_ST_STOPWHENMMUPENDINGSET            (0x1UL<<3)
N#define CSR_MMU_CTL_MMU_USE_ST_MASK                             (0x1UL<<3)
N#define CSR_MMU_CTL_MMU_USE_EN                                  (0x1UL<<2)
N#define CSR_MMU_CTL_MMU_BUS_EN_DISABLE                          (0x0UL<<1)
N#define CSR_MMU_CTL_MMU_BUS_EN_ENABLE                           (0x1UL<<1)
N#define CSR_MMU_CTL_MMU_BUS_EN_MASK                             (0x1UL<<1)
N#define CSR_MMU_CTL_MMU_EN_DISABLE                              (0x0UL<<0)
N#define CSR_MMU_CTL_MMU_EN_ENABLE                               (0x1UL<<0)
N#define CSR_MMU_CTL_MMU_EN_MASK                                 (0x1UL<<0)
N/****MMU_CTL end****/
N
N
N/***********************************MMU_USE0***********************************/
N#define CSR_MMU_USE0_ORDER07_MASK                               (0xfUL<<28)
N#define CSR_MMU_USE0_ORDER06_MASK                               (0xfUL<<24)
N#define CSR_MMU_USE0_ORDER05_MASK                               (0xfUL<<20)
N#define CSR_MMU_USE0_ORDER04_MASK                               (0xfUL<<16)
N#define CSR_MMU_USE0_ORDER03_MASK                               (0xfUL<<12)
N#define CSR_MMU_USE0_ORDER02_MASK                               (0xfUL<<8)
N#define CSR_MMU_USE0_ORDER01_MASK                               (0xfUL<<4)
N#define CSR_MMU_USE0_ORDER00_MASK                               (0xfUL<<0)
N/****MMU_USE0 end****/
N
N
N/***********************************MMU_USE1***********************************/
N#define CSR_MMU_USE1_ORDER15_MASK                               (0xfUL<<28)
N#define CSR_MMU_USE1_ORDER14_MASK                               (0xfUL<<24)
N#define CSR_MMU_USE1_ORDER13_MASK                               (0xfUL<<20)
N#define CSR_MMU_USE1_ORDER12_MASK                               (0xfUL<<16)
N#define CSR_MMU_USE1_ORDER11_MASK                               (0xfUL<<12)
N#define CSR_MMU_USE1_ORDER10_MASK                               (0xfUL<<8)
N#define CSR_MMU_USE1_ORDER09_MASK                               (0xfUL<<4)
N#define CSR_MMU_USE1_ORDER08_MASK                               (0xfUL<<0)
N/****MMU_USE1 end****/
N
N
N/***********************************CSR_MMUCSregister***********************************/
Ntypedef enum{
N
N    MMU_PAGE0           =0x3c0,
N    MMU_PAGE1           =0x3c1,
N    MMU_PAGE2           =0x3c2,
N    MMU_PAGE3           =0x3c3,
N    MMU_PAGE4           =0x3c4,
N    MMU_PAGE5           =0x3c5,
N    MMU_PAGE6           =0x3c6,
N    MMU_PAGE7           =0x3c7,
N    MMU_PAGE8           =0x3c8,
N    MMU_PAGE9           =0x3c9,
N    MMU_PAGE10          =0x3ca,
N    MMU_PAGE11          =0x3cb,
N    MMU_PAGE12          =0x3cc,
N    MMU_PAGE13          =0x3cd,
N    MMU_PAGE14          =0x3ce,
N    MMU_PAGE15          =0x3cf,
N    MMU_IE              =0x3d0,
N    MMU_PD              =0x3d1,
N    MMU_MA              =0x3d2,
N    MMU_CTL             =0x3d3,
N    MMU_USE0            =0x3d4,
N    MMU_USE1            =0x3d5,
N}CSR_MMU_RegDef;
N/****CSR_MMU end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 42 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_udsp.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_udsp.h" 1
N#ifndef __DEV_UDSP_H__
N#define __DEV_UDSP_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************uDSP_CHNn_SLA***********************************/
N#define DEV_UDSP_CHNn_SLA_SRC_LOWER_ADDR_MASK                   (0xffffffffUL<<0)
N/****uDSP_CHNn_SLA end****/
N
N
N/***********************************uDSP_CHNn_SUA***********************************/
N#define DEV_UDSP_CHNn_SUA_SRC_UPPER_ADDR_MASK                   (0xffffffffUL<<0)
N/****uDSP_CHNn_SUA end****/
N
N
N/***********************************uDSP_CHNn_SCA***********************************/
N#define DEV_UDSP_CHNn_SCA_SRC_CURRENT_ADDR_MASK                 (0xffffffffUL<<0)
N/****uDSP_CHNn_SCA end****/
N
N
N/***********************************uDSP_CHNn_SMF***********************************/
N#define DEV_UDSP_CHNn_SMF_SRC_OFFSET_ADDR_MASK                  (0xffffUL<<16)
N#define DEV_UDSP_CHNn_SMF_SRC_DATA_TYPE_REALINT32               (0x0UL<<15)
N#define DEV_UDSP_CHNn_SMF_SRC_DATA_TYPE_COMPLEXORLONG64         (0x1UL<<15)
N#define DEV_UDSP_CHNn_SMF_SRC_DATA_TYPE_MASK                    (0x1UL<<15)
N#define DEV_UDSP_CHNn_SMF_SRC_DATA_FORMAT_LOW_24BIT             (0x0UL<<14)
N#define DEV_UDSP_CHNn_SMF_SRC_DATA_FORMAT_HIGH24BIT             (0x1UL<<14)
N#define DEV_UDSP_CHNn_SMF_SRC_DATA_FORMAT_MASK                  (0x1UL<<14)
N#define DEV_UDSP_CHNn_SMF_SRC_DATA_WIDTH_08BIT                  (0x0UL<<12)
N#define DEV_UDSP_CHNn_SMF_SRC_DATA_WIDTH_16BIT                  (0x1UL<<12)
N#define DEV_UDSP_CHNn_SMF_SRC_DATA_WIDTH_24BIT                  (0x2UL<<12)
N#define DEV_UDSP_CHNn_SMF_SRC_DATA_WIDTH_32BIT                  (0x3UL<<12)
N#define DEV_UDSP_CHNn_SMF_SRC_DATA_WIDTH_MASK                   (0x3UL<<12)
N#define DEV_UDSP_CHNn_SMF_SRC_DATA_LENGTH_MASK                  (0xfffUL<<0)
N/****uDSP_CHNn_SMF end****/
N
N
N/***********************************uDSP_CHNn_DLA***********************************/
N#define DEV_UDSP_CHNn_DLA_DST_LOWER_ADDR_MASK                   (0xffffffffUL<<0)
N/****uDSP_CHNn_DLA end****/
N
N
N/***********************************uDSP_CHNn_DUA***********************************/
N#define DEV_UDSP_CHNn_DUA_DST_UPPER_ADDR_MASK                   (0xffffffffUL<<0)
N/****uDSP_CHNn_DUA end****/
N
N
N/***********************************uDSP_CHNn_DCA***********************************/
N#define DEV_UDSP_CHNn_DCA_DST_CURRENT_ADDR_MASK                 (0xffffffffUL<<0)
N/****uDSP_CHNn_DCA end****/
N
N
N/***********************************uDSP_CHNn_DMF***********************************/
N#define DEV_UDSP_CHNn_DMF_DST_OFFSET_ADDR_MASK                  (0xffffUL<<16)
N#define DEV_UDSP_CHNn_DMF_DST_DATA_TYPE_REALINT32               (0x0UL<<15)
N#define DEV_UDSP_CHNn_DMF_DST_DATA_TYPE_COMPLEXORLONG64         (0x1UL<<15)
N#define DEV_UDSP_CHNn_DMF_DST_DATA_TYPE_MASK                    (0x1UL<<15)
N#define DEV_UDSP_CHNn_DMF_DST_DATA_WIDTH_08BIT                  (0x0UL<<12)
N#define DEV_UDSP_CHNn_DMF_DST_DATA_WIDTH_16BIT                  (0x1UL<<12)
N#define DEV_UDSP_CHNn_DMF_DST_DATA_WIDTH_24BIT                  (0x2UL<<12)
N#define DEV_UDSP_CHNn_DMF_DST_DATA_WIDTH_32BIT                  (0x3UL<<12)
N#define DEV_UDSP_CHNn_DMF_DST_DATA_WIDTH_MASK                   (0x3UL<<12)
N#define DEV_UDSP_CHNn_DMF_DST_DATA_LENGTH_MASK                  (0xfffUL<<0)
N/****uDSP_CHNn_DMF end****/
N
N
N/***********************************uDSP_CHNn_LMF0***********************************/
N#define DEV_UDSP_CHNn_LMF0_FIR_BUF1_WSA_MASK                    (0xfUL<<28)
N#define DEV_UDSP_CHNn_LMF0_SMA_BUF1_RSA_MASK                    (0xfUL<<24)
N#define DEV_UDSP_CHNn_LMF0_SMA_BUF1_WSA_MASK                    (0xfUL<<20)
N#define DEV_UDSP_CHNn_LMF0_SMA_RD_BUF1_SEL_DISABLE              (0x0UL<<17)
N#define DEV_UDSP_CHNn_LMF0_SMA_RD_BUF1_SEL_ENABLE               (0x1UL<<17)
N#define DEV_UDSP_CHNn_LMF0_SMA_RD_BUF1_SEL_MASK                 (0x1UL<<17)
N#define DEV_UDSP_CHNn_LMF0_SMA_WR_BUF1_SEL_DISABLE              (0x0UL<<16)
N#define DEV_UDSP_CHNn_LMF0_SMA_WR_BUF1_SEL_ENABLE               (0x1UL<<16)
N#define DEV_UDSP_CHNn_LMF0_SMA_WR_BUF1_SEL_MASK                 (0x1UL<<16)
N#define DEV_UDSP_CHNn_LMF0_SMA_BUF0_RSA_MASK                    (0xfUL<<8)
N#define DEV_UDSP_CHNn_LMF0_SMA_BUF0_WSA_MASK                    (0xfUL<<4)
N#define DEV_UDSP_CHNn_LMF0_SMA_RD_BUF0_SEL_DISABLE              (0x0UL<<1)
N#define DEV_UDSP_CHNn_LMF0_SMA_RD_BUF0_SEL_ENABLE               (0x1UL<<1)
N#define DEV_UDSP_CHNn_LMF0_SMA_RD_BUF0_SEL_MASK                 (0x1UL<<1)
N#define DEV_UDSP_CHNn_LMF0_SMA_WR_BUF0_SEL_DISABLE              (0x0UL<<0)
N#define DEV_UDSP_CHNn_LMF0_SMA_WR_BUF0_SEL_ENABLE               (0x1UL<<0)
N#define DEV_UDSP_CHNn_LMF0_SMA_WR_BUF0_SEL_MASK                 (0x1UL<<0)
N/****uDSP_CHNn_LMF0 end****/
N
N
N/***********************************uDSP_CHNn_LMF1***********************************/
N#define DEV_UDSP_CHNn_LMF1_FIR_BUF0_RSA_MASK                    (0x3UL<<30)
N#define DEV_UDSP_CHNn_LMF1_FIR_BUF0_WSA_MASK                    (0x3UL<<28)
N#define DEV_UDSP_CHNn_LMF1_MAC_BUF0_RSA_MASK                    (0xfUL<<24)
N#define DEV_UDSP_CHNn_LMF1_MAC_BUF0_WSA_MASK                    (0xfUL<<20)
N#define DEV_UDSP_CHNn_LMF1_LOG_BUF0_RSA_MASK                    (0x3UL<<18)
N#define DEV_UDSP_CHNn_LMF1_LOG_BUF0_WSA_MASK                    (0x3UL<<16)
N#define DEV_UDSP_CHNn_LMF1_FBK_BUF0_RSA_MASK                    (0x3UL<<14)
N#define DEV_UDSP_CHNn_LMF1_FBK_BUF0_WSA_MASK                    (0x3UL<<12)
N#define DEV_UDSP_CHNn_LMF1_SQRT_BUF0_RSA_MASK                   (0x3UL<<10)
N#define DEV_UDSP_CHNn_LMF1_SQRT_BUF0_WSA_MASK                   (0x3UL<<8)
N#define DEV_UDSP_CHNn_LMF1_ABS2_BUF0_RSA_MASK                   (0x3UL<<6)
N#define DEV_UDSP_CHNn_LMF1_ABS2_BUF0_WSA_MASK                   (0x3UL<<4)
N#define DEV_UDSP_CHNn_LMF1_ATAN_BUF0_RSA_MASK                   (0x3UL<<2)
N#define DEV_UDSP_CHNn_LMF1_ATAN_BUF0_WSA_MASK                   (0x3UL<<0)
N/****uDSP_CHNn_LMF1 end****/
N
N
N/***********************************uDSP_CHNn_LMF2***********************************/
N#define DEV_UDSP_CHNn_LMF2_SQRT_BUF1_RSA_MASK                   (0xffUL<<24)
N#define DEV_UDSP_CHNn_LMF2_MUL_BUF1_RSA_MASK                    (0xffUL<<16)
N#define DEV_UDSP_CHNn_LMF2_COS_BUF1_RSA_MASK                    (0xffUL<<8)
N#define DEV_UDSP_CHNn_LMF2_WIN_BUF1_RSA_MASK                    (0xffUL<<0)
N/****uDSP_CHNn_LMF2 end****/
N
N
N/***********************************uDSP_CHNn_LMF3***********************************/
N#define DEV_UDSP_CHNn_LMF3_DIV_BUF1_RSA_MASK                    (0xffUL<<24)
N#define DEV_UDSP_CHNn_LMF3_FIR_BUF1_RSA_MASK                    (0xffUL<<16)
N#define DEV_UDSP_CHNn_LMF3_MAC_BUF1_RSA_MASK                    (0xffUL<<8)
N#define DEV_UDSP_CHNn_LMF3_FBK_BUF1_RSA_MASK                    (0xffUL<<0)
N/****uDSP_CHNn_LMF3 end****/
N
N
N/***********************************uDSP_CHNn_LMF4***********************************/
N#define DEV_UDSP_CHNn_LMF4_DIV_SHIFT_SEL_MASK                   (0xfUL<<28)
N#define DEV_UDSP_CHNn_LMF4_FIR_SHIFT_SEL_MASK                   (0xfUL<<24)
N#define DEV_UDSP_CHNn_LMF4_MAC_SHIFT_SEL_MASK                   (0xfUL<<20)
N#define DEV_UDSP_CHNn_LMF4_SQRT_SHIFT_SEL_MASK                  (0xfUL<<16)
N#define DEV_UDSP_CHNn_LMF4_IFFT_SHIFT_SEL_MASK                  (0xfUL<<12)
N#define DEV_UDSP_CHNn_LMF4_MUL_SHIFT_SEL_MASK                   (0xfUL<<8)
N#define DEV_UDSP_CHNn_LMF4_FFT_SHIFT_SEL_MASK                   (0xfUL<<4)
N#define DEV_UDSP_CHNn_LMF4_COS_SHIFT_SEL_MASK                   (0xfUL<<0)
N/****uDSP_CHNn_LMF4 end****/
N
N
N/***********************************uDSP_CHNn_CFG0***********************************/
N#define DEV_UDSP_CHNn_CFG0_BUF_SWAP_BUF0STOREDATA_AND_BUF1STORECOE  (0x0UL<<25)
N#define DEV_UDSP_CHNn_CFG0_BUF_SWAP_BUF1STOREDATA_AND_BUF0STORECOE  (0x1UL<<25)
N#define DEV_UDSP_CHNn_CFG0_BUF_SWAP_MASK                        (0x1UL<<25)
N#define DEV_UDSP_CHNn_CFG0_LOG_8BIT_DISABLE                     (0x0UL<<24)
N#define DEV_UDSP_CHNn_CFG0_LOG_8BIT_ENABLE                      (0x1UL<<24)
N#define DEV_UDSP_CHNn_CFG0_LOG_8BIT_MASK                        (0x1UL<<24)
N#define DEV_UDSP_CHNn_CFG0_LOG_CAL_DISABLE                      (0x0UL<<23)
N#define DEV_UDSP_CHNn_CFG0_LOG_CAL_ENABLE                       (0x1UL<<23)
N#define DEV_UDSP_CHNn_CFG0_LOG_CAL_MASK                         (0x1UL<<23)
N#define DEV_UDSP_CHNn_CFG0_FFT_POINT_0032POINT                  (0x0UL<<20)
N#define DEV_UDSP_CHNn_CFG0_FFT_POINT_0064POINT                  (0x1UL<<20)
N#define DEV_UDSP_CHNn_CFG0_FFT_POINT_0128POINT                  (0x2UL<<20)
N#define DEV_UDSP_CHNn_CFG0_FFT_POINT_0256POINT                  (0x3UL<<20)
N#define DEV_UDSP_CHNn_CFG0_FFT_POINT_0512POINT                  (0x4UL<<20)
N#define DEV_UDSP_CHNn_CFG0_FFT_POINT_1024POINT                  (0x5UL<<20)
N#define DEV_UDSP_CHNn_CFG0_FFT_POINT_MASK                       (0x7UL<<20)
N#define DEV_UDSP_CHNn_CFG0_SMW_DISABLE                          (0x0UL<<15)
N#define DEV_UDSP_CHNn_CFG0_SMW_ENABLE                           (0x1UL<<15)
N#define DEV_UDSP_CHNn_CFG0_SMW_MASK                             (0x1UL<<15)
N#define DEV_UDSP_CHNn_CFG0_DIV_DISABLE                          (0x0UL<<14)
N#define DEV_UDSP_CHNn_CFG0_DIV_ENABLE                           (0x1UL<<14)
N#define DEV_UDSP_CHNn_CFG0_DIV_MASK                             (0x1UL<<14)
N#define DEV_UDSP_CHNn_CFG0_FIR_DISABLE                          (0x0UL<<13)
N#define DEV_UDSP_CHNn_CFG0_FIR_ENABLE                           (0x1UL<<13)
N#define DEV_UDSP_CHNn_CFG0_FIR_MASK                             (0x1UL<<13)
N#define DEV_UDSP_CHNn_CFG0_MAC_DISABLE                          (0x0UL<<12)
N#define DEV_UDSP_CHNn_CFG0_MAC_ENABLE                           (0x1UL<<12)
N#define DEV_UDSP_CHNn_CFG0_MAC_MASK                             (0x1UL<<12)
N#define DEV_UDSP_CHNn_CFG0_LOG_DISABLE                          (0x0UL<<11)
N#define DEV_UDSP_CHNn_CFG0_LOG_ENABLE                           (0x1UL<<11)
N#define DEV_UDSP_CHNn_CFG0_LOG_MASK                             (0x1UL<<11)
N#define DEV_UDSP_CHNn_CFG0_FBK_DISABLE                          (0x0UL<<10)
N#define DEV_UDSP_CHNn_CFG0_FBK_ENABLE                           (0x1UL<<10)
N#define DEV_UDSP_CHNn_CFG0_FBK_MASK                             (0x1UL<<10)
N#define DEV_UDSP_CHNn_CFG0_SQRT_DISABLE                         (0x0UL<<9)
N#define DEV_UDSP_CHNn_CFG0_SQRT_ENABLE                          (0x1UL<<9)
N#define DEV_UDSP_CHNn_CFG0_SQRT_MASK                            (0x1UL<<9)
N#define DEV_UDSP_CHNn_CFG0_ABS2_DISABLE                         (0x0UL<<8)
N#define DEV_UDSP_CHNn_CFG0_ABS2_ENABLE                          (0x1UL<<8)
N#define DEV_UDSP_CHNn_CFG0_ABS2_MASK                            (0x1UL<<8)
N#define DEV_UDSP_CHNn_CFG0_ATAN_DISABLE                         (0x0UL<<7)
N#define DEV_UDSP_CHNn_CFG0_ATAN_ENABLE                          (0x1UL<<7)
N#define DEV_UDSP_CHNn_CFG0_ATAN_MASK                            (0x1UL<<7)
N#define DEV_UDSP_CHNn_CFG0_IFFT_DISABLE                         (0x0UL<<6)
N#define DEV_UDSP_CHNn_CFG0_IFFT_ENABLE                          (0x1UL<<6)
N#define DEV_UDSP_CHNn_CFG0_IFFT_MASK                            (0x1UL<<6)
N#define DEV_UDSP_CHNn_CFG0_MUL_DISABLE                          (0x0UL<<5)
N#define DEV_UDSP_CHNn_CFG0_MUL_ENABLE                           (0x1UL<<5)
N#define DEV_UDSP_CHNn_CFG0_MUL_MASK                             (0x1UL<<5)
N#define DEV_UDSP_CHNn_CFG0_FFT_DISABLE                          (0x0UL<<4)
N#define DEV_UDSP_CHNn_CFG0_FFT_ENABLE                           (0x1UL<<4)
N#define DEV_UDSP_CHNn_CFG0_FFT_MASK                             (0x1UL<<4)
N#define DEV_UDSP_CHNn_CFG0_COS_DISABLE                          (0x0UL<<3)
N#define DEV_UDSP_CHNn_CFG0_COS_ENABLE                           (0x1UL<<3)
N#define DEV_UDSP_CHNn_CFG0_COS_MASK                             (0x1UL<<3)
N#define DEV_UDSP_CHNn_CFG0_WIN_DISABLE                          (0x0UL<<2)
N#define DEV_UDSP_CHNn_CFG0_WIN_ENABLE                           (0x1UL<<2)
N#define DEV_UDSP_CHNn_CFG0_WIN_MASK                             (0x1UL<<2)
N#define DEV_UDSP_CHNn_CFG0_PRE_DISABLE                          (0x0UL<<1)
N#define DEV_UDSP_CHNn_CFG0_PRE_ENABLE                           (0x1UL<<1)
N#define DEV_UDSP_CHNn_CFG0_PRE_MASK                             (0x1UL<<1)
N#define DEV_UDSP_CHNn_CFG0_SMR_DISABLE                          (0x0UL<<0)
N#define DEV_UDSP_CHNn_CFG0_SMR_ENABLE                           (0x1UL<<0)
N#define DEV_UDSP_CHNn_CFG0_SMR_MASK                             (0x1UL<<0)
N/****uDSP_CHNn_CFG0 end****/
N
N
N/***********************************uDSP_CHNn_CFG1***********************************/
N#define DEV_UDSP_CHNn_CFG1_MFCC_NUM(_total_)                    (((_total_)-1)<<16)
N#define DEV_UDSP_CHNn_CFG1_MFCC_NUM_MASK                        (0xffffUL<<16)
N#define DEV_UDSP_CHNn_CFG1_BANK_NUM_MASK                        (0xffffUL<<0)
N/****uDSP_CHNn_CFG1 end****/
N
N
N/***********************************uDSP_EN***********************************/
N#define DEV_UDSP_EN_CHN_EN_WE_MASK                              (0xffUL<<16)
N#define DEV_UDSP_EN_CHN_EN_MASK                                 (0xffUL<<0)
N/****uDSP_EN end****/
N
N
N/***********************************uDSP_IE***********************************/
N#define DEV_UDSP_IE_FFT_BIT32_OF                                (0x1UL<<17)
N#define DEV_UDSP_IE_FFT_BIT31_OF                                (0x1UL<<16)
N#define DEV_UDSP_IE_END_MASK                                    (0xffUL<<0)
N/****uDSP_IE end****/
N
N
N/***********************************uDSP_PD***********************************/
N#define DEV_UDSP_PD_FFT_BIT32_OF                                (0x1UL<<17)
N#define DEV_UDSP_PD_FFT_BIT31_OF                                (0x1UL<<16)
N#define DEV_UDSP_PD_END_MASK                                    (0xffUL<<0)
N/****uDSP_PD end****/
N
N
N/***********************************uDSP_BIST_CFG***********************************/
N#define DEV_UDSP_BIST_CFG_BUF1_BIST_LS_DISABLE                  (0x0UL<<13)
N#define DEV_UDSP_BIST_CFG_BUF1_BIST_LS_ENABLE                   (0x1UL<<13)
N#define DEV_UDSP_BIST_CFG_BUF1_BIST_LS_MASK                     (0x1UL<<13)
N#define DEV_UDSP_BIST_CFG_BUF1_RME_DISABLE                      (0x0UL<<12)
N#define DEV_UDSP_BIST_CFG_BUF1_RME_ENABLE                       (0x1UL<<12)
N#define DEV_UDSP_BIST_CFG_BUF1_RME_MASK                         (0x1UL<<12)
N#define DEV_UDSP_BIST_CFG_BUF1_RM_MASK                          (0xfUL<<8)
N#define DEV_UDSP_BIST_CFG_BUF0_BIST_LS_DISABLE                  (0x0UL<<5)
N#define DEV_UDSP_BIST_CFG_BUF0_BIST_LS_ENABLE                   (0x1UL<<5)
N#define DEV_UDSP_BIST_CFG_BUF0_BIST_LS_MASK                     (0x1UL<<5)
N#define DEV_UDSP_BIST_CFG_BUF0_RME_DISABLE                      (0x0UL<<4)
N#define DEV_UDSP_BIST_CFG_BUF0_RME_ENABLE                       (0x1UL<<4)
N#define DEV_UDSP_BIST_CFG_BUF0_RME_MASK                         (0x1UL<<4)
N#define DEV_UDSP_BIST_CFG_BUF0_RM_MASK                          (0xfUL<<0)
N/****uDSP_BIST_CFG end****/
N
N
N/***********************************uDSP_BIST_EN***********************************/
N#define DEV_UDSP_BIST_EN_BUF1_BIST_EN_DISABLE                   (0x0UL<<1)
N#define DEV_UDSP_BIST_EN_BUF1_BIST_EN_ENABLE                    (0x1UL<<1)
N#define DEV_UDSP_BIST_EN_BUF1_BIST_EN_MASK                      (0x1UL<<1)
N#define DEV_UDSP_BIST_EN_BUF0_BIST_EN_DISABLE                   (0x0UL<<0)
N#define DEV_UDSP_BIST_EN_BUF0_BIST_EN_ENABLE                    (0x1UL<<0)
N#define DEV_UDSP_BIST_EN_BUF0_BIST_EN_MASK                      (0x1UL<<0)
N/****uDSP_BIST_EN end****/
N
N
N/***********************************uDSP_BIST_DONE***********************************/
N#define DEV_UDSP_BIST_DONE_BUF1_BIST_DONE_BISTBUSY              (0x0UL<<1)
N#define DEV_UDSP_BIST_DONE_BUF1_BIST_DONE_BISTDONE              (0x1UL<<1)
N#define DEV_UDSP_BIST_DONE_BUF1_BIST_DONE_MASK                  (0x1UL<<1)
N#define DEV_UDSP_BIST_DONE_BUF0_BIST_DONE_BISTBUSY              (0x0UL<<0)
N#define DEV_UDSP_BIST_DONE_BUF0_BIST_DONE_BISTDONE              (0x1UL<<0)
N#define DEV_UDSP_BIST_DONE_BUF0_BIST_DONE_MASK                  (0x1UL<<0)
N/****uDSP_BIST_DONE end****/
N
N
N/***********************************uDSP_BIST_FAIL***********************************/
N#define DEV_UDSP_BIST_FAIL_BUF1_BIST_FAIL_BISTBUSYORBISTOK      (0x0UL<<1)
N#define DEV_UDSP_BIST_FAIL_BUF1_BIST_FAIL_BISTFAIL              (0x1UL<<1)
N#define DEV_UDSP_BIST_FAIL_BUF1_BIST_FAIL_MASK                  (0x1UL<<1)
N#define DEV_UDSP_BIST_FAIL_BUF0_BIST_FAIL_BISTBUSYORBISTOK      (0x0UL<<0)
N#define DEV_UDSP_BIST_FAIL_BUF0_BIST_FAIL_BISTFAIL              (0x1UL<<0)
N#define DEV_UDSP_BIST_FAIL_BUF0_BIST_FAIL_MASK                  (0x1UL<<0)
N/****uDSP_BIST_FAIL end****/
N
N
N/***********************************uDSP_CHN register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    SLA;                                     /* 0x0    uDSP Channel 0 Source Lower ADDR */
X    volatile    uint32_t    SLA;                                      
N    __IO    uint32_t    SUA;                                     /* 0x4    uDSP Channel 0 Source Upper ADDR */
X    volatile    uint32_t    SUA;                                      
N    __IO    uint32_t    SCA;                                     /* 0x8    uDSP Channel 0 Source Current ADDR */
X    volatile    uint32_t    SCA;                                      
N    __IO    uint32_t    SMF;                                     /* 0xc    uDSP Channel 0 Source Memory Format */
X    volatile    uint32_t    SMF;                                      
N    __IO    uint32_t    DLA;                                     /* 0x10    uDSP Channel 0 Destination Lower ADDR */
X    volatile    uint32_t    DLA;                                      
N    __IO    uint32_t    DUA;                                     /* 0x14    uDSP Channel 0 Destination Upper ADDR */
X    volatile    uint32_t    DUA;                                      
N    __IO    uint32_t    DCA;                                     /* 0x18    uDSP Channel 0 Destination Current ADDR */
X    volatile    uint32_t    DCA;                                      
N    __IO    uint32_t    DMF;                                     /* 0x1c    uDSP Channel 0 Destination Memory Format */
X    volatile    uint32_t    DMF;                                      
N    __IO    uint32_t    LMF0;                                    /* 0x20    uDSP Channel 0 Local Memory Format 0 */
X    volatile    uint32_t    LMF0;                                     
N    __IO    uint32_t    LMF1;                                    /* 0x24    uDSP Channel 0 Local Memory Format 1 */
X    volatile    uint32_t    LMF1;                                     
N    __IO    uint32_t    LMF2;                                    /* 0x28    uDSP Channel 0 Local Memory Format 2 */
X    volatile    uint32_t    LMF2;                                     
N    __IO    uint32_t    LMF3;                                    /* 0x2c    uDSP Channel 0 Local Memory Format 3 */
X    volatile    uint32_t    LMF3;                                     
N    __IO    uint32_t    LMF4;                                    /* 0x30    uDSP Channel 0 Local Memory Format 4 */
X    volatile    uint32_t    LMF4;                                     
N            uint32_t    RESERVED0[19];
N    __IO    uint32_t    CFG0;                                    /* 0x80    uDSP Channel 0 Configure 0 */
X    volatile    uint32_t    CFG0;                                     
N    __IO    uint32_t    CFG1;                                    /* 0x84    uDSP Channel 0 Configure 1 */
X    volatile    uint32_t    CFG1;                                     
N            uint32_t    RESERVED1[30];
N}uDSP_CHN_RegDef;
N/****uDSP_CHN end****/
N
N/***********************************DEV_UDSP register***********************************/
Ntypedef struct{
N
N            uDSP_CHN_RegDef    CHN[8];                                  /* 0x0    uDSP Channel 0 Source Lower ADDR */
N            uint32_t    RESERVED0[512];
N    __IO    uint32_t    EN;                                      /* 0x1000    uDSP Channel 1 Source Upper ADDR */
X    volatile    uint32_t    EN;                                       
N    __IO    uint32_t    IE;                                      /* 0x1004    uDSP Channel 1 Source Memory Format */
X    volatile    uint32_t    IE;                                       
N    __IO    uint32_t    PD;                                      /* 0x1008    uDSP Channel 1 Destination Upper ADDR */
X    volatile    uint32_t    PD;                                       
N            uint32_t    RESERVED1[1021];
N    __IO    uint32_t    BIST_CFG;                                /* 0x2000    uDSP Channel 1 Destination Memory Format */
X    volatile    uint32_t    BIST_CFG;                                 
N    __IO    uint32_t    BIST_EN;                                 /* 0x2004    uDSP Channel 1 Local Memory Format 1 */
X    volatile    uint32_t    BIST_EN;                                  
N    __I     uint32_t    BIST_DONE;                               /* 0x2008    uDSP Channel 1 Local Memory Format 3 */
X    volatile const     uint32_t    BIST_DONE;                                
N    __I     uint32_t    BIST_FAIL;                               /* 0x200c    uDSP Channel 1 Configure 0 */
X    volatile const     uint32_t    BIST_FAIL;                                
N}DEV_UDSP_RegDef;
N/****DEV_UDSP end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 43 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_dmac.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_dmac.h" 1
N#ifndef __DEV_DMAC_H__
N#define __DEV_DMAC_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************DMA_CHNn_SSA***********************************/
N#define DEV_DMAC_DMA_CHNn_SSA_SRC_START_ADDR_MASK               (0xffffffffUL<<0)
N/****DMA_CHNn_SSA end****/
N
N
N/***********************************DMA_CHNn_SOA***********************************/
N#define DEV_DMAC_DMA_CHNn_SOA_SRC_SLOT_OFFSET(_total_)          (((_total_)-1)<<16)
N#define DEV_DMAC_DMA_CHNn_SOA_SRC_SLOT_OFFSET_MASK              (0xffffUL<<16)
N#define DEV_DMAC_DMA_CHNn_SOA_SRC_WORD_OFFSET(_total_)          (((_total_)-1)<<0)
N#define DEV_DMAC_DMA_CHNn_SOA_SRC_WORD_OFFSET_MASK              (0xffffUL<<0)
N/****DMA_CHNn_SOA end****/
N
N
N/***********************************DMA_CHNn_DSA***********************************/
N#define DEV_DMAC_DMA_CHNn_DSA_DST_START_ADDR_MASK               (0xffffffffUL<<0)
N/****DMA_CHNn_DSA end****/
N
N
N/***********************************DMA_CHNn_DOA***********************************/
N#define DEV_DMAC_DMA_CHNn_DOA_DST_SLOT_OFFSET(_total_)          (((_total_)-1)<<16)
N#define DEV_DMAC_DMA_CHNn_DOA_DST_SLOT_OFFSET_MASK              (0xffffUL<<16)
N#define DEV_DMAC_DMA_CHNn_DOA_DST_WORD_OFFSET(_total_)          (((_total_)-1)<<0)
N#define DEV_DMAC_DMA_CHNn_DOA_DST_WORD_OFFSET_MASK              (0xffffUL<<0)
N/****DMA_CHNn_DOA end****/
N
N
N/***********************************DMA_CHNn_LEN***********************************/
N#define DEV_DMAC_DMA_CHNn_LEN_SLOT_NUM(_total_)                 (((_total_)-1)<<16)
N#define DEV_DMAC_DMA_CHNn_LEN_SLOT_NUM_MASK                     (0xffffUL<<16)
N#define DEV_DMAC_DMA_CHNn_LEN_BYTE_NUM(_total_)                 (((_total_)-1)<<0)
N#define DEV_DMAC_DMA_CHNn_LEN_BYTE_NUM_MASK                     (0xffffUL<<0)
N/****DMA_CHNn_LEN end****/
N
N
N/***********************************DMA_CHNn_CFG***********************************/
N#define DEV_DMAC_DMA_CHNn_CFG_Reducer_NORMAL_BURSTTRANSFER      (0x0UL<<30)
N#define DEV_DMAC_DMA_CHNn_CFG_Reducer_PIPELINESINGLETRANSFER    (0x1UL<<30)
N#define DEV_DMAC_DMA_CHNn_CFG_Reducer_MASK                      (0x1UL<<30)
N#define DEV_DMAC_DMA_CHNn_CFG_CLK_ON_CLOCKISGATEDIFDMADISABLED  (0x0UL<<29)
N#define DEV_DMAC_DMA_CHNn_CFG_CLK_ON_CLOCKALWAYSON              (0x1UL<<29)
N#define DEV_DMAC_DMA_CHNn_CFG_CLK_ON_MASK                       (0x1UL<<29)
N#define DEV_DMAC_DMA_CHNn_CFG_PAUSE_WORK                        (0x0UL<<28)
N#define DEV_DMAC_DMA_CHNn_CFG_PAUSE_PAUSE                       (0x1UL<<28)
N#define DEV_DMAC_DMA_CHNn_CFG_PAUSE_MASK                        (0x1UL<<28)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_WIDTH_08BIT                   (0x0UL<<26)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_WIDTH_16BIT                   (0x1UL<<26)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_WIDTH_24BIT                   (0x2UL<<26)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_WIDTH_32BIT                   (0x3UL<<26)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_WIDTH_MASK                    (0x3UL<<26)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_DLS_LOW_24BIT                 (0x0UL<<25)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_DLS_HIGH24BIT                 (0x1UL<<25)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_DLS_MASK                      (0x1UL<<25)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_IFS_MASK                      (0x1fUL<<20)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_BURST_LEN_SINGLE              (0x0UL<<18)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_BURST_LEN_BURST2              (0x1UL<<18)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_BURST_LEN_BURST4              (0x2UL<<18)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_BURST_LEN_BURST8              (0x3UL<<18)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_BURST_LEN_MASK                (0x3UL<<18)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_INC_FIX                       (0x0UL<<17)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_INC_INCREMENT                 (0x1UL<<17)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_INC_MASK                      (0x1UL<<17)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_SLV_MEMORY                    (0x0UL<<16)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_SLV_DEVICE                    (0x1UL<<16)
N#define DEV_DMAC_DMA_CHNn_CFG_DST_SLV_MASK                      (0x1UL<<16)
N#define DEV_DMAC_DMA_CHNn_CFG_RELOAD_DISABLE                    (0x0UL<<15)
N#define DEV_DMAC_DMA_CHNn_CFG_RELOAD_ENABLE                     (0x1UL<<15)
N#define DEV_DMAC_DMA_CHNn_CFG_RELOAD_MASK                       (0x1UL<<15)
N#define DEV_DMAC_DMA_CHNn_CFG_CHN_PRIO_MASK                     (0x7UL<<12)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_WIDTH_08BIT                   (0x0UL<<10)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_WIDTH_16BIT                   (0x1UL<<10)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_WIDTH_24BIT                   (0x2UL<<10)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_WIDTH_32BIT                   (0x3UL<<10)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_WIDTH_MASK                    (0x3UL<<10)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_DLS_LOW_24BIT                 (0x0UL<<9)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_DLS_HIGH24BIT                 (0x1UL<<9)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_DLS_MASK                      (0x1UL<<9)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_IFS_MASK                      (0x1fUL<<4)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_BURST_LEN_SINGLE              (0x0UL<<2)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_BURST_LEN_BURST2              (0x1UL<<2)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_BURST_LEN_BURST4              (0x2UL<<2)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_BURST_LEN_BURST8              (0x3UL<<2)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_BURST_LEN_MASK                (0x3UL<<2)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_INC_FIX                       (0x0UL<<1)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_INC_INCREMENT                 (0x1UL<<1)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_INC_MASK                      (0x1UL<<1)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_SLV_MEMORY                    (0x0UL<<0)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_SLV_DEVICE                    (0x1UL<<0)
N#define DEV_DMAC_DMA_CHNn_CFG_SRC_SLV_MASK                      (0x1UL<<0)
N/****DMA_CHNn_CFG end****/
N
N
N/***********************************DMA_CHNn_STA***********************************/
N#define DEV_DMAC_DMA_CHNn_STA_RMN_SLOT_CNT_MASK                 (0xffffUL<<16)
N#define DEV_DMAC_DMA_CHNn_STA_RMN_BYTE_CNT_MASK                 (0xffffUL<<0)
N/****DMA_CHNn_STA end****/
N
N
N/***********************************DMA_EN***********************************/
N#define DEV_DMAC_DMA_EN_CHN_EN_WE_MASK                          (0xffUL<<16)
N#define DEV_DMAC_DMA_EN_CHN_EN_MASK                             (0xffUL<<0)
N/****DMA_EN end****/
N
N
N/***********************************DMA_IE***********************************/
N#define DEV_DMAC_DMA_IE_SLT_END_IE_MASK                         (0xffUL<<16)
N#define DEV_DMAC_DMA_IE_HF_END_IE_MASK                          (0xffUL<<8)
N#define DEV_DMAC_DMA_IE_TR_END_IE_MASK                          (0xffUL<<0)
N/****DMA_IE end****/
N
N
N/***********************************DMA_PD***********************************/
N#define DEV_DMAC_DMA_PD_SLT_END_PD_MASK                         (0xffUL<<16)
N#define DEV_DMAC_DMA_PD_HF_END_PD_MASK                          (0xffUL<<8)
N#define DEV_DMAC_DMA_PD_TR_END_PD_MASK                          (0xffUL<<0)
N/****DMA_PD end****/
N
N
N/***********************************DMA_CHN register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    SSA;                                     /* 0x0    CHN 0 Source Start Address */
X    volatile    uint32_t    SSA;                                      
N    __IO    uint32_t    SOA;                                     /* 0x4    CHN 0 Source Offset Address */
X    volatile    uint32_t    SOA;                                      
N    __IO    uint32_t    DSA;                                     /* 0x8    CHN 0 Destination Start Address */
X    volatile    uint32_t    DSA;                                      
N    __IO    uint32_t    DOA;                                     /* 0xc    CHN 0 Destination Offset Address */
X    volatile    uint32_t    DOA;                                      
N    __IO    uint32_t    LEN;                                     /* 0x10    CHN 0 Transfer Block Length */
X    volatile    uint32_t    LEN;                                      
N    __IO    uint32_t    CFG;                                     /* 0x14    CHN 0 Configure */
X    volatile    uint32_t    CFG;                                      
N    __I     uint32_t    STA;                                     /* 0x18    CHN 0 Status */
X    volatile const     uint32_t    STA;                                      
N            uint32_t    RESERVED0[57];
N}DMA_CHN_RegDef;
N/****DMA_CHN end****/
N
N/***********************************DEV_DMAC register***********************************/
Ntypedef struct{
N
N            DMA_CHN_RegDef    DMA_CHN[8];                              /* 0x0    CHN 0 Source Start Address */
N            uint32_t    RESERVED0[512];
N    __IO    uint32_t    DMA_EN;                                  /* 0x1000    CHN 2 Source Start Address */
X    volatile    uint32_t    DMA_EN;                                   
N    __IO    uint32_t    DMA_IE;                                  /* 0x1004    CHN 2 Source Offset Address */
X    volatile    uint32_t    DMA_IE;                                   
N    __IO    uint32_t    DMA_PD;                                  /* 0x1008    CHN 2 Destination Start Address */
X    volatile    uint32_t    DMA_PD;                                   
N}DEV_DMAC_RegDef;
N/****DEV_DMAC end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N
Ntypedef enum
N{
N	DMA_SLOT_TRANSFER_END =1UL<<16,
N	DMA_Half_TRANSFER_END =1UL<<8,
N	DMA_TRANSFER_END =1UL,
N}DMA_ITTypeEnum;
N
Ntypedef enum
N{
N	DMA_DEVICE_SEL_NONE=0UL,
N	DMA_DEVICE_SEL_SPI0_TX=0UL,
N	DMA_DEVICE_SEL_SPI0_RX=0UL,
N	DMA_DEVICE_SEL_SPI1_TX=1UL,
N	DMA_DEVICE_SEL_SPI1_RX=1UL,
N	DMA_DEVICE_SEL_UART0_TX=2UL,
N	DMA_DEVICE_SEL_UART0_RX=2UL,
N	DMA_DEVICE_SEL_UART1_TX=3UL,
N	DMA_DEVICE_SEL_UART1_RX=3UL,
N	DMA_DEVICE_SEL_UART2_TX=4UL,
N	DMA_DEVICE_SEL_UART2_RX=4UL,
N	DMA_DEVICE_SEL_ASI0_TX=5UL,
N	DMA_DEVICE_SEL_ASI0_RX=5UL,
N	DMA_DEVICE_SEL_ASI1_TX=6UL,
N	DMA_DEVICE_SEL_ASI1_RX=6UL,
N	DMA_DEVICE_SEL_PWM_FIFO0=7UL,
N	DMA_DEVICE_SEL_PWM_FIFO1=8UL,
N	DMA_DEVICE_SEL_SDC_TX=9UL,
N	DMA_DEVICE_SEL_SDC_RX=9UL,
N	DMA_DEVICE_SEL_DAC_TX=10UL,
N	DMA_DEVICE_SEL_ADC_RX=10UL,
N	DMA_DEVICE_SEL_NOR_RX=11UL,
N	DMA_DEVICE_SEL_SRC_CHN0_TX=12UL,
N	DMA_DEVICE_SEL_SRC_CHN0_RX=12UL,
N	DMA_DEVICE_SEL_SRC_CHN1_TX=13UL,
N	DMA_DEVICE_SEL_SRC_CHN1_RX=13UL,
N	DMA_DEVICE_SEL_USB_TX1 = 16UL,
N	DMA_DEVICE_SEL_USB_RX1 = 16UL,
N	DMA_DEVICE_SEL_USB_TX2 = 17UL,
N	DMA_DEVICE_SEL_USB_RX2 = 17UL,
N	DMA_DEVICE_SEL_USB_TX3 = 18UL,
N	DMA_DEVICE_SEL_USB_RX3 = 18UL,
N	DMA_DEVICE_SEL_USB_TX4 = 19UL,
N	DMA_DEVICE_SEL_USB_RX4 = 19UL,
N	DMA_DEVICE_SEL_USB_TX5 = 20UL,
N	DMA_DEVICE_SEL_USB_RX5 = 20UL,
N	DMA_DEVICE_SEL_USB_TX6 = 21UL,
N	DMA_DEVICE_SEL_USB_RX6 = 21UL,
N	DMA_DEVICE_SEL_USB_TX7 = 22UL,
N	DMA_DEVICE_SEL_USB_RX7 = 22UL,
N	DMA_DEVICE_SEL_TIME0_RX = 24UL,
N	DMA_DEVICE_SEL_TIME1_RX = 25UL,
N	DMA_DEVICE_SEL_TIME2_RX = 26UL,
N	DMA_DEVICE_SEL_TIME3_RX = 27UL,
N	DMA_DEVICE_SEL_CAMERA_RX=28UL,
N	DMA_DEVICE_SEL_UART3_TX=29UL,
N	DMA_DEVICE_SEL_UART3_RX=29UL,
N}DMA_DeviceSelEnum;
N
Ntypedef enum
N{
N	DMA_DATA_WIDTH_8BIT=0UL,
N	DMA_DATA_WIDTH_16BIT=1UL,
N	DMA_DATA_WIDTH_24BIT=2UL,
N	DMA_DATA_WIDTH_32BIT=3UL
N}DMA_DataWidthEnum;
N
Ntypedef enum
N{
N	DMA_DATA_LOCATION_SEL_LOW=0UL,
N	DMA_DATA_LOCATION_SEL_HIGH=1UL,
N}DMA_DataLocationSelEnum;
N
Ntypedef enum
N{
N	DMA_BURST_LENGTH_BURST1=0UL,
N	DMA_BURST_LENGTH_BURST2=1UL,
N	DMA_BURST_LENGTH_BURST4=2UL,
N	DMA_BURST_LENGTH_BURST8=3UL
N}DMA_BurstLengthEnum;
N
Ntypedef enum
N{
N	DMA_ADDRESS_TYPE_FIX=0UL,
N	DMA_ADDRESS_TYPE_INC=1UL,
N}DMA_AddrTypeEnum;
N
Ntypedef enum
N{
N	DMA_ADDRESS_SLAVE_MEMORY=0UL,
N	DMA_ADDRESS_SLAVE_DEVICE=1UL,
N}DMA_AddrSlaveEnum;
N
Ntypedef enum
N{
N	DMA_DIR_MEMORY_TO_MEMORY	 	 = 0UL,
N	DMA_DIR_MEMORY_TO_PERIPHERAL 	 = 1UL,
N	DMA_DIR_PERIPHERAL_TO_MEMORY 	 = 2UL,
N	DMA_DIR_PERIPHERAL_TO_PERIPHERAL = 3UL,
N}DMA_TransferDirEnum;
N
Ntypedef struct
N{
N	uint32_t src_start_addr;///<源地址
N	uint32_t src_slot_offset;///<源数据存储形式中每个槽之间（头到头）的间距偏移 1-0x10000
N	uint32_t src_word_offset;///<源数据在每个槽中的有效数据间（头到头）的间距偏移 1-0x10000
N	uint32_t src_width;///<源数据搬运宽度	DMA_DataWidthEnum
N	uint32_t src_dls;///<源地址设置，当src_width为24比特有效 DMA_DataLocationSelEnum
N	uint32_t src_ifs;///<源地址选择，需要与src_start_addr相符合 DMA_DeviceSelEnum
N	uint32_t src_burst_len;///<源每次搬运的长度 DMA_BurstLengthEnum
N	uint32_t src_addr_type;///<源地址增长方式 DMA_AddrTypeEnum
N	uint32_t src_slave;///<源数据存放的存储位置（memory或外设）DMA_AddrSlaveEnum
N
N	uint32_t dst_start_addr;///<目的地址
N	uint32_t dst_slot_offset;///<目的数据存储形式中每个槽之间（头到头）的间距偏移 1-0x10000
N	uint32_t dst_word_offset;///<目的数据在每个槽中的有效数据间（头到头）的间距偏移 1-0x10000
N	uint32_t dst_width;///<目的数据搬运宽度 DMA_DataWidthEnum
N	uint32_t dst_dls;///<目的地址设置，当src_width为24比特有效 DMA_DataLocationSelEnum
N	uint32_t dst_ifs;///<目的地址选择，需要与src_start_addr相符合 DMA_DeviceSelEnum
N	uint32_t dst_burst_len;///<目的每次搬运的长度 DMA_BurstLengthEnum
N	uint32_t dst_addr_type;///<目的地址增长方式 DMA_AddrTypeEnum
N	uint32_t dst_slave;///<目的数据存放的存储位置（memory或外设）DMA_AddrSlaveEnum
N
N
N	uint32_t slot_num;///<搬运总数据存储形式槽的数量，1-0x10000
N	uint32_t byte_num;///<数据总数据存储形式槽中的数据数量，1-0x10000
N	uint32_t priority;///<通道优先级，数值范围0-7，数据越大优先级越高
N	uint32_t reload_en;///<重载使能 ENABLE DISABLE
N
N}DMA_ConfigTypeDef;
N
N
Nvoid DMA_Config(uint32_t channelx,DMA_ConfigTypeDef *dma_config_struct);
Nvoid DMA_AccelerateCmd(uint32_t channelx, uint32_t state);
Nvoid __DMA_Cmd(uint32_t channelx, uint32_t state);
Nuint32_t __DMA_GetCmdStatus(uint32_t channelx);
Nvoid __DMA_ITConfig(uint32_t channelx,uint32_t it_type ,uint32_t state);
Nuint32_t __DMA_GetITStatus(uint32_t channelx,uint32_t it_type);
Nvoid __DMA_ClearITPendingBit(uint32_t channelx,uint32_t it_type);
N
Nvoid DMA_DMAPause(uint32_t channelx,uint32_t state);
N
Nvoid DMA_SetSourceAddr(uint32_t channelx,uint32_t addr);
Nuint32_t DMA_GetSourceAddr(uint32_t channelx );
Nvoid DMA_SetDestinationAddr(uint32_t channelx,uint32_t addr);
Nuint32_t DMA_GetDestinationAddr(uint32_t channelx );
N
Nvoid DMA_SetSourceBurstLength(uint32_t channelx,uint32_t BurstLength);
Nvoid DMA_SetDestinationBurstLength(uint32_t channelx,uint32_t BurstLength);
N
Nvoid DMA_SetSourceDataWidth(uint32_t channelx,uint32_t DataWidth);
Nvoid DMA_SetDestinationDataWidth(uint32_t channelx,uint32_t DataWidth);
N
Nvoid DMA_SetSourceSlotOffset(uint32_t channelx,uint32_t SlotOffset);
Nvoid DMA_SetSourceWordOffset(uint32_t channelx,uint32_t WordOffset);
Nvoid DMA_SetDestinationSlotOffset(uint32_t channelx,uint32_t SlotOffset);
Nvoid DMA_SetDestinationWordOffset(uint32_t channelx,uint32_t WordOffset);
Nvoid DMA_SetSlotNum(uint32_t channelx,uint32_t SlotNum);
Nuint16_t DMA_GetSlotNum(uint32_t channelx);
Nvoid DMA_SetByteNum(uint32_t channelx,uint32_t ByteNum);
Nuint16_t DMA_GetByteNum(uint32_t channelx);
N#endif
L 44 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_npu.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_npu.h" 1
N#ifndef __DEV_NPU_H__
N#define __DEV_NPU_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************NPU_DBG***********************************/
N#define DEV_NPU_DBG_ACTV_STATE_MASK                             (0x3UL<<30)
N#define DEV_NPU_DBG_CONV_STATE_MASK                             (0x7UL<<27)
N#define DEV_NPU_DBG_NPU_REQ                                     (0x1UL<<26)
N#define DEV_NPU_DBG_LYIDX_MASK                                  (0x7fffUL<<11)
N#define DEV_NPU_DBG_PREF_STATE_MASK                             (0x7UL<<8)
N#define DEV_NPU_DBG_FSBLAST_DIM4                                (0x1UL<<7)
N#define DEV_NPU_DBG_FSB1ST_DIM4                                 (0x1UL<<6)
N#define DEV_NPU_DBG_FSBLAST_DIM3                                (0x1UL<<5)
N#define DEV_NPU_DBG_FSB1ST_DIM3                                 (0x1UL<<4)
N#define DEV_NPU_DBG_LOOP_INC                                    (0x1UL<<3)
N#define DEV_NPU_DBG_TOP_STATE_MASK                              (0x7UL<<0)
N/****NPU_DBG end****/
N
N
N/***********************************NPU_PKL_ADR***********************************/
N#define DEV_NPU_PKL_ADR_MASK                                    (0xffffffffUL<<0)
N/****NPU_PKL_ADR end****/
N
N
N/***********************************NPU_PKU_ADR***********************************/
N#define DEV_NPU_PKU_ADR_MASK                                    (0xffffffffUL<<0)
N/****NPU_PKU_ADR end****/
N
N
N/***********************************NPU_PKC_ADR***********************************/
N#define DEV_NPU_PKC_ADR_MASK                                    (0xffffffffUL<<0)
N/****NPU_PKC_ADR end****/
N
N
N/***********************************NPU_MDL_ADR***********************************/
N#define DEV_NPU_MDL_ADR_MASK                                    (0xffffffffUL<<0)
N/****NPU_MDL_ADR end****/
N
N
N/***********************************NPU_PING_ADR***********************************/
N#define DEV_NPU_PING_ADR_MASK                                   (0xffffffffUL<<0)
N/****NPU_PING_ADR end****/
N
N
N/***********************************NPU_PONG_ADR***********************************/
N#define DEV_NPU_PONG_ADR_MASK                                   (0xffffffffUL<<0)
N/****NPU_PONG_ADR end****/
N
N
N/***********************************NPU_PPLEN***********************************/
N#define DEV_NPU_PPLEN_MASK                                      (0xffffffffUL<<0)
N/****NPU_PPLEN end****/
N
N
N/***********************************NPU_BIA_ADR***********************************/
N#define DEV_NPU_BIA_ADR_MASK                                    (0xffffffffUL<<0)
N/****NPU_BIA_ADR end****/
N
N
N/***********************************NPU_RES_ADR***********************************/
N#define DEV_NPU_RES_ADR_MASK                                    (0xffffffffUL<<0)
N/****NPU_RES_ADR end****/
N
N
N/***********************************NPU_EN***********************************/
N#define DEV_NPU_EN_EN                                           (0x1UL<<0)
N/****NPU_EN end****/
N
N
N/***********************************NPU_IE***********************************/
N#define DEV_NPU_IE_TAB_IE                                       (0x1UL<<1)
N#define DEV_NPU_IE_RES_IE                                       (0x1UL<<0)
N/****NPU_IE end****/
N
N
N/***********************************NPU_PD***********************************/
N#define DEV_NPU_PD_TAB_PD                                       (0x1UL<<1)
N#define DEV_NPU_PD_RES_PD                                       (0x1UL<<0)
N/****NPU_PD end****/
N
N
N/***********************************NPU_MBK***********************************/
N#define DEV_NPU_MBK_BSSPAN_MASK                                 (0xffUL<<24)
N#define DEV_NPU_MBK_BSID_MASK                                   (0xffUL<<16)
N#define DEV_NPU_MBK_SKIPOU                                      (0x1UL<<15)
N#define DEV_NPU_MBK_SKIPIN                                      (0x1UL<<14)
N/****NPU_MBK end****/
N
N
N/***********************************NPU_PPRDY***********************************/
N#define DEV_NPU_PPRDY_PPRDY                                     (0x1UL<<0)
N/****NPU_PPRDY end****/
N
N
N/***********************************NPU_RAM***********************************/
N#define DEV_NPU_RAM_LS                                          (0x1UL<<5)
N#define DEV_NPU_RAM_RME                                         (0x1UL<<4)
N#define DEV_NPU_RAM_RM_MASK                                     (0xfUL<<0)
N/****NPU_RAM end****/
N
N
N/***********************************NPU_BIST_TEST***********************************/
N#define DEV_NPU_BIST_TEST_BTEST                                 (0x1UL<<0)
N/****NPU_BIST_TEST end****/
N
N
N/***********************************NPU_BIST_DONE***********************************/
N#define DEV_NPU_BIST_DONE_BDONE                                 (0x1UL<<0)
N/****NPU_BIST_DONE end****/
N
N
N/***********************************NPU_BIST_FAIL***********************************/
N#define DEV_NPU_BIST_FAIL_BFAIL                                 (0x1UL<<0)
N/****NPU_BIST_FAIL end****/
N
N
N/***********************************NPU_WCYC***********************************/
N#define DEV_NPU_WCYC_MASK                                       (0xffffffffUL<<0)
N/****NPU_WCYC end****/
N
N
N/***********************************NPU_TCYC***********************************/
N#define DEV_NPU_TCYC_MASK                                       (0xffffffffUL<<0)
N/****NPU_TCYC end****/
N
N
N/***********************************DEV_NPU register***********************************/
Ntypedef struct{
N
N    __I     uint32_t    DBG;                                     /* 0x0    Debug signals */
X    volatile const     uint32_t    DBG;                                      
N    __IO    uint32_t    PKL_ADR;                                 /* 0x4    Input packet buffer low address, inclusive, align with 4 */
X    volatile    uint32_t    PKL_ADR;                                  
N    __IO    uint32_t    PKU_ADR;                                 /* 0x8    Input packet buffer upper address, exclusive, align with 4 */
X    volatile    uint32_t    PKU_ADR;                                  
N    __IO    uint32_t    PKC_ADR;                                 /* 0xc    Input packet current address, align with 4 */
X    volatile    uint32_t    PKC_ADR;                                  
N    __IO    uint32_t    MDL_ADR;                                 /* 0x10    MDL address, align with 4 */
X    volatile    uint32_t    MDL_ADR;                                  
N    __IO    uint32_t    PING_ADR;                                /* 0x14    Ping address, align with 4 */
X    volatile    uint32_t    PING_ADR;                                 
N    __IO    uint32_t    PONG_ADR;                                /* 0x18    Pong address, align with 4 */
X    volatile    uint32_t    PONG_ADR;                                 
N    __IO    uint32_t    PPLEN;                                   /* 0x1c    Ping/pong buffer length in byte, align with 4 */
X    volatile    uint32_t    PPLEN;                                    
N    __IO    uint32_t    BIA_ADR;                                 /* 0x20    Bias address, align with 4 */
X    volatile    uint32_t    BIA_ADR;                                  
N    __IO    uint32_t    RES_ADR;                                 /* 0x24    Result address, align with 4 */
X    volatile    uint32_t    RES_ADR;                                  
N    __IO    uint32_t    EN;                                      /* 0x28    NPU enable */
X    volatile    uint32_t    EN;                                       
N    __IO    uint32_t    IE;                                      /* 0x2c    Interrupt enable */
X    volatile    uint32_t    IE;                                       
N    __IO    uint32_t    PD;                                      /* 0x30    Interrupt pending */
X    volatile    uint32_t    PD;                                       
N    __IO    uint32_t    MBK;                                     /* 0x34    MBK settings */
X    volatile    uint32_t    MBK;                                      
N    __IO    uint32_t    PPRDY;                                   /* 0x38    Ping/pong ready */
X    volatile    uint32_t    PPRDY;                                    
N    __IO    uint32_t    RAM;                                     /* 0x3c    Sram rm/rme settings */
X    volatile    uint32_t    RAM;                                      
N    __IO    uint32_t    BIST_TEST;                               /* 0x40    Bist Start */
X    volatile    uint32_t    BIST_TEST;                                
N    __I     uint32_t    BIST_DONE;                               /* 0x44    Bist Done */
X    volatile const     uint32_t    BIST_DONE;                                
N    __I     uint32_t    BIST_FAIL;                               /* 0x48    Bist Fail */
X    volatile const     uint32_t    BIST_FAIL;                                
N    __IO    uint32_t    WCYC;                                    /* 0x4c    Wait-for-knl cycle counter */
X    volatile    uint32_t    WCYC;                                     
N    __IO    uint32_t    TCYC;                                    /* 0x50    Total working cycle counter */
X    volatile    uint32_t    TCYC;                                     
N}DEV_NPU_RegDef;
N/****DEV_NPU end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 45 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_memc.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_memc.h" 1
N#ifndef __DEV_MEMC_H__
N#define __DEV_MEMC_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************MEMC_RAM0_CTL***********************************/
N#define DEV_MEMC_RAM0_CTL_LS_WORK                               (0x0UL<<6)
N#define DEV_MEMC_RAM0_CTL_LS_LOWPOWER                           (0x1UL<<6)
N#define DEV_MEMC_RAM0_CTL_LS_MASK                               (0x1UL<<6)
N#define DEV_MEMC_RAM0_CTL_TEST1                                 (0x1UL<<5)
N#define DEV_MEMC_RAM0_CTL_RME                                   (0x1UL<<4)
N#define DEV_MEMC_RAM0_CTL_RM_MASK                               (0xfUL<<0)
N/****MEMC_RAM0_CTL end****/
N
N
N/***********************************MEMC_RAM1_CTL***********************************/
N#define DEV_MEMC_RAM1_CTL_LS                                    (0x1UL<<6)
N#define DEV_MEMC_RAM1_CTL_TEST1                                 (0x1UL<<5)
N#define DEV_MEMC_RAM1_CTL_RME                                   (0x1UL<<4)
N#define DEV_MEMC_RAM1_CTL_RM_MASK                               (0xfUL<<0)
N/****MEMC_RAM1_CTL end****/
N
N
N/***********************************MEMC_RAM2_CTL***********************************/
N#define DEV_MEMC_RAM2_CTL_LS                                    (0x1UL<<6)
N#define DEV_MEMC_RAM2_CTL_TEST1                                 (0x1UL<<5)
N#define DEV_MEMC_RAM2_CTL_RME                                   (0x1UL<<4)
N#define DEV_MEMC_RAM2_CTL_RM_MASK                               (0xfUL<<0)
N/****MEMC_RAM2_CTL end****/
N
N
N/***********************************MEMC_RAM3_CTL***********************************/
N#define DEV_MEMC_RAM3_CTL_LS                                    (0x1UL<<6)
N#define DEV_MEMC_RAM3_CTL_TEST1                                 (0x1UL<<5)
N#define DEV_MEMC_RAM3_CTL_RME                                   (0x1UL<<4)
N#define DEV_MEMC_RAM3_CTL_RM_MASK                               (0xfUL<<0)
N/****MEMC_RAM3_CTL end****/
N
N
N/***********************************MEMC_RAM4_CTL***********************************/
N#define DEV_MEMC_RAM4_CTL_LS                                    (0x1UL<<6)
N#define DEV_MEMC_RAM4_CTL_TEST1                                 (0x1UL<<5)
N#define DEV_MEMC_RAM4_CTL_RME                                   (0x1UL<<4)
N#define DEV_MEMC_RAM4_CTL_RM_MASK                               (0xfUL<<0)
N/****MEMC_RAM4_CTL end****/
N
N
N/***********************************MEMC_RAM5_CTL***********************************/
N#define DEV_MEMC_RAM5_CTL_LS                                    (0x1UL<<6)
N#define DEV_MEMC_RAM5_CTL_TEST1                                 (0x1UL<<5)
N#define DEV_MEMC_RAM5_CTL_RME                                   (0x1UL<<4)
N#define DEV_MEMC_RAM5_CTL_RM_MASK                               (0xfUL<<0)
N/****MEMC_RAM5_CTL end****/
N
N
N/***********************************MEMC_RAM6_CTL***********************************/
N#define DEV_MEMC_RAM6_CTL_LS                                    (0x1UL<<6)
N#define DEV_MEMC_RAM6_CTL_TEST1                                 (0x1UL<<5)
N#define DEV_MEMC_RAM6_CTL_RME                                   (0x1UL<<4)
N#define DEV_MEMC_RAM6_CTL_RM_MASK                               (0xfUL<<0)
N/****MEMC_RAM6_CTL end****/
N
N
N/***********************************MEMC_RAM7_CTL***********************************/
N#define DEV_MEMC_RAM7_CTL_LS                                    (0x1UL<<6)
N#define DEV_MEMC_RAM7_CTL_TEST1                                 (0x1UL<<5)
N#define DEV_MEMC_RAM7_CTL_RME                                   (0x1UL<<4)
N#define DEV_MEMC_RAM7_CTL_RM_MASK                               (0xfUL<<0)
N/****MEMC_RAM7_CTL end****/
N
N
N/***********************************MEMC_ILM_CTL***********************************/
N#define DEV_MEMC_ILM_CTL_BROM_WDIS_BROMWRITEENABLE              (0x0UL<<7)
N#define DEV_MEMC_ILM_CTL_BROM_WDIS_BROMWRITEDISABLE             (0x1UL<<7)
N#define DEV_MEMC_ILM_CTL_BROM_WDIS_MASK                         (0x1UL<<7)
N#define DEV_MEMC_ILM_CTL_LS                                     (0x1UL<<6)
N#define DEV_MEMC_ILM_CTL_TEST1                                  (0x1UL<<5)
N#define DEV_MEMC_ILM_CTL_RME                                    (0x1UL<<4)
N#define DEV_MEMC_ILM_CTL_RM_MASK                                (0xfUL<<0)
N/****MEMC_ILM_CTL end****/
N
N
N/***********************************MEMC_DLM_CTL***********************************/
N#define DEV_MEMC_DLM_CTL_LS                                     (0x1UL<<6)
N#define DEV_MEMC_DLM_CTL_TEST1                                  (0x1UL<<5)
N#define DEV_MEMC_DLM_CTL_RME                                    (0x1UL<<4)
N#define DEV_MEMC_DLM_CTL_RM_MASK                                (0xfUL<<0)
N/****MEMC_DLM_CTL end****/
N
N
N/***********************************MEMC_BTB_CTL***********************************/
N#define DEV_MEMC_BTB_CTL_LS                                     (0x1UL<<6)
N#define DEV_MEMC_BTB_CTL_TEST1                                  (0x1UL<<5)
N#define DEV_MEMC_BTB_CTL_RME                                    (0x1UL<<4)
N#define DEV_MEMC_BTB_CTL_RM_MASK                                (0xfUL<<0)
N/****MEMC_BTB_CTL end****/
N
N
N/***********************************MEMC_ICACHE_CTL***********************************/
N#define DEV_MEMC_ICACHE_CTL_LS                                  (0x1UL<<6)
N#define DEV_MEMC_ICACHE_CTL_TEST1                               (0x1UL<<5)
N#define DEV_MEMC_ICACHE_CTL_RME                                 (0x1UL<<4)
N#define DEV_MEMC_ICACHE_CTL_RM_MASK                             (0xfUL<<0)
N/****MEMC_ICACHE_CTL end****/
N
N
N/***********************************MEMC_DCACHE_CTL***********************************/
N#define DEV_MEMC_DCACHE_CTL_LS                                  (0x1UL<<6)
N#define DEV_MEMC_DCACHE_CTL_TEST1                               (0x1UL<<5)
N#define DEV_MEMC_DCACHE_CTL_RME                                 (0x1UL<<4)
N#define DEV_MEMC_DCACHE_CTL_RM_MASK                             (0xfUL<<0)
N/****MEMC_DCACHE_CTL end****/
N
N
N/***********************************MEMC_RAM_SEL0***********************************/
N#define DEV_MEMC_RAM_SEL0_MEM_SEL_MASK                          (0xffffffffUL<<0)
N/****MEMC_RAM_SEL0 end****/
N
N
N/***********************************MEMC_RAM_SEL1***********************************/
N#define DEV_MEMC_RAM_SEL1_MEM_SEL_MASK                          (0xffffffffUL<<0)
N/****MEMC_RAM_SEL1 end****/
N
N
N/***********************************MEMC_BIST_TEST***********************************/
N#define DEV_MEMC_BIST_TEST_USB_RAM                              (0x1UL<<14)
N#define DEV_MEMC_BIST_TEST_CPU_RAM_MASK                         (0x3fUL<<8)
N#define DEV_MEMC_BIST_TEST_SYS_RAM_MASK                         (0xffUL<<0)
N/****MEMC_BIST_TEST end****/
N
N
N/***********************************MEMC_BIST_DONE***********************************/
N#define DEV_MEMC_BIST_DONE_USB_RAM                              (0x1UL<<14)
N#define DEV_MEMC_BIST_DONE_CPU_RAM_MASK                         (0x3fUL<<8)
N#define DEV_MEMC_BIST_DONE_SYS_RAM_MASK                         (0xffUL<<0)
N/****MEMC_BIST_DONE end****/
N
N
N/***********************************MEMC_BIST_FAIL***********************************/
N#define DEV_MEMC_BIST_FAIL_USB_RAM                              (0x1UL<<14)
N#define DEV_MEMC_BIST_FAIL_CPU_RAM_MASK                         (0x3fUL<<8)
N#define DEV_MEMC_BIST_FAIL_SYS_RAM_MASK                         (0xffUL<<0)
N/****MEMC_BIST_FAIL end****/
N
N
N/***********************************DEV_MEMC register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    RAM0_CTL;                                /* 0x0    RAM0 Control */
X    volatile    uint32_t    RAM0_CTL;                                 
N    __IO    uint32_t    RAM1_CTL;                                /* 0x4    RAM1 Control */
X    volatile    uint32_t    RAM1_CTL;                                 
N    __IO    uint32_t    RAM2_CTL;                                /* 0x8    RAM2 Control */
X    volatile    uint32_t    RAM2_CTL;                                 
N    __IO    uint32_t    RAM3_CTL;                                /* 0xc    RAM3 Control */
X    volatile    uint32_t    RAM3_CTL;                                 
N    __IO    uint32_t    RAM4_CTL;                                /* 0x10    RAM4 Control */
X    volatile    uint32_t    RAM4_CTL;                                 
N    __IO    uint32_t    RAM5_CTL;                                /* 0x14    RAM5 Control */
X    volatile    uint32_t    RAM5_CTL;                                 
N    __IO    uint32_t    RAM6_CTL;                                /* 0x18    RAM6 Control */
X    volatile    uint32_t    RAM6_CTL;                                 
N    __IO    uint32_t    RAM7_CTL;                                /* 0x1c    RAM7 Control */
X    volatile    uint32_t    RAM7_CTL;                                 
N    __IO    uint32_t    ILM_CTL;                                 /* 0x20    ILM RAM Control */
X    volatile    uint32_t    ILM_CTL;                                  
N    __IO    uint32_t    DLM_CTL;                                 /* 0x24    DLM RAM Control */
X    volatile    uint32_t    DLM_CTL;                                  
N    __IO    uint32_t    BTB_CTL;                                 /* 0x28    BTB RAM Control */
X    volatile    uint32_t    BTB_CTL;                                  
N    __IO    uint32_t    ICACHE_CTL;                              /* 0x2c    ICache RAM Control */
X    volatile    uint32_t    ICACHE_CTL;                               
N    __IO    uint32_t    DCACHE_CTL;                              /* 0x30    DCache RAM Control */
X    volatile    uint32_t    DCACHE_CTL;                               
N            uint32_t    RESERVED0[3];
N    __IO    uint32_t    RAM_SEL0;                                /* 0x40    RAM0 SEL */
X    volatile    uint32_t    RAM_SEL0;                                 
N    __IO    uint32_t    RAM_SEL1;                                /* 0x44    RAM1 SEL */
X    volatile    uint32_t    RAM_SEL1;                                 
N            uint32_t    RESERVED1[2];
N    __IO    uint32_t    BIST_TEST;                               /* 0x50    Bist Start */
X    volatile    uint32_t    BIST_TEST;                                
N    __I     uint32_t    BIST_DONE;                               /* 0x54    Bist Done */
X    volatile const     uint32_t    BIST_DONE;                                
N    __I     uint32_t    BIST_FAIL;                               /* 0x58    Bist Fail */
X    volatile const     uint32_t    BIST_FAIL;                                
N}DEV_MEMC_RegDef;
N/****DEV_MEMC end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 46 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_cache.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_cache.h" 1
N#ifndef __DEV_CACHE_H__
N#define __DEV_CACHE_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CACHE_RAM_CTL***********************************/
N#define DEV_CACHE_RAM_CTL_TEST1                                 (0x1UL<<6)
N#define DEV_CACHE_RAM_CTL_LS                                    (0x1UL<<5)
N#define DEV_CACHE_RAM_CTL_RME                                   (0x1UL<<4)
N#define DEV_CACHE_RAM_CTL_RM_MASK                               (0xfUL<<0)
N/****CACHE_RAM_CTL end****/
N
N
N/***********************************CACHE_BIST_TEST***********************************/
N#define DEV_CACHE_BIST_TEST_BIST_TEST                           (0x1UL<<0)
N/****CACHE_BIST_TEST end****/
N
N
N/***********************************CACHE_BIST_DONE***********************************/
N#define DEV_CACHE_BIST_DONE_BIST_DONE                           (0x1UL<<0)
N/****CACHE_BIST_DONE end****/
N
N
N/***********************************CACHE_BIST_FAIL***********************************/
N#define DEV_CACHE_BIST_FAIL_BIST_FAIL                           (0x1UL<<0)
N/****CACHE_BIST_FAIL end****/
N
N
N/***********************************DEV_CACHE register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    RAM_CTL;                                 /* 0x0    RAM Control */
X    volatile    uint32_t    RAM_CTL;                                  
N    __IO    uint32_t    BIST_TEST;                               /* 0x4    Bist Start */
X    volatile    uint32_t    BIST_TEST;                                
N    __IO    uint32_t    BIST_DONE;                               /* 0x8    Bist Done */
X    volatile    uint32_t    BIST_DONE;                                
N    __IO    uint32_t    BIST_FAIL;                               /* 0xc    Bist Fail */
X    volatile    uint32_t    BIST_FAIL;                                
N}DEV_CACHE_RegDef;
N/****DEV_CACHE end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 47 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_norc.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_norc.h" 1
N#ifndef __DEV_NORC_H__
N#define __DEV_NORC_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************NORC_CTL***********************************/
N#define DEV_NORC_CTL_DUAL_WIDTH                                 (0x1UL<<31)
N#define DEV_NORC_CTL_DUAL_DEPTH                                 (0x1UL<<30)
N#define DEV_NORC_CTL_SOFT_CONT_DISABLE                          (0x0UL<<29)
N#define DEV_NORC_CTL_SOFT_CONT_ENABLE                           (0x1UL<<29)
N#define DEV_NORC_CTL_SOFT_CONT_MASK                             (0x1UL<<29)
N#define DEV_NORC_CTL_CACH_CONT_DISABLE                          (0x0UL<<28)
N#define DEV_NORC_CTL_CACH_CONT_ENABLE                           (0x1UL<<28)
N#define DEV_NORC_CTL_CACH_CONT_MASK                             (0x1UL<<28)
N#define DEV_NORC_CTL_UNCA_CONT_DISABLE                          (0x0UL<<27)
N#define DEV_NORC_CTL_UNCA_CONT_ENABLE                           (0x1UL<<27)
N#define DEV_NORC_CTL_UNCA_CONT_MASK                             (0x1UL<<27)
N#define DEV_NORC_CTL_PREF_MODE_AUTO                             (0x0UL<<26)
N#define DEV_NORC_CTL_PREF_MODE_FIX                              (0x1UL<<26)
N#define DEV_NORC_CTL_PREF_MODE_MASK                             (0x1UL<<26)
N#define DEV_NORC_CTL_PREF_EN_DISABLE                            (0x0UL<<25)
N#define DEV_NORC_CTL_PREF_EN_ENABLE                             (0x1UL<<25)
N#define DEV_NORC_CTL_PREF_EN_MASK                               (0x1UL<<25)
N#define DEV_NORC_CTL_NOR_WAIT_RUN                               (0x0UL<<24)
N#define DEV_NORC_CTL_NOR_WAIT_WAIT                              (0x1UL<<24)
N#define DEV_NORC_CTL_NOR_WAIT_MASK                              (0x1UL<<24)
N#define DEV_NORC_CTL_SPI_MODE_MODE0                             (0x0UL<<22)
N#define DEV_NORC_CTL_SPI_MODE_MODE1                             (0x1UL<<22)
N#define DEV_NORC_CTL_SPI_MODE_MODE2                             (0x2UL<<22)
N#define DEV_NORC_CTL_SPI_MODE_MODE3                             (0x3UL<<22)
N#define DEV_NORC_CTL_SPI_MODE_MASK                              (0x3UL<<22)
N#define DEV_NORC_CTL_STOP_CYCLE_1                               (0x0UL<<20)
N#define DEV_NORC_CTL_STOP_CYCLE_2                               (0x1UL<<20)
N#define DEV_NORC_CTL_STOP_CYCLE_3                               (0x2UL<<20)
N#define DEV_NORC_CTL_STOP_CYCLE_4                               (0x3UL<<20)
N#define DEV_NORC_CTL_STOP_CYCLE_MASK                            (0x3UL<<20)
N#define DEV_NORC_CTL_HOLD_CYCLE_4                               (0x0UL<<18)
N#define DEV_NORC_CTL_HOLD_CYCLE_16                              (0x1UL<<18)
N#define DEV_NORC_CTL_HOLD_CYCLE_64                              (0x2UL<<18)
N#define DEV_NORC_CTL_HOLD_CYCLE_256                             (0x3UL<<18)
N#define DEV_NORC_CTL_HOLD_CYCLE_MASK                            (0x3UL<<18)
N#define DEV_NORC_CTL_HOLD_MODE_DISABLE                          (0x0UL<<17)
N#define DEV_NORC_CTL_HOLD_MODE_ENABLE                           (0x1UL<<17)
N#define DEV_NORC_CTL_HOLD_MODE_MASK                             (0x1UL<<17)
N#define DEV_NORC_CTL_DELAY_CHAIN_MASK                           (0x1fUL<<12)
N#define DEV_NORC_CTL_DUMY_CYCLE_MASK                            (0xfUL<<8)
N#define DEV_NORC_CTL_WAIT_CYCLE_MASK                            (0x3UL<<6)
N#define DEV_NORC_CTL_DDR_MODE_SINGLEEDGE                        (0x0UL<<5)
N#define DEV_NORC_CTL_DDR_MODE_DOUBLEEDGE                        (0x1UL<<5)
N#define DEV_NORC_CTL_DDR_MODE_MASK                              (0x1UL<<5)
N#define DEV_NORC_CTL_DIO_MODE_MOSI_AND_MISOSEPARATE             (0x0UL<<4)
N#define DEV_NORC_CTL_DIO_MODE_3WIRESPI                          (0x1UL<<4)
N#define DEV_NORC_CTL_DIO_MODE_MASK                              (0x1UL<<4)
N#define DEV_NORC_CTL_FAST_MODE_NORMALMODE                       (0x0UL<<3)
N#define DEV_NORC_CTL_FAST_MODE_FASTMODE                         (0x1UL<<3)
N#define DEV_NORC_CTL_FAST_MODE_MASK                             (0x1UL<<3)
N#define DEV_NORC_CTL_ADR_MODE_SINGLE                            (0x0UL<<2)
N#define DEV_NORC_CTL_ADR_MODE_ACCORDINGTOSPI_WIDTH              (0x1UL<<2)
N#define DEV_NORC_CTL_ADR_MODE_MASK                              (0x1UL<<2)
N#define DEV_NORC_CTL_SPI_WIDTH_SINGLE                           (0x0UL<<0)
N#define DEV_NORC_CTL_SPI_WIDTH_DUAL                             (0x1UL<<0)
N#define DEV_NORC_CTL_SPI_WIDTH_QUAD                             (0x2UL<<0)
N#define DEV_NORC_CTL_SPI_WIDTH_MASK                             (0x3UL<<0)
N/****NORC_CTL end****/
N
N
N/***********************************NORC_SOFT_CTL***********************************/
N#define DEV_NORC_SOFT_CTL_CMD_DAT_MASK                          (0xffUL<<4)
N#define DEV_NORC_SOFT_CTL_CMD_NSS_NSSIDLE                       (0x0UL<<3)
N#define DEV_NORC_SOFT_CTL_CMD_NSS_NSSACTIVE                     (0x1UL<<3)
N#define DEV_NORC_SOFT_CTL_CMD_NSS_MASK                          (0x1UL<<3)
N#define DEV_NORC_SOFT_CTL_CMD_STA_IDLE                          (0x0UL<<2)
N#define DEV_NORC_SOFT_CTL_CMD_STA_WORK                          (0x1UL<<2)
N#define DEV_NORC_SOFT_CTL_CMD_STA_MASK                          (0x1UL<<2)
N#define DEV_NORC_SOFT_CTL_BUFF_CLR_WORK                         (0x0UL<<1)
N#define DEV_NORC_SOFT_CTL_BUFF_CLR_CLEAR                        (0x1UL<<1)
N#define DEV_NORC_SOFT_CTL_BUFF_CLR_MASK                         (0x1UL<<1)
N#define DEV_NORC_SOFT_CTL_SOFT_STA_STOP                         (0x0UL<<0)
N#define DEV_NORC_SOFT_CTL_SOFT_STA_START                        (0x1UL<<0)
N#define DEV_NORC_SOFT_CTL_SOFT_STA_MASK                         (0x1UL<<0)
N/****NORC_SOFT_CTL end****/
N
N
N/***********************************NORC_SOFT_STA***********************************/
N#define DEV_NORC_SOFT_STA_BUS_IDLE                              (0x1UL<<5)
N#define DEV_NORC_SOFT_STA_EMPTY                                 (0x1UL<<4)
N#define DEV_NORC_SOFT_STA_FIFO_LEVEL_MASK                       (0xfUL<<0)
N/****NORC_SOFT_STA end****/
N
N
N/***********************************NORC_SOFT_BASE***********************************/
N#define DEV_NORC_SOFT_BASE_BASE_ADDR_MASK                       (0x3ffffffUL<<0)
N/****NORC_SOFT_BASE end****/
N
N
N/***********************************NORC_SOFT_LEN***********************************/
N#define DEV_NORC_SOFT_LEN_LENGTH_MASK                           (0x3ffffffUL<<0)
N/****NORC_SOFT_LEN end****/
N
N
N/***********************************NORC_SOFT_CNT***********************************/
N#define DEV_NORC_SOFT_CNT_COUNTER_MASK                          (0x3ffffffUL<<0)
N/****NORC_SOFT_CNT end****/
N
N
N/***********************************NORC_SOFT_DATA***********************************/
N#define DEV_NORC_SOFT_DATA_MASK                                 (0xffffffffUL<<0)
N/****NORC_SOFT_DATA end****/
N
N
N/***********************************NORC_SOFT_PD***********************************/
N#define DEV_NORC_SOFT_PD_FIFO_UF_PD                             (0x1UL<<2)
N#define DEV_NORC_SOFT_PD_LENGTH_PD                              (0x1UL<<1)
N#define DEV_NORC_SOFT_PD_BLOCK_PD                               (0x1UL<<0)
N/****NORC_SOFT_PD end****/
N
N
N/***********************************NORC_SOFT_IE***********************************/
N#define DEV_NORC_SOFT_IE_DMA_EN                                 (0x1UL<<16)
N#define DEV_NORC_SOFT_IE_FIFO_UF_IE                             (0x1UL<<2)
N#define DEV_NORC_SOFT_IE_LENGTH_IE                              (0x1UL<<1)
N#define DEV_NORC_SOFT_IE_BLOCK_IE                               (0x1UL<<0)
N/****NORC_SOFT_IE end****/
N
N
N/***********************************NORC_ENCRY_CTL***********************************/
N#define DEV_NORC_ENCRY_CTL_ALG_DIRECTXOR                        (0x0UL<<5)
N#define DEV_NORC_ENCRY_CTL_ALG_ROUNDXOR                         (0x1UL<<5)
N#define DEV_NORC_ENCRY_CTL_ALG_MASK                             (0x1UL<<5)
N#define DEV_NORC_ENCRY_CTL_EN1                                  (0x1UL<<1)
N#define DEV_NORC_ENCRY_CTL_EN0                                  (0x1UL<<0)
N/****NORC_ENCRY_CTL end****/
N
N
N/***********************************NORC_ENCRY_SEED***********************************/
N#define DEV_NORC_ENCRY_SEED_MASK                                (0xffffffffUL<<0)
N/****NORC_ENCRY_SEED end****/
N
N
N/***********************************NORC_ENCRY_BASE0***********************************/
N#define DEV_NORC_ENCRY_BASE0_ADDR_MASK                          (0x3fffUL<<12)
N/****NORC_ENCRY_BASE0 end****/
N
N
N/***********************************NORC_ENCRY_END0***********************************/
N#define DEV_NORC_ENCRY_END0_ADDR_MASK                           (0x3fffUL<<12)
N/****NORC_ENCRY_END0 end****/
N
N
N/***********************************NORC_ENCRY_BASE1***********************************/
N#define DEV_NORC_ENCRY_BASE1_ADDR_MASK                          (0x3fffUL<<12)
N/****NORC_ENCRY_BASE1 end****/
N
N
N/***********************************NORC_ENCRY_END1***********************************/
N#define DEV_NORC_ENCRY_END1_ADDR_MASK                           (0x3fffUL<<12)
N/****NORC_ENCRY_END1 end****/
N
N
N/***********************************NORC_PERF_CTL***********************************/
N#define DEV_NORC_PERF_CTL_SEL_TX_CYCLE                          (0x0UL<<2)
N#define DEV_NORC_PERF_CTL_SEL_RX_CYCLE                          (0x1UL<<2)
N#define DEV_NORC_PERF_CTL_SEL_MASK                              (0x1UL<<2)
N#define DEV_NORC_PERF_CTL_STA                                   (0x1UL<<1)
N#define DEV_NORC_PERF_CTL_EN                                    (0x1UL<<0)
N/****NORC_PERF_CTL end****/
N
N
N/***********************************NORC_PERF_SUM***********************************/
N#define DEV_NORC_PERF_SUM_DATA_MASK                             (0xffffffffUL<<0)
N/****NORC_PERF_SUM end****/
N
N
N/***********************************NORC_PERF_CNT***********************************/
N#define DEV_NORC_PERF_CNT_DATA_MASK                             (0xffffffffUL<<0)
N/****NORC_PERF_CNT end****/
N
N
N/***********************************DEV_NORC register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    CTL;                                     /* 0x0    NORCTRL Control */
X    volatile    uint32_t    CTL;                                      
N    __IO    uint32_t    SOFT_CTL;                                /* 0x4    Software Control */
X    volatile    uint32_t    SOFT_CTL;                                 
N    __I     uint32_t    SOFT_STA;                                /* 0x8    Software STATUS */
X    volatile const     uint32_t    SOFT_STA;                                 
N    __IO    uint32_t    SOFT_BASE;                               /* 0xc    Software Base Address */
X    volatile    uint32_t    SOFT_BASE;                                
N    __IO    uint32_t    SOFT_LEN;                                /* 0x10    Software Length */
X    volatile    uint32_t    SOFT_LEN;                                 
N    __I     uint32_t    SOFT_CNT;                                /* 0x14    Software Counter */
X    volatile const     uint32_t    SOFT_CNT;                                 
N    __I     uint32_t    SOFT_DATA;                               /* 0x18    Software Data */
X    volatile const     uint32_t    SOFT_DATA;                                
N            uint32_t    RESERVED0;
N    __IO    uint32_t    SOFT_PD;                                 /* 0x20    Software Pending */
X    volatile    uint32_t    SOFT_PD;                                  
N    __IO    uint32_t    SOFT_IE;                                 /* 0x24    Software Interrupt Enable */
X    volatile    uint32_t    SOFT_IE;                                  
N            uint32_t    RESERVED1[2];
N    __IO    uint32_t    ENCRY_CTL;                               /* 0x30    Encrypt Control */
X    volatile    uint32_t    ENCRY_CTL;                                
N    __O     uint32_t    ENCRY_SEED;                              /* 0x34    Encrypt Seed */
X    volatile     uint32_t    ENCRY_SEED;                               
N    __IO    uint32_t    ENCRY_BASE0;                             /* 0x38    Encrypt Area0 Start Address */
X    volatile    uint32_t    ENCRY_BASE0;                              
N    __IO    uint32_t    ENCRY_END0;                              /* 0x3c    Encrypt Area0 End Address */
X    volatile    uint32_t    ENCRY_END0;                               
N    __IO    uint32_t    ENCRY_BASE1;                             /* 0x40    Encrypt Area1 Start Address */
X    volatile    uint32_t    ENCRY_BASE1;                              
N    __IO    uint32_t    ENCRY_END1;                              /* 0x44    Encrypt Area1 End Address */
X    volatile    uint32_t    ENCRY_END1;                               
N            uint32_t    RESERVED2[2];
N    __IO    uint32_t    PERF_CTL;                                /* 0x50    Performance Control */
X    volatile    uint32_t    PERF_CTL;                                 
N    __I     uint32_t    PERF_SUM;                                /* 0x54    Performance Summary */
X    volatile const     uint32_t    PERF_SUM;                                 
N    __I     uint32_t    PERF_CNT;                                /* 0x58    Performance Counter */
X    volatile const     uint32_t    PERF_CNT;                                 
N}DEV_NORC_RegDef;
N/****DEV_NORC end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 48 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_mpu.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_mpu.h" 1
N#ifndef __DEV_MPU_H__
N#define __DEV_MPU_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************MPU_STA_ADDR***********************************/
N#define DEV_MPU_STA_ADDR_VAULE_MASK                             (0xffffffffUL<<0)
N/****MPU_STA_ADDR end****/
N
N
N/***********************************MPU_END_ADDR***********************************/
N#define DEV_MPU_END_ADDR_VALUE_MASK                             (0xffffffffUL<<0)
N/****MPU_END_ADDR end****/
N
N
N/***********************************MPU_STA_MASK***********************************/
N#define DEV_MPU_STA_MASK_VAULE_MASK                             (0xffffffffUL<<0)
N/****MPU_STA_MASK end****/
N
N
N/***********************************MPU_CTL***********************************/
N#define DEV_MPU_CTL_SEL_CPU_INST                                (0x0UL<<4)
N#define DEV_MPU_CTL_SEL_CPU_DATA                                (0x1UL<<4)
N#define DEV_MPU_CTL_SEL_CPU_SYS                                 (0x2UL<<4)
N#define DEV_MPU_CTL_SEL_DMA                                     (0x3UL<<4)
N#define DEV_MPU_CTL_SEL_NPU                                     (0x4UL<<4)
N#define DEV_MPU_CTL_SEL_UDSP                                    (0x5UL<<4)
N#define DEV_MPU_CTL_SEL_USB                                     (0x6UL<<4)
N#define DEV_MPU_CTL_SEL_ASU                                     (0x7UL<<4)
N#define DEV_MPU_CTL_SEL_MASK                                    (0x7UL<<4)
N#define DEV_MPU_CTL_MODE_NONE                                   (0x0UL<<2)
N#define DEV_MPU_CTL_MODE_READ                                   (0x1UL<<2)
N#define DEV_MPU_CTL_MODE_WRITE                                  (0x2UL<<2)
N#define DEV_MPU_CTL_MODE_BOTH                                   (0x3UL<<2)
N#define DEV_MPU_CTL_MODE_MASK                                   (0x3UL<<2)
N#define DEV_MPU_CTL_IE_DISABLE                                  (0x0UL<<1)
N#define DEV_MPU_CTL_IE_ENABLE                                   (0x1UL<<1)
N#define DEV_MPU_CTL_IE_MASK                                     (0x1UL<<1)
N#define DEV_MPU_CTL_EN_DISABLE                                  (0x0UL<<0)
N#define DEV_MPU_CTL_EN_ENABLE                                   (0x1UL<<0)
N#define DEV_MPU_CTL_EN_MASK                                     (0x1UL<<0)
N/****MPU_CTL end****/
N
N
N/***********************************MPU_PD***********************************/
N#define DEV_MPU_PD_CNT_MASK                                     (0xffffffUL<<8)
N#define DEV_MPU_PD_HIT                                          (0x1UL<<0)
N/****MPU_PD end****/
N
N
N/***********************************MPU_HIT_ADDR***********************************/
N#define DEV_MPU_HIT_ADDR_VALUE_MASK                             (0xffffffffUL<<0)
N/****MPU_HIT_ADDR end****/
N
N
N/***********************************DEV_MPU register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    STA_ADDR;                                /* 0x0    MPU Start Address */
X    volatile    uint32_t    STA_ADDR;                                 
N    __IO    uint32_t    END_ADDR;                                /* 0x4    MPU End Address */
X    volatile    uint32_t    END_ADDR;                                 
N    __IO    uint32_t    STA_MASK;                                /* 0x8    MPU Address Mask */
X    volatile    uint32_t    STA_MASK;                                 
N    __IO    uint32_t    CTL;                                     /* 0xc    MPU Control */
X    volatile    uint32_t    CTL;                                      
N    __IO    uint32_t    PD;                                      /* 0x10    MPU Pending */
X    volatile    uint32_t    PD;                                       
N    __I     uint32_t    HIT_ADDR;                                /* 0x14    MPU Hit Address */
X    volatile const     uint32_t    HIT_ADDR;                                 
N}DEV_MPU_RegDef;
N/****DEV_MPU end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 49 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "psram_rwc.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\psram_rwc.h" 1
N#ifndef __PSRAM_RWC_H__
N#define __PSRAM_RWC_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************PSRAM_RWC_CFG1***********************************/
N#define PSRAM_RWC_PSRAM_RWC_CFG1_CEN_MAX_CYC_MASK               (0x1fffUL<<19)
N#define PSRAM_RWC_PSRAM_RWC_CFG1_PREF_MODE_MASK                 (0x1UL<<18)
N#define PSRAM_RWC_PSRAM_RWC_CFG1_PREF_EN_MASK                   (0x1UL<<17)
N#define PSRAM_RWC_PSRAM_RWC_CFG1_RBX_EN_MASK                    (0x1UL<<16)
N#define PSRAM_RWC_PSRAM_RWC_CFG1_DELAY_CHIAN_SEL_MASK           (0x1fUL<<10)
N#define PSRAM_RWC_PSRAM_RWC_CFG1_RX_HOLD_CYC_MASK               (0x3UL<<8)
N#define PSRAM_RWC_PSRAM_RWC_CFG1_TX_HOLD_CYC_MASK               (0x3UL<<6)
N#define PSRAM_RWC_PSRAM_RWC_CFG1_QUAD_EN_MASK                   (0x1UL<<5)
N#define PSRAM_RWC_PSRAM_RWC_CFG1_WARP_LEN_MASK                  (0xfUL<<1)
N#define PSRAM_RWC_PSRAM_RWC_CFG1_SPI_MODE_MASK                  (0x1UL<<0)
N/****PSRAM_RWC_CFG1 end****/
N
N
N/***********************************PSRAM_RWC_CFG2***********************************/
N#define PSRAM_RWC_PSRAM_RWC_CFG2_WR_CMD_CODE_MASK               (0x3UL<<11)
N#define PSRAM_RWC_PSRAM_RWC_CFG2_RD_CMD_CODE_MASK               (0x7UL<<8)
N#define PSRAM_RWC_PSRAM_RWC_CFG2_WAIT_CYC_MASK                  (0xfUL<<0)
N/****PSRAM_RWC_CFG2 end****/
N
N
N/***********************************PSRAM_RWC_STA***********************************/
N#define PSRAM_RWC_PSRAM_RWC_STA_PSRAM_RX_HOLD                   (0x1UL<<10)
N#define PSRAM_RWC_PSRAM_RWC_STA_PSRAM_TX_HOLD                   (0x1UL<<9)
N#define PSRAM_RWC_PSRAM_RWC_STA_PSRAM_RX_DATA                   (0x1UL<<8)
N#define PSRAM_RWC_PSRAM_RWC_STA_PSRAM_TX_DATA                   (0x1UL<<7)
N#define PSRAM_RWC_PSRAM_RWC_STA_PSRAM_RX_CMD                    (0x1UL<<6)
N#define PSRAM_RWC_PSRAM_RWC_STA_PSRAM_TX_CMD                    (0x1UL<<5)
N#define PSRAM_RWC_PSRAM_RWC_STA_PSRAM_IDLE                      (0x1UL<<4)
N#define PSRAM_RWC_PSRAM_RWC_STA_RWC_WRITE                       (0x1UL<<3)
N#define PSRAM_RWC_PSRAM_RWC_STA_RWC_READ                        (0x1UL<<2)
N#define PSRAM_RWC_PSRAM_RWC_STA_RWC_PREF                        (0x1UL<<1)
N#define PSRAM_RWC_PSRAM_RWC_STA_RWC_IDLE                        (0x1UL<<0)
N/****PSRAM_RWC_STA end****/
N
N
N/***********************************PSRAM_RWC register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    PSRAM_RWC_CFG1;                          /* 0x0    PSRAM_RWC Configure1 */
X    volatile    uint32_t    PSRAM_RWC_CFG1;                           
N    __IO    uint32_t    PSRAM_RWC_CFG2;                          /* 0x4    PSRAM_RWC Configure2 */
X    volatile    uint32_t    PSRAM_RWC_CFG2;                           
N    __I     uint32_t    PSRAM_RWC_STA;                           /* 0x8    PSRAM_RWC Status */
X    volatile const     uint32_t    PSRAM_RWC_STA;                            
N}PSRAM_RWC_RegDef;
N/****PSRAM_RWC end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 50 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_chip.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_chip.h" 1
N#ifndef __DEV_CHIP_H__
N#define __DEV_CHIP_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CHIP_ID***********************************/
N#define DEV_CHIP_ID_MASK                                        (0xffffffffUL<<0)
N/****CHIP_ID end****/
N
N
N/***********************************OTP_DATA0***********************************/
N#define DEV_CHIP_OTP_DATA0_MASK                                 (0xffffffffUL<<0)
N/****OTP_DATA0 end****/
N
N
N/***********************************OTP_DATA1***********************************/
N#define DEV_CHIP_OTP_DATA1_MASK                                 (0xffffffffUL<<0)
N/****OTP_DATA1 end****/
N
N
N/***********************************OTP_DATA2***********************************/
N#define DEV_CHIP_OTP_DATA2_MASK                                 (0xffffffffUL<<0)
N/****OTP_DATA2 end****/
N
N
N/***********************************OTP_DATA3***********************************/
N#define DEV_CHIP_OTP_DATA3_MASK                                 (0xffffffffUL<<0)
N/****OTP_DATA3 end****/
N
N
N/***********************************OTP_DATA4***********************************/
N#define DEV_CHIP_OTP_DATA4_MASK                                 (0xffffffffUL<<0)
N/****OTP_DATA4 end****/
N
N
N/***********************************OTP_DATA5***********************************/
N#define DEV_CHIP_OTP_DATA5_MASK                                 (0xffffffffUL<<0)
N/****OTP_DATA5 end****/
N
N
N/***********************************OTP_DATA6***********************************/
N#define DEV_CHIP_OTP_DATA6_MASK                                 (0xffffffffUL<<0)
N/****OTP_DATA6 end****/
N
N
N/***********************************OTP_DATA7***********************************/
N#define DEV_CHIP_OTP_DATA7_MASK                                 (0xffffffffUL<<0)
N/****OTP_DATA7 end****/
N
N
N/***********************************DEV_CHIP register***********************************/
Ntypedef struct{
N
N    __I     uint32_t    ID;                                      /* 0x0    Chip ID */
X    volatile const     uint32_t    ID;                                       
N            uint32_t    RESERVED0[3];
N    __I     uint32_t    OTP_DATA0;                               /* 0x10    Efuse Data0 */
X    volatile const     uint32_t    OTP_DATA0;                                
N    __I     uint32_t    OTP_DATA1;                               /* 0x14    Efuse Data1 */
X    volatile const     uint32_t    OTP_DATA1;                                
N    __I     uint32_t    OTP_DATA2;                               /* 0x18    Efuse Data2 */
X    volatile const     uint32_t    OTP_DATA2;                                
N    __I     uint32_t    OTP_DATA3;                               /* 0x1c    Efuse Data3 */
X    volatile const     uint32_t    OTP_DATA3;                                
N    __I     uint32_t    OTP_DATA4;                               /* 0x20    Efuse Data4 */
X    volatile const     uint32_t    OTP_DATA4;                                
N    __I     uint32_t    OTP_DATA5;                               /* 0x24    Efuse Data5 */
X    volatile const     uint32_t    OTP_DATA5;                                
N    __I     uint32_t    OTP_DATA6;                               /* 0x28    Efuse Data6 */
X    volatile const     uint32_t    OTP_DATA6;                                
N    __I     uint32_t    OTP_DATA7;                               /* 0x2c    Efuse Data7 */
X    volatile const     uint32_t    OTP_DATA7;                                
N}DEV_CHIP_RegDef;
N/****DEV_CHIP end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 51 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_cmu.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_cmu.h" 1
N#ifndef __DEV_CMU_H__
N#define __DEV_CMU_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CMU_CLKEN0***********************************/
N#define DEV_CMU_CLKEN0_MPU                                      (0x1UL<<30)
N#define DEV_CMU_CLKEN0_UART3                                    (0x1UL<<29)
N#define DEV_CMU_CLKEN0_CAMERA                                   (0x1UL<<28)
N#define DEV_CMU_CLKEN0_AON                                      (0x1UL<<27)
N#define DEV_CMU_CLKEN0_UDSP                                     (0x1UL<<26)
N#define DEV_CMU_CLKEN0_NPU                                      (0x1UL<<25)
N#define DEV_CMU_CLKEN0_SRC                                      (0x1UL<<24)
N#define DEV_CMU_CLKEN0_DAC                                      (0x1UL<<23)
N#define DEV_CMU_CLKEN0_ADC                                      (0x1UL<<22)
N#define DEV_CMU_CLKEN0_USB                                      (0x1UL<<20)
N#define DEV_CMU_CLKEN0_SDC                                      (0x1UL<<19)
N#define DEV_CMU_CLKEN0_PWM                                      (0x1UL<<18)
N#define DEV_CMU_CLKEN0_IRTX                                     (0x1UL<<17)
N#define DEV_CMU_CLKEN0_IRRX                                     (0x1UL<<16)
N#define DEV_CMU_CLKEN0_ASI1                                     (0x1UL<<15)
N#define DEV_CMU_CLKEN0_ASI0                                     (0x1UL<<14)
N#define DEV_CMU_CLKEN0_I2C1                                     (0x1UL<<13)
N#define DEV_CMU_CLKEN0_I2C0                                     (0x1UL<<12)
N#define DEV_CMU_CLKEN0_UART2                                    (0x1UL<<11)
N#define DEV_CMU_CLKEN0_UART1                                    (0x1UL<<10)
N#define DEV_CMU_CLKEN0_UART0                                    (0x1UL<<9)
N#define DEV_CMU_CLKEN0_SPI1                                     (0x1UL<<8)
N#define DEV_CMU_CLKEN0_SPI0                                     (0x1UL<<7)
N#define DEV_CMU_CLKEN0_TICK                                     (0x1UL<<6)
N#define DEV_CMU_CLKEN0_TIMER                                    (0x1UL<<5)
N#define DEV_CMU_CLKEN0_EINT                                     (0x1UL<<4)
N#define DEV_CMU_CLKEN0_ASU                                      (0x1UL<<3)
N#define DEV_CMU_CLKEN0_EFUSE                                    (0x1UL<<2)
N#define DEV_CMU_CLKEN0_GPIO                                     (0x1UL<<1)
N#define DEV_CMU_CLKEN0_DMA                                      (0x1UL<<0)
N/****CMU_CLKEN0 end****/
N
N
N/***********************************CMU_CLKEN1***********************************/
N#define DEV_CMU_CLKEN1_PSRAM                                    (0x1UL<<15)
N#define DEV_CMU_CLKEN1_MEM                                      (0x1UL<<14)
N#define DEV_CMU_CLKEN1_HST                                      (0x1UL<<13)
N#define DEV_CMU_CLKEN1_DEV                                      (0x1UL<<12)
N#define DEV_CMU_CLKEN1_RAM7                                     (0x1UL<<11)
N#define DEV_CMU_CLKEN1_RAM6                                     (0x1UL<<10)
N#define DEV_CMU_CLKEN1_RAM5                                     (0x1UL<<9)
N#define DEV_CMU_CLKEN1_RAM4                                     (0x1UL<<8)
N#define DEV_CMU_CLKEN1_RAM3                                     (0x1UL<<7)
N#define DEV_CMU_CLKEN1_RAM2                                     (0x1UL<<6)
N#define DEV_CMU_CLKEN1_RAM1                                     (0x1UL<<5)
N#define DEV_CMU_CLKEN1_RAM0                                     (0x1UL<<4)
N#define DEV_CMU_CLKEN1_CACHE                                    (0x1UL<<3)
N#define DEV_CMU_CLKEN1_NORC                                     (0x1UL<<2)
N#define DEV_CMU_CLKEN1_SYS                                      (0x1UL<<1)
N#define DEV_CMU_CLKEN1_CPU                                      (0x1UL<<0)
N/****CMU_CLKEN1 end****/
N
N
N/***********************************CMU_SYSCLK***********************************/
N#define DEV_CMU_SYSCLK_SYS_DIV_1                                (0x0UL<<8)
N#define DEV_CMU_SYSCLK_SYS_DIV_2                                (0x1UL<<8)
N#define DEV_CMU_SYSCLK_SYS_DIV_4                                (0x2UL<<8)
N#define DEV_CMU_SYSCLK_SYS_DIV_8                                (0x3UL<<8)
N#define DEV_CMU_SYSCLK_SYS_DIV_12                               (0x4UL<<8)
N#define DEV_CMU_SYSCLK_SYS_DIV_16                               (0x5UL<<8)
N#define DEV_CMU_SYSCLK_SYS_DIV_24                               (0x6UL<<8)
N#define DEV_CMU_SYSCLK_SYS_DIV_32                               (0x7UL<<8)
N#define DEV_CMU_SYSCLK_SYS_DIV_MASK                             (0x7UL<<8)
N#define DEV_CMU_SYSCLK_CORE_DIV_1                               (0x0UL<<4)
N#define DEV_CMU_SYSCLK_CORE_DIV_2                               (0x1UL<<4)
N#define DEV_CMU_SYSCLK_CORE_DIV_4                               (0x2UL<<4)
N#define DEV_CMU_SYSCLK_CORE_DIV_8                               (0x3UL<<4)
N#define DEV_CMU_SYSCLK_CORE_DIV_12                              (0x4UL<<4)
N#define DEV_CMU_SYSCLK_CORE_DIV_16                              (0x5UL<<4)
N#define DEV_CMU_SYSCLK_CORE_DIV_24                              (0x6UL<<4)
N#define DEV_CMU_SYSCLK_CORE_DIV_32                              (0x7UL<<4)
N#define DEV_CMU_SYSCLK_CORE_DIV_MASK                            (0x7UL<<4)
N#define DEV_CMU_SYSCLK_CORE_SEL_OSC_ADC                         (0x0UL<<0)
N#define DEV_CMU_SYSCLK_CORE_SEL_OSC_DEV                         (0x1UL<<0)
N#define DEV_CMU_SYSCLK_CORE_SEL_OSC_XTAL                        (0x2UL<<0)
N#define DEV_CMU_SYSCLK_CORE_SEL_OSC_USB                         (0x3UL<<0)
N#define DEV_CMU_SYSCLK_CORE_SEL_PLL_CORE                        (0x4UL<<0)
N#define DEV_CMU_SYSCLK_CORE_SEL_PLL_USB                         (0x5UL<<0)
N#define DEV_CMU_SYSCLK_CORE_SEL_EXT_CLK                         (0x6UL<<0)
N#define DEV_CMU_SYSCLK_CORE_SEL_MASK                            (0x7UL<<0)
N/****CMU_SYSCLK end****/
N
N
N/***********************************CMU_SPInCLK***********************************/
N#define DEV_CMU_SPInCLK_DIV_1                                   (0x0UL<<4)
N#define DEV_CMU_SPInCLK_DIV_2                                   (0x1UL<<4)
N#define DEV_CMU_SPInCLK_DIV_4                                   (0x2UL<<4)
N#define DEV_CMU_SPInCLK_DIV_8                                   (0x3UL<<4)
N#define DEV_CMU_SPInCLK_DIV_12                                  (0x4UL<<4)
N#define DEV_CMU_SPInCLK_DIV_16                                  (0x5UL<<4)
N#define DEV_CMU_SPInCLK_DIV_24                                  (0x6UL<<4)
N#define DEV_CMU_SPInCLK_DIV_32                                  (0x7UL<<4)
N#define DEV_CMU_SPInCLK_DIV_MASK                                (0x7UL<<4)
N#define DEV_CMU_SPInCLK_SEL_OSC_DEV                             (0x0UL<<0)
N#define DEV_CMU_SPInCLK_SEL_OSC_XTAL                            (0x1UL<<0)
N#define DEV_CMU_SPInCLK_SEL_OSC_USB                             (0x2UL<<0)
N#define DEV_CMU_SPInCLK_SEL_PLL_CORE                            (0x3UL<<0)
N#define DEV_CMU_SPInCLK_SEL_EXT_CLK                             (0x4UL<<0)
N#define DEV_CMU_SPInCLK_SEL_MASK                                (0x7UL<<0)
N/****CMU_SPInCLK end****/
N
N
N/***********************************CMU_I2CnCLK***********************************/
N#define DEV_CMU_I2CnCLK_SEL_OSC_DEV                             (0x0UL<<0)
N#define DEV_CMU_I2CnCLK_SEL_OSC_XTAL                            (0x1UL<<0)
N#define DEV_CMU_I2CnCLK_SEL_OSC_USB                             (0x2UL<<0)
N#define DEV_CMU_I2CnCLK_SEL_EXT_CLK                             (0x3UL<<0)
N#define DEV_CMU_I2CnCLK_SEL_MASK                                (0x3UL<<0)
N/****CMU_I2CnCLK end****/
N
N
N/***********************************CMU_UARTnCLK***********************************/
N#define DEV_CMU_UARTnCLK_SEL_OSC_DEV                            (0x0UL<<0)
N#define DEV_CMU_UARTnCLK_SEL_OSC_XTAL                           (0x1UL<<0)
N#define DEV_CMU_UARTnCLK_SEL_OSC_USB                            (0x2UL<<0)
N#define DEV_CMU_UARTnCLK_SEL_EXT_CLK                            (0x3UL<<0)
N#define DEV_CMU_UARTnCLK_SEL_MASK                               (0x3UL<<0)
N/****CMU_UARTnCLK end****/
N
N
N/***********************************CMU_NOR0CLK***********************************/
N#define DEV_CMU_NOR0CLK_DIV_1                                   (0x0UL<<4)
N#define DEV_CMU_NOR0CLK_DIV_2                                   (0x1UL<<4)
N#define DEV_CMU_NOR0CLK_DIV_4                                   (0x2UL<<4)
N#define DEV_CMU_NOR0CLK_DIV_8                                   (0x3UL<<4)
N#define DEV_CMU_NOR0CLK_DIV_12                                  (0x4UL<<4)
N#define DEV_CMU_NOR0CLK_DIV_16                                  (0x5UL<<4)
N#define DEV_CMU_NOR0CLK_DIV_24                                  (0x6UL<<4)
N#define DEV_CMU_NOR0CLK_DIV_32                                  (0x7UL<<4)
N#define DEV_CMU_NOR0CLK_DIV_MASK                                (0x7UL<<4)
N#define DEV_CMU_NOR0CLK_SEL_SYS_CLK                             (0x0UL<<0)
N#define DEV_CMU_NOR0CLK_SEL_OSC_DEV                             (0x1UL<<0)
N#define DEV_CMU_NOR0CLK_SEL_OSC_XTAL                            (0x2UL<<0)
N#define DEV_CMU_NOR0CLK_SEL_OSC_USB                             (0x3UL<<0)
N#define DEV_CMU_NOR0CLK_SEL_PLL_CORE                            (0x4UL<<0)
N#define DEV_CMU_NOR0CLK_SEL_PLL_USB                             (0x5UL<<0)
N#define DEV_CMU_NOR0CLK_SEL_EXT_CLK                             (0x6UL<<0)
N#define DEV_CMU_NOR0CLK_SEL_MASK                                (0x7UL<<0)
N/****CMU_NOR0CLK end****/
N
N
N/***********************************CMU_PWMnCLK***********************************/
N#define DEV_CMU_PWMnCLK_DIV_MASK                                (0x1fffUL<<4)
N#define DEV_CMU_PWMnCLK_SEL_OSC_ADC                             (0x0UL<<1)
N#define DEV_CMU_PWMnCLK_SEL_OSC_DEV                             (0x1UL<<1)
N#define DEV_CMU_PWMnCLK_SEL_OSC_XTAL                            (0x2UL<<1)
N#define DEV_CMU_PWMnCLK_SEL_OSC_USB                             (0x3UL<<1)
N#define DEV_CMU_PWMnCLK_SEL_PLL_CORE                            (0x4UL<<1)
N#define DEV_CMU_PWMnCLK_SEL_PLL_AUDIO                           (0x5UL<<1)
N#define DEV_CMU_PWMnCLK_SEL_EXT_CLK                             (0x6UL<<1)
N#define DEV_CMU_PWMnCLK_SEL_MASK                                (0x7UL<<1)
N#define DEV_CMU_PWMnCLK_EN_DISABLE                              (0x0UL<<0)
N#define DEV_CMU_PWMnCLK_EN_ENABLE                               (0x1UL<<0)
N#define DEV_CMU_PWMnCLK_EN_MASK                                 (0x1UL<<0)
N/****CMU_PWMnCLK end****/
N
N
N/***********************************CMU_TIMERnCLK***********************************/
N#define DEV_CMU_TIMERnCLK_SEL_OSC_ADC                           (0x0UL<<1)
N#define DEV_CMU_TIMERnCLK_SEL_OSC_DEV                           (0x1UL<<1)
N#define DEV_CMU_TIMERnCLK_SEL_OSC_XTAL                          (0x2UL<<1)
N#define DEV_CMU_TIMERnCLK_SEL_OSC_USB                           (0x3UL<<1)
N#define DEV_CMU_TIMERnCLK_SEL_PLL_CORE                          (0x4UL<<1)
N#define DEV_CMU_TIMERnCLK_SEL_PLL_AUDIO                         (0x5UL<<1)
N#define DEV_CMU_TIMERnCLK_SEL_USB_SOF                           (0x6UL<<1)
N#define DEV_CMU_TIMERnCLK_SEL_EXT_CLK                           (0x7UL<<1)
N#define DEV_CMU_TIMERnCLK_SEL_MASK                              (0x7UL<<1)
N#define DEV_CMU_TIMERnCLK_EN_DISABLE                            (0x0UL<<0)
N#define DEV_CMU_TIMERnCLK_EN_ENABLE                             (0x1UL<<0)
N#define DEV_CMU_TIMERnCLK_EN_MASK                               (0x1UL<<0)
N/****CMU_TIMERnCLK end****/
N
N
N/***********************************CMU_ADCCLK***********************************/
N#define DEV_CMU_ADCCLK_DIV_MASK                                 (0xffUL<<4)
N#define DEV_CMU_ADCCLK_SEL_OSC_DEV                              (0x0UL<<1)
N#define DEV_CMU_ADCCLK_SEL_OSC_XTAL                             (0x1UL<<1)
N#define DEV_CMU_ADCCLK_SEL_OSC_USB                              (0x2UL<<1)
N#define DEV_CMU_ADCCLK_SEL_PLL_AUDIO                            (0x3UL<<1)
N#define DEV_CMU_ADCCLK_SEL_EXT_CLK                              (0x4UL<<1)
N#define DEV_CMU_ADCCLK_SEL_MASK                                 (0x7UL<<1)
N#define DEV_CMU_ADCCLK_EN_DISABLE                               (0x0UL<<0)
N#define DEV_CMU_ADCCLK_EN_ENABLE                                (0x1UL<<0)
N#define DEV_CMU_ADCCLK_EN_MASK                                  (0x1UL<<0)
N/****CMU_ADCCLK end****/
N
N
N/***********************************CMU_DACCLK***********************************/
N#define DEV_CMU_DACCLK_ANA_DIV_MASK                             (0x3UL<<8)
N#define DEV_CMU_DACCLK_DIG_DIV_MASK                             (0xfUL<<4)
N#define DEV_CMU_DACCLK_SEL_OSC_DEV                              (0x0UL<<1)
N#define DEV_CMU_DACCLK_SEL_OSC_XTAL                             (0x1UL<<1)
N#define DEV_CMU_DACCLK_SEL_OSC_USB                              (0x2UL<<1)
N#define DEV_CMU_DACCLK_SEL_PLL_AUDIO                            (0x3UL<<1)
N#define DEV_CMU_DACCLK_SEL_EXT_CLK                              (0x4UL<<1)
N#define DEV_CMU_DACCLK_SEL_ADC_CLK                              (0x5UL<<1)
N#define DEV_CMU_DACCLK_SEL_MASK                                 (0x7UL<<1)
N#define DEV_CMU_DACCLK_EN_DISABLE                               (0x0UL<<0)
N#define DEV_CMU_DACCLK_EN_ENABLE                                (0x1UL<<0)
N#define DEV_CMU_DACCLK_EN_MASK                                  (0x1UL<<0)
N/****CMU_DACCLK end****/
N
N
N/***********************************CMU_ASInCLK***********************************/
N#define DEV_CMU_ASInCLK_DIV_MASK                                (0xffUL<<4)
N#define DEV_CMU_ASInCLK_SEL_OSC_DEV                             (0x0UL<<0)
N#define DEV_CMU_ASInCLK_SEL_OSC_XTAL                            (0x1UL<<0)
N#define DEV_CMU_ASInCLK_SEL_OSC_USB                             (0x2UL<<0)
N#define DEV_CMU_ASInCLK_SEL_PLL_AUDIO                           (0x3UL<<0)
N#define DEV_CMU_ASInCLK_SEL_EXT_CLK                             (0x4UL<<0)
N#define DEV_CMU_ASInCLK_SEL_MASK                                (0x7UL<<0)
N/****CMU_ASInCLK end****/
N
N
N/***********************************CMU_IRRXCLK***********************************/
N#define DEV_CMU_IRRXCLK_DIV_MASK                                (0xffUL<<4)
N#define DEV_CMU_IRRXCLK_SEL_OSC_DEV                             (0x0UL<<0)
N#define DEV_CMU_IRRXCLK_SEL_OSC_XTAL                            (0x1UL<<0)
N#define DEV_CMU_IRRXCLK_SEL_OSC_USB                             (0x2UL<<0)
N#define DEV_CMU_IRRXCLK_SEL_EXT_CLK                             (0x3UL<<0)
N#define DEV_CMU_IRRXCLK_SEL_MASK                                (0x3UL<<0)
N/****CMU_IRRXCLK end****/
N
N
N/***********************************CMU_IRTXCLK***********************************/
N#define DEV_CMU_IRTXCLK_DIV_MASK                                (0xfUL<<4)
N#define DEV_CMU_IRTXCLK_SEL_OSC_DEV                             (0x0UL<<0)
N#define DEV_CMU_IRTXCLK_SEL_OSC_XTAL                            (0x1UL<<0)
N#define DEV_CMU_IRTXCLK_SEL_OSC_USB                             (0x2UL<<0)
N#define DEV_CMU_IRTXCLK_SEL_EXT_CLK                             (0x3UL<<0)
N#define DEV_CMU_IRTXCLK_SEL_MASK                                (0x3UL<<0)
N/****CMU_IRTXCLK end****/
N
N
N/***********************************CMU_TICKCLK***********************************/
N#define DEV_CMU_TICKCLK_DIV_4                                   (0x0UL<<4)
N#define DEV_CMU_TICKCLK_DIV_16                                  (0x1UL<<4)
N#define DEV_CMU_TICKCLK_DIV_24                                  (0x2UL<<4)
N#define DEV_CMU_TICKCLK_DIV_30                                  (0x3UL<<4)
N#define DEV_CMU_TICKCLK_DIV_MASK                                (0x3UL<<4)
N#define DEV_CMU_TICKCLK_SEL_SYS_CLK                             (0x0UL<<0)
N#define DEV_CMU_TICKCLK_SEL_OSC_ADC                             (0x1UL<<0)
N#define DEV_CMU_TICKCLK_SEL_OSC_DEV                             (0x2UL<<0)
N#define DEV_CMU_TICKCLK_SEL_OSC_XTAL                            (0x3UL<<0)
N#define DEV_CMU_TICKCLK_SEL_OSC_USB                             (0x4UL<<0)
N#define DEV_CMU_TICKCLK_SEL_EXT_CLK                             (0x5UL<<0)
N#define DEV_CMU_TICKCLK_SEL_MASK                                (0x7UL<<0)
N/****CMU_TICKCLK end****/
N
N
N/***********************************CMU_SDCCLK***********************************/
N#define DEV_CMU_SDCCLK_DIV_MASK                                 (0xffUL<<4)
N#define DEV_CMU_SDCCLK_SEL_SYS_CLK                              (0x0UL<<0)
N#define DEV_CMU_SDCCLK_SEL_OSC_DEV                              (0x1UL<<0)
N#define DEV_CMU_SDCCLK_SEL_OSC_XTAL                             (0x2UL<<0)
N#define DEV_CMU_SDCCLK_SEL_OSC_USB                              (0x3UL<<0)
N#define DEV_CMU_SDCCLK_SEL_PLL_CORE                             (0x4UL<<0)
N#define DEV_CMU_SDCCLK_SEL_EXT_CLK                              (0x5UL<<0)
N#define DEV_CMU_SDCCLK_SEL_MASK                                 (0x7UL<<0)
N/****CMU_SDCCLK end****/
N
N
N/***********************************CMU_USBCLK***********************************/
N#define DEV_CMU_USBCLK_SEL_OSC_DEV_2                            (0x0UL<<2)
N#define DEV_CMU_USBCLK_SEL_OSC_XTAL_2                           (0x1UL<<2)
N#define DEV_CMU_USBCLK_SEL_EXT_CLK_2                            (0x2UL<<2)
N#define DEV_CMU_USBCLK_SEL_MASK                                 (0x3UL<<2)
N#define DEV_CMU_USBCLK_EN_DISABLE                               (0x0UL<<0)
N#define DEV_CMU_USBCLK_EN_ENABLE                                (0x1UL<<0)
N#define DEV_CMU_USBCLK_EN_MASK                                  (0x1UL<<0)
N/****CMU_USBCLK end****/
N
N
N/***********************************CMU_CP2CLK***********************************/
N#define DEV_CMU_CP2CLK_DIV_MASK                                 (0xfUL<<4)
N#define DEV_CMU_CP2CLK_SEL_OSC_DEV                              (0x0UL<<2)
N#define DEV_CMU_CP2CLK_SEL_OSC_XTAL                             (0x1UL<<2)
N#define DEV_CMU_CP2CLK_SEL_OSC_USB                              (0x2UL<<2)
N#define DEV_CMU_CP2CLK_SEL_EXT_CLK                              (0x3UL<<2)
N#define DEV_CMU_CP2CLK_SEL_MASK                                 (0x3UL<<2)
N#define DEV_CMU_CP2CLK_EN_DISABLE                               (0x0UL<<0)
N#define DEV_CMU_CP2CLK_EN_ENABLE                                (0x1UL<<0)
N#define DEV_CMU_CP2CLK_EN_MASK                                  (0x1UL<<0)
N/****CMU_CP2CLK end****/
N
N
N/***********************************CMU_HSCALCLK***********************************/
N#define DEV_CMU_HSCALCLK_SEL_128K                               (0x0UL<<1)
N#define DEV_CMU_HSCALCLK_SEL_64K                                (0x1UL<<1)
N#define DEV_CMU_HSCALCLK_SEL_32K                                (0x2UL<<1)
N#define DEV_CMU_HSCALCLK_SEL_16K                                (0x3UL<<1)
N#define DEV_CMU_HSCALCLK_SEL_8K                                 (0x4UL<<1)
N#define DEV_CMU_HSCALCLK_SEL_4K                                 (0x5UL<<1)
N#define DEV_CMU_HSCALCLK_SEL_2K                                 (0x6UL<<1)
N#define DEV_CMU_HSCALCLK_SEL_MASK                               (0x7UL<<1)
N#define DEV_CMU_HSCALCLK_EN_DISABLE                             (0x0UL<<0)
N#define DEV_CMU_HSCALCLK_EN_ENABLE                              (0x1UL<<0)
N#define DEV_CMU_HSCALCLK_EN_MASK                                (0x1UL<<0)
N/****CMU_HSCALCLK end****/
N
N
N/***********************************CMU_DLYCLK***********************************/
N#define DEV_CMU_DLYCLK_SEL_OSC_DEV                              (0x0UL<<1)
N#define DEV_CMU_DLYCLK_SEL_OSC_XTAL                             (0x1UL<<1)
N#define DEV_CMU_DLYCLK_SEL_OSC_USB                              (0x2UL<<1)
N#define DEV_CMU_DLYCLK_SEL_MASK                                 (0x3UL<<1)
N#define DEV_CMU_DLYCLK_EN_DISABLE                               (0x0UL<<0)
N#define DEV_CMU_DLYCLK_EN_ENABLE                                (0x1UL<<0)
N#define DEV_CMU_DLYCLK_EN_MASK                                  (0x1UL<<0)
N/****CMU_DLYCLK end****/
N
N
N/***********************************CMU_CAMERACLK***********************************/
N#define DEV_CMU_CAMERACLK_DIV_1                                 (0x0UL<<4)
N#define DEV_CMU_CAMERACLK_DIV_2                                 (0x1UL<<4)
N#define DEV_CMU_CAMERACLK_DIV_4                                 (0x2UL<<4)
N#define DEV_CMU_CAMERACLK_DIV_8                                 (0x3UL<<4)
N#define DEV_CMU_CAMERACLK_DIV_12                                (0x4UL<<4)
N#define DEV_CMU_CAMERACLK_DIV_16                                (0x5UL<<4)
N#define DEV_CMU_CAMERACLK_DIV_24                                (0x6UL<<4)
N#define DEV_CMU_CAMERACLK_DIV_32                                (0x7UL<<4)
N#define DEV_CMU_CAMERACLK_DIV_MASK                              (0x7UL<<4)
N#define DEV_CMU_CAMERACLK_SEL_OSC_DEV                           (0x0UL<<0)
N#define DEV_CMU_CAMERACLK_SEL_OSC_XTAL                          (0x1UL<<0)
N#define DEV_CMU_CAMERACLK_SEL_OSC_USB                           (0x2UL<<0)
N#define DEV_CMU_CAMERACLK_SEL_PLL_CORE                          (0x3UL<<0)
N#define DEV_CMU_CAMERACLK_SEL_EXT_CLK                           (0x5UL<<0)
N#define DEV_CMU_CAMERACLK_SEL_MASK                              (0x7UL<<0)
N/****CMU_CAMERACLK end****/
N
N
N/***********************************CMU_UART3CLK***********************************/
N#define DEV_CMU_UART3CLK_SEL_OSC_DEV                            (0x0UL<<0)
N#define DEV_CMU_UART3CLK_SEL_OSC_XTAL                           (0x1UL<<0)
N#define DEV_CMU_UART3CLK_SEL_OSC_USB                            (0x2UL<<0)
N#define DEV_CMU_UART3CLK_SEL_EXT_CLK                            (0x3UL<<0)
N#define DEV_CMU_UART3CLK_SEL_MASK                               (0x3UL<<0)
N/****CMU_UART3CLK end****/
N
N
N/***********************************CMU_PSRAMCLK***********************************/
N#define DEV_CMU_PSRAMCLK_DIV_1                                  (0x0UL<<4)
N#define DEV_CMU_PSRAMCLK_DIV_2                                  (0x1UL<<4)
N#define DEV_CMU_PSRAMCLK_DIV_4                                  (0x2UL<<4)
N#define DEV_CMU_PSRAMCLK_DIV_8                                  (0x3UL<<4)
N#define DEV_CMU_PSRAMCLK_DIV_12                                 (0x4UL<<4)
N#define DEV_CMU_PSRAMCLK_DIV_16                                 (0x5UL<<4)
N#define DEV_CMU_PSRAMCLK_DIV_24                                 (0x6UL<<4)
N#define DEV_CMU_PSRAMCLK_DIV_32                                 (0x7UL<<4)
N#define DEV_CMU_PSRAMCLK_DIV_MASK                               (0x7UL<<4)
N#define DEV_CMU_PSRAMCLK_SEL_SYS_CLK                            (0x0UL<<0)
N#define DEV_CMU_PSRAMCLK_SEL_OSC_DEV                            (0x1UL<<0)
N#define DEV_CMU_PSRAMCLK_SEL_OSC_XTAL                           (0x2UL<<0)
N#define DEV_CMU_PSRAMCLK_SEL_OSC_USB                            (0x3UL<<0)
N#define DEV_CMU_PSRAMCLK_SEL_PLL_CORE                           (0x4UL<<0)
N#define DEV_CMU_PSRAMCLK_SEL_PLL_USB                            (0x5UL<<0)
N#define DEV_CMU_PSRAMCLK_SEL_EXT_CLK                            (0x6UL<<0)
N#define DEV_CMU_PSRAMCLK_SEL_MASK                               (0x7UL<<0)
N/****CMU_PSRAMCLK end****/
N
N
N/***********************************CMU_CLKDET***********************************/
N#define DEV_CMU_CLKDET_EXT_CLK2_DET_DISABLE                     (0x0UL<<7)
N#define DEV_CMU_CLKDET_EXT_CLK2_DET_ENABLE                      (0x1UL<<7)
N#define DEV_CMU_CLKDET_EXT_CLK2_DET_MASK                        (0x1UL<<7)
N#define DEV_CMU_CLKDET_EXT_CLK_DET_DISABLE                      (0x0UL<<6)
N#define DEV_CMU_CLKDET_EXT_CLK_DET_ENABLE                       (0x1UL<<6)
N#define DEV_CMU_CLKDET_EXT_CLK_DET_MASK                         (0x1UL<<6)
N#define DEV_CMU_CLKDET_PLL_USB_DET_DISABLE                      (0x0UL<<5)
N#define DEV_CMU_CLKDET_PLL_USB_DET_ENABLE                       (0x1UL<<5)
N#define DEV_CMU_CLKDET_PLL_USB_DET_MASK                         (0x1UL<<5)
N#define DEV_CMU_CLKDET_PLL_AUDIO_DET_DISABLE                    (0x0UL<<4)
N#define DEV_CMU_CLKDET_PLL_AUDIO_DET_ENABLE                     (0x1UL<<4)
N#define DEV_CMU_CLKDET_PLL_AUDIO_DET_MASK                       (0x1UL<<4)
N#define DEV_CMU_CLKDET_PLL_CORE_DET_DISABLE                     (0x0UL<<3)
N#define DEV_CMU_CLKDET_PLL_CORE_DET_ENABLE                      (0x1UL<<3)
N#define DEV_CMU_CLKDET_PLL_CORE_DET_MASK                        (0x1UL<<3)
N#define DEV_CMU_CLKDET_OSC_USB_DET_DISABLE                      (0x0UL<<2)
N#define DEV_CMU_CLKDET_OSC_USB_DET_ENABLE                       (0x1UL<<2)
N#define DEV_CMU_CLKDET_OSC_USB_DET_MASK                         (0x1UL<<2)
N#define DEV_CMU_CLKDET_OSC_XTAL_DET_DISABLE                     (0x0UL<<1)
N#define DEV_CMU_CLKDET_OSC_XTAL_DET_ENABLE                      (0x1UL<<1)
N#define DEV_CMU_CLKDET_OSC_XTAL_DET_MASK                        (0x1UL<<1)
N#define DEV_CMU_CLKDET_OSC_DEV_DET_DISABLE                      (0x0UL<<0)
N#define DEV_CMU_CLKDET_OSC_DEV_DET_ENABLE                       (0x1UL<<0)
N#define DEV_CMU_CLKDET_OSC_DEV_DET_MASK                         (0x1UL<<0)
N/****CMU_CLKDET end****/
N
N
N/***********************************CMU_CLKRDY***********************************/
N#define DEV_CMU_CLKRDY_EXT_CLK2_RDY                             (0x1UL<<7)
N#define DEV_CMU_CLKRDY_EXT_CLK_RDY                              (0x1UL<<6)
N#define DEV_CMU_CLKRDY_PLL_USB_RDY                              (0x1UL<<5)
N#define DEV_CMU_CLKRDY_PLL_AUDIO_RDY                            (0x1UL<<4)
N#define DEV_CMU_CLKRDY_PLL_CORE_RDY                             (0x1UL<<3)
N#define DEV_CMU_CLKRDY_OSC_USB_RDY                              (0x1UL<<2)
N#define DEV_CMU_CLKRDY_OSC_XTAL_RDY                             (0x1UL<<1)
N#define DEV_CMU_CLKRDY_OSC_DEV_RDY                              (0x1UL<<0)
N/****CMU_CLKRDY end****/
N
N
N/***********************************CMU_DBGCTL***********************************/
N#define DEV_CMU_DBGCTL_DIV_1                                    (0x0UL<<8)
N#define DEV_CMU_DBGCTL_DIV_2                                    (0x1UL<<8)
N#define DEV_CMU_DBGCTL_DIV_4                                    (0x2UL<<8)
N#define DEV_CMU_DBGCTL_DIV_8                                    (0x3UL<<8)
N#define DEV_CMU_DBGCTL_DIV_16                                   (0x4UL<<8)
N#define DEV_CMU_DBGCTL_DIV_32                                   (0x5UL<<8)
N#define DEV_CMU_DBGCTL_DIV_64                                   (0x6UL<<8)
N#define DEV_CMU_DBGCTL_DIV_128                                  (0x7UL<<8)
N#define DEV_CMU_DBGCTL_DIV_MASK                                 (0x7UL<<8)
N#define DEV_CMU_DBGCTL_SEL_0                                    (0x0UL<<0)
N#define DEV_CMU_DBGCTL_SEL_OSC_ADC                              (0x1UL<<0)
N#define DEV_CMU_DBGCTL_SEL_OSC_DEV                              (0x2UL<<0)
N#define DEV_CMU_DBGCTL_SEL_OSC_USB                              (0x3UL<<0)
N#define DEV_CMU_DBGCTL_SEL_OSC_XTAL                             (0x4UL<<0)
N#define DEV_CMU_DBGCTL_SEL_PLL_CORE                             (0x5UL<<0)
N#define DEV_CMU_DBGCTL_SEL_PLL_AUDIO                            (0x6UL<<0)
N#define DEV_CMU_DBGCTL_SEL_PLL_USB                              (0x7UL<<0)
N#define DEV_CMU_DBGCTL_SEL_USB_SOF                              (0x8UL<<0)
N#define DEV_CMU_DBGCTL_SEL_EXT_CLK                              (0x9UL<<0)
N#define DEV_CMU_DBGCTL_SEL_EXT_CLK2                             (0xaUL<<0)
N#define DEV_CMU_DBGCTL_SEL_SYS_CLK                              (0xbUL<<0)
N#define DEV_CMU_DBGCTL_SEL_CPU_CLK                              (0xcUL<<0)
N#define DEV_CMU_DBGCTL_SEL_SYS_DIV_EN                           (0xdUL<<0)
N#define DEV_CMU_DBGCTL_SEL_UDSP_CLK                             (0xeUL<<0)
N#define DEV_CMU_DBGCTL_SEL_NPU_CLK                              (0xfUL<<0)
N#define DEV_CMU_DBGCTL_SEL_DMA_CLK                              (0x10UL<<0)
N#define DEV_CMU_DBGCTL_SEL_ASU_CLK                              (0x11UL<<0)
N#define DEV_CMU_DBGCTL_SEL_DEV_CLK                              (0x12UL<<0)
N#define DEV_CMU_DBGCTL_SEL_HST_CLK                              (0x13UL<<0)
N#define DEV_CMU_DBGCTL_SEL_MEM_CLK                              (0x14UL<<0)
N#define DEV_CMU_DBGCTL_SEL_EINT_CLK                             (0x15UL<<0)
N#define DEV_CMU_DBGCTL_SEL_EFUSE_CLK                            (0x16UL<<0)
N#define DEV_CMU_DBGCTL_SEL_DLY_CLK                              (0x17UL<<0)
N#define DEV_CMU_DBGCTL_SEL_TICK_CLK                             (0x18UL<<0)
N#define DEV_CMU_DBGCTL_SEL_USB_CLK                              (0x19UL<<0)
N#define DEV_CMU_DBGCTL_SEL_RAM0_CLK                             (0x1aUL<<0)
N#define DEV_CMU_DBGCTL_SEL_RAM1_CLK                             (0x1bUL<<0)
N#define DEV_CMU_DBGCTL_SEL_RAM2_CLK                             (0x1cUL<<0)
N#define DEV_CMU_DBGCTL_SEL_RAM3_CLK                             (0x1dUL<<0)
N#define DEV_CMU_DBGCTL_SEL_RAM4_CLK                             (0x1eUL<<0)
N#define DEV_CMU_DBGCTL_SEL_RAM5_CLK                             (0x1fUL<<0)
N#define DEV_CMU_DBGCTL_SEL_RAM6_CLK                             (0x20UL<<0)
N#define DEV_CMU_DBGCTL_SEL_RAM7_CLK                             (0x21UL<<0)
N#define DEV_CMU_DBGCTL_SEL_NOR0_MCLK                            (0x22UL<<0)
N#define DEV_CMU_DBGCTL_SEL_NOR0_CLK                             (0x23UL<<0)
N#define DEV_CMU_DBGCTL_SEL_SPI0_CLK                             (0x24UL<<0)
N#define DEV_CMU_DBGCTL_SEL_SPI1_CLK                             (0x25UL<<0)
N#define DEV_CMU_DBGCTL_SEL_I2C0_CLK                             (0x26UL<<0)
N#define DEV_CMU_DBGCTL_SEL_I2C1_CLK                             (0x27UL<<0)
N#define DEV_CMU_DBGCTL_SEL_UART0_CLK                            (0x28UL<<0)
N#define DEV_CMU_DBGCTL_SEL_UART1_CLK                            (0x29UL<<0)
N#define DEV_CMU_DBGCTL_SEL_UART2_CLK                            (0x2aUL<<0)
N#define DEV_CMU_DBGCTL_SEL_UART3_CLK                            (0x2bUL<<0)
N#define DEV_CMU_DBGCTL_SEL_PWM0_CLK                             (0x2cUL<<0)
N#define DEV_CMU_DBGCTL_SEL_PWM1_CLK                             (0x2dUL<<0)
N#define DEV_CMU_DBGCTL_SEL_PWM2_CLK                             (0x2eUL<<0)
N#define DEV_CMU_DBGCTL_SEL_PWM3_CLK                             (0x2fUL<<0)
N#define DEV_CMU_DBGCTL_SEL_PWM4_CLK                             (0x30UL<<0)
N#define DEV_CMU_DBGCTL_SEL_PWM5_CLK                             (0x31UL<<0)
N#define DEV_CMU_DBGCTL_SEL_PWM6_CLK                             (0x32UL<<0)
N#define DEV_CMU_DBGCTL_SEL_PWM7_CLK                             (0x33UL<<0)
N#define DEV_CMU_DBGCTL_SEL_ASI0_CLK                             (0x34UL<<0)
N#define DEV_CMU_DBGCTL_SEL_ASI1_CLK                             (0x35UL<<0)
N#define DEV_CMU_DBGCTL_SEL_CACHE_MCLK                           (0x36UL<<0)
N#define DEV_CMU_DBGCTL_SEL_ADC_CLK                              (0x37UL<<0)
N#define DEV_CMU_DBGCTL_SEL_DAC_CLK                              (0x38UL<<0)
N#define DEV_CMU_DBGCTL_SEL_TIMER0_CLK                           (0x39UL<<0)
N#define DEV_CMU_DBGCTL_SEL_TIMER1_CLK                           (0x3aUL<<0)
N#define DEV_CMU_DBGCTL_SEL_TIMER2_CLK                           (0x3bUL<<0)
N#define DEV_CMU_DBGCTL_SEL_TIMER3_CLK                           (0x3cUL<<0)
N#define DEV_CMU_DBGCTL_SEL_SDC_CLK                              (0x3dUL<<0)
N#define DEV_CMU_DBGCTL_SEL_IRRX_CLK                             (0x3eUL<<0)
N#define DEV_CMU_DBGCTL_SEL_IRTX_CLK                             (0x3fUL<<0)
N#define DEV_CMU_DBGCTL_SEL_CP2_CLK                              (0x40UL<<0)
N#define DEV_CMU_DBGCTL_SEL_HSCAL_CLK                            (0x41UL<<0)
N#define DEV_CMU_DBGCTL_SEL_PSRAM_MCLK                           (0x42UL<<0)
N#define DEV_CMU_DBGCTL_SEL_PSRAM_CLK                            (0x43UL<<0)
N#define DEV_CMU_DBGCTL_SEL_CAMERA_CLK                           (0x44UL<<0)
N#define DEV_CMU_DBGCTL_SEL_MASK                                 (0x7fUL<<0)
N/****CMU_DBGCTL end****/
N
N
N/***********************************CMU_TESTCTL***********************************/
N#define DEV_CMU_TESTCTL_P_TEST                                  (0x1UL<<8)
N#define DEV_CMU_TESTCTL_USB_SOF                                 (0x1UL<<7)
N#define DEV_CMU_TESTCTL_PLL_USB                                 (0x1UL<<6)
N#define DEV_CMU_TESTCTL_PLL_AUDIO                               (0x1UL<<5)
N#define DEV_CMU_TESTCTL_PLL_CORE                                (0x1UL<<4)
N#define DEV_CMU_TESTCTL_OSC_USB                                 (0x1UL<<3)
N#define DEV_CMU_TESTCTL_OSC_XTAL                                (0x1UL<<2)
N#define DEV_CMU_TESTCTL_OSC_DEV                                 (0x1UL<<1)
N#define DEV_CMU_TESTCTL_OSC_ADC                                 (0x1UL<<0)
N/****CMU_TESTCTL end****/
N
N
N/***********************************DEV_CMU register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    CLKEN0;                                  /* 0x0    Clock Enable */
X    volatile    uint32_t    CLKEN0;                                   
N    __IO    uint32_t    CLKEN1;                                  /* 0x4    Clock Enable */
X    volatile    uint32_t    CLKEN1;                                   
N            uint32_t    RESERVED0[2];
N    __IO    uint32_t    SYSCLK;                                  /* 0x10    System Clock */
X    volatile    uint32_t    SYSCLK;                                   
N            uint32_t    RESERVED1[3];
N    __IO    uint32_t    SPInCLK[2];                              /* 0x20    SPI0 Clock */
X    volatile    uint32_t    SPInCLK[2];                               
N    __IO    uint32_t    I2CnCLK[2];                              /* 0x28    I2C0 Clock */
X    volatile    uint32_t    I2CnCLK[2];                               
N    __IO    uint32_t    UARTnCLK[3];                             /* 0x30    UART0 Clock */
X    volatile    uint32_t    UARTnCLK[3];                              
N    __IO    uint32_t    NOR0CLK;                                 /* 0x3c    NOR0 Clock */
X    volatile    uint32_t    NOR0CLK;                                  
N    __IO    uint32_t    PWMnCLK[8];                              /* 0x40    PWM0 Clock */
X    volatile    uint32_t    PWMnCLK[8];                               
N    __IO    uint32_t    TIMERnCLK[4];                            /* 0x60    Timer0 Clock */
X    volatile    uint32_t    TIMERnCLK[4];                             
N    __IO    uint32_t    ADCCLK;                                  /* 0x70    Audio ADC Clock */
X    volatile    uint32_t    ADCCLK;                                   
N    __IO    uint32_t    DACCLK;                                  /* 0x74    Audio DAC Clock */
X    volatile    uint32_t    DACCLK;                                   
N    __IO    uint32_t    ASInCLK[2];                              /* 0x78    Audio Serial Interface0 Clock */
X    volatile    uint32_t    ASInCLK[2];                               
N    __IO    uint32_t    IRRXCLK;                                 /* 0x80    IRRX Clock */
X    volatile    uint32_t    IRRXCLK;                                  
N    __IO    uint32_t    IRTXCLK;                                 /* 0x84    IRTX Clock */
X    volatile    uint32_t    IRTXCLK;                                  
N    __IO    uint32_t    TICKCLK;                                 /* 0x88    TICK Clock */
X    volatile    uint32_t    TICKCLK;                                  
N    __IO    uint32_t    SDCCLK;                                  /* 0x8c    SD Controller Clock */
X    volatile    uint32_t    SDCCLK;                                   
N    __IO    uint32_t    USBCLK;                                  /* 0x90    USB Controller Clock */
X    volatile    uint32_t    USBCLK;                                   
N    __IO    uint32_t    CP2CLK;                                  /* 0x94    Charge Pump Clock 2 */
X    volatile    uint32_t    CP2CLK;                                   
N    __IO    uint32_t    HSCALCLK;                                /* 0x98    Headset Calibration Clock */
X    volatile    uint32_t    HSCALCLK;                                 
N    __IO    uint32_t    DLYCLK;                                  /* 0x9c    DMIC Delay Clock */
X    volatile    uint32_t    DLYCLK;                                   
N    __IO    uint32_t    CAMERACLK;                               /* 0xa0    CAMERA Clock */
X    volatile    uint32_t    CAMERACLK;                                
N    __IO    uint32_t    UART3CLK;                                /* 0xa4    UART3 Clock */
X    volatile    uint32_t    UART3CLK;                                 
N    __IO    uint32_t    PSRAMCLK;                                /* 0xa8    PSRAM Clock */
X    volatile    uint32_t    PSRAMCLK;                                 
N            uint32_t    RESERVED2[17];
N    __IO    uint32_t    CLKDET;                                  /* 0xf0    Clock Detect */
X    volatile    uint32_t    CLKDET;                                   
N    __I     uint32_t    CLKRDY;                                  /* 0xf4    Clock Ready */
X    volatile const     uint32_t    CLKRDY;                                   
N    __IO    uint32_t    DBGCTL;                                  /* 0xf8    Debug Control */
X    volatile    uint32_t    DBGCTL;                                   
N    __IO    uint32_t    TESTCTL;                                 /* 0xfc    Test Control */
X    volatile    uint32_t    TESTCTL;                                  
N}DEV_CMU_RegDef;
N/****DEV_CMU end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 52 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_rmu.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_rmu.h" 1
N#ifndef __DEV_RMU_H__
N#define __DEV_RMU_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************RMU_RSTEN0***********************************/
N#define DEV_RMU_RSTEN0_MPU                                      (0x1UL<<30)
N#define DEV_RMU_RSTEN0_UART3                                    (0x1UL<<29)
N#define DEV_RMU_RSTEN0_CAMERA                                   (0x1UL<<28)
N#define DEV_RMU_RSTEN0_AON                                      (0x1UL<<27)
N#define DEV_RMU_RSTEN0_UDSP                                     (0x1UL<<26)
N#define DEV_RMU_RSTEN0_NPU                                      (0x1UL<<25)
N#define DEV_RMU_RSTEN0_SRC                                      (0x1UL<<24)
N#define DEV_RMU_RSTEN0_DAC                                      (0x1UL<<23)
N#define DEV_RMU_RSTEN0_ADC                                      (0x1UL<<22)
N#define DEV_RMU_RSTEN0_USB                                      (0x1UL<<20)
N#define DEV_RMU_RSTEN0_SDC                                      (0x1UL<<19)
N#define DEV_RMU_RSTEN0_PWM                                      (0x1UL<<18)
N#define DEV_RMU_RSTEN0_IRTX                                     (0x1UL<<17)
N#define DEV_RMU_RSTEN0_IRRX                                     (0x1UL<<16)
N#define DEV_RMU_RSTEN0_ASI1                                     (0x1UL<<15)
N#define DEV_RMU_RSTEN0_ASI0                                     (0x1UL<<14)
N#define DEV_RMU_RSTEN0_I2C1                                     (0x1UL<<13)
N#define DEV_RMU_RSTEN0_I2C0                                     (0x1UL<<12)
N#define DEV_RMU_RSTEN0_UART2                                    (0x1UL<<11)
N#define DEV_RMU_RSTEN0_UART1                                    (0x1UL<<10)
N#define DEV_RMU_RSTEN0_UART0                                    (0x1UL<<9)
N#define DEV_RMU_RSTEN0_SPI1                                     (0x1UL<<8)
N#define DEV_RMU_RSTEN0_SPI0                                     (0x1UL<<7)
N#define DEV_RMU_RSTEN0_TICK                                     (0x1UL<<6)
N#define DEV_RMU_RSTEN0_TIMER                                    (0x1UL<<5)
N#define DEV_RMU_RSTEN0_EINT                                     (0x1UL<<4)
N#define DEV_RMU_RSTEN0_ASU                                      (0x1UL<<3)
N#define DEV_RMU_RSTEN0_EFUSE                                    (0x1UL<<2)
N#define DEV_RMU_RSTEN0_GPIO                                     (0x1UL<<1)
N#define DEV_RMU_RSTEN0_DMA                                      (0x1UL<<0)
N/****RMU_RSTEN0 end****/
N
N
N/***********************************RMU_RSTEN1***********************************/
N#define DEV_RMU_RSTEN1_PSRAM                                    (0x1UL<<15)
N#define DEV_RMU_RSTEN1_MEM_BUS                                  (0x1UL<<14)
N#define DEV_RMU_RSTEN1_HST_BUS                                  (0x1UL<<13)
N#define DEV_RMU_RSTEN1_DEV_BUS                                  (0x1UL<<12)
N#define DEV_RMU_RSTEN1_RAM7                                     (0x1UL<<11)
N#define DEV_RMU_RSTEN1_RAM6                                     (0x1UL<<10)
N#define DEV_RMU_RSTEN1_RAM5                                     (0x1UL<<9)
N#define DEV_RMU_RSTEN1_RAM4                                     (0x1UL<<8)
N#define DEV_RMU_RSTEN1_RAM3                                     (0x1UL<<7)
N#define DEV_RMU_RSTEN1_RAM2                                     (0x1UL<<6)
N#define DEV_RMU_RSTEN1_RAM1                                     (0x1UL<<5)
N#define DEV_RMU_RSTEN1_RAM0                                     (0x1UL<<4)
N#define DEV_RMU_RSTEN1_CACHE                                    (0x1UL<<3)
N#define DEV_RMU_RSTEN1_NORC                                     (0x1UL<<2)
N#define DEV_RMU_RSTEN1_SYS                                      (0x1UL<<1)
N#define DEV_RMU_RSTEN1_CPU                                      (0x1UL<<0)
N/****RMU_RSTEN1 end****/
N
N
N/***********************************RMU_CPUVEC***********************************/
N#define DEV_RMU_CPUVEC_BOOT_ADDR_MASK                           (0xffffffffUL<<0)
N/****RMU_CPUVEC end****/
N
N
N/***********************************RMU_WDOG***********************************/
N#define DEV_RMU_WDOG_WDOG_PD                                    (0x1UL<<10)
N#define DEV_RMU_WDOG_DEFER_TIME_10MS                            (0x0UL<<8)
N#define DEV_RMU_WDOG_DEFER_TIME_125MS                           (0x1UL<<8)
N#define DEV_RMU_WDOG_DEFER_TIME_250MS                           (0x2UL<<8)
N#define DEV_RMU_WDOG_DEFER_TIME_500MS                           (0x3UL<<8)
N#define DEV_RMU_WDOG_DEFER_TIME_MASK                            (0x3UL<<8)
N#define DEV_RMU_WDOG_DEFER_EN                                   (0x1UL<<7)
N#define DEV_RMU_WDOG_WDOG_TIME_10MS                             (0x0UL<<4)
N#define DEV_RMU_WDOG_WDOG_TIME_125MS                            (0x1UL<<4)
N#define DEV_RMU_WDOG_WDOG_TIME_250MS                            (0x2UL<<4)
N#define DEV_RMU_WDOG_WDOG_TIME_500MS                            (0x3UL<<4)
N#define DEV_RMU_WDOG_WDOG_TIME_1S                               (0x4UL<<4)
N#define DEV_RMU_WDOG_WDOG_TIME_2S                               (0x5UL<<4)
N#define DEV_RMU_WDOG_WDOG_TIME_4S                               (0x6UL<<4)
N#define DEV_RMU_WDOG_WDOG_TIME_8S                               (0x7UL<<4)
N#define DEV_RMU_WDOG_WDOG_TIME_MASK                             (0x7UL<<4)
N#define DEV_RMU_WDOG_RESET_EN                                   (0x1UL<<3)
N#define DEV_RMU_WDOG_IRQ_EN                                     (0x1UL<<2)
N#define DEV_RMU_WDOG_WDOG_CLR                                   (0x1UL<<1)
N#define DEV_RMU_WDOG_WDOG_EN_DISABLE                            (0x0UL<<0)
N#define DEV_RMU_WDOG_WDOG_EN_ENABLE                             (0x1UL<<0)
N#define DEV_RMU_WDOG_WDOG_EN_MASK                               (0x1UL<<0)
N/****RMU_WDOG end****/
N
N
N/***********************************RMU_BOOT***********************************/
N#define DEV_RMU_BOOT_JTAG_WIRE_4WIRE                            (0x0UL<<26)
N#define DEV_RMU_BOOT_JTAG_WIRE_2WIRE                            (0x1UL<<26)
N#define DEV_RMU_BOOT_JTAG_WIRE_MASK                             (0x1UL<<26)
N#define DEV_RMU_BOOT_NOR_MODE_UNCA                              (0x0UL<<25)
N#define DEV_RMU_BOOT_NOR_MODE_CACHE                             (0x1UL<<25)
N#define DEV_RMU_BOOT_NOR_MODE_MASK                              (0x1UL<<25)
N#define DEV_RMU_BOOT_FIX_MODE_NOR                               (0x0UL<<24)
N#define DEV_RMU_BOOT_FIX_MODE_ILM                               (0x1UL<<24)
N#define DEV_RMU_BOOT_FIX_MODE_MASK                              (0x1UL<<24)
N#define DEV_RMU_BOOT_VEC_MODE_FIX                               (0x0UL<<23)
N#define DEV_RMU_BOOT_VEC_MODE_PIN                               (0x1UL<<23)
N#define DEV_RMU_BOOT_VEC_MODE_MASK                              (0x1UL<<23)
N#define DEV_RMU_BOOT_JTAG_POL_LEVEL                             (0x0UL<<22)
N#define DEV_RMU_BOOT_JTAG_POL_EDGE                              (0x1UL<<22)
N#define DEV_RMU_BOOT_JTAG_POL_MASK                              (0x1UL<<22)
N#define DEV_RMU_BOOT_CPU_BOOT                                   (0x1UL<<21)
N#define DEV_RMU_BOOT_PGM_SEL_MFP0                               (0x0UL<<18)
N#define DEV_RMU_BOOT_PGM_SEL_MFP1                               (0x1UL<<18)
N#define DEV_RMU_BOOT_PGM_SEL_MASK                               (0x1UL<<18)
N#define DEV_RMU_BOOT_PGM_SWT                                    (0x1UL<<17)
N#define DEV_RMU_BOOT_PGM_SOF                                    (0x1UL<<15)
N#define DEV_RMU_BOOT_PGM_KEY                                    (0x1UL<<14)
N#define DEV_RMU_BOOT_PGM_HRD                                    (0x1UL<<13)
N#define DEV_RMU_BOOT_PGM_EN                                     (0x1UL<<12)
N#define DEV_RMU_BOOT_JTAG_RST_MEM                               (0x1UL<<11)
N#define DEV_RMU_BOOT_JTAG_RST_GPIO                              (0x1UL<<10)
N#define DEV_RMU_BOOT_JTAG_RST_DEV                               (0x1UL<<9)
N#define DEV_RMU_BOOT_JTAG_RST_CPU                               (0x1UL<<8)
N#define DEV_RMU_BOOT_JTAG_SEL_DISABLE                           (0x0UL<<6)
N#define DEV_RMU_BOOT_JTAG_SEL_MFP1                              (0x1UL<<6)
N#define DEV_RMU_BOOT_JTAG_SEL_MFP2                              (0x2UL<<6)
N#define DEV_RMU_BOOT_JTAG_SEL_MFP3                              (0x3UL<<6)
N#define DEV_RMU_BOOT_JTAG_SEL_MASK                              (0x3UL<<6)
N#define DEV_RMU_BOOT_JTAG_SWT                                   (0x1UL<<5)
N#define DEV_RMU_BOOT_BOOT_SEL_NORMFP0                           (0x0UL<<3)
N#define DEV_RMU_BOOT_BOOT_SEL_NORMFP1                           (0x1UL<<3)
N#define DEV_RMU_BOOT_BOOT_SEL_NORMFP2                           (0x2UL<<3)
N#define DEV_RMU_BOOT_BOOT_SEL_NORMFP3                           (0x3UL<<3)
N#define DEV_RMU_BOOT_BOOT_SEL_MASK                              (0x3UL<<3)
N#define DEV_RMU_BOOT_BOOT_SWT                                   (0x1UL<<2)
N#define DEV_RMU_BOOT_RE_BOOT                                    (0x1UL<<1)
N#define DEV_RMU_BOOT_BOOT_EN_DISABLE                            (0x0UL<<0)
N#define DEV_RMU_BOOT_BOOT_EN_ENABLE                             (0x1UL<<0)
N#define DEV_RMU_BOOT_BOOT_EN_MASK                               (0x1UL<<0)
N/****RMU_BOOT end****/
N
N
N/***********************************RMU_PD***********************************/
N#define DEV_RMU_PD_BOOT                                         (0x1UL<<4)
N#define DEV_RMU_PD_WDOG                                         (0x1UL<<3)
N#define DEV_RMU_PD_P_RSTN                                       (0x1UL<<2)
N#define DEV_RMU_PD_ONOFF                                        (0x1UL<<1)
N#define DEV_RMU_PD_POWER                                        (0x1UL<<0)
N/****RMU_PD end****/
N
N
N/***********************************DEV_RMU register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    RSTEN0;                                  /* 0x0    Reset Enable */
X    volatile    uint32_t    RSTEN0;                                   
N    __IO    uint32_t    RSTEN1;                                  /* 0x4    Reset Enable */
X    volatile    uint32_t    RSTEN1;                                   
N            uint32_t    RESERVED0[3];
N    __IO    uint32_t    CPUVEC;                                  /* 0x14    CPU Reset Vector */
X    volatile    uint32_t    CPUVEC;                                   
N            uint32_t    RESERVED1[2];
N    __IO    uint32_t    WDOG;                                    /* 0x20    Watch Dog Control */
X    volatile    uint32_t    WDOG;                                     
N    __IO    uint32_t    BOOT;                                    /* 0x24    Boot Control */
X    volatile    uint32_t    BOOT;                                     
N            uint32_t    RESERVED2[6];
N    __IO    uint32_t    PD;                                      /* 0x40    RMU Pending */
X    volatile    uint32_t    PD;                                       
N}DEV_RMU_RegDef;
N/****DEV_RMU end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 53 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_wfi.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_wfi.h" 1
N#ifndef __DEV_WFI_H__
N#define __DEV_WFI_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************WFI_CTL***********************************/
N#define DEV_WFI_CTL_PSRAM                                       (0x1UL<<15)
N#define DEV_WFI_CTL_MEM                                         (0x1UL<<14)
N#define DEV_WFI_CTL_HST                                         (0x1UL<<13)
N#define DEV_WFI_CTL_DEV                                         (0x1UL<<12)
N#define DEV_WFI_CTL_RAM7                                        (0x1UL<<11)
N#define DEV_WFI_CTL_RAM6                                        (0x1UL<<10)
N#define DEV_WFI_CTL_RAM5                                        (0x1UL<<9)
N#define DEV_WFI_CTL_RAM4                                        (0x1UL<<8)
N#define DEV_WFI_CTL_RAM3                                        (0x1UL<<7)
N#define DEV_WFI_CTL_RAM2                                        (0x1UL<<6)
N#define DEV_WFI_CTL_RAM1                                        (0x1UL<<5)
N#define DEV_WFI_CTL_RAM0                                        (0x1UL<<4)
N#define DEV_WFI_CTL_CACHE                                       (0x1UL<<3)
N#define DEV_WFI_CTL_NORC                                        (0x1UL<<2)
N#define DEV_WFI_CTL_SYS                                         (0x1UL<<1)
N#define DEV_WFI_CTL_CPU                                         (0x1UL<<0)
N/****WFI_CTL end****/
N
N
N/***********************************WFI_MASK0***********************************/
N#define DEV_WFI_MASK0_MASK                                      (0xffffffffUL<<0)
N/****WFI_MASK0 end****/
N
N
N/***********************************WFI_MASK1***********************************/
N#define DEV_WFI_MASK1_MASK                                      (0xffffffffUL<<0)
N/****WFI_MASK1 end****/
N
N
N/***********************************WFI_STA0***********************************/
N#define DEV_WFI_STA0_STATUS_MASK                                (0xffffffffUL<<0)
N/****WFI_STA0 end****/
N
N
N/***********************************WFI_STA1***********************************/
N#define DEV_WFI_STA1_STATUS_MASK                                (0xffffffffUL<<0)
N/****WFI_STA1 end****/
N
N
N/***********************************NMI_MASK0***********************************/
N#define DEV_WFI_NMI_MASK0_MASK                                  (0xffffffffUL<<0)
N/****NMI_MASK0 end****/
N
N
N/***********************************NMI_MASK1***********************************/
N#define DEV_WFI_NMI_MASK1_MASK                                  (0xffffffffUL<<0)
N/****NMI_MASK1 end****/
N
N
N/***********************************NMI_STA0***********************************/
N#define DEV_WFI_NMI_STA0_STAT0_MASK                             (0xffffffffUL<<0)
N/****NMI_STA0 end****/
N
N
N/***********************************NMI_STA1***********************************/
N#define DEV_WFI_NMI_STA1_STAT1_MASK                             (0xffffffffUL<<0)
N/****NMI_STA1 end****/
N
N
N/***********************************DEV_WFI register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    CTL;                                     /* 0x0    Wake For Interrupt Control */
X    volatile    uint32_t    CTL;                                      
N            uint32_t    RESERVED0[3];
N    __IO    uint32_t    MASK0;                                   /* 0x10    Wake For Interrupt Mask0 */
X    volatile    uint32_t    MASK0;                                    
N    __IO    uint32_t    MASK1;                                   /* 0x14    Wake For Interrupt Mask1 */
X    volatile    uint32_t    MASK1;                                    
N    __I     uint32_t    STA0;                                    /* 0x18    Wake For Interrupt Status0 */
X    volatile const     uint32_t    STA0;                                     
N    __I     uint32_t    STA1;                                    /* 0x1c    Wake For Interrupt Status1 */
X    volatile const     uint32_t    STA1;                                     
N    __IO    uint32_t    NMI_MASK0;                               /* 0x20    Non Mask Interrupt Mask0 */
X    volatile    uint32_t    NMI_MASK0;                                
N    __IO    uint32_t    NMI_MASK1;                               /* 0x24    Non Mask Interrupt Mask1 */
X    volatile    uint32_t    NMI_MASK1;                                
N    __I     uint32_t    NMI_STA0;                                /* 0x28    Non Mask Interrupt Status0 */
X    volatile const     uint32_t    NMI_STA0;                                 
N    __I     uint32_t    NMI_STA1;                                /* 0x2c    Non Mask Interrupt Status1 */
X    volatile const     uint32_t    NMI_STA1;                                 
N}DEV_WFI_RegDef;
N/****DEV_WFI end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 54 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_ureg.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_ureg.h" 1
N#ifndef __DEV_UREG_H__
N#define __DEV_UREG_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************USB_PHY_CTRL0***********************************/
N#define DEV_UREG_USB_PHY_CTRL0_PULLDMDN_DISABLE                 (0x0UL<<28)
N#define DEV_UREG_USB_PHY_CTRL0_PULLDMDN_ENABLE                  (0x1UL<<28)
N#define DEV_UREG_USB_PHY_CTRL0_PULLDMDN_MASK                    (0x1UL<<28)
N#define DEV_UREG_USB_PHY_CTRL0_PULLDPDN_DISABLE                 (0x0UL<<27)
N#define DEV_UREG_USB_PHY_CTRL0_PULLDPDN_ENABLE                  (0x1UL<<27)
N#define DEV_UREG_USB_PHY_CTRL0_PULLDPDN_MASK                    (0x1UL<<27)
N#define DEV_UREG_USB_PHY_CTRL0_DIV_INT_I_MASK                   (0x1ffUL<<16)
N#define DEV_UREG_USB_PHY_CTRL0_HSZR_CNTL_55OHMS                 (0x0UL<<12)
N#define DEV_UREG_USB_PHY_CTRL0_HSZR_CNTL_49OHMS                 (0x1UL<<12)
N#define DEV_UREG_USB_PHY_CTRL0_HSZR_CNTL_44OHMS                 (0x3UL<<12)
N#define DEV_UREG_USB_PHY_CTRL0_HSZR_CNTL_40OHMS                 (0x7UL<<12)
N#define DEV_UREG_USB_PHY_CTRL0_HSZR_CNTL_37OHMS                 (0xfUL<<12)
N#define DEV_UREG_USB_PHY_CTRL0_HSZR_CNTL_MASK                   (0xfUL<<12)
N#define DEV_UREG_USB_PHY_CTRL0_FSZR_CNTL_55OHMS                 (0x0UL<<8)
N#define DEV_UREG_USB_PHY_CTRL0_FSZR_CNTL_49OHMS                 (0x1UL<<8)
N#define DEV_UREG_USB_PHY_CTRL0_FSZR_CNTL_44OHMS                 (0x3UL<<8)
N#define DEV_UREG_USB_PHY_CTRL0_FSZR_CNTL_40OHMS                 (0x7UL<<8)
N#define DEV_UREG_USB_PHY_CTRL0_FSZR_CNTL_37OHMS                 (0xfUL<<8)
N#define DEV_UREG_USB_PHY_CTRL0_FSZR_CNTL_MASK                   (0xfUL<<8)
N#define DEV_UREG_USB_PHY_CTRL0_DIV_VALUE_SEL_HARDWAREMODE       (0x0UL<<7)
N#define DEV_UREG_USB_PHY_CTRL0_DIV_VALUE_SEL_SOFTWAREMODE       (0x1UL<<7)
N#define DEV_UREG_USB_PHY_CTRL0_DIV_VALUE_SEL_MASK               (0x1UL<<7)
N#define DEV_UREG_USB_PHY_CTRL0_SIM_FAST                         (0x1UL<<6)
N#define DEV_UREG_USB_PHY_CTRL0_SELF_TEST                        (0x1UL<<5)
N#define DEV_UREG_USB_PHY_CTRL0_DIV_TRIM_EN                      (0x1UL<<4)
N#define DEV_UREG_USB_PHY_CTRL0_CLK_SEL_INNEROSC                 (0x0UL<<3)
N#define DEV_UREG_USB_PHY_CTRL0_CLK_SEL_CLK12M                   (0x1UL<<3)
N#define DEV_UREG_USB_PHY_CTRL0_CLK_SEL_MASK                     (0x1UL<<3)
N#define DEV_UREG_USB_PHY_CTRL0_PLL_EN                           (0x1UL<<2)
N#define DEV_UREG_USB_PHY_CTRL0_EN_PHY_POWEROFF                  (0x0UL<<1)
N#define DEV_UREG_USB_PHY_CTRL0_EN_PHY_POWERON                   (0x1UL<<1)
N#define DEV_UREG_USB_PHY_CTRL0_EN_PHY_MASK                      (0x1UL<<1)
N#define DEV_UREG_USB_PHY_CTRL0_RESET_WORKING                    (0x0UL<<0)
N#define DEV_UREG_USB_PHY_CTRL0_RESET_RESET                      (0x1UL<<0)
N#define DEV_UREG_USB_PHY_CTRL0_RESET_MASK                       (0x1UL<<0)
N/****USB_PHY_CTRL0 end****/
N
N
N/***********************************USB_PHY_CTRL1***********************************/
N#define DEV_UREG_USB_PHY_CTRL1_FRAC_EN_I_DISABLE                (0x0UL<<21)
N#define DEV_UREG_USB_PHY_CTRL1_FRAC_EN_I_ENABLE                 (0x1UL<<21)
N#define DEV_UREG_USB_PHY_CTRL1_FRAC_EN_I_MASK                   (0x1UL<<21)
N#define DEV_UREG_USB_PHY_CTRL1_DIV_FRAC_I_MASK                  (0x1fffffUL<<0)
N/****USB_PHY_CTRL1 end****/
N
N
N/***********************************USB_PHY_CTRL2***********************************/
N#define DEV_UREG_USB_PHY_CTRL2_VSTATUS_MASK                     (0xffffffffUL<<0)
N/****USB_PHY_CTRL2 end****/
N
N
N/***********************************USB_PLL_CTRL***********************************/
N#define DEV_UREG_USB_PLL_CTRL_OSC_USB_DIV_1                     (0x0UL<<29)
N#define DEV_UREG_USB_PLL_CTRL_OSC_USB_DIV_2                     (0x1UL<<29)
N#define DEV_UREG_USB_PLL_CTRL_OSC_USB_DIV_MASK                  (0x1UL<<29)
N#define DEV_UREG_USB_PLL_CTRL_OSC_USB_SEL_XCLK                  (0x0UL<<28)
N#define DEV_UREG_USB_PLL_CTRL_OSC_USB_SEL_RC64M                 (0x1UL<<28)
N#define DEV_UREG_USB_PLL_CTRL_OSC_USB_SEL_MASK                  (0x1UL<<28)
N#define DEV_UREG_USB_PLL_CTRL_PLL_USB_EN                        (0x1UL<<26)
N#define DEV_UREG_USB_PLL_CTRL_OSC_USB_EN                        (0x1UL<<25)
N#define DEV_UREG_USB_PLL_CTRL_USB_SOF_EN                        (0x1UL<<24)
N#define DEV_UREG_USB_PLL_CTRL_RC32M_CTUNE_MASK                  (0x7fUL<<16)
N#define DEV_UREG_USB_PLL_CTRL_ICP_SEL_0_5UA                     (0x0UL<<10)
N#define DEV_UREG_USB_PLL_CTRL_ICP_SEL_1UA                       (0x1UL<<10)
N#define DEV_UREG_USB_PLL_CTRL_ICP_SEL_1_5UA                     (0x2UL<<10)
N#define DEV_UREG_USB_PLL_CTRL_ICP_SEL_2UA                       (0x3UL<<10)
N#define DEV_UREG_USB_PLL_CTRL_ICP_SEL_2_5UA                     (0x4UL<<10)
N#define DEV_UREG_USB_PLL_CTRL_ICP_SEL_3UA                       (0x5UL<<10)
N#define DEV_UREG_USB_PLL_CTRL_ICP_SEL_3_5UA                     (0x6UL<<10)
N#define DEV_UREG_USB_PLL_CTRL_ICP_SEL_4UA                       (0x7UL<<10)
N#define DEV_UREG_USB_PLL_CTRL_ICP_SEL_MASK                      (0x7UL<<10)
N#define DEV_UREG_USB_PLL_CTRL_REG_VCO_LV_MASK                   (0x3UL<<8)
N#define DEV_UREG_USB_PLL_CTRL_DITHER_BIT_BIT0                   (0x0UL<<5)
N#define DEV_UREG_USB_PLL_CTRL_DITHER_BIT_BIT1                   (0x1UL<<5)
N#define DEV_UREG_USB_PLL_CTRL_DITHER_BIT_MASK                   (0x1UL<<5)
N#define DEV_UREG_USB_PLL_CTRL_DITHER_EN_DISABLE                 (0x0UL<<4)
N#define DEV_UREG_USB_PLL_CTRL_DITHER_EN_ENABLE                  (0x1UL<<4)
N#define DEV_UREG_USB_PLL_CTRL_DITHER_EN_MASK                    (0x1UL<<4)
N#define DEV_UREG_USB_PLL_CTRL_LOCK_TIME_32_TDELAY               (0x0UL<<2)
N#define DEV_UREG_USB_PLL_CTRL_LOCK_TIME_128_TDELAY              (0x1UL<<2)
N#define DEV_UREG_USB_PLL_CTRL_LOCK_TIME_256_TDELAY              (0x2UL<<2)
N#define DEV_UREG_USB_PLL_CTRL_LOCK_TIME_512_TDELAY              (0x3UL<<2)
N#define DEV_UREG_USB_PLL_CTRL_LOCK_TIME_MASK                    (0x3UL<<2)
N#define DEV_UREG_USB_PLL_CTRL_DELAY_X1_2NS                      (0x0UL<<1)
N#define DEV_UREG_USB_PLL_CTRL_DELAY_X1_4NS                      (0x1UL<<1)
N#define DEV_UREG_USB_PLL_CTRL_DELAY_X1_MASK                     (0x1UL<<1)
N#define DEV_UREG_USB_PLL_CTRL_FORCE_LOCK_NOTBYPASS              (0x0UL<<0)
N#define DEV_UREG_USB_PLL_CTRL_FORCE_LOCK_BYPASS                 (0x1UL<<0)
N#define DEV_UREG_USB_PLL_CTRL_FORCE_LOCK_MASK                   (0x1UL<<0)
N/****USB_PLL_CTRL end****/
N
N
N/***********************************USB_DBG_CTRL0***********************************/
N#define DEV_UREG_USB_DBG_CTRL0_DEBUG3_MASK                      (0xffUL<<24)
N#define DEV_UREG_USB_DBG_CTRL0_DEBUG2_MASK                      (0xffUL<<16)
N#define DEV_UREG_USB_DBG_CTRL0_DEBUG1_MASK                      (0xffUL<<8)
N#define DEV_UREG_USB_DBG_CTRL0_DEBUG0_MASK                      (0xffUL<<0)
N/****USB_DBG_CTRL0 end****/
N
N
N/***********************************USB_DBG_CTRL1***********************************/
N#define DEV_UREG_USB_DBG_CTRL1_DEBUG4_MASK                      (0xffUL<<0)
N/****USB_DBG_CTRL1 end****/
N
N
N/***********************************USB_PHY_STAT0***********************************/
N#define DEV_UREG_USB_PHY_STAT0_DIV_INT_O_MASK                   (0x7ffUL<<16)
N#define DEV_UREG_USB_PHY_STAT0_BIST_PASS                        (0x1UL<<2)
N#define DEV_UREG_USB_PHY_STAT0_TRIM_LOCK                        (0x1UL<<1)
N#define DEV_UREG_USB_PHY_STAT0_CLK_STATE                        (0x1UL<<0)
N/****USB_PHY_STAT0 end****/
N
N
N/***********************************USB_PHY_STAT1***********************************/
N#define DEV_UREG_USB_PHY_STAT1_DIV_FRAC_O_MASK                  (0x1fffffUL<<0)
N/****USB_PHY_STAT1 end****/
N
N
N/***********************************USB_CTR_BIST0***********************************/
N#define DEV_UREG_USB_CTR_BIST0_PHY_FAKE_CRC0_MASK               (0xffUL<<24)
N#define DEV_UREG_USB_CTR_BIST0_PHY_FAKE_CRC1_MASK               (0xffUL<<16)
N#define DEV_UREG_USB_CTR_BIST0_PHY_FAKE_REQ                     (0x1UL<<15)
N#define DEV_UREG_USB_CTR_BIST0_PHY_FAKE_ADDR_MASK               (0x7fUL<<8)
N#define DEV_UREG_USB_CTR_BIST0_PHY_FAKE_EN                      (0x1UL<<7)
N#define DEV_UREG_USB_CTR_BIST0_PHY_FAKE_ENDP_MASK               (0x3UL<<5)
N#define DEV_UREG_USB_CTR_BIST0_PHY_FAKE_CRC2_MASK               (0x1fUL<<0)
N/****USB_CTR_BIST0 end****/
N
N
N/***********************************USB_CTR_BIST1***********************************/
N#define DEV_UREG_USB_CTR_BIST1_PHY_FAKE_data3_MASK              (0xffUL<<24)
N#define DEV_UREG_USB_CTR_BIST1_PHY_FAKE_data2_MASK              (0xffUL<<16)
N#define DEV_UREG_USB_CTR_BIST1_PHY_FAKE_data1_MASK              (0xffUL<<8)
N#define DEV_UREG_USB_CTR_BIST1_PHY_FAKE_data0_MASK              (0xffUL<<0)
N/****USB_CTR_BIST1 end****/
N
N
N/***********************************USB_CTR_BIST2***********************************/
N#define DEV_UREG_USB_CTR_BIST2_PHY_FAKE_data7_MASK              (0xffUL<<24)
N#define DEV_UREG_USB_CTR_BIST2_PHY_FAKE_data6_MASK              (0xffUL<<16)
N#define DEV_UREG_USB_CTR_BIST2_PHY_FAKE_data5_MASK              (0xffUL<<8)
N#define DEV_UREG_USB_CTR_BIST2_PHY_FAKE_data4_MASK              (0xffUL<<0)
N/****USB_CTR_BIST2 end****/
N
N
N/***********************************DEV_UREG register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    USB_PHY_CTRL0;                           /* 0x0    USB PHY Control0 */
X    volatile    uint32_t    USB_PHY_CTRL0;                            
N    __IO    uint32_t    USB_PHY_CTRL1;                           /* 0x4    USB PHY Control1 */
X    volatile    uint32_t    USB_PHY_CTRL1;                            
N    __IO    uint32_t    USB_PHY_CTRL2;                           /* 0x8    USB PHY Control2 */
X    volatile    uint32_t    USB_PHY_CTRL2;                            
N    __IO    uint32_t    USB_PLL_CTRL;                            /* 0xc    USB PLL Control */
X    volatile    uint32_t    USB_PLL_CTRL;                             
N    __IO    uint32_t    USB_DBG_CTRL0;                           /* 0x10    USB Debug Control0 */
X    volatile    uint32_t    USB_DBG_CTRL0;                            
N    __IO    uint32_t    USB_DBG_CTRL1;                           /* 0x14    USB Debug Control1 */
X    volatile    uint32_t    USB_DBG_CTRL1;                            
N    __I     uint32_t    USB_PHY_STAT0;                           /* 0x18    USB PHY Status0 */
X    volatile const     uint32_t    USB_PHY_STAT0;                            
N    __I     uint32_t    USB_PHY_STAT1;                           /* 0x1c    USB PHY Status1 */
X    volatile const     uint32_t    USB_PHY_STAT1;                            
N    __IO    uint32_t    USB_CTR_BIST0;                           /* 0x20    USB controller BIST signal part 1 */
X    volatile    uint32_t    USB_CTR_BIST0;                            
N    __IO    uint32_t    USB_CTR_BIST1;                           /* 0x24    USB controller BIST signal part 2 */
X    volatile    uint32_t    USB_CTR_BIST1;                            
N    __IO    uint32_t    USB_CTR_BIST2;                           /* 0x28    USB controller BIST signal part3 */
X    volatile    uint32_t    USB_CTR_BIST2;                            
N}DEV_UREG_RegDef;
N/****DEV_UREG end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 55 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_global.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_global.h" 1
N#ifndef __DEV_GLOBAL_H__
N#define __DEV_GLOBAL_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************DVDD_GLOBAL0***********************************/
N#define DEV_GLOBAL_DVDD_GLOBAL0_VALUE_MASK                      (0xffffffffUL<<0)
N/****DVDD_GLOBAL0 end****/
N
N
N/***********************************DVDD_GLOBAL1***********************************/
N#define DEV_GLOBAL_DVDD_GLOBAL1_VALUE_MASK                      (0xffffffffUL<<0)
N/****DVDD_GLOBAL1 end****/
N
N
N/***********************************DVDD_GLOBAL2***********************************/
N#define DEV_GLOBAL_DVDD_GLOBAL2_VALUE_MASK                      (0xffffffffUL<<0)
N/****DVDD_GLOBAL2 end****/
N
N
N/***********************************DVDD_GLOBAL3***********************************/
N#define DEV_GLOBAL_DVDD_GLOBAL3_VALUE_MASK                      (0xffffffffUL<<0)
N/****DVDD_GLOBAL3 end****/
N
N
N/***********************************DVDD_GLOBAL4***********************************/
N#define DEV_GLOBAL_DVDD_GLOBAL4_VALUE_MASK                      (0xffffffffUL<<0)
N/****DVDD_GLOBAL4 end****/
N
N
N/***********************************DVDD_GLOBAL5***********************************/
N#define DEV_GLOBAL_DVDD_GLOBAL5_VALUE_MASK                      (0xffffffffUL<<0)
N/****DVDD_GLOBAL5 end****/
N
N
N/***********************************DVDD_GLOBAL6***********************************/
N#define DEV_GLOBAL_DVDD_GLOBAL6_VALUE_MASK                      (0xffffffffUL<<0)
N/****DVDD_GLOBAL6 end****/
N
N
N/***********************************DVDD_GLOBAL7***********************************/
N#define DEV_GLOBAL_DVDD_GLOBAL7_VALUE_MASK                      (0xffffffffUL<<0)
N/****DVDD_GLOBAL7 end****/
N
N
N/***********************************DEV_GLOBAL register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    DVDD_GLOBAL0;                            /* 0x0    DVDD Global Register */
X    volatile    uint32_t    DVDD_GLOBAL0;                             
N    __IO    uint32_t    DVDD_GLOBAL1;                            /* 0x4    DVDD Global Register */
X    volatile    uint32_t    DVDD_GLOBAL1;                             
N    __IO    uint32_t    DVDD_GLOBAL2;                            /* 0x8    DVDD Global Register */
X    volatile    uint32_t    DVDD_GLOBAL2;                             
N    __IO    uint32_t    DVDD_GLOBAL3;                            /* 0xc    DVDD Global Register */
X    volatile    uint32_t    DVDD_GLOBAL3;                             
N    __IO    uint32_t    DVDD_GLOBAL4;                            /* 0x10    DVDD Global Register */
X    volatile    uint32_t    DVDD_GLOBAL4;                             
N    __IO    uint32_t    DVDD_GLOBAL5;                            /* 0x14    DVDD Global Register */
X    volatile    uint32_t    DVDD_GLOBAL5;                             
N    __IO    uint32_t    DVDD_GLOBAL6;                            /* 0x18    DVDD Global Register */
X    volatile    uint32_t    DVDD_GLOBAL6;                             
N    __IO    uint32_t    DVDD_GLOBAL7;                            /* 0x1c    DVDD Global Register */
X    volatile    uint32_t    DVDD_GLOBAL7;                             
N}DEV_GLOBAL_RegDef;
N/****DEV_GLOBAL end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 56 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_timer.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_timer.h" 1
N#ifndef __DEV_TIMER_H__
N#define __DEV_TIMER_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************TIMER_IE***********************************/
N#define DEV_TIMER_IE_DMA_EN3_DISABLE                            (0x0UL<<19)
N#define DEV_TIMER_IE_DMA_EN3_ENABLE                             (0x1UL<<19)
N#define DEV_TIMER_IE_DMA_EN3_MASK                               (0x1UL<<19)
N#define DEV_TIMER_IE_DMA_EN2_DISABLE                            (0x0UL<<18)
N#define DEV_TIMER_IE_DMA_EN2_ENABLE                             (0x1UL<<18)
N#define DEV_TIMER_IE_DMA_EN2_MASK                               (0x1UL<<18)
N#define DEV_TIMER_IE_DMA_EN1_DISABLE                            (0x0UL<<17)
N#define DEV_TIMER_IE_DMA_EN1_ENABLE                             (0x1UL<<17)
N#define DEV_TIMER_IE_DMA_EN1_MASK                               (0x1UL<<17)
N#define DEV_TIMER_IE_DMA_EN0_DISABLE                            (0x0UL<<16)
N#define DEV_TIMER_IE_DMA_EN0_ENABLE                             (0x1UL<<16)
N#define DEV_TIMER_IE_DMA_EN0_MASK                               (0x1UL<<16)
N#define DEV_TIMER_IE_CAPTURE3_DISABLE                           (0x0UL<<11)
N#define DEV_TIMER_IE_CAPTURE3_ENABLE                            (0x1UL<<11)
N#define DEV_TIMER_IE_CAPTURE3_MASK                              (0x1UL<<11)
N#define DEV_TIMER_IE_CAPTURE2_DISABLE                           (0x0UL<<10)
N#define DEV_TIMER_IE_CAPTURE2_ENABLE                            (0x1UL<<10)
N#define DEV_TIMER_IE_CAPTURE2_MASK                              (0x1UL<<10)
N#define DEV_TIMER_IE_CAPTURE1_DISABLE                           (0x0UL<<9)
N#define DEV_TIMER_IE_CAPTURE1_ENABLE                            (0x1UL<<9)
N#define DEV_TIMER_IE_CAPTURE1_MASK                              (0x1UL<<9)
N#define DEV_TIMER_IE_CAPTURE0_DISABLE                           (0x0UL<<8)
N#define DEV_TIMER_IE_CAPTURE0_ENABLE                            (0x1UL<<8)
N#define DEV_TIMER_IE_CAPTURE0_MASK                              (0x1UL<<8)
N#define DEV_TIMER_IE_TIMER3_DISABLE                             (0x0UL<<3)
N#define DEV_TIMER_IE_TIMER3_ENABLE                              (0x1UL<<3)
N#define DEV_TIMER_IE_TIMER3_MASK                                (0x1UL<<3)
N#define DEV_TIMER_IE_TIMER2_DISABLE                             (0x0UL<<2)
N#define DEV_TIMER_IE_TIMER2_ENABLE                              (0x1UL<<2)
N#define DEV_TIMER_IE_TIMER2_MASK                                (0x1UL<<2)
N#define DEV_TIMER_IE_TIMER1_DISABLE                             (0x0UL<<1)
N#define DEV_TIMER_IE_TIMER1_ENABLE                              (0x1UL<<1)
N#define DEV_TIMER_IE_TIMER1_MASK                                (0x1UL<<1)
N#define DEV_TIMER_IE_TIMER0_DISABLE                             (0x0UL<<0)
N#define DEV_TIMER_IE_TIMER0_ENABLE                              (0x1UL<<0)
N#define DEV_TIMER_IE_TIMER0_MASK                                (0x1UL<<0)
N/****TIMER_IE end****/
N
N
N/***********************************TIMER_PD***********************************/
N#define DEV_TIMER_PD_CAPTURE3                                   (0x1UL<<11)
N#define DEV_TIMER_PD_CAPTURE2                                   (0x1UL<<10)
N#define DEV_TIMER_PD_CAPTURE1                                   (0x1UL<<9)
N#define DEV_TIMER_PD_CAPTURE0                                   (0x1UL<<8)
N#define DEV_TIMER_PD_TIMER3                                     (0x1UL<<3)
N#define DEV_TIMER_PD_TIMER2                                     (0x1UL<<2)
N#define DEV_TIMER_PD_TIMER1                                     (0x1UL<<1)
N#define DEV_TIMER_PD_TIMER0                                     (0x1UL<<0)
N/****TIMER_PD end****/
N
N
N/***********************************TIMERn_CTL***********************************/
N#define DEV_TIMER_CTL_CAP_POL_RISE_FALL                         (0x0UL<<25)
N#define DEV_TIMER_CTL_CAP_POL_FALL_RISE                         (0x1UL<<25)
N#define DEV_TIMER_CTL_CAP_POL_MASK                              (0x1UL<<25)
N#define DEV_TIMER_CTL_PREDIVL_MASK                              (0x1fUL<<20)
N#define DEV_TIMER_CTL_CAP_FMT_DISABLE                           (0x0UL<<19)
N#define DEV_TIMER_CTL_CAP_FMT_ENABLE                            (0x1UL<<19)
N#define DEV_TIMER_CTL_CAP_FMT_MASK                              (0x1UL<<19)
N#define DEV_TIMER_CTL_DEBOUNCE_0US                              (0x0UL<<16)
N#define DEV_TIMER_CTL_DEBOUNCE_1US                              (0x1UL<<16)
N#define DEV_TIMER_CTL_DEBOUNCE_2US                              (0x2UL<<16)
N#define DEV_TIMER_CTL_DEBOUNCE_4US                              (0x3UL<<16)
N#define DEV_TIMER_CTL_DEBOUNCE_8US                              (0x4UL<<16)
N#define DEV_TIMER_CTL_DEBOUNCE_16US                             (0x5UL<<16)
N#define DEV_TIMER_CTL_DEBOUNCE_32US                             (0x6UL<<16)
N#define DEV_TIMER_CTL_DEBOUNCE_64US                             (0x7UL<<16)
N#define DEV_TIMER_CTL_DEBOUNCE_MASK                             (0x7UL<<16)
N#define DEV_TIMER_CTL_GPIO_SRC_MASK                             (0x1fUL<<8)
N#define DEV_TIMER_CTL_EDGE_FREERUN                              (0x0UL<<6)
N#define DEV_TIMER_CTL_EDGE_HIGHLEVEL                            (0x1UL<<6)
N#define DEV_TIMER_CTL_EDGE_LOWLEVEL                             (0x2UL<<6)
N#define DEV_TIMER_CTL_EDGE_MASK                                 (0x3UL<<6)
N#define DEV_TIMER_CTL_MODE_TIMER                                (0x0UL<<4)
N#define DEV_TIMER_CTL_MODE_COUNTER                              (0x1UL<<4)
N#define DEV_TIMER_CTL_MODE_CAPTURE                              (0x2UL<<4)
N#define DEV_TIMER_CTL_MODE_MASK                                 (0x3UL<<4)
N#define DEV_TIMER_CTL_RESTART                                   (0x1UL<<3)
N#define DEV_TIMER_CTL_DIRECTION_INCREASE                        (0x0UL<<2)
N#define DEV_TIMER_CTL_DIRECTION_DECREASE                        (0x1UL<<2)
N#define DEV_TIMER_CTL_DIRECTION_MASK                            (0x1UL<<2)
N#define DEV_TIMER_CTL_RELOAD_EN_SINGLEMODE                      (0x0UL<<1)
N#define DEV_TIMER_CTL_RELOAD_EN_RELOADMODE                      (0x1UL<<1)
N#define DEV_TIMER_CTL_RELOAD_EN_MASK                            (0x1UL<<1)
N#define DEV_TIMER_CTL_RUN_DISABLE                               (0x0UL<<0)
N#define DEV_TIMER_CTL_RUN_ENABLE                                (0x1UL<<0)
N#define DEV_TIMER_CTL_RUN_MASK                                  (0x1UL<<0)
N/****TIMERn_CTL end****/
N
N
N/***********************************TIMERn_LEN***********************************/
N#define DEV_TIMER_LEN_LENGTH_MASK                               (0xffffffffUL<<0)
N/****TIMERn_LEN end****/
N
N
N/***********************************TIMERn_VAL***********************************/
N#define DEV_TIMER_VAL_VALUE_MASK                                (0xffffffffUL<<0)
N/****TIMERn_VAL end****/
N
N
N/***********************************TIMERn_CAP***********************************/
N#define DEV_TIMER_CAP_POL_LOW_FALL                              (0x0UL<<31)
N#define DEV_TIMER_CAP_POL_HIGH_RISE                             (0x1UL<<31)
N#define DEV_TIMER_CAP_POL_MASK                                  (0x1UL<<31)
N#define DEV_TIMER_CAP_VALUE_MASK                                (0x7fffffffUL<<0)
N/****TIMERn_CAP end****/
N
N
N/***********************************TIMER register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    CTL;                                     /* 0x20    Timer0 Control */
X    volatile    uint32_t    CTL;                                      
N    __IO    uint32_t    LEN;                                     /* 0x24    Timer0 Length */
X    volatile    uint32_t    LEN;                                      
N    __I     uint32_t    VAL;                                     /* 0x28    Timer0 Current Value */
X    volatile const     uint32_t    VAL;                                      
N    __I     uint32_t    CAP;                                     /* 0x2c    Timer0 Capture Value */
X    volatile const     uint32_t    CAP;                                      
N            uint32_t    RESERVED0[4];
N}TIMER_RegDef;
N/****TIMER end****/
N
N/***********************************DEV_TIMER register***********************************/
Ntypedef struct{
N
N            uint32_t    RESERVED0;
N    __IO    uint32_t    IE;                                      /* 0x4    Timer Interrupt Enable */
X    volatile    uint32_t    IE;                                       
N    __IO    uint32_t    PD;                                      /* 0x8    Timer Interrupt Pending */
X    volatile    uint32_t    PD;                                       
N            uint32_t    RESERVED1[5];
N            TIMER_RegDef    TIMER[4];                                /* 0x20    Timer0 Control */
N}DEV_TIMER_RegDef;
N/****DEV_TIMER end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 57 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_efuse.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_efuse.h" 1
N#ifndef __DEV_EFUSE_H__
N#define __DEV_EFUSE_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************EFUSE_PSW***********************************/
N#define DEV_EFUSE_PSW_KEY_MASK                                  (0xffffffffUL<<0)
N/****EFUSE_PSW end****/
N
N
N/***********************************EFUSE_ADR***********************************/
N#define DEV_EFUSE_ADR_ADDR_MASK                                 (0x3ffUL<<0)
N/****EFUSE_ADR end****/
N
N
N/***********************************EFUSE_CMD***********************************/
N#define DEV_EFUSE_CMD_SECTOR_MASK                               (0x3UL<<4)
N#define DEV_EFUSE_CMD_PG_MODE_AUTO                              (0x0UL<<3)
N#define DEV_EFUSE_CMD_PG_MODE_MANUAL                            (0x1UL<<3)
N#define DEV_EFUSE_CMD_PG_MODE_MASK                              (0x1UL<<3)
N#define DEV_EFUSE_CMD_EFUSEREAD                                 (0x0UL<<1)
N#define DEV_EFUSE_CMD_EFUSELOAD                                 (0x1UL<<1)
N#define DEV_EFUSE_CMD_EFUSEPROGRAM                              (0x2UL<<1)
N#define DEV_EFUSE_CMD_MASK                                      (0x3UL<<1)
N#define DEV_EFUSE_CMD_RUN                                       (0x1UL<<0)
N/****EFUSE_CMD end****/
N
N
N/***********************************EFUSE_TIM***********************************/
N#define DEV_EFUSE_TIM_PROG_STOB_MASK                            (0xffUL<<8)
N#define DEV_EFUSE_TIM_PROG_ADDR_MASK                            (0xfUL<<4)
N#define DEV_EFUSE_TIM_READ_STOB_MASK                            (0x3UL<<2)
N#define DEV_EFUSE_TIM_READ_ADDR_MASK                            (0x3UL<<0)
N/****EFUSE_TIM end****/
N
N
N/***********************************EFUSE_VALUE0***********************************/
N#define DEV_EFUSE_VALUE0_DATA_MASK                              (0xffffffffUL<<0)
N/****EFUSE_VALUE0 end****/
N
N
N/***********************************EFUSE_VALUE1***********************************/
N#define DEV_EFUSE_VALUE1_DATA_MASK                              (0xffffffffUL<<0)
N/****EFUSE_VALUE1 end****/
N
N
N/***********************************EFUSE_VALUE2***********************************/
N#define DEV_EFUSE_VALUE2_DATA_MASK                              (0xffffffffUL<<0)
N/****EFUSE_VALUE2 end****/
N
N
N/***********************************EFUSE_VALUE3***********************************/
N#define DEV_EFUSE_VALUE3_DATA_MASK                              (0xffffffffUL<<0)
N/****EFUSE_VALUE3 end****/
N
N
N/***********************************EFUSE_VALUE4***********************************/
N#define DEV_EFUSE_VALUE4_DATA_MASK                              (0xffffffffUL<<0)
N/****EFUSE_VALUE4 end****/
N
N
N/***********************************EFUSE_VALUE5***********************************/
N#define DEV_EFUSE_VALUE5_DATA_MASK                              (0xffffffffUL<<0)
N/****EFUSE_VALUE5 end****/
N
N
N/***********************************EFUSE_VALUE6***********************************/
N#define DEV_EFUSE_VALUE6_DATA_MASK                              (0xffffffffUL<<0)
N/****EFUSE_VALUE6 end****/
N
N
N/***********************************EFUSE_VALUE7***********************************/
N#define DEV_EFUSE_VALUE7_DATA_MASK                              (0xffffffffUL<<0)
N/****EFUSE_VALUE7 end****/
N
N
N/***********************************DEV_EFUSE register***********************************/
Ntypedef struct{
N
N    __O     uint32_t    PSW;                                     /* 0x0    Efuse Password */
X    volatile     uint32_t    PSW;                                      
N    __IO    uint32_t    ADR;                                     /* 0x4    Efuse Program Address */
X    volatile    uint32_t    ADR;                                      
N    __IO    uint32_t    CMD;                                     /* 0x8    Efuse Command */
X    volatile    uint32_t    CMD;                                      
N    __IO    uint32_t    TIM;                                     /* 0xc    Efuse Timing */
X    volatile    uint32_t    TIM;                                      
N            uint32_t    RESERVED0[4];
N    __I     uint32_t    VALUE0;                                  /* 0x20    Efuse Data[31:0] */
X    volatile const     uint32_t    VALUE0;                                   
N    __I     uint32_t    VALUE1;                                  /* 0x24    Efuse Data[63:32] */
X    volatile const     uint32_t    VALUE1;                                   
N    __I     uint32_t    VALUE2;                                  /* 0x28    Efuse Data[95:64] */
X    volatile const     uint32_t    VALUE2;                                   
N    __I     uint32_t    VALUE3;                                  /* 0x2c    Efuse Data[127:96] */
X    volatile const     uint32_t    VALUE3;                                   
N    __I     uint32_t    VALUE4;                                  /* 0x30    Efuse Data[159:128] */
X    volatile const     uint32_t    VALUE4;                                   
N    __I     uint32_t    VALUE5;                                  /* 0x34    Efuse Data[191:160] */
X    volatile const     uint32_t    VALUE5;                                   
N    __I     uint32_t    VALUE6;                                  /* 0x38    Efuse Data[223:192] */
X    volatile const     uint32_t    VALUE6;                                   
N    __I     uint32_t    VALUE7;                                  /* 0x3c    Efuse Data[255:224] */
X    volatile const     uint32_t    VALUE7;                                   
N}DEV_EFUSE_RegDef;
N/****DEV_EFUSE end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 58 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_osc.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_osc.h" 1
N#ifndef __AON_OSC_H__
N#define __AON_OSC_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************OSC_DEV_CTL***********************************/
N#define AON_OSC_DEV_CTL_DEV_EN                                  (0x1UL<<0)
N/****OSC_DEV_CTL end****/
N
N
N/***********************************OSC_XTAL_CTL***********************************/
N#define AON_OSC_XTAL_CTL_TESTEN                                 (0x1UL<<27)
N#define AON_OSC_XTAL_CTL_DEBEN                                  (0x1UL<<26)
N#define AON_OSC_XTAL_CTL_ICAPF_MASK                             (0x1fUL<<21)
N#define AON_OSC_XTAL_CTL_ICAPC_MASK                             (0xfUL<<17)
N#define AON_OSC_XTAL_CTL_OCAPF_MASK                             (0x1fUL<<12)
N#define AON_OSC_XTAL_CTL_OCAPC_MASK                             (0xfUL<<8)
N#define AON_OSC_XTAL_CTL_GMCTL_MASK                             (0xfUL<<4)
N#define AON_OSC_XTAL_CTL_BUFSEL_SHMITTEROUTPUT                  (0x0UL<<2)
N#define AON_OSC_XTAL_CTL_BUFSEL_BUFFEROUTPUT                    (0x1UL<<2)
N#define AON_OSC_XTAL_CTL_BUFSEL_MASK                            (0x1UL<<2)
N#define AON_OSC_XTAL_CTL_CAPON                                  (0x1UL<<1)
N#define AON_OSC_XTAL_CTL_EN                                     (0x1UL<<0)
N/****OSC_XTAL_CTL end****/
N
N
N/***********************************OSC_TRIM***********************************/
N#define AON_OSC_TRIM_AUDIO_PLL_TRIM_MASK                        (0xfUL<<16)
N#define AON_OSC_TRIM_DEV_TRIM_037_941395MHZ                     (0x0UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_037_158404MHZ                     (0x1UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_037_087001MHZ                     (0x2UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_036_384888MHZ                     (0x3UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_036_315848MHZ                     (0x4UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_035_652451MHZ                     (0x5UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_035_582440MHZ                     (0x6UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_034_955563MHZ                     (0x7UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_034_890314MHZ                     (0x8UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_034_297596MHZ                     (0x9UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_034_233606MHZ                     (0xaUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_033_670742MHZ                     (0xbUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_033_610974MHZ                     (0xcUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_033_076371MHZ                     (0xdUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_033_014809MHZ                     (0xeUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_032_508696MHZ                     (0xfUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_032_453374MHZ                     (0x10UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_031_971034MHZ                     (0x11UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_031_917525MHZ                     (0x12UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_031_457484MHZ                     (0x13UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_031_409131MHZ                     (0x14UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_030_967722MHZ                     (0x15UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_030_918293MHZ                     (0x16UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_030_497975MHZ                     (0x17UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_030_451481MHZ                     (0x18UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_030_050165MHZ                     (0x19UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_030_007952MHZ                     (0x1aUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_029_624308MHZ                     (0x1bUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_029_582353MHZ                     (0x1cUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_029_216380MHZ                     (0x1dUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_029_176689MHZ                     (0x1eUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_028_826128MHZ                     (0x1fUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_028_795882MHZ                     (0x20UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_028_460889MHZ                     (0x21UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_028_420950MHZ                     (0x22UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_028_100791MHZ                     (0x23UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_028_065350MHZ                     (0x24UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_027_756190MHZ                     (0x25UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_027_724110MHZ                     (0x26UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_027_422147MHZ                     (0x27UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_027_397401MHZ                     (0x28UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_027_107709MHZ                     (0x29UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_027_081144MHZ                     (0x2aUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_026_802960MHZ                     (0x2bUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_026_775106MHZ                     (0x2cUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_026_511881MHZ                     (0x2dUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_026_481254MHZ                     (0x2eUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_026_224951MHZ                     (0x2fUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_026_198971MHZ                     (0x30UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_025_951150MHZ                     (0x31UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_025_928525MHZ                     (0x32UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_025_690059MHZ                     (0x33UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_025_666404MHZ                     (0x34UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_025_434088MHZ                     (0x35UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_025_415221MHZ                     (0x36UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_025_190583MHZ                     (0x37UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_025_173263MHZ                     (0x38UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_024_955198MHZ                     (0x39UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_024_937189MHZ                     (0x3aUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_024_725814MHZ                     (0x3bUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_024_712333MHZ                     (0x3cUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_024_506163MHZ                     (0x3dUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_024_494232MHZ                     (0x3eUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_024_294621MHZ                     (0x3fUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_024_308573MHZ                     (0x40UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_024_117016MHZ                     (0x41UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_024_105679MHZ                     (0x42UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_023_916221MHZ                     (0x43UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_023_900109MHZ                     (0x44UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_023_718954MHZ                     (0x45UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_023_703809MHZ                     (0x46UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_023_530588MHZ                     (0x47UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_023_520107MHZ                     (0x48UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_023_345157MHZ                     (0x49UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_023_335725MHZ                     (0x4aUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_023_166951MHZ                     (0x4bUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_023_157294MHZ                     (0x4cUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_022_998915MHZ                     (0x4dUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_022_990554MHZ                     (0x4eUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_022_837829MHZ                     (0x4fUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_022_827500MHZ                     (0x50UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_022_680301MHZ                     (0x51UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_022_664976MHZ                     (0x52UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_022_516342MHZ                     (0x53UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_022_501427MHZ                     (0x54UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_022_365704MHZ                     (0x55UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_022_358547MHZ                     (0x56UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_022_211055MHZ                     (0x57UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_022_208311MHZ                     (0x58UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_022_069087MHZ                     (0x59UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_022_061602MHZ                     (0x5aUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_021_931478MHZ                     (0x5bUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_021_921412MHZ                     (0x5cUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_021_798425MHZ                     (0x5dUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_021_784594MHZ                     (0x5eUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_021_660171MHZ                     (0x5fUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_021_650850MHZ                     (0x60UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_021_528612MHZ                     (0x61UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_021_516539MHZ                     (0x62UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_021_398613MHZ                     (0x63UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_021_379799MHZ                     (0x64UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_021_258080MHZ                     (0x65UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_021_262741MHZ                     (0x66UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_021_139666MHZ                     (0x67UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_021_141034MHZ                     (0x68UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_021_023475MHZ                     (0x69UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_021_009728MHZ                     (0x6aUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_020_901672MHZ                     (0x6bUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_020_893975MHZ                     (0x6cUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_020_777629MHZ                     (0x6dUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_020_773987MHZ                     (0x6eUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_020_666174MHZ                     (0x6fUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_020_664893MHZ                     (0x70UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_020_554615MHZ                     (0x71UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_020_551315MHZ                     (0x72UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_020_435558MHZ                     (0x73UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_020_440023MHZ                     (0x74UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_020_332539MHZ                     (0x75UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_020_330498MHZ                     (0x76UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_020_232343MHZ                     (0x77UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_020_225463MHZ                     (0x78UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_020_130876MHZ                     (0x79UL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_020_120573MHZ                     (0x7aUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_020_022550MHZ                     (0x7bUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_020_026836MHZ                     (0x7cUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_019_923395MHZ                     (0x7dUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_019_923419MHZ                     (0x7eUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_019_826321MHZ                     (0x7fUL<<8)
N#define AON_OSC_TRIM_DEV_TRIM_MASK                              (0x7fUL<<8)
N#define AON_OSC_TRIM_ADC_TRIM_355_301KHZ                        (0x0UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_358_458KHZ                        (0x1UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_361_874KHZ                        (0x2UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_365_168KHZ                        (0x3UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_368_719KHZ                        (0x4UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_372_119KHZ                        (0x5UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_375_800KHZ                        (0x6UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_379_356KHZ                        (0x7UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_383_167KHZ                        (0x8UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_386_848KHZ                        (0x9UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_390_845KHZ                        (0xaUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_394_670KHZ                        (0xbUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_398_822KHZ                        (0xcUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_402_822KHZ                        (0xdUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_407_152KHZ                        (0xeUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_411_340KHZ                        (0xfUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_416_901KHZ                        (0x10UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_421_270KHZ                        (0x11UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_425_970KHZ                        (0x12UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_430_565KHZ                        (0x13UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_435_528KHZ                        (0x14UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_440_315KHZ                        (0x15UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_445_497KHZ                        (0x16UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_450_522KHZ                        (0x17UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_455_950KHZ                        (0x18UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_461_195KHZ                        (0x19UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_466_864KHZ                        (0x1aUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_472_384KHZ                        (0x1bUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_478_380KHZ                        (0x1cUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_484_143KHZ                        (0x1dUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_490_440KHZ                        (0x1eUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_496_540KHZ                        (0x1fUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_506_237KHZ                        (0x20UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_512_740KHZ                        (0x21UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_519_774KHZ                        (0x22UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_526_629KHZ                        (0x23UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_534_054KHZ                        (0x24UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_541_323KHZ                        (0x25UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_549_180KHZ                        (0x26UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_556_867KHZ                        (0x27UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_565_196KHZ                        (0x28UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_573_301KHZ                        (0x29UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_582_166KHZ                        (0x2aUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_590_782KHZ                        (0x2bUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_600_179KHZ                        (0x2cUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_609_339KHZ                        (0x2dUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_619_396KHZ                        (0x2eUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_629_184KHZ                        (0x2fUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_642_390KHZ                        (0x30UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_652_888KHZ                        (0x31UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_664_409KHZ                        (0x32UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_675_738KHZ                        (0x33UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_688_125KHZ                        (0x34UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_700_216KHZ                        (0x35UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_713_543KHZ                        (0x36UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_726_674KHZ                        (0x37UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_741_045KHZ                        (0x38UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_755_168KHZ                        (0x39UL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_770_734KHZ                        (0x3aUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_786_010KHZ                        (0x3bUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_802_895KHZ                        (0x3cUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_819_556KHZ                        (0x3dUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_837_986KHZ                        (0x3eUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_856_067KHZ                        (0x3fUL<<0)
N#define AON_OSC_TRIM_ADC_TRIM_MASK                              (0x3fUL<<0)
N/****OSC_TRIM end****/
N
N
N/***********************************OSC_TEST***********************************/
N#define AON_OSC_TEST_ATEST_SEL_AUDIO_PLLTEST                    (0x0UL<<8)
N#define AON_OSC_TEST_ATEST_SEL_CORE_PLLTEST                     (0x1UL<<8)
N#define AON_OSC_TEST_ATEST_SEL_MASK                             (0x1UL<<8)
N#define AON_OSC_TEST_DTEST_EN_ANALOGTESTOUTPUT                  (0x0UL<<7)
N#define AON_OSC_TEST_DTEST_EN_DIGITALTESTOUTPUT                 (0x1UL<<7)
N#define AON_OSC_TEST_DTEST_EN_MASK                              (0x1UL<<7)
N#define AON_OSC_TEST_DTEST_DIV_FORBIDDEN0                       (0x0UL<<4)
N#define AON_OSC_TEST_DTEST_DIV_1                                (0x1UL<<4)
N#define AON_OSC_TEST_DTEST_DIV_FORBIDDEN1                       (0x2UL<<4)
N#define AON_OSC_TEST_DTEST_DIV_MASK                             (0x7UL<<4)
N#define AON_OSC_TEST_DTEST_SEL_0                                (0x0UL<<1)
N#define AON_OSC_TEST_DTEST_SEL_CKO_XTAL                         (0x1UL<<1)
N#define AON_OSC_TEST_DTEST_SEL_CKO_CORE_PLL                     (0x2UL<<1)
N#define AON_OSC_TEST_DTEST_SEL_CKO_OSC_DEV                      (0x3UL<<1)
N#define AON_OSC_TEST_DTEST_SEL_1                                (0x4UL<<1)
N#define AON_OSC_TEST_DTEST_SEL_CKO_OSC_AUDIO                    (0x5UL<<1)
N#define AON_OSC_TEST_DTEST_SEL_MASK                             (0x7UL<<1)
N#define AON_OSC_TEST_TEST_EN_DISABLE                            (0x0UL<<0)
N#define AON_OSC_TEST_TEST_EN_ENABLE                             (0x1UL<<0)
N#define AON_OSC_TEST_TEST_EN_MASK                               (0x1UL<<0)
N/****OSC_TEST end****/
N
N
N/***********************************AON_OSC register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    DEV_CTL;                                 /* 0x0    OSC Device Clock Control(24M) */
X    volatile    uint32_t    DEV_CTL;                                  
N    __IO    uint32_t    XTAL_CTL;                                /* 0x4    OSC XTAL Clock Control(24M) */
X    volatile    uint32_t    XTAL_CTL;                                 
N            uint32_t    RESERVED0[2];
N    __IO    uint32_t    TRIM;                                    /* 0x10    OSC Trim */
X    volatile    uint32_t    TRIM;                                     
N    __IO    uint32_t    TEST;                                    /* 0x14    OSC Test */
X    volatile    uint32_t    TEST;                                     
N}AON_OSC_RegDef;
N/****AON_OSC end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 59 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_pll.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_pll.h" 1
N#ifndef __AON_PLL_H__
N#define __AON_PLL_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************PLL_CORE_CTL***********************************/
N#define AON_PLL_CORE_CTL_BYPASS                                 (0x1UL<<30)
N#define AON_PLL_CORE_CTL_PREDIV_MASK                            (0x1fUL<<25)
N#define AON_PLL_CORE_CTL_LOOPDIV_MASK                           (0x1ffUL<<16)
N#define AON_PLL_CORE_CTL_POSTDIV_MASK                           (0xfUL<<12)
N#define AON_PLL_CORE_CTL_FREQ_MASK                              (0x7fUL<<4)
N#define AON_PLL_CORE_CTL_CUST_HARDWAREMODE                      (0x0UL<<3)
N#define AON_PLL_CORE_CTL_CUST_SOFTWAREMODE                      (0x1UL<<3)
N#define AON_PLL_CORE_CTL_CUST_MASK                              (0x1UL<<3)
N#define AON_PLL_CORE_CTL_SEL_MASK                               (0x3UL<<1)
N#define AON_PLL_CORE_CTL_EN                                     (0x1UL<<0)
N/****PLL_CORE_CTL end****/
N
N
N/***********************************PLL_CORE_DBG***********************************/
N#define AON_PLL_CORE_DBG_TSTEN                                  (0x1UL<<10)
N#define AON_PLL_CORE_DBG_TSTSEL_MASK                            (0x3UL<<8)
N#define AON_PLL_CORE_DBG_SETVC_MASK                             (0x7UL<<5)
N#define AON_PLL_CORE_DBG_FORCEVC                                (0x1UL<<4)
N#define AON_PLL_CORE_DBG_LPF_RS_MASK                            (0x3UL<<2)
N#define AON_PLL_CORE_DBG_ICHP_MASK                              (0x3UL<<0)
N/****PLL_CORE_DBG end****/
N
N
N/***********************************PLL_AUDIO_CTL0***********************************/
N#define AON_PLL_AUDIO_CTL0_INTEG_MASK                           (0x1fUL<<16)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_32                           (0x0UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_33                           (0x1UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_DONOTSUPPORT                 (0x2UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_03                           (0x3UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_04                           (0x4UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_05                           (0x5UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_06                           (0x6UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_07                           (0x7UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_08                           (0x8UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_09                           (0x9UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_10                           (0xaUL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_11                           (0xbUL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_12                           (0xcUL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_13                           (0xdUL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_14                           (0xeUL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_15                           (0xfUL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_16                           (0x10UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_17                           (0x11UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_18                           (0x12UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_19                           (0x13UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_20                           (0x14UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_21                           (0x15UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_22                           (0x16UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_23                           (0x17UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_24                           (0x18UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_25                           (0x19UL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_26                           (0x1aUL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_27                           (0x1bUL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_28                           (0x1cUL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_29                           (0x1dUL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_30                           (0x1eUL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_31                           (0x1fUL<<8)
N#define AON_PLL_AUDIO_CTL0_POSTDIV_MASK                         (0x1fUL<<8)
N#define AON_PLL_AUDIO_CTL0_ICP_0UA                              (0x0UL<<4)
N#define AON_PLL_AUDIO_CTL0_ICP_1UA                              (0x1UL<<4)
N#define AON_PLL_AUDIO_CTL0_ICP_2UA                              (0x2UL<<4)
N#define AON_PLL_AUDIO_CTL0_ICP_3UA                              (0x3UL<<4)
N#define AON_PLL_AUDIO_CTL0_ICP_4UA                              (0x4UL<<4)
N#define AON_PLL_AUDIO_CTL0_ICP_5UA                              (0x5UL<<4)
N#define AON_PLL_AUDIO_CTL0_ICP_6UA                              (0x6UL<<4)
N#define AON_PLL_AUDIO_CTL0_ICP_7UA                              (0x7UL<<4)
N#define AON_PLL_AUDIO_CTL0_ICP_8UA                              (0x8UL<<4)
N#define AON_PLL_AUDIO_CTL0_ICP_9UA                              (0x9UL<<4)
N#define AON_PLL_AUDIO_CTL0_ICP_10UA                             (0xaUL<<4)
N#define AON_PLL_AUDIO_CTL0_ICP_11UA                             (0xbUL<<4)
N#define AON_PLL_AUDIO_CTL0_ICP_12UA                             (0xcUL<<4)
N#define AON_PLL_AUDIO_CTL0_ICP_13UA                             (0xdUL<<4)
N#define AON_PLL_AUDIO_CTL0_ICP_14UA                             (0xeUL<<4)
N#define AON_PLL_AUDIO_CTL0_ICP_15UA                             (0xfUL<<4)
N#define AON_PLL_AUDIO_CTL0_ICP_MASK                             (0xfUL<<4)
N#define AON_PLL_AUDIO_CTL0_SEL_OSC_DEV                          (0x0UL<<2)
N#define AON_PLL_AUDIO_CTL0_SEL_OSC_XTAL                         (0x1UL<<2)
N#define AON_PLL_AUDIO_CTL0_SEL_OSC_USB                          (0x2UL<<2)
N#define AON_PLL_AUDIO_CTL0_SEL_EXT_CLK2                         (0x3UL<<2)
N#define AON_PLL_AUDIO_CTL0_SEL_MASK                             (0x3UL<<2)
N#define AON_PLL_AUDIO_CTL0_FRAC_EN_DISABLE                      (0x0UL<<1)
N#define AON_PLL_AUDIO_CTL0_FRAC_EN_ENABLE                       (0x1UL<<1)
N#define AON_PLL_AUDIO_CTL0_FRAC_EN_MASK                         (0x1UL<<1)
N#define AON_PLL_AUDIO_CTL0_EN_DISABLE                           (0x0UL<<0)
N#define AON_PLL_AUDIO_CTL0_EN_ENABLE                            (0x1UL<<0)
N#define AON_PLL_AUDIO_CTL0_EN_MASK                              (0x1UL<<0)
N/****PLL_AUDIO_CTL0 end****/
N
N
N/***********************************PLL_AUDIO_CTL1***********************************/
N#define AON_PLL_AUDIO_CTL1_FRAC(_m)                             (((_m)*2)<<0)
N#define AON_PLL_AUDIO_CTL1_FRAC_MASK                            (0xfffffUL<<0)
N/****PLL_AUDIO_CTL1 end****/
N
N
N/***********************************PLL_LOCK_STAT***********************************/
N#define AON_PLL_LOCK_STAT_PLL_AUDIO_LOCK_DIR                    (0x1UL<<3)
N#define AON_PLL_LOCK_STAT_PLL_AUDIO_UNLOCK                      (0x1UL<<2)
N#define AON_PLL_LOCK_STAT_PLL_AUDIO_LOCK                        (0x1UL<<1)
N#define AON_PLL_LOCK_STAT_PLL_CORE_LOCK                         (0x1UL<<0)
N/****PLL_LOCK_STAT end****/
N
N
N/***********************************AON_PLL register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    CORE_CTL;                                /* 0x0    Core PLL Control */
X    volatile    uint32_t    CORE_CTL;                                 
N    __IO    uint32_t    CORE_DBG;                                /* 0x4    Core PLL Debug */
X    volatile    uint32_t    CORE_DBG;                                 
N            uint32_t    RESERVED0[2];
N    __IO    uint32_t    AUDIO_CTL0;                              /* 0x10    Audio PLL Control0 */
X    volatile    uint32_t    AUDIO_CTL0;                               
N    __IO    uint32_t    AUDIO_CTL1;                              /* 0x14    Audio PLL Control1 */
X    volatile    uint32_t    AUDIO_CTL1;                               
N            uint32_t    RESERVED1[2];
N    __I     uint32_t    LOCK_STAT;                               /* 0x20    PLL Lock State */
X    volatile const     uint32_t    LOCK_STAT;                                
N}AON_PLL_RegDef;
N/****AON_PLL end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 60 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_cmu.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_cmu.h" 1
N#ifndef __AON_CMU_H__
N#define __AON_CMU_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CMU_CLKEN0***********************************/
N#define AON_CMU_CLKEN0_CLKSEL_AON_OSC_PMU                       (0x0UL<<9)
N#define AON_CMU_CLKEN0_CLKSEL_AON_BUS_CLK                       (0x1UL<<9)
N#define AON_CMU_CLKEN0_CLKSEL_AON_MASK                          (0x1UL<<9)
N#define AON_CMU_CLKEN0_CLKMOD_AON_HARDWARE                      (0x0UL<<8)
N#define AON_CMU_CLKEN0_CLKMOD_AON_SOFTWARE                      (0x1UL<<8)
N#define AON_CMU_CLKEN0_CLKMOD_AON_MASK                          (0x1UL<<8)
N#define AON_CMU_CLKEN0_DEB                                      (0x1UL<<3)
N#define AON_CMU_CLKEN0_BUFF                                     (0x1UL<<2)
N#define AON_CMU_CLKEN0_AUDI                                     (0x1UL<<1)
N#define AON_CMU_CLKEN0_LRADC                                    (0x1UL<<0)
N/****CMU_CLKEN0 end****/
N
N
N/***********************************CMU_LRADCCLK***********************************/
N#define AON_CMU_LRADCCLK_DIV_MASK                               (0xffUL<<4)
N#define AON_CMU_LRADCCLK_SEL_OSC_ADC                            (0x0UL<<0)
N#define AON_CMU_LRADCCLK_SEL_OSC_DEV                            (0x1UL<<0)
N#define AON_CMU_LRADCCLK_SEL_OSC_XTAL                           (0x2UL<<0)
N#define AON_CMU_LRADCCLK_SEL_EXT_CLK                            (0x3UL<<0)
N#define AON_CMU_LRADCCLK_SEL_MASK                               (0x3UL<<0)
N/****CMU_LRADCCLK end****/
N
N
N/***********************************CMU_DMICCLK***********************************/
N#define AON_CMU_DMICCLK_DIV_MASK                                (0xffUL<<4)
N#define AON_CMU_DMICCLK_SEL_OSC_ADC                             (0x0UL<<0)
N#define AON_CMU_DMICCLK_SEL_OSC_DEV                             (0x1UL<<0)
N#define AON_CMU_DMICCLK_SEL_OSC_XTAL                            (0x2UL<<0)
N#define AON_CMU_DMICCLK_SEL_EXT_CLK                             (0x3UL<<0)
N#define AON_CMU_DMICCLK_SEL_MASK                                (0x3UL<<0)
N/****CMU_DMICCLK end****/
N
N
N/***********************************CMU_I2SRXCLK***********************************/
N#define AON_CMU_I2SRXCLK_DIV_MASK                               (0xffUL<<4)
N#define AON_CMU_I2SRXCLK_SEL_OSC_ADC                            (0x0UL<<0)
N#define AON_CMU_I2SRXCLK_SEL_OSC_DEV                            (0x1UL<<0)
N#define AON_CMU_I2SRXCLK_SEL_OSC_XTAL                           (0x2UL<<0)
N#define AON_CMU_I2SRXCLK_SEL_EXT_CLK                            (0x3UL<<0)
N#define AON_CMU_I2SRXCLK_SEL_MASK                               (0x3UL<<0)
N/****CMU_I2SRXCLK end****/
N
N
N/***********************************CMU_CMUDBG***********************************/
N#define AON_CMU_CMUDBG_DIV_1                                    (0x0UL<<8)
N#define AON_CMU_CMUDBG_DIV_2                                    (0x1UL<<8)
N#define AON_CMU_CMUDBG_DIV_4                                    (0x2UL<<8)
N#define AON_CMU_CMUDBG_DIV_8                                    (0x3UL<<8)
N#define AON_CMU_CMUDBG_DIV_16                                   (0x4UL<<8)
N#define AON_CMU_CMUDBG_DIV_32                                   (0x5UL<<8)
N#define AON_CMU_CMUDBG_DIV_64                                   (0x6UL<<8)
N#define AON_CMU_CMUDBG_DIV_128                                  (0x7UL<<8)
N#define AON_CMU_CMUDBG_DIV_MASK                                 (0x7UL<<8)
N#define AON_CMU_CMUDBG_SEL_0                                    (0x0UL<<0)
N#define AON_CMU_CMUDBG_SEL_OSC_ADC                              (0x1UL<<0)
N#define AON_CMU_CMUDBG_SEL_OSC_DEV                              (0x2UL<<0)
N#define AON_CMU_CMUDBG_SEL_OSC_XTAL                             (0x3UL<<0)
N#define AON_CMU_CMUDBG_SEL_EXT_CLK                              (0x4UL<<0)
N#define AON_CMU_CMUDBG_SEL_AHB_CLK                              (0x5UL<<0)
N#define AON_CMU_CMUDBG_SEL_LRADC_CLK                            (0x7UL<<0)
N#define AON_CMU_CMUDBG_SEL_DMIC_CLK                             (0x8UL<<0)
N#define AON_CMU_CMUDBG_SEL_I2SRX_CLK                            (0x9UL<<0)
N#define AON_CMU_CMUDBG_SEL_DEB_CLK                              (0xaUL<<0)
N#define AON_CMU_CMUDBG_SEL_PMU_CLK                              (0xbUL<<0)
N#define AON_CMU_CMUDBG_SEL_RMU_CLK                              (0xcUL<<0)
N#define AON_CMU_CMUDBG_SEL_LRADC_HCLK                           (0xdUL<<0)
N#define AON_CMU_CMUDBG_SEL_AUDI_HCLK                            (0xeUL<<0)
N#define AON_CMU_CMUDBG_SEL_MEMC_CLK                             (0xfUL<<0)
N#define AON_CMU_CMUDBG_SEL_AON_CLK                              (0x10UL<<0)
N#define AON_CMU_CMUDBG_SEL_MASK                                 (0x3fUL<<0)
N/****CMU_CMUDBG end****/
N
N
N/***********************************AON_CMU register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    CLKEN0;                                  /* 0x0    Clock Enable */
X    volatile    uint32_t    CLKEN0;                                   
N            uint32_t    RESERVED0[3];
N    __IO    uint32_t    LRADCCLK;                                /* 0x10    LRADC Clock Control */
X    volatile    uint32_t    LRADCCLK;                                 
N    __IO    uint32_t    DMICCLK;                                 /* 0x14    DMIC Clock Control */
X    volatile    uint32_t    DMICCLK;                                  
N    __IO    uint32_t    I2SRXCLK;                                /* 0x18    I2SRX Clock Control */
X    volatile    uint32_t    I2SRXCLK;                                 
N            uint32_t    RESERVED1[55];
N    __IO    uint32_t    CMUDBG;                                  /* 0xf8    Clock Debug Output */
X    volatile    uint32_t    CMUDBG;                                   
N}AON_CMU_RegDef;
N/****AON_CMU end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 61 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_pmu.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_pmu.h" 1
N#ifndef __AON_PMU_H__
N#define __AON_PMU_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************PMU_PWR_CTL***********************************/
N#define AON_PMU_PWR_CTL_CPP_DET_EN                              (0x1UL<<27)
N#define AON_PMU_PWR_CTL_AVCC_DET_EN                             (0x1UL<<26)
N#define AON_PMU_PWR_CTL_DVDD_DET_EN                             (0x1UL<<25)
N#define AON_PMU_PWR_CTL_IOVCC_DET_EN                            (0x1UL<<24)
N#define AON_PMU_PWR_CTL_CPP_FORCE_EN                            (0x1UL<<21)
N#define AON_PMU_PWR_CTL_AVCC_FORCE_EN                           (0x1UL<<20)
N#define AON_PMU_PWR_CTL_VDDQ_FORCE_EN                           (0x1UL<<19)
N#define AON_PMU_PWR_CTL_DVDD_FORCE_EN                           (0x1UL<<18)
N#define AON_PMU_PWR_CTL_IOVCC_FORCE_EN                          (0x1UL<<17)
N#define AON_PMU_PWR_CTL_BIAS_FORCE_EN                           (0x1UL<<16)
N#define AON_PMU_PWR_CTL_CPP_NORM_EN                             (0x1UL<<13)
N#define AON_PMU_PWR_CTL_AVCC_NORM_EN                            (0x1UL<<12)
N#define AON_PMU_PWR_CTL_VDDQ_NORM_EN                            (0x1UL<<11)
N#define AON_PMU_PWR_CTL_DVDD_NORM_EN                            (0x1UL<<10)
N#define AON_PMU_PWR_CTL_IOVCC_NORM_EN                           (0x1UL<<9)
N#define AON_PMU_PWR_CTL_BIAS_NORM_EN                            (0x1UL<<8)
N#define AON_PMU_PWR_CTL_PMU_SPEED_NORMAL                        (0x0UL<<4)
N#define AON_PMU_PWR_CTL_PMU_SPEED_SPEEDFORTEST                  (0x1UL<<4)
N#define AON_PMU_PWR_CTL_PMU_SPEED_MASK                          (0x1UL<<4)
N#define AON_PMU_PWR_CTL_RESTART_TIME_100MS                      (0x0UL<<2)
N#define AON_PMU_PWR_CTL_RESTART_TIME_250MS                      (0x1UL<<2)
N#define AON_PMU_PWR_CTL_RESTART_TIME_500MS                      (0x2UL<<2)
N#define AON_PMU_PWR_CTL_RESTART_TIME_1S                         (0x3UL<<2)
N#define AON_PMU_PWR_CTL_RESTART_TIME_MASK                       (0x3UL<<2)
N#define AON_PMU_PWR_CTL_STATE_ACTIVE                            (0x0UL<<0)
N#define AON_PMU_PWR_CTL_STATE_STANDBY                           (0x1UL<<0)
N#define AON_PMU_PWR_CTL_STATE_HIBERNATE                         (0x2UL<<0)
N#define AON_PMU_PWR_CTL_STATE_RESTART                           (0x3UL<<0)
N#define AON_PMU_PWR_CTL_STATE_MASK                              (0x3UL<<0)
N/****PMU_PWR_CTL end****/
N
N
N/***********************************PMU_VOL_CTL***********************************/
N#define AON_PMU_VOL_CTL_AVDD_VOL_1_05V                          (0x0UL<<24)
N#define AON_PMU_VOL_CTL_AVDD_VOL_1_10V                          (0x1UL<<24)
N#define AON_PMU_VOL_CTL_AVDD_VOL_1_15V                          (0x2UL<<24)
N#define AON_PMU_VOL_CTL_AVDD_VOL_1_20V                          (0x3UL<<24)
N#define AON_PMU_VOL_CTL_AVDD_VOL_MASK                           (0x3UL<<24)
N#define AON_PMU_VOL_CTL_CPP_VOL_1_70V                           (0x0UL<<20)
N#define AON_PMU_VOL_CTL_CPP_VOL_1_75V                           (0x1UL<<20)
N#define AON_PMU_VOL_CTL_CPP_VOL_1_80V                           (0x2UL<<20)
N#define AON_PMU_VOL_CTL_CPP_VOL_1_85V                           (0x3UL<<20)
N#define AON_PMU_VOL_CTL_CPP_VOL_MASK                            (0x3UL<<20)
N#define AON_PMU_VOL_CTL_IOVCC_VOL_1_8V                          (0x0UL<<16)
N#define AON_PMU_VOL_CTL_IOVCC_VOL_1_9V                          (0x1UL<<16)
N#define AON_PMU_VOL_CTL_IOVCC_VOL_2_0V                          (0x2UL<<16)
N#define AON_PMU_VOL_CTL_IOVCC_VOL_2_1V                          (0x3UL<<16)
N#define AON_PMU_VOL_CTL_IOVCC_VOL_2_2V                          (0x4UL<<16)
N#define AON_PMU_VOL_CTL_IOVCC_VOL_2_3V                          (0x5UL<<16)
N#define AON_PMU_VOL_CTL_IOVCC_VOL_2_4V                          (0x6UL<<16)
N#define AON_PMU_VOL_CTL_IOVCC_VOL_2_5V                          (0x7UL<<16)
N#define AON_PMU_VOL_CTL_IOVCC_VOL_2_6V                          (0x8UL<<16)
N#define AON_PMU_VOL_CTL_IOVCC_VOL_2_7V                          (0x9UL<<16)
N#define AON_PMU_VOL_CTL_IOVCC_VOL_2_8V                          (0xaUL<<16)
N#define AON_PMU_VOL_CTL_IOVCC_VOL_2_9V                          (0xbUL<<16)
N#define AON_PMU_VOL_CTL_IOVCC_VOL_3_0V                          (0xcUL<<16)
N#define AON_PMU_VOL_CTL_IOVCC_VOL_3_1V                          (0xdUL<<16)
N#define AON_PMU_VOL_CTL_IOVCC_VOL_3_2V                          (0xeUL<<16)
N#define AON_PMU_VOL_CTL_IOVCC_VOL_3_3V                          (0xfUL<<16)
N#define AON_PMU_VOL_CTL_IOVCC_VOL_MASK                          (0xfUL<<16)
N#define AON_PMU_VOL_CTL_AVCC_VOL_2_7V                           (0x0UL<<12)
N#define AON_PMU_VOL_CTL_AVCC_VOL_2_8V                           (0x1UL<<12)
N#define AON_PMU_VOL_CTL_AVCC_VOL_2_9V                           (0x2UL<<12)
N#define AON_PMU_VOL_CTL_AVCC_VOL_3_0V                           (0x3UL<<12)
N#define AON_PMU_VOL_CTL_AVCC_VOL_3_1V                           (0x4UL<<12)
N#define AON_PMU_VOL_CTL_AVCC_VOL_3_2V                           (0x5UL<<12)
N#define AON_PMU_VOL_CTL_AVCC_VOL_3_3V                           (0x6UL<<12)
N#define AON_PMU_VOL_CTL_AVCC_VOL_3_4V                           (0x7UL<<12)
N#define AON_PMU_VOL_CTL_AVCC_VOL_MASK                           (0x7UL<<12)
N#define AON_PMU_VOL_CTL_DVDD_VOL_0_7V                           (0x0UL<<8)
N#define AON_PMU_VOL_CTL_DVDD_VOL_0_8V                           (0x1UL<<8)
N#define AON_PMU_VOL_CTL_DVDD_VOL_0_9V                           (0x2UL<<8)
N#define AON_PMU_VOL_CTL_DVDD_VOL_1_0V                           (0x3UL<<8)
N#define AON_PMU_VOL_CTL_DVDD_VOL_1_1V                           (0x4UL<<8)
N#define AON_PMU_VOL_CTL_DVDD_VOL_1_2V                           (0x5UL<<8)
N#define AON_PMU_VOL_CTL_DVDD_VOL_1_3V                           (0x6UL<<8)
N#define AON_PMU_VOL_CTL_DVDD_VOL_1_4V                           (0x7UL<<8)
N#define AON_PMU_VOL_CTL_DVDD_VOL_MASK                           (0x7UL<<8)
N#define AON_PMU_VOL_CTL_SVDD_VOL_1_05V                          (0x0UL<<4)
N#define AON_PMU_VOL_CTL_SVDD_VOL_1_10V                          (0x1UL<<4)
N#define AON_PMU_VOL_CTL_SVDD_VOL_1_15V                          (0x2UL<<4)
N#define AON_PMU_VOL_CTL_SVDD_VOL_1_20V                          (0x3UL<<4)
N#define AON_PMU_VOL_CTL_SVDD_VOL_MASK                           (0x3UL<<4)
N#define AON_PMU_VOL_CTL_SVCC_VOL_2_7V                           (0x0UL<<0)
N#define AON_PMU_VOL_CTL_SVCC_VOL_2_8V                           (0x1UL<<0)
N#define AON_PMU_VOL_CTL_SVCC_VOL_2_9V                           (0x2UL<<0)
N#define AON_PMU_VOL_CTL_SVCC_VOL_3_0V                           (0x3UL<<0)
N#define AON_PMU_VOL_CTL_SVCC_VOL_3_1V                           (0x4UL<<0)
N#define AON_PMU_VOL_CTL_SVCC_VOL_3_2V                           (0x5UL<<0)
N#define AON_PMU_VOL_CTL_SVCC_VOL_3_3V                           (0x6UL<<0)
N#define AON_PMU_VOL_CTL_SVCC_VOL_3_4V                           (0x7UL<<0)
N#define AON_PMU_VOL_CTL_SVCC_VOL_MASK                           (0x7UL<<0)
N/****PMU_VOL_CTL end****/
N
N
N/***********************************PMU_CLK_CTL***********************************/
N#define AON_PMU_CLK_CTL_PLL_AUDIO_KEEP                          (0x1UL<<3)
N#define AON_PMU_CLK_CTL_PLL_CORE_KEEP                           (0x1UL<<2)
N#define AON_PMU_CLK_CTL_OSC_XTAL_KEEP                           (0x1UL<<1)
N#define AON_PMU_CLK_CTL_OSC_DEV_KEEP                            (0x1UL<<0)
N/****PMU_CLK_CTL end****/
N
N
N/***********************************PMU_REF_TRIM***********************************/
N#define AON_PMU_REF_TRIM_CMU_VBG2_TRIM_0_801V                   (0x0UL<<16)
N#define AON_PMU_REF_TRIM_CMU_VBG2_TRIM_0_883V                   (0x1UL<<16)
N#define AON_PMU_REF_TRIM_CMU_VBG2_TRIM_0_964V                   (0x2UL<<16)
N#define AON_PMU_REF_TRIM_CMU_VBG2_TRIM_1_033V                   (0x3UL<<16)
N#define AON_PMU_REF_TRIM_CMU_VBG2_TRIM_1_111V                   (0x4UL<<16)
N#define AON_PMU_REF_TRIM_CMU_VBG2_TRIM_1_169V                   (0x5UL<<16)
N#define AON_PMU_REF_TRIM_CMU_VBG2_TRIM_1_226V                   (0x6UL<<16)
N#define AON_PMU_REF_TRIM_CMU_VBG2_TRIM_1_276V                   (0x7UL<<16)
N#define AON_PMU_REF_TRIM_CMU_VBG2_TRIM_MASK                     (0x7UL<<16)
N#define AON_PMU_REF_TRIM_VBG1_TRIM_1_779V                       (0x0UL<<12)
N#define AON_PMU_REF_TRIM_VBG1_TRIM_1_787V                       (0x1UL<<12)
N#define AON_PMU_REF_TRIM_VBG1_TRIM_1_794V                       (0x2UL<<12)
N#define AON_PMU_REF_TRIM_VBG1_TRIM_1_801V                       (0x3UL<<12)
N#define AON_PMU_REF_TRIM_VBG1_TRIM_1_809V                       (0x4UL<<12)
N#define AON_PMU_REF_TRIM_VBG1_TRIM_1_816V                       (0x5UL<<12)
N#define AON_PMU_REF_TRIM_VBG1_TRIM_1_823V                       (0x6UL<<12)
N#define AON_PMU_REF_TRIM_VBG1_TRIM_1_829V                       (0x7UL<<12)
N#define AON_PMU_REF_TRIM_VBG1_TRIM_MASK                         (0x7UL<<12)
N#define AON_PMU_REF_TRIM_IREF_TRIM_MASK                         (0xfUL<<8)
N#define AON_PMU_REF_TRIM_VREF_TRIM_MASK                         (0x1fUL<<0)
N/****PMU_REF_TRIM end****/
N
N
N/***********************************PMU_ONOFF***********************************/
N#define AON_PMU_ONOFF_ONOFF_EDGE_NONE                           (0x0UL<<20)
N#define AON_PMU_ONOFF_ONOFF_EDGE_RISE                           (0x1UL<<20)
N#define AON_PMU_ONOFF_ONOFF_EDGE_FALL                           (0x2UL<<20)
N#define AON_PMU_ONOFF_ONOFF_EDGE_BOTHEDGE                       (0x3UL<<20)
N#define AON_PMU_ONOFF_ONOFF_EDGE_HIGH                           (0x4UL<<20)
N#define AON_PMU_ONOFF_ONOFF_EDGE_LOW                            (0x5UL<<20)
N#define AON_PMU_ONOFF_ONOFF_EDGE_MASK                           (0x7UL<<20)
N#define AON_PMU_ONOFF_GPIO_SEL                                  (0x1UL<<18)
N#define AON_PMU_ONOFF_ONOFF_SEL                                 (0x1UL<<17)
N#define AON_PMU_ONOFF_ONOFF_SPEED                               (0x1UL<<16)
N#define AON_PMU_ONOFF_ONOFF_LONG_TIME_4S                        (0x0UL<<12)
N#define AON_PMU_ONOFF_ONOFF_LONG_TIME_8S                        (0x1UL<<12)
N#define AON_PMU_ONOFF_ONOFF_LONG_TIME_12S                       (0x2UL<<12)
N#define AON_PMU_ONOFF_ONOFF_LONG_TIME_16S                       (0x3UL<<12)
N#define AON_PMU_ONOFF_ONOFF_LONG_TIME_MASK                      (0x3UL<<12)
N#define AON_PMU_ONOFF_ONOFF_ULONG_TIME_12S                      (0x0UL<<11)
N#define AON_PMU_ONOFF_ONOFF_ULONG_TIME_24S                      (0x1UL<<11)
N#define AON_PMU_ONOFF_ONOFF_ULONG_TIME_MASK                     (0x1UL<<11)
N#define AON_PMU_ONOFF_ONOFF_SHORT_TIME_125MS                    (0x0UL<<8)
N#define AON_PMU_ONOFF_ONOFF_SHORT_TIME_250MS                    (0x1UL<<8)
N#define AON_PMU_ONOFF_ONOFF_SHORT_TIME_500MS                    (0x2UL<<8)
N#define AON_PMU_ONOFF_ONOFF_SHORT_TIME_1S                       (0x3UL<<8)
N#define AON_PMU_ONOFF_ONOFF_SHORT_TIME_1_5S                     (0x4UL<<8)
N#define AON_PMU_ONOFF_ONOFF_SHORT_TIME_2S                       (0x5UL<<8)
N#define AON_PMU_ONOFF_ONOFF_SHORT_TIME_3S                       (0x6UL<<8)
N#define AON_PMU_ONOFF_ONOFF_SHORT_TIME_4S                       (0x7UL<<8)
N#define AON_PMU_ONOFF_ONOFF_SHORT_TIME_MASK                     (0x7UL<<8)
N#define AON_PMU_ONOFF_ONOFF_DEB_TIME_25MS                       (0x0UL<<4)
N#define AON_PMU_ONOFF_ONOFF_DEB_TIME_50MS                       (0x1UL<<4)
N#define AON_PMU_ONOFF_ONOFF_DEB_TIME_75MS                       (0x2UL<<4)
N#define AON_PMU_ONOFF_ONOFF_DEB_TIME_100MS                      (0x3UL<<4)
N#define AON_PMU_ONOFF_ONOFF_DEB_TIME_MASK                       (0x3UL<<4)
N#define AON_PMU_ONOFF_ONOFF_BOOT                                (0x1UL<<3)
N#define AON_PMU_ONOFF_ONOFF_DEB_PRESS                           (0x0UL<<2)
N#define AON_PMU_ONOFF_ONOFF_DEB_NOPRESS                         (0x1UL<<2)
N#define AON_PMU_ONOFF_ONOFF_DEB_MASK                            (0x1UL<<2)
N#define AON_PMU_ONOFF_PWR_STA_ONOFFWAKEUP                       (0x0UL<<1)
N#define AON_PMU_ONOFF_PWR_STA_FIRSTPOWERUP                      (0x1UL<<1)
N#define AON_PMU_ONOFF_PWR_STA_MASK                              (0x1UL<<1)
N#define AON_PMU_ONOFF_ONOFF_IN_PRESS                            (0x0UL<<0)
N#define AON_PMU_ONOFF_ONOFF_IN_NOPRESS                          (0x1UL<<0)
N#define AON_PMU_ONOFF_ONOFF_IN_MASK                             (0x1UL<<0)
N/****PMU_ONOFF end****/
N
N
N/***********************************PMU_PWR_STA***********************************/
N#define AON_PMU_PWR_STA_CPPOK                                   (0x1UL<<3)
N#define AON_PMU_PWR_STA_IOVCCOK                                 (0x1UL<<2)
N#define AON_PMU_PWR_STA_AVCCOK                                  (0x1UL<<1)
N#define AON_PMU_PWR_STA_DVDDOK                                  (0x1UL<<0)
N/****PMU_PWR_STA end****/
N
N
N/***********************************PMU_IE***********************************/
N#define AON_PMU_IE_ONOFF_EDGE                                   (0x1UL<<4)
N#define AON_PMU_IE_ONOFF_XLONG                                  (0x1UL<<3)
N#define AON_PMU_IE_ONOFF_ULONG                                  (0x1UL<<2)
N#define AON_PMU_IE_ONOFF_LONG                                   (0x1UL<<1)
N#define AON_PMU_IE_ONOFF_SHORT                                  (0x1UL<<0)
N/****PMU_IE end****/
N
N
N/***********************************PMU_PD***********************************/
N#define AON_PMU_PD_ONOFF_EDGE                                   (0x1UL<<4)
N#define AON_PMU_PD_ONOFF_XLONG                                  (0x1UL<<3)
N#define AON_PMU_PD_ONOFF_ULONG                                  (0x1UL<<2)
N#define AON_PMU_PD_ONOFF_LONG                                   (0x1UL<<1)
N#define AON_PMU_PD_ONOFF_SHORT                                  (0x1UL<<0)
N/****PMU_PD end****/
N
N
N/***********************************PMU_WKEN***********************************/
N#define AON_PMU_WKEN_ONOFF_EDGE                                 (0x1UL<<4)
N#define AON_PMU_WKEN_ONOFF_XLONG                                (0x1UL<<3)
N#define AON_PMU_WKEN_ONOFF_ULONG                                (0x1UL<<2)
N#define AON_PMU_WKEN_ONOFF_LONG                                 (0x1UL<<1)
N#define AON_PMU_WKEN_ONOFF_SHORT                                (0x1UL<<0)
N/****PMU_WKEN end****/
N
N
N/***********************************PMU_RSTEN***********************************/
N#define AON_PMU_RSTEN_RESTART_SVDD                              (0x1UL<<12)
N#define AON_PMU_RSTEN_RESTART_XLONG                             (0x1UL<<11)
N#define AON_PMU_RSTEN_RESTART_ULONG                             (0x1UL<<10)
N#define AON_PMU_RSTEN_RESTART_LONG                              (0x1UL<<9)
N#define AON_PMU_RSTEN_RESTART_SHORT                             (0x1UL<<8)
N#define AON_PMU_RSTEN_RESET_SVDD                                (0x1UL<<4)
N#define AON_PMU_RSTEN_RESET_XLONG                               (0x1UL<<3)
N#define AON_PMU_RSTEN_RESET_ULONG                               (0x1UL<<2)
N#define AON_PMU_RSTEN_RESET_LONG                                (0x1UL<<1)
N#define AON_PMU_RSTEN_RESET_SHORT                               (0x1UL<<0)
N/****PMU_RSTEN end****/
N
N
N/***********************************AON_PMU register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    PWR_CTL;                                 /* 0x0    PMU Power Control */
X    volatile    uint32_t    PWR_CTL;                                  
N    __IO    uint32_t    VOL_CTL;                                 /* 0x4    PMU Voltage Control */
X    volatile    uint32_t    VOL_CTL;                                  
N    __IO    uint32_t    CLK_CTL;                                 /* 0x8    PMU Clock Control */
X    volatile    uint32_t    CLK_CTL;                                  
N    __IO    uint32_t    REF_TRIM;                                /* 0xc    PMU Reference Control */
X    volatile    uint32_t    REF_TRIM;                                 
N    __IO    uint32_t    ONOFF;                                   /* 0x10    PMU Onoff Control */
X    volatile    uint32_t    ONOFF;                                    
N    __IO    uint32_t    PWR_STA;                                 /* 0x14    PMU Status */
X    volatile    uint32_t    PWR_STA;                                  
N            uint32_t    RESERVED0[2];
N    __IO    uint32_t    IE;                                      /* 0x20    PMU Interrupt Control */
X    volatile    uint32_t    IE;                                       
N    __IO    uint32_t    PD;                                      /* 0x24    PMU Pending */
X    volatile    uint32_t    PD;                                       
N    __IO    uint32_t    WKEN;                                    /* 0x28    PMU Reset Control */
X    volatile    uint32_t    WKEN;                                     
N    __IO    uint32_t    RSTEN;                                   /* 0x2c    PMU Wakeup */
X    volatile    uint32_t    RSTEN;                                    
N}AON_PMU_RegDef;
N/****AON_PMU end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 62 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_rmu.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_rmu.h" 1
N#ifndef __AON_RMU_H__
N#define __AON_RMU_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************RMU_RSTEN0***********************************/
N#define AON_RMU_RSTEN0_BUFF                                     (0x1UL<<2)
N#define AON_RMU_RSTEN0_AUDI                                     (0x1UL<<1)
N#define AON_RMU_RSTEN0_LRADC                                    (0x1UL<<0)
N/****RMU_RSTEN0 end****/
N
N
N/***********************************AON_RMU register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    RSTEN0;                                  /* 0x0    Alway On Reset Enable */
X    volatile    uint32_t    RSTEN0;                                   
N}AON_RMU_RegDef;
N/****AON_RMU end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 63 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_gpio.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_gpio.h" 1
N#ifndef __AON_GPIO_H__
N#define __AON_GPIO_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************SPIOn_CTL***********************************/
N#define AON_GPIO_SPIOn_CTL_IV_DISABLE                           (0x0UL<<14)
N#define AON_GPIO_SPIOn_CTL_IV_ENABLE                            (0x1UL<<14)
N#define AON_GPIO_SPIOn_CTL_IV_MASK                              (0x1UL<<14)
N#define AON_GPIO_SPIOn_CTL_OV_DISABLE                           (0x0UL<<13)
N#define AON_GPIO_SPIOn_CTL_OV_ENABLE                            (0x1UL<<13)
N#define AON_GPIO_SPIOn_CTL_OV_MASK                              (0x1UL<<13)
N#define AON_GPIO_SPIOn_CTL_DS                                   (0x1UL<<12)
N#define AON_GPIO_SPIOn_CTL_LB_DISABLE                           (0x0UL<<10)
N#define AON_GPIO_SPIOn_CTL_LB_ENABLE                            (0x1UL<<10)
N#define AON_GPIO_SPIOn_CTL_LB_MASK                              (0x1UL<<10)
N#define AON_GPIO_SPIOn_CTL_O                                    (0x1UL<<9)
N#define AON_GPIO_SPIOn_CTL_PS_PULLDOWN                          (0x0UL<<7)
N#define AON_GPIO_SPIOn_CTL_PS_PULLUP                            (0x1UL<<7)
N#define AON_GPIO_SPIOn_CTL_PS_MASK                              (0x1UL<<7)
N#define AON_GPIO_SPIOn_CTL_PE_DISABLE                           (0x0UL<<6)
N#define AON_GPIO_SPIOn_CTL_PE_ENABLE                            (0x1UL<<6)
N#define AON_GPIO_SPIOn_CTL_PE_MASK                              (0x1UL<<6)
N#define AON_GPIO_SPIOn_CTL_IE_DISABLE                           (0x0UL<<5)
N#define AON_GPIO_SPIOn_CTL_IE_ENABLE                            (0x1UL<<5)
N#define AON_GPIO_SPIOn_CTL_IE_MASK                              (0x1UL<<5)
N#define AON_GPIO_SPIOn_CTL_OE_DISABLE                           (0x0UL<<4)
N#define AON_GPIO_SPIOn_CTL_OE_ENABLE                            (0x1UL<<4)
N#define AON_GPIO_SPIOn_CTL_OE_MASK                              (0x1UL<<4)
N#define AON_GPIO_SPIOn_CTL_MFP_MASK                             (0xfUL<<0)
N/****SPIOn_CTL end****/
N
N
N/***********************************SPIO_IN***********************************/
N#define AON_GPIO_SPIO_IN_MASK                                   (0x3fUL<<0)
N/****SPIO_IN end****/
N
N
N/***********************************SPIO_IC***********************************/
N#define AON_GPIO_SPIO_IC_EVENT_NONE                             (0x0UL<<4)
N#define AON_GPIO_SPIO_IC_EVENT_RISE                             (0x1UL<<4)
N#define AON_GPIO_SPIO_IC_EVENT_FALL                             (0x2UL<<4)
N#define AON_GPIO_SPIO_IC_EVENT_BOTHEDGE                         (0x3UL<<4)
N#define AON_GPIO_SPIO_IC_EVENT_HIGH                             (0x4UL<<4)
N#define AON_GPIO_SPIO_IC_EVENT_LOW                              (0x5UL<<4)
N#define AON_GPIO_SPIO_IC_EVENT_MASK                             (0x7UL<<4)
N#define AON_GPIO_SPIO_IC_SOURCE_MASK                            (0xfUL<<0)
N/****SPIO_IC end****/
N
N
N/***********************************SPIO_ONOFF2***********************************/
N#define AON_GPIO_SPIO_ONOFF2_SOURCE_MASK                        (0x7UL<<0)
N/****SPIO_ONOFF2 end****/
N
N
N/***********************************DBIO_CTL***********************************/
N#define AON_GPIO_DBIO_CTL_BIT_SEL_MASK                          (0xfUL<<8)
N#define AON_GPIO_DBIO_CTL_BIT_EN                                (0x1UL<<7)
N#define AON_GPIO_DBIO_CTL_GRP_SEL_MASK                          (0x3fUL<<0)
N/****DBIO_CTL end****/
N
N
N/***********************************DBIO_OE0***********************************/
N#define AON_GPIO_DBIO_OE0_MASK                                  (0x3fUL<<0)
N/****DBIO_OE0 end****/
N
N
N/***********************************DBIO_IE0***********************************/
N#define AON_GPIO_DBIO_IE0_MASK                                  (0x3fUL<<0)
N/****DBIO_IE0 end****/
N
N
N/***********************************AON_GPIO register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    SPIOn_CTL[6];                            /* 0x0    SPIO Control */
X    volatile    uint32_t    SPIOn_CTL[6];                             
N            uint32_t    RESERVED0[2];
N    __I     uint32_t    SPIO_IN;                                 /* 0x20    SPIO Input */
X    volatile const     uint32_t    SPIO_IN;                                  
N            uint32_t    RESERVED1[7];
N    __IO    uint32_t    SPIO_IC;                                 /* 0x40    SPIO Interrupt Control */
X    volatile    uint32_t    SPIO_IC;                                  
N    __IO    uint32_t    SPIO_ONOFF2;                             /* 0x44    SPIO ONOFF Control */
X    volatile    uint32_t    SPIO_ONOFF2;                              
N            uint32_t    RESERVED2[6];
N    __IO    uint32_t    DBIO_CTL;                                /* 0x60    Debug IO Control */
X    volatile    uint32_t    DBIO_CTL;                                 
N    __IO    uint32_t    DBIO_OE0;                                /* 0x64    Debug IO Output Enable */
X    volatile    uint32_t    DBIO_OE0;                                 
N    __IO    uint32_t    DBIO_IE0;                                /* 0x68    Debug IO Input Enable */
X    volatile    uint32_t    DBIO_IE0;                                 
N}AON_GPIO_RegDef;
N/****AON_GPIO end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 64 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_mem.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_mem.h" 1
N#ifndef __AON_MEM_H__
N#define __AON_MEM_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************MEMC_RAM0_CTL***********************************/
N#define AON_MEM_MEMC_RAM0_CTL_LS                                (0x1UL<<5)
N#define AON_MEM_MEMC_RAM0_CTL_RME                               (0x1UL<<4)
N#define AON_MEM_MEMC_RAM0_CTL_RM_MASK                           (0xfUL<<0)
N/****MEMC_RAM0_CTL end****/
N
N
N/***********************************MEMC_BIST_TEST***********************************/
N#define AON_MEM_MEMC_BIST_TEST_BIST_TEST                        (0x1UL<<0)
N/****MEMC_BIST_TEST end****/
N
N
N/***********************************MEMC_BIST_DONE***********************************/
N#define AON_MEM_MEMC_BIST_DONE_BIST_DONE                        (0x1UL<<0)
N/****MEMC_BIST_DONE end****/
N
N
N/***********************************MEMC_BIST_FAIL***********************************/
N#define AON_MEM_MEMC_BIST_FAIL_BIST_FAIL                        (0x1UL<<0)
N/****MEMC_BIST_FAIL end****/
N
N
N/***********************************AON_MEM register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    MEMC_RAM0_CTL;                           /* 0x0    RAM Control */
X    volatile    uint32_t    MEMC_RAM0_CTL;                            
N    __IO    uint32_t    MEMC_BIST_TEST;                          /* 0x4    Bist Start */
X    volatile    uint32_t    MEMC_BIST_TEST;                           
N    __I     uint32_t    MEMC_BIST_DONE;                          /* 0x8    Bist Done */
X    volatile const     uint32_t    MEMC_BIST_DONE;                           
N    __I     uint32_t    MEMC_BIST_FAIL;                          /* 0xc    Bist Fail */
X    volatile const     uint32_t    MEMC_BIST_FAIL;                           
N}AON_MEM_RegDef;
N/****AON_MEM end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 65 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_global.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_global.h" 1
N#ifndef __AON_GLOBAL_H__
N#define __AON_GLOBAL_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************SVDD_GLOBAL0***********************************/
N#define AON_GLOBAL_SVDD_GLOBAL0_VALUE_MASK                      (0xffffffffUL<<0)
N/****SVDD_GLOBAL0 end****/
N
N
N/***********************************SVDD_GLOBAL1***********************************/
N#define AON_GLOBAL_SVDD_GLOBAL1_VALUE_MASK                      (0xffffffffUL<<0)
N/****SVDD_GLOBAL1 end****/
N
N
N/***********************************SVDD_GLOBAL2***********************************/
N#define AON_GLOBAL_SVDD_GLOBAL2_VALUE_MASK                      (0xffffffffUL<<0)
N/****SVDD_GLOBAL2 end****/
N
N
N/***********************************SVDD_GLOBAL3***********************************/
N#define AON_GLOBAL_SVDD_GLOBAL3_VALUE_MASK                      (0xffffffffUL<<0)
N/****SVDD_GLOBAL3 end****/
N
N
N/***********************************SVDD_GLOBAL4***********************************/
N#define AON_GLOBAL_SVDD_GLOBAL4_VALUE_MASK                      (0xffffffffUL<<0)
N/****SVDD_GLOBAL4 end****/
N
N
N/***********************************SVDD_GLOBAL5***********************************/
N#define AON_GLOBAL_SVDD_GLOBAL5_VALUE_MASK                      (0xffffffffUL<<0)
N/****SVDD_GLOBAL5 end****/
N
N
N/***********************************SVDD_GLOBAL6***********************************/
N#define AON_GLOBAL_SVDD_GLOBAL6_VALUE_MASK                      (0xffffffffUL<<0)
N/****SVDD_GLOBAL6 end****/
N
N
N/***********************************SVDD_GLOBAL7***********************************/
N#define AON_GLOBAL_SVDD_GLOBAL7_VALUE_MASK                      (0xffffffffUL<<0)
N/****SVDD_GLOBAL7 end****/
N
N
N/***********************************AON_GLOBAL register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    SVDD_GLOBAL0;                            /* 0x0    SVDD Global Register */
X    volatile    uint32_t    SVDD_GLOBAL0;                             
N    __IO    uint32_t    SVDD_GLOBAL1;                            /* 0x4    SVDD Global Register */
X    volatile    uint32_t    SVDD_GLOBAL1;                             
N    __IO    uint32_t    SVDD_GLOBAL2;                            /* 0x8    SVDD Global Register */
X    volatile    uint32_t    SVDD_GLOBAL2;                             
N    __IO    uint32_t    SVDD_GLOBAL3;                            /* 0xc    SVDD Global Register */
X    volatile    uint32_t    SVDD_GLOBAL3;                             
N    __IO    uint32_t    SVDD_GLOBAL4;                            /* 0x10    SVDD Global Register */
X    volatile    uint32_t    SVDD_GLOBAL4;                             
N    __IO    uint32_t    SVDD_GLOBAL5;                            /* 0x14    SVDD Global Register */
X    volatile    uint32_t    SVDD_GLOBAL5;                             
N    __IO    uint32_t    SVDD_GLOBAL6;                            /* 0x18    SVDD Global Register */
X    volatile    uint32_t    SVDD_GLOBAL6;                             
N    __IO    uint32_t    SVDD_GLOBAL7;                            /* 0x1c    SVDD Global Register */
X    volatile    uint32_t    SVDD_GLOBAL7;                             
N}AON_GLOBAL_RegDef;
N/****AON_GLOBAL end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 66 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_lradc.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_lradc.h" 1
N#ifndef __AON_LRADC_H__
N#define __AON_LRADC_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************LRADC_CFGn***********************************/
N#define AON_LRADC_CFGn_SVK_EDGE_NONE                            (0x0UL<<20)
N#define AON_LRADC_CFGn_SVK_EDGE_RISE                            (0x1UL<<20)
N#define AON_LRADC_CFGn_SVK_EDGE_FALL                            (0x2UL<<20)
N#define AON_LRADC_CFGn_SVK_EDGE_BOTHEDGE                        (0x3UL<<20)
N#define AON_LRADC_CFGn_SVK_EDGE_HIGH                            (0x4UL<<20)
N#define AON_LRADC_CFGn_SVK_EDGE_LOW                             (0x5UL<<20)
N#define AON_LRADC_CFGn_SVK_EDGE_MASK                            (0x7UL<<20)
N#define AON_LRADC_CFGn_SVK_TYPE_LRADC                           (0x0UL<<19)
N#define AON_LRADC_CFGn_SVK_TYPE_LPCMP                           (0x1UL<<19)
N#define AON_LRADC_CFGn_SVK_TYPE_MASK                            (0x1UL<<19)
N#define AON_LRADC_CFGn_SVK_EN_DISABLE                           (0x0UL<<18)
N#define AON_LRADC_CFGn_SVK_EN_ENABLE                            (0x1UL<<18)
N#define AON_LRADC_CFGn_SVK_EN_MASK                              (0x1UL<<18)
N#define AON_LRADC_CFGn_SVK_LVL_MASK                             (0x3ffUL<<8)
N#define AON_LRADC_CFGn_AVG_1SAMPLE                              (0x0UL<<4)
N#define AON_LRADC_CFGn_AVG_2SAMPLE                              (0x1UL<<4)
N#define AON_LRADC_CFGn_AVG_4SAMPLE                              (0x2UL<<4)
N#define AON_LRADC_CFGn_AVG_8SAMPLE                              (0x3UL<<4)
N#define AON_LRADC_CFGn_AVG_16SAMPLE                             (0x4UL<<4)
N#define AON_LRADC_CFGn_AVG_32SAMPLE                             (0x5UL<<4)
N#define AON_LRADC_CFGn_AVG_MASK                                 (0x7UL<<4)
N#define AON_LRADC_CFGn_SR_1                                     (0x0UL<<2)
N#define AON_LRADC_CFGn_SR_2                                     (0x1UL<<2)
N#define AON_LRADC_CFGn_SR_4                                     (0x2UL<<2)
N#define AON_LRADC_CFGn_SR_8                                     (0x3UL<<2)
N#define AON_LRADC_CFGn_SR_MASK                                  (0x3UL<<2)
N#define AON_LRADC_CFGn_MODE_SINGLEMODE                          (0x0UL<<1)
N#define AON_LRADC_CFGn_MODE_CONTINUEMODE                        (0x1UL<<1)
N#define AON_LRADC_CFGn_MODE_MASK                                (0x1UL<<1)
N#define AON_LRADC_CFGn_EN_DISABLE                               (0x0UL<<0)
N#define AON_LRADC_CFGn_EN_ENABLE                                (0x1UL<<0)
N#define AON_LRADC_CFGn_EN_MASK                                  (0x1UL<<0)
N/****LRADC_CFGn end****/
N
N
N/***********************************LRADC_ANA***********************************/
N#define AON_LRADC_ANA_LRADC_VREF_SEL_LOWPOWERVREF               (0x0UL<<8)
N#define AON_LRADC_ANA_LRADC_VREF_SEL_HIGHPERFORMANCEVREF        (0x1UL<<8)
N#define AON_LRADC_ANA_LRADC_VREF_SEL_MASK                       (0x1UL<<8)
N#define AON_LRADC_ANA_LRADC_MIC_LINEIN                          (0x0UL<<7)
N#define AON_LRADC_ANA_LRADC_MIC_MICIN                           (0x1UL<<7)
N#define AON_LRADC_ANA_LRADC_MIC_MASK                            (0x1UL<<7)
N#define AON_LRADC_ANA_LRADC_PGA_18_0DB                          (0x0UL<<4)
N#define AON_LRADC_ANA_LRADC_PGA_21_5DB                          (0x1UL<<4)
N#define AON_LRADC_ANA_LRADC_PGA_25_0DB                          (0x2UL<<4)
N#define AON_LRADC_ANA_LRADC_PGA_28_5DB                          (0x3UL<<4)
N#define AON_LRADC_ANA_LRADC_PGA_32_0DB                          (0x4UL<<4)
N#define AON_LRADC_ANA_LRADC_PGA_35_5DB                          (0x5UL<<4)
N#define AON_LRADC_ANA_LRADC_PGA_39_0DB                          (0x6UL<<4)
N#define AON_LRADC_ANA_LRADC_PGA_42_5DB                          (0x7UL<<4)
N#define AON_LRADC_ANA_LRADC_PGA_MASK                            (0x7UL<<4)
N#define AON_LRADC_ANA_LPCMP_VOL_500MV                           (0x0UL<<2)
N#define AON_LRADC_ANA_LPCMP_VOL_950MV                           (0x1UL<<2)
N#define AON_LRADC_ANA_LPCMP_VOL_MASK                            (0x1UL<<2)
N#define AON_LRADC_ANA_LPCMP_EN                                  (0x1UL<<1)
N#define AON_LRADC_ANA_LRADC_EN                                  (0x1UL<<0)
N/****LRADC_ANA end****/
N
N
N/***********************************LRADC_MKV0***********************************/
N#define AON_LRADC_MKV0_KEY_THD1_MASK                            (0x3ffUL<<20)
N#define AON_LRADC_MKV0_KEY_THD0_MASK                            (0x3ffUL<<10)
N#define AON_LRADC_MKV0_KEY_SRC_LRADC00                          (0x0UL<<4)
N#define AON_LRADC_MKV0_KEY_SRC_LRADC01                          (0x1UL<<4)
N#define AON_LRADC_MKV0_KEY_SRC_LRADC02                          (0x2UL<<4)
N#define AON_LRADC_MKV0_KEY_SRC_LRADC03                          (0x3UL<<4)
N#define AON_LRADC_MKV0_KEY_SRC_LRADC04                          (0x4UL<<4)
N#define AON_LRADC_MKV0_KEY_SRC_LRADC05                          (0x5UL<<4)
N#define AON_LRADC_MKV0_KEY_SRC_LRADC06                          (0x6UL<<4)
N#define AON_LRADC_MKV0_KEY_SRC_LRADC07                          (0x7UL<<4)
N#define AON_LRADC_MKV0_KEY_SRC_LRADC08                          (0x8UL<<4)
N#define AON_LRADC_MKV0_KEY_SRC_LRADC09                          (0x9UL<<4)
N#define AON_LRADC_MKV0_KEY_SRC_LRADC10                          (0xaUL<<4)
N#define AON_LRADC_MKV0_KEY_SRC_LRADC11                          (0xbUL<<4)
N#define AON_LRADC_MKV0_KEY_SRC_MASK                             (0xfUL<<4)
N#define AON_LRADC_MKV0_DEB_TIME_4MS                             (0x0UL<<2)
N#define AON_LRADC_MKV0_DEB_TIME_8MS                             (0x1UL<<2)
N#define AON_LRADC_MKV0_DEB_TIME_16MS                            (0x2UL<<2)
N#define AON_LRADC_MKV0_DEB_TIME_32MS                            (0x3UL<<2)
N#define AON_LRADC_MKV0_DEB_TIME_MASK                            (0x3UL<<2)
N#define AON_LRADC_MKV0_DEB_EN                                   (0x1UL<<1)
N#define AON_LRADC_MKV0_KEY_EN                                   (0x1UL<<0)
N/****LRADC_MKV0 end****/
N
N
N/***********************************LRADC_MKV1***********************************/
N#define AON_LRADC_MKV1_KEY_THD4_MASK                            (0x3ffUL<<20)
N#define AON_LRADC_MKV1_KEY_THD3_MASK                            (0x3ffUL<<10)
N#define AON_LRADC_MKV1_KEY_THD2_MASK                            (0x3ffUL<<0)
N/****LRADC_MKV1 end****/
N
N
N/***********************************LRADC_MKV2***********************************/
N#define AON_LRADC_MKV2_MVK5_EDGE_NONE                           (0x0UL<<20)
N#define AON_LRADC_MKV2_MVK5_EDGE_RISE                           (0x1UL<<20)
N#define AON_LRADC_MKV2_MVK5_EDGE_FALL                           (0x2UL<<20)
N#define AON_LRADC_MKV2_MVK5_EDGE_BOTHEDGE                       (0x3UL<<20)
N#define AON_LRADC_MKV2_MVK5_EDGE_HIGH                           (0x4UL<<20)
N#define AON_LRADC_MKV2_MVK5_EDGE_LOW                            (0x5UL<<20)
N#define AON_LRADC_MKV2_MVK5_EDGE_MASK                           (0x7UL<<20)
N#define AON_LRADC_MKV2_MVK4_EDGE_NONE                           (0x0UL<<16)
N#define AON_LRADC_MKV2_MVK4_EDGE_RISE                           (0x1UL<<16)
N#define AON_LRADC_MKV2_MVK4_EDGE_FALL                           (0x2UL<<16)
N#define AON_LRADC_MKV2_MVK4_EDGE_BOTHEDGE                       (0x3UL<<16)
N#define AON_LRADC_MKV2_MVK4_EDGE_HIGH                           (0x4UL<<16)
N#define AON_LRADC_MKV2_MVK4_EDGE_LOW                            (0x5UL<<16)
N#define AON_LRADC_MKV2_MVK4_EDGE_MASK                           (0x7UL<<16)
N#define AON_LRADC_MKV2_MVK3_EDGE_NONE                           (0x0UL<<12)
N#define AON_LRADC_MKV2_MVK3_EDGE_RISE                           (0x1UL<<12)
N#define AON_LRADC_MKV2_MVK3_EDGE_FALL                           (0x2UL<<12)
N#define AON_LRADC_MKV2_MVK3_EDGE_BOTHEDGE                       (0x3UL<<12)
N#define AON_LRADC_MKV2_MVK3_EDGE_HIGH                           (0x4UL<<12)
N#define AON_LRADC_MKV2_MVK3_EDGE_LOW                            (0x5UL<<12)
N#define AON_LRADC_MKV2_MVK3_EDGE_MASK                           (0x7UL<<12)
N#define AON_LRADC_MKV2_MVK2_EDGE_NONE                           (0x0UL<<8)
N#define AON_LRADC_MKV2_MVK2_EDGE_RISE                           (0x1UL<<8)
N#define AON_LRADC_MKV2_MVK2_EDGE_FALL                           (0x2UL<<8)
N#define AON_LRADC_MKV2_MVK2_EDGE_BOTHEDGE                       (0x3UL<<8)
N#define AON_LRADC_MKV2_MVK2_EDGE_HIGH                           (0x4UL<<8)
N#define AON_LRADC_MKV2_MVK2_EDGE_LOW                            (0x5UL<<8)
N#define AON_LRADC_MKV2_MVK2_EDGE_MASK                           (0x7UL<<8)
N#define AON_LRADC_MKV2_MVK1_EDGE_NONE                           (0x0UL<<4)
N#define AON_LRADC_MKV2_MVK1_EDGE_RISE                           (0x1UL<<4)
N#define AON_LRADC_MKV2_MVK1_EDGE_FALL                           (0x2UL<<4)
N#define AON_LRADC_MKV2_MVK1_EDGE_BOTHEDGE                       (0x3UL<<4)
N#define AON_LRADC_MKV2_MVK1_EDGE_HIGH                           (0x4UL<<4)
N#define AON_LRADC_MKV2_MVK1_EDGE_LOW                            (0x5UL<<4)
N#define AON_LRADC_MKV2_MVK1_EDGE_MASK                           (0x7UL<<4)
N#define AON_LRADC_MKV2_MVK0_EDGE_NONE                           (0x0UL<<0)
N#define AON_LRADC_MKV2_MVK0_EDGE_RISE                           (0x1UL<<0)
N#define AON_LRADC_MKV2_MVK0_EDGE_FALL                           (0x2UL<<0)
N#define AON_LRADC_MKV2_MVK0_EDGE_BOTHEDGE                       (0x3UL<<0)
N#define AON_LRADC_MKV2_MVK0_EDGE_HIGH                           (0x4UL<<0)
N#define AON_LRADC_MKV2_MVK0_EDGE_LOW                            (0x5UL<<0)
N#define AON_LRADC_MKV2_MVK0_EDGE_MASK                           (0x7UL<<0)
N/****LRADC_MKV2 end****/
N
N
N/***********************************LRADC_CTL***********************************/
N#define AON_LRADC_CTL_LRADC_SELM_TIMEBASE                       (0x0UL<<8)
N#define AON_LRADC_CTL_LRADC_SELM_CHANNELBASE                    (0x1UL<<8)
N#define AON_LRADC_CTL_LRADC_SELM_MASK                           (0x1UL<<8)
N#define AON_LRADC_CTL_FRADC_CHN_LRADC11                         (0x0UL<<4)
N#define AON_LRADC_CTL_FRADC_CHN_LRADC10                         (0x1UL<<4)
N#define AON_LRADC_CTL_FRADC_CHN_LRADC09                         (0x2UL<<4)
N#define AON_LRADC_CTL_FRADC_CHN_LRADC08                         (0x3UL<<4)
N#define AON_LRADC_CTL_FRADC_CHN_LRADC07                         (0x4UL<<4)
N#define AON_LRADC_CTL_FRADC_CHN_LRADC06                         (0x5UL<<4)
N#define AON_LRADC_CTL_FRADC_CHN_LRADC05                         (0x6UL<<4)
N#define AON_LRADC_CTL_FRADC_CHN_LRADC04                         (0x7UL<<4)
N#define AON_LRADC_CTL_FRADC_CHN_LRADC03                         (0x8UL<<4)
N#define AON_LRADC_CTL_FRADC_CHN_LRADC02                         (0x9UL<<4)
N#define AON_LRADC_CTL_FRADC_CHN_LRADC01                         (0xaUL<<4)
N#define AON_LRADC_CTL_FRADC_CHN_LRADC00                         (0xbUL<<4)
N#define AON_LRADC_CTL_FRADC_CHN_MASK                            (0xfUL<<4)
N#define AON_LRADC_CTL_LRADC_NUM_32                              (0x0UL<<1)
N#define AON_LRADC_CTL_LRADC_NUM_16                              (0x1UL<<1)
N#define AON_LRADC_CTL_LRADC_NUM_8                               (0x2UL<<1)
N#define AON_LRADC_CTL_LRADC_NUM_4                               (0x3UL<<1)
N#define AON_LRADC_CTL_LRADC_NUM_2                               (0x4UL<<1)
N#define AON_LRADC_CTL_LRADC_NUM_MASK                            (0x7UL<<1)
N#define AON_LRADC_CTL_EN                                        (0x1UL<<0)
N/****LRADC_CTL end****/
N
N
N/***********************************LRADC_IE***********************************/
N#define AON_LRADC_IE_LRADC_MVK5_IE                              (0x1UL<<29)
N#define AON_LRADC_IE_LRADC_MVK4_IE                              (0x1UL<<28)
N#define AON_LRADC_IE_LRADC_MVK3_IE                              (0x1UL<<27)
N#define AON_LRADC_IE_LRADC_MVK2_IE                              (0x1UL<<26)
N#define AON_LRADC_IE_LRADC_MVK1_IE                              (0x1UL<<25)
N#define AON_LRADC_IE_LRADC_MVK0_IE                              (0x1UL<<24)
N#define AON_LRADC_IE_LRADC11_SVK_IE                             (0x1UL<<23)
N#define AON_LRADC_IE_LRADC10_SVK_IE                             (0x1UL<<22)
N#define AON_LRADC_IE_LRADC09_SVK_IE                             (0x1UL<<21)
N#define AON_LRADC_IE_LRADC08_SVK_IE                             (0x1UL<<20)
N#define AON_LRADC_IE_LRADC07_SVK_IE                             (0x1UL<<19)
N#define AON_LRADC_IE_LRADC06_SVK_IE                             (0x1UL<<18)
N#define AON_LRADC_IE_LRADC05_SVK_IE                             (0x1UL<<17)
N#define AON_LRADC_IE_LRADC04_SVK_IE                             (0x1UL<<16)
N#define AON_LRADC_IE_LRADC03_SVK_IE                             (0x1UL<<15)
N#define AON_LRADC_IE_LRADC02_SVK_IE                             (0x1UL<<14)
N#define AON_LRADC_IE_LRADC01_SVK_IE                             (0x1UL<<13)
N#define AON_LRADC_IE_LRADC00_SVK_IE                             (0x1UL<<12)
N#define AON_LRADC_IE_LRADC11_END_IE                             (0x1UL<<11)
N#define AON_LRADC_IE_LRADC10_END_IE                             (0x1UL<<10)
N#define AON_LRADC_IE_LRADC09_END_IE                             (0x1UL<<9)
N#define AON_LRADC_IE_LRADC08_END_IE                             (0x1UL<<8)
N#define AON_LRADC_IE_LRADC07_END_IE                             (0x1UL<<7)
N#define AON_LRADC_IE_LRADC06_END_IE                             (0x1UL<<6)
N#define AON_LRADC_IE_LRADC05_END_IE                             (0x1UL<<5)
N#define AON_LRADC_IE_LRADC04_END_IE                             (0x1UL<<4)
N#define AON_LRADC_IE_LRADC03_END_IE                             (0x1UL<<3)
N#define AON_LRADC_IE_LRADC02_END_IE                             (0x1UL<<2)
N#define AON_LRADC_IE_LRADC01_END_IE                             (0x1UL<<1)
N#define AON_LRADC_IE_LRADC00_END_IE                             (0x1UL<<0)
N/****LRADC_IE end****/
N
N
N/***********************************LRADC_WKEN***********************************/
N#define AON_LRADC_WKEN_LRADC_MVK5_WKEN                          (0x1UL<<29)
N#define AON_LRADC_WKEN_LRADC_MVK4_WKEN                          (0x1UL<<28)
N#define AON_LRADC_WKEN_LRADC_MVK3_WKEN                          (0x1UL<<27)
N#define AON_LRADC_WKEN_LRADC_MVK2_WKEN                          (0x1UL<<26)
N#define AON_LRADC_WKEN_LRADC_MVK1_WKEN                          (0x1UL<<25)
N#define AON_LRADC_WKEN_LRADC_MVK0_WKEN                          (0x1UL<<24)
N#define AON_LRADC_WKEN_LRADC11_SVK_WKEN                         (0x1UL<<23)
N#define AON_LRADC_WKEN_LRADC10_SVK_WKEN                         (0x1UL<<22)
N#define AON_LRADC_WKEN_LRADC09_SVK_WKEN                         (0x1UL<<21)
N#define AON_LRADC_WKEN_LRADC08_SVK_WKEN                         (0x1UL<<20)
N#define AON_LRADC_WKEN_LRADC07_SVK_WKEN                         (0x1UL<<19)
N#define AON_LRADC_WKEN_LRADC06_SVK_WKEN                         (0x1UL<<18)
N#define AON_LRADC_WKEN_LRADC05_SVK_WKEN                         (0x1UL<<17)
N#define AON_LRADC_WKEN_LRADC04_SVK_WKEN                         (0x1UL<<16)
N#define AON_LRADC_WKEN_LRADC03_SVK_WKEN                         (0x1UL<<15)
N#define AON_LRADC_WKEN_LRADC02_SVK_WKEN                         (0x1UL<<14)
N#define AON_LRADC_WKEN_LRADC01_SVK_WKEN                         (0x1UL<<13)
N#define AON_LRADC_WKEN_LRADC00_SVK_WKEN                         (0x1UL<<12)
N#define AON_LRADC_WKEN_LRADC11_END_WKEN                         (0x1UL<<11)
N#define AON_LRADC_WKEN_LRADC10_END_WKEN                         (0x1UL<<10)
N#define AON_LRADC_WKEN_LRADC09_END_WKEN                         (0x1UL<<9)
N#define AON_LRADC_WKEN_LRADC08_END_WKEN                         (0x1UL<<8)
N#define AON_LRADC_WKEN_LRADC07_END_WKEN                         (0x1UL<<7)
N#define AON_LRADC_WKEN_LRADC06_END_WKEN                         (0x1UL<<6)
N#define AON_LRADC_WKEN_LRADC05_END_WKEN                         (0x1UL<<5)
N#define AON_LRADC_WKEN_LRADC04_END_WKEN                         (0x1UL<<4)
N#define AON_LRADC_WKEN_LRADC03_END_WKEN                         (0x1UL<<3)
N#define AON_LRADC_WKEN_LRADC02_END_WKEN                         (0x1UL<<2)
N#define AON_LRADC_WKEN_LRADC01_END_WKEN                         (0x1UL<<1)
N#define AON_LRADC_WKEN_LRADC00_END_WKEN                         (0x1UL<<0)
N/****LRADC_WKEN end****/
N
N
N/***********************************LRADC_PD***********************************/
N#define AON_LRADC_PD_LRADC_MVK5_PD                              (0x1UL<<29)
N#define AON_LRADC_PD_LRADC_MVK4_PD                              (0x1UL<<28)
N#define AON_LRADC_PD_LRADC_MVK3_PD                              (0x1UL<<27)
N#define AON_LRADC_PD_LRADC_MVK2_PD                              (0x1UL<<26)
N#define AON_LRADC_PD_LRADC_MVK1_PD                              (0x1UL<<25)
N#define AON_LRADC_PD_LRADC_MVK0_PD                              (0x1UL<<24)
N#define AON_LRADC_PD_LRADC11_SVK_PD                             (0x1UL<<23)
N#define AON_LRADC_PD_LRADC10_SVK_PD                             (0x1UL<<22)
N#define AON_LRADC_PD_LRADC09_SVK_PD                             (0x1UL<<21)
N#define AON_LRADC_PD_LRADC08_SVK_PD                             (0x1UL<<20)
N#define AON_LRADC_PD_LRADC07_SVK_PD                             (0x1UL<<19)
N#define AON_LRADC_PD_LRADC06_SVK_PD                             (0x1UL<<18)
N#define AON_LRADC_PD_LRADC05_SVK_PD                             (0x1UL<<17)
N#define AON_LRADC_PD_LRADC04_SVK_PD                             (0x1UL<<16)
N#define AON_LRADC_PD_LRADC03_SVK_PD                             (0x1UL<<15)
N#define AON_LRADC_PD_LRADC02_SVK_PD                             (0x1UL<<14)
N#define AON_LRADC_PD_LRADC01_SVK_PD                             (0x1UL<<13)
N#define AON_LRADC_PD_LRADC00_SVK_PD                             (0x1UL<<12)
N#define AON_LRADC_PD_LRADC11_END_PD                             (0x1UL<<11)
N#define AON_LRADC_PD_LRADC10_END_PD                             (0x1UL<<10)
N#define AON_LRADC_PD_LRADC09_END_PD                             (0x1UL<<9)
N#define AON_LRADC_PD_LRADC08_END_PD                             (0x1UL<<8)
N#define AON_LRADC_PD_LRADC07_END_PD                             (0x1UL<<7)
N#define AON_LRADC_PD_LRADC06_END_PD                             (0x1UL<<6)
N#define AON_LRADC_PD_LRADC05_END_PD                             (0x1UL<<5)
N#define AON_LRADC_PD_LRADC04_END_PD                             (0x1UL<<4)
N#define AON_LRADC_PD_LRADC03_END_PD                             (0x1UL<<3)
N#define AON_LRADC_PD_LRADC02_END_PD                             (0x1UL<<2)
N#define AON_LRADC_PD_LRADC01_END_PD                             (0x1UL<<1)
N#define AON_LRADC_PD_LRADC00_END_PD                             (0x1UL<<0)
N/****LRADC_PD end****/
N
N
N/***********************************LRADC_DATn***********************************/
N#define AON_LRADC_DATn_DATA_MASK                                (0x3ffUL<<0)
N/****LRADC_DATn end****/
N
N
N/***********************************LRADC_KEYD***********************************/
N#define AON_LRADC_KEYD_LRADC_MVK5                               (0x1UL<<17)
N#define AON_LRADC_KEYD_LRADC_MVK4                               (0x1UL<<16)
N#define AON_LRADC_KEYD_LRADC_MVK3                               (0x1UL<<15)
N#define AON_LRADC_KEYD_LRADC_MVK2                               (0x1UL<<14)
N#define AON_LRADC_KEYD_LRADC_MVK1                               (0x1UL<<13)
N#define AON_LRADC_KEYD_LRADC_MVK0                               (0x1UL<<12)
N#define AON_LRADC_KEYD_LRADC11_SVK                              (0x1UL<<11)
N#define AON_LRADC_KEYD_LRADC10_SVK                              (0x1UL<<10)
N#define AON_LRADC_KEYD_LRADC09_SVK                              (0x1UL<<9)
N#define AON_LRADC_KEYD_LRADC08_SVK                              (0x1UL<<8)
N#define AON_LRADC_KEYD_LRADC07_SVK                              (0x1UL<<7)
N#define AON_LRADC_KEYD_LRADC06_SVK                              (0x1UL<<6)
N#define AON_LRADC_KEYD_LRADC05_SVK                              (0x1UL<<5)
N#define AON_LRADC_KEYD_LRADC04_SVK                              (0x1UL<<4)
N#define AON_LRADC_KEYD_LRADC03_SVK                              (0x1UL<<3)
N#define AON_LRADC_KEYD_LRADC02_SVK                              (0x1UL<<2)
N#define AON_LRADC_KEYD_LRADC01_SVK                              (0x1UL<<1)
N#define AON_LRADC_KEYD_LRADC00_SVK                              (0x1UL<<0)
N/****LRADC_KEYD end****/
N
N
N/***********************************AON_LRADC register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    CFGn[12];                                /* 0x0    LRADC Channel 00 Configuration */
X    volatile    uint32_t    CFGn[12];                                 
N    __IO    uint32_t    ANA;                                     /* 0x30    LRADC Analog Control */
X    volatile    uint32_t    ANA;                                      
N    __IO    uint32_t    MKV0;                                    /* 0x34    LRADC Key Control0 */
X    volatile    uint32_t    MKV0;                                     
N    __IO    uint32_t    MKV1;                                    /* 0x38    LRADC Key Control1 */
X    volatile    uint32_t    MKV1;                                     
N    __IO    uint32_t    MKV2;                                    /* 0x3c    LRADC Key Control2 */
X    volatile    uint32_t    MKV2;                                     
N    __IO    uint32_t    CTL;                                     /* 0x40    LRADC Control */
X    volatile    uint32_t    CTL;                                      
N    __IO    uint32_t    IE;                                      /* 0x44    LRADC Interrupt Enable */
X    volatile    uint32_t    IE;                                       
N    __IO    uint32_t    WKEN;                                    /* 0x48    LRADC Wakeup Enable */
X    volatile    uint32_t    WKEN;                                     
N    __IO    uint32_t    PD;                                      /* 0x4c    LRADC Interrupt Pending */
X    volatile    uint32_t    PD;                                       
N    __IO    uint32_t    DATn[12];                                /* 0x50    LRADC Channel 00 Out */
X    volatile    uint32_t    DATn[12];                                 
N    __I     uint32_t    KEYD;                                    /* 0x80    LRADC Key Data */
X    volatile const     uint32_t    KEYD;                                     
N}AON_LRADC_RegDef;
N/****AON_LRADC end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 67 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "aon_audi.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\aon_audi.h" 1
N#ifndef __AON_AUDI_H__
N#define __AON_AUDI_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************AUDI_ADC_CTL***********************************/
N#define AON_AUDI_ADC_CTL_MADC0_RANGE_SIGNED                     (0x0UL<<15)
N#define AON_AUDI_ADC_CTL_MADC0_RANGE_UNSIGNED                   (0x1UL<<15)
N#define AON_AUDI_ADC_CTL_MADC0_RANGE_MASK                       (0x1UL<<15)
N#define AON_AUDI_ADC_CTL_DCLK_SEL_NEGEDGE                       (0x0UL<<1)
N#define AON_AUDI_ADC_CTL_DCLK_SEL_POSEDGE                       (0x1UL<<1)
N#define AON_AUDI_ADC_CTL_DCLK_SEL_MASK                          (0x1UL<<1)
N#define AON_AUDI_ADC_CTL_ADC_STA                                (0x1UL<<0)
N/****AUDI_ADC_CTL end****/
N
N
N/***********************************AUDI_DMIC_CTL***********************************/
N#define AON_AUDI_DMIC_CTL_DMIC_EN_F_DISABLE                     (0x0UL<<6)
N#define AON_AUDI_DMIC_CTL_DMIC_EN_F_ENABLE                      (0x1UL<<6)
N#define AON_AUDI_DMIC_CTL_DMIC_EN_F_MASK                        (0x1UL<<6)
N#define AON_AUDI_DMIC_CTL_PCM_RSTEN_RESET                       (0x0UL<<5)
N#define AON_AUDI_DMIC_CTL_PCM_RSTEN_ENABLE                      (0x1UL<<5)
N#define AON_AUDI_DMIC_CTL_PCM_RSTEN_MASK                        (0x1UL<<5)
N#define AON_AUDI_DMIC_CTL_PCM_CLKEN_CLOCKDISABLE                (0x0UL<<4)
N#define AON_AUDI_DMIC_CTL_PCM_CLKEN_CLOCKENABLE                 (0x1UL<<4)
N#define AON_AUDI_DMIC_CTL_PCM_CLKEN_MASK                        (0x1UL<<4)
N#define AON_AUDI_DMIC_CTL_DMIC_DELAY_0NS                        (0x0UL<<2)
N#define AON_AUDI_DMIC_CTL_DMIC_DELAY_40NS                       (0x1UL<<2)
N#define AON_AUDI_DMIC_CTL_DMIC_DELAY_80NS                       (0x2UL<<2)
N#define AON_AUDI_DMIC_CTL_DMIC_DELAY_120NS                      (0x3UL<<2)
N#define AON_AUDI_DMIC_CTL_DMIC_DELAY_MASK                       (0x3UL<<2)
N#define AON_AUDI_DMIC_CTL_DMIC_MODE_SLAVE                       (0x0UL<<1)
N#define AON_AUDI_DMIC_CTL_DMIC_MODE_MASTER                      (0x1UL<<1)
N#define AON_AUDI_DMIC_CTL_DMIC_MODE_MASK                        (0x1UL<<1)
N#define AON_AUDI_DMIC_CTL_DMIC_EN_DISABLE                       (0x0UL<<0)
N#define AON_AUDI_DMIC_CTL_DMIC_EN_ENABLE                        (0x1UL<<0)
N#define AON_AUDI_DMIC_CTL_DMIC_EN_MASK                          (0x1UL<<0)
N/****AUDI_DMIC_CTL end****/
N
N
N/***********************************AUDI_I2SRX_CTL***********************************/
N#define AON_AUDI_I2SRX_CTL_INTER_SEPARATE                       (0x0UL<<4)
N#define AON_AUDI_I2SRX_CTL_INTER_INTERLEAVE                     (0x1UL<<4)
N#define AON_AUDI_I2SRX_CTL_INTER_MASK                           (0x1UL<<4)
N#define AON_AUDI_I2SRX_CTL_WIDTH_16                             (0x0UL<<2)
N#define AON_AUDI_I2SRX_CTL_WIDTH_20                             (0x1UL<<2)
N#define AON_AUDI_I2SRX_CTL_WIDTH_24                             (0x2UL<<2)
N#define AON_AUDI_I2SRX_CTL_WIDTH_32                             (0x3UL<<2)
N#define AON_AUDI_I2SRX_CTL_WIDTH_MASK                           (0x3UL<<2)
N#define AON_AUDI_I2SRX_CTL_MODE_SLAVE                           (0x0UL<<1)
N#define AON_AUDI_I2SRX_CTL_MODE_MASTER                          (0x1UL<<1)
N#define AON_AUDI_I2SRX_CTL_MODE_MASK                            (0x1UL<<1)
N#define AON_AUDI_I2SRX_CTL_EN                                   (0x1UL<<0)
N/****AUDI_I2SRX_CTL end****/
N
N
N/***********************************AUDI_IE0***********************************/
N#define AON_AUDI_IE0_FIFO1_OV                                   (0x1UL<<25)
N#define AON_AUDI_IE0_FIFO0_OV                                   (0x1UL<<24)
N#define AON_AUDI_IE0_VAD1_DET                                   (0x1UL<<23)
N#define AON_AUDI_IE0_VAD0_DET                                   (0x1UL<<22)
N#define AON_AUDI_IE0_UPD1_IE                                    (0x1UL<<19)
N#define AON_AUDI_IE0_UPD0_IE                                    (0x1UL<<18)
N#define AON_AUDI_IE0_VAD1_IE                                    (0x1UL<<17)
N#define AON_AUDI_IE0_VAD0_IE                                    (0x1UL<<16)
N#define AON_AUDI_IE0_WRAP1_IE                                   (0x1UL<<9)
N#define AON_AUDI_IE0_WRAP0_IE                                   (0x1UL<<8)
N#define AON_AUDI_IE0_SLOT1_IE                                   (0x1UL<<1)
N#define AON_AUDI_IE0_SLOT0_IE                                   (0x1UL<<0)
N/****AUDI_IE0 end****/
N
N
N/***********************************AUDI_WKEN***********************************/
N#define AON_AUDI_WKEN_FIFO1_OV                                  (0x1UL<<25)
N#define AON_AUDI_WKEN_FIFO0_OV                                  (0x1UL<<24)
N#define AON_AUDI_WKEN_VAD1_DET                                  (0x1UL<<23)
N#define AON_AUDI_WKEN_VAD0_DET                                  (0x1UL<<22)
N#define AON_AUDI_WKEN_UPD1_IE                                   (0x1UL<<19)
N#define AON_AUDI_WKEN_UPD0_IE                                   (0x1UL<<18)
N#define AON_AUDI_WKEN_VAD1_IE                                   (0x1UL<<17)
N#define AON_AUDI_WKEN_VAD0_IE                                   (0x1UL<<16)
N#define AON_AUDI_WKEN_WRAP1_IE                                  (0x1UL<<9)
N#define AON_AUDI_WKEN_WRAP0_IE                                  (0x1UL<<8)
N#define AON_AUDI_WKEN_SLOT1_IE                                  (0x1UL<<1)
N#define AON_AUDI_WKEN_SLOT0_IE                                  (0x1UL<<0)
N/****AUDI_WKEN end****/
N
N
N/***********************************AUDI_PD***********************************/
N#define AON_AUDI_PD_FIFO1_OV                                    (0x1UL<<25)
N#define AON_AUDI_PD_FIFO0_OV                                    (0x1UL<<24)
N#define AON_AUDI_PD_VAD1_DET                                    (0x1UL<<23)
N#define AON_AUDI_PD_VAD0_DET                                    (0x1UL<<22)
N#define AON_AUDI_PD_UPD1_PD                                     (0x1UL<<19)
N#define AON_AUDI_PD_UPD0_PD                                     (0x1UL<<18)
N#define AON_AUDI_PD_VAD1_PD                                     (0x1UL<<17)
N#define AON_AUDI_PD_VAD0_PD                                     (0x1UL<<16)
N#define AON_AUDI_PD_WRAP1_PD                                    (0x1UL<<9)
N#define AON_AUDI_PD_WRAP0_PD                                    (0x1UL<<8)
N#define AON_AUDI_PD_SLOT1_PD                                    (0x1UL<<1)
N#define AON_AUDI_PD_SLOT0_PD                                    (0x1UL<<0)
N/****AUDI_PD end****/
N
N
N/***********************************AUDI_CHNn_CTL***********************************/
N#define AON_AUDI_CHNn_CTL_DCB_VAL_MASK                          (0xffffUL<<16)
N#define AON_AUDI_CHNn_CTL_CHN_RST_WORK                          (0x0UL<<15)
N#define AON_AUDI_CHNn_CTL_CHN_RST_RESET                         (0x1UL<<15)
N#define AON_AUDI_CHNn_CTL_CHN_RST_MASK                          (0x1UL<<15)
N#define AON_AUDI_CHNn_CTL_SAMP_DIV_1                            (0x0UL<<12)
N#define AON_AUDI_CHNn_CTL_SAMP_DIV_2                            (0x1UL<<12)
N#define AON_AUDI_CHNn_CTL_SAMP_DIV_3                            (0x2UL<<12)
N#define AON_AUDI_CHNn_CTL_SAMP_DIV_4                            (0x3UL<<12)
N#define AON_AUDI_CHNn_CTL_SAMP_DIV_6                            (0x4UL<<12)
N#define AON_AUDI_CHNn_CTL_SAMP_DIV_8                            (0x5UL<<12)
N#define AON_AUDI_CHNn_CTL_SAMP_DIV_12                           (0x6UL<<12)
N#define AON_AUDI_CHNn_CTL_SAMP_DIV_24                           (0x7UL<<12)
N#define AON_AUDI_CHNn_CTL_SAMP_DIV_MASK                         (0x7UL<<12)
N#define AON_AUDI_CHNn_CTL_DCB_IIR_1_256                         (0x0UL<<10)
N#define AON_AUDI_CHNn_CTL_DCB_IIR_1_512                         (0x1UL<<10)
N#define AON_AUDI_CHNn_CTL_DCB_IIR_1_1024                        (0x2UL<<10)
N#define AON_AUDI_CHNn_CTL_DCB_IIR_1_2048                        (0x3UL<<10)
N#define AON_AUDI_CHNn_CTL_DCB_IIR_MASK                          (0x3UL<<10)
N#define AON_AUDI_CHNn_CTL_DCB_SEL_NO                            (0x0UL<<8)
N#define AON_AUDI_CHNn_CTL_DCB_SEL_AUTO                          (0x1UL<<8)
N#define AON_AUDI_CHNn_CTL_DCB_SEL_FIX                           (0x2UL<<8)
N#define AON_AUDI_CHNn_CTL_DCB_SEL_MASK                          (0x3UL<<8)
N#define AON_AUDI_CHNn_CTL_CHN_SEL_MADC0                         (0x0UL<<4)
N#define AON_AUDI_CHNn_CTL_CHN_SEL_I2SRX0                        (0x4UL<<4)
N#define AON_AUDI_CHNn_CTL_CHN_SEL_I2SRX1                        (0x5UL<<4)
N#define AON_AUDI_CHNn_CTL_CHN_SEL_PDM0                          (0x8UL<<4)
N#define AON_AUDI_CHNn_CTL_CHN_SEL_PCM0                          (0xcUL<<4)
N#define AON_AUDI_CHNn_CTL_CHN_SEL_MASK                          (0xfUL<<4)
N#define AON_AUDI_CHNn_CTL_FIFO_AUTO                             (0x1UL<<3)
N#define AON_AUDI_CHNn_CTL_CHN_AUTO                              (0x1UL<<2)
N#define AON_AUDI_CHNn_CTL_CHN_SAV                               (0x1UL<<1)
N#define AON_AUDI_CHNn_CTL_CHN_STA                               (0x1UL<<0)
N/****AUDI_CHNn_CTL end****/
N
N
N/***********************************AUDI_CHNn_BASE***********************************/
N#define AON_AUDI_CHNn_BASE_ADDR_MASK                            (0xffffffffUL<<0)
N/****AUDI_CHNn_BASE end****/
N
N
N/***********************************AUDI_CHNn_SIZE***********************************/
N#define AON_AUDI_CHNn_SIZE_SLOT_NUM_MASK                        (0xffffUL<<16)
N#define AON_AUDI_CHNn_SIZE_WORD_NUM_MASK                        (0xffffUL<<0)
N/****AUDI_CHNn_SIZE end****/
N
N
N/***********************************AUDI_CHNn_CNT***********************************/
N#define AON_AUDI_CHNn_CNT_SLOT_CNT_MASK                         (0xffffUL<<16)
N#define AON_AUDI_CHNn_CNT_WORD_CNT_MASK                         (0xffffUL<<0)
N/****AUDI_CHNn_CNT end****/
N
N
N/***********************************AUDI_CHNn_GAIN***********************************/
N#define AON_AUDI_CHNn_GAIN_1_16                                 (0x0UL<<0)
N#define AON_AUDI_CHNn_GAIN_1_8                                  (0x1UL<<0)
N#define AON_AUDI_CHNn_GAIN_1_4                                  (0x2UL<<0)
N#define AON_AUDI_CHNn_GAIN_1_2                                  (0x3UL<<0)
N#define AON_AUDI_CHNn_GAIN_1                                    (0x4UL<<0)
N#define AON_AUDI_CHNn_GAIN_2                                    (0x5UL<<0)
N#define AON_AUDI_CHNn_GAIN_4                                    (0x6UL<<0)
N#define AON_AUDI_CHNn_GAIN_8                                    (0x7UL<<0)
N#define AON_AUDI_CHNn_GAIN_MASK                                 (0x7UL<<0)
N/****AUDI_CHNn_GAIN end****/
N
N
N/***********************************AUDI_VADn_CTL***********************************/
N#define AON_AUDI_VADn_CTL_NUM_MASK                              (0xfUL<<4)
N#define AON_AUDI_VADn_CTL_MODE_PWR                              (0x0UL<<1)
N#define AON_AUDI_VADn_CTL_MODE_ACR                              (0x1UL<<1)
N#define AON_AUDI_VADn_CTL_MODE_PWR_AND_ACR                      (0x2UL<<1)
N#define AON_AUDI_VADn_CTL_MODE_PWR_OR_ACR                       (0x3UL<<1)
N#define AON_AUDI_VADn_CTL_MODE_MASK                             (0x3UL<<1)
N#define AON_AUDI_VADn_CTL_EN                                    (0x1UL<<0)
N/****AUDI_VADn_CTL end****/
N
N
N/***********************************AUDI_VADn_CFG0***********************************/
N#define AON_AUDI_VADn_CFG0_PWR_THD_MASK                         (0x3ffffffUL<<0)
N/****AUDI_VADn_CFG0 end****/
N
N
N/***********************************AUDI_VADn_CFG1***********************************/
N#define AON_AUDI_VADn_CFG1_ACR_MODE_DIFFERENCE_CROSS            (0x0UL<<20)
N#define AON_AUDI_VADn_CFG1_ACR_MODE_DIFFERENCEONLY              (0x1UL<<20)
N#define AON_AUDI_VADn_CFG1_ACR_MODE_MASK                        (0x1UL<<20)
N#define AON_AUDI_VADn_CFG1_ACR_SPD_MASK                         (0xfUL<<16)
N#define AON_AUDI_VADn_CFG1_ACR_THD_MASK                         (0xffffUL<<0)
N/****AUDI_VADn_CFG1 end****/
N
N
N/***********************************AUDI_VADn_CFG2***********************************/
N#define AON_AUDI_VADn_CFG2_ACR_WGH1_MASK                        (0xfUL<<28)
N#define AON_AUDI_VADn_CFG2_ACR_WGH0_MASK                        (0xfUL<<24)
N#define AON_AUDI_VADn_CFG2_ACR_LVL2_MASK                        (0xffUL<<16)
N#define AON_AUDI_VADn_CFG2_ACR_LVL1_MASK                        (0xffUL<<8)
N#define AON_AUDI_VADn_CFG2_ACR_LVL0_MASK                        (0xffUL<<0)
N/****AUDI_VADn_CFG2 end****/
N
N
N/***********************************AUDI_VADn_PWR***********************************/
N#define AON_AUDI_VADn_PWR_VAD_PWR_MASK                          (0x3ffffffUL<<0)
N/****AUDI_VADn_PWR end****/
N
N
N/***********************************AUDI_VADn_ACR***********************************/
N#define AON_AUDI_VADn_ACR_ACR_SCO_MASK                          (0xfUL<<8)
N#define AON_AUDI_VADn_ACR_ACR_CNT_MASK                          (0xffUL<<0)
N/****AUDI_VADn_ACR end****/
N
N
N/***********************************AUDI_DBG_CTL***********************************/
N#define AON_AUDI_DBG_CTL_EN                                     (0x1UL<<0)
N/****AUDI_DBG_CTL end****/
N
N
N/***********************************AUDI_BIST_TEST***********************************/
N#define AON_AUDI_BIST_TEST_TEST                                 (0x1UL<<0)
N/****AUDI_BIST_TEST end****/
N
N
N/***********************************AUDI_BIST_DONE***********************************/
N#define AON_AUDI_BIST_DONE_DONE                                 (0x1UL<<0)
N/****AUDI_BIST_DONE end****/
N
N
N/***********************************AUDI_BIST_FAIL***********************************/
N#define AON_AUDI_BIST_FAIL_FAIL                                 (0x1UL<<0)
N/****AUDI_BIST_FAIL end****/
N
N
N/***********************************AUDI_CHN register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    CTL;                                     /* 0x100    Channel0 Control */
X    volatile    uint32_t    CTL;                                      
N    __IO    uint32_t    BASE;                                    /* 0x104    Channel0 Base */
X    volatile    uint32_t    BASE;                                     
N    __IO    uint32_t    SIZE;                                    /* 0x108    Channel0 Size */
X    volatile    uint32_t    SIZE;                                     
N    __I     uint32_t    CNT;                                     /* 0x10c    Channel0 Counter */
X    volatile const     uint32_t    CNT;                                      
N    __IO    uint32_t    GAIN;                                    /* 0x110    Channel0 Gain */
X    volatile    uint32_t    GAIN;                                     
N            uint32_t    RESERVED0[3];
N}AUDI_CHN_RegDef;
N/****AUDI_CHN end****/
N
N/***********************************AUDI_VAD register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    CTL;                                     /* 0x200    Channel0 Size */
X    volatile    uint32_t    CTL;                                      
N    __IO    uint32_t    CFG0;                                    /* 0x204    Channel0 Gain */
X    volatile    uint32_t    CFG0;                                     
N    __IO    uint32_t    CFG1;                                    /* 0x208    Channel1 Base */
X    volatile    uint32_t    CFG1;                                     
N    __IO    uint32_t    CFG2;                                    /* 0x20c    Channel1 Counter */
X    volatile    uint32_t    CFG2;                                     
N    __I     uint32_t    PWR;                                     /* 0x210    Channel1 Gain */
X    volatile const     uint32_t    PWR;                                      
N    __I     uint32_t    ACR;                                     /* 0x214    VAD0 Control */
X    volatile const     uint32_t    ACR;                                      
N            uint32_t    RESERVED0[2];
N}AUDI_VAD_RegDef;
N/****AUDI_VAD end****/
N
N/***********************************AON_AUDI register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    ADC_CTL;                                 /* 0x0    ADC Control */
X    volatile    uint32_t    ADC_CTL;                                  
N            uint32_t    RESERVED0[3];
N    __IO    uint32_t    DMIC_CTL;                                /* 0x10    DMIC Control */
X    volatile    uint32_t    DMIC_CTL;                                 
N            uint32_t    RESERVED1[3];
N    __IO    uint32_t    I2SRX_CTL;                               /* 0x20    I2SRX Control */
X    volatile    uint32_t    I2SRX_CTL;                                
N            uint32_t    RESERVED2[23];
N    __IO    uint32_t    IE0;                                     /* 0x80    Audio Input Interrupt Enable */
X    volatile    uint32_t    IE0;                                      
N    __IO    uint32_t    WKEN;                                    /* 0x84    Audio Input Wakeup Enable */
X    volatile    uint32_t    WKEN;                                     
N    __IO    uint32_t    PD;                                      /* 0x88    Audio Input Interrupt Pending */
X    volatile    uint32_t    PD;                                       
N            uint32_t    RESERVED3[29];
N            AUDI_CHN_RegDef    CHN[2];                                  /* 0x100    Channel0 Control */
N            uint32_t    RESERVED4[48];
N            AUDI_VAD_RegDef    VAD[2];                                  /* 0x200    Channel1 Base */
N            uint32_t    RESERVED5[48];
N    __IO    uint32_t    DBG_CTL;                                 /* 0x300    VAD0 Config0 */
X    volatile    uint32_t    DBG_CTL;                                  
N            uint32_t    RESERVED6[63];
N    __IO    uint32_t    BIST_TEST;                               /* 0x400    VAD0 Config2 */
X    volatile    uint32_t    BIST_TEST;                                
N    __IO    uint32_t    BIST_DONE;                               /* 0x404    VAD1 Average Cross Rate */
X    volatile    uint32_t    BIST_DONE;                                
N    __IO    uint32_t    BIST_FAIL;                               /* 0x408    VAD1 Control */
X    volatile    uint32_t    BIST_FAIL;                                
N}AON_AUDI_RegDef;
N/****AON_AUDI end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 68 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_spin.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_spin.h" 1
N#ifndef __DEV_SPIN_H__
N#define __DEV_SPIN_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************SPI_CTL***********************************/
N#define DEV_SPIn_CTL_LSB_MODE_MSB                               (0x0UL<<31)
N#define DEV_SPIn_CTL_LSB_MODE_LSB                               (0x1UL<<31)
N#define DEV_SPIn_CTL_LSB_MODE_MASK                              (0x1UL<<31)
N#define DEV_SPIn_CTL_DIO_SWAP_DISABLE                           (0x0UL<<30)
N#define DEV_SPIn_CTL_DIO_SWAP_ENABLE                            (0x1UL<<30)
N#define DEV_SPIn_CTL_DIO_SWAP_MASK                              (0x1UL<<30)
N#define DEV_SPIn_CTL_LOOP_BACK_NORMAL                           (0x0UL<<29)
N#define DEV_SPIn_CTL_LOOP_BACK_INNERLOOPBACK                    (0x1UL<<29)
N#define DEV_SPIn_CTL_LOOP_BACK_MASK                             (0x1UL<<29)
N#define DEV_SPIn_CTL_RX_FIFO_THR_MASK                           (0x1fUL<<24)
N#define DEV_SPIn_CTL_TX_FIFO_THR_MASK                           (0x1fUL<<19)
N#define DEV_SPIn_CTL_RX_FIFO_RST_WORK                           (0x0UL<<18)
N#define DEV_SPIn_CTL_RX_FIFO_RST_RESET                          (0x1UL<<18)
N#define DEV_SPIn_CTL_RX_FIFO_RST_MASK                           (0x1UL<<18)
N#define DEV_SPIn_CTL_TX_FIFO_RST_WORK                           (0x0UL<<17)
N#define DEV_SPIn_CTL_TX_FIFO_RST_RESET                          (0x1UL<<17)
N#define DEV_SPIn_CTL_TX_FIFO_RST_MASK                           (0x1UL<<17)
N#define DEV_SPIn_CTL_DELAY_CHAIN_MASK                           (0x1fUL<<12)
N#define DEV_SPIn_CTL_SPI_MODE_MODE0                             (0x0UL<<10)
N#define DEV_SPIn_CTL_SPI_MODE_MODE1                             (0x1UL<<10)
N#define DEV_SPIn_CTL_SPI_MODE_MODE2                             (0x2UL<<10)
N#define DEV_SPIn_CTL_SPI_MODE_MODE3                             (0x3UL<<10)
N#define DEV_SPIn_CTL_SPI_MODE_MASK                              (0x3UL<<10)
N#define DEV_SPIn_CTL_MS_MODE_MASTER                             (0x0UL<<9)
N#define DEV_SPIn_CTL_MS_MODE_SLAVE                              (0x1UL<<9)
N#define DEV_SPIn_CTL_MS_MODE_MASK                               (0x1UL<<9)
N#define DEV_SPIn_CTL_DIO_MODE_4WIRESPI                          (0x0UL<<8)
N#define DEV_SPIn_CTL_DIO_MODE_3WIRESPI                          (0x1UL<<8)
N#define DEV_SPIn_CTL_DIO_MODE_MASK                              (0x1UL<<8)
N#define DEV_SPIn_CTL_SPI_WIDTH_SINGLE                           (0x0UL<<6)
N#define DEV_SPIn_CTL_SPI_WIDTH_DUAL                             (0x1UL<<6)
N#define DEV_SPIn_CTL_SPI_WIDTH_QUAD                             (0x2UL<<6)
N#define DEV_SPIn_CTL_SPI_WIDTH_MASK                             (0x3UL<<6)
N#define DEV_SPIn_CTL_CS_MODE_SOFTWARE                           (0x0UL<<4)
N#define DEV_SPIn_CTL_CS_MODE_HARDWARE                           (0x1UL<<4)
N#define DEV_SPIn_CTL_CS_MODE_MASK                               (0x1UL<<4)
N#define DEV_SPIn_CTL_SPI_RX_EN_DISABLE                          (0x0UL<<3)
N#define DEV_SPIn_CTL_SPI_RX_EN_ENABLE                           (0x1UL<<3)
N#define DEV_SPIn_CTL_SPI_RX_EN_MASK                             (0x1UL<<3)
N#define DEV_SPIn_CTL_SPI_TX_EN_DISABLE                          (0x0UL<<2)
N#define DEV_SPIn_CTL_SPI_TX_EN_ENABLE                           (0x1UL<<2)
N#define DEV_SPIn_CTL_SPI_TX_EN_MASK                             (0x1UL<<2)
N#define DEV_SPIn_CTL_SPI_CS_NSSHIGH                             (0x0UL<<1)
N#define DEV_SPIn_CTL_SPI_CS_NSSLOW                              (0x1UL<<1)
N#define DEV_SPIn_CTL_SPI_CS_MASK                                (0x1UL<<1)
N#define DEV_SPIn_CTL_SPI_EN_DISABLE                             (0x0UL<<0)
N#define DEV_SPIn_CTL_SPI_EN_ENABLE                              (0x1UL<<0)
N#define DEV_SPIn_CTL_SPI_EN_MASK                                (0x1UL<<0)
N/****SPI_CTL end****/
N
N
N/***********************************SPI_STA***********************************/
N#define DEV_SPIn_STA_RX_EMPTY                                   (0x1UL<<30)
N#define DEV_SPIn_STA_RX_FULL                                    (0x1UL<<29)
N#define DEV_SPIn_STA_RX_LEVEL_MASK                              (0x1fUL<<24)
N#define DEV_SPIn_STA_TX_EMPTY                                   (0x1UL<<22)
N#define DEV_SPIn_STA_TX_FULL                                    (0x1UL<<21)
N#define DEV_SPIn_STA_TX_LEVEL_MASK                              (0x1fUL<<16)
N#define DEV_SPIn_STA_SPI_IDLE_SPIBUSY                           (0x0UL<<8)
N#define DEV_SPIn_STA_SPI_IDLE_SPIIDLE                           (0x1UL<<8)
N#define DEV_SPIn_STA_SPI_IDLE_MASK                              (0x1UL<<8)
N#define DEV_SPIn_STA_SPI_WORK_STOP                              (0x0UL<<0)
N#define DEV_SPIn_STA_SPI_WORK_WORKED                            (0x1UL<<0)
N#define DEV_SPIn_STA_SPI_WORK_MASK                              (0x1UL<<0)
N/****SPI_STA end****/
N
N
N/***********************************SPI_RX_NUM***********************************/
N#define DEV_SPIn_RX_NUM_RX_START                                (0x1UL<<24)
N#define DEV_SPIn_RX_NUM_MASK                                    (0xffffffUL<<0)
N/****SPI_RX_NUM end****/
N
N
N/***********************************SPI_RX_CNT***********************************/
N#define DEV_SPIn_RX_CNT_MASK                                    (0xffffffUL<<0)
N/****SPI_RX_CNT end****/
N
N
N/***********************************SPI_TX_DATA***********************************/
N#define DEV_SPIn_TX_DATA_MASK                                   (0xffUL<<0)
N/****SPI_TX_DATA end****/
N
N
N/***********************************SPI_RX_DATA***********************************/
N#define DEV_SPIn_RX_DATA_MASK                                   (0xffUL<<0)
N/****SPI_RX_DATA end****/
N
N
N/***********************************SPI_PD***********************************/
N#define DEV_SPIn_PD_RX_OF                                       (0x1UL<<7)
N#define DEV_SPIn_PD_TX_UF                                       (0x1UL<<6)
N#define DEV_SPIn_PD_RX_END                                      (0x1UL<<5)
N#define DEV_SPIn_PD_TX_END                                      (0x1UL<<4)
N#define DEV_SPIn_PD_RX_UF                                       (0x1UL<<3)
N#define DEV_SPIn_PD_TX_OF                                       (0x1UL<<2)
N#define DEV_SPIn_PD_RX_THR                                      (0x1UL<<1)
N#define DEV_SPIn_PD_TX_THR                                      (0x1UL<<0)
N/****SPI_PD end****/
N
N
N/***********************************SPI_IE***********************************/
N#define DEV_SPIn_IE_RX_DMA_EN                                   (0x1UL<<17)
N#define DEV_SPIn_IE_TX_DMA_EN                                   (0x1UL<<16)
N#define DEV_SPIn_IE_RX_OF                                       (0x1UL<<7)
N#define DEV_SPIn_IE_TX_UF                                       (0x1UL<<6)
N#define DEV_SPIn_IE_RX_END                                      (0x1UL<<5)
N#define DEV_SPIn_IE_TX_END                                      (0x1UL<<4)
N#define DEV_SPIn_IE_RX_UF                                       (0x1UL<<3)
N#define DEV_SPIn_IE_TX_OF                                       (0x1UL<<2)
N#define DEV_SPIn_IE_RX_THR                                      (0x1UL<<1)
N#define DEV_SPIn_IE_TX_THR                                      (0x1UL<<0)
N/****SPI_IE end****/
N
N
N/***********************************DEV_SPIn register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    CTL;                                     /* 0x0    SPI Control */
X    volatile    uint32_t    CTL;                                      
N    __IO    uint32_t    STA;                                     /* 0x4    SPI STATUS */
X    volatile    uint32_t    STA;                                      
N    __IO    uint32_t    RX_NUM;                                  /* 0x8    RX Number */
X    volatile    uint32_t    RX_NUM;                                   
N    __I     uint32_t    RX_CNT;                                  /* 0xc    RX Counter */
X    volatile const     uint32_t    RX_CNT;                                   
N    __IO    uint32_t    TX_DATA;                                 /* 0x10    TX Data(FIFO) */
X    volatile    uint32_t    TX_DATA;                                  
N    __I     uint32_t    RX_DATA;                                 /* 0x14    RX Data(FIFO) */
X    volatile const     uint32_t    RX_DATA;                                  
N            uint32_t    RESERVED0[2];
N    __IO    uint32_t    PD;                                      /* 0x20    SPI Pending */
X    volatile    uint32_t    PD;                                       
N    __IO    uint32_t    IE;                                      /* 0x24    SPI Interrupt Enable */
X    volatile    uint32_t    IE;                                       
N}DEV_SPIn_RegDef;
N/****DEV_SPIn end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 69 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_pwm.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_pwm.h" 1
N#ifndef __DEV_PWM_H__
N#define __DEV_PWM_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************PWMn_CTL***********************************/
N#define DEV_PWM_CTL_DutyMode_NUM_MASK                           (0x3fUL<<26)
N#define DEV_PWM_CTL_DutyMode_CLK_OUT                            (0x1UL<<25)
N#define DEV_PWM_CTL_DutyMode_DUTY_MASK                          (0x1ffUL<<16)
N#define DEV_PWM_CTL_DutyMode_LEN(total_cycle)                   (((total_cycle)-1)<<8)
N#define DEV_PWM_CTL_DutyMode_LEN_MASK                           (0xffUL<<8)
N#define DEV_PWM_CTL_DutyMode_MODE_NORMALMODE                    (0x0UL<<1)
N#define DEV_PWM_CTL_DutyMode_MODE_BREATHMODE                    (0x1UL<<1)
N#define DEV_PWM_CTL_DutyMode_MODE_SOFTMODE                      (0x2UL<<1)
N#define DEV_PWM_CTL_DutyMode_MODE_PDMMODE                       (0x3UL<<1)
N#define DEV_PWM_CTL_DutyMode_MODE_MASK                          (0x3UL<<1)
N#define DEV_PWM_CTL_DutyMode_EN                                 (0x1UL<<0)
N/****PWMn_CTL end****/
N
N
N/***********************************PWMn_CTL***********************************/
N#define DEV_PWM_CTL_BreathMode_HNUM_MASK                        (0xffUL<<24)
N#define DEV_PWM_CTL_BreathMode_LNUM_MASK                        (0xffUL<<16)
N#define DEV_PWM_CTL_BreathMode_QNUM_MASK                        (0xfUL<<4)
N#define DEV_PWM_CTL_BreathMode_MODE_NORMALMODE                  (0x0UL<<1)
N#define DEV_PWM_CTL_BreathMode_MODE_BREATHMODE                  (0x1UL<<1)
N#define DEV_PWM_CTL_BreathMode_MODE_SOFTMODE                    (0x2UL<<1)
N#define DEV_PWM_CTL_BreathMode_MODE_PDMMODE                     (0x3UL<<1)
N#define DEV_PWM_CTL_BreathMode_MODE_MASK                        (0x3UL<<1)
N#define DEV_PWM_CTL_BreathMode_EN                               (0x1UL<<0)
N/****PWMn_CTL end****/
N
N
N/***********************************PWMn_CTL***********************************/
N#define DEV_PWM_CTL_SoftMode_OUT_SET                            (0x1UL<<31)
N#define DEV_PWM_CTL_SoftMode_OUT_VAL_MASK                       (0x3UL<<28)
N#define DEV_PWM_CTL_SoftMode_MOD_OUT                            (0x1UL<<26)
N#define DEV_PWM_CTL_SoftMode_CLK_OUT                            (0x1UL<<25)
N#define DEV_PWM_CTL_SoftMode_SGN_FMT_SIGNEDMAGNITUDE            (0x0UL<<24)
N#define DEV_PWM_CTL_SoftMode_SGN_FMT_SIGNEDCOMPLEMENT           (0x1UL<<24)
N#define DEV_PWM_CTL_SoftMode_SGN_FMT_MASK                       (0x1UL<<24)
N#define DEV_PWM_CTL_SoftMode_OUT_FMT_SINGLEEND                  (0x0UL<<22)
N#define DEV_PWM_CTL_SoftMode_OUT_FMT_OVERTURN                   (0x1UL<<22)
N#define DEV_PWM_CTL_SoftMode_OUT_FMT_DIFFERENCE                 (0x2UL<<22)
N#define DEV_PWM_CTL_SoftMode_OUT_FMT_CLASS_D                    (0x3UL<<22)
N#define DEV_PWM_CTL_SoftMode_OUT_FMT_MASK                       (0x3UL<<22)
N#define DEV_PWM_CTL_SoftMode_FIFO_RST_FIFOWORK                  (0x0UL<<21)
N#define DEV_PWM_CTL_SoftMode_FIFO_RST_FIFORESET                 (0x1UL<<21)
N#define DEV_PWM_CTL_SoftMode_FIFO_RST_MASK                      (0x1UL<<21)
N#define DEV_PWM_CTL_SoftMode_FIFO_THR_MASK                      (0x1fUL<<16)
N#define DEV_PWM_CTL_SoftMode_LEN_256_512_1024_65536             (0x0UL<<15)
N#define DEV_PWM_CTL_SoftMode_LEN_250_500_1000_64000             (0x1UL<<15)
N#define DEV_PWM_CTL_SoftMode_LEN_MASK                           (0x1UL<<15)
N#define DEV_PWM_CTL_SoftMode_FIFO_CONT_STOPWHENFIFOEMPTY        (0x0UL<<14)
N#define DEV_PWM_CTL_SoftMode_FIFO_CONT_CONTINUEWHENFIFOEMPTY_OUTPUTLASTPWM_TX_DAT   (0x1UL<<14)
N#define DEV_PWM_CTL_SoftMode_FIFO_CONT_MASK                     (0x1UL<<14)
N#define DEV_PWM_CTL_SoftMode_FMT_1DATA                          (0x0UL<<12)
N#define DEV_PWM_CTL_SoftMode_FMT_2DATA                          (0x1UL<<12)
N#define DEV_PWM_CTL_SoftMode_FMT_3DATA                          (0x2UL<<12)
N#define DEV_PWM_CTL_SoftMode_FMT_4DATA                          (0x3UL<<12)
N#define DEV_PWM_CTL_SoftMode_FMT_MASK                           (0x3UL<<12)
N#define DEV_PWM_CTL_SoftMode_RPT_MASK                           (0xfUL<<8)
N#define DEV_PWM_CTL_SoftMode_WIDTH_MASK                         (0xfUL<<4)
N#define DEV_PWM_CTL_SoftMode_MODE_NORMALMODE                    (0x0UL<<1)
N#define DEV_PWM_CTL_SoftMode_MODE_BREATHMODE                    (0x1UL<<1)
N#define DEV_PWM_CTL_SoftMode_MODE_SOFTMODE                      (0x2UL<<1)
N#define DEV_PWM_CTL_SoftMode_MODE_PDMMODE                       (0x3UL<<1)
N#define DEV_PWM_CTL_SoftMode_MODE_MASK                          (0x3UL<<1)
N#define DEV_PWM_CTL_SoftMode_EN                                 (0x1UL<<0)
N/****PWMn_CTL end****/
N
N
N/***********************************PWMn_CTL***********************************/
N#define DEV_PWM_CTL_PDMMode_CLK_OUT                             (0x1UL<<25)
N#define DEV_PWM_CTL_PDMMode_FIFO_RST_FIFOWORK                   (0x0UL<<21)
N#define DEV_PWM_CTL_PDMMode_FIFO_RST_FIFORESET                  (0x1UL<<21)
N#define DEV_PWM_CTL_PDMMode_FIFO_RST_MASK                       (0x1UL<<21)
N#define DEV_PWM_CTL_PDMMode_FIFO_THR_MASK                       (0x1fUL<<16)
N#define DEV_PWM_CTL_PDMMode_FIFO_CONT_STOPWHENFIFOEMPTY         (0x0UL<<14)
N#define DEV_PWM_CTL_PDMMode_FIFO_CONT_CONTINUEWHENFIFOEMPTY     (0x1UL<<14)
N#define DEV_PWM_CTL_PDMMode_FIFO_CONT_MASK                      (0x1UL<<14)
N#define DEV_PWM_CTL_PDMMode_MODE_NORMALMODE                     (0x0UL<<1)
N#define DEV_PWM_CTL_PDMMode_MODE_BREATHMODE                     (0x1UL<<1)
N#define DEV_PWM_CTL_PDMMode_MODE_SOFTMODE                       (0x2UL<<1)
N#define DEV_PWM_CTL_PDMMode_MODE_PDMMODE                        (0x3UL<<1)
N#define DEV_PWM_CTL_PDMMode_MODE_MASK                           (0x3UL<<1)
N#define DEV_PWM_CTL_PDMMode_EN                                  (0x1UL<<0)
N/****PWMn_CTL end****/
N
N
N/***********************************PWM0_TX_DAT***********************************/
N#define DEV_PWM_PWM0_TX_DAT_DATA_MASK                           (0xffffffffUL<<0)
N/****PWM0_TX_DAT end****/
N
N
N/***********************************PWM0_STA***********************************/
N#define DEV_PWM_PWM0_STA_WLEVEL_MASK                            (0x1fUL<<2)
N#define DEV_PWM_PWM0_STA_EMPTY                                  (0x1UL<<1)
N#define DEV_PWM_PWM0_STA_FULL                                   (0x1UL<<0)
N/****PWM0_STA end****/
N
N
N/***********************************PWM2_TX_DAT***********************************/
N#define DEV_PWM_PWM2_TX_DAT_DATA_MASK                           (0xffffffffUL<<0)
N/****PWM2_TX_DAT end****/
N
N
N/***********************************PWM2_STA***********************************/
N#define DEV_PWM_PWM2_STA_WLEVEL_MASK                            (0x1fUL<<2)
N#define DEV_PWM_PWM2_STA_EMPTY                                  (0x1UL<<1)
N#define DEV_PWM_PWM2_STA_FULL                                   (0x1UL<<0)
N/****PWM2_STA end****/
N
N
N/***********************************PWM_PD***********************************/
N#define DEV_PWM_PD_DAT2_END                                     (0x1UL<<24)
N#define DEV_PWM_PD_DAT0_END                                     (0x1UL<<23)
N#define DEV_PWM_PD_FIFO1_UF                                     (0x1UL<<22)
N#define DEV_PWM_PD_FIFO1_OF                                     (0x1UL<<21)
N#define DEV_PWM_PD_FIFO1_THR                                    (0x1UL<<20)
N#define DEV_PWM_PD_FIFO0_UF                                     (0x1UL<<18)
N#define DEV_PWM_PD_FIFO0_OF                                     (0x1UL<<17)
N#define DEV_PWM_PD_FIFO0_THR                                    (0x1UL<<16)
N#define DEV_PWM_PD_BTH_END_MASK                                 (0xffUL<<8)
N#define DEV_PWM_PD_PWM_END_MASK                                 (0xffUL<<0)
N/****PWM_PD end****/
N
N
N/***********************************PWM_IE***********************************/
N#define DEV_PWM_IE_DMA1_EN                                      (0x1UL<<29)
N#define DEV_PWM_IE_DMA0_EN                                      (0x1UL<<28)
N#define DEV_PWM_IE_DAT2_END                                     (0x1UL<<24)
N#define DEV_PWM_IE_DAT0_END                                     (0x1UL<<23)
N#define DEV_PWM_IE_FIFO1_UF                                     (0x1UL<<22)
N#define DEV_PWM_IE_FIFO1_OF                                     (0x1UL<<21)
N#define DEV_PWM_IE_FIFO1_THR                                    (0x1UL<<20)
N#define DEV_PWM_IE_FIFO0_UF                                     (0x1UL<<18)
N#define DEV_PWM_IE_FIFO0_OF                                     (0x1UL<<17)
N#define DEV_PWM_IE_FIFO0_THR                                    (0x1UL<<16)
N#define DEV_PWM_IE_BTH_END_MASK                                 (0xffUL<<8)
N#define DEV_PWM_IE_PWM_END_MASK                                 (0xffUL<<0)
N/****PWM_IE end****/
N
N
N/***********************************PWM_PHA0***********************************/
N#define DEV_PWM_PHA0_DUTY2_MASK                                 (0x1ffUL<<18)
N#define DEV_PWM_PHA0_DUTY1_MASK                                 (0x1ffUL<<9)
N#define DEV_PWM_PHA0_DUTY0_MASK                                 (0x1ffUL<<0)
N/****PWM_PHA0 end****/
N
N
N/***********************************PWM_PHA1***********************************/
N#define DEV_PWM_PHA1_LEN(total_cycle)                           (((total_cycle)-1)<<0)
N#define DEV_PWM_PHA1_LEN_MASK                                   (0xffUL<<0)
N/****PWM_PHA1 end****/
N
N
N/***********************************PWM_DTR***********************************/
N#define DEV_PWM_DTR_CNT_MODE_CNT_MODE_UP                        (0x0UL<<26)
N#define DEV_PWM_DTR_CNT_MODE_CNT_MODE_DOWN                      (0x1UL<<26)
N#define DEV_PWM_DTR_CNT_MODE_CNT_MODE_CENTER                    (0x2UL<<26)
N#define DEV_PWM_DTR_CNT_MODE_MASK                               (0x3UL<<26)
N#define DEV_PWM_DTR_OC2L_IP                                     (0x1UL<<25)
N#define DEV_PWM_DTR_OC2H_IP                                     (0x1UL<<24)
N#define DEV_PWM_DTR_OC2L_P                                      (0x1UL<<23)
N#define DEV_PWM_DTR_OC2H_P                                      (0x1UL<<22)
N#define DEV_PWM_DTR_OC1L_IP                                     (0x1UL<<21)
N#define DEV_PWM_DTR_OC1H_IP                                     (0x1UL<<20)
N#define DEV_PWM_DTR_OC1L_P                                      (0x1UL<<19)
N#define DEV_PWM_DTR_OC1H_P                                      (0x1UL<<18)
N#define DEV_PWM_DTR_OC0L_IP                                     (0x1UL<<17)
N#define DEV_PWM_DTR_OC0H_IP                                     (0x1UL<<16)
N#define DEV_PWM_DTR_OC0L_P                                      (0x1UL<<15)
N#define DEV_PWM_DTR_OC0H_P                                      (0x1UL<<14)
N#define DEV_PWM_DTR_DEADTIME(deadtime,pwm_clk)                  (((deadtime)*(1/(pwm_clk)))<<6)
N#define DEV_PWM_DTR_DEADTIME_MASK                               (0xffUL<<6)
N#define DEV_PWM_DTR_OC2_ENABLE                                  (0x1UL<<5)
N#define DEV_PWM_DTR_OC1_ENABLE                                  (0x1UL<<4)
N#define DEV_PWM_DTR_OC0_ENABLE                                  (0x1UL<<3)
N#define DEV_PWM_DTR_PWM2_EN                                     (0x1UL<<2)
N#define DEV_PWM_DTR_PWM1_EN                                     (0x1UL<<1)
N#define DEV_PWM_DTR_PWM0_EN                                     (0x1UL<<0)
N/****PWM_DTR end****/
N
N
N/***********************************DEV_PWM register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    CTL[8];                                  /* 0x0    PWM0 Control */
X    volatile    uint32_t    CTL[8];                                   
N    __O     uint32_t    PWM0_TX_DAT;                             /* 0x20    FIFO Write Data */
X    volatile     uint32_t    PWM0_TX_DAT;                              
N    __I     uint32_t    PWM0_STA;                                /* 0x24    FIFO Status */
X    volatile const     uint32_t    PWM0_STA;                                 
N    __O     uint32_t    PWM2_TX_DAT;                             /* 0x28    FIFO Write Data */
X    volatile     uint32_t    PWM2_TX_DAT;                              
N    __I     uint32_t    PWM2_STA;                                /* 0x2c    FIFO Status */
X    volatile const     uint32_t    PWM2_STA;                                 
N            uint32_t    RESERVED0[4];
N    __IO    uint32_t    PD;                                      /* 0x40    PWM Pending */
X    volatile    uint32_t    PD;                                       
N    __IO    uint32_t    IE;                                      /* 0x44    PWM Interrupt Enable */
X    volatile    uint32_t    IE;                                       
N            uint32_t    RESERVED1[3];
N    __IO    uint32_t    PHA0;                                    /* 0x54    DEADTIME Control PWM_Duty */
X    volatile    uint32_t    PHA0;                                     
N    __IO    uint32_t    PHA1;                                    /* 0x58    DEADTIME Control PWM_Len */
X    volatile    uint32_t    PHA1;                                     
N    __IO    uint32_t    DTR;                                     /* 0x5c    DEADTIME Control Configuration */
X    volatile    uint32_t    DTR;                                      
N}DEV_PWM_RegDef;
N/****DEV_PWM end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 70 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_camera.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_camera.h" 1
N#ifndef __DEV_CAMERA_H__
N#define __DEV_CAMERA_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CAMERA_CTL***********************************/
N#define DEV_CAMERA_CTL_Camera_mode_YUV422                       (0x0UL<<17)
N#define DEV_CAMERA_CTL_Camera_mode_RGB565                       (0x1UL<<17)
N#define DEV_CAMERA_CTL_Camera_mode_RAW8                         (0x2UL<<17)
N#define DEV_CAMERA_CTL_Camera_mode_MASK                         (0x3UL<<17)
N#define DEV_CAMERA_CTL_DELAY_CHAIN_MASK                         (0x1fUL<<12)
N#define DEV_CAMERA_CTL_Camera_SWAP_DISABLE                      (0x0UL<<11)
N#define DEV_CAMERA_CTL_Camera_SWAP_ENABLE                       (0x1UL<<11)
N#define DEV_CAMERA_CTL_Camera_SWAP_MASK                         (0x1UL<<11)
N#define DEV_CAMERA_CTL_RX_FIFO_THR_MASK                         (0x1fUL<<6)
N#define DEV_CAMERA_CTL_RX_FIFO_RST_WORK                         (0x0UL<<5)
N#define DEV_CAMERA_CTL_RX_FIFO_RST_RESET                        (0x1UL<<5)
N#define DEV_CAMERA_CTL_RX_FIFO_RST_MASK                         (0x1UL<<5)
N#define DEV_CAMERA_CTL_WORK_MODE_SINGLE                         (0x0UL<<3)
N#define DEV_CAMERA_CTL_WORK_MODE_DUAL                           (0x1UL<<3)
N#define DEV_CAMERA_CTL_WORK_MODE_QUAD                           (0x2UL<<3)
N#define DEV_CAMERA_CTL_WORK_MODE_MASK                           (0x3UL<<3)
N#define DEV_CAMERA_CTL_FREE_CLK_MODE_STANDARDCLK                (0x0UL<<2)
N#define DEV_CAMERA_CTL_FREE_CLK_MODE_FREECLK                    (0x1UL<<2)
N#define DEV_CAMERA_CTL_FREE_CLK_MODE_MASK                       (0x1UL<<2)
N#define DEV_CAMERA_CTL_CAMERA_TYPE_MTK_MODE                     (0x0UL<<1)
N#define DEV_CAMERA_CTL_CAMERA_TYPE_GC_MODE                      (0x1UL<<1)
N#define DEV_CAMERA_CTL_CAMERA_TYPE_MASK                         (0x1UL<<1)
N#define DEV_CAMERA_CTL_CAMERA_EN_DISABLE                        (0x0UL<<0)
N#define DEV_CAMERA_CTL_CAMERA_EN_ENABLE                         (0x1UL<<0)
N#define DEV_CAMERA_CTL_CAMERA_EN_MASK                           (0x1UL<<0)
N/****CAMERA_CTL end****/
N
N
N/***********************************CAMERA_STA***********************************/
N#define DEV_CAMERA_STA_RX_EMPTY                                 (0x1UL<<10)
N#define DEV_CAMERA_STA_RX_FULL                                  (0x1UL<<9)
N#define DEV_CAMERA_STA_RX_LEVEL_MASK                            (0x1fUL<<4)
N#define DEV_CAMERA_STA_DATA_TYPE_YUV422                         (0x0UL<<2)
N#define DEV_CAMERA_STA_DATA_TYPE_RGB565                         (0x1UL<<2)
N#define DEV_CAMERA_STA_DATA_TYPE_RAW8                           (0x2UL<<2)
N#define DEV_CAMERA_STA_DATA_TYPE_MASK                           (0x3UL<<2)
N#define DEV_CAMERA_STA_CAMERA_STA_CAMERA_IDLE                   (0x0UL<<1)
N#define DEV_CAMERA_STA_CAMERA_STA_CAMERA_BUSY                   (0x1UL<<1)
N#define DEV_CAMERA_STA_CAMERA_STA_MASK                          (0x1UL<<1)
N#define DEV_CAMERA_STA_CAMERA_WORK_STOP                         (0x0UL<<0)
N#define DEV_CAMERA_STA_CAMERA_WORK_WORKED                       (0x1UL<<0)
N#define DEV_CAMERA_STA_CAMERA_WORK_MASK                         (0x1UL<<0)
N/****CAMERA_STA end****/
N
N
N/***********************************CAMERA_RANGE***********************************/
N#define DEV_CAMERA_RANGE_IMAGE_WIDTH_MASK                       (0xffffUL<<16)
N#define DEV_CAMERA_RANGE_IMAGE_HEIGHT_MASK                      (0xffffUL<<0)
N/****CAMERA_RANGE end****/
N
N
N/***********************************CAMERA_RX_DATA***********************************/
N#define DEV_CAMERA_RX_DATA_MASK                                 (0xffUL<<0)
N/****CAMERA_RX_DATA end****/
N
N
N/***********************************CAMERA_IE***********************************/
N#define DEV_CAMERA_IE_RX_DMA_EN                                 (0x1UL<<7)
N#define DEV_CAMERA_IE_RXRange                                   (0x1UL<<4)
N#define DEV_CAMERA_IE_RX_UF                                     (0x1UL<<3)
N#define DEV_CAMERA_IE_RX_OF                                     (0x1UL<<2)
N#define DEV_CAMERA_IE_RX_END                                    (0x1UL<<1)
N#define DEV_CAMERA_IE_RX_THR                                    (0x1UL<<0)
N/****CAMERA_IE end****/
N
N
N/***********************************CAMERA_PD***********************************/
N#define DEV_CAMERA_PD_RX_RANGE_ERR                              (0x1UL<<4)
N#define DEV_CAMERA_PD_RX_UF                                     (0x1UL<<3)
N#define DEV_CAMERA_PD_RX_OF                                     (0x1UL<<2)
N#define DEV_CAMERA_PD_RX_END                                    (0x1UL<<1)
N#define DEV_CAMERA_PD_RX_THR                                    (0x1UL<<0)
N/****CAMERA_PD end****/
N
N
N/***********************************CAMERA_RANGE_CNT***********************************/
N#define DEV_CAMERA_RANGE_CNT_IMAGE_WIDTH_MASK                   (0xffffUL<<16)
N#define DEV_CAMERA_RANGE_CNT_IMAGE_HEIGHT_MASK                  (0xffffUL<<0)
N/****CAMERA_RANGE_CNT end****/
N
N
N/***********************************DEV_CAMERA register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    CTL;                                     /* 0x0    CAMERA Control */
X    volatile    uint32_t    CTL;                                      
N    __IO    uint32_t    STA;                                     /* 0x4    CAMERA State */
X    volatile    uint32_t    STA;                                      
N    __I     uint32_t    RANGE;                                   /* 0x8    CAMERA RANGE */
X    volatile const     uint32_t    RANGE;                                    
N    __I     uint32_t    RX_DATA;                                 /* 0xc    CAMERA Receive Data */
X    volatile const     uint32_t    RX_DATA;                                  
N    __IO    uint32_t    IE;                                      /* 0x10    CAMERA_IE */
X    volatile    uint32_t    IE;                                       
N    __IO    uint32_t    PD;                                      /* 0x14    CAMERA_PD */
X    volatile    uint32_t    PD;                                       
N    __I     uint32_t    RANGE_CNT;                               /* 0x18    CAMERA RANGE Counter */
X    volatile const     uint32_t    RANGE_CNT;                                
N}DEV_CAMERA_RegDef;
N/****DEV_CAMERA end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 71 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_uartn.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_uartn.h" 1
N#ifndef __DEV_UARTN_H__
N#define __DEV_UARTN_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************UART_CFG***********************************/
N#define DEV_UARTn_CFG_TO_DIV(_total_)                           (((_total_)-1)<<20)
N#define DEV_UARTn_CFG_TO_DIV_MASK                               (0x3fUL<<20)
N#define DEV_UARTn_CFG_RTS_WORK                                  (0x0UL<<17)
N#define DEV_UARTn_CFG_RTS_STOP                                  (0x1UL<<17)
N#define DEV_UARTn_CFG_RTS_MASK                                  (0x1UL<<17)
N#define DEV_UARTn_CFG_AFC_DISABLE                               (0x0UL<<16)
N#define DEV_UARTn_CFG_AFC_ENABLE                                (0x1UL<<16)
N#define DEV_UARTn_CFG_AFC_MASK                                  (0x1UL<<16)
N#define DEV_UARTn_CFG_RX_FIFO_THR_MASK                          (0xfUL<<12)
N#define DEV_UARTn_CFG_TX_FIFO_THR_MASK                          (0xfUL<<8)
N#define DEV_UARTn_CFG_PARITY_SEL_EVENPARITY                     (0x0UL<<6)
N#define DEV_UARTn_CFG_PARITY_SEL_ODD_PARITY                     (0x1UL<<6)
N#define DEV_UARTn_CFG_PARITY_SEL_FORCE0                         (0x2UL<<6)
N#define DEV_UARTn_CFG_PARITY_SEL_FORCE1                         (0x3UL<<6)
N#define DEV_UARTn_CFG_PARITY_SEL_MASK                           (0x3UL<<6)
N#define DEV_UARTn_CFG_PARITY_EN_DISABLE                         (0x0UL<<4)
N#define DEV_UARTn_CFG_PARITY_EN_ENABLE                          (0x1UL<<4)
N#define DEV_UARTn_CFG_PARITY_EN_MASK                            (0x1UL<<4)
N#define DEV_UARTn_CFG_LOOPBACK_EN_DISABLE                       (0x0UL<<3)
N#define DEV_UARTn_CFG_LOOPBACK_EN_ENABLE                        (0x1UL<<3)
N#define DEV_UARTn_CFG_LOOPBACK_EN_MASK                          (0x1UL<<3)
N#define DEV_UARTn_CFG_STOP_BIT_1BIT                             (0x0UL<<2)
N#define DEV_UARTn_CFG_STOP_BIT_2BIT                             (0x1UL<<2)
N#define DEV_UARTn_CFG_STOP_BIT_MASK                             (0x1UL<<2)
N#define DEV_UARTn_CFG_DATA_WIDTH_5BIT                           (0x0UL<<0)
N#define DEV_UARTn_CFG_DATA_WIDTH_6BIT                           (0x1UL<<0)
N#define DEV_UARTn_CFG_DATA_WIDTH_7BIT                           (0x2UL<<0)
N#define DEV_UARTn_CFG_DATA_WIDTH_8BIT                           (0x3UL<<0)
N#define DEV_UARTn_CFG_DATA_WIDTH_MASK                           (0x3UL<<0)
N/****UART_CFG end****/
N
N
N/***********************************UART_DIV***********************************/
N#define DEV_UARTn_DIV_RX_DIV(clock,baud_rate)                   ((((clock)/(baud_rate))-1)<<16)
N#define DEV_UARTn_DIV_RX_DIV_MASK                               (0xffffUL<<16)
N#define DEV_UARTn_DIV_TX_DIV(clock,baud_rate)                   ((((clock)/(baud_rate))-1)<<0)
N#define DEV_UARTn_DIV_TX_DIV_MASK                               (0xffffUL<<0)
N/****UART_DIV end****/
N
N
N/***********************************UART_CTL***********************************/
N#define DEV_UARTn_CTL_ABD_DISABLE                               (0x0UL<<6)
N#define DEV_UARTn_CTL_ABD_ENABLE                                (0x1UL<<6)
N#define DEV_UARTn_CTL_ABD_MASK                                  (0x1UL<<6)
N#define DEV_UARTn_CTL_RX_FIFO_RST_DISABLE                       (0x0UL<<5)
N#define DEV_UARTn_CTL_RX_FIFO_RST_ENABLE                        (0x1UL<<5)
N#define DEV_UARTn_CTL_RX_FIFO_RST_MASK                          (0x1UL<<5)
N#define DEV_UARTn_CTL_TX_FIFO_RST_DISABLE                       (0x0UL<<4)
N#define DEV_UARTn_CTL_TX_FIFO_RST_ENABLE                        (0x1UL<<4)
N#define DEV_UARTn_CTL_TX_FIFO_RST_MASK                          (0x1UL<<4)
N#define DEV_UARTn_CTL_RX_DMA_EN_DISABLE                         (0x0UL<<3)
N#define DEV_UARTn_CTL_RX_DMA_EN_ENABLE                          (0x1UL<<3)
N#define DEV_UARTn_CTL_RX_DMA_EN_MASK                            (0x1UL<<3)
N#define DEV_UARTn_CTL_TX_DMA_EN_DISABLE                         (0x0UL<<2)
N#define DEV_UARTn_CTL_TX_DMA_EN_ENABLE                          (0x1UL<<2)
N#define DEV_UARTn_CTL_TX_DMA_EN_MASK                            (0x1UL<<2)
N#define DEV_UARTn_CTL_RX_EN_DISABLE                             (0x0UL<<1)
N#define DEV_UARTn_CTL_RX_EN_ENABLE                              (0x1UL<<1)
N#define DEV_UARTn_CTL_RX_EN_MASK                                (0x1UL<<1)
N#define DEV_UARTn_CTL_TX_EN_DISABLE                             (0x0UL<<0)
N#define DEV_UARTn_CTL_TX_EN_ENABLE                              (0x1UL<<0)
N#define DEV_UARTn_CTL_TX_EN_MASK                                (0x1UL<<0)
N/****UART_CTL end****/
N
N
N/***********************************UART_IE***********************************/
N#define DEV_UARTn_IE_TX_END                                     (0x1UL<<9)
N#define DEV_UARTn_IE_DET_END                                    (0x1UL<<8)
N#define DEV_UARTn_IE_TIME_OUT                                   (0x1UL<<7)
N#define DEV_UARTn_IE_PARITY_ERR                                 (0x1UL<<6)
N#define DEV_UARTn_IE_FRAME_ERR                                  (0x1UL<<5)
N#define DEV_UARTn_IE_RX_FIFO_UF                                 (0x1UL<<4)
N#define DEV_UARTn_IE_RX_FIFO_OF                                 (0x1UL<<3)
N#define DEV_UARTn_IE_TX_FIFO_OF                                 (0x1UL<<2)
N#define DEV_UARTn_IE_RX_FIFO_THR                                (0x1UL<<1)
N#define DEV_UARTn_IE_TX_FIFO_THR                                (0x1UL<<0)
N/****UART_IE end****/
N
N
N/***********************************UART_PD***********************************/
N#define DEV_UARTn_PD_TX_END                                     (0x1UL<<9)
N#define DEV_UARTn_PD_DET_END                                    (0x1UL<<8)
N#define DEV_UARTn_PD_TIME_OUT                                   (0x1UL<<7)
N#define DEV_UARTn_PD_PARITY_ERR                                 (0x1UL<<6)
N#define DEV_UARTn_PD_FRAME_ERR                                  (0x1UL<<5)
N#define DEV_UARTn_PD_RX_FIFO_UF                                 (0x1UL<<4)
N#define DEV_UARTn_PD_RX_FIFO_OF                                 (0x1UL<<3)
N#define DEV_UARTn_PD_TX_FIFO_OF                                 (0x1UL<<2)
N#define DEV_UARTn_PD_RX_FIFO_THR                                (0x1UL<<1)
N#define DEV_UARTn_PD_TX_FIFO_THR                                (0x1UL<<0)
N/****UART_PD end****/
N
N
N/***********************************UART_STA***********************************/
N#define DEV_UARTn_STA_CTS                                       (0x1UL<<16)
N#define DEV_UARTn_STA_RX_BUSY                                   (0x1UL<<15)
N#define DEV_UARTn_STA_RX_FIFO_FULL                              (0x1UL<<14)
N#define DEV_UARTn_STA_RX_FIFO_EMPTY                             (0x1UL<<13)
N#define DEV_UARTn_STA_RX_FIFO_RLVL_MASK                         (0x1fUL<<8)
N#define DEV_UARTn_STA_TX_BUSY                                   (0x1UL<<7)
N#define DEV_UARTn_STA_TX_FIFO_FULL                              (0x1UL<<6)
N#define DEV_UARTn_STA_TX_FIFO_EMPTY                             (0x1UL<<5)
N#define DEV_UARTn_STA_TX_FIFO_WLVL_MASK                         (0x1fUL<<0)
N/****UART_STA end****/
N
N
N/***********************************UART_RX_CNT***********************************/
N#define DEV_UARTn_RX_CNT_MASK                                   (0xffffUL<<0)
N/****UART_RX_CNT end****/
N
N
N/***********************************UART_TX_DAT***********************************/
N#define DEV_UARTn_TX_DAT_MASK                                   (0xffUL<<0)
N/****UART_TX_DAT end****/
N
N
N/***********************************UART_RX_DAT***********************************/
N#define DEV_UARTn_RX_DAT_MASK                                   (0xffUL<<0)
N/****UART_RX_DAT end****/
N
N
N/***********************************DEV_UARTn register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    CFG;                                     /* 0x0    UART Configure */
X    volatile    uint32_t    CFG;                                      
N    __IO    uint32_t    DIV;                                     /* 0x4    UART Divide */
X    volatile    uint32_t    DIV;                                      
N            uint32_t    RESERVED0;
N    __IO    uint32_t    CTL;                                     /* 0xc    UART Control */
X    volatile    uint32_t    CTL;                                      
N    __IO    uint32_t    IE;                                      /* 0x10    UART Interrupt Enable */
X    volatile    uint32_t    IE;                                       
N    __IO    uint32_t    PD;                                      /* 0x14    UART Interrupt Pending */
X    volatile    uint32_t    PD;                                       
N    __I     uint32_t    STA;                                     /* 0x18    UART Status */
X    volatile const     uint32_t    STA;                                      
N    __I     uint32_t    RX_CNT;                                  /* 0x1c    UART Rx Counter
X    volatile const     uint32_t    RX_CNT;                                  
N(used for Auto Baud Rate Detect) */
N    __IO    uint32_t    TX_DAT;                                  /* 0x20    UART Tx Data(FIFO) */
X    volatile    uint32_t    TX_DAT;                                   
N    __IO    uint32_t    RX_DAT;                                  /* 0x24    UART Rx Data(FIFO) */
X    volatile    uint32_t    RX_DAT;                                   
N}DEV_UARTn_RegDef;
N/****DEV_UARTn end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 72 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_iicn.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_iicn.h" 1
N#ifndef __DEV_IICN_H__
N#define __DEV_IICN_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************IIC_CFG***********************************/
N#define DEV_IICn_CFG_IIC_EN_DISABLE                             (0x0UL<<16)
N#define DEV_IICn_CFG_IIC_EN_ENABLE                              (0x1UL<<16)
N#define DEV_IICn_CFG_IIC_EN_MASK                                (0x1UL<<16)
N#define DEV_IICn_CFG_DIV_COE(clock,baud_rate)                   ((((clock)/2/(baud_rate)))<<8)
N#define DEV_IICn_CFG_DIV_COE_MASK                               (0xffUL<<8)
N#define DEV_IICn_CFG_SLV_ADDR_MASK                              (0x7fUL<<1)
N#define DEV_IICn_CFG_MODE_MASTER                                (0x0UL<<0)
N#define DEV_IICn_CFG_MODE_SLAVE                                 (0x1UL<<0)
N#define DEV_IICn_CFG_MODE_MASK                                  (0x1UL<<0)
N/****IIC_CFG end****/
N
N
N/***********************************IIC_CTL***********************************/
N#define DEV_IICn_CTL_CMD_RELEASEBUS                             (0x0UL<<12)
N#define DEV_IICn_CTL_CMD_STARTCMD                               (0x1UL<<12)
N#define DEV_IICn_CTL_CMD_STOPCMD                                (0x2UL<<12)
N#define DEV_IICn_CTL_CMD_RESTARTCMD                             (0x3UL<<12)
N#define DEV_IICn_CTL_CMD_MASK                                   (0x3UL<<12)
N#define DEV_IICn_CTL_TX_ACK_ACK                                 (0x0UL<<8)
N#define DEV_IICn_CTL_TX_ACK_NACK                                (0x1UL<<8)
N#define DEV_IICn_CTL_TX_ACK_MASK                                (0x1UL<<8)
N#define DEV_IICn_CTL_TX_DAT_MASK                                (0xffUL<<0)
N/****IIC_CTL end****/
N
N
N/***********************************IIC_IE***********************************/
N#define DEV_IICn_IE_BUS_ERR                                     (0x1UL<<4)
N#define DEV_IICn_IE_START_DET                                   (0x1UL<<3)
N#define DEV_IICn_IE_NACK_DET                                    (0x1UL<<2)
N#define DEV_IICn_IE_BYTE_END                                    (0x1UL<<1)
N#define DEV_IICn_IE_STOP_DET                                    (0x1UL<<0)
N/****IIC_IE end****/
N
N
N/***********************************IIC_PD***********************************/
N#define DEV_IICn_PD_BUS_ERR                                     (0x1UL<<4)
N#define DEV_IICn_PD_START_DET                                   (0x1UL<<3)
N#define DEV_IICn_PD_NACK_DET                                    (0x1UL<<2)
N#define DEV_IICn_PD_BYTE_END                                    (0x1UL<<1)
N#define DEV_IICn_PD_STOP_DET                                    (0x1UL<<0)
N/****IIC_PD end****/
N
N
N/***********************************IIC_STA***********************************/
N#define DEV_IICn_STA_RX_BUF_FULL_EMPTY                          (0x0UL<<5)
N#define DEV_IICn_STA_RX_BUF_FULL_FULL                           (0x1UL<<5)
N#define DEV_IICn_STA_RX_BUF_FULL_MASK                           (0x1UL<<5)
N#define DEV_IICn_STA_TX_BUF_FULL_EMPTY                          (0x0UL<<4)
N#define DEV_IICn_STA_TX_BUF_FULL_FULL                           (0x1UL<<4)
N#define DEV_IICn_STA_TX_BUF_FULL_MASK                           (0x1UL<<4)
N#define DEV_IICn_STA_ADDR_VALID                                 (0x1UL<<3)
N#define DEV_IICn_STA_RW_FLAG_MWR_SRD                            (0x0UL<<2)
N#define DEV_IICn_STA_RW_FLAG_SWR_MRD                            (0x1UL<<2)
N#define DEV_IICn_STA_RW_FLAG_MASK                               (0x1UL<<2)
N#define DEV_IICn_STA_RX_ACK_ACK                                 (0x0UL<<1)
N#define DEV_IICn_STA_RX_ACK_NACK                                (0x1UL<<1)
N#define DEV_IICn_STA_RX_ACK_MASK                                (0x1UL<<1)
N#define DEV_IICn_STA_BUSY_IDLE                                  (0x0UL<<0)
N#define DEV_IICn_STA_BUSY_BUSY                                  (0x1UL<<0)
N#define DEV_IICn_STA_BUSY_MASK                                  (0x1UL<<0)
N/****IIC_STA end****/
N
N
N/***********************************IIC_RX_DAT***********************************/
N#define DEV_IICn_RX_DAT_MASK                                    (0xffUL<<0)
N/****IIC_RX_DAT end****/
N
N
N/***********************************DEV_IICn register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    CFG;                                     /* 0x0    IIC Configure */
X    volatile    uint32_t    CFG;                                      
N    __IO    uint32_t    CTL;                                     /* 0x4    IIC Control */
X    volatile    uint32_t    CTL;                                      
N    __IO    uint32_t    IE;                                      /* 0x8    IIC Interrupt Enable */
X    volatile    uint32_t    IE;                                       
N    __IO    uint32_t    PD;                                      /* 0xc    IIC Interrupt Pending */
X    volatile    uint32_t    PD;                                       
N    __I     uint32_t    STA;                                     /* 0x10    IIC Status */
X    volatile const     uint32_t    STA;                                      
N    __I     uint32_t    RX_DAT;                                  /* 0x14    IIC Rx Data(FIFO) */
X    volatile const     uint32_t    RX_DAT;                                   
N}DEV_IICn_RegDef;
N/****DEV_IICn end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 73 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_asin.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_asin.h" 1
N#ifndef __DEV_ASIN_H__
N#define __DEV_ASIN_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************ASI_CFG***********************************/
N#define DEV_ASIn_CFG_LSB_MODE_MSB                               (0x0UL<<30)
N#define DEV_ASIn_CFG_LSB_MODE_LSB                               (0x1UL<<30)
N#define DEV_ASIn_CFG_LSB_MODE_MASK                              (0x1UL<<30)
N#define DEV_ASIn_CFG_RX_FIFO_THR_MASK                           (0x3fUL<<24)
N#define DEV_ASIn_CFG_DSD_DAT_FMT_HIGH16BIT                      (0x0UL<<22)
N#define DEV_ASIn_CFG_DSD_DAT_FMT_LOW_16BIT                      (0x1UL<<22)
N#define DEV_ASIn_CFG_DSD_DAT_FMT_MIDDLE16BIT                    (0x2UL<<22)
N#define DEV_ASIn_CFG_DSD_DAT_FMT_32BIT                          (0x3UL<<22)
N#define DEV_ASIn_CFG_DSD_DAT_FMT_MASK                           (0x3UL<<22)
N#define DEV_ASIn_CFG_TX_FIFO_THR_MASK                           (0x3fUL<<16)
N#define DEV_ASIn_CFG_LOOPBACK_DISABLE                           (0x0UL<<15)
N#define DEV_ASIn_CFG_LOOPBACK_ENABLE                            (0x1UL<<15)
N#define DEV_ASIn_CFG_LOOPBACK_MASK                              (0x1UL<<15)
N#define DEV_ASIn_CFG_DAT_FMT_HIGH16BIT                          (0x0UL<<12)
N#define DEV_ASIn_CFG_DAT_FMT_LOW_16BIT                          (0x1UL<<12)
N#define DEV_ASIn_CFG_DAT_FMT_HIGH24BIT                          (0x2UL<<12)
N#define DEV_ASIn_CFG_DAT_FMT_LOW_24BIT                          (0x3UL<<12)
N#define DEV_ASIn_CFG_DAT_FMT_MASK                               (0x3UL<<12)
N#define DEV_ASIn_CFG_VLD_WIDTH_16BIT                            (0x0UL<<10)
N#define DEV_ASIn_CFG_VLD_WIDTH_20BIT                            (0x1UL<<10)
N#define DEV_ASIn_CFG_VLD_WIDTH_24BIT                            (0x2UL<<10)
N#define DEV_ASIn_CFG_VLD_WIDTH_32BIT                            (0x3UL<<10)
N#define DEV_ASIn_CFG_VLD_WIDTH_MASK                             (0x3UL<<10)
N#define DEV_ASIn_CFG_DSD_CTL_DSD_CTLOFF                         (0x0UL<<9)
N#define DEV_ASIn_CFG_DSD_CTL_DSD_CTLON                          (0x1UL<<9)
N#define DEV_ASIn_CFG_DSD_CTL_MASK                               (0x1UL<<9)
N#define DEV_ASIn_CFG_CHN_WIDTH_16BCLKCYCLE                      (0x0UL<<8)
N#define DEV_ASIn_CFG_CHN_WIDTH_32BCLKCYCLE                      (0x1UL<<8)
N#define DEV_ASIn_CFG_CHN_WIDTH_MASK                             (0x1UL<<8)
N#define DEV_ASIn_CFG_MASTER_SLAVE_MODE                          (0x0UL<<7)
N#define DEV_ASIn_CFG_MASTER_MASTERMODE                          (0x1UL<<7)
N#define DEV_ASIn_CFG_MASTER_MASK                                (0x1UL<<7)
N#define DEV_ASIn_CFG_CHN_NUM(_channel_number_)                  (((_channel_number_)-1)<<4)
N#define DEV_ASIn_CFG_CHN_NUM_MASK                               (0x7UL<<4)
N#define DEV_ASIn_CFG_FRM_FMT_0BCLK                              (0x0UL<<2)
N#define DEV_ASIn_CFG_FRM_FMT_1BCLK                              (0x1UL<<2)
N#define DEV_ASIn_CFG_FRM_FMT_MASK                               (0x3UL<<2)
N#define DEV_ASIn_CFG_MODE_SEL_I2SMODE                           (0x0UL<<0)
N#define DEV_ASIn_CFG_MODE_SEL_PCMMODE                           (0x1UL<<0)
N#define DEV_ASIn_CFG_MODE_SEL_MASK                              (0x3UL<<0)
N/****ASI_CFG end****/
N
N
N/***********************************ASI_CTL***********************************/
N#define DEV_ASIn_CTL_IO_STA_LOW_LEVEL                           (0x0UL<<16)
N#define DEV_ASIn_CTL_IO_STA_HIGH_LEVEL                          (0x1UL<<16)
N#define DEV_ASIn_CTL_IO_STA_MASK                                (0x3UL<<16)
N#define DEV_ASIn_CTL_Slot7_en_DISABLE                           (0x0UL<<15)
N#define DEV_ASIn_CTL_Slot7_en_ENABLE                            (0x1UL<<15)
N#define DEV_ASIn_CTL_Slot7_en_MASK                              (0x1UL<<15)
N#define DEV_ASIn_CTL_Slot6_en_DISABLE                           (0x0UL<<14)
N#define DEV_ASIn_CTL_Slot6_en_ENABLE                            (0x1UL<<14)
N#define DEV_ASIn_CTL_Slot6_en_MASK                              (0x1UL<<14)
N#define DEV_ASIn_CTL_Slot5_en_DISABLE                           (0x0UL<<13)
N#define DEV_ASIn_CTL_Slot5_en_ENABLE                            (0x1UL<<13)
N#define DEV_ASIn_CTL_Slot5_en_MASK                              (0x1UL<<13)
N#define DEV_ASIn_CTL_Slot4_en_DISABLE                           (0x0UL<<12)
N#define DEV_ASIn_CTL_Slot4_en_ENABLE                            (0x1UL<<12)
N#define DEV_ASIn_CTL_Slot4_en_MASK                              (0x1UL<<12)
N#define DEV_ASIn_CTL_Slot3_en_DISABLE                           (0x0UL<<11)
N#define DEV_ASIn_CTL_Slot3_en_ENABLE                            (0x1UL<<11)
N#define DEV_ASIn_CTL_Slot3_en_MASK                              (0x1UL<<11)
N#define DEV_ASIn_CTL_Slot2_en_DISABLE                           (0x0UL<<10)
N#define DEV_ASIn_CTL_Slot2_en_ENABLE                            (0x1UL<<10)
N#define DEV_ASIn_CTL_Slot2_en_MASK                              (0x1UL<<10)
N#define DEV_ASIn_CTL_Slot1_en_DISABLE                           (0x0UL<<9)
N#define DEV_ASIn_CTL_Slot1_en_ENABLE                            (0x1UL<<9)
N#define DEV_ASIn_CTL_Slot1_en_MASK                              (0x1UL<<9)
N#define DEV_ASIn_CTL_Slot0_en_DISABLE                           (0x0UL<<8)
N#define DEV_ASIn_CTL_Slot0_en_ENABLE                            (0x1UL<<8)
N#define DEV_ASIn_CTL_Slot0_en_MASK                              (0x1UL<<8)
N#define DEV_ASIn_CTL_RX_FIFO_RST_RXFIFOWORK                     (0x0UL<<7)
N#define DEV_ASIn_CTL_RX_FIFO_RST_RXFIFORESET                    (0x1UL<<7)
N#define DEV_ASIn_CTL_RX_FIFO_RST_MASK                           (0x1UL<<7)
N#define DEV_ASIn_CTL_TX_FIFO_RST_TXFIFOWORK                     (0x0UL<<6)
N#define DEV_ASIn_CTL_TX_FIFO_RST_TXFIFORESET                    (0x1UL<<6)
N#define DEV_ASIn_CTL_TX_FIFO_RST_MASK                           (0x1UL<<6)
N#define DEV_ASIn_CTL_RX_SRC_SEL_AHB                             (0x0UL<<5)
N#define DEV_ASIn_CTL_RX_SRC_SEL_SRC                             (0x1UL<<5)
N#define DEV_ASIn_CTL_RX_SRC_SEL_MASK                            (0x1UL<<5)
N#define DEV_ASIn_CTL_TX_SRC_SEL_AHB                             (0x0UL<<4)
N#define DEV_ASIn_CTL_TX_SRC_SEL_SRC                             (0x1UL<<4)
N#define DEV_ASIn_CTL_TX_SRC_SEL_MASK                            (0x1UL<<4)
N#define DEV_ASIn_CTL_RX_DMA_EN_DISABLE                          (0x0UL<<3)
N#define DEV_ASIn_CTL_RX_DMA_EN_ENABLE                           (0x1UL<<3)
N#define DEV_ASIn_CTL_RX_DMA_EN_MASK                             (0x1UL<<3)
N#define DEV_ASIn_CTL_TX_DMA_EN_DISABLE                          (0x0UL<<2)
N#define DEV_ASIn_CTL_TX_DMA_EN_ENABLE                           (0x1UL<<2)
N#define DEV_ASIn_CTL_TX_DMA_EN_MASK                             (0x1UL<<2)
N#define DEV_ASIn_CTL_RX_EN_DISABLE                              (0x0UL<<1)
N#define DEV_ASIn_CTL_RX_EN_ENABLE                               (0x1UL<<1)
N#define DEV_ASIn_CTL_RX_EN_MASK                                 (0x1UL<<1)
N#define DEV_ASIn_CTL_TX_EN_DISABLE                              (0x0UL<<0)
N#define DEV_ASIn_CTL_TX_EN_ENABLE                               (0x1UL<<0)
N#define DEV_ASIn_CTL_TX_EN_MASK                                 (0x1UL<<0)
N/****ASI_CTL end****/
N
N
N/***********************************ASI_IE***********************************/
N#define DEV_ASIn_IE_RX_FIFO_UF                                  (0x1UL<<6)
N#define DEV_ASIn_IE_RX_FIFO_OF                                  (0x1UL<<5)
N#define DEV_ASIn_IE_RX_IRQ                                      (0x1UL<<4)
N#define DEV_ASIn_IE_TX_FIFO_UF                                  (0x1UL<<2)
N#define DEV_ASIn_IE_TX_FIFO_OF                                  (0x1UL<<1)
N#define DEV_ASIn_IE_TX_IRQ                                      (0x1UL<<0)
N/****ASI_IE end****/
N
N
N/***********************************ASI_PD***********************************/
N#define DEV_ASIn_PD_RX_FIFO_UF                                  (0x1UL<<6)
N#define DEV_ASIn_PD_RX_FIFO_OF                                  (0x1UL<<5)
N#define DEV_ASIn_PD_RX_IRQ                                      (0x1UL<<4)
N#define DEV_ASIn_PD_TX_FIFO_UF                                  (0x1UL<<2)
N#define DEV_ASIn_PD_TX_FIFO_OF                                  (0x1UL<<1)
N#define DEV_ASIn_PD_TX_IRQ                                      (0x1UL<<0)
N/****ASI_PD end****/
N
N
N/***********************************ASI_STA***********************************/
N#define DEV_ASIn_STA_RX_BUSY                                    (0x1UL<<28)
N#define DEV_ASIn_STA_RX_FIFO_FULL                               (0x1UL<<27)
N#define DEV_ASIn_STA_RX_FIFO_AFUL                               (0x1UL<<26)
N#define DEV_ASIn_STA_RX_FIFO_EMPT                               (0x1UL<<25)
N#define DEV_ASIn_STA_RX_FIFO_AEMP                               (0x1UL<<24)
N#define DEV_ASIn_STA_RX_FIFO_RLVL_MASK                          (0x3fUL<<16)
N#define DEV_ASIn_STA_TX_BUSY                                    (0x1UL<<12)
N#define DEV_ASIn_STA_TX_FIFO_FULL                               (0x1UL<<11)
N#define DEV_ASIn_STA_TX_FIFO_AFUL                               (0x1UL<<10)
N#define DEV_ASIn_STA_TX_FIFO_EMPT                               (0x1UL<<9)
N#define DEV_ASIn_STA_TX_FIFO_AEMP                               (0x1UL<<8)
N#define DEV_ASIn_STA_TX_FIFO_WLVL_MASK                          (0x3fUL<<0)
N/****ASI_STA end****/
N
N
N/***********************************ASI_TX_CNT***********************************/
N#define DEV_ASIn_TX_CNT_MASK                                    (0xffffffffUL<<0)
N/****ASI_TX_CNT end****/
N
N
N/***********************************ASI_RX_CNT***********************************/
N#define DEV_ASIn_RX_CNT_MASK                                    (0xffffffffUL<<0)
N/****ASI_RX_CNT end****/
N
N
N/***********************************ASI_TX_BUF***********************************/
N#define DEV_ASIn_TX_BUF_TX_DAT_MASK                             (0xffffffffUL<<0)
N/****ASI_TX_BUF end****/
N
N
N/***********************************ASI_RX_BUF***********************************/
N#define DEV_ASIn_RX_BUF_RX_DAT_MASK                             (0xffffffffUL<<0)
N/****ASI_RX_BUF end****/
N
N
N/***********************************DEV_ASIn register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    CFG;                                     /* 0x0    ASI Configure */
X    volatile    uint32_t    CFG;                                      
N            uint32_t    RESERVED0;
N    __IO    uint32_t    CTL;                                     /* 0x8    ASI Control */
X    volatile    uint32_t    CTL;                                      
N    __IO    uint32_t    IE;                                      /* 0xc    ASI Interrupt Enable */
X    volatile    uint32_t    IE;                                       
N    __IO    uint32_t    PD;                                      /* 0x10    ASI Interrupt Pending */
X    volatile    uint32_t    PD;                                       
N    __I     uint32_t    STA;                                     /* 0x14    ASI Status */
X    volatile const     uint32_t    STA;                                      
N    __I     uint32_t    TX_CNT;                                  /* 0x18    ASI TX Frame Counter */
X    volatile const     uint32_t    TX_CNT;                                   
N    __I     uint32_t    RX_CNT;                                  /* 0x1c    ASI RX Frame Counter */
X    volatile const     uint32_t    RX_CNT;                                   
N    __O     uint32_t    TX_BUF;                                  /* 0x20    ASI TX FIFO */
X    volatile     uint32_t    TX_BUF;                                   
N    __I     uint32_t    RX_BUF;                                  /* 0x24    ASI RX FIFO */
X    volatile const     uint32_t    RX_BUF;                                   
N}DEV_ASIn_RegDef;
N/****DEV_ASIn end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 74 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "ir_rx.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\ir_rx.h" 1
N#ifndef __IR_RX_H__
N#define __IR_RX_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************IR_RX_NEC_09MS***********************************/
N#define IR_RX_IR_RX_NEC_09MS_UPPER_CNT_MASK                     (0xffffUL<<16)
N#define IR_RX_IR_RX_NEC_09MS_LOWER_CNT_MASK                     (0xffffUL<<0)
N/****IR_RX_NEC_09MS end****/
N
N
N/***********************************IR_RX_NEC_13MS***********************************/
N#define IR_RX_IR_RX_NEC_13MS_UPPER_CNT_MASK                     (0xffffUL<<16)
N#define IR_RX_IR_RX_NEC_13MS_LOWER_CNT_MASK                     (0xffffUL<<0)
N/****IR_RX_NEC_13MS end****/
N
N
N/***********************************IR_RX_NEC_11MS***********************************/
N#define IR_RX_IR_RX_NEC_11MS_UPPER_CNT_MASK                     (0xffffUL<<16)
N#define IR_RX_IR_RX_NEC_11MS_LOWER_CNT_MASK                     (0xffffUL<<0)
N/****IR_RX_NEC_11MS end****/
N
N
N/***********************************IR_RX_9012_04MS***********************************/
N#define IR_RX_IR_RX_9012_04MS_UPPER_CNT_MASK                    (0xffffUL<<16)
N#define IR_RX_IR_RX_9012_04MS_LOWER_CNT_MASK                    (0xffffUL<<0)
N/****IR_RX_9012_04MS end****/
N
N
N/***********************************IR_RX_9012_09MS***********************************/
N#define IR_RX_IR_RX_9012_09MS_UPPER_CNT_MASK                    (0xffffUL<<16)
N#define IR_RX_IR_RX_9012_09MS_LOWER_CNT_MASK                    (0xffffUL<<0)
N/****IR_RX_9012_09MS end****/
N
N
N/***********************************IR_RX_DATA_P5MS***********************************/
N#define IR_RX_IR_RX_DATA_P5MS_UPPER_CNT_MASK                    (0xffffUL<<16)
N#define IR_RX_IR_RX_DATA_P5MS_LOWER_CNT_MASK                    (0xffffUL<<0)
N/****IR_RX_DATA_P5MS end****/
N
N
N/***********************************IR_RX_DATA_01MS***********************************/
N#define IR_RX_IR_RX_DATA_01MS_UPPER_CNT_MASK                    (0xffffUL<<16)
N#define IR_RX_IR_RX_DATA_01MS_LOWER_CNT_MASK                    (0xffffUL<<0)
N/****IR_RX_DATA_01MS end****/
N
N
N/***********************************IR_RX_DATA_02MS***********************************/
N#define IR_RX_IR_RX_DATA_02MS_UPPER_CNT_MASK                    (0xffffUL<<16)
N#define IR_RX_IR_RX_DATA_02MS_LOWER_CNT_MASK                    (0xffffUL<<0)
N/****IR_RX_DATA_02MS end****/
N
N
N/***********************************IR_RX_CFG***********************************/
N#define IR_RX_IR_RX_CFG_TIME_OUT_NUM_MASK                       (0xffffUL<<16)
N#define IR_RX_IR_RX_CFG_LOOP_BACK_DISABLE                       (0x0UL<<8)
N#define IR_RX_IR_RX_CFG_LOOP_BACK_ENABLE                        (0x1UL<<8)
N#define IR_RX_IR_RX_CFG_LOOP_BACK_MASK                          (0x1UL<<8)
N#define IR_RX_IR_RX_CFG_DEB_WIDTH_MASK                          (0xffUL<<0)
N/****IR_RX_CFG end****/
N
N
N/***********************************IR_RX_CTL***********************************/
N#define IR_RX_IR_RX_CTL_RX_EN                                   (0x1UL<<0)
N/****IR_RX_CTL end****/
N
N
N/***********************************IR_RX_IE***********************************/
N#define IR_RX_IR_RX_IE_DATA_RPT_ERR                             (0x1UL<<7)
N#define IR_RX_IR_RX_IE_HEAD_RPT_ERR                             (0x1UL<<6)
N#define IR_RX_IR_RX_IE_DATA_CMP_ERR                             (0x1UL<<5)
N#define IR_RX_IR_RX_IE_DATA_POS_ERR                             (0x1UL<<4)
N#define IR_RX_IR_RX_IE_DATA_NEG_ERR                             (0x1UL<<3)
N#define IR_RX_IR_RX_IE_HEAD_ERR                                 (0x1UL<<2)
N#define IR_RX_IR_RX_IE_TIME_OUT                                 (0x1UL<<1)
N#define IR_RX_IR_RX_IE_FRAME_END                                (0x1UL<<0)
N/****IR_RX_IE end****/
N
N
N/***********************************IR_RX_PD***********************************/
N#define IR_RX_IR_RX_PD_DATA_RPT_ERR                             (0x1UL<<7)
N#define IR_RX_IR_RX_PD_HEAD_RPT_ERR                             (0x1UL<<6)
N#define IR_RX_IR_RX_PD_DATA_CMP_ERR                             (0x1UL<<5)
N#define IR_RX_IR_RX_PD_DATA_POS_ERR                             (0x1UL<<4)
N#define IR_RX_IR_RX_PD_DATA_NEG_ERR                             (0x1UL<<3)
N#define IR_RX_IR_RX_PD_HEAD_ERR                                 (0x1UL<<2)
N#define IR_RX_IR_RX_PD_TIME_OUT                                 (0x1UL<<1)
N#define IR_RX_IR_RX_PD_FRAME_END                                (0x1UL<<0)
N/****IR_RX_PD end****/
N
N
N/***********************************IR_RX_STA_CNT0***********************************/
N#define IR_RX_IR_RX_STA_CNT0_MASK                               (0xffffUL<<0)
N/****IR_RX_STA_CNT0 end****/
N
N
N/***********************************IR_RX_STA_CNT1***********************************/
N#define IR_RX_IR_RX_STA_CNT1_MASK                               (0xffffUL<<0)
N/****IR_RX_STA_CNT1 end****/
N
N
N/***********************************IR_RX_STA_CNT2***********************************/
N#define IR_RX_IR_RX_STA_CNT2_MASK                               (0xffffUL<<0)
N/****IR_RX_STA_CNT2 end****/
N
N
N/***********************************IR_RX_STA_CNT3***********************************/
N#define IR_RX_IR_RX_STA_CNT3_MASK                               (0xffffUL<<0)
N/****IR_RX_STA_CNT3 end****/
N
N
N/***********************************IR_RX_STA***********************************/
N#define IR_RX_IR_RX_STA_RX_9012_RPT                             (0x1UL<<3)
N#define IR_RX_IR_RX_STA_RX_9012                                 (0x1UL<<2)
N#define IR_RX_IR_RX_STA_RX_NEC_RPT                              (0x1UL<<1)
N#define IR_RX_IR_RX_STA_RX_NEC                                  (0x1UL<<0)
N/****IR_RX_STA end****/
N
N
N/***********************************IR_RX_DAT***********************************/
N#define IR_RX_IR_RX_DAT_IR_CMD_MASK                             (0xffUL<<8)
N#define IR_RX_IR_RX_DAT_IR_DAT_MASK                             (0xffUL<<0)
N/****IR_RX_DAT end****/
N
N
N/***********************************IR_RX register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    IR_RX_NEC_09MS;                          /* 0x0    IR Rx NEC 09ms Count Register */
X    volatile    uint32_t    IR_RX_NEC_09MS;                           
N    __IO    uint32_t    IR_RX_NEC_13MS;                          /* 0x4    IR Rx NEC 13.5ms Count Register */
X    volatile    uint32_t    IR_RX_NEC_13MS;                           
N    __IO    uint32_t    IR_RX_NEC_11MS;                          /* 0x8    IR Rx NEC 11.25ms Count Register(Repeat) */
X    volatile    uint32_t    IR_RX_NEC_11MS;                           
N    __IO    uint32_t    IR_RX_9012_04MS;                         /* 0xc    IR Rx 9012 04ms Count Register */
X    volatile    uint32_t    IR_RX_9012_04MS;                          
N    __IO    uint32_t    IR_RX_9012_09MS;                         /* 0x10    IR Rx 9012 09ms Count Register */
X    volatile    uint32_t    IR_RX_9012_09MS;                          
N    __IO    uint32_t    IR_RX_DATA_P5MS;                         /* 0x14    IR Rx Data 0.5625ms Count Register */
X    volatile    uint32_t    IR_RX_DATA_P5MS;                          
N    __IO    uint32_t    IR_RX_DATA_01MS;                         /* 0x18    IR Rx Data 1.1250ms Count Register */
X    volatile    uint32_t    IR_RX_DATA_01MS;                          
N    __IO    uint32_t    IR_RX_DATA_02MS;                         /* 0x1c    IR Rx Data 2.2500ms Count Register */
X    volatile    uint32_t    IR_RX_DATA_02MS;                          
N    __IO    uint32_t    IR_RX_CFG;                               /* 0x20    IR Rx Configure Register */
X    volatile    uint32_t    IR_RX_CFG;                                
N    __IO    uint32_t    IR_RX_CTL;                               /* 0x24    IR Rx Control Register */
X    volatile    uint32_t    IR_RX_CTL;                                
N    __IO    uint32_t    IR_RX_IE;                                /* 0x28    IR Rx Interrupt Enable Register */
X    volatile    uint32_t    IR_RX_IE;                                 
N    __IO    uint32_t    IR_RX_PD;                                /* 0x2c    IR Rx Interrupt Pending Register */
X    volatile    uint32_t    IR_RX_PD;                                 
N    __I     uint32_t    IR_RX_STA_CNT0;                          /* 0x30    IR RX Status CNT0 Register */
X    volatile const     uint32_t    IR_RX_STA_CNT0;                           
N    __I     uint32_t    IR_RX_STA_CNT1;                          /* 0x34    IR RX Status CNT1 Register */
X    volatile const     uint32_t    IR_RX_STA_CNT1;                           
N    __I     uint32_t    IR_RX_STA_CNT2;                          /* 0x38    IR RX Status CNT2 Register */
X    volatile const     uint32_t    IR_RX_STA_CNT2;                           
N    __I     uint32_t    IR_RX_STA_CNT3;                          /* 0x3c    IR RX Status CNT3 Register */
X    volatile const     uint32_t    IR_RX_STA_CNT3;                           
N            uint32_t    RESERVED0[4];
N    __I     uint32_t    IR_RX_STA;                               /* 0x50    IR Rx Status Register */
X    volatile const     uint32_t    IR_RX_STA;                                
N    __I     uint32_t    IR_RX_DAT;                               /* 0x54    IR Rx Data Register */
X    volatile const     uint32_t    IR_RX_DAT;                                
N}IR_RX_RegDef;
N/****IR_RX end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 75 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_adc.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_adc.h" 1
N#ifndef __DEV_ADC_H__
N#define __DEV_ADC_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************ADC_CHNn_CFG***********************************/
N#define DEV_ADC_CHNn_CFG_MIX_GAIN_1                             (0x0UL<<30)
N#define DEV_ADC_CHNn_CFG_MIX_GAIN_1_2                           (0x1UL<<30)
N#define DEV_ADC_CHNn_CFG_MIX_GAIN_MASK                          (0x1UL<<30)
N#define DEV_ADC_CHNn_CFG_MIX_SRC_SEL_DISABLE                    (0x0UL<<28)
N#define DEV_ADC_CHNn_CFG_MIX_SRC_SEL_ENABLE                     (0x1UL<<28)
N#define DEV_ADC_CHNn_CFG_MIX_SRC_SEL_MASK                       (0x3UL<<28)
N#define DEV_ADC_CHNn_CFG_DMIC_PIN_SEL_CHN0_1MIXCHN2_3MIX        (0x0UL<<27)
N#define DEV_ADC_CHNn_CFG_DMIC_PIN_SEL_INDIVIDUAL                (0x1UL<<27)
N#define DEV_ADC_CHNn_CFG_DMIC_PIN_SEL_MASK                      (0x1UL<<27)
N#define DEV_ADC_CHNn_CFG_DMIC_CLK_DIV_2                         (0x0UL<<24)
N#define DEV_ADC_CHNn_CFG_DMIC_CLK_DIV_4                         (0x1UL<<24)
N#define DEV_ADC_CHNn_CFG_DMIC_CLK_DIV_6                         (0x2UL<<24)
N#define DEV_ADC_CHNn_CFG_DMIC_CLK_DIV_8                         (0x3UL<<24)
N#define DEV_ADC_CHNn_CFG_DMIC_CLK_DIV_12                        (0x4UL<<24)
N#define DEV_ADC_CHNn_CFG_DMIC_CLK_DIV_16                        (0x5UL<<24)
N#define DEV_ADC_CHNn_CFG_DMIC_CLK_DIV_MASK                      (0x7UL<<24)
N#define DEV_ADC_CHNn_CFG_DMIC_DLY_SEL_NODELAY                   (0x0UL<<22)
N#define DEV_ADC_CHNn_CFG_DMIC_DLY_SEL_1CYCLESOF24MHOSC          (0x1UL<<22)
N#define DEV_ADC_CHNn_CFG_DMIC_DLY_SEL_2CYCLESOF24MHOSC          (0x2UL<<22)
N#define DEV_ADC_CHNn_CFG_DMIC_DLY_SEL_3CYCLESOF24MHOSC          (0x3UL<<22)
N#define DEV_ADC_CHNn_CFG_DMIC_DLY_SEL_MASK                      (0x3UL<<22)
N#define DEV_ADC_CHNn_CFG_CIC_CLK_PHASE_POSITIVE                 (0x0UL<<21)
N#define DEV_ADC_CHNn_CFG_CIC_CLK_PHASE_NEGTIVE                  (0x1UL<<21)
N#define DEV_ADC_CHNn_CFG_CIC_CLK_PHASE_MASK                     (0x1UL<<21)
N#define DEV_ADC_CHNn_CFG_HPF_COEF_1_16                          (0x0UL<<17)
N#define DEV_ADC_CHNn_CFG_HPF_COEF_1_32                          (0x1UL<<17)
N#define DEV_ADC_CHNn_CFG_HPF_COEF_1_64                          (0x2UL<<17)
N#define DEV_ADC_CHNn_CFG_HPF_COEF_1_128                         (0x3UL<<17)
N#define DEV_ADC_CHNn_CFG_HPF_COEF_1_256                         (0x4UL<<17)
N#define DEV_ADC_CHNn_CFG_HPF_COEF_1_512                         (0x5UL<<17)
N#define DEV_ADC_CHNn_CFG_HPF_COEF_1_1024                        (0x6UL<<17)
N#define DEV_ADC_CHNn_CFG_HPF_COEF_1_2048                        (0x7UL<<17)
N#define DEV_ADC_CHNn_CFG_HPF_COEF_MASK                          (0x7UL<<17)
N#define DEV_ADC_CHNn_CFG_HPF_EN_DISABLE                         (0x0UL<<16)
N#define DEV_ADC_CHNn_CFG_HPF_EN_ENABLE                          (0x1UL<<16)
N#define DEV_ADC_CHNn_CFG_HPF_EN_MASK                            (0x1UL<<16)
N#define DEV_ADC_CHNn_CFG_VOL_16X                                (0x0UL<<12)
N#define DEV_ADC_CHNn_CFG_VOL_8X                                 (0x1UL<<12)
N#define DEV_ADC_CHNn_CFG_VOL_4X                                 (0x2UL<<12)
N#define DEV_ADC_CHNn_CFG_VOL_2X                                 (0x3UL<<12)
N#define DEV_ADC_CHNn_CFG_VOL_1X                                 (0x4UL<<12)
N#define DEV_ADC_CHNn_CFG_VOL_1_2X                               (0x5UL<<12)
N#define DEV_ADC_CHNn_CFG_VOL_1_4X                               (0x6UL<<12)
N#define DEV_ADC_CHNn_CFG_VOL_1_8X                               (0x7UL<<12)
N#define DEV_ADC_CHNn_CFG_VOL_1_16X                              (0x8UL<<12)
N#define DEV_ADC_CHNn_CFG_VOL_MASK                               (0xfUL<<12)
N#define DEV_ADC_CHNn_CFG_FIR_CLK_DIV_1                          (0x0UL<<9)
N#define DEV_ADC_CHNn_CFG_FIR_CLK_DIV_2                          (0x1UL<<9)
N#define DEV_ADC_CHNn_CFG_FIR_CLK_DIV_4                          (0x2UL<<9)
N#define DEV_ADC_CHNn_CFG_FIR_CLK_DIV_6                          (0x3UL<<9)
N#define DEV_ADC_CHNn_CFG_FIR_CLK_DIV_8                          (0x4UL<<9)
N#define DEV_ADC_CHNn_CFG_FIR_CLK_DIV_12                         (0x5UL<<9)
N#define DEV_ADC_CHNn_CFG_FIR_CLK_DIV_16                         (0x6UL<<9)
N#define DEV_ADC_CHNn_CFG_FIR_CLK_DIV_24                         (0x7UL<<9)
N#define DEV_ADC_CHNn_CFG_FIR_CLK_DIV_MASK                       (0x7UL<<9)
N#define DEV_ADC_CHNn_CFG_FIR_CLK_SEL_DEBUGINCLOCK               (0x0UL<<8)
N#define DEV_ADC_CHNn_CFG_FIR_CLK_SEL_DACCLOCK                   (0x1UL<<8)
N#define DEV_ADC_CHNn_CFG_FIR_CLK_SEL_MASK                       (0x1UL<<8)
N#define DEV_ADC_CHNn_CFG_CIC_CLK_DIV_256FS_2_128FS              (0x0UL<<6)
N#define DEV_ADC_CHNn_CFG_CIC_CLK_DIV_256FS_4__64FS              (0x1UL<<6)
N#define DEV_ADC_CHNn_CFG_CIC_CLK_DIV_256FS_8__32FS              (0x2UL<<6)
N#define DEV_ADC_CHNn_CFG_CIC_CLK_DIV_MASK                       (0x3UL<<6)
N#define DEV_ADC_CHNn_CFG_CIC_DAT_SEL_DEBUGINDATA                (0x0UL<<5)
N#define DEV_ADC_CHNn_CFG_CIC_DAT_SEL_DACSDMDATA                 (0x1UL<<5)
N#define DEV_ADC_CHNn_CFG_CIC_DAT_SEL_MASK                       (0x1UL<<5)
N#define DEV_ADC_CHNn_CFG_CIC_CLK_SEL_DEBUGINCLOCK               (0x0UL<<4)
N#define DEV_ADC_CHNn_CFG_CIC_CLK_SEL_DACCLOCK                   (0x1UL<<4)
N#define DEV_ADC_CHNn_CFG_CIC_CLK_SEL_MASK                       (0x1UL<<4)
N#define DEV_ADC_CHNn_CFG_CIC_SEL_32XDECIMATION                  (0x0UL<<2)
N#define DEV_ADC_CHNn_CFG_CIC_SEL_16XDECIMATION                  (0x1UL<<2)
N#define DEV_ADC_CHNn_CFG_CIC_SEL_08XDECIMATION                  (0x2UL<<2)
N#define DEV_ADC_CHNn_CFG_CIC_SEL_04XDECIMATION                  (0x3UL<<2)
N#define DEV_ADC_CHNn_CFG_CIC_SEL_MASK                           (0x3UL<<2)
N#define DEV_ADC_CHNn_CFG_MODE_SEL_ADC                           (0x0UL<<1)
N#define DEV_ADC_CHNn_CFG_MODE_SEL_DMIC                          (0x1UL<<1)
N#define DEV_ADC_CHNn_CFG_MODE_SEL_MASK                          (0x1UL<<1)
N#define DEV_ADC_CHNn_CFG_CHN_EN_DISABLE                         (0x0UL<<0)
N#define DEV_ADC_CHNn_CFG_CHN_EN_ENABLE                          (0x1UL<<0)
N#define DEV_ADC_CHNn_CFG_CHN_EN_MASK                            (0x1UL<<0)
N/****ADC_CHNn_CFG end****/
N
N
N/***********************************ADC_CFG***********************************/
N#define DEV_ADC_CFG_FIFO_DAT_SEL_DISABLE                        (0x0UL<<24)
N#define DEV_ADC_CFG_FIFO_DAT_SEL_ENABLE                         (0x1UL<<24)
N#define DEV_ADC_CFG_FIFO_DAT_SEL_CHANNEL0                       (0x18UL<<24)
N#define DEV_ADC_CFG_FIFO_DAT_SEL_CHANNEL1                       (0x19UL<<24)
N#define DEV_ADC_CFG_FIFO_DAT_SEL_CHANNEL2                       (0x1aUL<<24)
N#define DEV_ADC_CFG_FIFO_DAT_SEL_CHANNEL3                       (0x1bUL<<24)
N#define DEV_ADC_CFG_FIFO_DAT_SEL_MASK                           (0xfUL<<24)
N#define DEV_ADC_CFG_FIFO_CLK_SEL_CHANNEL0CLOCK                  (0x0UL<<20)
N#define DEV_ADC_CFG_FIFO_CLK_SEL_CHANNEL1CLOCK                  (0x1UL<<20)
N#define DEV_ADC_CFG_FIFO_CLK_SEL_CHANNEL2CLOCK                  (0x2UL<<20)
N#define DEV_ADC_CFG_FIFO_CLK_SEL_CHANNEL3CLOCK                  (0x3UL<<20)
N#define DEV_ADC_CFG_FIFO_CLK_SEL_MASK                           (0x3UL<<20)
N#define DEV_ADC_CFG_DBG_CHN_SEL_CHANNEL0                        (0x0UL<<18)
N#define DEV_ADC_CFG_DBG_CHN_SEL_CHANNEL1                        (0x1UL<<18)
N#define DEV_ADC_CFG_DBG_CHN_SEL_CHANNEL2                        (0x2UL<<18)
N#define DEV_ADC_CFG_DBG_CHN_SEL_CHANNEL3                        (0x3UL<<18)
N#define DEV_ADC_CFG_DBG_CHN_SEL_MASK                            (0x3UL<<18)
N#define DEV_ADC_CFG_DBG_OUT_EN_DISABLE                          (0x0UL<<17)
N#define DEV_ADC_CFG_DBG_OUT_EN_ENABLE                           (0x1UL<<17)
N#define DEV_ADC_CFG_DBG_OUT_EN_MASK                             (0x1UL<<17)
N#define DEV_ADC_CFG_DBG_IN_EN_DISABLE                           (0x0UL<<16)
N#define DEV_ADC_CFG_DBG_IN_EN_ENABLE                            (0x1UL<<16)
N#define DEV_ADC_CFG_DBG_IN_EN_MASK                              (0x1UL<<16)
N#define DEV_ADC_CFG_HFUL_TH_MASK                                (0x3fUL<<8)
N#define DEV_ADC_CFG_ADC_WIDTH_24BIT                             (0x0UL<<6)
N#define DEV_ADC_CFG_ADC_WIDTH_16BIT                             (0x1UL<<6)
N#define DEV_ADC_CFG_ADC_WIDTH_MASK                              (0x1UL<<6)
N/****ADC_CFG end****/
N
N
N/***********************************ADC_CTL***********************************/
N#define DEV_ADC_CTL_RX_FIFO_RST_RXFIFOWORK                      (0x0UL<<3)
N#define DEV_ADC_CTL_RX_FIFO_RST_RXFIFORESET                     (0x1UL<<3)
N#define DEV_ADC_CTL_RX_FIFO_RST_MASK                            (0x1UL<<3)
N#define DEV_ADC_CTL_SRC_SEL_AHBINTERFACE                        (0x0UL<<2)
N#define DEV_ADC_CTL_SRC_SEL_SRCINTERFACE                        (0x1UL<<2)
N#define DEV_ADC_CTL_SRC_SEL_MASK                                (0x1UL<<2)
N#define DEV_ADC_CTL_DMA_EN_DISABLE                              (0x0UL<<1)
N#define DEV_ADC_CTL_DMA_EN_ENABLE                               (0x1UL<<1)
N#define DEV_ADC_CTL_DMA_EN_MASK                                 (0x1UL<<1)
N#define DEV_ADC_CTL_ADC_EN_DISABLE                              (0x0UL<<0)
N#define DEV_ADC_CTL_ADC_EN_ENABLE                               (0x1UL<<0)
N#define DEV_ADC_CTL_ADC_EN_MASK                                 (0x1UL<<0)
N/****ADC_CTL end****/
N
N
N/***********************************ADC_IE***********************************/
N#define DEV_ADC_IE_RX_FIFO_UF                                   (0x1UL<<2)
N#define DEV_ADC_IE_RX_FIFO_OF                                   (0x1UL<<1)
N#define DEV_ADC_IE_RX_IRQ                                       (0x1UL<<0)
N/****ADC_IE end****/
N
N
N/***********************************ADC_PD***********************************/
N#define DEV_ADC_PD_RX_FIFO_UF                                   (0x1UL<<2)
N#define DEV_ADC_PD_RX_FIFO_OF                                   (0x1UL<<1)
N#define DEV_ADC_PD_RX_IRQ                                       (0x1UL<<0)
N/****ADC_PD end****/
N
N
N/***********************************ADC_STA***********************************/
N#define DEV_ADC_STA_RX_FIFO_FULL                                (0x1UL<<11)
N#define DEV_ADC_STA_RX_FIFO_HFUL                                (0x1UL<<10)
N#define DEV_ADC_STA_RX_FIFO_EMPT                                (0x1UL<<9)
N#define DEV_ADC_STA_RX_FIFO_HEMP                                (0x1UL<<8)
N#define DEV_ADC_STA_RX_FIFO_RLVL_MASK                           (0x3fUL<<0)
N/****ADC_STA end****/
N
N
N/***********************************ADC_RBUF***********************************/
N#define DEV_ADC_RBUF_MASK                                       (0xffffffUL<<8)
N/****ADC_RBUF end****/
N
N
N/***********************************ADC_GAIN_CFG***********************************/
N#define DEV_ADC_GAIN_CFG_Target_level_0DB                       (0x0UL<<24)
N#define DEV_ADC_GAIN_CFG_Target_level_1DB                       (0x1UL<<24)
N#define DEV_ADC_GAIN_CFG_Target_level_2DB                       (0x2UL<<24)
N#define DEV_ADC_GAIN_CFG_Target_level_MASK                      (0xffUL<<24)
N#define DEV_ADC_GAIN_CFG_Noise_level_0DB                        (0x0UL<<16)
N#define DEV_ADC_GAIN_CFG_Noise_level_1DB                        (0x1UL<<16)
N#define DEV_ADC_GAIN_CFG_Noise_level_2DB                        (0x2UL<<16)
N#define DEV_ADC_GAIN_CFG_Noise_level_MASK                       (0xffUL<<16)
N#define DEV_ADC_GAIN_CFG_Max_gain_0DB                           (0x0UL<<8)
N#define DEV_ADC_GAIN_CFG_Max_gain_1DB                           (0x1UL<<8)
N#define DEV_ADC_GAIN_CFG_Max_gain_2DB                           (0x2UL<<8)
N#define DEV_ADC_GAIN_CFG_Max_gain_MASK                          (0xfUL<<8)
N#define DEV_ADC_GAIN_CFG_Min_gain_0DB                           (0x0UL<<4)
N#define DEV_ADC_GAIN_CFG_Min_gain_1DB                           (0x1UL<<4)
N#define DEV_ADC_GAIN_CFG_Min_gain_2DB                           (0x2UL<<4)
N#define DEV_ADC_GAIN_CFG_Min_gain_MASK                          (0xfUL<<4)
N#define DEV_ADC_GAIN_CFG_Hysteresis_0DB                         (0x0UL<<2)
N#define DEV_ADC_GAIN_CFG_Hysteresis_1DB                         (0x1UL<<2)
N#define DEV_ADC_GAIN_CFG_Hysteresis_2DB                         (0x2UL<<2)
N#define DEV_ADC_GAIN_CFG_Hysteresis_3DB                         (0x3UL<<2)
N#define DEV_ADC_GAIN_CFG_Hysteresis_MASK                        (0x3UL<<2)
N#define DEV_ADC_GAIN_CFG_NOISE_GATE_EN_DISABLE                  (0x0UL<<1)
N#define DEV_ADC_GAIN_CFG_NOISE_GATE_EN_ENABLE                   (0x1UL<<1)
N#define DEV_ADC_GAIN_CFG_NOISE_GATE_EN_MASK                     (0x1UL<<1)
N#define DEV_ADC_GAIN_CFG_AGC_EN_DISABLE                         (0x0UL<<0)
N#define DEV_ADC_GAIN_CFG_AGC_EN_ENABLE                          (0x1UL<<0)
N#define DEV_ADC_GAIN_CFG_AGC_EN_MASK                            (0x1UL<<0)
N/****ADC_GAIN_CFG end****/
N
N
N/***********************************ADC_PEAK_AT***********************************/
N#define DEV_ADC_PEAK_AT_ATTACK_TIME_MASK                        (0xffffffffUL<<0)
N/****ADC_PEAK_AT end****/
N
N
N/***********************************ADC_PEAK_RT***********************************/
N#define DEV_ADC_PEAK_RT_RELEASE_TIME_MASK                       (0xffffffffUL<<0)
N/****ADC_PEAK_RT end****/
N
N
N/***********************************ADC_GAIN_AT***********************************/
N#define DEV_ADC_GAIN_AT_ATTACK_TIME_MASK                        (0xffffffffUL<<0)
N/****ADC_GAIN_AT end****/
N
N
N/***********************************ADC_GAIN_RT***********************************/
N#define DEV_ADC_GAIN_RT_RELEASE_TIME_MASK                       (0xffffffffUL<<0)
N/****ADC_GAIN_RT end****/
N
N
N/***********************************ADC_BIST_EN***********************************/
N#define DEV_ADC_BIST_EN_CHN3_BIST_LS_DISABLE                    (0x0UL<<11)
N#define DEV_ADC_BIST_EN_CHN3_BIST_LS_ENABLE                     (0x1UL<<11)
N#define DEV_ADC_BIST_EN_CHN3_BIST_LS_MASK                       (0x1UL<<11)
N#define DEV_ADC_BIST_EN_CHN2_BIST_LS_DISABLE                    (0x0UL<<10)
N#define DEV_ADC_BIST_EN_CHN2_BIST_LS_ENABLE                     (0x1UL<<10)
N#define DEV_ADC_BIST_EN_CHN2_BIST_LS_MASK                       (0x1UL<<10)
N#define DEV_ADC_BIST_EN_CHN1_BIST_LS_DISABLE                    (0x0UL<<9)
N#define DEV_ADC_BIST_EN_CHN1_BIST_LS_ENABLE                     (0x1UL<<9)
N#define DEV_ADC_BIST_EN_CHN1_BIST_LS_MASK                       (0x1UL<<9)
N#define DEV_ADC_BIST_EN_CHN0_BIST_LS_DISABLE                    (0x0UL<<8)
N#define DEV_ADC_BIST_EN_CHN0_BIST_LS_ENABLE                     (0x1UL<<8)
N#define DEV_ADC_BIST_EN_CHN0_BIST_LS_MASK                       (0x1UL<<8)
N#define DEV_ADC_BIST_EN_CHN3_BIST_RME_DISABLE                   (0x0UL<<7)
N#define DEV_ADC_BIST_EN_CHN3_BIST_RME_ENABLE                    (0x1UL<<7)
N#define DEV_ADC_BIST_EN_CHN3_BIST_RME_MASK                      (0x1UL<<7)
N#define DEV_ADC_BIST_EN_CHN2_BIST_RME_DISABLE                   (0x0UL<<6)
N#define DEV_ADC_BIST_EN_CHN2_BIST_RME_ENABLE                    (0x1UL<<6)
N#define DEV_ADC_BIST_EN_CHN2_BIST_RME_MASK                      (0x1UL<<6)
N#define DEV_ADC_BIST_EN_CHN1_BIST_RME_DISABLE                   (0x0UL<<5)
N#define DEV_ADC_BIST_EN_CHN1_BIST_RME_ENABLE                    (0x1UL<<5)
N#define DEV_ADC_BIST_EN_CHN1_BIST_RME_MASK                      (0x1UL<<5)
N#define DEV_ADC_BIST_EN_CHN0_BIST_RME_DISABLE                   (0x0UL<<4)
N#define DEV_ADC_BIST_EN_CHN0_BIST_RME_ENABLE                    (0x1UL<<4)
N#define DEV_ADC_BIST_EN_CHN0_BIST_RME_MASK                      (0x1UL<<4)
N#define DEV_ADC_BIST_EN_CHN3_BIST_EN_DISABLE                    (0x0UL<<3)
N#define DEV_ADC_BIST_EN_CHN3_BIST_EN_ENABLE                     (0x1UL<<3)
N#define DEV_ADC_BIST_EN_CHN3_BIST_EN_MASK                       (0x1UL<<3)
N#define DEV_ADC_BIST_EN_CHN2_BIST_EN_DISABLE                    (0x0UL<<2)
N#define DEV_ADC_BIST_EN_CHN2_BIST_EN_ENABLE                     (0x1UL<<2)
N#define DEV_ADC_BIST_EN_CHN2_BIST_EN_MASK                       (0x1UL<<2)
N#define DEV_ADC_BIST_EN_CHN1_BIST_EN_DISABLE                    (0x0UL<<1)
N#define DEV_ADC_BIST_EN_CHN1_BIST_EN_ENABLE                     (0x1UL<<1)
N#define DEV_ADC_BIST_EN_CHN1_BIST_EN_MASK                       (0x1UL<<1)
N#define DEV_ADC_BIST_EN_CHN0_BIST_EN_DISABLE                    (0x0UL<<0)
N#define DEV_ADC_BIST_EN_CHN0_BIST_EN_ENABLE                     (0x1UL<<0)
N#define DEV_ADC_BIST_EN_CHN0_BIST_EN_MASK                       (0x1UL<<0)
N/****ADC_BIST_EN end****/
N
N
N/***********************************ADC_BIST_RM***********************************/
N#define DEV_ADC_BIST_RM_CHN3_RAM_RM_MASK                        (0xfUL<<12)
N#define DEV_ADC_BIST_RM_CHN2_RAM_RM_MASK                        (0xfUL<<8)
N#define DEV_ADC_BIST_RM_CHN1_RAM_RM_MASK                        (0xfUL<<4)
N#define DEV_ADC_BIST_RM_CHN0_RAM_RM_MASK                        (0xfUL<<0)
N/****ADC_BIST_RM end****/
N
N
N/***********************************ADC_BIST_DONE***********************************/
N#define DEV_ADC_BIST_DONE_CHN3_RAM_DONE                         (0x1UL<<3)
N#define DEV_ADC_BIST_DONE_CHN2_RAM_DONE                         (0x1UL<<2)
N#define DEV_ADC_BIST_DONE_CHN1_RAM_DONE                         (0x1UL<<1)
N#define DEV_ADC_BIST_DONE_CHN0_RAM_DONE                         (0x1UL<<0)
N/****ADC_BIST_DONE end****/
N
N
N/***********************************ADC_BIST_FAIL***********************************/
N#define DEV_ADC_BIST_FAIL_CHN3_RAM_FAIL                         (0x1UL<<3)
N#define DEV_ADC_BIST_FAIL_CHN2_RAM_FAIL                         (0x1UL<<2)
N#define DEV_ADC_BIST_FAIL_CHN1_RAM_FAIL                         (0x1UL<<1)
N#define DEV_ADC_BIST_FAIL_CHN0_RAM_FAIL                         (0x1UL<<0)
N/****ADC_BIST_FAIL end****/
N
N
N/***********************************ADC_MIC_CTRL0***********************************/
N#define DEV_ADC_MIC_CTRL0_MIC3_GAIN_MASK                        (0x7UL<<28)
N#define DEV_ADC_MIC_CTRL0_MIC3_MODE_MIC_MIX                     (0x0UL<<26)
N#define DEV_ADC_MIC_CTRL0_MIC3_MODE_SINGLE_N                    (0x1UL<<26)
N#define DEV_ADC_MIC_CTRL0_MIC3_MODE_SINGLE_P                    (0x2UL<<26)
N#define DEV_ADC_MIC_CTRL0_MIC3_MODE_DIFFERENT                   (0x3UL<<26)
N#define DEV_ADC_MIC_CTRL0_MIC3_MODE_MASK                        (0x3UL<<26)
N#define DEV_ADC_MIC_CTRL0_MIC3_EN_DISABLE                       (0x0UL<<24)
N#define DEV_ADC_MIC_CTRL0_MIC3_EN_ENABLE                        (0x1UL<<24)
N#define DEV_ADC_MIC_CTRL0_MIC3_EN_MASK                          (0x1UL<<24)
N#define DEV_ADC_MIC_CTRL0_MIC2_GAIN_MASK                        (0x7UL<<20)
N#define DEV_ADC_MIC_CTRL0_MIC2_MODE_MIC_MIX                     (0x0UL<<18)
N#define DEV_ADC_MIC_CTRL0_MIC2_MODE_SINGLE_N                    (0x1UL<<18)
N#define DEV_ADC_MIC_CTRL0_MIC2_MODE_SINGLE_P                    (0x2UL<<18)
N#define DEV_ADC_MIC_CTRL0_MIC2_MODE_DIFFERENT                   (0x3UL<<18)
N#define DEV_ADC_MIC_CTRL0_MIC2_MODE_MASK                        (0x3UL<<18)
N#define DEV_ADC_MIC_CTRL0_MIC2_EN_DISABLE                       (0x0UL<<16)
N#define DEV_ADC_MIC_CTRL0_MIC2_EN_ENABLE                        (0x1UL<<16)
N#define DEV_ADC_MIC_CTRL0_MIC2_EN_MASK                          (0x1UL<<16)
N#define DEV_ADC_MIC_CTRL0_MIC1_GAIN_MASK                        (0x7UL<<12)
N#define DEV_ADC_MIC_CTRL0_MIC1_MODE_MIC_MIX                     (0x0UL<<10)
N#define DEV_ADC_MIC_CTRL0_MIC1_MODE_SINGLE_N                    (0x1UL<<10)
N#define DEV_ADC_MIC_CTRL0_MIC1_MODE_SINGLE_P                    (0x2UL<<10)
N#define DEV_ADC_MIC_CTRL0_MIC1_MODE_DIFFERENT                   (0x3UL<<10)
N#define DEV_ADC_MIC_CTRL0_MIC1_MODE_MASK                        (0x3UL<<10)
N#define DEV_ADC_MIC_CTRL0_MIC1_EN_DISABLE                       (0x0UL<<8)
N#define DEV_ADC_MIC_CTRL0_MIC1_EN_ENABLE                        (0x1UL<<8)
N#define DEV_ADC_MIC_CTRL0_MIC1_EN_MASK                          (0x1UL<<8)
N#define DEV_ADC_MIC_CTRL0_MIC0_GAIN_MASK                        (0x7UL<<4)
N#define DEV_ADC_MIC_CTRL0_MIC0_MODE_MIC_MIX                     (0x0UL<<2)
N#define DEV_ADC_MIC_CTRL0_MIC0_MODE_SINGLE_N                    (0x1UL<<2)
N#define DEV_ADC_MIC_CTRL0_MIC0_MODE_SINGLE_P                    (0x2UL<<2)
N#define DEV_ADC_MIC_CTRL0_MIC0_MODE_DIFFERENT                   (0x3UL<<2)
N#define DEV_ADC_MIC_CTRL0_MIC0_MODE_MASK                        (0x3UL<<2)
N#define DEV_ADC_MIC_CTRL0_MIC0_EN_DISABLE                       (0x0UL<<0)
N#define DEV_ADC_MIC_CTRL0_MIC0_EN_ENABLE                        (0x1UL<<0)
N#define DEV_ADC_MIC_CTRL0_MIC0_EN_MASK                          (0x1UL<<0)
N/****ADC_MIC_CTRL0 end****/
N
N
N/***********************************ADC_MIC_CTRL1***********************************/
N#define DEV_ADC_MIC_CTRL1_MIC_CAP_CHG_DISABLE                   (0x0UL<<8)
N#define DEV_ADC_MIC_CTRL1_MIC_CAP_CHG_ENABLE                    (0x1UL<<8)
N#define DEV_ADC_MIC_CTRL1_MIC_CAP_CHG_MASK                      (0x1UL<<8)
N#define DEV_ADC_MIC_CTRL1_MIC_MIX_BYP_EN_MIX                    (0x0UL<<7)
N#define DEV_ADC_MIC_CTRL1_MIC_MIX_BYP_EN_MIXBYPASS              (0x1UL<<7)
N#define DEV_ADC_MIC_CTRL1_MIC_MIX_BYP_EN_MASK                   (0x1UL<<7)
N#define DEV_ADC_MIC_CTRL1_MIC_BYP_EN_MIC                        (0x0UL<<6)
N#define DEV_ADC_MIC_CTRL1_MIC_BYP_EN_MICBYPASS                  (0x1UL<<6)
N#define DEV_ADC_MIC_CTRL1_MIC_BYP_EN_MASK                       (0x1UL<<6)
N#define DEV_ADC_MIC_CTRL1_MIC_IBIAS_CTRL_5UA                    (0x0UL<<4)
N#define DEV_ADC_MIC_CTRL1_MIC_IBIAS_CTRL_10UA                   (0x1UL<<4)
N#define DEV_ADC_MIC_CTRL1_MIC_IBIAS_CTRL_15UA                   (0x2UL<<4)
N#define DEV_ADC_MIC_CTRL1_MIC_IBIAS_CTRL_2_5UA                  (0x3UL<<4)
N#define DEV_ADC_MIC_CTRL1_MIC_IBIAS_CTRL_MASK                   (0x3UL<<4)
N#define DEV_ADC_MIC_CTRL1_MIC_PD_STUP_ENABLESTARTUP             (0x0UL<<3)
N#define DEV_ADC_MIC_CTRL1_MIC_PD_STUP_POWERDOWNSTARTUP          (0x1UL<<3)
N#define DEV_ADC_MIC_CTRL1_MIC_PD_STUP_MASK                      (0x1UL<<3)
N#define DEV_ADC_MIC_CTRL1_MIC_VCMI_SEL_SELECTVCM                (0x0UL<<2)
N#define DEV_ADC_MIC_CTRL1_MIC_VCMI_SEL_SELECTVREF_VMIC          (0x1UL<<2)
N#define DEV_ADC_MIC_CTRL1_MIC_VCMI_SEL_MASK                     (0x1UL<<2)
N#define DEV_ADC_MIC_CTRL1_MIC_VCMI_CHOP_EN_ENABLE               (0x1UL<<1)
N#define DEV_ADC_MIC_CTRL1_MIC_VCMI_CHOP_EN_DISABLE              (0x0UL<<1)
N#define DEV_ADC_MIC_CTRL1_MIC_VCMI_CHOP_EN_MASK                 (0x1UL<<1)
N#define DEV_ADC_MIC_CTRL1_MIC_CHOP_EN_ENABLE                    (0x1UL<<0)
N#define DEV_ADC_MIC_CTRL1_MIC_CHOP_EN_DISABLE                   (0x0UL<<0)
N#define DEV_ADC_MIC_CTRL1_MIC_CHOP_EN_MASK                      (0x1UL<<0)
N/****ADC_MIC_CTRL1 end****/
N
N
N/***********************************ADC_MIX_CTRL0***********************************/
N#define DEV_ADC_MIX_CTRL0_MIX1_GAIN_4_5DB                       (0x0UL<<12)
N#define DEV_ADC_MIX_CTRL0_MIX1_GAIN_3DB                         (0x1UL<<12)
N#define DEV_ADC_MIX_CTRL0_MIX1_GAIN_1_5DB                       (0x2UL<<12)
N#define DEV_ADC_MIX_CTRL0_MIX1_GAIN_0DB                         (0x3UL<<12)
N#define DEV_ADC_MIX_CTRL0_MIX1_GAIN_MASK                        (0xfUL<<12)
N#define DEV_ADC_MIX_CTRL0_MIX1_MIC2_EN_ENABLE                   (0x1UL<<11)
N#define DEV_ADC_MIX_CTRL0_MIX1_MIC2_EN_DISABLE                  (0x0UL<<11)
N#define DEV_ADC_MIX_CTRL0_MIX1_MIC2_EN_MASK                     (0x1UL<<11)
N#define DEV_ADC_MIX_CTRL0_MIX1_MIC1_EN_ENABLE                   (0x1UL<<10)
N#define DEV_ADC_MIX_CTRL0_MIX1_MIC1_EN_DISABLE                  (0x0UL<<10)
N#define DEV_ADC_MIX_CTRL0_MIX1_MIC1_EN_MASK                     (0x1UL<<10)
N#define DEV_ADC_MIX_CTRL0_MIX1_MIC0_EN_ENABLE                   (0x1UL<<9)
N#define DEV_ADC_MIX_CTRL0_MIX1_MIC0_EN_DISABLE                  (0x0UL<<9)
N#define DEV_ADC_MIX_CTRL0_MIX1_MIC0_EN_MASK                     (0x1UL<<9)
N#define DEV_ADC_MIX_CTRL0_MIX1_EN_ENABLE                        (0x1UL<<8)
N#define DEV_ADC_MIX_CTRL0_MIX1_EN_DISABLE                       (0x0UL<<8)
N#define DEV_ADC_MIX_CTRL0_MIX1_EN_MASK                          (0x1UL<<8)
N#define DEV_ADC_MIX_CTRL0_MIX0_GAIN_4_5DB                       (0x0UL<<4)
N#define DEV_ADC_MIX_CTRL0_MIX0_GAIN_3DB                         (0x1UL<<4)
N#define DEV_ADC_MIX_CTRL0_MIX0_GAIN_1_5DB                       (0x2UL<<4)
N#define DEV_ADC_MIX_CTRL0_MIX0_GAIN_0DB                         (0x3UL<<4)
N#define DEV_ADC_MIX_CTRL0_MIX0_GAIN_MASK                        (0xfUL<<4)
N#define DEV_ADC_MIX_CTRL0_MIX0_MIC2_EN_ENABLE                   (0x1UL<<3)
N#define DEV_ADC_MIX_CTRL0_MIX0_MIC2_EN_DISABLE                  (0x0UL<<3)
N#define DEV_ADC_MIX_CTRL0_MIX0_MIC2_EN_MASK                     (0x1UL<<3)
N#define DEV_ADC_MIX_CTRL0_MIX0_MIC1_EN_ENABLE                   (0x1UL<<2)
N#define DEV_ADC_MIX_CTRL0_MIX0_MIC1_EN_DISABLE                  (0x0UL<<2)
N#define DEV_ADC_MIX_CTRL0_MIX0_MIC1_EN_MASK                     (0x1UL<<2)
N#define DEV_ADC_MIX_CTRL0_MIX0_MIC0_EN_ENABLE                   (0x1UL<<1)
N#define DEV_ADC_MIX_CTRL0_MIX0_MIC0_EN_DISABLE                  (0x0UL<<1)
N#define DEV_ADC_MIX_CTRL0_MIX0_MIC0_EN_MASK                     (0x1UL<<1)
N#define DEV_ADC_MIX_CTRL0_MIX0_EN_ENABLE                        (0x1UL<<0)
N#define DEV_ADC_MIX_CTRL0_MIX0_EN_DISABLE                       (0x0UL<<0)
N#define DEV_ADC_MIX_CTRL0_MIX0_EN_MASK                          (0x1UL<<0)
N/****ADC_MIX_CTRL0 end****/
N
N
N/***********************************ADC_MIX_CTRL1***********************************/
N#define DEV_ADC_MIX_CTRL1_MIX_IBIAS_CTRL_5UA                    (0x0UL<<4)
N#define DEV_ADC_MIX_CTRL1_MIX_IBIAS_CTRL_2_5UA                  (0x1UL<<4)
N#define DEV_ADC_MIX_CTRL1_MIX_IBIAS_CTRL_10UA                   (0x2UL<<4)
N#define DEV_ADC_MIX_CTRL1_MIX_IBIAS_CTRL_15UA                   (0x3UL<<4)
N#define DEV_ADC_MIX_CTRL1_MIX_IBIAS_CTRL_MASK                   (0x3UL<<4)
N#define DEV_ADC_MIX_CTRL1_ZC_COMP_EN_DISABLE                    (0x0UL<<2)
N#define DEV_ADC_MIX_CTRL1_ZC_COMP_EN_ENABLE                     (0x1UL<<2)
N#define DEV_ADC_MIX_CTRL1_ZC_COMP_EN_MASK                       (0x1UL<<2)
N#define DEV_ADC_MIX_CTRL1_MIX_PD_STUP_ENABLESTARTUP             (0x0UL<<1)
N#define DEV_ADC_MIX_CTRL1_MIX_PD_STUP_POWERDOWNSTARTUP          (0x1UL<<1)
N#define DEV_ADC_MIX_CTRL1_MIX_PD_STUP_MASK                      (0x1UL<<1)
N#define DEV_ADC_MIX_CTRL1_MIX_CHOP_EN_DISABLE                   (0x0UL<<0)
N#define DEV_ADC_MIX_CTRL1_MIX_CHOP_EN_ENABLE                    (0x1UL<<0)
N#define DEV_ADC_MIX_CTRL1_MIX_CHOP_EN_MASK                      (0x1UL<<0)
N/****ADC_MIX_CTRL1 end****/
N
N
N/***********************************ADC_SDM_CTRL0***********************************/
N#define DEV_ADC_SDM_CTRL0_ADC_START                             (0x1UL<<0)
N/****ADC_SDM_CTRL0 end****/
N
N
N/***********************************ADC_SDM_CTRL1***********************************/
N#define DEV_ADC_SDM_CTRL1_ADC1_CLKDIV_SEL_CLK_1                 (0x0UL<<26)
N#define DEV_ADC_SDM_CTRL1_ADC1_CLKDIV_SEL_CLK_2                 (0x1UL<<26)
N#define DEV_ADC_SDM_CTRL1_ADC1_CLKDIV_SEL_CLK_3                 (0x2UL<<26)
N#define DEV_ADC_SDM_CTRL1_ADC1_CLKDIV_SEL_CLK_6                 (0x3UL<<26)
N#define DEV_ADC_SDM_CTRL1_ADC1_CLKDIV_SEL_MASK                  (0x3UL<<26)
N#define DEV_ADC_SDM_CTRL1_ADC0_CLKDIV_SEL_CLK_1                 (0x0UL<<24)
N#define DEV_ADC_SDM_CTRL1_ADC0_CLKDIV_SEL_CLK_2                 (0x1UL<<24)
N#define DEV_ADC_SDM_CTRL1_ADC0_CLKDIV_SEL_CLK_3                 (0x2UL<<24)
N#define DEV_ADC_SDM_CTRL1_ADC0_CLKDIV_SEL_CLK_6                 (0x3UL<<24)
N#define DEV_ADC_SDM_CTRL1_ADC0_CLKDIV_SEL_MASK                  (0x3UL<<24)
N#define DEV_ADC_SDM_CTRL1_ADC_VREF_CHG                          (0x1UL<<22)
N#define DEV_ADC_SDM_CTRL1_ADC_AMPDET_DITHER                     (0x1UL<<21)
N#define DEV_ADC_SDM_CTRL1_ADC_AMPDET_DEM                        (0x1UL<<20)
N#define DEV_ADC_SDM_CTRL1_ADC_DITHER_SEL_MASK                   (0x3UL<<18)
N#define DEV_ADC_SDM_CTRL1_ADC_DITHER_EN_DISABLE                 (0x0UL<<16)
N#define DEV_ADC_SDM_CTRL1_ADC_DITHER_EN_ENABLE                  (0x1UL<<16)
N#define DEV_ADC_SDM_CTRL1_ADC_DITHER_EN_MASK                    (0x1UL<<16)
N#define DEV_ADC_SDM_CTRL1_ADC_BKDEM_EN_DISABLE                  (0x0UL<<15)
N#define DEV_ADC_SDM_CTRL1_ADC_BKDEM_EN_ENABLE                   (0x1UL<<15)
N#define DEV_ADC_SDM_CTRL1_ADC_BKDEM_EN_MASK                     (0x1UL<<15)
N#define DEV_ADC_SDM_CTRL1_ADC_DEM_PD_DISABLE                    (0x1UL<<14)
N#define DEV_ADC_SDM_CTRL1_ADC_DEM_PD_ENABLE                     (0x0UL<<14)
N#define DEV_ADC_SDM_CTRL1_ADC_DEM_PD_MASK                       (0x1UL<<14)
N#define DEV_ADC_SDM_CTRL1_ADC_NONOV_1N                          (0x0UL<<12)
N#define DEV_ADC_SDM_CTRL1_ADC_NONOV_2N                          (0x1UL<<12)
N#define DEV_ADC_SDM_CTRL1_ADC_NONOV_3N                          (0x2UL<<12)
N#define DEV_ADC_SDM_CTRL1_ADC_NONOV_5N                          (0x3UL<<12)
N#define DEV_ADC_SDM_CTRL1_ADC_NONOV_MASK                        (0x3UL<<12)
N#define DEV_ADC_SDM_CTRL1_ADC_CHOP_DIV_8                        (0x0UL<<10)
N#define DEV_ADC_SDM_CTRL1_ADC_CHOP_DIV_16                       (0x1UL<<10)
N#define DEV_ADC_SDM_CTRL1_ADC_CHOP_DIV_32                       (0x2UL<<10)
N#define DEV_ADC_SDM_CTRL1_ADC_CHOP_DIV_64                       (0x3UL<<10)
N#define DEV_ADC_SDM_CTRL1_ADC_CHOP_DIV_MASK                     (0x3UL<<10)
N#define DEV_ADC_SDM_CTRL1_ADC_CHOP_EN_DISABLE                   (0x0UL<<8)
N#define DEV_ADC_SDM_CTRL1_ADC_CHOP_EN_ENABLE                    (0x1UL<<8)
N#define DEV_ADC_SDM_CTRL1_ADC_CHOP_EN_MASK                      (0x1UL<<8)
N#define DEV_ADC_SDM_CTRL1_ADC_IBOTA2_CTRL_5UA                   (0x0UL<<6)
N#define DEV_ADC_SDM_CTRL1_ADC_IBOTA2_CTRL_10UA                  (0x1UL<<6)
N#define DEV_ADC_SDM_CTRL1_ADC_IBOTA2_CTRL_15UA                  (0x2UL<<6)
N#define DEV_ADC_SDM_CTRL1_ADC_IBOTA2_CTRL_2_5UA                 (0x3UL<<6)
N#define DEV_ADC_SDM_CTRL1_ADC_IBOTA2_CTRL_MASK                  (0x3UL<<6)
N#define DEV_ADC_SDM_CTRL1_ADC_IBOTA1_CTRL_5UA                   (0x0UL<<4)
N#define DEV_ADC_SDM_CTRL1_ADC_IBOTA1_CTRL_10UA                  (0x1UL<<4)
N#define DEV_ADC_SDM_CTRL1_ADC_IBOTA1_CTRL_15UA                  (0x2UL<<4)
N#define DEV_ADC_SDM_CTRL1_ADC_IBOTA1_CTRL_2_5UA                 (0x3UL<<4)
N#define DEV_ADC_SDM_CTRL1_ADC_IBOTA1_CTRL_MASK                  (0x3UL<<4)
N#define DEV_ADC_SDM_CTRL1_ADC1_EN_ENABLE                        (0x1UL<<1)
N#define DEV_ADC_SDM_CTRL1_ADC1_EN_DISABLE                       (0x0UL<<1)
N#define DEV_ADC_SDM_CTRL1_ADC1_EN_MASK                          (0x1UL<<1)
N#define DEV_ADC_SDM_CTRL1_ADC0_EN_ENABLE                        (0x1UL<<0)
N#define DEV_ADC_SDM_CTRL1_ADC0_EN_DISABLE                       (0x0UL<<0)
N#define DEV_ADC_SDM_CTRL1_ADC0_EN_MASK                          (0x1UL<<0)
N/****ADC_SDM_CTRL1 end****/
N
N
N/***********************************ADC_RSVD_CTRL***********************************/
N#define DEV_ADC_RSVD_CTRL_ADC1_RSVD_MASK                        (0x3fUL<<8)
N#define DEV_ADC_RSVD_CTRL_ADC0_RSVD_MASK                        (0x3fUL<<0)
N/****ADC_RSVD_CTRL end****/
N
N
N/***********************************ADC_VMIC0_CTRL***********************************/
N#define DEV_ADC_VMIC0_CTRL_VMIC0_VOL_2_77V                      (0x0UL<<4)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_VOL_2_71V                      (0x1UL<<4)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_VOL_2_59V                      (0x2UL<<4)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_VOL_2_49V                      (0x3UL<<4)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_VOL_2_40V                      (0x4UL<<4)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_VOL_2_29V                      (0x5UL<<4)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_VOL_2_21V                      (0x6UL<<4)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_VOL_2_10V                      (0x7UL<<4)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_VOL_2_00V                      (0x8UL<<4)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_VOL_1_91V                      (0x9UL<<4)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_VOL_1_81V                      (0xaUL<<4)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_VOL_1_71V                      (0xbUL<<4)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_VOL_1_60V                      (0xcUL<<4)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_VOL_1_50V                      (0xdUL<<4)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_VOL_MASK                       (0xfUL<<4)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_REF_SEL_USEVREF_VMIC           (0x0UL<<3)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_REF_SEL_USEVCM                 (0x1UL<<3)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_REF_SEL_MASK                   (0x1UL<<3)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_DISCHG_VMIC0DISCHARGEENABLE    (0x1UL<<2)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_DISCHG_VMIC0DISCHARGEDISABLE   (0x0UL<<2)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_DISCHG_MASK                    (0x1UL<<2)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_BYPASS_ENABLEBYPASS            (0x1UL<<1)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_BYPASS_DISABLEBYPASS           (0x0UL<<1)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_BYPASS_MASK                    (0x1UL<<1)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_EN_ENABLE                      (0x1UL<<0)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_EN_DISABLE                     (0x0UL<<0)
N#define DEV_ADC_VMIC0_CTRL_VMIC0_EN_MASK                        (0x1UL<<0)
N/****ADC_VMIC0_CTRL end****/
N
N
N/***********************************ADC_VMIC1_CTRL***********************************/
N#define DEV_ADC_VMIC1_CTRL_VMIC1_VOL_2_77V                      (0x0UL<<4)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_VOL_2_71V                      (0x1UL<<4)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_VOL_2_59V                      (0x2UL<<4)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_VOL_2_49V                      (0x3UL<<4)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_VOL_2_40V                      (0x4UL<<4)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_VOL_2_29V                      (0x5UL<<4)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_VOL_2_21V                      (0x6UL<<4)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_VOL_2_10V                      (0x7UL<<4)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_VOL_2_00V                      (0x8UL<<4)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_VOL_1_91V                      (0x9UL<<4)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_VOL_1_81V                      (0xaUL<<4)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_VOL_1_71V                      (0xbUL<<4)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_VOL_1_60V                      (0xcUL<<4)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_VOL_1_50V                      (0xdUL<<4)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_VOL_MASK                       (0xfUL<<4)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_REF_SEL_USEVREF_VMIC           (0x0UL<<3)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_REF_SEL_USEVCM                 (0x1UL<<3)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_REF_SEL_MASK                   (0x1UL<<3)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_DISCHG_VMIC1DISCHARGEENABLE    (0x1UL<<2)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_DISCHG_VMIC1DISCHARGEDISABLE   (0x0UL<<2)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_DISCHG_MASK                    (0x1UL<<2)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_BYPASS_ENABLEBYPASS            (0x1UL<<1)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_BYPASS_DISABLEBYPASS           (0x0UL<<1)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_BYPASS_MASK                    (0x1UL<<1)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_EN_ENABLE                      (0x1UL<<0)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_EN_DISABLE                     (0x0UL<<0)
N#define DEV_ADC_VMIC1_CTRL_VMIC1_EN_MASK                        (0x1UL<<0)
N/****ADC_VMIC1_CTRL end****/
N
N
N/***********************************ADC_VMIC_RAMP0***********************************/
N#define DEV_ADC_VMIC_RAMP0_RAMP_TIME_MASK                       (0xffffUL<<16)
N#define DEV_ADC_VMIC_RAMP0_FAST_STUP_VMIC_DISABLE               (0x0UL<<4)
N#define DEV_ADC_VMIC_RAMP0_FAST_STUP_VMIC_ENABLE                (0x1UL<<4)
N#define DEV_ADC_VMIC_RAMP0_FAST_STUP_VMIC_MASK                  (0x1UL<<4)
N#define DEV_ADC_VMIC_RAMP0_VMIC1_RAMP_DN_EN_DISABLE             (0x0UL<<3)
N#define DEV_ADC_VMIC_RAMP0_VMIC1_RAMP_DN_EN_ENABLE              (0x1UL<<3)
N#define DEV_ADC_VMIC_RAMP0_VMIC1_RAMP_DN_EN_MASK                (0x1UL<<3)
N#define DEV_ADC_VMIC_RAMP0_VMIC1_RAMP_UP_EN_DISABLE             (0x0UL<<2)
N#define DEV_ADC_VMIC_RAMP0_VMIC1_RAMP_UP_EN_ENABLE              (0x1UL<<2)
N#define DEV_ADC_VMIC_RAMP0_VMIC1_RAMP_UP_EN_MASK                (0x1UL<<2)
N#define DEV_ADC_VMIC_RAMP0_VMIC0_RAMP_DN_EN_DISABLE             (0x0UL<<1)
N#define DEV_ADC_VMIC_RAMP0_VMIC0_RAMP_DN_EN_ENABLE              (0x1UL<<1)
N#define DEV_ADC_VMIC_RAMP0_VMIC0_RAMP_DN_EN_MASK                (0x1UL<<1)
N#define DEV_ADC_VMIC_RAMP0_VMIC0_RAMP_UP_EN_DISABLE             (0x0UL<<0)
N#define DEV_ADC_VMIC_RAMP0_VMIC0_RAMP_UP_EN_ENABLE              (0x1UL<<0)
N#define DEV_ADC_VMIC_RAMP0_VMIC0_RAMP_UP_EN_MASK                (0x1UL<<0)
N/****ADC_VMIC_RAMP0 end****/
N
N
N/***********************************ADC_VMIC_RAMP1***********************************/
N#define DEV_ADC_VMIC_RAMP1_TOTAL_NUM_MASK                       (0xffffUL<<16)
N#define DEV_ADC_VMIC_RAMP1_HIGH_NUM_MASK                        (0xffffUL<<0)
N/****ADC_VMIC_RAMP1 end****/
N
N
N/***********************************ADC_ANA_PD***********************************/
N#define DEV_ADC_ANA_PD_OUT_ZEROCROSS                            (0x1UL<<4)
N#define DEV_ADC_ANA_PD_ADC1_OVF                                 (0x1UL<<1)
N#define DEV_ADC_ANA_PD_ADC0_OVF                                 (0x1UL<<0)
N/****ADC_ANA_PD end****/
N
N
N/***********************************DEV_ADC register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    CHNn_CFG[4];                             /* 0x0    ADC Channel 0 Configure */
X    volatile    uint32_t    CHNn_CFG[4];                              
N    __IO    uint32_t    CFG;                                     /* 0x10    ADC Configure */
X    volatile    uint32_t    CFG;                                      
N    __IO    uint32_t    CTL;                                     /* 0x14    ADC Control */
X    volatile    uint32_t    CTL;                                      
N    __IO    uint32_t    IE;                                      /* 0x18    ADC Interrupt Enable */
X    volatile    uint32_t    IE;                                       
N    __IO    uint32_t    PD;                                      /* 0x1c    ADC Interrupt Pending */
X    volatile    uint32_t    PD;                                       
N    __I     uint32_t    STA;                                     /* 0x20    ADC Status */
X    volatile const     uint32_t    STA;                                      
N    __I     uint32_t    RBUF;                                    /* 0x24    ADCRBUF */
X    volatile const     uint32_t    RBUF;                                     
N            uint32_t    RESERVED0[2];
N    __IO    uint32_t    GAIN_CFG;                                /* 0x30    ADC Gain Configure */
X    volatile    uint32_t    GAIN_CFG;                                 
N    __IO    uint32_t    PEAK_AT;                                 /* 0x34    ADC Peak Attack. Time */
X    volatile    uint32_t    PEAK_AT;                                  
N    __IO    uint32_t    PEAK_RT;                                 /* 0x38    ADC Peak Release Time */
X    volatile    uint32_t    PEAK_RT;                                  
N    __IO    uint32_t    GAIN_AT;                                 /* 0x3c    ADC Gain Attack. Time */
X    volatile    uint32_t    GAIN_AT;                                  
N    __IO    uint32_t    GAIN_RT;                                 /* 0x40    ADC Gain Release Time */
X    volatile    uint32_t    GAIN_RT;                                  
N            uint32_t    RESERVED1[3];
N    __IO    uint32_t    BIST_EN;                                 /* 0x50    ADC BIST Enable */
X    volatile    uint32_t    BIST_EN;                                  
N    __IO    uint32_t    BIST_RM;                                 /* 0x54    ADC BIST Read Margin */
X    volatile    uint32_t    BIST_RM;                                  
N    __I     uint32_t    BIST_DONE;                               /* 0x58    ADC BIST done */
X    volatile const     uint32_t    BIST_DONE;                                
N    __I     uint32_t    BIST_FAIL;                               /* 0x5c    ADC BIST fail */
X    volatile const     uint32_t    BIST_FAIL;                                
N            uint32_t    RESERVED2[8];
N    __IO    uint32_t    MIC_CTRL0;                               /* 0x80    ADC Mic Control 0 */
X    volatile    uint32_t    MIC_CTRL0;                                
N    __IO    uint32_t    MIC_CTRL1;                               /* 0x84    ADC Mic Control 1 */
X    volatile    uint32_t    MIC_CTRL1;                                
N    __IO    uint32_t    MIX_CTRL0;                               /* 0x88    ADC Mix Control 0 */
X    volatile    uint32_t    MIX_CTRL0;                                
N    __IO    uint32_t    MIX_CTRL1;                               /* 0x8c    ADC Mix Control 1 */
X    volatile    uint32_t    MIX_CTRL1;                                
N    __IO    uint32_t    SDM_CTRL0;                               /* 0x90    ADC SDM Control 0 */
X    volatile    uint32_t    SDM_CTRL0;                                
N    __IO    uint32_t    SDM_CTRL1;                               /* 0x94    ADC SDM Control 1 */
X    volatile    uint32_t    SDM_CTRL1;                                
N    __IO    uint32_t    RSVD_CTRL;                               /* 0x98    ADC RSVD Control */
X    volatile    uint32_t    RSVD_CTRL;                                
N    __IO    uint32_t    VMIC0_CTRL;                              /* 0x9c    ADC VMIC0 Control */
X    volatile    uint32_t    VMIC0_CTRL;                               
N    __IO    uint32_t    VMIC1_CTRL;                              /* 0xa0    ADC VMIC1 Control */
X    volatile    uint32_t    VMIC1_CTRL;                               
N    __IO    uint32_t    VMIC_RAMP0;                              /* 0xa4    ADC VMIC Ramp Control 0 */
X    volatile    uint32_t    VMIC_RAMP0;                               
N    __IO    uint32_t    VMIC_RAMP1;                              /* 0xa8    ADC VMIC Ramp Control 1 */
X    volatile    uint32_t    VMIC_RAMP1;                               
N            uint32_t    RESERVED3[17];
N    __IO    uint32_t    ANA_PD;                                  /* 0xf0    ADC Analog Status */
X    volatile    uint32_t    ANA_PD;                                   
N}DEV_ADC_RegDef;
N/****DEV_ADC end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 76 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_dac.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_dac.h" 1
N#ifndef __DEV_DAC_H__
N#define __DEV_DAC_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************CHNL_IIRn_B0***********************************/
N#define DEV_DAC_CHNL_IIRn_B0_MASK                               (0xffffffffUL<<0)
N/****CHNL_IIRn_B0 end****/
N
N
N/***********************************CHNL_IIRn_B1***********************************/
N#define DEV_DAC_CHNL_IIRn_B1_MASK                               (0xffffffffUL<<0)
N/****CHNL_IIRn_B1 end****/
N
N
N/***********************************CHNL_IIRn_B2***********************************/
N#define DEV_DAC_CHNL_IIRn_B2_MASK                               (0xffffffffUL<<0)
N/****CHNL_IIRn_B2 end****/
N
N
N/***********************************CHNL_IIRn_A1***********************************/
N#define DEV_DAC_CHNL_IIRn_A1_MASK                               (0xffffffffUL<<0)
N/****CHNL_IIRn_A1 end****/
N
N
N/***********************************CHNL_IIRn_A2***********************************/
N#define DEV_DAC_CHNL_IIRn_A2_MASK                               (0xffffffffUL<<0)
N/****CHNL_IIRn_A2 end****/
N
N
N/***********************************CHNL_IIR7_B0***********************************/
N#define DEV_DAC_CHNL_IIR7_B0_MASK                               (0xffffffffUL<<0)
N/****CHNL_IIR7_B0 end****/
N
N
N/***********************************CHNL_IIR7_B1***********************************/
N#define DEV_DAC_CHNL_IIR7_B1_MASK                               (0xffffffffUL<<0)
N/****CHNL_IIR7_B1 end****/
N
N
N/***********************************CHNL_IIR7_B2***********************************/
N#define DEV_DAC_CHNL_IIR7_B2_MASK                               (0xffffffffUL<<0)
N/****CHNL_IIR7_B2 end****/
N
N
N/***********************************CHNL_IIR7_A1***********************************/
N#define DEV_DAC_CHNL_IIR7_A1_MASK                               (0xffffffffUL<<0)
N/****CHNL_IIR7_A1 end****/
N
N
N/***********************************CHNL_IIR7_A2***********************************/
N#define DEV_DAC_CHNL_IIR7_A2_MASK                               (0xffffffffUL<<0)
N/****CHNL_IIR7_A2 end****/
N
N
N/***********************************CHNR_IIRn_B0***********************************/
N#define DEV_DAC_CHNR_IIRn_B0_MASK                               (0xffffffffUL<<0)
N/****CHNR_IIRn_B0 end****/
N
N
N/***********************************CHNR_IIRn_B1***********************************/
N#define DEV_DAC_CHNR_IIRn_B1_MASK                               (0xffffffffUL<<0)
N/****CHNR_IIRn_B1 end****/
N
N
N/***********************************CHNR_IIRn_B2***********************************/
N#define DEV_DAC_CHNR_IIRn_B2_MASK                               (0xffffffffUL<<0)
N/****CHNR_IIRn_B2 end****/
N
N
N/***********************************CHNR_IIRn_A1***********************************/
N#define DEV_DAC_CHNR_IIRn_A1_MASK                               (0xffffffffUL<<0)
N/****CHNR_IIRn_A1 end****/
N
N
N/***********************************CHNR_IIRn_A2***********************************/
N#define DEV_DAC_CHNR_IIRn_A2_MASK                               (0xffffffffUL<<0)
N/****CHNR_IIRn_A2 end****/
N
N
N/***********************************CHNR_IIR7_B0***********************************/
N#define DEV_DAC_CHNR_IIR7_B0_MASK                               (0xffffffffUL<<0)
N/****CHNR_IIR7_B0 end****/
N
N
N/***********************************CHNR_IIR7_B1***********************************/
N#define DEV_DAC_CHNR_IIR7_B1_MASK                               (0xffffffffUL<<0)
N/****CHNR_IIR7_B1 end****/
N
N
N/***********************************CHNR_IIR7_B2***********************************/
N#define DEV_DAC_CHNR_IIR7_B2_MASK                               (0xffffffffUL<<0)
N/****CHNR_IIR7_B2 end****/
N
N
N/***********************************CHNR_IIR7_A1***********************************/
N#define DEV_DAC_CHNR_IIR7_A1_MASK                               (0xffffffffUL<<0)
N/****CHNR_IIR7_A1 end****/
N
N
N/***********************************CHNR_IIR7_A2***********************************/
N#define DEV_DAC_CHNR_IIR7_A2_MASK                               (0xffffffffUL<<0)
N/****CHNR_IIR7_A2 end****/
N
N
N/***********************************DRC_LMTH***********************************/
N#define DEV_DAC_DRC_LMTH_MASK                                   (0xffffffffUL<<0)
N/****DRC_LMTH end****/
N
N
N/***********************************DRC_SLOP***********************************/
N#define DEV_DAC_DRC_SLOP_MASK                                   (0xffffffffUL<<0)
N/****DRC_SLOP end****/
N
N
N/***********************************DRC_PEAK_AT***********************************/
N#define DEV_DAC_DRC_PEAK_AT_ATTACK_TIME_MASK                    (0xffffffffUL<<0)
N/****DRC_PEAK_AT end****/
N
N
N/***********************************DRC_PEAK_RT***********************************/
N#define DEV_DAC_DRC_PEAK_RT_RELEASE_TIME_MASK                   (0xffffffffUL<<0)
N/****DRC_PEAK_RT end****/
N
N
N/***********************************DRC_GAIN_AT***********************************/
N#define DEV_DAC_DRC_GAIN_AT_ATTACK_TIME_MASK                    (0xffffffffUL<<0)
N/****DRC_GAIN_AT end****/
N
N
N/***********************************DRC_GAIN_RT***********************************/
N#define DEV_DAC_DRC_GAIN_RT_RELEASE_TIME_MASK                   (0xffffffffUL<<0)
N/****DRC_GAIN_RT end****/
N
N
N/***********************************DSD_COE_B1***********************************/
N#define DEV_DAC_DSD_COE_B1_MASK                                 (0xffffffffUL<<0)
N/****DSD_COE_B1 end****/
N
N
N/***********************************DSD_COE_B2***********************************/
N#define DEV_DAC_DSD_COE_B2_MASK                                 (0xffffffffUL<<0)
N/****DSD_COE_B2 end****/
N
N
N/***********************************DSD_COE_A1***********************************/
N#define DEV_DAC_DSD_COE_A1_MASK                                 (0xffffffffUL<<0)
N/****DSD_COE_A1 end****/
N
N
N/***********************************DSD_COE_A2***********************************/
N#define DEV_DAC_DSD_COE_A2_MASK                                 (0xffffffffUL<<0)
N/****DSD_COE_A2 end****/
N
N
N/***********************************DSD_COE_A3***********************************/
N#define DEV_DAC_DSD_COE_A3_MASK                                 (0xffffffffUL<<0)
N/****DSD_COE_A3 end****/
N
N
N/***********************************DAC_CFG0***********************************/
N#define DEV_DAC_CFG0_CHNR_IIR_SEL_DISABLE                       (0x0UL<<24)
N#define DEV_DAC_CFG0_CHNR_IIR_SEL_ENABLE                        (0x1UL<<24)
N#define DEV_DAC_CFG0_CHNR_IIR_SEL_MASK                          (0xffUL<<24)
N#define DEV_DAC_CFG0_CHNL_IIR_SEL_DISABLE                       (0x0UL<<16)
N#define DEV_DAC_CFG0_CHNL_IIR_SEL_ENABLE                        (0x1UL<<16)
N#define DEV_DAC_CFG0_CHNL_IIR_SEL_MASK                          (0xffUL<<16)
N#define DEV_DAC_CFG0_DACR_INVERSE_NORMAL                        (0x0UL<<15)
N#define DEV_DAC_CFG0_DACR_INVERSE_INVERSE                       (0x1UL<<15)
N#define DEV_DAC_CFG0_DACR_INVERSE_MASK                          (0x1UL<<15)
N#define DEV_DAC_CFG0_DACL_INVERSE_NORMAL                        (0x0UL<<14)
N#define DEV_DAC_CFG0_DACL_INVERSE_INVERSE                       (0x1UL<<14)
N#define DEV_DAC_CFG0_DACL_INVERSE_MASK                          (0x1UL<<14)
N#define DEV_DAC_CFG0_HEMP_TH_MASK                               (0x3fUL<<8)
N#define DEV_DAC_CFG0_DITHER_SEL_LEFTSHIFT23BIT                  (0x0UL<<6)
N#define DEV_DAC_CFG0_DITHER_SEL_LEFTSHIFT22BIT                  (0x1UL<<6)
N#define DEV_DAC_CFG0_DITHER_SEL_LEFTSHIFT21BIT                  (0x2UL<<6)
N#define DEV_DAC_CFG0_DITHER_SEL_LEFTSHIFT20BIT                  (0x3UL<<6)
N#define DEV_DAC_CFG0_DITHER_SEL_MASK                            (0x3UL<<6)
N#define DEV_DAC_CFG0_DITHER_EN_DISABLE                          (0x0UL<<5)
N#define DEV_DAC_CFG0_DITHER_EN_ENABLE                           (0x1UL<<5)
N#define DEV_DAC_CFG0_DITHER_EN_MASK                             (0x1UL<<5)
N#define DEV_DAC_CFG0_SRC_SEL_AHBINTERFACE                       (0x0UL<<4)
N#define DEV_DAC_CFG0_SRC_SEL_SRCINTERFACE                       (0x1UL<<4)
N#define DEV_DAC_CFG0_SRC_SEL_MASK                               (0x1UL<<4)
N#define DEV_DAC_CFG0_IIR_SR_IN_1FS                              (0x0UL<<2)
N#define DEV_DAC_CFG0_IIR_SR_IN_2FS                              (0x1UL<<2)
N#define DEV_DAC_CFG0_IIR_SR_IN_4FS                              (0x2UL<<2)
N#define DEV_DAC_CFG0_IIR_SR_IN_8FS                              (0x3UL<<2)
N#define DEV_DAC_CFG0_IIR_SR_IN_MASK                             (0x3UL<<2)
N#define DEV_DAC_CFG0_DMIC_SRC_DACFIFO                           (0x0UL<<1)
N#define DEV_DAC_CFG0_DMIC_SRC_DMIC                              (0x1UL<<1)
N#define DEV_DAC_CFG0_DMIC_SRC_MASK                              (0x1UL<<1)
N#define DEV_DAC_CFG0_SIN_SRC_DACFIFO                            (0x0UL<<0)
N#define DEV_DAC_CFG0_SIN_SRC_SINTABLE                           (0x1UL<<0)
N#define DEV_DAC_CFG0_SIN_SRC_MASK                               (0x1UL<<0)
N/****DAC_CFG0 end****/
N
N
N/***********************************DAC_CFG1***********************************/
N#define DEV_DAC_CFG1_DAC_VOL_R_MUTE                             (0x0UL<<24)
N#define DEV_DAC_CFG1_DAC_VOL_R_40DB                             (0x1UL<<24)
N#define DEV_DAC_CFG1_DAC_VOL_R_39DB                             (0x2UL<<24)
N#define DEV_DAC_CFG1_DAC_VOL_R_MASK                             (0x3fUL<<24)
N#define DEV_DAC_CFG1_DAC_VOL_L_MUTE                             (0x0UL<<16)
N#define DEV_DAC_CFG1_DAC_VOL_L_40DB                             (0x1UL<<16)
N#define DEV_DAC_CFG1_DAC_VOL_L_39DB                             (0x2UL<<16)
N#define DEV_DAC_CFG1_DAC_VOL_L_MASK                             (0x3fUL<<16)
N#define DEV_DAC_CFG1_DBG_CHN_SEL_LEFTCHANNEL                    (0x0UL<<14)
N#define DEV_DAC_CFG1_DBG_CHN_SEL_RIGHTCHANNEL                   (0x1UL<<14)
N#define DEV_DAC_CFG1_DBG_CHN_SEL_MASK                           (0x1UL<<14)
N#define DEV_DAC_CFG1_DBG_OUT_EN_DISABLE                         (0x0UL<<13)
N#define DEV_DAC_CFG1_DBG_OUT_EN_ENABLE                          (0x1UL<<13)
N#define DEV_DAC_CFG1_DBG_OUT_EN_MASK                            (0x1UL<<13)
N#define DEV_DAC_CFG1_DBG_IN_EN_DISABLE                          (0x0UL<<12)
N#define DEV_DAC_CFG1_DBG_IN_EN_ENABLE                           (0x1UL<<12)
N#define DEV_DAC_CFG1_DBG_IN_EN_MASK                             (0x1UL<<12)
N#define DEV_DAC_CFG1_DACR_MIX_GAIN_1                            (0x0UL<<10)
N#define DEV_DAC_CFG1_DACR_MIX_GAIN_1_2                          (0x1UL<<10)
N#define DEV_DAC_CFG1_DACR_MIX_GAIN_1_4                          (0x2UL<<10)
N#define DEV_DAC_CFG1_DACR_MIX_GAIN_MASK                         (0x3UL<<10)
N#define DEV_DAC_CFG1_DACL_MIX_GAIN_1                            (0x0UL<<8)
N#define DEV_DAC_CFG1_DACL_MIX_GAIN_1_2                          (0x1UL<<8)
N#define DEV_DAC_CFG1_DACL_MIX_GAIN_1_4                          (0x2UL<<8)
N#define DEV_DAC_CFG1_DACL_MIX_GAIN_MASK                         (0x3UL<<8)
N#define DEV_DAC_CFG1_DACR_MIX_SOURCE_DISABLE                    (0x0UL<<4)
N#define DEV_DAC_CFG1_DACR_MIX_SOURCE_ENABLE                     (0x1UL<<4)
N#define DEV_DAC_CFG1_DACR_MIX_SOURCE_MASK                       (0xfUL<<4)
N#define DEV_DAC_CFG1_DACL_MIX_SOURCE_DISABLE                    (0x0UL<<0)
N#define DEV_DAC_CFG1_DACL_MIX_SOURCE_ENABLE                     (0x1UL<<0)
N#define DEV_DAC_CFG1_DACL_MIX_SOURCE_MASK                       (0xfUL<<0)
N/****DAC_CFG1 end****/
N
N
N/***********************************DAC_CTL***********************************/
N#define DEV_DAC_CTL_DSD_EN_DISABLE                              (0x0UL<<6)
N#define DEV_DAC_CTL_DSD_EN_ENABLE                               (0x1UL<<6)
N#define DEV_DAC_CTL_DSD_EN_MASK                                 (0x1UL<<6)
N#define DEV_DAC_CTL_DRC_EN_DISABLE                              (0x0UL<<5)
N#define DEV_DAC_CTL_DRC_EN_ENABLE                               (0x1UL<<5)
N#define DEV_DAC_CTL_DRC_EN_MASK                                 (0x1UL<<5)
N#define DEV_DAC_CTL_ANC_EN_DISABLE                              (0x0UL<<4)
N#define DEV_DAC_CTL_ANC_EN_ENABLE                               (0x1UL<<4)
N#define DEV_DAC_CTL_ANC_EN_MASK                                 (0x1UL<<4)
N#define DEV_DAC_CTL_EQ_EN_DISABLE                               (0x0UL<<3)
N#define DEV_DAC_CTL_EQ_EN_ENABLE                                (0x1UL<<3)
N#define DEV_DAC_CTL_EQ_EN_MASK                                  (0x1UL<<3)
N#define DEV_DAC_CTL_TX_FIFO_RST_TXFIFOWORK                      (0x0UL<<2)
N#define DEV_DAC_CTL_TX_FIFO_RST_TXFIFORESET                     (0x1UL<<2)
N#define DEV_DAC_CTL_TX_FIFO_RST_MASK                            (0x1UL<<2)
N#define DEV_DAC_CTL_DMA_EN_DISABLE                              (0x0UL<<1)
N#define DEV_DAC_CTL_DMA_EN_ENABLE                               (0x1UL<<1)
N#define DEV_DAC_CTL_DMA_EN_MASK                                 (0x1UL<<1)
N#define DEV_DAC_CTL_TX_EN_DISABLE                               (0x0UL<<0)
N#define DEV_DAC_CTL_TX_EN_ENABLE                                (0x1UL<<0)
N#define DEV_DAC_CTL_TX_EN_MASK                                  (0x1UL<<0)
N/****DAC_CTL end****/
N
N
N/***********************************DAC_IE***********************************/
N#define DEV_DAC_IE_TX_FIFO_UF                                   (0x1UL<<2)
N#define DEV_DAC_IE_TX_FIFO_OF                                   (0x1UL<<1)
N#define DEV_DAC_IE_TX_IRQ                                       (0x1UL<<0)
N/****DAC_IE end****/
N
N
N/***********************************DAC_PD***********************************/
N#define DEV_DAC_PD_TX_FIFO_UF                                   (0x1UL<<2)
N#define DEV_DAC_PD_TX_FIFO_OF                                   (0x1UL<<1)
N#define DEV_DAC_PD_TX_IRQ                                       (0x1UL<<0)
N/****DAC_PD end****/
N
N
N/***********************************DAC_STA***********************************/
N#define DEV_DAC_STA_TX_FIFO_FULL                                (0x1UL<<11)
N#define DEV_DAC_STA_TX_FIFO_HFUL                                (0x1UL<<10)
N#define DEV_DAC_STA_TX_FIFO_EMPT                                (0x1UL<<9)
N#define DEV_DAC_STA_TX_FIFO_HEMP                                (0x1UL<<8)
N#define DEV_DAC_STA_TX_FIFO_WLVL_MASK                           (0x3fUL<<0)
N/****DAC_STA end****/
N
N
N/***********************************DAC_TBUF***********************************/
N#define DEV_DAC_TBUF_MASK                                       (0xffffffffUL<<0)
N/****DAC_TBUF end****/
N
N
N/***********************************DAC_CFG2***********************************/
N#define DEV_DAC_CFG2_DSD_VOL_R_MUTE                             (0x0UL<<24)
N#define DEV_DAC_CFG2_DSD_VOL_R_40DB                             (0x1UL<<24)
N#define DEV_DAC_CFG2_DSD_VOL_R_39DB                             (0x2UL<<24)
N#define DEV_DAC_CFG2_DSD_VOL_R_MASK                             (0x3fUL<<24)
N#define DEV_DAC_CFG2_DSD_VOL_L_MUTE                             (0x0UL<<16)
N#define DEV_DAC_CFG2_DSD_VOL_L_40DB                             (0x1UL<<16)
N#define DEV_DAC_CFG2_DSD_VOL_L_39DB                             (0x2UL<<16)
N#define DEV_DAC_CFG2_DSD_VOL_L_MASK                             (0x3fUL<<16)
N#define DEV_DAC_CFG2_DAC_FMT_USEHI_MASK                         (0x1UL<<13)
N#define DEV_DAC_CFG2_DAC_FMT_16BIT_MASK                         (0x1UL<<12)
N#define DEV_DAC_CFG2_DSD_FMT_START_MASK                         (0x3UL<<10)
N#define DEV_DAC_CFG2_DSD_FMT_BO_MASK                            (0x1UL<<9)
N#define DEV_DAC_CFG2_DSD_FMT_16BIT_MASK                         (0x1UL<<8)
N#define DEV_DAC_CFG2_DCB_EN_DISABLE                             (0x0UL<<5)
N#define DEV_DAC_CFG2_DCB_EN_ENABLE                              (0x1UL<<5)
N#define DEV_DAC_CFG2_DCB_EN_MASK                                (0x1UL<<5)
N#define DEV_DAC_CFG2_MONO_EN_STEREO                             (0x0UL<<4)
N#define DEV_DAC_CFG2_MONO_EN_MONO                               (0x1UL<<4)
N#define DEV_DAC_CFG2_MONO_EN_MASK                               (0x1UL<<4)
N#define DEV_DAC_CFG2_ANA_CLK_DIV_1                              (0x0UL<<2)
N#define DEV_DAC_CFG2_ANA_CLK_DIV_2                              (0x1UL<<2)
N#define DEV_DAC_CFG2_ANA_CLK_DIV_4                              (0x2UL<<2)
N#define DEV_DAC_CFG2_ANA_CLK_DIV_8                              (0x3UL<<2)
N#define DEV_DAC_CFG2_ANA_CLK_DIV_MASK                           (0x3UL<<2)
N#define DEV_DAC_CFG2_CIC_SR_OUT_128FS                           (0x0UL<<0)
N#define DEV_DAC_CFG2_CIC_SR_OUT_64FS                            (0x1UL<<0)
N#define DEV_DAC_CFG2_CIC_SR_OUT_32FS                            (0x2UL<<0)
N#define DEV_DAC_CFG2_CIC_SR_OUT_16FS                            (0x3UL<<0)
N#define DEV_DAC_CFG2_CIC_SR_OUT_MASK                            (0x3UL<<0)
N/****DAC_CFG2 end****/
N
N
N/***********************************DAC_DCB***********************************/
N#define DEV_DAC_DCB_MASK                                        (0xffffffUL<<0)
N/****DAC_DCB end****/
N
N
N/***********************************DAC_BIST_RM***********************************/
N#define DEV_DAC_BIST_RM_RAM_RM_MASK                             (0xfUL<<0)
N/****DAC_BIST_RM end****/
N
N
N/***********************************DAC_BIST_EN***********************************/
N#define DEV_DAC_BIST_EN_RAM_LS_DISABLE                          (0x0UL<<2)
N#define DEV_DAC_BIST_EN_RAM_LS_ENABLE                           (0x1UL<<2)
N#define DEV_DAC_BIST_EN_RAM_LS_MASK                             (0x1UL<<2)
N#define DEV_DAC_BIST_EN_RAM_RME_DISABLE                         (0x0UL<<1)
N#define DEV_DAC_BIST_EN_RAM_RME_ENABLE                          (0x1UL<<1)
N#define DEV_DAC_BIST_EN_RAM_RME_MASK                            (0x1UL<<1)
N#define DEV_DAC_BIST_EN_RAM_EN_DISABLE                          (0x0UL<<0)
N#define DEV_DAC_BIST_EN_RAM_EN_ENABLE                           (0x1UL<<0)
N#define DEV_DAC_BIST_EN_RAM_EN_MASK                             (0x1UL<<0)
N/****DAC_BIST_EN end****/
N
N
N/***********************************DAC_BIST_DONE***********************************/
N#define DEV_DAC_BIST_DONE_RAM_DONE                              (0x1UL<<0)
N/****DAC_BIST_DONE end****/
N
N
N/***********************************DAC_BIST_FAIL***********************************/
N#define DEV_DAC_BIST_FAIL_RAM_FAIL                              (0x1UL<<0)
N/****DAC_BIST_FAIL end****/
N
N
N/***********************************DAC_DA_CTL***********************************/
N#define DEV_DAC_DA_CTL_DAC_RSVD_11_MASK                         (0x3fUL<<18)
N#define DEV_DAC_DA_CTL_LO_VCMI_CHOP_DISABLE                     (0x0UL<<17)
N#define DEV_DAC_DA_CTL_LO_VCMI_CHOP_ENABLE                      (0x1UL<<17)
N#define DEV_DAC_DA_CTL_LO_VCMI_CHOP_MASK                        (0x1UL<<17)
N#define DEV_DAC_DA_CTL_LO_VCMI_BYP_DONOTBYPASS                  (0x0UL<<16)
N#define DEV_DAC_DA_CTL_LO_VCMI_BYP_BYPASS                       (0x1UL<<16)
N#define DEV_DAC_DA_CTL_LO_VCMI_BYP_MASK                         (0x1UL<<16)
N#define DEV_DAC_DA_CTL_DAC_CLK_DLY_1N                           (0x0UL<<12)
N#define DEV_DAC_DA_CTL_DAC_CLK_DLY_2N                           (0x1UL<<12)
N#define DEV_DAC_DA_CTL_DAC_CLK_DLY_3N                           (0x2UL<<12)
N#define DEV_DAC_DA_CTL_DAC_CLK_DLY_5N                           (0x3UL<<12)
N#define DEV_DAC_DA_CTL_DAC_CLK_DLY_MASK                         (0x3UL<<12)
N#define DEV_DAC_DA_CTL_DAC_CLK_INVSEL_DISABLE                   (0x0UL<<11)
N#define DEV_DAC_DA_CTL_DAC_CLK_INVSEL_ENABLE                    (0x1UL<<11)
N#define DEV_DAC_DA_CTL_DAC_CLK_INVSEL_MASK                      (0x1UL<<11)
N#define DEV_DAC_DA_CTL_DAC_OPFB_PD                              (0x1UL<<10)
N#define DEV_DAC_DA_CTL_DAC_NONOV_MASK                           (0x3UL<<8)
N#define DEV_DAC_DA_CTL_DAC_IBIAS_CTRL_MASK                      (0x3UL<<6)
N#define DEV_DAC_DA_CTL_DAC_CHOP_DIV_MASK                        (0x3UL<<4)
N#define DEV_DAC_DA_CTL_DAC_GBW_SEL_DISABLE                      (0x0UL<<3)
N#define DEV_DAC_DA_CTL_DAC_GBW_SEL_ENABLE                       (0x1UL<<3)
N#define DEV_DAC_DA_CTL_DAC_GBW_SEL_MASK                         (0x1UL<<3)
N#define DEV_DAC_DA_CTL_DAC_CHOP_EN_DISABLE                      (0x0UL<<2)
N#define DEV_DAC_DA_CTL_DAC_CHOP_EN_ENABLE                       (0x1UL<<2)
N#define DEV_DAC_DA_CTL_DAC_CHOP_EN_MASK                         (0x1UL<<2)
N#define DEV_DAC_DA_CTL_DAC1_EN_DISABLE                          (0x0UL<<1)
N#define DEV_DAC_DA_CTL_DAC1_EN_ENABLE                           (0x1UL<<1)
N#define DEV_DAC_DA_CTL_DAC1_EN_MASK                             (0x1UL<<1)
N#define DEV_DAC_DA_CTL_DAC0_EN_DISABLE                          (0x0UL<<0)
N#define DEV_DAC_DA_CTL_DAC0_EN_ENABLE                           (0x1UL<<0)
N#define DEV_DAC_DA_CTL_DAC0_EN_MASK                             (0x1UL<<0)
N/****DAC_DA_CTL end****/
N
N
N/***********************************DAC_CP_CTL***********************************/
N#define DEV_DAC_CP_CTL_CP_CLK_DLY_1N                            (0x0UL<<8)
N#define DEV_DAC_CP_CTL_CP_CLK_DLY_2N                            (0x1UL<<8)
N#define DEV_DAC_CP_CTL_CP_CLK_DLY_3N                            (0x2UL<<8)
N#define DEV_DAC_CP_CTL_CP_CLK_DLY_5N                            (0x3UL<<8)
N#define DEV_DAC_CP_CTL_CP_CLK_DLY_MASK                          (0x3UL<<8)
N#define DEV_DAC_CP_CTL_CP_CLK_NONOV_1N                          (0x0UL<<6)
N#define DEV_DAC_CP_CTL_CP_CLK_NONOV_2N                          (0x1UL<<6)
N#define DEV_DAC_CP_CTL_CP_CLK_NONOV_3N                          (0x2UL<<6)
N#define DEV_DAC_CP_CTL_CP_CLK_NONOV_5N                          (0x3UL<<6)
N#define DEV_DAC_CP_CTL_CP_CLK_NONOV_MASK                        (0x3UL<<6)
N#define DEV_DAC_CP_CTL_CP_CLK_DIV_8                             (0x0UL<<4)
N#define DEV_DAC_CP_CTL_CP_CLK_DIV_16                            (0x1UL<<4)
N#define DEV_DAC_CP_CTL_CP_CLK_DIV_32                            (0x2UL<<4)
N#define DEV_DAC_CP_CTL_CP_CLK_DIV_64                            (0x3UL<<4)
N#define DEV_DAC_CP_CTL_CP_CLK_DIV_MASK                          (0x3UL<<4)
N#define DEV_DAC_CP_CTL_CP_CLK_INV_SEL_DISABLE                   (0x0UL<<3)
N#define DEV_DAC_CP_CTL_CP_CLK_INV_SEL_ENABLE                    (0x1UL<<3)
N#define DEV_DAC_CP_CTL_CP_CLK_INV_SEL_MASK                      (0x1UL<<3)
N#define DEV_DAC_CP_CTL_CP_CLK_SEL_DISABLE                       (0x0UL<<2)
N#define DEV_DAC_CP_CTL_CP_CLK_SEL_ENABLE                        (0x1UL<<2)
N#define DEV_DAC_CP_CTL_CP_CLK_SEL_MASK                          (0x1UL<<2)
N#define DEV_DAC_CP_CTL_CP_HS_EN_DISABLE                         (0x0UL<<1)
N#define DEV_DAC_CP_CTL_CP_HS_EN_ENABLE                          (0x1UL<<1)
N#define DEV_DAC_CP_CTL_CP_HS_EN_MASK                            (0x1UL<<1)
N#define DEV_DAC_CP_CTL_CP_EN_DISABLE                            (0x0UL<<0)
N#define DEV_DAC_CP_CTL_CP_EN_ENABLE                             (0x1UL<<0)
N#define DEV_DAC_CP_CTL_CP_EN_MASK                               (0x1UL<<0)
N/****DAC_CP_CTL end****/
N
N
N/***********************************DAC_HP_CTL0***********************************/
N#define DEV_DAC_HP_CTL0_GMIC1_S78_EN_DISABLE                    (0x0UL<<25)
N#define DEV_DAC_HP_CTL0_GMIC1_S78_EN_ENABLE                     (0x1UL<<25)
N#define DEV_DAC_HP_CTL0_GMIC1_S78_EN_MASK                       (0x1UL<<25)
N#define DEV_DAC_HP_CTL0_GMIC0_S78_EN_DISABLE                    (0x0UL<<24)
N#define DEV_DAC_HP_CTL0_GMIC0_S78_EN_ENABLE                     (0x1UL<<24)
N#define DEV_DAC_HP_CTL0_GMIC0_S78_EN_MASK                       (0x1UL<<24)
N#define DEV_DAC_HP_CTL0_HPFBSW1_EN_DISABLE                      (0x0UL<<23)
N#define DEV_DAC_HP_CTL0_HPFBSW1_EN_ENABLE                       (0x1UL<<23)
N#define DEV_DAC_HP_CTL0_HPFBSW1_EN_MASK                         (0x1UL<<23)
N#define DEV_DAC_HP_CTL0_HPFBSW0_EN_DISABLE                      (0x0UL<<22)
N#define DEV_DAC_HP_CTL0_HPFBSW0_EN_ENABLE                       (0x1UL<<22)
N#define DEV_DAC_HP_CTL0_HPFBSW0_EN_MASK                         (0x1UL<<22)
N#define DEV_DAC_HP_CTL0_GMIC1_EN_DISABLE                        (0x0UL<<21)
N#define DEV_DAC_HP_CTL0_GMIC1_EN_ENABLE                         (0x1UL<<21)
N#define DEV_DAC_HP_CTL0_GMIC1_EN_MASK                           (0x1UL<<21)
N#define DEV_DAC_HP_CTL0_GMIC0_EN_DISABLE                        (0x0UL<<20)
N#define DEV_DAC_HP_CTL0_GMIC0_EN_ENABLE                         (0x1UL<<20)
N#define DEV_DAC_HP_CTL0_GMIC0_EN_MASK                           (0x1UL<<20)
N#define DEV_DAC_HP_CTL0_HSCAL1_EN_DISABLE                       (0x0UL<<19)
N#define DEV_DAC_HP_CTL0_HSCAL1_EN_ENABLE                        (0x1UL<<19)
N#define DEV_DAC_HP_CTL0_HSCAL1_EN_MASK                          (0x1UL<<19)
N#define DEV_DAC_HP_CTL0_HSCAL0_EN_DISABLE                       (0x0UL<<18)
N#define DEV_DAC_HP_CTL0_HSCAL0_EN_ENABLE                        (0x1UL<<18)
N#define DEV_DAC_HP_CTL0_HSCAL0_EN_MASK                          (0x1UL<<18)
N#define DEV_DAC_HP_CTL0_HSPA_IBIAS_CTL_5U                       (0x0UL<<16)
N#define DEV_DAC_HP_CTL0_HSPA_IBIAS_CTL_10U                      (0x1UL<<16)
N#define DEV_DAC_HP_CTL0_HSPA_IBIAS_CTL_15U                      (0x2UL<<16)
N#define DEV_DAC_HP_CTL0_HSPA_IBIAS_CTL_2_5U                     (0x3UL<<16)
N#define DEV_DAC_HP_CTL0_HSPA_IBIAS_CTL_MASK                     (0x3UL<<16)
N#define DEV_DAC_HP_CTL0_HSPA_IBGM3_CTL_1U                       (0x0UL<<14)
N#define DEV_DAC_HP_CTL0_HSPA_IBGM3_CTL_2U                       (0x1UL<<14)
N#define DEV_DAC_HP_CTL0_HSPA_IBGM3_CTL_3U                       (0x2UL<<14)
N#define DEV_DAC_HP_CTL0_HSPA_IBGM3_CTL_5U                       (0x3UL<<14)
N#define DEV_DAC_HP_CTL0_HSPA_IBGM3_CTL_MASK                     (0x3UL<<14)
N#define DEV_DAC_HP_CTL0_HSPA_IBGM2_CTL_1U                       (0x0UL<<12)
N#define DEV_DAC_HP_CTL0_HSPA_IBGM2_CTL_2U                       (0x1UL<<12)
N#define DEV_DAC_HP_CTL0_HSPA_IBGM2_CTL_3U                       (0x2UL<<12)
N#define DEV_DAC_HP_CTL0_HSPA_IBGM2_CTL_5U                       (0x3UL<<12)
N#define DEV_DAC_HP_CTL0_HSPA_IBGM2_CTL_MASK                     (0x3UL<<12)
N#define DEV_DAC_HP_CTL0_HSPA_IBGM1_CTL_1U                       (0x0UL<<10)
N#define DEV_DAC_HP_CTL0_HSPA_IBGM1_CTL_2U                       (0x1UL<<10)
N#define DEV_DAC_HP_CTL0_HSPA_IBGM1_CTL_3U                       (0x2UL<<10)
N#define DEV_DAC_HP_CTL0_HSPA_IBGM1_CTL_5U                       (0x3UL<<10)
N#define DEV_DAC_HP_CTL0_HSPA_IBGM1_CTL_MASK                     (0x3UL<<10)
N#define DEV_DAC_HP_CTL0_HSPA1_MIX1_EN_DISABLE                   (0x0UL<<9)
N#define DEV_DAC_HP_CTL0_HSPA1_MIX1_EN_USEMIX1                   (0x1UL<<9)
N#define DEV_DAC_HP_CTL0_HSPA1_MIX1_EN_MASK                      (0x1UL<<9)
N#define DEV_DAC_HP_CTL0_HSPA1_MIX0_EN_DISABLE                   (0x0UL<<8)
N#define DEV_DAC_HP_CTL0_HSPA1_MIX0_EN_USEMIX0                   (0x1UL<<8)
N#define DEV_DAC_HP_CTL0_HSPA1_MIX0_EN_MASK                      (0x1UL<<8)
N#define DEV_DAC_HP_CTL0_HSPA1_DAC1_EN_DISABLE                   (0x0UL<<7)
N#define DEV_DAC_HP_CTL0_HSPA1_DAC1_EN_USEDAC                    (0x1UL<<7)
N#define DEV_DAC_HP_CTL0_HSPA1_DAC1_EN_MASK                      (0x1UL<<7)
N#define DEV_DAC_HP_CTL0_HSPA1_DAC0_EN_DISABLE                   (0x0UL<<6)
N#define DEV_DAC_HP_CTL0_HSPA1_DAC0_EN_USEDAC                    (0x1UL<<6)
N#define DEV_DAC_HP_CTL0_HSPA1_DAC0_EN_MASK                      (0x1UL<<6)
N#define DEV_DAC_HP_CTL0_HSPA0_MIX1_EN_DISABLE                   (0x0UL<<5)
N#define DEV_DAC_HP_CTL0_HSPA0_MIX1_EN_USEMIX1                   (0x1UL<<5)
N#define DEV_DAC_HP_CTL0_HSPA0_MIX1_EN_MASK                      (0x1UL<<5)
N#define DEV_DAC_HP_CTL0_HSPA0_MIX0_EN_DISABLE                   (0x0UL<<4)
N#define DEV_DAC_HP_CTL0_HSPA0_MIX0_EN_USEMIX0                   (0x1UL<<4)
N#define DEV_DAC_HP_CTL0_HSPA0_MIX0_EN_MASK                      (0x1UL<<4)
N#define DEV_DAC_HP_CTL0_HSPA0_DAC1_EN_DISABLE                   (0x0UL<<3)
N#define DEV_DAC_HP_CTL0_HSPA0_DAC1_EN_ENABLE                    (0x1UL<<3)
N#define DEV_DAC_HP_CTL0_HSPA0_DAC1_EN_MASK                      (0x1UL<<3)
N#define DEV_DAC_HP_CTL0_HSPA0_DAC0_EN_DISABLE                   (0x0UL<<2)
N#define DEV_DAC_HP_CTL0_HSPA0_DAC0_EN_ENABLE                    (0x1UL<<2)
N#define DEV_DAC_HP_CTL0_HSPA0_DAC0_EN_MASK                      (0x1UL<<2)
N#define DEV_DAC_HP_CTL0_HSPA1_EN_DISABLE                        (0x0UL<<1)
N#define DEV_DAC_HP_CTL0_HSPA1_EN_ENABLE                         (0x1UL<<1)
N#define DEV_DAC_HP_CTL0_HSPA1_EN_MASK                           (0x1UL<<1)
N#define DEV_DAC_HP_CTL0_HSPA0_EN_DISABLE                        (0x0UL<<0)
N#define DEV_DAC_HP_CTL0_HSPA0_EN_ENABLE                         (0x1UL<<0)
N#define DEV_DAC_HP_CTL0_HSPA0_EN_MASK                           (0x1UL<<0)
N/****DAC_HP_CTL0 end****/
N
N
N/***********************************DAC_LO_CTL0***********************************/
N#define DEV_DAC_LO_CTL0_LO_IBIAS_CTL_5U                         (0x0UL<<17)
N#define DEV_DAC_LO_CTL0_LO_IBIAS_CTL_10U                        (0x1UL<<17)
N#define DEV_DAC_LO_CTL0_LO_IBIAS_CTL_15U                        (0x2UL<<17)
N#define DEV_DAC_LO_CTL0_LO_IBIAS_CTL_2_5U                       (0x3UL<<17)
N#define DEV_DAC_LO_CTL0_LO_IBIAS_CTL_MASK                       (0x3UL<<17)
N#define DEV_DAC_LO_CTL0_LO_PD_STUP_ENABLESTARTUP                (0x0UL<<16)
N#define DEV_DAC_LO_CTL0_LO_PD_STUP_POWERDOWNSTARTUP             (0x1UL<<16)
N#define DEV_DAC_LO_CTL0_LO_PD_STUP_MASK                         (0x1UL<<16)
N#define DEV_DAC_LO_CTL0_LO_VCMSTUP_CTL_MASK                     (0x3UL<<14)
N#define DEV_DAC_LO_CTL0_LO_FASTSTUP_DISABLEFASTSTARTUP          (0x0UL<<13)
N#define DEV_DAC_LO_CTL0_LO_FASTSTUP_ENABLEFASTSTARTUP           (0x1UL<<13)
N#define DEV_DAC_LO_CTL0_LO_FASTSTUP_MASK                        (0x1UL<<13)
N#define DEV_DAC_LO_CTL0_LO_CHOP_EN_DISABLE                      (0x0UL<<12)
N#define DEV_DAC_LO_CTL0_LO_CHOP_EN_ENABLE                       (0x1UL<<12)
N#define DEV_DAC_LO_CTL0_LO_CHOP_EN_MASK                         (0x1UL<<12)
N#define DEV_DAC_LO_CTL0_LO1_MIX1_EN_DISABLE                     (0x0UL<<11)
N#define DEV_DAC_LO_CTL0_LO1_MIX1_EN_USEMIX1                     (0x1UL<<11)
N#define DEV_DAC_LO_CTL0_LO1_MIX1_EN_MASK                        (0x1UL<<11)
N#define DEV_DAC_LO_CTL0_LO1_MIX0_EN_DISABLE                     (0x0UL<<10)
N#define DEV_DAC_LO_CTL0_LO1_MIX0_EN_USEMIX0                     (0x1UL<<10)
N#define DEV_DAC_LO_CTL0_LO1_MIX0_EN_MASK                        (0x1UL<<10)
N#define DEV_DAC_LO_CTL0_LO1_DAC1_EN_DISABLE                     (0x0UL<<9)
N#define DEV_DAC_LO_CTL0_LO1_DAC1_EN_USEDAC                      (0x1UL<<9)
N#define DEV_DAC_LO_CTL0_LO1_DAC1_EN_MASK                        (0x1UL<<9)
N#define DEV_DAC_LO_CTL0_LO1_DAC0_EN_DISABLE                     (0x0UL<<8)
N#define DEV_DAC_LO_CTL0_LO1_DAC0_EN_USEDAC                      (0x1UL<<8)
N#define DEV_DAC_LO_CTL0_LO1_DAC0_EN_MASK                        (0x1UL<<8)
N#define DEV_DAC_LO_CTL0_LO0_MIX1_EN_DISABLE                     (0x0UL<<7)
N#define DEV_DAC_LO_CTL0_LO0_MIX1_EN_USEMIX1                     (0x1UL<<7)
N#define DEV_DAC_LO_CTL0_LO0_MIX1_EN_MASK                        (0x1UL<<7)
N#define DEV_DAC_LO_CTL0_LO0_MIX0_EN_DISABLE                     (0x0UL<<6)
N#define DEV_DAC_LO_CTL0_LO0_MIX0_EN_USEMIX0                     (0x1UL<<6)
N#define DEV_DAC_LO_CTL0_LO0_MIX0_EN_MASK                        (0x1UL<<6)
N#define DEV_DAC_LO_CTL0_LO0_DAC1_EN_DISABLE                     (0x0UL<<5)
N#define DEV_DAC_LO_CTL0_LO0_DAC1_EN_USEDAC                      (0x1UL<<5)
N#define DEV_DAC_LO_CTL0_LO0_DAC1_EN_MASK                        (0x1UL<<5)
N#define DEV_DAC_LO_CTL0_LO0_DAC0_EN_DISABLE                     (0x0UL<<4)
N#define DEV_DAC_LO_CTL0_LO0_DAC0_EN_USEDAC                      (0x1UL<<4)
N#define DEV_DAC_LO_CTL0_LO0_DAC0_EN_MASK                        (0x1UL<<4)
N#define DEV_DAC_LO_CTL0_LO1_DIFF_EN_DISABLE                     (0x0UL<<3)
N#define DEV_DAC_LO_CTL0_LO1_DIFF_EN_ENABLE                      (0x1UL<<3)
N#define DEV_DAC_LO_CTL0_LO1_DIFF_EN_MASK                        (0x1UL<<3)
N#define DEV_DAC_LO_CTL0_LO1_EN_DISABLE                          (0x0UL<<2)
N#define DEV_DAC_LO_CTL0_LO1_EN_ENABLE                           (0x1UL<<2)
N#define DEV_DAC_LO_CTL0_LO1_EN_MASK                             (0x1UL<<2)
N#define DEV_DAC_LO_CTL0_LO0_DIFF_EN_DISABLE                     (0x0UL<<1)
N#define DEV_DAC_LO_CTL0_LO0_DIFF_EN_ENABLE                      (0x1UL<<1)
N#define DEV_DAC_LO_CTL0_LO0_DIFF_EN_MASK                        (0x1UL<<1)
N#define DEV_DAC_LO_CTL0_LO0_EN_DISABLE                          (0x0UL<<0)
N#define DEV_DAC_LO_CTL0_LO0_EN_ENABLE                           (0x1UL<<0)
N#define DEV_DAC_LO_CTL0_LO0_EN_MASK                             (0x1UL<<0)
N/****DAC_LO_CTL0 end****/
N
N
N/***********************************DAC_LO_CTL1***********************************/
N#define DEV_DAC_LO_CTL1_RAMP_TIME_MASK                          (0xffffUL<<16)
N#define DEV_DAC_LO_CTL1_LO1_RAMP_DN_EN_DISABLE                  (0x0UL<<3)
N#define DEV_DAC_LO_CTL1_LO1_RAMP_DN_EN_ENABLE                   (0x1UL<<3)
N#define DEV_DAC_LO_CTL1_LO1_RAMP_DN_EN_MASK                     (0x1UL<<3)
N#define DEV_DAC_LO_CTL1_LO1_RAMP_UP_EN_DISABLE                  (0x0UL<<2)
N#define DEV_DAC_LO_CTL1_LO1_RAMP_UP_EN_ENABLE                   (0x1UL<<2)
N#define DEV_DAC_LO_CTL1_LO1_RAMP_UP_EN_MASK                     (0x1UL<<2)
N#define DEV_DAC_LO_CTL1_LO0_RAMP_DN_EN_DISABLE                  (0x0UL<<1)
N#define DEV_DAC_LO_CTL1_LO0_RAMP_DN_EN_ENABLE                   (0x1UL<<1)
N#define DEV_DAC_LO_CTL1_LO0_RAMP_DN_EN_MASK                     (0x1UL<<1)
N#define DEV_DAC_LO_CTL1_LO0_RAMP_UP_EN_DISABLE                  (0x0UL<<0)
N#define DEV_DAC_LO_CTL1_LO0_RAMP_UP_EN_ENABLE                   (0x1UL<<0)
N#define DEV_DAC_LO_CTL1_LO0_RAMP_UP_EN_MASK                     (0x1UL<<0)
N/****DAC_LO_CTL1 end****/
N
N
N/***********************************DAC_LO_CTL2***********************************/
N#define DEV_DAC_LO_CTL2_TOTAL_NUM_MASK                          (0xffffUL<<16)
N#define DEV_DAC_LO_CTL2_HIGH_NUM_MASK                           (0xffffUL<<0)
N/****DAC_LO_CTL2 end****/
N
N
N/***********************************DAC_HP_CTL1***********************************/
N#define DEV_DAC_HP_CTL1_DIV_CNT_MASK                            (0xffUL<<0)
N/****DAC_HP_CTL1 end****/
N
N
N/***********************************CHNL_IIR register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    B0;                                      /* 0x0    Left. Channel IIR0 Coefficient B0 */
X    volatile    uint32_t    B0;                                       
N    __IO    uint32_t    B1;                                      /* 0x4    Left. Channel IIR0 Coefficient B1 */
X    volatile    uint32_t    B1;                                       
N    __IO    uint32_t    B2;                                      /* 0x8    Left. Channel IIR0 Coefficient B2 */
X    volatile    uint32_t    B2;                                       
N    __IO    uint32_t    A1;                                      /* 0xc    Left. Channel IIR0 Coefficient A1 */
X    volatile    uint32_t    A1;                                       
N    __IO    uint32_t    A2;                                      /* 0x10    Left. Channel IIR0 Coefficient A2 */
X    volatile    uint32_t    A2;                                       
N            uint32_t    RESERVED0[59];
N}CHNL_IIR_RegDef;
N/****CHNL_IIR end****/
N
N/***********************************CHNR_IIR register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    B0;                                      /* 0x800    Left. Channel IIR2 Coefficient B0 */
X    volatile    uint32_t    B0;                                       
N    __IO    uint32_t    B1;                                      /* 0x804    Left. Channel IIR2 Coefficient B1 */
X    volatile    uint32_t    B1;                                       
N    __IO    uint32_t    B2;                                      /* 0x808    Left. Channel IIR2 Coefficient B2 */
X    volatile    uint32_t    B2;                                       
N    __IO    uint32_t    A1;                                      /* 0x80c    Left. Channel IIR2 Coefficient A1 */
X    volatile    uint32_t    A1;                                       
N    __IO    uint32_t    A2;                                      /* 0x810    Left. Channel IIR2 Coefficient A2 */
X    volatile    uint32_t    A2;                                       
N            uint32_t    RESERVED0[59];
N}CHNR_IIR_RegDef;
N/****CHNR_IIR end****/
N
N/***********************************DEV_DAC register***********************************/
Ntypedef struct{
N
N            CHNL_IIR_RegDef    CHNL_IIR[7];                             /* 0x0    Left. Channel IIR0 Coefficient B0 */
N    __IO    uint32_t    CHNL_IIR7_B0;                            /* 0x700    Left. Channel IIR2 Coefficient B2 */
X    volatile    uint32_t    CHNL_IIR7_B0;                             
N    __IO    uint32_t    CHNL_IIR7_B1;                            /* 0x704    Left. Channel IIR2 Coefficient A2 */
X    volatile    uint32_t    CHNL_IIR7_B1;                             
N    __IO    uint32_t    CHNL_IIR7_B2;                            /* 0x708    Left. Channel IIR3 Coefficient B1 */
X    volatile    uint32_t    CHNL_IIR7_B2;                             
N    __IO    uint32_t    CHNL_IIR7_A1;                            /* 0x70c    Left. Channel IIR3 Coefficient A1 */
X    volatile    uint32_t    CHNL_IIR7_A1;                             
N    __IO    uint32_t    CHNL_IIR7_A2;                            /* 0x710    Left. Channel IIR3 Coefficient A2 */
X    volatile    uint32_t    CHNL_IIR7_A2;                             
N            uint32_t    RESERVED0[59];
N            CHNR_IIR_RegDef    CHNR_IIR[7];                             /* 0x800    Left. Channel IIR4 Coefficient B0 */
N    __IO    uint32_t    CHNR_IIR7_B0;                            /* 0xf00    Left. Channel IIR5 Coefficient B2 */
X    volatile    uint32_t    CHNR_IIR7_B0;                             
N    __IO    uint32_t    CHNR_IIR7_B1;                            /* 0xf04    Left. Channel IIR5 Coefficient A1 */
X    volatile    uint32_t    CHNR_IIR7_B1;                             
N    __IO    uint32_t    CHNR_IIR7_B2;                            /* 0xf08    Left. Channel IIR5 Coefficient A2 */
X    volatile    uint32_t    CHNR_IIR7_B2;                             
N    __IO    uint32_t    CHNR_IIR7_A1;                            /* 0xf0c    Left. Channel IIR6 Coefficient B0 */
X    volatile    uint32_t    CHNR_IIR7_A1;                             
N    __IO    uint32_t    CHNR_IIR7_A2;                            /* 0xf10    Left. Channel IIR6 Coefficient B1 */
X    volatile    uint32_t    CHNR_IIR7_A2;                             
N            uint32_t    RESERVED1[28];
N    __IO    uint32_t    DRC_LMTH;                                /* 0xf84    Left. Channel IIR6 Coefficient B2 */
X    volatile    uint32_t    DRC_LMTH;                                 
N    __IO    uint32_t    DRC_SLOP;                                /* 0xf88    Left. Channel IIR6 Coefficient A1 */
X    volatile    uint32_t    DRC_SLOP;                                 
N    __IO    uint32_t    DRC_PEAK_AT;                             /* 0xf8c    Left. Channel IIR6 Coefficient A2 */
X    volatile    uint32_t    DRC_PEAK_AT;                              
N    __IO    uint32_t    DRC_PEAK_RT;                             /* 0xf90    Left. Channel IIR7 Coefficient B0 */
X    volatile    uint32_t    DRC_PEAK_RT;                              
N    __IO    uint32_t    DRC_GAIN_AT;                             /* 0xf94    Left. Channel IIR7 Coefficient B1 */
X    volatile    uint32_t    DRC_GAIN_AT;                              
N    __IO    uint32_t    DRC_GAIN_RT;                             /* 0xf98    Left. Channel IIR7 Coefficient B2 */
X    volatile    uint32_t    DRC_GAIN_RT;                              
N            uint32_t    RESERVED2[9];
N    __IO    uint32_t    DSD_COE_B1;                              /* 0xfc0    Left. Channel IIR7 Coefficient A1 */
X    volatile    uint32_t    DSD_COE_B1;                               
N    __IO    uint32_t    DSD_COE_B2;                              /* 0xfc4    Left. Channel IIR7 Coefficient A2 */
X    volatile    uint32_t    DSD_COE_B2;                               
N    __IO    uint32_t    DSD_COE_A1;                              /* 0xfc8    Right Channel IIR0 Coefficient B0 */
X    volatile    uint32_t    DSD_COE_A1;                               
N    __IO    uint32_t    DSD_COE_A2;                              /* 0xfcc    Right Channel IIR0 Coefficient B1 */
X    volatile    uint32_t    DSD_COE_A2;                               
N    __IO    uint32_t    DSD_COE_A3;                              /* 0xfd0    Right Channel IIR0 Coefficient B2 */
X    volatile    uint32_t    DSD_COE_A3;                               
N            uint32_t    RESERVED3[11];
N    __IO    uint32_t    CFG0;                                    /* 0x1000    Right Channel IIR0 Coefficient A1 */
X    volatile    uint32_t    CFG0;                                     
N    __IO    uint32_t    CFG1;                                    /* 0x1004    Right Channel IIR0 Coefficient A2 */
X    volatile    uint32_t    CFG1;                                     
N    __IO    uint32_t    CTL;                                     /* 0x1008    Right Channel IIR1 Coefficient B0 */
X    volatile    uint32_t    CTL;                                      
N    __IO    uint32_t    IE;                                      /* 0x100c    Right Channel IIR1 Coefficient B1 */
X    volatile    uint32_t    IE;                                       
N    __IO    uint32_t    PD;                                      /* 0x1010    Right Channel IIR1 Coefficient B2 */
X    volatile    uint32_t    PD;                                       
N    __I     uint32_t    STA;                                     /* 0x1014    Right Channel IIR1 Coefficient A1 */
X    volatile const     uint32_t    STA;                                      
N    __O     uint32_t    TBUF;                                    /* 0x1018    Right Channel IIR1 Coefficient A2 */
X    volatile     uint32_t    TBUF;                                     
N    __IO    uint32_t    CFG2;                                    /* 0x101c    Right Channel IIR2 Coefficient B0 */
X    volatile    uint32_t    CFG2;                                     
N    __IO    uint32_t    DCB;                                     /* 0x1020    Right Channel IIR2 Coefficient B1 */
X    volatile    uint32_t    DCB;                                      
N            uint32_t    RESERVED4[1015];
N    __IO    uint32_t    BIST_RM;                                 /* 0x2000    Right Channel IIR2 Coefficient B2 */
X    volatile    uint32_t    BIST_RM;                                  
N    __IO    uint32_t    BIST_EN;                                 /* 0x2004    Right Channel IIR2 Coefficient A1 */
X    volatile    uint32_t    BIST_EN;                                  
N    __I     uint32_t    BIST_DONE;                               /* 0x2008    Right Channel IIR2 Coefficient A2 */
X    volatile const     uint32_t    BIST_DONE;                                
N    __I     uint32_t    BIST_FAIL;                               /* 0x200c    Right Channel IIR3 Coefficient B0 */
X    volatile const     uint32_t    BIST_FAIL;                                
N            uint32_t    RESERVED5[6140];
N    __IO    uint32_t    DA_CTL;                                  /* 0x8000    Right Channel IIR3 Coefficient B1 */
X    volatile    uint32_t    DA_CTL;                                   
N    __IO    uint32_t    CP_CTL;                                  /* 0x8004    Right Channel IIR3 Coefficient B2 */
X    volatile    uint32_t    CP_CTL;                                   
N    __IO    uint32_t    HP_CTL0;                                 /* 0x8008    Right Channel IIR3 Coefficient A1 */
X    volatile    uint32_t    HP_CTL0;                                  
N    __IO    uint32_t    LO_CTL0;                                 /* 0x800c    Right Channel IIR3 Coefficient A2 */
X    volatile    uint32_t    LO_CTL0;                                  
N    __IO    uint32_t    LO_CTL1;                                 /* 0x8010    Right Channel IIR4 Coefficient B0 */
X    volatile    uint32_t    LO_CTL1;                                  
N    __IO    uint32_t    LO_CTL2;                                 /* 0x8014    Right Channel IIR4 Coefficient B1 */
X    volatile    uint32_t    LO_CTL2;                                  
N    __IO    uint32_t    HP_CTL1;                                 /* 0x8018    Right Channel IIR4 Coefficient B2 */
X    volatile    uint32_t    HP_CTL1;                                  
N}DEV_DAC_RegDef;
N/****DEV_DAC end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 77 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_src.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_src.h" 1
N#ifndef __DEV_SRC_H__
N#define __DEV_SRC_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************SRC_CHNn_LSR***********************************/
N#define DEV_SRC_CHNn_LSR_MASK                                   (0xffffffffUL<<0)
N/****SRC_CHNn_LSR end****/
N
N
N/***********************************SRC_CHNn_USR***********************************/
N#define DEV_SRC_CHNn_USR_MASK                                   (0xffffffffUL<<0)
N/****SRC_CHNn_USR end****/
N
N
N/***********************************SRC_CHNn_LTH***********************************/
N#define DEV_SRC_CHNn_LTH_MASK                                   (0xfffUL<<0)
N/****SRC_CHNn_LTH end****/
N
N
N/***********************************SRC_CHNn_UTH***********************************/
N#define DEV_SRC_CHNn_UTH_MASK                                   (0xfffUL<<0)
N/****SRC_CHNn_UTH end****/
N
N
N/***********************************SRC_CHNn_CFG***********************************/
N#define DEV_SRC_CHNn_CFG_OUTPUT_FMT_HIGH16BIT                   (0x0UL<<26)
N#define DEV_SRC_CHNn_CFG_OUTPUT_FMT_LOW_16BIT                   (0x1UL<<26)
N#define DEV_SRC_CHNn_CFG_OUTPUT_FMT_HIGH24BIT                   (0x2UL<<26)
N#define DEV_SRC_CHNn_CFG_OUTPUT_FMT_LOW_24BIT                   (0x3UL<<26)
N#define DEV_SRC_CHNn_CFG_OUTPUT_FMT_MASK                        (0x3UL<<26)
N#define DEV_SRC_CHNn_CFG_INPUT_FMT_HIGH16BIT                    (0x0UL<<24)
N#define DEV_SRC_CHNn_CFG_INPUT_FMT_LOW_16BIT                    (0x1UL<<24)
N#define DEV_SRC_CHNn_CFG_INPUT_FMT_HIGH24BIT                    (0x2UL<<24)
N#define DEV_SRC_CHNn_CFG_INPUT_FMT_LOW_24BIT                    (0x3UL<<24)
N#define DEV_SRC_CHNn_CFG_INPUT_FMT_MASK                         (0x3UL<<24)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL3_23                          (0x0UL<<22)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL3_24                          (0x1UL<<22)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL3_25                          (0x2UL<<22)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL3_MASK                        (0x3UL<<22)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL2_19                          (0x0UL<<20)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL2_20                          (0x1UL<<20)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL2_21                          (0x2UL<<20)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL2_22                          (0x3UL<<20)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL2_MASK                        (0x3UL<<20)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL1_18                          (0x0UL<<18)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL1_19                          (0x1UL<<18)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL1_20                          (0x2UL<<18)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL1_21                          (0x3UL<<18)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL1_MASK                        (0x3UL<<18)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL0_19                          (0x0UL<<16)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL0_20                          (0x1UL<<16)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL0_21                          (0x2UL<<16)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL0_22                          (0x3UL<<16)
N#define DEV_SRC_CHNn_CFG_SHIFT_SEL0_MASK                        (0x3UL<<16)
N#define DEV_SRC_CHNn_CFG_WBUF_HALF_LVL_256                      (0x0UL<<12)
N#define DEV_SRC_CHNn_CFG_WBUF_HALF_LVL_512                      (0x1UL<<12)
N#define DEV_SRC_CHNn_CFG_WBUF_HALF_LVL_768                      (0x2UL<<12)
N#define DEV_SRC_CHNn_CFG_WBUF_HALF_LVL_1024                     (0x3UL<<12)
N#define DEV_SRC_CHNn_CFG_WBUF_HALF_LVL_MASK                     (0x3UL<<12)
N#define DEV_SRC_CHNn_CFG_RX_DEV_SEL_DEV0RXFIFO                  (0x0UL<<8)
N#define DEV_SRC_CHNn_CFG_RX_DEV_SEL_DEV1RXFIFO                  (0x1UL<<8)
N#define DEV_SRC_CHNn_CFG_RX_DEV_SEL_DEV2RXFIFO                  (0x2UL<<8)
N#define DEV_SRC_CHNn_CFG_RX_DEV_SEL_DEV3RXFIFO                  (0x3UL<<8)
N#define DEV_SRC_CHNn_CFG_RX_DEV_SEL_DEV4RXFIFO                  (0x4UL<<8)
N#define DEV_SRC_CHNn_CFG_RX_DEV_SEL_DEV5RXFIFO                  (0x5UL<<8)
N#define DEV_SRC_CHNn_CFG_RX_DEV_SEL_DEV6RXFIFO                  (0x6UL<<8)
N#define DEV_SRC_CHNn_CFG_RX_DEV_SEL_DEV7RXFIFO                  (0x7UL<<8)
N#define DEV_SRC_CHNn_CFG_RX_DEV_SEL_MASK                        (0x7UL<<8)
N#define DEV_SRC_CHNn_CFG_TX_DEV_SEL_DEV0TXFIFO                  (0x0UL<<4)
N#define DEV_SRC_CHNn_CFG_TX_DEV_SEL_DEV1TXFIFO                  (0x1UL<<4)
N#define DEV_SRC_CHNn_CFG_TX_DEV_SEL_DEV2TXFIFO                  (0x2UL<<4)
N#define DEV_SRC_CHNn_CFG_TX_DEV_SEL_DEV3TXFIFO                  (0x3UL<<4)
N#define DEV_SRC_CHNn_CFG_TX_DEV_SEL_DEV4TXFIFO                  (0x4UL<<4)
N#define DEV_SRC_CHNn_CFG_TX_DEV_SEL_DEV5TXFIFO                  (0x5UL<<4)
N#define DEV_SRC_CHNn_CFG_TX_DEV_SEL_DEV6TXFIFO                  (0x6UL<<4)
N#define DEV_SRC_CHNn_CFG_TX_DEV_SEL_DEV7TXFIFO                  (0x7UL<<4)
N#define DEV_SRC_CHNn_CFG_TX_DEV_SEL_MASK                        (0x7UL<<4)
N#define DEV_SRC_CHNn_CFG_MONO_STEREO                            (0x0UL<<3)
N#define DEV_SRC_CHNn_CFG_MONO_MONO                              (0x1UL<<3)
N#define DEV_SRC_CHNn_CFG_MONO_MASK                              (0x1UL<<3)
N#define DEV_SRC_CHNn_CFG_CBUF_EN_DISABLE                        (0x0UL<<2)
N#define DEV_SRC_CHNn_CFG_CBUF_EN_ENABLE                         (0x1UL<<2)
N#define DEV_SRC_CHNn_CFG_CBUF_EN_MASK                           (0x1UL<<2)
N#define DEV_SRC_CHNn_CFG_MODE_SEL_SOFTSRC                       (0x0UL<<1)
N#define DEV_SRC_CHNn_CFG_MODE_SEL_HARDSRC                       (0x1UL<<1)
N#define DEV_SRC_CHNn_CFG_MODE_SEL_MASK                          (0x1UL<<1)
N#define DEV_SRC_CHNn_CFG_Enable_DISABLE                         (0x0UL<<0)
N#define DEV_SRC_CHNn_CFG_Enable_ENABLE                          (0x1UL<<0)
N#define DEV_SRC_CHNn_CFG_Enable_MASK                            (0x1UL<<0)
N/****SRC_CHNn_CFG end****/
N
N
N/***********************************SRC_CHNn_IE***********************************/
N#define DEV_SRC_CHNn_IE_WBUF_AE                                 (0x1UL<<5)
N#define DEV_SRC_CHNn_IE_WBUF_AF                                 (0x1UL<<4)
N#define DEV_SRC_CHNn_IE_RX_FIFO_UF                              (0x1UL<<3)
N#define DEV_SRC_CHNn_IE_TX_FIFO_OF                              (0x1UL<<2)
N#define DEV_SRC_CHNn_IE_RX_FIFO_HFUL                            (0x1UL<<1)
N#define DEV_SRC_CHNn_IE_TX_FIFO_HEMP                            (0x1UL<<0)
N/****SRC_CHNn_IE end****/
N
N
N/***********************************SRC_CHNn_PD***********************************/
N#define DEV_SRC_CHNn_PD_WBUF_AE                                 (0x1UL<<5)
N#define DEV_SRC_CHNn_PD_WBUF_AF                                 (0x1UL<<4)
N#define DEV_SRC_CHNn_PD_RX_FIFO_UF                              (0x1UL<<3)
N#define DEV_SRC_CHNn_PD_TX_FIFO_OF                              (0x1UL<<2)
N#define DEV_SRC_CHNn_PD_RX_FIFO_HFUL                            (0x1UL<<1)
N#define DEV_SRC_CHNn_PD_TX_FIFO_HEMP                            (0x1UL<<0)
N/****SRC_CHNn_PD end****/
N
N
N/***********************************SRC_CHNn_STA***********************************/
N#define DEV_SRC_CHNn_STA_RX_FIFO_RLVL_MASK                      (0x7UL<<20)
N#define DEV_SRC_CHNn_STA_TX_FIFO_WLVL_MASK                      (0x7UL<<16)
N#define DEV_SRC_CHNn_STA_WBUF_AE                                (0x1UL<<13)
N#define DEV_SRC_CHNn_STA_WBUF_AF                                (0x1UL<<12)
N#define DEV_SRC_CHNn_STA_WBUF_WLVL_MASK                         (0xfffUL<<0)
N/****SRC_CHNn_STA end****/
N
N
N/***********************************SRC_CHNn_CBUF***********************************/
N#define DEV_SRC_CHNn_CBUF_MASK                                  (0xffffffUL<<8)
N/****SRC_CHNn_CBUF end****/
N
N
N/***********************************SRC_CHNn_WBUF***********************************/
N#define DEV_SRC_CHNn_WBUF_MASK                                  (0xffffffffUL<<0)
N/****SRC_CHNn_WBUF end****/
N
N
N/***********************************SRC_CHNn_RBUF***********************************/
N#define DEV_SRC_CHNn_RBUF_MASK                                  (0xffffffffUL<<0)
N/****SRC_CHNn_RBUF end****/
N
N
N/***********************************SRC_BIST_RM***********************************/
N#define DEV_SRC_BIST_RM_CHN1_FBUF_RM_MASK                       (0xfUL<<24)
N#define DEV_SRC_BIST_RM_CHN1_RBUF_RM_MASK                       (0xfUL<<20)
N#define DEV_SRC_BIST_RM_CHN1_CBUF_RM_MASK                       (0xfUL<<16)
N#define DEV_SRC_BIST_RM_CHN0_FBUF_RM_MASK                       (0xfUL<<8)
N#define DEV_SRC_BIST_RM_CHN0_RBUF_RM_MASK                       (0xfUL<<4)
N#define DEV_SRC_BIST_RM_CHN0_CBUF_RM_MASK                       (0xfUL<<0)
N/****SRC_BIST_RM end****/
N
N
N/***********************************SRC_BIST_EN***********************************/
N#define DEV_SRC_BIST_EN_CHN1_FBUF_LS_DISABLE                    (0x0UL<<26)
N#define DEV_SRC_BIST_EN_CHN1_FBUF_LS_ENABLE                     (0x1UL<<26)
N#define DEV_SRC_BIST_EN_CHN1_FBUF_LS_MASK                       (0x1UL<<26)
N#define DEV_SRC_BIST_EN_CHN1_RBUF_LS_DISABLE                    (0x0UL<<25)
N#define DEV_SRC_BIST_EN_CHN1_RBUF_LS_ENABLE                     (0x1UL<<25)
N#define DEV_SRC_BIST_EN_CHN1_RBUF_LS_MASK                       (0x1UL<<25)
N#define DEV_SRC_BIST_EN_CHN1_CBUF_LS_DISABLE                    (0x0UL<<24)
N#define DEV_SRC_BIST_EN_CHN1_CBUF_LS_ENABLE                     (0x1UL<<24)
N#define DEV_SRC_BIST_EN_CHN1_CBUF_LS_MASK                       (0x1UL<<24)
N#define DEV_SRC_BIST_EN_CHN1_FBUF_RME_DISABLE                   (0x0UL<<21)
N#define DEV_SRC_BIST_EN_CHN1_FBUF_RME_ENABLE                    (0x1UL<<21)
N#define DEV_SRC_BIST_EN_CHN1_FBUF_RME_MASK                      (0x1UL<<21)
N#define DEV_SRC_BIST_EN_CHN1_FBUF_EN_DISABLE                    (0x0UL<<20)
N#define DEV_SRC_BIST_EN_CHN1_FBUF_EN_ENABLE                     (0x1UL<<20)
N#define DEV_SRC_BIST_EN_CHN1_FBUF_EN_MASK                       (0x1UL<<20)
N#define DEV_SRC_BIST_EN_CHN1_RBUF_RME_DISABLE                   (0x0UL<<19)
N#define DEV_SRC_BIST_EN_CHN1_RBUF_RME_ENABLE                    (0x1UL<<19)
N#define DEV_SRC_BIST_EN_CHN1_RBUF_RME_MASK                      (0x1UL<<19)
N#define DEV_SRC_BIST_EN_CHN1_RBUF_EN_DISABLE                    (0x0UL<<18)
N#define DEV_SRC_BIST_EN_CHN1_RBUF_EN_ENABLE                     (0x1UL<<18)
N#define DEV_SRC_BIST_EN_CHN1_RBUF_EN_MASK                       (0x1UL<<18)
N#define DEV_SRC_BIST_EN_CHN1_CBUF_RME_DISABLE                   (0x0UL<<17)
N#define DEV_SRC_BIST_EN_CHN1_CBUF_RME_ENABLE                    (0x1UL<<17)
N#define DEV_SRC_BIST_EN_CHN1_CBUF_RME_MASK                      (0x1UL<<17)
N#define DEV_SRC_BIST_EN_CHN1_CBUF_EN_DISABLE                    (0x0UL<<16)
N#define DEV_SRC_BIST_EN_CHN1_CBUF_EN_ENABLE                     (0x1UL<<16)
N#define DEV_SRC_BIST_EN_CHN1_CBUF_EN_MASK                       (0x1UL<<16)
N#define DEV_SRC_BIST_EN_CHN0_FBUF_LS_DISABLE                    (0x0UL<<10)
N#define DEV_SRC_BIST_EN_CHN0_FBUF_LS_ENABLE                     (0x1UL<<10)
N#define DEV_SRC_BIST_EN_CHN0_FBUF_LS_MASK                       (0x1UL<<10)
N#define DEV_SRC_BIST_EN_CHN0_WBUF_LS_DISABLE                    (0x0UL<<9)
N#define DEV_SRC_BIST_EN_CHN0_WBUF_LS_ENABLE                     (0x1UL<<9)
N#define DEV_SRC_BIST_EN_CHN0_WBUF_LS_MASK                       (0x1UL<<9)
N#define DEV_SRC_BIST_EN_CHN0_CBUF_LS_DISABLE                    (0x0UL<<8)
N#define DEV_SRC_BIST_EN_CHN0_CBUF_LS_ENABLE                     (0x1UL<<8)
N#define DEV_SRC_BIST_EN_CHN0_CBUF_LS_MASK                       (0x1UL<<8)
N#define DEV_SRC_BIST_EN_CHN0_FBUF_RME_DISABLE                   (0x0UL<<5)
N#define DEV_SRC_BIST_EN_CHN0_FBUF_RME_ENABLE                    (0x1UL<<5)
N#define DEV_SRC_BIST_EN_CHN0_FBUF_RME_MASK                      (0x1UL<<5)
N#define DEV_SRC_BIST_EN_CHN0_FBUF_EN_DISABLE                    (0x0UL<<4)
N#define DEV_SRC_BIST_EN_CHN0_FBUF_EN_ENABLE                     (0x1UL<<4)
N#define DEV_SRC_BIST_EN_CHN0_FBUF_EN_MASK                       (0x1UL<<4)
N#define DEV_SRC_BIST_EN_CHN0_WBUF_RME_DISABLE                   (0x0UL<<3)
N#define DEV_SRC_BIST_EN_CHN0_WBUF_RME_ENABLE                    (0x1UL<<3)
N#define DEV_SRC_BIST_EN_CHN0_WBUF_RME_MASK                      (0x1UL<<3)
N#define DEV_SRC_BIST_EN_CHN0_WBUF_EN_DISABLE                    (0x0UL<<2)
N#define DEV_SRC_BIST_EN_CHN0_WBUF_EN_ENABLE                     (0x1UL<<2)
N#define DEV_SRC_BIST_EN_CHN0_WBUF_EN_MASK                       (0x1UL<<2)
N#define DEV_SRC_BIST_EN_CHN0_CBUF_RME_DISABLE                   (0x0UL<<1)
N#define DEV_SRC_BIST_EN_CHN0_CBUF_RME_ENABLE                    (0x1UL<<1)
N#define DEV_SRC_BIST_EN_CHN0_CBUF_RME_MASK                      (0x1UL<<1)
N#define DEV_SRC_BIST_EN_CHN0_CBUF_EN_DISABLE                    (0x0UL<<0)
N#define DEV_SRC_BIST_EN_CHN0_CBUF_EN_ENABLE                     (0x1UL<<0)
N#define DEV_SRC_BIST_EN_CHN0_CBUF_EN_MASK                       (0x1UL<<0)
N/****SRC_BIST_EN end****/
N
N
N/***********************************SRC_BIST_DONE***********************************/
N#define DEV_SRC_BIST_DONE_CHN1_FBUF_DONE                        (0x1UL<<18)
N#define DEV_SRC_BIST_DONE_CHN1_DBUF_DONE                        (0x1UL<<17)
N#define DEV_SRC_BIST_DONE_CHN1_CBUF_DONE                        (0x1UL<<16)
N#define DEV_SRC_BIST_DONE_CHN0_FBUF_DONE                        (0x1UL<<2)
N#define DEV_SRC_BIST_DONE_CHN0_DBUF_DONE                        (0x1UL<<1)
N#define DEV_SRC_BIST_DONE_CHN0_CBUF_DONE                        (0x1UL<<0)
N/****SRC_BIST_DONE end****/
N
N
N/***********************************SRC_BIST_FAIL***********************************/
N#define DEV_SRC_BIST_FAIL_CHN1_FBUF_FAIL                        (0x1UL<<18)
N#define DEV_SRC_BIST_FAIL_CHN1_DBUF_FAIL                        (0x1UL<<17)
N#define DEV_SRC_BIST_FAIL_CHN1_CBUF_FAIL                        (0x1UL<<16)
N#define DEV_SRC_BIST_FAIL_CHN0_FBUF_FAIL                        (0x1UL<<2)
N#define DEV_SRC_BIST_FAIL_CHN0_DBUF_FAIL                        (0x1UL<<1)
N#define DEV_SRC_BIST_FAIL_CHN0_CBUF_FAIL                        (0x1UL<<0)
N/****SRC_BIST_FAIL end****/
N
N
N/***********************************SRC_CHN register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    LSR;                                     /* 0x0    SRC CHNn Lower Sample-Rate Ratio */
X    volatile    uint32_t    LSR;                                      
N    __IO    uint32_t    USR;                                     /* 0x4    SRC CHNn Upper Sample-Rate Ratio */
X    volatile    uint32_t    USR;                                      
N    __IO    uint32_t    LTH;                                     /* 0x8    SRC CHNn Lower Threshold */
X    volatile    uint32_t    LTH;                                      
N    __IO    uint32_t    UTH;                                     /* 0xc    SRC CHNn Upper Threshold */
X    volatile    uint32_t    UTH;                                      
N    __IO    uint32_t    CFG;                                     /* 0x10    SRC CHNn Configure */
X    volatile    uint32_t    CFG;                                      
N    __IO    uint32_t    IE;                                      /* 0x14    SRC CHNn Interrupt Enable */
X    volatile    uint32_t    IE;                                       
N    __IO    uint32_t    PD;                                      /* 0x18    SRC CHNn Interrupt Pending */
X    volatile    uint32_t    PD;                                       
N    __I     uint32_t    STA;                                     /* 0x1c    SRC CHNn Status */
X    volatile const     uint32_t    STA;                                      
N    __IO    uint32_t    CBUF;                                    /* 0x20    SRC CHNn COE buffer */
X    volatile    uint32_t    CBUF;                                     
N    __O     uint32_t    WBUF;                                    /* 0x24    SRC CHNn Data Input buffer */
X    volatile     uint32_t    WBUF;                                     
N    __I     uint32_t    RBUF;                                    /* 0x28    SRC CHNn Data Output buffer */
X    volatile const     uint32_t    RBUF;                                     
N            uint32_t    RESERVED0[53];
N}SRC_CHN_RegDef;
N/****SRC_CHN end****/
N
N/***********************************DEV_SRC register***********************************/
Ntypedef struct{
N
N            SRC_CHN_RegDef    CHN[2];                                  /* 0x0    SRC CHNn Lower Sample-Rate Ratio */
N            uint32_t    RESERVED0[896];
N    __IO    uint32_t    BIST_RM;                                 /* 0x1000    SRC CHNn Configure */
X    volatile    uint32_t    BIST_RM;                                  
N    __IO    uint32_t    BIST_EN;                                 /* 0x1004    SRC CHNn Interrupt Pending */
X    volatile    uint32_t    BIST_EN;                                  
N    __I     uint32_t    BIST_DONE;                               /* 0x1008    SRC CHNn COE buffer */
X    volatile const     uint32_t    BIST_DONE;                                
N    __I     uint32_t    BIST_FAIL;                               /* 0x100c    SRC CHNn Data Output buffer */
X    volatile const     uint32_t    BIST_FAIL;                                
N}DEV_SRC_RegDef;
N/****DEV_SRC end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#endif
L 78 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N#include "dev_gpio.h"
L 1 "..\..\User\kiwi_ft\spv40\peripheral\dev_gpio.h" 1
N#ifndef __DEV_GPIO_H__
N#define __DEV_GPIO_H__
N
N#include "spv40.h"
N/*******************************************************************************
N * Auto-generated Content
N ******************************************************************************/
N
N
N/***********************************GPIOn_CTL***********************************/
N#define DEV_GPIO_CTL_IV_DISABLE                                 (0x0UL<<14)
N#define DEV_GPIO_CTL_IV_ENABLE                                  (0x1UL<<14)
N#define DEV_GPIO_CTL_IV_MASK                                    (0x1UL<<14)
N#define DEV_GPIO_CTL_OV_DISABLE                                 (0x0UL<<13)
N#define DEV_GPIO_CTL_OV_ENABLE                                  (0x1UL<<13)
N#define DEV_GPIO_CTL_OV_MASK                                    (0x1UL<<13)
N#define DEV_GPIO_CTL_DS                                         (0x1UL<<12)
N#define DEV_GPIO_CTL_FAST_DISABLE                               (0x0UL<<11)
N#define DEV_GPIO_CTL_FAST_ENABLE                                (0x1UL<<11)
N#define DEV_GPIO_CTL_FAST_MASK                                  (0x1UL<<11)
N#define DEV_GPIO_CTL_LB_DISABLE                                 (0x0UL<<10)
N#define DEV_GPIO_CTL_LB_ENABLE                                  (0x1UL<<10)
N#define DEV_GPIO_CTL_LB_MASK                                    (0x1UL<<10)
N#define DEV_GPIO_CTL_O                                          (0x1UL<<9)
N#define DEV_GPIO_CTL_PS_PULLDOWN                                (0x0UL<<7)
N#define DEV_GPIO_CTL_PS_PULLUP                                  (0x1UL<<7)
N#define DEV_GPIO_CTL_PS_MASK                                    (0x1UL<<7)
N#define DEV_GPIO_CTL_PE_DISABLE                                 (0x0UL<<6)
N#define DEV_GPIO_CTL_PE_ENABLE                                  (0x1UL<<6)
N#define DEV_GPIO_CTL_PE_MASK                                    (0x1UL<<6)
N#define DEV_GPIO_CTL_IE_DISABLE                                 (0x0UL<<5)
N#define DEV_GPIO_CTL_IE_ENABLE                                  (0x1UL<<5)
N#define DEV_GPIO_CTL_IE_MASK                                    (0x1UL<<5)
N#define DEV_GPIO_CTL_OE_DISABLE                                 (0x0UL<<4)
N#define DEV_GPIO_CTL_OE_ENABLE                                  (0x1UL<<4)
N#define DEV_GPIO_CTL_OE_MASK                                    (0x1UL<<4)
N#define DEV_GPIO_CTL_MFP_MASK                                   (0xfUL<<0)
N/****GPIOn_CTL end****/
N
N
N/***********************************GPIO_OUT0***********************************/
N#define DEV_GPIO_OUT0_MASK                                      (0xffffffffUL<<0)
N/****GPIO_OUT0 end****/
N
N
N/***********************************GPIO_OUT1***********************************/
N#define DEV_GPIO_OUT1_MASK                                      (0xffUL<<0)
N/****GPIO_OUT1 end****/
N
N
N/***********************************GPIO_IN0***********************************/
N#define DEV_GPIO_IN0_MASK                                       (0xffffffffUL<<0)
N/****GPIO_IN0 end****/
N
N
N/***********************************GPIO_IN1***********************************/
N#define DEV_GPIO_IN1_MASK                                       (0xffUL<<0)
N/****GPIO_IN1 end****/
N
N
N/***********************************GPIO_RSTN***********************************/
N#define DEV_GPIO_RSTN_PU_DISABLE                                (0x0UL<<9)
N#define DEV_GPIO_RSTN_PU_ENABLE                                 (0x1UL<<9)
N#define DEV_GPIO_RSTN_PU_MASK                                   (0x1UL<<9)
N#define DEV_GPIO_RSTN_EN_DISABLE                                (0x0UL<<8)
N#define DEV_GPIO_RSTN_EN_ENABLE                                 (0x1UL<<8)
N#define DEV_GPIO_RSTN_EN_MASK                                   (0x1UL<<8)
N#define DEV_GPIO_RSTN_SEL_GPIO                                  (0x27UL<<0)
N#define DEV_GPIO_RSTN_SEL_MASK                                  (0x3fUL<<0)
N/****GPIO_RSTN end****/
N
N
N/***********************************GPIO_ECLK***********************************/
N#define DEV_GPIO_ECLK_EN_DISABLE                                (0x0UL<<8)
N#define DEV_GPIO_ECLK_EN_ENABLE                                 (0x1UL<<8)
N#define DEV_GPIO_ECLK_EN_MASK                                   (0x1UL<<8)
N#define DEV_GPIO_ECLK_SEL_GPIO                                  (0x1fUL<<0)
N#define DEV_GPIO_ECLK_SEL_MASK                                  (0x3fUL<<0)
N/****GPIO_ECLK end****/
N
N
N/***********************************GPIO_ECLK2***********************************/
N#define DEV_GPIO_ECLK2_EN_DISABLE                               (0x0UL<<8)
N#define DEV_GPIO_ECLK2_EN_ENABLE                                (0x1UL<<8)
N#define DEV_GPIO_ECLK2_EN_MASK                                  (0x1UL<<8)
N#define DEV_GPIO_ECLK2_SEL_GPIO                                 (0x1fUL<<0)
N#define DEV_GPIO_ECLK2_SEL_MASK                                 (0x3fUL<<0)
N/****GPIO_ECLK2 end****/
N
N
N/***********************************GPIO_ICn***********************************/
N#define DEV_GPIO_ICn_EVENT_NONE                                 (0x0UL<<6)
N#define DEV_GPIO_ICn_EVENT_RISE                                 (0x1UL<<6)
N#define DEV_GPIO_ICn_EVENT_FALL                                 (0x2UL<<6)
N#define DEV_GPIO_ICn_EVENT_BOTHEDGE                             (0x3UL<<6)
N#define DEV_GPIO_ICn_EVENT_HIGH                                 (0x4UL<<6)
N#define DEV_GPIO_ICn_EVENT_LOW                                  (0x5UL<<6)
N#define DEV_GPIO_ICn_EVENT_MASK                                 (0x7UL<<6)
N#define DEV_GPIO_ICn_SOURCE_MASK                                (0x3fUL<<0)
N/****GPIO_ICn end****/
N
N
N/***********************************GPIO_IE0***********************************/
N#define DEV_GPIO_IE0_MASK                                       (0xfUL<<0)
N/****GPIO_IE0 end****/
N
N
N/***********************************GPIO_IE1***********************************/
N#define DEV_GPIO_IE1_MASK                                       (0xfUL<<0)
N/****GPIO_IE1 end****/
N
N
N/***********************************GPIO_PD***********************************/
N#define DEV_GPIO_PD_MASK                                        (0xfUL<<0)
N/****GPIO_PD end****/
N
N
N/***********************************DBIO_CTL***********************************/
N#define DEV_GPIO_DBIO_CTL_BIT_SEL_MASK                          (0xfUL<<8)
N#define DEV_GPIO_DBIO_CTL_BIT_EN                                (0x1UL<<7)
N#define DEV_GPIO_DBIO_CTL_GRP_SEL_MASK                          (0x3fUL<<0)
N/****DBIO_CTL end****/
N
N
N/***********************************DBIO_OE0***********************************/
N#define DEV_GPIO_DBIO_OE0_MASK                                  (0xffffffffUL<<0)
N/****DBIO_OE0 end****/
N
N
N/***********************************DBIO_IE0***********************************/
N#define DEV_GPIO_DBIO_IE0_MASK                                  (0xffffffffUL<<0)
N/****DBIO_IE0 end****/
N
N
N/***********************************DBIO_IE1***********************************/
N#define DEV_GPIO_DBIO_IE1_MASK                                  (0xffUL<<0)
N/****DBIO_IE1 end****/
N
N
N/***********************************DBIO_OUT0***********************************/
N#define DEV_GPIO_DBIO_OUT0_MASK                                 (0xffffffffUL<<0)
N/****DBIO_OUT0 end****/
N
N
N/***********************************DBIO_OUT1***********************************/
N#define DEV_GPIO_DBIO_OUT1_MASK                                 (0xffUL<<0)
N/****DBIO_OUT1 end****/
N
N
N/***********************************DEV_GPIO register***********************************/
Ntypedef struct{
N
N    __IO    uint32_t    CTL[40];                                 /* 0x0    GPIO Control */
X    volatile    uint32_t    CTL[40];                                  
N            uint32_t    RESERVED0[24];
N    __IO    uint32_t    OUT0;                                    /* 0x100    GPIO Output0 */
X    volatile    uint32_t    OUT0;                                     
N    __IO    uint32_t    OUT1;                                    /* 0x104    GPIO Output1 */
X    volatile    uint32_t    OUT1;                                     
N            uint32_t    RESERVED1[2];
N    __I     uint32_t    IN0;                                     /* 0x110    GPIO Input0 */
X    volatile const     uint32_t    IN0;                                      
N    __I     uint32_t    IN1;                                     /* 0x114    GPIO Input1 */
X    volatile const     uint32_t    IN1;                                      
N            uint32_t    RESERVED2[2];
N    __IO    uint32_t    RSTN;                                    /* 0x120    GPIO Reset */
X    volatile    uint32_t    RSTN;                                     
N            uint32_t    RESERVED3;
N    __IO    uint32_t    ECLK;                                    /* 0x128    GPIO External Clock */
X    volatile    uint32_t    ECLK;                                     
N    __IO    uint32_t    ECLK2;                                   /* 0x12c    GPIO External Clock2 */
X    volatile    uint32_t    ECLK2;                                    
N            uint32_t    RESERVED4[52];
N    __IO    uint32_t    ICn[4];                                  /* 0x200    GPIO Interrupt Control */
X    volatile    uint32_t    ICn[4];                                   
N            uint32_t    RESERVED5[4];
N    __IO    uint32_t    IE0;                                     /* 0x220    GPIO Interrupt Enable */
X    volatile    uint32_t    IE0;                                      
N    __IO    uint32_t    IE1;                                     /* 0x224    GPIO Interrupt Enable */
X    volatile    uint32_t    IE1;                                      
N    __IO    uint32_t    PD;                                      /* 0x228    GPIO Pending */
X    volatile    uint32_t    PD;                                       
N            uint32_t    RESERVED6[53];
N    __IO    uint32_t    DBIO_CTL;                                /* 0x300    Debug IO Control */
X    volatile    uint32_t    DBIO_CTL;                                 
N            uint32_t    RESERVED7[3];
N    __IO    uint32_t    DBIO_OE0;                                /* 0x310    Debug IO Output Enable */
X    volatile    uint32_t    DBIO_OE0;                                 
N            uint32_t    RESERVED8[3];
N    __IO    uint32_t    DBIO_IE0;                                /* 0x320    Debug IO Input Enable */
X    volatile    uint32_t    DBIO_IE0;                                 
N    __IO    uint32_t    DBIO_IE1;                                /* 0x324    Debug IO Input Enable */
X    volatile    uint32_t    DBIO_IE1;                                 
N            uint32_t    RESERVED9[2];
N    __I     uint32_t    DBIO_OUT0;                               /* 0x330    Debug IO Ouput Value for Read back */
X    volatile const     uint32_t    DBIO_OUT0;                                
N    __I     uint32_t    DBIO_OUT1;                               /* 0x334    Debug IO Ouput Value for Read back */
X    volatile const     uint32_t    DBIO_OUT1;                                
N}DEV_GPIO_RegDef;
N/****DEV_GPIO end****/
N
N/*******************************************************************************
N * User-defined Contents
N ******************************************************************************/
N
N
N
N#define DEV_GPIO_CTRL_MFP_FUN_0			0x0UL
N#define DEV_GPIO_CTRL_MFP_FUN_1			0x1UL
N#define DEV_GPIO_CTRL_MFP_FUN_2			0x2UL
N#define DEV_GPIO_CTRL_MFP_FUN_3			0x3UL
N#define DEV_GPIO_CTRL_MFP_FUN_4			0x4UL
N#define DEV_GPIO_CTRL_MFP_FUN_5			0x5UL
N#define DEV_GPIO_CTRL_MFP_FUN_6			0x6UL
N#define DEV_GPIO_CTRL_MFP_FUN_7			0x7UL
N#define DEV_GPIO_CTRL_MFP_FUN_8			0x8UL
N#define DEV_GPIO_CTRL_MFP_FUN_9			0x9UL
N#define DEV_GPIO_CTRL_MFP_FUN_10		0xaUL
N#define DEV_GPIO_CTRL_MFP_FUN_11		0xbUL
N#define DEV_GPIO_CTRL_MFP_FUN_12		0xcUL
N#define DEV_GPIO_CTRL_MFP_FUN_13		0xdUL
N#define DEV_GPIO_CTRL_MFP_FUN_14		0xeUL
N#define DEV_GPIO_CTRL_MFP_FUN_15		0xfUL
N
N#endif
L 79 "..\..\User\kiwi_ft\spv40\peripheral\base_space.h" 2
N
N#define   CSR_MMU_BASE                       _IO_((uint32_t)0x0)
N#define   DEV_UDSP_BASE                      _IO_((uint32_t)0x20180000)
N#define   DEV_DMAC_BASE                      _IO_((uint32_t)0x20020000)
N#define   DEV_NPU_BASE                       _IO_((uint32_t)0x20190000)
N#define   DEV_MEMC_BASE                      _IO_((uint32_t)0x20030000)
N#define   DEV_CACHE_BASE                     _IO_((uint32_t)0x201a0000)
N#define   DEV_NORC_BASE                      _IO_((uint32_t)0x20090000)
N#define   DEV_MPU_BASE                       _IO_((uint32_t)0x201e0000)
N#define   PSRAM_RWC_BASE                     _IO_((uint32_t)0x201d0000)
N#define   DEV_CHIP_BASE                      _IO_((uint32_t)0x20000000)
N#define   DEV_CMU_BASE                       _IO_((uint32_t)0x20002000)
N#define   DEV_RMU_BASE                       _IO_((uint32_t)0x20003000)
N#define   DEV_WFI_BASE                       _IO_((uint32_t)0x20005000)
N#define   DEV_UREG_BASE                      _IO_((uint32_t)0x20006000)
N#define   DEV_GLOBAL_BASE                    _IO_((uint32_t)0x20008000)
N#define   DEV_TIMER_BASE                     _IO_((uint32_t)0x20010000)
N#define   DEV_EFUSE_BASE                     _IO_((uint32_t)0x20160000)
N#define   AON_OSC_BASE                       _IO_((uint32_t)0x21000000)
N#define   AON_PLL_BASE                       _IO_((uint32_t)0x21001000)
N#define   AON_CMU_BASE                       _IO_((uint32_t)0x21002000)
N#define   AON_PMU_BASE                       _IO_((uint32_t)0x21004000)
N#define   AON_RMU_BASE                       _IO_((uint32_t)0x21003000)
N#define   AON_GPIO_BASE                      _IO_((uint32_t)0x21005000)
N#define   AON_MEM_BASE                       _IO_((uint32_t)0x21006000)
N#define   AON_GLOBAL_BASE                    _IO_((uint32_t)0x21008000)
N#define   AON_LRADC_BASE                     _IO_((uint32_t)0x21010000)
N#define   AON_AUDI_BASE                      _IO_((uint32_t)0x21020000)
N#define   DEV_SPI0_BASE                      _IO_((uint32_t)0x200a0000)
N#define   DEV_SPI1_BASE                      _IO_((uint32_t)0x200b0000)
N#define   DEV_PWM_BASE                       _IO_((uint32_t)0x20100000)
N#define   DEV_CAMERA_BASE                    _IO_((uint32_t)0x201b0000)
N#define   DEV_UART0_BASE                     _IO_((uint32_t)0x20040000)
N#define   DEV_UART1_BASE                     _IO_((uint32_t)0x20050000)
N#define   DEV_UART2_BASE                     _IO_((uint32_t)0x20060000)
N#define   DEV_UART3_BASE                     _IO_((uint32_t)0x201c0000)
N#define   DEV_IIC0_BASE                      _IO_((uint32_t)0x20070000)
N#define   DEV_IIC1_BASE                      _IO_((uint32_t)0x20080000)
N#define   DEV_ASI0_BASE                      _IO_((uint32_t)0x20140000)
N#define   DEV_ASI1_BASE                      _IO_((uint32_t)0x20150000)
N#define   IR_RX_BASE                         _IO_((uint32_t)0x200e0000)
N#define   DEV_ADC_BASE                       _IO_((uint32_t)0x20120000)
N#define   DEV_DAC_BASE                       _IO_((uint32_t)0x20130000)
N#define   DEV_SRC_BASE                       _IO_((uint32_t)0x20170000)
N#define   DEV_GPIO_BASE                      _IO_((uint32_t)0x20110000)
N
N#define   CSR_MMU                   ((CSR_MMU_RegDef *) CSR_MMU_BASE)
N#define   DEV_UDSP                ((DEV_UDSP_RegDef_f *) DEV_UDSP_BASE)
N#define   DEV_DMAC                ((DEV_DMAC_RegDef_f *) DEV_DMAC_BASE)
N#define   DEV_NPU                   ((DEV_NPU_RegDef_f *) DEV_NPU_BASE)
N#define   DEV_MEMC                ((DEV_MEMC_RegDef_f *) DEV_MEMC_BASE)
N#define   DEV_CACHE             ((DEV_CACHE_RegDef_f *) DEV_CACHE_BASE)
N#define   DEV_NORC                ((DEV_NORC_RegDef_f *) DEV_NORC_BASE)
N#define   DEV_MPU                   ((DEV_MPU_RegDef_f *) DEV_MPU_BASE)
N#define   PSRAM_RWC             ((PSRAM_RWC_RegDef_f *) PSRAM_RWC_BASE)
N#define   DEV_CHIP                ((DEV_CHIP_RegDef_f *) DEV_CHIP_BASE)
N#define   DEV_CMU                   ((DEV_CMU_RegDef_f *) DEV_CMU_BASE)
N#define   DEV_RMU                   ((DEV_RMU_RegDef_f *) DEV_RMU_BASE)
N#define   DEV_WFI                   ((DEV_WFI_RegDef_f *) DEV_WFI_BASE)
N#define   DEV_UREG                ((DEV_UREG_RegDef_f *) DEV_UREG_BASE)
N#define   DEV_GLOBAL          ((DEV_GLOBAL_RegDef_f *) DEV_GLOBAL_BASE)
N#define   DEV_TIMER             ((DEV_TIMER_RegDef_f *) DEV_TIMER_BASE)
N#define   DEV_EFUSE             ((DEV_EFUSE_RegDef_f *) DEV_EFUSE_BASE)
N#define   AON_OSC                   ((AON_OSC_RegDef_f *) AON_OSC_BASE)
N#define   AON_PLL                   ((AON_PLL_RegDef_f *) AON_PLL_BASE)
N#define   AON_CMU                   ((AON_CMU_RegDef_f *) AON_CMU_BASE)
N#define   AON_PMU                   ((AON_PMU_RegDef_f *) AON_PMU_BASE)
N#define   AON_RMU                   ((AON_RMU_RegDef_f *) AON_RMU_BASE)
N#define   AON_GPIO                ((AON_GPIO_RegDef_f *) AON_GPIO_BASE)
N#define   AON_MEM                   ((AON_MEM_RegDef_f *) AON_MEM_BASE)
N#define   AON_GLOBAL          ((AON_GLOBAL_RegDef_f *) AON_GLOBAL_BASE)
N#define   AON_LRADC             ((AON_LRADC_RegDef_f *) AON_LRADC_BASE)
N#define   AON_AUDI                ((AON_AUDI_RegDef_f *) AON_AUDI_BASE)
N#define   DEV_SPI0                ((DEV_SPIn_RegDef_f *) DEV_SPI0_BASE)
N#define   DEV_SPI1                ((DEV_SPIn_RegDef_f *) DEV_SPI1_BASE)
N#define   DEV_PWM                   ((DEV_PWM_RegDef_f *) DEV_PWM_BASE)
N#define   DEV_CAMERA          ((DEV_CAMERA_RegDef_f *) DEV_CAMERA_BASE)
N#define   DEV_UART0             ((DEV_UARTn_RegDef_f *) DEV_UART0_BASE)
N#define   DEV_UART1             ((DEV_UARTn_RegDef_f *) DEV_UART1_BASE)
N#define   DEV_UART2             ((DEV_UARTn_RegDef_f *) DEV_UART2_BASE)
N#define   DEV_UART3             ((DEV_UARTn_RegDef_f *) DEV_UART3_BASE)
N#define   DEV_IIC0                ((DEV_IICn_RegDef_f *) DEV_IIC0_BASE)
N#define   DEV_IIC1                ((DEV_IICn_RegDef_f *) DEV_IIC1_BASE)
N#define   DEV_ASI0                ((DEV_ASIn_RegDef_f *) DEV_ASI0_BASE)
N#define   DEV_ASI1                ((DEV_ASIn_RegDef_f *) DEV_ASI1_BASE)
N#define   IR_RX                         ((IR_RX_RegDef_f *) IR_RX_BASE)
N#define   DEV_ADC                   ((DEV_ADC_RegDef_f *) DEV_ADC_BASE)
N#define   DEV_DAC                   ((DEV_DAC_RegDef_f *) DEV_DAC_BASE)
N#define   DEV_SRC                   ((DEV_SRC_RegDef_f *) DEV_SRC_BASE)
N#define   DEV_GPIO                ((DEV_GPIO_RegDef_f *) DEV_GPIO_BASE)
N#endif
L 19 "..\..\User\kiwi_ft\spv40\platform.h" 2
N/* ========================================================================== */
N//#include "interrupt.h"
N/*****************************************************************************
N * Flash Header Definitions
N ****************************************************************************/
N#define  NUM_OF_BINS	4
N
Ntypedef struct {
N	__I uint32_t NAME;
X	volatile const uint32_t NAME;
N	__I uint32_t ADDR;
X	volatile const uint32_t ADDR;
N	__I uint32_t SIZE;
X	volatile const uint32_t SIZE;
N	__I uint32_t CHECKSUM;
X	volatile const uint32_t CHECKSUM;
N	__I uint32_t RESERVED[4];
X	volatile const uint32_t RESERVED[4];
N} BIN_INFO_Def;
N
Ntypedef struct {
N	__I uint32_t JUMP_CODE; 				/* Jump Code: 	*/
X	volatile const uint32_t JUMP_CODE; 				 
N	__I uint32_t TAG_MAGIC; 				/* Tag Magic: 	*/
X	volatile const uint32_t TAG_MAGIC; 				 
N	__I uint32_t TAG_SIZE;					/* Tag Size: 	*/
X	volatile const uint32_t TAG_SIZE;					 
N	__I uint32_t USER_FLAG; 				/* User Flag: 	*/
X	volatile const uint32_t USER_FLAG; 				 
N	__I uint32_t RESERVED0[4];
X	volatile const uint32_t RESERVED0[4];
N
N	__I uint32_t VERSION; 					/* SSP Version: */
X	volatile const uint32_t VERSION; 					 
N	__I uint32_t BUILD_DATE;				/* __DATE__ String Address 	*/
X	volatile const uint32_t BUILD_DATE;				 
N	__I uint32_t BUILD_TIME;				/* __TIME__ String Address 	*/
X	volatile const uint32_t BUILD_TIME;				 
N	__I uint32_t TOTAL_BINS;				/* Total Bins */
X	volatile const uint32_t TOTAL_BINS;				 
N	__I uint32_t RESERVED1[4];
X	volatile const uint32_t RESERVED1[4];
N
N	__I BIN_INFO_Def BIN[NUM_OF_BINS];
X	volatile const BIN_INFO_Def BIN[4];
N} HEADER_Def;
N
N#define	  HEADER_BASE			 _IO_(0x4C000000)
N#define   FW_HEADER              ((HEADER_Def *) HEADER_BASE)
N/*****************************************************************************
N * IRQ Definitions
N *****************************************************************************/
N
N#define  NUM_OF_IRQ	42
Ntypedef struct {
N	__IO uint32_t TRAP_ENTRY;
X	volatile uint32_t TRAP_ENTRY;
N	__IO uint32_t IRQ_ENTRY[NUM_OF_IRQ];
X	volatile uint32_t IRQ_ENTRY[42];
N} IRQn_Table_Def;
N
Nextern int8_t vector_base;
N#define	  VTABLE_BASE	_IO_(&vector_base)
N#define   VTABLE    	((IRQn_Table_Def *) VTABLE_BASE)
N
N/*****************************************************************************
N * Peripheral device HAL declaration
N ****************************************************************************/
N
N#define   CSR_MMU                   ((CSR_MMU_RegDef *) CSR_MMU_BASE)
N#define   DEV_UDSP                ((DEV_UDSP_RegDef_f *) DEV_UDSP_BASE)
N#define   DEV_DMAC                ((DEV_DMAC_RegDef_f *) DEV_DMAC_BASE)
N#define   DEV_NPU                   ((DEV_NPU_RegDef_f *) DEV_NPU_BASE)
N#define   DEV_MEMC                ((DEV_MEMC_RegDef_f *) DEV_MEMC_BASE)
N#define   DEV_CACHE             ((DEV_CACHE_RegDef_f *) DEV_CACHE_BASE)
N#define   DEV_NORC                ((DEV_NORC_RegDef_f *) DEV_NORC_BASE)
N#define   DEV_MPU                   ((DEV_MPU_RegDef_f *) DEV_MPU_BASE)
N#define   PSRAM_RWC             ((PSRAM_RWC_RegDef_f *) PSRAM_RWC_BASE)
N#define   DEV_CHIP                ((DEV_CHIP_RegDef_f *) DEV_CHIP_BASE)
N#define   DEV_CMU                   ((DEV_CMU_RegDef_f *) DEV_CMU_BASE)
N#define   DEV_RMU                   ((DEV_RMU_RegDef_f *) DEV_RMU_BASE)
N#define   DEV_WFI                   ((DEV_WFI_RegDef_f *) DEV_WFI_BASE)
N#define   DEV_UREG                ((DEV_UREG_RegDef_f *) DEV_UREG_BASE)
N#define   DEV_GLOBAL          ((DEV_GLOBAL_RegDef_f *) DEV_GLOBAL_BASE)
N#define   DEV_TIMER             ((DEV_TIMER_RegDef_f *) DEV_TIMER_BASE)
N#define   DEV_EFUSE             ((DEV_EFUSE_RegDef_f *) DEV_EFUSE_BASE)
N#define   AON_OSC                   ((AON_OSC_RegDef_f *) AON_OSC_BASE)
N#define   AON_PLL                   ((AON_PLL_RegDef_f *) AON_PLL_BASE)
N#define   AON_CMU                   ((AON_CMU_RegDef_f *) AON_CMU_BASE)
N#define   AON_PMU                   ((AON_PMU_RegDef_f *) AON_PMU_BASE)
N#define   AON_RMU                   ((AON_RMU_RegDef_f *) AON_RMU_BASE)
N#define   AON_GPIO                ((AON_GPIO_RegDef_f *) AON_GPIO_BASE)
N#define   AON_MEM                   ((AON_MEM_RegDef_f *) AON_MEM_BASE)
N#define   AON_GLOBAL          ((AON_GLOBAL_RegDef_f *) AON_GLOBAL_BASE)
N#define   AON_LRADC             ((AON_LRADC_RegDef_f *) AON_LRADC_BASE)
N#define   AON_AUDI                ((AON_AUDI_RegDef_f *) AON_AUDI_BASE)
N#define   DEV_SPI                   ((DEV_SPI_RegDef_f *) DEV_SPI_BASE)
N#define   DEV_PWM                   ((DEV_PWM_RegDef_f *) DEV_PWM_BASE)
N#define   DEV_CAMERA          ((DEV_CAMERA_RegDef_f *) DEV_CAMERA_BASE)
N#define   DEV_UART0             ((DEV_UARTn_RegDef_f *) DEV_UART0_BASE)
N#define   DEV_UART1             ((DEV_UARTn_RegDef_f *) DEV_UART1_BASE)
N#define   DEV_UART2             ((DEV_UARTn_RegDef_f *) DEV_UART2_BASE)
N#define   DEV_IIC0                ((DEV_IICn_RegDef_f *) DEV_IIC0_BASE)
N#define   DEV_IIC1                ((DEV_IICn_RegDef_f *) DEV_IIC1_BASE)
N#define   DEV_ASI0                ((DEV_ASIn_RegDef_f *) DEV_ASI0_BASE)
N#define   DEV_ASI1                ((DEV_ASIn_RegDef_f *) DEV_ASI1_BASE)
N#define   IR_RX                         ((IR_RX_RegDef_f *) IR_RX_BASE)
N#define   DEV_ADC                   ((DEV_ADC_RegDef_f *) DEV_ADC_BASE)
N#define   DEV_DAC                   ((DEV_DAC_RegDef_f *) DEV_DAC_BASE)
N#define   DEV_SRC                   ((DEV_SRC_RegDef_f *) DEV_SRC_BASE)
N#define   DEV_GPIO                ((DEV_GPIO_RegDef_f *) DEV_GPIO_BASE)
N
N/*****************************************************************************
N * Board specified
N ****************************************************************************/
N
N//extern __GLOBAL SOC_RUNTIME RUNTIME_SPV40;
N
Nvoid MTIME_DelayTicks(uint32_t ticks);
Nvoid mtime_config(uint32_t period_in_us);
Nuint32_t mtime_get_clock(void);
N
N
N#define	cpu_mstatus_alloc()		int32_t mstatus = 0
N#define cpu_enter_critical()	do{mstatus = __nds__read_csr(NDS_MSTATUS);	GIE_DISABLE();}while(0)
N#define cpu_exit_critical()		do{__nds__write_csr(mstatus,NDS_MSTATUS);}while(0)
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif	/* __PLATFORM_H__ */
L 10 "..\..\User\kiwi_ft\__kiwi_ft_common.h" 2
N#include "kiwi_efuse_type.h"
L 1 "..\..\User\kiwi_ft\kiwi_efuse_type.h" 1
N#ifndef KIWI_EFUSE_TYPE_H
N#define KIWI_EFUSE_TYPE_H
N
N/* EFUSE区数据结构 256bit */
Ntypedef struct 
N{
N    union
N    {
N        struct
N        {
N            uint32_t EFUSE_VLD; //efuse valid
N            uint32_t CHIP_ID;
N            
N            uint32_t EFUSE_LOCK         : 8;
N            uint32_t EFUSE_CHIP         : 1;
N            uint32_t RESERVED0          : 7;
N            uint32_t OSC_AUDIO_TRIM     : 6;
N            uint32_t OSC_AUDIO_VLD      : 1;
N            uint32_t LOCK_CTL           : 3;
N            uint32_t LOCK_VLD           : 1;
N            uint32_t RESERVED1          : 5;
N            
N            uint32_t PMU_BGR_TRIM       : 4;
N            uint32_t PMU_BGR_VLD        : 1;
N            uint32_t PMU_LPV_TRIM       : 1;
N            uint32_t PMU_LPV_VLD        : 1;
N            uint32_t OSC_32K_TRIM       : 6;
N            uint32_t OSC_32K_VLD        : 1;
N            uint32_t IOVCC_VOL_CFG      : 3;
N            uint32_t IOVCC_VOL_VLD      : 1;
N            uint32_t SIOVCC_SEL         : 1;
N            uint32_t SIOVCC_SEL_VLD     : 1;
N            uint32_t AVCC_VOL_CFG       : 3;
N            uint32_t AVCC_VOL_VLD       : 1;
N            uint32_t RESERVED2          : 7;
N            uint32_t SEED_LOCK          : 1;
N
N            uint32_t SEED;
N            
N            uint32_t OSC_CORE_60M_TRIM  : 7;
N            uint32_t OSC_CORE_60M_VLD   : 1;
N            uint32_t OSC_CORE_70M_TRIM  : 7;
N            uint32_t OSC_CORE_70M_VLD   : 1;
N            uint32_t OSC_CORE_80M_TRIM  : 7;
N            uint32_t OSC_CORE_80M_VLD   : 1;
N            uint32_t OSC_CORE_90M_TRIM  : 7;
N            uint32_t OSC_CORE_90M_VLD   : 1;
N            
N            uint32_t OSC_CORE_100M_TRIM  : 7;
N            uint32_t OSC_CORE_100M_VLD   : 1;
N            uint32_t OSC_CORE_110M_TRIM  : 7;
N            uint32_t OSC_CORE_110M_VLD   : 1;
N            uint32_t OSC_CORE_120M_TRIM  : 7;
N            uint32_t OSC_CORE_120M_VLD   : 1;
N            uint32_t UNUSE_BYTE          : 8;
N 
N            uint32_t UNUSE; 
N        };
N        
N        uint32_t word_table[8]; //256 bit
N    };
N}kiwi_efuse_t;
N
N#endif
L 11 "..\..\User\kiwi_ft\__kiwi_ft_common.h" 2
N#include "__kiwi_ft_config.h"
L 1 "..\..\User\kiwi_ft\__kiwi_ft_config.h" 1
N// <<< Use Configuration Wizard in Context Menu >>>
N#ifndef __KIWI_FT_CONFIG_H
N#define __KIWI_FT_CONFIG_H
N
Ntypedef enum
N{
N    pmu_item=0,
N    cmu_osc_audio_item,
N    cmu_osc_pmu_item,
N    cmu_osc_core_item,
N    run_kiwi_pattern_item,                                                      /* DAC : headphone offset */
N    efuse_write_item,
N    customer_flash_item,                                                        /* 写flash */
N    test_max_item                                                               /* 测试项数量 */
N}item_e;
N
N#define SKIP_TEST(var)  (~(1<<(var))) 
N
N//kiwi ft配置区
N/*************************** @TestItem 测试项 *********************************/
N/** @example & SKIP_TEST(customer_flash_item)  
N** 要求场景
N【1】.已ft的chip，再次ft查看测试数据
N【2】.已ft一部分项目的chip，继续ft其他项目
N【3】.未ft的chip，跳过部分项目
N** 实现
N【A】设置一个强制模式：不论是否ft统一测试所有已勾选的测试项，但已ft的项目的efuse不会重写
N【B】强制模式不使能时，如果某测试项开启，则判断该测试项ft efuse区数据决定是否跳过
N*/
N
N#define TEST_IO_EN        0
N
N
N#define RUN_MODE_FT        0    // 0:ft,不烧录
N#define RUN_MODE_FT_PRG    1    // 1:ft + 烧录
N#define RUN_MODE_PRG       2    // 2:只烧录
N
N
N#define RUN_MODE        RUN_MODE_FT   
N#define BROM_ACK_TIMEOUT     100    //ms;brom响应等待超时的时间
N#define FT_AGAIN_ENABLE      0      //1:已测试的项目仍然测试打印log，但不写efuse，报warning  0:已测试项目跳过
N
N#if (RUN_MODE == RUN_MODE_PRG)       //只需要烧录功能时，芯片不需要外部时钟，GLOBAL0配为默认值
X#if (0 == 2)       
S#define KIWI_EXT_CLK_PIN     0  //外部时钟引脚
S#define KIWI_UART_DIV        0  //stm32 供kiwi时钟42M时波特率512分频设置 exclk/(div+1) = baudrate
N#else
N#define KIWI_EXT_CLK_PIN     15  //外部时钟引脚
N#define KIWI_UART_DIV        81  //stm32 供kiwi时钟42M时波特率512分频设置 exclk/(div+1) = baudrate
N#endif
N#define CUSTOMER_FLASH_BIN   "customer_code/kiwi_hello_ft_cnt_flash.bin"  
N//#define CUSTOMER_FLASH_BIN   "SPA1X.bin"  
N#define FT_RAM_BIN           "ft_pattern/kiwi_ft_uart_spl_v0.2.bin"
N
N#define TEST_ITEM_BITS  \
N(\
N    0xffff                              \
N)
X#define TEST_ITEM_BITS  (    0xffff                              )
N//& SKIP_TEST(efuse_write_item)    
N//& SKIP_TEST(customer_flash_item)    
N
N/****************************** @PMU 电源(mv) *************************************/
N#define BGR_TRIM_VAL_MAX       15
N#define BGR_VOLT_MIN           3104
N#define BGR_VOLT_MAX           3296
N#define BGR_VOLT_TARGET        3200
N
N#define LPV_TRIM_VAL_MAX       1
N#define LPV_VOLT_MIN           2800
N#define LPV_VOLT_MAX           3200
N#define LPV_VOLT_TARGET        3000
N
N/************************* @Standby  电流(0.1uA) ******************************/
N#define STANDBY_CURRENT_HI      60  //0.1uA
N#define STANDBY_CURRENT_LO      20  //0.1uA
N
N/****************************** @CMU  时钟(hz)*************************************/
N// -5% +5%
N#define OSC_AUDIO_TRIM_MAX         63
N#define OSC_AUDIO_FREQ_MIN         46694000//23280000
N#define OSC_AUDIO_FREQ_MAX         51609000//24720000
N#define OSC_AUDIO_FREQ_TARGET      49152000 
N
N// -5% +5%
N#define OSC_PMU_TRIM_MAX         63
N#define OSC_PMU_FREQ_MIN         30400
N#define OSC_PMU_FREQ_MAX         33600
N#define OSC_PMU_FREQ_TARGET      32000
N
N//待确定范围 trim max  -5% +5%  
N#define OSC_CORE_TRIM_MAX           127
N#define OSC_CORE_60M_MIN            57000000
N#define OSC_CORE_60M_MAX            63000000
N#define OSC_CORE_70M_MIN            67000000
N#define OSC_CORE_70M_MAX            73000000
N#define OSC_CORE_80M_MIN            77000000
N#define OSC_CORE_80M_MAX            83000000
N#define OSC_CORE_90M_MIN            87000000
N#define OSC_CORE_90M_MAX            93000000
N#define OSC_CORE_100M_MIN           97000000
N#define OSC_CORE_100M_MAX           103000000
N#define OSC_CORE_110M_MIN           107000000
N#define OSC_CORE_110M_MAX           113000000
N#define OSC_CORE_120M_MIN           117000000
N#define OSC_CORE_120M_MAX           123000000
N
N#define OSC_CORE_FREQ_TARGET_START  60000000
N
N//待确定范围
N#define OSC_AUDIO_PLL_TRIM_MAX         3
N#define OSC_AUDIO_PLL_FREQ_MIN         1350
N#define OSC_AUDIO_PLL_FREQ_MAX         1650
N#define OSC_AUDIO_PLL_FREQ_TARGET      1500
N
N
N
N#define BGR_TRIM_DEFAULT                 7
N#define LPV_TRIM_DEFAULT                 0   
N#define OSC_PMU_TRIM_DEFAULT             0x30
N#define OSC_CORE_TRIM_DEFAULT            0x40
N#define OSC_AUDIO_TRIM_DEFAULT           0x20
N 
N
N#endif
N
N// <<< end of configuration section >>>
L 12 "..\..\User\kiwi_ft\__kiwi_ft_common.h" 2
N#include "ff.h"			    /* FatFS */
L 1 "..\..\User\FatFS\src\ff.h" 1
N/*---------------------------------------------------------------------------/
N/  FatFs - FAT file system module include file  R0.10b    (C)ChaN, 2014
N/----------------------------------------------------------------------------/
N/ FatFs module is a generic FAT file system module for small embedded systems.
N/ This is a free software that opened for education, research and commercial
N/ developments under license policy of following terms.
N/
N/  Copyright (C) 2014, ChaN, all right reserved.
N/
N/ * The FatFs module is a free software and there is NO WARRANTY.
N/ * No restriction on use. You can use, modify and redistribute it for
N/   personal, non-profit or commercial product UNDER YOUR RESPONSIBILITY.
N/ * Redistributions of source code must retain the above copyright notice.
N/
N/----------------------------------------------------------------------------*/
N
N#ifndef _FATFS
N#define _FATFS	8051	/* Revision ID */
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "integer.h"	/* Basic integer types */
L 1 "..\..\User\FatFS\src\integer.h" 1
N/*-------------------------------------------*/
N/* Integer type definitions for FatFs module */
N/*-------------------------------------------*/
N
N#ifndef _FF_INTEGER
N#define _FF_INTEGER
N
N#ifdef _WIN32	/* FatFs development platform */
S
S#include <windows.h>
S#include <tchar.h>
S
N#else			/* Embedded platform */
N
N/* This type MUST be 8 bit */
Ntypedef unsigned char	BYTE;
N
N/* These types MUST be 16 bit */
Ntypedef short			SHORT;
Ntypedef unsigned short	WORD;
Ntypedef unsigned short	WCHAR;
N
N/* These types MUST be 16 bit or 32 bit */
Ntypedef int				INT;
Ntypedef unsigned int	UINT;
N
N/* These types MUST be 32 bit */
Ntypedef long			LONG;
Ntypedef unsigned long	DWORD;
N
N#endif
N
N#endif
L 25 "..\..\User\FatFS\src\ff.h" 2
N#include "ffconf.h"		/* FatFs configuration options */
L 1 "..\..\User\FatFS\src\ffconf.h" 1
N/*---------------------------------------------------------------------------/
N/  FatFs - FAT file system module configuration file  R0.10b (C)ChaN, 2014
N/---------------------------------------------------------------------------*/
N
N#ifndef _FFCONF
N#define _FFCONF 8051	/* Revision ID */
N
N
N/*---------------------------------------------------------------------------/
N/ Functions and Buffer Configurations
N/---------------------------------------------------------------------------*/
N
N#define	_FS_TINY		0	/* 0:Normal or 1:Tiny */
N/* When _FS_TINY is set to 1, it reduces memory consumption _MAX_SS bytes each
N/  file object. For file data transfer, FatFs uses the common sector buffer in
N/  the file system object (FATFS) instead of private sector buffer eliminated
N/  from the file object (FIL). */
N
N
N#define _FS_READONLY	0	/* 0:Read/Write or 1:Read only */
N/* Setting _FS_READONLY to 1 defines read only configuration. This removes
N/  writing functions, f_write(), f_sync(), f_unlink(), f_mkdir(), f_chmod(),
N/  f_rename(), f_truncate() and useless f_getfree(). */
N
N
N#define _FS_MINIMIZE	0	/* 0 to 3 */
N/* The _FS_MINIMIZE option defines minimization level to remove API functions.
N/
N/   0: All basic functions are enabled.
N/   1: f_stat(), f_getfree(), f_unlink(), f_mkdir(), f_chmod(), f_utime(),
N/      f_truncate() and f_rename() function are removed.
N/   2: f_opendir(), f_readdir() and f_closedir() are removed in addition to 1.
N/   3: f_lseek() function is removed in addition to 2. */
N
N
N#define	_USE_STRFUNC	0	/* 0:Disable or 1-2:Enable */
N/* To enable string functions, set _USE_STRFUNC to 1 or 2. */
N
N
N#define	_USE_MKFS		0	/* 0:Disable or 1:Enable */
N/* To enable f_mkfs() function, set _USE_MKFS to 1 and set _FS_READONLY to 0 */
N
N
N#define	_USE_FASTSEEK	0	/* 0:Disable or 1:Enable */
N/* To enable fast seek feature, set _USE_FASTSEEK to 1. */
N
N
N#define _USE_LABEL		0	/* 0:Disable or 1:Enable */
N/* To enable volume label functions, set _USE_LAVEL to 1 */
N
N
N#define	_USE_FORWARD	0	/* 0:Disable or 1:Enable */
N/* To enable f_forward() function, set _USE_FORWARD to 1 and set _FS_TINY to 1. */
N
N
N/*---------------------------------------------------------------------------/
N/ Locale and Namespace Configurations
N/---------------------------------------------------------------------------*/
N
N#define _CODE_PAGE	936
N/* The _CODE_PAGE specifies the OEM code page to be used on the target system.
N/  Incorrect setting of the code page can cause a file open failure.
N/
N/   932  - Japanese Shift_JIS (DBCS, OEM, Windows)
N/   936  - Simplified Chinese GBK (DBCS, OEM, Windows)
N/   949  - Korean (DBCS, OEM, Windows)
N/   950  - Traditional Chinese Big5 (DBCS, OEM, Windows)
N/   1250 - Central Europe (Windows)
N/   1251 - Cyrillic (Windows)
N/   1252 - Latin 1 (Windows)
N/   1253 - Greek (Windows)
N/   1254 - Turkish (Windows)
N/   1255 - Hebrew (Windows)
N/   1256 - Arabic (Windows)
N/   1257 - Baltic (Windows)
N/   1258 - Vietnam (OEM, Windows)
N/   437  - U.S. (OEM)
N/   720  - Arabic (OEM)
N/   737  - Greek (OEM)
N/   775  - Baltic (OEM)
N/   850  - Multilingual Latin 1 (OEM)
N/   858  - Multilingual Latin 1 + Euro (OEM)
N/   852  - Latin 2 (OEM)
N/   855  - Cyrillic (OEM)
N/   866  - Russian (OEM)
N/   857  - Turkish (OEM)
N/   862  - Hebrew (OEM)
N/   874  - Thai (OEM, Windows)
N/   1    - ASCII (Valid for only non-LFN configuration) */
N
N
N#define	_USE_LFN	2		/* 0 to 3 */
N#define	_MAX_LFN	255		/* Maximum LFN length to handle (12 to 255) */
N/* The _USE_LFN option switches the LFN feature.
N/
N/   0: Disable LFN feature. _MAX_LFN has no effect.
N/   1: Enable LFN with static working buffer on the BSS. Always NOT thread-safe.
N/   2: Enable LFN with dynamic working buffer on the STACK.
N/   3: Enable LFN with dynamic working buffer on the HEAP.
N/
N/  When enable LFN feature, Unicode handling functions ff_convert() and ff_wtoupper()
N/  function must be added to the project.
N/  The LFN working buffer occupies (_MAX_LFN + 1) * 2 bytes. When use stack for the
N/  working buffer, take care on stack overflow. When use heap memory for the working
N/  buffer, memory management functions, ff_memalloc() and ff_memfree(), must be added
N/  to the project. */
N
N
N#define	_LFN_UNICODE	0	/* 0:ANSI/OEM or 1:Unicode */
N/* To switch the character encoding on the FatFs API (TCHAR) to Unicode, enable LFN
N/  feature and set _LFN_UNICODE to 1. This option affects behavior of string I/O
N/  functions. This option must be 0 when LFN feature is not enabled. */
N
N
N#define _STRF_ENCODE	3	/* 0:ANSI/OEM, 1:UTF-16LE, 2:UTF-16BE, 3:UTF-8 */
N/* When Unicode API is enabled by _LFN_UNICODE option, this option selects the character
N/  encoding on the file to be read/written via string I/O functions, f_gets(), f_putc(),
N/  f_puts and f_printf(). This option has no effect when Unicode API is not enabled. */
N
N
N#define _FS_RPATH		2	/* 0 to 2 */
N/* The _FS_RPATH option configures relative path feature.
N/
N/   0: Disable relative path feature and remove related functions.
N/   1: Enable relative path. f_chdrive() and f_chdir() function are available.
N/   2: f_getcwd() function is available in addition to 1.
N/
N/  Note that output of the f_readdir() fnction is affected by this option. */
N
N
N/*---------------------------------------------------------------------------/
N/ Drive/Volume Configurations
N/---------------------------------------------------------------------------*/
N
N#define _VOLUMES	2
N/* Number of volumes (logical drives) to be used. */
N
N
N#define _STR_VOLUME_ID	0	/* 0:Use only 0-9 for drive ID, 1:Use strings for drive ID */
N#define _VOLUME_STRS	"RAM","NAND","CF","SD1","SD2","USB1","USB2","USB3"
N/* When _STR_VOLUME_ID is set to 1, also pre-defined strings can be used as drive
N/  number in the path name. _VOLUME_STRS defines the drive ID strings for each logical
N/  drives. Number of items must be equal to _VOLUMES. Valid characters for the drive ID
N/  strings are: 0-9 and A-Z. */
N
N
N#define	_MULTI_PARTITION	0	/* 0:Single partition, 1:Enable multiple partition */
N/* By default(0), each logical drive number is bound to the same physical drive number
N/  and only a FAT volume found on the physical drive is mounted. When it is set to 1,
N/  each logical drive number is bound to arbitrary drive/partition listed in VolToPart[].
N*/
N
N
N#define	_MIN_SS		512
N#define	_MAX_SS		512
N/* These options configure the range of sector size to be supported. (512, 1024, 2048 or
N/  4096) Always set both 512 for most systems, all memory card and harddisk. But a larger
N/  value may be required for on-board flash memory and some type of optical media.
N/  When _MAX_SS is larger than _MIN_SS, FatFs is configured to variable sector size and
N/  GET_SECTOR_SIZE command must be implemented to the disk_ioctl() function. */
N
N
N#define	_USE_ERASE	0	/* 0:Disable or 1:Enable */
N/* To enable sector erase feature, set _USE_ERASE to 1. Also CTRL_ERASE_SECTOR command
N/  should be added to the disk_ioctl() function. */
N
N
N#define _FS_NOFSINFO	0	/* 0 to 3 */
N/* If you need to know correct free space on the FAT32 volume, set bit 0 of this option
N/  and f_getfree() function at first time after volume mount will force a full FAT scan.
N/  Bit 1 controls the last allocated cluster number as bit 0.
N/
N/  bit0=0: Use free cluster count in the FSINFO if available.
N/  bit0=1: Do not trust free cluster count in the FSINFO.
N/  bit1=0: Use last allocated cluster number in the FSINFO if available.
N/  bit1=1: Do not trust last allocated cluster number in the FSINFO.
N*/
N
N
N
N/*---------------------------------------------------------------------------/
N/ System Configurations
N/---------------------------------------------------------------------------*/
N
N#define	_FS_LOCK	3	/* 0:Disable or >=1:Enable */
N/* To enable file lock control feature, set _FS_LOCK to non-zero value.
N/  The value defines how many files/sub-directories can be opened simultaneously
N/  with file lock control. This feature uses bss _FS_LOCK * 12 bytes. */
N
N
N#define _FS_REENTRANT	0		    /* 0:Disable or 1:Enable */
N#define _FS_TIMEOUT		1000	        /* Timeout period in unit of time tick */
N#define	_SYNC_t			HANDLE	/* O/S dependent sync object type. e.g. HANDLE, OS_EVENT*, ID, SemaphoreHandle_t and etc.. */
N/* The _FS_REENTRANT option switches the re-entrancy (thread safe) of the FatFs module.
N/
N/   0: Disable re-entrancy. _FS_TIMEOUT and _SYNC_t have no effect.
N/   1: Enable re-entrancy. Also user provided synchronization handlers,
N/      ff_req_grant(), ff_rel_grant(), ff_del_syncobj() and ff_cre_syncobj()
N/      function must be added to the project.
N*/
N
N
N#define _WORD_ACCESS	1	/* 0 or 1 */
N/* The _WORD_ACCESS option is an only platform dependent option. It defines
N/  which access method is used to the word data on the FAT volume.
N/
N/   0: Byte-by-byte access. Always compatible with all platforms.
N/   1: Word access. Do not choose this unless under both the following conditions.
N/
N/  * Address misaligned memory access is always allowed for ALL instructions.
N/  * Byte order on the memory is little-endian.
N/
N/  If it is the case, _WORD_ACCESS can also be set to 1 to improve performance and
N/  reduce code size. Following table shows an example of some processor types.
N/
N/   ARM7TDMI    0           ColdFire    0           V850E2      0
N/   Cortex-M3   0           Z80         0/1         V850ES      0/1
N/   Cortex-M0   0           RX600(LE)   0/1         TLCS-870    0/1
N/   AVR         0/1         RX600(BE)   0           TLCS-900    0/1
N/   AVR32       0           RL78        0           R32C        0
N/   PIC18       0/1         SH-2        0           M16C        0/1
N/   PIC24       0           H8S         0           MSP430      0
N/   PIC32       0           H8/300H     0           x86         0/1
N*/
N
N
N#endif /* _FFCONF */
L 26 "..\..\User\FatFS\src\ff.h" 2
N
N#if _FATFS != _FFCONF
X#if 8051 != 8051
S#error Wrong configuration file (ffconf.h).
N#endif
N
N
N
N/* Definitions of volume management */
N
N#if _MULTI_PARTITION		/* Multiple partition configuration */
X#if 0		 
Stypedef struct {
S	BYTE pd;	/* Physical drive number */
S	BYTE pt;	/* Partition: 0:Auto detect, 1-4:Forced partition) */
S} PARTITION;
Sextern PARTITION VolToPart[];	/* Volume - Partition resolution table */
S#define LD2PD(vol) (VolToPart[vol].pd)	/* Get physical drive number */
S#define LD2PT(vol) (VolToPart[vol].pt)	/* Get partition index */
S
N#else							/* Single partition configuration */
N#define LD2PD(vol) (BYTE)(vol)	/* Each logical drive is bound to the same physical drive number */
N#define LD2PT(vol) 0			/* Find first valid partition or in SFD */
N
N#endif
N
N
N
N/* Type of path name strings on FatFs API */
N
N#if _LFN_UNICODE			/* Unicode string */
X#if 0			 
S#if !_USE_LFN
S#error _LFN_UNICODE must be 0 at non-LFN cfg.
S#endif
S#ifndef _INC_TCHAR
Stypedef WCHAR TCHAR;
S#define _T(x) L ## x
S#define _TEXT(x) L ## x
S#endif
S
N#else						/* ANSI/OEM string */
N#ifndef _INC_TCHAR
Ntypedef char TCHAR;
N#define _T(x) x
N#define _TEXT(x) x
N#endif
N
N#endif
N
N
N
N/* File system object structure (FATFS) */
N
Ntypedef struct {
N	BYTE	fs_type;		/* FAT sub-type (0:Not mounted) */
N	BYTE	drv;			/* Physical drive number */
N	BYTE	csize;			/* Sectors per cluster (1,2,4...128) */
N	BYTE	n_fats;			/* Number of FAT copies (1 or 2) */
N	BYTE	wflag;			/* win[] flag (b0:dirty) */
N	BYTE	fsi_flag;		/* FSINFO flags (b7:disabled, b0:dirty) */
N	WORD	id;				/* File system mount ID */
N	WORD	n_rootdir;		/* Number of root directory entries (FAT12/16) */
N#if _MAX_SS != _MIN_SS
X#if 512 != 512
S	WORD	ssize;			/* Bytes per sector (512, 1024, 2048 or 4096) */
N#endif
N#if _FS_REENTRANT
X#if 0
S	_SYNC_t	sobj;			/* Identifier of sync object */
N#endif
N#if !_FS_READONLY
X#if !0
N	DWORD	last_clust;		/* Last allocated cluster */
N	DWORD	free_clust;		/* Number of free clusters */
N#endif
N#if _FS_RPATH
X#if 2
N	DWORD	cdir;			/* Current directory start cluster (0:root) */
N#endif
N	DWORD	n_fatent;		/* Number of FAT entries, = number of clusters + 2 */
N	DWORD	fsize;			/* Sectors per FAT */
N	DWORD	volbase;		/* Volume start sector */
N	DWORD	fatbase;		/* FAT start sector */
N	DWORD	dirbase;		/* Root directory start sector (FAT32:Cluster#) */
N	DWORD	database;		/* Data start sector */
N	DWORD	winsect;		/* Current sector appearing in the win[] */
N	BYTE	win[_MAX_SS];	/* Disk access window for Directory, FAT (and file data at tiny cfg) */
X	BYTE	win[512];	 
N} FATFS;
N
N
N
N/* File object structure (FIL) */
N
Ntypedef struct {
N	FATFS*	fs;				/* Pointer to the related file system object (**do not change order**) */
N	WORD	id;				/* Owner file system mount ID (**do not change order**) */
N	BYTE	flag;			/* Status flags */
N	BYTE	err;			/* Abort flag (error code) */
N	DWORD	fptr;			/* File read/write pointer (Zeroed on file open) */
N	DWORD	fsize;			/* File size */
N	DWORD	sclust;			/* File start cluster (0:no cluster chain, always 0 when fsize is 0) */
N	DWORD	clust;			/* Current cluster of fpter (not valid when fprt is 0) */
N	DWORD	dsect;			/* Sector number appearing in buf[] (0:invalid) */
N#if !_FS_READONLY
X#if !0
N	DWORD	dir_sect;		/* Sector number containing the directory entry */
N	BYTE*	dir_ptr;		/* Pointer to the directory entry in the win[] */
N#endif
N#if _USE_FASTSEEK
X#if 0
S	DWORD*	cltbl;			/* Pointer to the cluster link map table (Nulled on file open) */
N#endif
N#if _FS_LOCK
X#if 3
N	UINT	lockid;			/* File lock ID origin from 1 (index of file semaphore table Files[]) */
N#endif
N#if !_FS_TINY
X#if !0
N	BYTE	buf[_MAX_SS];	/* File private data read/write window */
X	BYTE	buf[512];	 
N#endif
N} FIL;
N
N
N
N/* Directory object structure (DIR) */
N
Ntypedef struct {
N	FATFS*	fs;				/* Pointer to the owner file system object (**do not change order**) */
N	WORD	id;				/* Owner file system mount ID (**do not change order**) */
N	WORD	index;			/* Current read/write index number */
N	DWORD	sclust;			/* Table start cluster (0:Root dir) */
N	DWORD	clust;			/* Current cluster */
N	DWORD	sect;			/* Current sector */
N	BYTE*	dir;			/* Pointer to the current SFN entry in the win[] */
N	BYTE*	fn;				/* Pointer to the SFN (in/out) {file[8],ext[3],status[1]} */
N#if _FS_LOCK
X#if 3
N	UINT	lockid;			/* File lock ID (index of file semaphore table Files[]) */
N#endif
N#if _USE_LFN
X#if 2
N	WCHAR*	lfn;			/* Pointer to the LFN working buffer */
N	WORD	lfn_idx;		/* Last matched LFN index number (0xFFFF:No LFN) */
N#endif
N} DIR;
N
N
N
N/* File status structure (FILINFO) */
N
Ntypedef struct {
N	DWORD	fsize;			/* File size */
N	WORD	fdate;			/* Last modified date */
N	WORD	ftime;			/* Last modified time */
N	BYTE	fattrib;		/* Attribute */
N	TCHAR	fname[13];		/* Short file name (8.3 format) */
N#if _USE_LFN
X#if 2
N	TCHAR*	lfname;			/* Pointer to the LFN buffer */
N	UINT 	lfsize;			/* Size of LFN buffer in TCHAR */
N#endif
N} FILINFO;
N
N
N
N/* File function return code (FRESULT) */
N
Ntypedef enum {
N	FR_OK = 0,				/* (0) Succeeded */
N	FR_DISK_ERR,			/* (1) A hard error occurred in the low level disk I/O layer */
N	FR_INT_ERR,				/* (2) Assertion failed */
N	FR_NOT_READY,			/* (3) The physical drive cannot work */
N	FR_NO_FILE,				/* (4) Could not find the file */
N	FR_NO_PATH,				/* (5) Could not find the path */
N	FR_INVALID_NAME,		/* (6) The path name format is invalid */
N	FR_DENIED,				/* (7) Access denied due to prohibited access or directory full */
N	FR_EXIST,				/* (8) Access denied due to prohibited access */
N	FR_INVALID_OBJECT,		/* (9) The file/directory object is invalid */
N	FR_WRITE_PROTECTED,		/* (10) The physical drive is write protected */
N	FR_INVALID_DRIVE,		/* (11) The logical drive number is invalid */
N	FR_NOT_ENABLED,			/* (12) The volume has no work area */
N	FR_NO_FILESYSTEM,		/* (13) There is no valid FAT volume */
N	FR_MKFS_ABORTED,		/* (14) The f_mkfs() aborted due to any parameter error */
N	FR_TIMEOUT,				/* (15) Could not get a grant to access the volume within defined period */
N	FR_LOCKED,				/* (16) The operation is rejected according to the file sharing policy */
N	FR_NOT_ENOUGH_CORE,		/* (17) LFN working buffer could not be allocated */
N	FR_TOO_MANY_OPEN_FILES,	/* (18) Number of open files > _FS_SHARE */
N	FR_INVALID_PARAMETER	/* (19) Given parameter is invalid */
N} FRESULT;
N
N
N
N/*--------------------------------------------------------------*/
N/* FatFs module application interface                           */
N
NFRESULT f_open (FIL* fp, const TCHAR* path, BYTE mode);				/* Open or create a file */
NFRESULT f_close (FIL* fp);											/* Close an open file object */
NFRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br);			/* Read data from a file */
NFRESULT f_write (FIL* fp, const void* buff, UINT btw, UINT* bw);	/* Write data to a file */
NFRESULT f_forward (FIL* fp, UINT(*func)(const BYTE*,UINT), UINT btf, UINT* bf);	/* Forward data to the stream */
NFRESULT f_lseek (FIL* fp, DWORD ofs);								/* Move file pointer of a file object */
NFRESULT f_truncate (FIL* fp);										/* Truncate file */
NFRESULT f_sync (FIL* fp);											/* Flush cached data of a writing file */
NFRESULT f_opendir (DIR* dp, const TCHAR* path);						/* Open a directory */
NFRESULT f_closedir (DIR* dp);										/* Close an open directory */
NFRESULT f_readdir (DIR* dp, FILINFO* fno);							/* Read a directory item */
NFRESULT f_mkdir (const TCHAR* path);								/* Create a sub directory */
NFRESULT f_unlink (const TCHAR* path);								/* Delete an existing file or directory */
NFRESULT f_rename (const TCHAR* path_old, const TCHAR* path_new);	/* Rename/Move a file or directory */
NFRESULT f_stat (const TCHAR* path, FILINFO* fno);					/* Get file status */
NFRESULT f_chmod (const TCHAR* path, BYTE value, BYTE mask);			/* Change attribute of the file/dir */
NFRESULT f_utime (const TCHAR* path, const FILINFO* fno);			/* Change times-tamp of the file/dir */
NFRESULT f_chdir (const TCHAR* path);								/* Change current directory */
NFRESULT f_chdrive (const TCHAR* path);								/* Change current drive */
NFRESULT f_getcwd (TCHAR* buff, UINT len);							/* Get current directory */
NFRESULT f_getfree (const TCHAR* path, DWORD* nclst, FATFS** fatfs);	/* Get number of free clusters on the drive */
NFRESULT f_getlabel (const TCHAR* path, TCHAR* label, DWORD* vsn);	/* Get volume label */
NFRESULT f_setlabel (const TCHAR* label);							/* Set volume label */
NFRESULT f_mount (FATFS* fs, const TCHAR* path, BYTE opt);			/* Mount/Unmount a logical drive */
NFRESULT f_mkfs (const TCHAR* path, BYTE sfd, UINT au);				/* Create a file system on the volume */
NFRESULT f_fdisk (BYTE pdrv, const DWORD szt[], void* work);			/* Divide a physical drive into some partitions */
Nint f_putc (TCHAR c, FIL* fp);										/* Put a character to the file */
Nint f_puts (const TCHAR* str, FIL* cp);								/* Put a string to the file */
Nint f_printf (FIL* fp, const TCHAR* str, ...);						/* Put a formatted string to the file */
NTCHAR* f_gets (TCHAR* buff, int len, FIL* fp);						/* Get a string from the file */
N
N#define f_eof(fp) (((fp)->fptr == (fp)->fsize) ? 1 : 0)
N#define f_error(fp) ((fp)->err)
N#define f_tell(fp) ((fp)->fptr)
N#define f_size(fp) ((fp)->fsize)
N
N#ifndef EOF
S#define EOF (-1)
N#endif
N
N
N
N
N/*--------------------------------------------------------------*/
N/* Additional user defined functions                            */
N
N/* RTC function */
N#if !_FS_READONLY
X#if !0
NDWORD get_fattime (void);
N#endif
N
N/* Unicode support functions */
N#if _USE_LFN							/* Unicode - OEM code conversion */
X#if 2							 
NWCHAR ff_convert (WCHAR chr, UINT dir);	/* OEM-Unicode bidirectional conversion */
NWCHAR ff_wtoupper (WCHAR chr);			/* Unicode upper-case conversion */
N#if _USE_LFN == 3						/* Memory functions */
X#if 2 == 3						 
Svoid* ff_memalloc (UINT msize);			/* Allocate memory block */
Svoid ff_memfree (void* mblock);			/* Free memory block */
N#endif
N#endif
N
N/* Sync functions */
N#if _FS_REENTRANT
X#if 0
Sint ff_cre_syncobj (BYTE vol, _SYNC_t* sobj);	/* Create a sync object */
Sint ff_req_grant (_SYNC_t sobj);				/* Lock sync object */
Svoid ff_rel_grant (_SYNC_t sobj);				/* Unlock sync object */
Sint ff_del_syncobj (_SYNC_t sobj);				/* Delete a sync object */
N#endif
N
N
N
N
N/*--------------------------------------------------------------*/
N/* Flags and offset address                                     */
N
N
N/* File access control and file status flags (FIL.flag) */
N
N#define	FA_READ				0x01
N#define	FA_OPEN_EXISTING	0x00
N
N#if !_FS_READONLY
X#if !0
N#define	FA_WRITE			0x02
N#define	FA_CREATE_NEW		0x04
N#define	FA_CREATE_ALWAYS	0x08
N#define	FA_OPEN_ALWAYS		0x10
N#define FA__WRITTEN			0x20
N#define FA__DIRTY			0x40
N#endif
N
N
N/* FAT sub type (FATFS.fs_type) */
N
N#define FS_FAT12	1
N#define FS_FAT16	2
N#define FS_FAT32	3
N
N
N/* File attribute bits for directory entry */
N
N#define	AM_RDO	0x01	/* Read only */
N#define	AM_HID	0x02	/* Hidden */
N#define	AM_SYS	0x04	/* System */
N#define	AM_VOL	0x08	/* Volume label */
N#define AM_LFN	0x0F	/* LFN entry */
N#define AM_DIR	0x10	/* Directory */
N#define AM_ARC	0x20	/* Archive */
N#define AM_MASK	0x3F	/* Mask of defined bits */
N
N
N/* Fast seek feature */
N#define CREATE_LINKMAP	0xFFFFFFFF
N
N
N
N/*--------------------------------*/
N/* Multi-byte word access macros  */
N
N#if _WORD_ACCESS == 1	/* Enable word access to the FAT structure */
X#if 1 == 1	 
N#define	LD_WORD(ptr)		(WORD)(*(WORD*)(BYTE*)(ptr))
N#define	LD_DWORD(ptr)		(DWORD)(*(DWORD*)(BYTE*)(ptr))
N#define	ST_WORD(ptr,val)	*(WORD*)(BYTE*)(ptr)=(WORD)(val)
N#define	ST_DWORD(ptr,val)	*(DWORD*)(BYTE*)(ptr)=(DWORD)(val)
N#else					/* Use byte-by-byte access to the FAT structure */
S#define	LD_WORD(ptr)		(WORD)(((WORD)*((BYTE*)(ptr)+1)<<8)|(WORD)*(BYTE*)(ptr))
S#define	LD_DWORD(ptr)		(DWORD)(((DWORD)*((BYTE*)(ptr)+3)<<24)|((DWORD)*((BYTE*)(ptr)+2)<<16)|((WORD)*((BYTE*)(ptr)+1)<<8)|*(BYTE*)(ptr))
S#define	ST_WORD(ptr,val)	*(BYTE*)(ptr)=(BYTE)(val); *((BYTE*)(ptr)+1)=(BYTE)((WORD)(val)>>8)
S#define	ST_DWORD(ptr,val)	*(BYTE*)(ptr)=(BYTE)(val); *((BYTE*)(ptr)+1)=(BYTE)((WORD)(val)>>8); *((BYTE*)(ptr)+2)=(BYTE)((DWORD)(val)>>16); *((BYTE*)(ptr)+3)=(BYTE)((DWORD)(val)>>24)
N#endif
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* _FATFS */
L 13 "..\..\User\kiwi_ft\__kiwi_ft_common.h" 2
N#include "crc32.h"
L 1 "..\..\User\kiwi_ft\crc32.h" 1
N/*
N *crc32.h
N *Author: liujian
N */
N
N#ifndef _CRC32_H_
N#define _CRC32_H_
N
N#include "platform.h"
N
N/*
N * Exported functions
N */
Nvoid crc32_init(void);
Nvoid crc32_partial_start(void);
Nvoid crc32_partial_calcu(const uint8_t *pbuff, uint32_t size);
Nuint32_t crc32_partial_stop(void);
Nuint32_t crc32_entire_calcu(const uint8_t *pbuff, uint32_t size);
N
N#endif		// __CRC32_H__
L 14 "..\..\User\kiwi_ft\__kiwi_ft_common.h" 2
N#include "online_update.h"
L 1 "..\..\User\kiwi_ft\online_update.h" 1
N/*
N * online_update.h
N * Author: liujian
N */
N
N#ifndef _ONLINE_UPDATE_ONLINE_UPDATE_H_
N#define _ONLINE_UPDATE_ONLINE_UPDATE_H_
N
N#define	VERSION_MAJOR	(0)
N#define	VERSION_MINOR	(10)
N#define	VERSION_NUM		((VERSION_MAJOR<<8)|(VERSION_MINOR))		// V0.10
N
N//extern void delay_us(uint32_t us);
N//紧凑型的结构体 防止因为字节对齐问题导致留空；目的： crc32校验和sizeof 取len方便
N/**
N * 消息头结构体定义
N */
Ntypedef __packed struct
N{
N	uint32_t magic;		/**< 消息头：魔数 */
N	uint16_t cmd;		/**< 消息头：命令码 */
N	uint8_t seq;		/**< 消息头：序列码 */
N	uint8_t flag;		/**< 消息头：标志码 */
N	uint16_t length;	/**< 消息头：消息体内容长度 */
N	uint32_t crc;		/**< 消息头：消息头CRC32校验 */
N} msg_head_type;
N
N/**
N * 消息体结构体定义
N */
Ntypedef __packed struct
N{
N	uint8_t content[2048];	/**< 消息体:内容 */
N	uint32_t crc;			/**< 消息体：消息体内容CRC32校验 */
N} msg_body_type;
N
N/**
N * 消息结构体定义
N */
Ntypedef __packed struct
N{
N	msg_head_type msg_head;	/**< 消息结构体：消息头 */
N	msg_body_type msg_body;	/**< 消息结构体：消息体 */
N} msg_type;
N
N 
Nextern msg_type msg_recv;
N
Nvoid online_update_init(void);
Nvoid online_update(void);
Nfsm_rt_t online_update_sm(uint8_t cmd,uint32_t len,uint8_t* pdat);
N
N#endif /* _SRC_ONLINE_UPDATE_ONLINE_UPDATE_H_ */
L 15 "..\..\User\kiwi_ft\__kiwi_ft_common.h" 2
N#include "log.h"
L 1 "..\..\User\LOG\log.h" 1
N
N#ifndef __LOG_H_
N#define __LOG_H_
N#include <stdarg.h>
N#define OPEN_LOG 1
N#define LOG_LEVEL LOG_DEBUG
N
Ntypedef enum
N{
N	LOG_DEBUG = 0,
N	LOG_INFO,
N	LOG_WARN,
N	LOG_ERROR,
N}E_LOGLEVEL;
Nvoid EM_LOG(const int level, const char* fun, const int line, const char* fmt, ...);
N#define EMLOG(level,fmt,...) EM_LOG(level,__FUNCTION__,__LINE__,fmt, ##__VA_ARGS__)
N
Nextern uint32_t chip_counter_pass;
Nextern uint32_t chip_counter_fail;
Nextern uint32_t chip_counter_total;
N
Nint32_t sd_file_sys_mount(void);
Nint32_t logger_txt_creat(void);
N
Nvoid ft_logger_data_clear(void);
N//void logger_start(void);
Nvoid logger(const char *fmt,...);
N
Nint32_t logger_buffer_write(const char *fmt,...);
Nint32_t logger_sd_card_write(void);
N
N#if 1  /* 可以看各个测试项的具体时间 ms*/
N#define logging(fmt,arg...)    logger_buffer_write("[%8d]" fmt,g_iRunTime, ##arg)
N#elif  0
S#define logging(fmt,arg...)  logger("[%8d]" fmt,g_iRunTime, ##arg)
S#elif 0 /* 不看各个测试项具体时间 */
S#define logging  logger 
N#endif
Nvoid logger_over(void);
N
N#endif
N
L 16 "..\..\User\kiwi_ft\__kiwi_ft_common.h" 2
N#define delay_us                bsp_DelayUS
N#define delay_ms                bsp_DelayMS
N#define BEEP_PASS()             BEEP_Start(10, 1, 1);	/* 鸣叫100ms，停10ms， 1次 */
N#define BEEP_FAIL()             BEEP_Start(5, 10, 3);	/* 鸣叫50ms，停100ms， 3次 */	 
N 
N 
N
Nextern lwrb_t kiwi_ack_buf;
N 
Ntypedef enum
N{
N    asu_nor0=0,
N    asu_nor1,
N    asu_nor2,
N    asu_asu,
N    asu_dis,
N    
N}asu_e;
N
N 
N
Ntypedef struct
N{
N    #define CONTENT_LEN_MAX 550
N    uint32_t cmd;
N    uint32_t addr;
N    uint32_t len;
N    union
N    {
N        uint32_t content_word[CONTENT_LEN_MAX];
X        uint32_t content_word[550];
N        uint8_t  content_byte[CONTENT_LEN_MAX*4];
X        uint8_t  content_byte[550*4];
N    };
N    uint32_t  check_sum;
N}msg_t;//kiwi ack 
N
Nextern msg_t msg_ack;
N
N
Ntypedef struct
N{
N    union  /* trim fail 标志 ,置位 为fail    */
N    {
N        struct
N        {
N            uint32_t    pass_efuse_read         :1;
N            uint32_t    pass_pmu_bgr_trim       :1;
N            uint32_t    pass_pmu_lpv_trim       :1;
N            uint32_t    pass_osc_audio_trim     :1;
N            uint32_t    pass_osc_pmu_trim       :1;
N            uint32_t    pass_osc_core_trim      :1;
N            uint32_t    pass_efuse_write        :1;
N            uint32_t    pass_flash_program      :1;
N            uint32_t    pass_reservd            :24;
N        };
N        uint32_t trim_pass;   
N    };
N    
N    union  /* trim fail 标志 ,置位 为fail    */
N    {
N        struct
N        {
N            uint32_t    fail_efuse_read         :1;
N            uint32_t    fail_pmu_lpv_trim       :1;
N            uint32_t    fail_pmu_bgr_trim       :1;
N            uint32_t    fail_osc_audio_trim     :1;
N            uint32_t    fail_osc_pmu_trim       :1;
N            uint32_t    fail_osc_core_trim      :1;
N            uint32_t    fail_efuse_write        :1;
N            uint32_t    fail_flash_program      :1;
N            uint32_t    fail_reservd            :24;
N        };
N        uint32_t trim_fail;   
N    };
N
N//    union
N//    {
N//        uint32_t pmu_trim_reg_val;
N//        struct
N//        {
N//            uint32_t reserved0       : 18;
N//            uint32_t osc_pmu_trim    : 5;
N//            uint32_t reserved1       : 3;
N//            uint32_t lpv_trim        : 1;
N//            uint32_t bgr_trim        : 4;
N//        };
N//    };
N    
N    uint8_t     pmu_bgr_trim_val;
N    uint8_t     pmu_bgr_trim_power_on;
N    uint8_t     pmu_bgr_trim_default;
N    uint32_t    pmu_bgr_trim_volt;
N    uint32_t    pmu_bgr_trim_volt_default;
N    
N    uint8_t     pmu_lpv_trim_val;
N    uint8_t     pmu_lpv_trim_power_on;
N    uint8_t     pmu_lpv_trim_default;
N    uint32_t    pmu_lpv_trim_volt;
N    uint32_t    pmu_lpv_trim_volt_default;
N    
N    uint8_t     osc_audio_trim_val;
N    uint8_t     osc_audio_trim_power_on;
N    uint8_t     osc_audio_trim_default;
N    uint32_t    osc_audio_trim_freq;
N    uint32_t    osc_audio_trim_freq_default;
N    
N    uint8_t     osc_pmu_trim_val;
N    uint8_t     osc_pmu_trim_power_on;
N    uint8_t     osc_pmu_trim_default;
N    uint32_t    osc_pmu_trim_freq;
N    uint32_t    osc_pmu_trim_freq_default;
N    
N    uint8_t     osc_core_trim_val[7];  //60 70 80 90 100 110 120
N    uint32_t    osc_core_trim_freq[7];
N    uint8_t     osc_core_trim_default;
N    //uint8_t     osc_core_trim_power_on; //不需要，osc core的trim值efuse保存区域是后定义的，不会上电自动加载
N    uint32_t    osc_core_trim_freq_default;
N    
N    int32_t standby_current;
N
N}trim_result_t;
N
N
N
N
Nextern trim_result_t    trim_result;
Nextern kiwi_efuse_t   efuse_pre_data;
Nextern kiwi_efuse_t   efuse_post_data;
N
N
Nuint8_t is_test_item(item_e item);
N
N#define TXRX_PIN_MODE_COM           0
N#define TXRX_PIN_MODE_IO_LOW        1
N#define TXRX_PIN_MODE_IO_HIGH       2
N
Nvoid tx_rx_mode_set(uint8_t tx_rx_mode);
N
N 
Nint32_t asu_write(uint32_t addr,uint32_t * pdat,uint32_t len);
Nint32_t asu_read(uint32_t addr,uint32_t * pbuf,uint32_t len);
Nint32_t asu_write_bytes(uint32_t addr,uint8_t * pbuf,uint32_t len);
Nint32_t asu_read_bytes(uint32_t addr,uint8_t * pbuf,uint32_t len);
N 
Nint32_t asu_connect(void);
Nint32_t nor0_connect(void);
Nvoid asu_disconnect(void);
N
Nvoid asu_write_bitwise_or(uint32_t addr,uint32_t dat);
Nvoid asu_write_msk_set(uint32_t addr,uint32_t msk, uint32_t dat);
Nvoid pattern_spi_write(uint8_t func_type,uint8_t * pdat,uint8_t len);
Nvoid send_spi_get_result(void);
Nvoid asu_test(void);
N
N 
Nint32_t pattern_file_open(void);
Nint32_t customer_file_open(void);
N
Nvoid spl_send_head(uint32_t cmd,uint32_t addr,uint32_t len);
Nvoid spl_send_body(uint32_t len,uint8_t* pdat);
Nvoid spl_send_tail(void);
N
Nvoid asu_pack_send(uint32_t cmd,uint32_t addr,uint32_t len,uint8_t* pdat);
Nfsm_rt_t kiwi_ack_paser(void);
N 
Nfsm_rt_t asu_read_word(uint32_t addr, uint32_t* pdat);
Nfsm_rt_t asu_read_buf(uint32_t addr, uint32_t len, uint32_t **p);
N
Nfsm_rt_t asu_write_word(uint32_t addr, uint32_t data);
N
Nfsm_rt_t asu_write_buf(uint32_t addr,uint32_t len, uint32_t* buf);
N
Nfsm_rt_t test_hand_shark_state(void);
N
Nfsm_rt_t asu_current_state(void);
Nfsm_rt_t asu_efuse_read_state(void);
Nfsm_rt_t asu_cmu_state(void);
Nfsm_rt_t asu_pmu_state(void);
Nfsm_rt_t asu_bist_state(void);
Nfsm_rt_t asu_ram_pattern_state(void);
Nfsm_rt_t asu_flash_state(void);
Nfsm_rt_t asu_pattern_result_state(void);
Nfsm_rt_t asu_efuse_write_state(void);
N
N#endif
L 6 "..\..\User\kiwi_ft\asu_current.c" 2
N//static fsm_rt_t status_kiwi_current(float parameter[2]);
N//void GPIO_ONOFF_init(void);//Pa15  ONOFF控制脚初始化
N//static void current_test_init(void);
Nfsm_rt_t asu_current_state(void)
N{
N    #define GPIO08_CTL      0x20090020
N    #define GPIO_ONOFF      0x20090130
N    #define PMU_STATE_CTL   0x200C0000
N    #define PMU_ONOFF_CTL   0x200C000C
N    #define PMU_ALARM_CTL   0x200C0010
N    #define PMU_WAK_EN      0x200C0024
N    static fsm_rt_t ret=fsm_rt_cpl;
N    static enum
N    {
N        START = 0,
N        ENTER_STANDBY,
N        MEASURE_CURRENT,
N        CPL,
N    } s_tState = START;
N 
N    static uint32_t adc_cnt;
N    static uint32_t adc_sum;
N    
N    timer_creat();
X    static int32_t timer=0;
N    switch( s_tState )
N    {
N    case START:
N        adc_cnt = 0;
N        adc_sum = 0;
N        s_tState++;
N        //break;
N    
N    case ENTER_STANDBY:
N        do
N        {
N           ret = online_update_sm(0xF5,0,NULL);
X           ret = online_update_sm(0xF5,0,0);
N        }while(ret == fsm_rt_on_going);
N        if(ret != fsm_rt_cpl )
N        {
N            return fsm_rt_err_hibernate_ack;
N        }
N        hp_osc_deinit();
N        test_power.consumption_on();                                        //接入功耗测量电阻100欧姆
N        timer_start(1500);
X        timer=g_iRunTime + 1500;
N        s_tState = MEASURE_CURRENT;
N        break;
N    
N    case MEASURE_CURRENT:
N        if( is_time_up() )
X        if( ((g_iRunTime - timer) < (4294967295u/2)) )
N        {
N            adc_sum += g_adc_value[ADC_RANK_AMP];
X            adc_sum += g_adc_value[2];
N            adc_cnt++;
N            timer_start(1);
X            timer=g_iRunTime + 1;
N            if(adc_cnt == 64)
N            {
N                uint32_t current_adc_mean = adc_sum/64;
N                trim_result.standby_current = current_adc_mean*3300/4095;
N                if((trim_result.standby_current > STANDBY_CURRENT_LO) && (trim_result.standby_current < STANDBY_CURRENT_HI))
X                if((trim_result.standby_current > 20) && (trim_result.standby_current < 60))
N                {
N                    //bsp_kiwi_onoff_init();
N                    //bsp_kiwi_onoff_hi();           //ONOFF信号高
N                    test_power.consumption_off();  //电流取样电阻去除
N                    ret = fsm_rt_cpl;
N                    logging("SUCCESS current:%d.%duA\r\n",trim_result.standby_current/10, trim_result.standby_current%10);
X                    logger_buffer_write("[%8d]" "SUCCESS current:%d.%duA\r\n",g_iRunTime,trim_result . standby_current/10, trim_result . standby_current%10);
N                }
N                else
N                {
N                    logging("FAIL current:%d.%duA\r\n",trim_result.standby_current/10, trim_result.standby_current%10);
X                    logger_buffer_write("[%8d]" "FAIL current:%d.%duA\r\n",g_iRunTime,trim_result . standby_current/10, trim_result . standby_current%10);
N                    
N                    ret = fsm_rt_err_standby_current;
N                }
N                s_tState = CPL;
N            }
N        }
N        break;
N    
N    case CPL:
N        s_tState = START;
N        return ret;
N        //break;
N    }
N    
N    return fsm_rt_on_going;
N}
N
N
N#define NO_LOAD_CURRENT_LO   5
N#define NO_LOAD_CURRENT_HI   20 
N 
Nuint32_t g_no_load_current;
N//空载电流校准
Nfsm_rt_t no_load_current_calibration(void)
N{
N    static enum
N    {
N        START = 0,
N        CALI_POWER_ON,
N        NO_LOAD_CALI,
N        CALI_OVER,
N        CPL,
N    } s_tState = START;
N 
N    static uint32_t adc_cnt;
N    static uint32_t adc_sum;
N    static uint32_t cali_sum;
N    static uint32_t cali_cnt;
N    static uint32_t temp;
N    timer_creat();
X    static int32_t timer=0;
N    switch( s_tState )
N    {
N    case START:
N        temp = 0;
N        cali_cnt = 0;
N        cali_sum = 0;
N        s_tState++;
N        //break;
N    
N    case CALI_POWER_ON:
N        adc_sum = 0;
N        adc_cnt = 0;
N        test_power.on();
N        test_power.consumption_on();                                        //接入功耗测量电阻100欧姆
N        timer_start(500);
X        timer=g_iRunTime + 500;
N        s_tState = NO_LOAD_CALI; 
N        //break;
N    
N    case NO_LOAD_CALI:  //检查是否进入 standby ，如进入后则测功耗 之后退出低功耗
N        if( is_time_up() )
X        if( ((g_iRunTime - timer) < (4294967295u/2)) )
N        {
N            adc_sum += g_adc_value[ADC_RANK_AMP];
X            adc_sum += g_adc_value[2];
N            adc_cnt++;
N            //timer_start(1);
N            if(adc_cnt == 1024)
N            {
N                uint32_t current_adc_mean = adc_sum/1024;
N                temp = current_adc_mean*3300/4095;
N                test_power.consumption_off();  //电流取样电阻去除
N                test_power.off();
N                s_tState = CALI_OVER;
N                timer_start(100);
X                timer=g_iRunTime + 100;
N            }
N        }
N        break;
N
N    case CALI_OVER:
N        if(is_time_up())
X        if(((g_iRunTime - timer) < (4294967295u/2)))
N        {
N            cali_sum += temp;
N            cali_cnt++;
N            if(cali_cnt == 8)
N            {
N                temp = cali_sum/8;
N                s_tState = CPL;
N            }
N            else
N            {
N                s_tState = CALI_POWER_ON;
N            }
N        }
N        break;
N    case CPL:   //结束
N        
N        s_tState = START;
N        
N        if((temp > NO_LOAD_CURRENT_LO) && (temp < NO_LOAD_CURRENT_HI))
X        if((temp > 5) && (temp < 20))
N        {
N            test_power.consumption_off();  //电流取样电阻去除
N            logging("SUCCESS current:%d.%duA\r\n",temp/10, temp%10);
X            logger_buffer_write("[%8d]" "SUCCESS current:%d.%duA\r\n",g_iRunTime,temp/10, temp%10);
N            return fsm_rt_cpl;
N        }
N        else
N        {
N            logging("FAIL current:%d.%duA\r\n",temp/10, temp%10);
X            logger_buffer_write("[%8d]" "FAIL current:%d.%duA\r\n",g_iRunTime,temp/10, temp%10);
N            return fsm_rt_err_no_load_current;
N        }
N        //break;
N           
N    }
N    return fsm_rt_on_going;
N}
