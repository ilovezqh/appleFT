; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\bsp.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\bsp.crf ..\..\User\bsp_stm32f4xx\bsp.c]
                          THUMB

                          AREA ||i.bsp_Idle||, CODE, READONLY, ALIGN=1

                  bsp_Idle PROC
;;;119    */
;;;120    void bsp_Idle(void)
000000  4770              BX       lr
;;;121    {
;;;122    	/* --- 喂狗 */
;;;123    
;;;124    	/* --- 让CPU进入休眠，由Systick定时中断唤醒或者其他中断唤醒 */
;;;125    
;;;126    	/* 对于 emWin 图形库，可以插入图形库需要的轮询函数 */
;;;127    	//GUI_Exec();
;;;128    
;;;129    	/* 对于 uIP 协议实现，可以插入uip轮询函数 */
;;;130    }
;;;131    
                          ENDP


                          AREA ||i.bsp_Init||, CODE, READONLY, ALIGN=2

                  bsp_Init PROC
;;;32     */
;;;33     void bsp_Init(void)
000000  b510              PUSH     {r4,lr}
;;;34     {
;;;35         extern void sys_halt_process(void);
;;;36     	/*
;;;37     		由于ST固件库的启动文件已经执行了CPU系统时钟的初始化，所以不必再次重复配置系统时钟。
;;;38     		启动文件配置了CPU主时钟频率、内部Flash访问速度和可选的外部SRAM FSMC初始化。
;;;39     
;;;40     		系统时钟缺省配置为168MHz，如果需要更改，可以修改 system_stm32f4xx.c 文件
;;;41     	*/
;;;42         /* 优先级分组设置为4 */
;;;43         NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
000002  f44f7040          MOV      r0,#0x300
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;44         /* 直接调用 taget->IROM1内设置的数据 */
;;;45         extern int Image$$ER_IROM1$$Base; /* MDK 里面内置的特殊变量: taget->IROM1内设置的数据 */
;;;46         NVIC_SetVectorTable(NVIC_VectTab_FLASH, (uint32_t)&Image$$ER_IROM1$$Base);
00000a  4913              LDR      r1,|L2.88|
00000c  f04f6000          MOV      r0,#0x8000000
000010  f7fffffe          BL       NVIC_SetVectorTable
;;;47         /* 检测系统是否从独立看门狗复位中恢复 */
;;;48         dut_param_init();
000014  f7fffffe          BL       dut_param_init
;;;49     	key_init();
000018  f7fffffe          BL       key_init
;;;50     	bsp_InitUart(); 	/* 初始化串口 */
00001c  f7fffffe          BL       bsp_InitUart
;;;51         bsp_InitLed();
000020  f7fffffe          BL       bsp_InitLed
;;;52     //	bsp_InitKey();		/* 初始化按键变量（必须在 bsp_InitTimer() 之前调用） */
;;;53     	bsp_InitTimer();	/* 初始化系统滴答定时器 */
000024  f7fffffe          BL       bsp_InitTimer
;;;54         BEEP_InitHard();
000028  f7fffffe          BL       BEEP_InitHard
;;;55         robot_com_init();
00002c  f7fffffe          BL       robot_com_init
;;;56         //bsp_InitIwdg(15000); 
;;;57         board_type_init();
000030  f7fffffe          BL       board_type_init
;;;58         bsp_DelayMS(10);
000034  200a              MOVS     r0,#0xa
000036  f7fffffe          BL       bsp_DelayMS
;;;59     
;;;60         bsp_ch440r_init();
00003a  f7fffffe          BL       bsp_ch440r_init
;;;61     
;;;62         bsp_InitSPIBus();
00003e  f7fffffe          BL       bsp_InitSPIBus
;;;63         
;;;64         bsp_lcd_init();
000042  f7fffffe          BL       bsp_lcd_init
;;;65         bsp_InitI2C();
000046  f7fffffe          BL       bsp_InitI2C
;;;66         
;;;67         //bsp_InitRTC();
;;;68         
;;;69         
;;;70     //    volt_out_init();   /* 初始化4.2V OUT，关掉输出 */
;;;71     //	short_100R_init(); /*初始化100R采样电阻，不接入100R*/
;;;72         bsp_InitADC();
00004a  f7fffffe          BL       bsp_InitADC
;;;73        //  
;;;74        bsp_DelayMS(10);
00004e  200a              MOVS     r0,#0xa
000050  f7fffffe          BL       bsp_DelayMS
;;;75        
;;;76        
;;;77      
;;;78     	/* 针对不同的应用程序，添加需要的底层驱动模块初始化函数 */
;;;79     }
000054  bd10              POP      {r4,pc}
;;;80     
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      ||Image$$ER_IROM1$$Base||

                          AREA ||i.bsp_RunPer10ms||, CODE, READONLY, ALIGN=1

                  bsp_RunPer10ms PROC
;;;89     */
;;;90     void bsp_RunPer10ms(void)
000000  b510              PUSH     {r4,lr}
;;;91     {
;;;92     //	bsp_KeyScan10ms();		/* 按键扫描 */
;;;93         
;;;94         BEEP_Pro();
000002  f7fffffe          BL       BEEP_Pro
;;;95     }
000006  bd10              POP      {r4,pc}
;;;96     
                          ENDP


                          AREA ||i.bsp_RunPer1ms||, CODE, READONLY, ALIGN=1

                  bsp_RunPer1ms PROC
;;;105    */
;;;106    void bsp_RunPer1ms(void)
000000  4770              BX       lr
;;;107    {
;;;108    	//TOUCH_Scan();	/* 触摸扫描 */
;;;109    }
;;;110    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\bsp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_bsp_Init____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_bsp_c_bsp_Init____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_bsp_Init____REVSH|
#line 144
|__asm___5_bsp_c_bsp_Init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
