; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\test_spl.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\test_spl.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\test_spl.crf ..\..\User\chip_ft\test_spl.c]
                          THUMB

                          AREA ||i.spu_test||, CODE, READONLY, ALIGN=2

                  spu_test PROC
;;;62     
;;;63     static fsm_rt_t spu_test(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;64     {	
000002  b091              SUB      sp,sp,#0x44
;;;65         static enum
;;;66         {
;;;67             START = 0,
;;;68             IS_SPU_RDY,
;;;69             TOUCH_ON,
;;;70             SPU_TEST,
;;;71             CALI_CAP_ANALYSE,
;;;72         } s_tState = START;
;;;73         
;;;74         #define ALL_CH_TOUCHED         0x1E0F // 0001 1110  0000 1111
;;;75         #define SPU_READY_MAGIC_NUM    0X5A   
;;;76         #define CALI_CAP_OFFSET_MAX       4
;;;77         #define CH_NUM_TOTAL              8
;;;78         #define SNS_NUM_TOTAL             13
;;;79         static const int8_t cali_cap_standard[SNS_NUM_TOTAL] =  //socket板测试环境下认为的校准电容的标准值
;;;80         { // 0    1   2   3   4     5    6    7   8    9   10   11  12   
;;;81             -91, -90,-90,-91,-108,-109,-108,-108,-108,-90,-88, -89, -92
;;;82         };
;;;83         static uint8_t recv_ch_num      =0;
;;;84         static uint8_t last_recv_num    =0;
;;;85         static uint8_t uart_pass        =0;
;;;86         static uint8_t spu_pass         =0;
;;;87         static uint8_t cali_cap_pass    =0;
;;;88         static uint8_t has_cali_cap_flg =0;
;;;89         static uint16_t pressing_ch_bit =0;
;;;90         static int8_t cali_cap[13];
;;;91         static int8_t cali_cap_offset[13];
;;;92         timer_creat();
;;;93         fsm_rt_t ret;
;;;94         
;;;95         switch(s_tState)
000004  48d5              LDR      r0,|L1.860|
000006  7800              LDRB     r0,[r0,#0]  ; s_tState
000008  2805              CMP      r0,#5
00000a  d239              BCS      |L1.128|
00000c  e8dff000          TBB      [pc,r0]
000010  0325394e          DCB      0x03,0x25,0x39,0x4e
000014  fd00              DCB      0xfd,0x00
;;;96         {
;;;97         case START:
;;;98             recv_ch_num      = 0;
000016  2000              MOVS     r0,#0
000018  49d1              LDR      r1,|L1.864|
00001a  7008              STRB     r0,[r1,#0]
;;;99             last_recv_num    = 0;
00001c  49d1              LDR      r1,|L1.868|
00001e  7008              STRB     r0,[r1,#0]
;;;100            uart_pass        = 0;
000020  49d1              LDR      r1,|L1.872|
000022  7008              STRB     r0,[r1,#0]
;;;101            spu_pass         = 0;
000024  49d1              LDR      r1,|L1.876|
000026  7008              STRB     r0,[r1,#0]
;;;102            cali_cap_pass    = 0;
000028  49d1              LDR      r1,|L1.880|
00002a  7008              STRB     r0,[r1,#0]
;;;103            pressing_ch_bit  = 0;
00002c  49d1              LDR      r1,|L1.884|
00002e  8008              STRH     r0,[r1,#0]
;;;104            has_cali_cap_flg = 0;
000030  49d1              LDR      r1,|L1.888|
000032  7008              STRB     r0,[r1,#0]
;;;105            memset(cali_cap,        0,sizeof(cali_cap));
000034  210d              MOVS     r1,#0xd
000036  48d1              LDR      r0,|L1.892|
000038  f7fffffe          BL       __aeabi_memclr
;;;106            memset(cali_cap_offset, 0,sizeof(cali_cap_offset));
00003c  210d              MOVS     r1,#0xd
00003e  48d0              LDR      r0,|L1.896|
000040  f7fffffe          BL       __aeabi_memclr
;;;107            set_apple_soft_work();
000044  f7fffffe          BL       set_apple_soft_work
;;;108            comClearRxFifo(COM2);
000048  2001              MOVS     r0,#1
00004a  f7fffffe          BL       comClearRxFifo
;;;109            s_tState++;
00004e  48c3              LDR      r0,|L1.860|
000050  7800              LDRB     r0,[r0,#0]  ; s_tState
000052  1c40              ADDS     r0,r0,#1
000054  49c1              LDR      r1,|L1.860|
000056  7008              STRB     r0,[r1,#0]
;;;110            //break;
;;;111        
;;;112        case IS_SPU_RDY:
000058  bf00              NOP      
;;;113            {
;;;114                uint8_t num;
;;;115                i2c_read_register(I2C_DEV16_ADDR,&num,GLOBAL3_REG,1);
00005a  2301              MOVS     r3,#1
00005c  f24c3203          MOV      r2,#0xc303
000060  a910              ADD      r1,sp,#0x40
000062  2060              MOVS     r0,#0x60
000064  f7fffffe          BL       apple_read_addr16
;;;116                if(num == SPU_READY_MAGIC_NUM)
000068  f89d0040          LDRB     r0,[sp,#0x40]
00006c  285a              CMP      r0,#0x5a
00006e  d107              BNE      |L1.128|
;;;117                {
;;;118                    timer_start(20); //SPU初始化完毕后再延时20ms 触发touch
000070  48c4              LDR      r0,|L1.900|
000072  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000074  3014              ADDS     r0,r0,#0x14
000076  49c4              LDR      r1,|L1.904|
000078  6008              STR      r0,[r1,#0]  ; timer
;;;119                    s_tState = TOUCH_ON;
00007a  2002              MOVS     r0,#2
00007c  49b7              LDR      r1,|L1.860|
00007e  7008              STRB     r0,[r1,#0]
                  |L1.128|
;;;120                }
;;;121            }
;;;122            break;
000080  e164              B        |L1.844|
;;;123            
;;;124        case TOUCH_ON:
;;;125            if(is_time_up())
000082  48c0              LDR      r0,|L1.900|
000084  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000086  49c0              LDR      r1,|L1.904|
000088  6809              LDR      r1,[r1,#0]  ; timer
00008a  1a40              SUBS     r0,r0,r1
00008c  f06f4100          MVN      r1,#0x80000000
000090  4288              CMP      r0,r1
000092  d20a              BCS      |L1.170|
;;;126            {
;;;127                socket_touch_on();
000094  f7fffffe          BL       socket_touch_on
;;;128                timer_start(500);   //启动测试超时
000098  48ba              LDR      r0,|L1.900|
00009a  6800              LDR      r0,[r0,#0]  ; g_iRunTime
00009c  f50070fa          ADD      r0,r0,#0x1f4
0000a0  49b9              LDR      r1,|L1.904|
0000a2  6008              STR      r0,[r1,#0]  ; timer
;;;129                s_tState = SPU_TEST;
0000a4  2003              MOVS     r0,#3
0000a6  49ad              LDR      r1,|L1.860|
0000a8  7008              STRB     r0,[r1,#0]
                  |L1.170|
;;;130            }
;;;131            break;
0000aa  e14f              B        |L1.844|
;;;132             
;;;133        case SPU_TEST:
;;;134            if(comGetChar(COM2, &recv_ch_num))
0000ac  49ac              LDR      r1,|L1.864|
0000ae  2001              MOVS     r0,#1
0000b0  f7fffffe          BL       comGetChar
0000b4  2800              CMP      r0,#0
0000b6  d05c              BEQ      |L1.370|
;;;135            {
;;;136     
;;;137                if(recv_ch_num != last_recv_num)
0000b8  48a9              LDR      r0,|L1.864|
0000ba  7800              LDRB     r0,[r0,#0]  ; recv_ch_num
0000bc  49a9              LDR      r1,|L1.868|
0000be  7809              LDRB     r1,[r1,#0]  ; last_recv_num
0000c0  4288              CMP      r0,r1
0000c2  d056              BEQ      |L1.370|
;;;138                {
;;;139                    uart_pass = 1;
0000c4  2001              MOVS     r0,#1
0000c6  49a8              LDR      r1,|L1.872|
0000c8  7008              STRB     r0,[r1,#0]
;;;140                    last_recv_num = recv_ch_num;
0000ca  48a5              LDR      r0,|L1.864|
0000cc  7800              LDRB     r0,[r0,#0]  ; recv_ch_num
0000ce  49a5              LDR      r1,|L1.868|
0000d0  7008              STRB     r0,[r1,#0]
;;;141                    uint8_t rd[2];
;;;142                    i2c_read_register8(I2C_DEV8_ADDR, rd,0,2);                      //通过DEV8I2C读状态		
0000d2  2302              MOVS     r3,#2
0000d4  2200              MOVS     r2,#0
0000d6  a910              ADD      r1,sp,#0x40
0000d8  2013              MOVS     r0,#0x13
0000da  f7fffffe          BL       apple_read_addr8
;;;143                    pressing_ch_bit = ((uint16_t)rd[0]<<8) | rd[1];                 //获取各触发通道对应的bit置位
0000de  f89d0041          LDRB     r0,[sp,#0x41]
0000e2  f89d1040          LDRB     r1,[sp,#0x40]
0000e6  ea402001          ORR      r0,r0,r1,LSL #8
0000ea  49a2              LDR      r1,|L1.884|
0000ec  8008              STRH     r0,[r1,#0]
;;;144     
;;;145                    if((recv_ch_num == CH_NUM_TOTAL) && (pressing_ch_bit == ALL_CH_TOUCHED))           
0000ee  489c              LDR      r0,|L1.864|
0000f0  7800              LDRB     r0,[r0,#0]  ; recv_ch_num
0000f2  2808              CMP      r0,#8
0000f4  d10b              BNE      |L1.270|
0000f6  4608              MOV      r0,r1
0000f8  8800              LDRH     r0,[r0,#0]  ; pressing_ch_bit
0000fa  f641610f          MOV      r1,#0x1e0f
0000fe  4288              CMP      r0,r1
000100  d105              BNE      |L1.270|
;;;146                    {
;;;147                        spu_pass = 1;
000102  2001              MOVS     r0,#1
000104  4999              LDR      r1,|L1.876|
000106  7008              STRB     r0,[r1,#0]
;;;148                        s_tState = CALI_CAP_ANALYSE;
000108  2004              MOVS     r0,#4
00010a  4994              LDR      r1,|L1.860|
00010c  7008              STRB     r0,[r1,#0]
                  |L1.270|
;;;149                    }
;;;150                    if(has_cali_cap_flg == 0)
00010e  489a              LDR      r0,|L1.888|
000110  7800              LDRB     r0,[r0,#0]  ; has_cali_cap_flg
000112  bb68              CBNZ     r0,|L1.368|
;;;151                    {
;;;152                        has_cali_cap_flg = 1;
000114  2001              MOVS     r0,#1
000116  4998              LDR      r1,|L1.888|
000118  7008              STRB     r0,[r1,#0]
;;;153                        uint8_t cali_cap_err=0;
00011a  2700              MOVS     r7,#0
;;;154                        for(uint8_t i=0; i<SNS_NUM_TOTAL; i++)
00011c  2400              MOVS     r4,#0
00011e  e020              B        |L1.354|
                  |L1.288|
;;;155                        {
;;;156                            uint8_t temp;
;;;157                            i2c_read_register(I2C_DEV16_ADDR,&temp,0xC821+i*4,1);  //CHnCALL 电容校准值寄存器，只需要读取低BYTE，高BYTE作他用
000120  f64c0021          MOV      r0,#0xc821
000124  eb000084          ADD      r0,r0,r4,LSL #2
000128  b282              UXTH     r2,r0
00012a  2301              MOVS     r3,#1
00012c  a90f              ADD      r1,sp,#0x3c
00012e  2060              MOVS     r0,#0x60
000130  f7fffffe          BL       apple_read_addr16
;;;158                            cali_cap[i] = temp;	
000134  f89d003c          LDRB     r0,[sp,#0x3c]
000138  b240              SXTB     r0,r0
00013a  4990              LDR      r1,|L1.892|
00013c  5508              STRB     r0,[r1,r4]
;;;159                            
;;;160                            int8_t offset =  cali_cap[i] -  cali_cap_standard[i];  //与标准值的偏差
00013e  4608              MOV      r0,r1
000140  5d00              LDRB     r0,[r0,r4]
000142  4992              LDR      r1,|L1.908|
000144  5d09              LDRB     r1,[r1,r4]
000146  1a40              SUBS     r0,r0,r1
000148  b246              SXTB     r6,r0
;;;161                            cali_cap_offset[i] = offset;
00014a  488d              LDR      r0,|L1.896|
00014c  5506              STRB     r6,[r0,r4]
;;;162                            
;;;163                            if( abs((int)offset)  > CALI_CAP_OFFSET_MAX)
00014e  1e30              SUBS     r0,r6,#0
000150  db01              BLT      |L1.342|
000152  4601              MOV      r1,r0
000154  e000              B        |L1.344|
                  |L1.342|
000156  4241              RSBS     r1,r0,#0
                  |L1.344|
000158  2904              CMP      r1,#4
00015a  dd00              BLE      |L1.350|
;;;164                            {
;;;165                                cali_cap_err = 1;
00015c  2701              MOVS     r7,#1
                  |L1.350|
00015e  1c60              ADDS     r0,r4,#1              ;154
000160  b2c4              UXTB     r4,r0                 ;154
                  |L1.354|
000162  2c0d              CMP      r4,#0xd               ;154
000164  dbdc              BLT      |L1.288|
;;;166                            }
;;;167                        }
;;;168                        if(cali_cap_err == 0) cali_cap_pass = 1;  //无错误 cali_cap_pass
000166  b917              CBNZ     r7,|L1.366|
000168  2001              MOVS     r0,#1
00016a  4981              LDR      r1,|L1.880|
00016c  7008              STRB     r0,[r1,#0]
                  |L1.366|
;;;169                    }                 //-128 +127   (-110 +110)
00016e  bf00              NOP      
                  |L1.368|
;;;170                }
000170  bf00              NOP      
                  |L1.370|
;;;171            }
;;;172     
;;;173            if(is_time_up())
000172  4884              LDR      r0,|L1.900|
000174  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000176  4984              LDR      r1,|L1.904|
000178  6809              LDR      r1,[r1,#0]  ; timer
00017a  1a40              SUBS     r0,r0,r1
00017c  f06f4100          MVN      r1,#0x80000000
000180  4288              CMP      r0,r1
000182  d248              BCS      |L1.534|
;;;174            {
;;;175                logging("fail SPU(%d) uart(%d) cali_cap(%d):%04X,%d,[0]%d [1]%d [2]%d [3]%d [4]%d [5]%d [6]%d [7]%d [8]%d [9]%d [10]%d [11]%d [12]%d\r\n",
000184  487e              LDR      r0,|L1.896|
000186  f990200c          LDRSB    r2,[r0,#0xc]  ; cali_cap_offset
00018a  f990100b          LDRSB    r1,[r0,#0xb]  ; cali_cap_offset
00018e  f990000a          LDRSB    r0,[r0,#0xa]  ; cali_cap_offset
000192  4b7b              LDR      r3,|L1.896|
000194  f9933009          LDRSB    r3,[r3,#9]  ; cali_cap_offset
000198  e9cd300c          STRD     r3,r0,[sp,#0x30]
00019c  e9cd120e          STRD     r1,r2,[sp,#0x38]
0001a0  4877              LDR      r0,|L1.896|
0001a2  f9900008          LDRSB    r0,[r0,#8]  ; cali_cap_offset
0001a6  4976              LDR      r1,|L1.896|
0001a8  f9911007          LDRSB    r1,[r1,#7]  ; cali_cap_offset
0001ac  4a74              LDR      r2,|L1.896|
0001ae  f9922006          LDRSB    r2,[r2,#6]  ; cali_cap_offset
0001b2  4b73              LDR      r3,|L1.896|
0001b4  f9933005          LDRSB    r3,[r3,#5]  ; cali_cap_offset
0001b8  e9cd3208          STRD     r3,r2,[sp,#0x20]
0001bc  e9cd100a          STRD     r1,r0,[sp,#0x28]
0001c0  486f              LDR      r0,|L1.896|
0001c2  f9900004          LDRSB    r0,[r0,#4]  ; cali_cap_offset
0001c6  496e              LDR      r1,|L1.896|
0001c8  f9911003          LDRSB    r1,[r1,#3]  ; cali_cap_offset
0001cc  4a6c              LDR      r2,|L1.896|
0001ce  f9922002          LDRSB    r2,[r2,#2]  ; cali_cap_offset
0001d2  4b6b              LDR      r3,|L1.896|
0001d4  f9933001          LDRSB    r3,[r3,#1]  ; cali_cap_offset
0001d8  e9cd3204          STRD     r3,r2,[sp,#0x10]
0001dc  e9cd1006          STRD     r1,r0,[sp,#0x18]
0001e0  4867              LDR      r0,|L1.896|
0001e2  f9900000          LDRSB    r0,[r0,#0]  ; cali_cap_offset
0001e6  495e              LDR      r1,|L1.864|
0001e8  7809              LDRB     r1,[r1,#0]  ; recv_ch_num
0001ea  4a62              LDR      r2,|L1.884|
0001ec  8812              LDRH     r2,[r2,#0]  ; pressing_ch_bit
0001ee  4b60              LDR      r3,|L1.880|
0001f0  781b              LDRB     r3,[r3,#0]  ; cali_cap_pass
0001f2  e9cd3200          STRD     r3,r2,[sp,#0]
0001f6  e9cd1002          STRD     r1,r0,[sp,#8]
0001fa  485b              LDR      r0,|L1.872|
0001fc  7803              LDRB     r3,[r0,#0]  ; uart_pass
0001fe  485b              LDR      r0,|L1.876|
000200  7802              LDRB     r2,[r0,#0]  ; spu_pass
000202  4860              LDR      r0,|L1.900|
000204  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000206  4862              LDR      r0,|L1.912|
000208  e000              B        |L1.524|
00020a  e005              B        |L1.536|
                  |L1.524|
00020c  f7fffffe          BL       logger_buffer_write
;;;176                spu_pass,uart_pass,cali_cap_pass,pressing_ch_bit,recv_ch_num,
;;;177                cali_cap_offset[0],cali_cap_offset[1],cali_cap_offset[2],cali_cap_offset[3],cali_cap_offset[4],cali_cap_offset[5],cali_cap_offset[6],
;;;178                cali_cap_offset[7],cali_cap_offset[8],cali_cap_offset[9],cali_cap_offset[10],cali_cap_offset[11],cali_cap_offset[12]);
;;;179                
;;;180                ret = fsm_rt_err_spu_timeout;
000210  f06f0512          MVN      r5,#0x12
;;;181                goto fail;
000214  e09d              B        |L1.850|
                  |L1.534|
;;;182            }
;;;183            break;
000216  e099              B        |L1.844|
                  |L1.536|
;;;184            
;;;185        case CALI_CAP_ANALYSE:
;;;186             
;;;187            if (cali_cap_pass && spu_pass && uart_pass) 
000218  4855              LDR      r0,|L1.880|
00021a  7800              LDRB     r0,[r0,#0]  ; cali_cap_pass
00021c  b3f0              CBZ      r0,|L1.668|
00021e  4853              LDR      r0,|L1.876|
000220  7800              LDRB     r0,[r0,#0]  ; spu_pass
000222  b3d8              CBZ      r0,|L1.668|
000224  4850              LDR      r0,|L1.872|
000226  7800              LDRB     r0,[r0,#0]  ; uart_pass
000228  b3c0              CBZ      r0,|L1.668|
;;;188            {
;;;189                logging("SUCCESS SPU(%d) uart(%d) cali_cap(%d):%04X,%d,[0]%d [1]%d [2]%d [3]%d [4]%d [5]%d [6]%d [7]%d [8]%d [9]%d [10]%d [11]%d [12]%d\r\n",
00022a  4855              LDR      r0,|L1.896|
00022c  f990100c          LDRSB    r1,[r0,#0xc]  ; cali_cap_offset
000230  f990000b          LDRSB    r0,[r0,#0xb]  ; cali_cap_offset
000234  4a52              LDR      r2,|L1.896|
000236  f992200a          LDRSB    r2,[r2,#0xa]  ; cali_cap_offset
00023a  4b51              LDR      r3,|L1.896|
00023c  f9933009          LDRSB    r3,[r3,#9]  ; cali_cap_offset
000240  e9cd320c          STRD     r3,r2,[sp,#0x30]
000244  e9cd010e          STRD     r0,r1,[sp,#0x38]
000248  484d              LDR      r0,|L1.896|
00024a  f9901008          LDRSB    r1,[r0,#8]  ; cali_cap_offset
00024e  f9902007          LDRSB    r2,[r0,#7]  ; cali_cap_offset
000252  f9900006          LDRSB    r0,[r0,#6]  ; cali_cap_offset
000256  4b4a              LDR      r3,|L1.896|
000258  f9933005          LDRSB    r3,[r3,#5]  ; cali_cap_offset
00025c  e9cd3008          STRD     r3,r0,[sp,#0x20]
000260  e9cd210a          STRD     r2,r1,[sp,#0x28]
000264  4846              LDR      r0,|L1.896|
000266  f9900004          LDRSB    r0,[r0,#4]  ; cali_cap_offset
00026a  4945              LDR      r1,|L1.896|
00026c  f9911003          LDRSB    r1,[r1,#3]  ; cali_cap_offset
000270  4a43              LDR      r2,|L1.896|
000272  f9922002          LDRSB    r2,[r2,#2]  ; cali_cap_offset
000276  4b42              LDR      r3,|L1.896|
000278  f9933001          LDRSB    r3,[r3,#1]  ; cali_cap_offset
00027c  e9cd3204          STRD     r3,r2,[sp,#0x10]
000280  e9cd1006          STRD     r1,r0,[sp,#0x18]
000284  483e              LDR      r0,|L1.896|
000286  f9900000          LDRSB    r0,[r0,#0]  ; cali_cap_offset
00028a  4935              LDR      r1,|L1.864|
00028c  780a              LDRB     r2,[r1,#0]  ; recv_ch_num
00028e  4939              LDR      r1,|L1.884|
000290  8809              LDRH     r1,[r1,#0]  ; pressing_ch_bit
000292  4b37              LDR      r3,|L1.880|
000294  781b              LDRB     r3,[r3,#0]  ; cali_cap_pass
000296  e9cd3100          STRD     r3,r1,[sp,#0]
00029a  e000              B        |L1.670|
                  |L1.668|
00029c  e00f              B        |L1.702|
                  |L1.670|
00029e  e9cd2002          STRD     r2,r0,[sp,#8]
0002a2  4831              LDR      r0,|L1.872|
0002a4  7803              LDRB     r3,[r0,#0]  ; uart_pass
0002a6  4831              LDR      r0,|L1.876|
0002a8  7802              LDRB     r2,[r0,#0]  ; spu_pass
0002aa  4836              LDR      r0,|L1.900|
0002ac  6801              LDR      r1,[r0,#0]  ; g_iRunTime
0002ae  4839              LDR      r0,|L1.916|
0002b0  f7fffffe          BL       logger_buffer_write
;;;190                spu_pass,uart_pass,cali_cap_pass,pressing_ch_bit,recv_ch_num,
;;;191                cali_cap_offset[0],cali_cap_offset[1],cali_cap_offset[2],cali_cap_offset[3],cali_cap_offset[4],cali_cap_offset[5],cali_cap_offset[6],
;;;192                cali_cap_offset[7],cali_cap_offset[8],cali_cap_offset[9],cali_cap_offset[10],cali_cap_offset[11],cali_cap_offset[12]);
;;;193                s_tState = START;
0002b4  2000              MOVS     r0,#0
0002b6  4929              LDR      r1,|L1.860|
0002b8  7008              STRB     r0,[r1,#0]
                  |L1.698|
;;;194                return fsm_rt_cpl;
;;;195            }
;;;196            else
;;;197            {
;;;198                logging("fail SPU(%d) uart(%d) cali_cap(%d):%04X,%d,[0]%d [1]%d [2]%d [3]%d [4]%d [5]%d [6]%d [7]%d [8]%d [9]%d [10]%d [11]%d [12]%d\r\n",
;;;199                spu_pass,uart_pass,cali_cap_pass,pressing_ch_bit,recv_ch_num,
;;;200                cali_cap_offset[0],cali_cap_offset[1],cali_cap_offset[2],cali_cap_offset[3],cali_cap_offset[4],cali_cap_offset[5],cali_cap_offset[6],
;;;201                cali_cap_offset[7],cali_cap_offset[8],cali_cap_offset[9],cali_cap_offset[10],cali_cap_offset[11],cali_cap_offset[12]);
;;;202    
;;;203                ret = fsm_rt_err_spu;
;;;204                goto fail;
;;;205            }
;;;206            //break;
;;;207        }
;;;208     
;;;209        return fsm_rt_on_going;
;;;210        
;;;211        fail:
;;;212        s_tState = START;
;;;213        return ret;
;;;214    }
0002ba  b011              ADD      sp,sp,#0x44
0002bc  bdf0              POP      {r4-r7,pc}
                  |L1.702|
0002be  4830              LDR      r0,|L1.896|
0002c0  f990000c          LDRSB    r0,[r0,#0xc]          ;198  ; cali_cap_offset
0002c4  492e              LDR      r1,|L1.896|
0002c6  f991100b          LDRSB    r1,[r1,#0xb]          ;198  ; cali_cap_offset
0002ca  4a2d              LDR      r2,|L1.896|
0002cc  f992200a          LDRSB    r2,[r2,#0xa]          ;198  ; cali_cap_offset
0002d0  4b2b              LDR      r3,|L1.896|
0002d2  f9933009          LDRSB    r3,[r3,#9]            ;198  ; cali_cap_offset
0002d6  e9cd320c          STRD     r3,r2,[sp,#0x30]      ;198
0002da  e9cd100e          STRD     r1,r0,[sp,#0x38]      ;198
0002de  4828              LDR      r0,|L1.896|
0002e0  f9901008          LDRSB    r1,[r0,#8]            ;198  ; cali_cap_offset
0002e4  f9900007          LDRSB    r0,[r0,#7]            ;198  ; cali_cap_offset
0002e8  4a25              LDR      r2,|L1.896|
0002ea  f9922006          LDRSB    r2,[r2,#6]            ;198  ; cali_cap_offset
0002ee  4b24              LDR      r3,|L1.896|
0002f0  f9933005          LDRSB    r3,[r3,#5]            ;198  ; cali_cap_offset
0002f4  e9cd3208          STRD     r3,r2,[sp,#0x20]      ;198
0002f8  e9cd010a          STRD     r0,r1,[sp,#0x28]      ;198
0002fc  4820              LDR      r0,|L1.896|
0002fe  f9901004          LDRSB    r1,[r0,#4]            ;198  ; cali_cap_offset
000302  f9900003          LDRSB    r0,[r0,#3]            ;198  ; cali_cap_offset
000306  4a1e              LDR      r2,|L1.896|
000308  f9922002          LDRSB    r2,[r2,#2]            ;198  ; cali_cap_offset
00030c  4b1c              LDR      r3,|L1.896|
00030e  f9933001          LDRSB    r3,[r3,#1]            ;198  ; cali_cap_offset
000312  e9cd3204          STRD     r3,r2,[sp,#0x10]      ;198
000316  e9cd0106          STRD     r0,r1,[sp,#0x18]      ;198
00031a  4819              LDR      r0,|L1.896|
00031c  f9900000          LDRSB    r0,[r0,#0]            ;198  ; cali_cap_offset
000320  490f              LDR      r1,|L1.864|
000322  7809              LDRB     r1,[r1,#0]            ;198  ; recv_ch_num
000324  4a13              LDR      r2,|L1.884|
000326  8812              LDRH     r2,[r2,#0]            ;198  ; pressing_ch_bit
000328  4b11              LDR      r3,|L1.880|
00032a  781b              LDRB     r3,[r3,#0]            ;198  ; cali_cap_pass
00032c  e9cd3200          STRD     r3,r2,[sp,#0]         ;198
000330  e9cd1002          STRD     r1,r0,[sp,#8]         ;198
000334  480c              LDR      r0,|L1.872|
000336  7803              LDRB     r3,[r0,#0]            ;198  ; uart_pass
000338  480c              LDR      r0,|L1.876|
00033a  7802              LDRB     r2,[r0,#0]            ;198  ; spu_pass
00033c  4811              LDR      r0,|L1.900|
00033e  6801              LDR      r1,[r0,#0]            ;198  ; g_iRunTime
000340  4813              LDR      r0,|L1.912|
000342  f7fffffe          BL       logger_buffer_write
000346  f06f0511          MVN      r5,#0x11              ;203
00034a  e002              B        |L1.850|
                  |L1.844|
00034c  bf00              NOP                            ;122
00034e  2001              MOVS     r0,#1                 ;209
000350  e7b3              B        |L1.698|
                  |L1.850|
000352  2000              MOVS     r0,#0                 ;212
000354  4901              LDR      r1,|L1.860|
000356  7008              STRB     r0,[r1,#0]            ;212
000358  4628              MOV      r0,r5                 ;213
00035a  e7ae              B        |L1.698|
;;;215    
                          ENDP

                  |L1.860|
                          DCD      |symbol_number.19|
                  |L1.864|
                          DCD      recv_ch_num
                  |L1.868|
                          DCD      last_recv_num
                  |L1.872|
                          DCD      uart_pass
                  |L1.876|
                          DCD      spu_pass
                  |L1.880|
                          DCD      cali_cap_pass
                  |L1.884|
                          DCD      pressing_ch_bit
                  |L1.888|
                          DCD      has_cali_cap_flg
                  |L1.892|
                          DCD      cali_cap
                  |L1.896|
                          DCD      cali_cap_offset
                  |L1.900|
                          DCD      g_iRunTime
                  |L1.904|
                          DCD      timer
                  |L1.908|
                          DCD      cali_cap_standard
                  |L1.912|
                          DCD      ||.conststring||
                  |L1.916|
                          DCD      ||.conststring||+0x84

                          AREA ||i.test_spl||, CODE, READONLY, ALIGN=2

                  test_spl PROC
;;;18     
;;;19     fsm_rt_t test_spl(void)
000000  b510              PUSH     {r4,lr}
;;;20     {
;;;21         static enum
;;;22         {
;;;23             START = 0,
;;;24             TEST_QUERY,
;;;25         } s_tState = START;
;;;26         fsm_rt_t ret;
;;;27         
;;;28         switch(s_tState)
000002  480e              LDR      r0,|L2.60|
000004  7800              LDRB     r0,[r0,#0]  ; s_tState
000006  b110              CBZ      r0,|L2.14|
000008  2801              CMP      r0,#1
00000a  d113              BNE      |L2.52|
00000c  e005              B        |L2.26|
                  |L2.14|
;;;29         {
;;;30         case START:
;;;31             //return fsm_rt_cpl;
;;;32             s_tState++;
00000e  480b              LDR      r0,|L2.60|
000010  7800              LDRB     r0,[r0,#0]  ; s_tState
000012  1c40              ADDS     r0,r0,#1
000014  4909              LDR      r1,|L2.60|
000016  7008              STRB     r0,[r1,#0]
;;;33             //break;
;;;34     
;;;35         case TEST_QUERY: //查询测试结果
000018  bf00              NOP      
                  |L2.26|
;;;36             {
;;;37                 ret = spu_test();
00001a  f7fffffe          BL       spu_test
00001e  4604              MOV      r4,r0
;;;38                 if(ret != fsm_rt_on_going)
000020  2c01              CMP      r4,#1
000022  d006              BEQ      |L2.50|
;;;39                 {
;;;40                     socket_touch_off();
000024  f7fffffe          BL       socket_touch_off
;;;41                     s_tState = START;
000028  2000              MOVS     r0,#0
00002a  4904              LDR      r1,|L2.60|
00002c  7008              STRB     r0,[r1,#0]
;;;42                     return ret;
00002e  4620              MOV      r0,r4
                  |L2.48|
;;;43                 }
;;;44             }
;;;45             break;
;;;46         }
;;;47         return fsm_rt_on_going;
;;;48      
;;;49     }
000030  bd10              POP      {r4,pc}
                  |L2.50|
000032  bf00              NOP                            ;45
                  |L2.52|
000034  bf00              NOP                            ;45
000036  2001              MOVS     r0,#1                 ;47
000038  e7fa              B        |L2.48|
;;;50     
                          ENDP

00003a  0000              DCW      0x0000
                  |L2.60|
                          DCD      s_tState

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  cali_cap
                          %        13
                  cali_cap_offset
                          %        13

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  cali_cap_standard
000000  a5a6a6a5          DCB      0xa5,0xa6,0xa6,0xa5
000004  94939494          DCB      0x94,0x93,0x94,0x94
000008  94a6a8a7          DCB      0x94,0xa6,0xa8,0xa7
00000c  a4                DCB      0xa4

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  5b253864          DCB      "[%8d]fail SPU(%d) uart(%d) cali_cap(%d):%04X,%d,[0]%d ["
000004  5d666169
000008  6c205350
00000c  55282564
000010  29207561
000014  72742825
000018  64292063
00001c  616c695f
000020  63617028
000024  2564293a
000028  25303458
00002c  2c25642c
000030  5b305d25
000034  64205b  
000037  315d2564          DCB      "1]%d [2]%d [3]%d [4]%d [5]%d [6]%d [7]%d [8]%d [9]%d [1"
00003b  205b325d
00003f  2564205b
000043  335d2564
000047  205b345d
00004b  2564205b
00004f  355d2564
000053  205b365d
000057  2564205b
00005b  375d2564
00005f  205b385d
000063  2564205b
000067  395d2564
00006b  205b31  
00006e  305d2564          DCB      "0]%d [11]%d [12]%d\r\n",0
000072  205b3131
000076  5d256420
00007a  5b31325d
00007e  25640d0a
000082  00      
000083  00                DCB      0
000084  5b253864          DCB      "[%8d]SUCCESS SPU(%d) uart(%d) cali_cap(%d):%04X,%d,[0]%"
000088  5d535543
00008c  43455353
000090  20535055
000094  28256429
000098  20756172
00009c  74282564
0000a0  29206361
0000a4  6c695f63
0000a8  61702825
0000ac  64293a25
0000b0  3034582c
0000b4  25642c5b
0000b8  305d25  
0000bb  64205b31          DCB      "d [1]%d [2]%d [3]%d [4]%d [5]%d [6]%d [7]%d [8]%d [9]%d"
0000bf  5d256420
0000c3  5b325d25
0000c7  64205b33
0000cb  5d256420
0000cf  5b345d25
0000d3  64205b35
0000d7  5d256420
0000db  5b365d25
0000df  64205b37
0000e3  5d256420
0000e7  5b385d25
0000eb  64205b39
0000ef  5d2564  
0000f2  205b3130          DCB      " [10]%d [11]%d [12]%d\r\n",0
0000f6  5d256420
0000fa  5b31315d
0000fe  2564205b
000102  31325d25
000106  640d0a00

                          AREA ||.data||, DATA, ALIGN=2

                  s_tState
000000  00                DCB      0x00
                  |symbol_number.19|
000001  00                DCB      0x00
                  recv_ch_num
000002  00                DCB      0x00
                  last_recv_num
000003  00                DCB      0x00
                  uart_pass
000004  00                DCB      0x00
                  spu_pass
000005  00                DCB      0x00
                  cali_cap_pass
000006  00                DCB      0x00
                  has_cali_cap_flg
000007  00                DCB      0x00
                  pressing_ch_bit
000008  0000              DCW      0x0000
00000a  0000              DCB      0x00,0x00
                  timer
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\chip_ft\\test_spl.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_test_spl_c_test_spl____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_test_spl_c_test_spl____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_test_spl_c_test_spl____REVSH|
#line 144
|__asm___10_test_spl_c_test_spl____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
