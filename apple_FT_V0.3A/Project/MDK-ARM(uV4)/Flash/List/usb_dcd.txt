; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\usb_dcd.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\usb_dcd.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\usb_dcd.crf ..\..\Libraries\STM32_USB_OTG_Driver\src\usb_dcd.c]
                          THUMB

                          AREA ||i.DCD_DevConnect||, CODE, READONLY, ALIGN=1

                  DCD_DevConnect PROC
;;;384    */
;;;385    void  DCD_DevConnect (USB_OTG_CORE_HANDLE *pdev)
000000  b538              PUSH     {r3-r5,lr}
;;;386    {
000002  4604              MOV      r4,r0
;;;387    #ifndef USE_OTG_MODE
;;;388      USB_OTG_DCTL_TypeDef  dctl;
;;;389      dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
000004  6920              LDR      r0,[r4,#0x10]
000006  6840              LDR      r0,[r0,#4]
000008  9000              STR      r0,[sp,#0]
;;;390      /* Connect device */
;;;391      dctl.b.sftdiscon  = 0;
00000a  9800              LDR      r0,[sp,#0]
00000c  f0200002          BIC      r0,r0,#2
000010  9000              STR      r0,[sp,#0]
;;;392      USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, dctl.d32);
000012  9900              LDR      r1,[sp,#0]
000014  6920              LDR      r0,[r4,#0x10]
000016  6041              STR      r1,[r0,#4]
;;;393      USB_OTG_BSP_mDelay(3);
000018  2003              MOVS     r0,#3
00001a  f7fffffe          BL       USB_OTG_BSP_mDelay
;;;394    #endif
;;;395    }
00001e  bd38              POP      {r3-r5,pc}
;;;396    
                          ENDP


                          AREA ||i.DCD_DevDisconnect||, CODE, READONLY, ALIGN=1

                  DCD_DevDisconnect PROC
;;;402    */
;;;403    void  DCD_DevDisconnect (USB_OTG_CORE_HANDLE *pdev)
000000  b538              PUSH     {r3-r5,lr}
;;;404    {
000002  4604              MOV      r4,r0
;;;405    #ifndef USE_OTG_MODE
;;;406      USB_OTG_DCTL_TypeDef  dctl;
;;;407      dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
000004  6920              LDR      r0,[r4,#0x10]
000006  6840              LDR      r0,[r0,#4]
000008  9000              STR      r0,[sp,#0]
;;;408      /* Disconnect device for 3ms */
;;;409      dctl.b.sftdiscon  = 1;
00000a  9800              LDR      r0,[sp,#0]
00000c  f0200002          BIC      r0,r0,#2
000010  1c80              ADDS     r0,r0,#2
000012  9000              STR      r0,[sp,#0]
;;;410      USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, dctl.d32);
000014  9900              LDR      r1,[sp,#0]
000016  6920              LDR      r0,[r4,#0x10]
000018  6041              STR      r1,[r0,#4]
;;;411      USB_OTG_BSP_mDelay(3);
00001a  2003              MOVS     r0,#3
00001c  f7fffffe          BL       USB_OTG_BSP_mDelay
;;;412    #endif
;;;413    }
000020  bd38              POP      {r3-r5,pc}
;;;414    
                          ENDP


                          AREA ||i.DCD_EP_Close||, CODE, READONLY, ALIGN=1

                  DCD_EP_Close PROC
;;;193    */
;;;194    uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
000000  b570              PUSH     {r4-r6,lr}
;;;195    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;196      USB_OTG_EP *ep;
;;;197      
;;;198      if ((ep_addr&0x80) == 0x80)
000006  f0040080          AND      r0,r4,#0x80
00000a  2880              CMP      r0,#0x80
00000c  d108              BNE      |L3.32|
;;;199      {
;;;200        ep = &pdev->dev.in_ep[ep_addr & 0x7F];
00000e  f004007f          AND      r0,r4,#0x7f
000012  eb000180          ADD      r1,r0,r0,LSL #2
000016  f506708e          ADD      r0,r6,#0x11c
00001a  eb0005c1          ADD      r5,r0,r1,LSL #3
00001e  e007              B        |L3.48|
                  |L3.32|
;;;201      }
;;;202      else
;;;203      {
;;;204        ep = &pdev->dev.out_ep[ep_addr & 0x7F];
000020  f004007f          AND      r0,r4,#0x7f
000024  eb000180          ADD      r1,r0,r0,LSL #2
000028  f506705d          ADD      r0,r6,#0x374
00002c  eb0005c1          ADD      r5,r0,r1,LSL #3
                  |L3.48|
;;;205      }
;;;206      ep->num   = ep_addr & 0x7F;
000030  f004007f          AND      r0,r4,#0x7f
000034  7028              STRB     r0,[r5,#0]
;;;207      ep->is_in = (0x80 & ep_addr) != 0;
000036  f0040080          AND      r0,r4,#0x80
00003a  09c0              LSRS     r0,r0,#7
00003c  7068              STRB     r0,[r5,#1]
;;;208      USB_OTG_EPDeactivate(pdev , ep );
00003e  4629              MOV      r1,r5
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       USB_OTG_EPDeactivate
;;;209      return 0;
000046  2000              MOVS     r0,#0
;;;210    }
000048  bd70              POP      {r4-r6,pc}
;;;211    
                          ENDP


                          AREA ||i.DCD_EP_ClrStall||, CODE, READONLY, ALIGN=1

                  DCD_EP_ClrStall PROC
;;;322    */
;;;323    uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
000000  b570              PUSH     {r4-r6,lr}
;;;324    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;325      USB_OTG_EP *ep;
;;;326      if ((0x80 & epnum) == 0x80)
000006  f0040080          AND      r0,r4,#0x80
00000a  2880              CMP      r0,#0x80
00000c  d108              BNE      |L4.32|
;;;327      {
;;;328        ep = &pdev->dev.in_ep[epnum & 0x7F];    
00000e  f004007f          AND      r0,r4,#0x7f
000012  eb000180          ADD      r1,r0,r0,LSL #2
000016  f506708e          ADD      r0,r6,#0x11c
00001a  eb0005c1          ADD      r5,r0,r1,LSL #3
00001e  e005              B        |L4.44|
                  |L4.32|
;;;329      }
;;;330      else
;;;331      {
;;;332        ep = &pdev->dev.out_ep[epnum];
000020  eb040184          ADD      r1,r4,r4,LSL #2
000024  f506705d          ADD      r0,r6,#0x374
000028  eb0005c1          ADD      r5,r0,r1,LSL #3
                  |L4.44|
;;;333      }
;;;334      
;;;335      ep->is_stall = 0;  
00002c  2000              MOVS     r0,#0
00002e  70a8              STRB     r0,[r5,#2]
;;;336      ep->num   = epnum & 0x7F;
000030  f004007f          AND      r0,r4,#0x7f
000034  7028              STRB     r0,[r5,#0]
;;;337      ep->is_in = ((epnum & 0x80) == 0x80);
000036  f3c410c0          UBFX     r0,r4,#7,#1
00003a  7068              STRB     r0,[r5,#1]
;;;338      
;;;339      USB_OTG_EPClearStall(pdev , ep);
00003c  4629              MOV      r1,r5
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       USB_OTG_EPClearStall
;;;340      return (0);
000044  2000              MOVS     r0,#0
;;;341    }
000046  bd70              POP      {r4-r6,pc}
;;;342    
                          ENDP


                          AREA ||i.DCD_EP_Flush||, CODE, READONLY, ALIGN=1

                  DCD_EP_Flush PROC
;;;349    */
;;;350    uint32_t  DCD_EP_Flush (USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
000000  b570              PUSH     {r4-r6,lr}
;;;351    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;352    
;;;353      if ((epnum & 0x80) == 0x80)
000006  f0040080          AND      r0,r4,#0x80
00000a  2880              CMP      r0,#0x80
00000c  d105              BNE      |L5.26|
;;;354      {
;;;355        USB_OTG_FlushTxFifo(pdev, epnum & 0x7F);
00000e  f004017f          AND      r1,r4,#0x7f
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       USB_OTG_FlushTxFifo
000018  e002              B        |L5.32|
                  |L5.26|
;;;356      }
;;;357      else
;;;358      {
;;;359        USB_OTG_FlushRxFifo(pdev);
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       USB_OTG_FlushRxFifo
                  |L5.32|
;;;360      }
;;;361    
;;;362      return (0);
000020  2000              MOVS     r0,#0
;;;363    }
000022  bd70              POP      {r4-r6,pc}
;;;364    
                          ENDP


                          AREA ||i.DCD_EP_Open||, CODE, READONLY, ALIGN=1

                  DCD_EP_Open PROC
;;;154    */
;;;155    uint32_t DCD_EP_Open(USB_OTG_CORE_HANDLE *pdev , 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;156                         uint8_t ep_addr,
;;;157                         uint16_t ep_mps,
;;;158                         uint8_t ep_type)
;;;159    {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
00000a  461f              MOV      r7,r3
;;;160      USB_OTG_EP *ep;
;;;161      
;;;162      if ((ep_addr & 0x80) == 0x80)
00000c  f0050080          AND      r0,r5,#0x80
000010  2880              CMP      r0,#0x80
000012  d108              BNE      |L6.38|
;;;163      {
;;;164        ep = &pdev->dev.in_ep[ep_addr & 0x7F];
000014  f005007f          AND      r0,r5,#0x7f
000018  eb000180          ADD      r1,r0,r0,LSL #2
00001c  f506708e          ADD      r0,r6,#0x11c
000020  eb0004c1          ADD      r4,r0,r1,LSL #3
000024  e007              B        |L6.54|
                  |L6.38|
;;;165      }
;;;166      else
;;;167      {
;;;168        ep = &pdev->dev.out_ep[ep_addr & 0x7F];
000026  f005007f          AND      r0,r5,#0x7f
00002a  eb000180          ADD      r1,r0,r0,LSL #2
00002e  f506705d          ADD      r0,r6,#0x374
000032  eb0004c1          ADD      r4,r0,r1,LSL #3
                  |L6.54|
;;;169      }
;;;170      ep->num   = ep_addr & 0x7F;
000036  f005007f          AND      r0,r5,#0x7f
00003a  7020              STRB     r0,[r4,#0]
;;;171      
;;;172      ep->is_in = (0x80 & ep_addr) != 0;
00003c  f0050080          AND      r0,r5,#0x80
000040  09c0              LSRS     r0,r0,#7
000042  7060              STRB     r0,[r4,#1]
;;;173      ep->maxpacket = ep_mps;
000044  f8c48008          STR      r8,[r4,#8]
;;;174      ep->type = ep_type;
000048  70e7              STRB     r7,[r4,#3]
;;;175      if (ep->is_in)
00004a  7860              LDRB     r0,[r4,#1]
00004c  b108              CBZ      r0,|L6.82|
;;;176      {
;;;177        /* Assign a Tx FIFO */
;;;178        ep->tx_fifo_num = ep->num;
00004e  7820              LDRB     r0,[r4,#0]
000050  80e0              STRH     r0,[r4,#6]
                  |L6.82|
;;;179      }
;;;180      /* Set initial data PID. */
;;;181      if (ep_type == USB_OTG_EP_BULK )
000052  2f02              CMP      r7,#2
000054  d101              BNE      |L6.90|
;;;182      {
;;;183        ep->data_pid_start = 0;
000056  2000              MOVS     r0,#0
000058  7120              STRB     r0,[r4,#4]
                  |L6.90|
;;;184      }
;;;185      USB_OTG_EPActivate(pdev , ep );
00005a  4621              MOV      r1,r4
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       USB_OTG_EPActivate
;;;186      return 0;
000062  2000              MOVS     r0,#0
;;;187    }
000064  e8bd81f0          POP      {r4-r8,pc}
;;;188    /**
                          ENDP


                          AREA ||i.DCD_EP_PrepareRx||, CODE, READONLY, ALIGN=1

                  DCD_EP_PrepareRx PROC
;;;220    */
;;;221    uint32_t   DCD_EP_PrepareRx( USB_OTG_CORE_HANDLE *pdev,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;222                                uint8_t   ep_addr,
;;;223                                uint8_t *pbuf,                        
;;;224                                uint16_t  buf_len)
;;;225    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;226      USB_OTG_EP *ep;
;;;227      
;;;228      ep = &pdev->dev.out_ep[ep_addr & 0x7F];
00000c  f006007f          AND      r0,r6,#0x7f
000010  eb000180          ADD      r1,r0,r0,LSL #2
000014  f505705d          ADD      r0,r5,#0x374
000018  eb0004c1          ADD      r4,r0,r1,LSL #3
;;;229      
;;;230      /*setup and start the Xfer */
;;;231      ep->xfer_buff = pbuf;  
00001c  60e7              STR      r7,[r4,#0xc]
;;;232      ep->xfer_len = buf_len;
00001e  f8c48014          STR      r8,[r4,#0x14]
;;;233      ep->xfer_count = 0;
000022  2000              MOVS     r0,#0
000024  61a0              STR      r0,[r4,#0x18]
;;;234      ep->is_in = 0;
000026  7060              STRB     r0,[r4,#1]
;;;235      ep->num = ep_addr & 0x7F;
000028  f006007f          AND      r0,r6,#0x7f
00002c  7020              STRB     r0,[r4,#0]
;;;236      
;;;237      if (pdev->cfg.dma_enable == 1)
00002e  78e8              LDRB     r0,[r5,#3]
000030  2801              CMP      r0,#1
000032  d100              BNE      |L7.54|
;;;238      {
;;;239        ep->dma_addr = (uint32_t)pbuf;  
000034  6127              STR      r7,[r4,#0x10]
                  |L7.54|
;;;240      }
;;;241      
;;;242      if ( ep->num == 0 )
000036  7820              LDRB     r0,[r4,#0]
000038  b920              CBNZ     r0,|L7.68|
;;;243      {
;;;244        USB_OTG_EP0StartXfer(pdev , ep);
00003a  4621              MOV      r1,r4
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       USB_OTG_EP0StartXfer
000042  e003              B        |L7.76|
                  |L7.68|
;;;245      }
;;;246      else
;;;247      {
;;;248        USB_OTG_EPStartXfer(pdev, ep );
000044  4621              MOV      r1,r4
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       USB_OTG_EPStartXfer
                  |L7.76|
;;;249      }
;;;250      return 0;
00004c  2000              MOVS     r0,#0
;;;251    }
00004e  e8bd81f0          POP      {r4-r8,pc}
;;;252    
                          ENDP


                          AREA ||i.DCD_EP_SetAddress||, CODE, READONLY, ALIGN=1

                  DCD_EP_SetAddress PROC
;;;371    */
;;;372    void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
000000  b508              PUSH     {r3,lr}
;;;373    {
;;;374      USB_OTG_DCFG_TypeDef  dcfg;
;;;375      dcfg.d32 = 0;
000002  2200              MOVS     r2,#0
000004  9200              STR      r2,[sp,#0]
;;;376      dcfg.b.devaddr = address;
000006  9a00              LDR      r2,[sp,#0]
000008  f361120a          BFI      r2,r1,#4,#7
00000c  9200              STR      r2,[sp,#0]
;;;377      USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
00000e  6902              LDR      r2,[r0,#0x10]
000010  6812              LDR      r2,[r2,#0]
000012  9b00              LDR      r3,[sp,#0]
000014  431a              ORRS     r2,r2,r3
000016  6903              LDR      r3,[r0,#0x10]
000018  601a              STR      r2,[r3,#0]
;;;378    }
00001a  bd08              POP      {r3,pc}
;;;379    
                          ENDP


                          AREA ||i.DCD_EP_Stall||, CODE, READONLY, ALIGN=1

                  DCD_EP_Stall PROC
;;;295    */
;;;296    uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
000000  b570              PUSH     {r4-r6,lr}
;;;297    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;298      USB_OTG_EP *ep;
;;;299      if ((0x80 & epnum) == 0x80)
000006  f0040080          AND      r0,r4,#0x80
00000a  2880              CMP      r0,#0x80
00000c  d108              BNE      |L9.32|
;;;300      {
;;;301        ep = &pdev->dev.in_ep[epnum & 0x7F];
00000e  f004007f          AND      r0,r4,#0x7f
000012  eb000180          ADD      r1,r0,r0,LSL #2
000016  f506708e          ADD      r0,r6,#0x11c
00001a  eb0005c1          ADD      r5,r0,r1,LSL #3
00001e  e005              B        |L9.44|
                  |L9.32|
;;;302      }
;;;303      else
;;;304      {
;;;305        ep = &pdev->dev.out_ep[epnum];
000020  eb040184          ADD      r1,r4,r4,LSL #2
000024  f506705d          ADD      r0,r6,#0x374
000028  eb0005c1          ADD      r5,r0,r1,LSL #3
                  |L9.44|
;;;306      }
;;;307    
;;;308      ep->is_stall = 1;
00002c  2001              MOVS     r0,#1
00002e  70a8              STRB     r0,[r5,#2]
;;;309      ep->num   = epnum & 0x7F;
000030  f004007f          AND      r0,r4,#0x7f
000034  7028              STRB     r0,[r5,#0]
;;;310      ep->is_in = ((epnum & 0x80) == 0x80);
000036  f3c410c0          UBFX     r0,r4,#7,#1
00003a  7068              STRB     r0,[r5,#1]
;;;311      
;;;312      USB_OTG_EPSetStall(pdev , ep);
00003c  4629              MOV      r1,r5
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       USB_OTG_EPSetStall
;;;313      return (0);
000044  2000              MOVS     r0,#0
;;;314    }
000046  bd70              POP      {r4-r6,pc}
;;;315    
                          ENDP


                          AREA ||i.DCD_EP_Tx||, CODE, READONLY, ALIGN=1

                  DCD_EP_Tx PROC
;;;260    */
;;;261    uint32_t  DCD_EP_Tx ( USB_OTG_CORE_HANDLE *pdev,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;262                         uint8_t   ep_addr,
;;;263                         uint8_t   *pbuf,
;;;264                         uint32_t   buf_len)
;;;265    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  4698              MOV      r8,r3
;;;266      USB_OTG_EP *ep;
;;;267      
;;;268      ep = &pdev->dev.in_ep[ep_addr & 0x7F];
00000c  f005007f          AND      r0,r5,#0x7f
000010  eb000180          ADD      r1,r0,r0,LSL #2
000014  f507708e          ADD      r0,r7,#0x11c
000018  eb0004c1          ADD      r4,r0,r1,LSL #3
;;;269      
;;;270      /* Setup and start the Transfer */
;;;271      ep->is_in = 1;
00001c  2001              MOVS     r0,#1
00001e  7060              STRB     r0,[r4,#1]
;;;272      ep->num = ep_addr & 0x7F;  
000020  f005007f          AND      r0,r5,#0x7f
000024  7020              STRB     r0,[r4,#0]
;;;273      ep->xfer_buff = pbuf;
000026  60e6              STR      r6,[r4,#0xc]
;;;274      ep->dma_addr = (uint32_t)pbuf;  
000028  6126              STR      r6,[r4,#0x10]
;;;275      ep->xfer_count = 0;
00002a  2000              MOVS     r0,#0
00002c  61a0              STR      r0,[r4,#0x18]
;;;276      ep->xfer_len  = buf_len;
00002e  f8c48014          STR      r8,[r4,#0x14]
;;;277      
;;;278      if ( ep->num == 0 )
000032  7820              LDRB     r0,[r4,#0]
000034  b920              CBNZ     r0,|L10.64|
;;;279      {
;;;280        USB_OTG_EP0StartXfer(pdev , ep);
000036  4621              MOV      r1,r4
000038  4638              MOV      r0,r7
00003a  f7fffffe          BL       USB_OTG_EP0StartXfer
00003e  e003              B        |L10.72|
                  |L10.64|
;;;281      }
;;;282      else
;;;283      {
;;;284        USB_OTG_EPStartXfer(pdev, ep );
000040  4621              MOV      r1,r4
000042  4638              MOV      r0,r7
000044  f7fffffe          BL       USB_OTG_EPStartXfer
                  |L10.72|
;;;285      }
;;;286      return 0;
000048  2000              MOVS     r0,#0
;;;287    }
00004a  e8bd81f0          POP      {r4-r8,pc}
;;;288    
                          ENDP


                          AREA ||i.DCD_GetEPStatus||, CODE, READONLY, ALIGN=1

                  DCD_GetEPStatus PROC
;;;422    
;;;423    uint32_t DCD_GetEPStatus(USB_OTG_CORE_HANDLE *pdev ,uint8_t epnum)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;424    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;425      USB_OTG_EP *ep;
;;;426      uint32_t Status = 0;  
000008  2700              MOVS     r7,#0
;;;427      
;;;428      if ((0x80 & epnum) == 0x80)
00000a  f0040080          AND      r0,r4,#0x80
00000e  2880              CMP      r0,#0x80
000010  d108              BNE      |L11.36|
;;;429      {
;;;430        ep = &pdev->dev.in_ep[epnum & 0x7F];    
000012  f004007f          AND      r0,r4,#0x7f
000016  eb000180          ADD      r1,r0,r0,LSL #2
00001a  f505708e          ADD      r0,r5,#0x11c
00001e  eb0006c1          ADD      r6,r0,r1,LSL #3
000022  e005              B        |L11.48|
                  |L11.36|
;;;431      }
;;;432      else
;;;433      {
;;;434        ep = &pdev->dev.out_ep[epnum];
000024  eb040184          ADD      r1,r4,r4,LSL #2
000028  f505705d          ADD      r0,r5,#0x374
00002c  eb0006c1          ADD      r6,r0,r1,LSL #3
                  |L11.48|
;;;435      }
;;;436      
;;;437      Status = USB_OTG_GetEPStatus(pdev ,ep);
000030  4631              MOV      r1,r6
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       USB_OTG_GetEPStatus
000038  4607              MOV      r7,r0
;;;438    
;;;439      /* Return the current status */
;;;440      return Status;
00003a  4638              MOV      r0,r7
;;;441    }
00003c  e8bd81f0          POP      {r4-r8,pc}
;;;442    
                          ENDP


                          AREA ||i.DCD_Init||, CODE, READONLY, ALIGN=1

                  DCD_Init PROC
;;;90     
;;;91     void DCD_Init(USB_OTG_CORE_HANDLE *pdev , 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;92                   USB_OTG_CORE_ID_TypeDef coreID)
;;;93     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;94       uint32_t i;
;;;95       USB_OTG_EP *ep;
;;;96       
;;;97       USB_OTG_SelectCore (pdev , coreID);
000008  4639              MOV      r1,r7
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       USB_OTG_SelectCore
;;;98       
;;;99       pdev->dev.device_status = USB_OTG_DEFAULT;
000010  2101              MOVS     r1,#1
000012  f44f7089          MOV      r0,#0x112
000016  5581              STRB     r1,[r0,r6]
;;;100      pdev->dev.device_address = 0;
000018  2100              MOVS     r1,#0
00001a  1c80              ADDS     r0,r0,#2
00001c  5581              STRB     r1,[r0,r6]
;;;101      
;;;102      /* Init ep structure */
;;;103      for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
00001e  2500              MOVS     r5,#0
000020  e011              B        |L12.70|
                  |L12.34|
;;;104      {
;;;105        ep = &pdev->dev.in_ep[i];
000022  eb050185          ADD      r1,r5,r5,LSL #2
000026  f506708e          ADD      r0,r6,#0x11c
00002a  eb0004c1          ADD      r4,r0,r1,LSL #3
;;;106        /* Init ep structure */
;;;107        ep->is_in = 1;
00002e  2001              MOVS     r0,#1
000030  7060              STRB     r0,[r4,#1]
;;;108        ep->num = i;
000032  7025              STRB     r5,[r4,#0]
;;;109        ep->tx_fifo_num = i;
000034  80e5              STRH     r5,[r4,#6]
;;;110        /* Control until ep is actvated */
;;;111        ep->type = EP_TYPE_CTRL;
000036  2000              MOVS     r0,#0
000038  70e0              STRB     r0,[r4,#3]
;;;112        ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
00003a  2040              MOVS     r0,#0x40
00003c  60a0              STR      r0,[r4,#8]
;;;113        ep->xfer_buff = 0;
00003e  2000              MOVS     r0,#0
000040  60e0              STR      r0,[r4,#0xc]
;;;114        ep->xfer_len = 0;
000042  6160              STR      r0,[r4,#0x14]
000044  1c6d              ADDS     r5,r5,#1              ;103
                  |L12.70|
000046  7870              LDRB     r0,[r6,#1]            ;103
000048  42a8              CMP      r0,r5                 ;103
00004a  d8ea              BHI      |L12.34|
;;;115      }
;;;116      
;;;117      for (i = 0; i < pdev->cfg.dev_endpoints; i++)
00004c  2500              MOVS     r5,#0
00004e  e010              B        |L12.114|
                  |L12.80|
;;;118      {
;;;119        ep = &pdev->dev.out_ep[i];
000050  eb050185          ADD      r1,r5,r5,LSL #2
000054  f506705d          ADD      r0,r6,#0x374
000058  eb0004c1          ADD      r4,r0,r1,LSL #3
;;;120        /* Init ep structure */
;;;121        ep->is_in = 0;
00005c  2000              MOVS     r0,#0
00005e  7060              STRB     r0,[r4,#1]
;;;122        ep->num = i;
000060  7025              STRB     r5,[r4,#0]
;;;123        ep->tx_fifo_num = i;
000062  80e5              STRH     r5,[r4,#6]
;;;124        /* Control until ep is activated */
;;;125        ep->type = EP_TYPE_CTRL;
000064  70e0              STRB     r0,[r4,#3]
;;;126        ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
000066  2040              MOVS     r0,#0x40
000068  60a0              STR      r0,[r4,#8]
;;;127        ep->xfer_buff = 0;
00006a  2000              MOVS     r0,#0
00006c  60e0              STR      r0,[r4,#0xc]
;;;128        ep->xfer_len = 0;
00006e  6160              STR      r0,[r4,#0x14]
000070  1c6d              ADDS     r5,r5,#1              ;117
                  |L12.114|
000072  7870              LDRB     r0,[r6,#1]            ;117
000074  42a8              CMP      r0,r5                 ;117
000076  d8eb              BHI      |L12.80|
;;;129      }
;;;130      
;;;131      USB_OTG_DisableGlobalInt(pdev);
000078  4630              MOV      r0,r6
00007a  f7fffffe          BL       USB_OTG_DisableGlobalInt
;;;132      
;;;133      /*Init the Core (common init.) */
;;;134      USB_OTG_CoreInit(pdev);
00007e  4630              MOV      r0,r6
000080  f7fffffe          BL       USB_OTG_CoreInit
;;;135    
;;;136    
;;;137      /* Force Device Mode*/
;;;138      USB_OTG_SetCurrentMode(pdev, DEVICE_MODE);
000084  2100              MOVS     r1,#0
000086  4630              MOV      r0,r6
000088  f7fffffe          BL       USB_OTG_SetCurrentMode
;;;139      
;;;140      /* Init Device */
;;;141      USB_OTG_CoreInitDev(pdev);
00008c  4630              MOV      r0,r6
00008e  f7fffffe          BL       USB_OTG_CoreInitDev
;;;142      
;;;143      
;;;144      /* Enable USB Global interrupt */
;;;145      USB_OTG_EnableGlobalInt(pdev);
000092  4630              MOV      r0,r6
000094  f7fffffe          BL       USB_OTG_EnableGlobalInt
;;;146    }
000098  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.DCD_SetEPStatus||, CODE, READONLY, ALIGN=1

                  DCD_SetEPStatus PROC
;;;449    */
;;;450    void DCD_SetEPStatus (USB_OTG_CORE_HANDLE *pdev , uint8_t epnum , uint32_t Status)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;451    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
;;;452      USB_OTG_EP *ep;
;;;453      
;;;454      if ((0x80 & epnum) == 0x80)
00000a  f0040080          AND      r0,r4,#0x80
00000e  2880              CMP      r0,#0x80
000010  d108              BNE      |L13.36|
;;;455      {
;;;456        ep = &pdev->dev.in_ep[epnum & 0x7F];    
000012  f004007f          AND      r0,r4,#0x7f
000016  eb000180          ADD      r1,r0,r0,LSL #2
00001a  f505708e          ADD      r0,r5,#0x11c
00001e  eb0006c1          ADD      r6,r0,r1,LSL #3
000022  e005              B        |L13.48|
                  |L13.36|
;;;457      }
;;;458      else
;;;459      {
;;;460        ep = &pdev->dev.out_ep[epnum];
000024  eb040184          ADD      r1,r4,r4,LSL #2
000028  f505705d          ADD      r0,r5,#0x374
00002c  eb0006c1          ADD      r6,r0,r1,LSL #3
                  |L13.48|
;;;461      }
;;;462      
;;;463       USB_OTG_SetEPStatus(pdev ,ep , Status);
000030  463a              MOV      r2,r7
000032  4631              MOV      r1,r6
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       USB_OTG_SetEPStatus
;;;464    }
00003a  e8bd81f0          POP      {r4-r8,pc}
;;;465    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\Libraries\\STM32_USB_OTG_Driver\\src\\usb_dcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_usb_dcd_c_DCD_Init____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_usb_dcd_c_DCD_Init____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_usb_dcd_c_DCD_Init____REVSH|
#line 144
|__asm___9_usb_dcd_c_DCD_Init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
