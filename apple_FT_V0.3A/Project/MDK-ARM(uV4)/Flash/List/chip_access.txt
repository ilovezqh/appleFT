; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\chip_access.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\chip_access.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\chip_access.crf ..\..\User\chip_ft\chip_access.c]
                          THUMB

                          AREA ||i.otp_read||, CODE, READONLY, ALIGN=1

                  otp_read PROC
;;;324     
;;;325    fsm_rt_t otp_read(otp_t* efuse_data)
000000  b570              PUSH     {r4-r6,lr}
;;;326    {
000002  4604              MOV      r4,r0
;;;327        fsm_rt_t ret=fsm_rt_cpl;
000004  2500              MOVS     r5,#0
;;;328        
;;;329        set_apple_enable_otp();
000006  f7fffffe          BL       set_apple_enable_otp
;;;330        (*efuse_data).all = set_apple_read_otp(); 
00000a  f7fffffe          BL       set_apple_read_otp
00000e  6020              STR      r0,[r4,#0]
;;;331        
;;;332        return ret;
000010  4628              MOV      r0,r5
;;;333    }
000012  bd70              POP      {r4-r6,pc}
;;;334    
                          ENDP


                          AREA ||i.otp_write||, CODE, READONLY, ALIGN=2

                  otp_write PROC
;;;301    
;;;302    fsm_rt_t otp_write(otp_t* efuse_data)
000000  b570              PUSH     {r4-r6,lr}
;;;303    {
000002  4605              MOV      r5,r0
;;;304        fsm_rt_t ret=fsm_rt_cpl;
000004  2600              MOVS     r6,#0
;;;305        uint8_t sector;
;;;306        set_apple_enable_otp();
000006  f7fffffe          BL       set_apple_enable_otp
;;;307    	for(sector=0;sector<4;sector++)
00000a  2400              MOVS     r4,#0
00000c  e026              B        |L2.92|
                  |L2.14|
;;;308    	{
;;;309    		//OTP_KEY unlock
;;;310    		write_data[0] = 0x5A;
00000e  205a              MOVS     r0,#0x5a
000010  4914              LDR      r1,|L2.100|
000012  7008              STRB     r0,[r1,#0]
;;;311    		i2c_write_register(I2C_DEV16_ADDR, write_data, OTP_PSW_REG, 1); 
000014  2301              MOVS     r3,#1
000016  f44f4244          MOV      r2,#0xc400
00001a  2060              MOVS     r0,#0x60
00001c  f7fffffe          BL       apple_write_addr16
;;;312    		//OTP_DATA
;;;313    		write_data[0] = (uint8_t)((*efuse_data).all>>(sector*8));		
000020  00e1              LSLS     r1,r4,#3
000022  6828              LDR      r0,[r5,#0]
000024  40c8              LSRS     r0,r0,r1
000026  490f              LDR      r1,|L2.100|
000028  7008              STRB     r0,[r1,#0]
;;;314    		i2c_write_register(I2C_DEV16_ADDR, write_data, OTP_BIT_REG, 1);
00002a  2301              MOVS     r3,#1
00002c  f24c4201          MOV      r2,#0xc401
000030  2060              MOVS     r0,#0x60
000032  f7fffffe          BL       apple_write_addr16
;;;315    		//OTP_CMD=0X40|SECTOR|PROGRAM|RUN
;;;316    		write_data[0] = 0x40|(sector<<4)|(2<<1)|(1<<0);
000036  2040              MOVS     r0,#0x40
000038  ea401004          ORR      r0,r0,r4,LSL #4
00003c  1d40              ADDS     r0,r0,#5
00003e  4909              LDR      r1,|L2.100|
000040  7008              STRB     r0,[r1,#0]
;;;317    		i2c_write_register(I2C_DEV16_ADDR, write_data, OTP_CMD_REG, 1);
000042  2301              MOVS     r3,#1
000044  f24c4202          MOV      r2,#0xc402
000048  2060              MOVS     r0,#0x60
00004a  f7fffffe          BL       apple_write_addr16
;;;318    		//判断操作是否结束，延时或查询RUN状态
;;;319    //		Delayms(1);//试验1msOK
;;;320    		while(set_apple_check_otp_cmd()==1){;}
00004e  bf00              NOP      
                  |L2.80|
000050  f7fffffe          BL       set_apple_check_otp_cmd
000054  2801              CMP      r0,#1
000056  d0fb              BEQ      |L2.80|
000058  1c60              ADDS     r0,r4,#1              ;307
00005a  b2c4              UXTB     r4,r0                 ;307
                  |L2.92|
00005c  2c04              CMP      r4,#4                 ;307
00005e  dbd6              BLT      |L2.14|
;;;321    	}
;;;322        return ret;
000060  4630              MOV      r0,r6
;;;323    }
000062  bd70              POP      {r4-r6,pc}
;;;324     
                          ENDP

                  |L2.100|
                          DCD      write_data

                          AREA ||i.power_off_apple||, CODE, READONLY, ALIGN=2

                  power_off_apple PROC
;;;211    
;;;212    void power_off_apple(void)
000000  b510              PUSH     {r4,lr}
;;;213    {
;;;214        test_power.off();
000002  4902              LDR      r1,|L3.12|
000004  6888              LDR      r0,[r1,#8]  ; test_power
000006  4780              BLX      r0
;;;215    }
000008  bd10              POP      {r4,pc}
;;;216    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      test_power

                          AREA ||i.power_on_apple||, CODE, READONLY, ALIGN=2

                  power_on_apple PROC
;;;216    
;;;217    void power_on_apple(void)
000000  b510              PUSH     {r4,lr}
;;;218    {
;;;219        test_power.on();
000002  4902              LDR      r1,|L4.12|
000004  6848              LDR      r0,[r1,#4]  ; test_power
000006  4780              BLX      r0
;;;220    }
000008  bd10              POP      {r4,pc}
;;;221    
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      test_power

                          AREA ||i.read_apple_trim_value||, CODE, READONLY, ALIGN=1

                  read_apple_trim_value PROC
;;;155    
;;;156    uint8_t  read_apple_trim_value(uint8_t item)
000000  b538              PUSH     {r3-r5,lr}
;;;157    {
000002  4604              MOV      r4,r0
;;;158    	uint8_t temp=0xff;
000004  20ff              MOVS     r0,#0xff
000006  9000              STR      r0,[sp,#0]
;;;159    	switch(item)
000008  2c07              CMP      r4,#7
00000a  d251              BCS      |L5.176|
00000c  e8dff004          TBB      [pc,r4]
000010  5004101d          DCB      0x50,0x04,0x10,0x1d
000014  2a374400          DCB      0x2a,0x37,0x44,0x00
;;;160    	{
;;;161        case ITEM_IREF://REF_CTL_REG REF_CTL[7:4] actually[7:5] for OTP;
;;;162            i2c_read_register(I2C_DEV16_ADDR,&temp,REF_CTL_REG,1);
000018  2301              MOVS     r3,#1
00001a  f24c1208          MOV      r2,#0xc108
00001e  4669              MOV      r1,sp
000020  2060              MOVS     r0,#0x60
000022  f7fffffe          BL       apple_read_addr16
;;;163            temp = temp>>5;
000026  f89d0000          LDRB     r0,[sp,#0]
00002a  1140              ASRS     r0,r0,#5
00002c  9000              STR      r0,[sp,#0]
;;;164            break;
00002e  e040              B        |L5.178|
;;;165        
;;;166        case ITEM_VREF://REF_CTL_REG REF_CTL[3:0];
;;;167            i2c_read_register(I2C_DEV16_ADDR,&temp,REF_CTL_REG,1);	
000030  2301              MOVS     r3,#1
000032  f24c1208          MOV      r2,#0xc108
000036  4669              MOV      r1,sp
000038  2060              MOVS     r0,#0x60
00003a  f7fffffe          BL       apple_read_addr16
;;;168            temp = temp&0x0f;
00003e  f89d0000          LDRB     r0,[sp,#0]
000042  f000000f          AND      r0,r0,#0xf
000046  9000              STR      r0,[sp,#0]
;;;169            break;
000048  e033              B        |L5.178|
;;;170        
;;;171        case ITEM_VBG://BGR_CTL_REG BGR_CTL[5:4];
;;;172            i2c_read_register(I2C_DEV16_ADDR,&temp,BGR_CTL_REG,1);	
00004a  2301              MOVS     r3,#1
00004c  f24c1206          MOV      r2,#0xc106
000050  4669              MOV      r1,sp
000052  2060              MOVS     r0,#0x60
000054  f7fffffe          BL       apple_read_addr16
;;;173            temp = (temp&0x30)>>4;
000058  f89d0000          LDRB     r0,[sp,#0]
00005c  f3c01001          UBFX     r0,r0,#4,#2
000060  9000              STR      r0,[sp,#0]
;;;174            break;
000062  e026              B        |L5.178|
;;;175        
;;;176        case ITEM_LPVDD://BGR_CTL_REG BGR_CTL[3:0] actually[3:1] for OTP;
;;;177            i2c_read_register(I2C_DEV16_ADDR,&temp,BGR_CTL_REG,1);		
000064  2301              MOVS     r3,#1
000066  f24c1206          MOV      r2,#0xc106
00006a  4669              MOV      r1,sp
00006c  2060              MOVS     r0,#0x60
00006e  f7fffffe          BL       apple_read_addr16
;;;178            temp = (temp&0x0f) >> 1;
000072  f89d0000          LDRB     r0,[sp,#0]
000076  f3c00042          UBFX     r0,r0,#1,#3
00007a  9000              STR      r0,[sp,#0]
;;;179            break;
00007c  e019              B        |L5.178|
;;;180        case ITEM_RCL://RCL_CTL_REG RCL_CTL[6:0] actually[6:1] for OTP;
;;;181            
;;;182            i2c_read_register(I2C_DEV16_ADDR,&temp,RCL_CTL_REG,1);		
00007e  2301              MOVS     r3,#1
000080  f24c1209          MOV      r2,#0xc109
000084  4669              MOV      r1,sp
000086  2060              MOVS     r0,#0x60
000088  f7fffffe          BL       apple_read_addr16
;;;183            temp = (temp&0x7f) >> 1;
00008c  f89d0000          LDRB     r0,[sp,#0]
000090  f3c00045          UBFX     r0,r0,#1,#6
000094  9000              STR      r0,[sp,#0]
;;;184            break;
000096  e00c              B        |L5.178|
;;;185        
;;;186        case ITEM_RCH://OSC_CTL_REG RCH_CTL[7:0] actually[7:1] for OTP;
;;;187            i2c_read_register(I2C_DEV16_ADDR,&temp,OSC_CTL_REG,1);	
000098  2301              MOVS     r3,#1
00009a  f24c120a          MOV      r2,#0xc10a
00009e  4669              MOV      r1,sp
0000a0  2060              MOVS     r0,#0x60
0000a2  f7fffffe          BL       apple_read_addr16
;;;188            temp = temp>>1;
0000a6  f89d0000          LDRB     r0,[sp,#0]
0000aa  1040              ASRS     r0,r0,#1
0000ac  9000              STR      r0,[sp,#0]
;;;189            break;
0000ae  e000              B        |L5.178|
                  |L5.176|
;;;190        default:
;;;191            break;
0000b0  bf00              NOP      
                  |L5.178|
0000b2  bf00              NOP                            ;164
;;;192    	}
;;;193        return temp;
0000b4  f89d0000          LDRB     r0,[sp,#0]
;;;194    }
0000b8  bd38              POP      {r3-r5,pc}
;;;195    
                          ENDP


                          AREA ||i.set_apple_asu_enable||, CODE, READONLY, ALIGN=1

                  set_apple_asu_enable PROC
;;;195    
;;;196    void set_apple_asu_enable(void)
000000  b508              PUSH     {r3,lr}
;;;197    {
;;;198    	uint8_t temp;
;;;199    	i2c_read_register(I2C_DEV16_ADDR,&temp,0xC10D,1);
000002  2301              MOVS     r3,#1
000004  f24c120d          MOV      r2,#0xc10d
000008  4669              MOV      r1,sp
00000a  2060              MOVS     r0,#0x60
00000c  f7fffffe          BL       apple_read_addr16
;;;200    	temp |= (1<<0);//ASU_CTL[1]=1	
000010  f89d0000          LDRB     r0,[sp,#0]
000014  f0400001          ORR      r0,r0,#1
000018  9000              STR      r0,[sp,#0]
;;;201    	i2c_write_register(I2C_DEV16_ADDR,&temp,0xC10D,1);
00001a  2301              MOVS     r3,#1
00001c  f24c120d          MOV      r2,#0xc10d
000020  4669              MOV      r1,sp
000022  2060              MOVS     r0,#0x60
000024  f7fffffe          BL       apple_write_addr16
;;;202    }
000028  bd08              POP      {r3,pc}
;;;203    
                          ENDP


                          AREA ||i.set_apple_check_otp_cmd||, CODE, READONLY, ALIGN=1

                  set_apple_check_otp_cmd PROC
;;;358    *******************************************************************************/
;;;359    static uint8_t set_apple_check_otp_cmd(void)
000000  b508              PUSH     {r3,lr}
;;;360    {
;;;361    	uint8_t temp;
;;;362    	//读OTP_CMD寄存器，操作结束RUN清0
;;;363    	i2c_read_register(I2C_DEV16_ADDR,&temp,OTP_CMD_REG,1);
000002  2301              MOVS     r3,#1
000004  f24c4202          MOV      r2,#0xc402
000008  4669              MOV      r1,sp
00000a  2060              MOVS     r0,#0x60
00000c  f7fffffe          BL       apple_read_addr16
;;;364    	if((temp&0x01) == 0x01)
000010  f89d0000          LDRB     r0,[sp,#0]
000014  f0000001          AND      r0,r0,#1
000018  b108              CBZ      r0,|L7.30|
;;;365    		return 1;
00001a  2001              MOVS     r0,#1
                  |L7.28|
;;;366    	else
;;;367    		return 0;
;;;368    }
00001c  bd08              POP      {r3,pc}
                  |L7.30|
00001e  2000              MOVS     r0,#0                 ;367
000020  e7fc              B        |L7.28|
;;;369    
                          ENDP


                          AREA ||i.set_apple_debug_out||, CODE, READONLY, ALIGN=1

                  set_apple_debug_out PROC
;;;230    
;;;231    void set_apple_debug_out(uint8_t item)
000000  b538              PUSH     {r3-r5,lr}
;;;232    {
000002  4604              MOV      r4,r0
;;;233    	uint8_t temp;
;;;234    	switch(item)
000004  2c06              CMP      r4,#6
000006  d041              BEQ      |L8.140|
000008  dc08              BGT      |L8.28|
00000a  2c01              CMP      r4,#1
00000c  d00d              BEQ      |L8.42|
00000e  2c02              CMP      r4,#2
000010  d015              BEQ      |L8.62|
000012  2c04              CMP      r4,#4
000014  d01d              BEQ      |L8.82|
000016  2c05              CMP      r4,#5
000018  d17a              BNE      |L8.272|
00001a  e024              B        |L8.102|
                  |L8.28|
00001c  2c0b              CMP      r4,#0xb
00001e  d05b              BEQ      |L8.216|
000020  2c0c              CMP      r4,#0xc
000022  d063              BEQ      |L8.236|
000024  2c3d              CMP      r4,#0x3d
000026  d173              BNE      |L8.272|
000028  e043              B        |L8.178|
                  |L8.42|
;;;235    	{
;;;236    		case ITEM_IREF://0xC125 DBG_ANA[3]=1
;;;237    			temp = (1<<3);
00002a  2008              MOVS     r0,#8
00002c  9000              STR      r0,[sp,#0]
;;;238    			i2c_write_register(I2C_DEV16_ADDR,&temp,DBG_ANA_REG,1);
00002e  2301              MOVS     r3,#1
000030  f24c1225          MOV      r2,#0xc125
000034  4669              MOV      r1,sp
000036  2060              MOVS     r0,#0x60
000038  f7fffffe          BL       apple_write_addr16
;;;239    			break;
00003c  e069              B        |L8.274|
                  |L8.62|
;;;240    		case ITEM_VREF://0xC125 DBG_ANA[2]=1
;;;241    			temp = (1<<2);
00003e  2004              MOVS     r0,#4
000040  9000              STR      r0,[sp,#0]
;;;242    			i2c_write_register(I2C_DEV16_ADDR,&temp,DBG_ANA_REG,1);			
000042  2301              MOVS     r3,#1
000044  f24c1225          MOV      r2,#0xc125
000048  4669              MOV      r1,sp
00004a  2060              MOVS     r0,#0x60
00004c  f7fffffe          BL       apple_write_addr16
;;;243    			break;
000050  e05f              B        |L8.274|
                  |L8.82|
;;;244    		case ITEM_LPVDD://0xC125 DBG_ANA[0]=1
;;;245    			temp = (1<<0);
000052  2001              MOVS     r0,#1
000054  9000              STR      r0,[sp,#0]
;;;246    			i2c_write_register(I2C_DEV16_ADDR,&temp,DBG_ANA_REG,1);				
000056  2301              MOVS     r3,#1
000058  f24c1225          MOV      r2,#0xc125
00005c  4669              MOV      r1,sp
00005e  2060              MOVS     r0,#0x60
000060  f7fffffe          BL       apple_write_addr16
;;;247    			break;
000064  e055              B        |L8.274|
                  |L8.102|
;;;248    		case ITEM_RCL://0xC120 DBG_CTL[4:0]=5,[7:5]=1; 0xC124 DBG_OE[3]=1;
;;;249    			temp = (1<<5)|(5<<0);
000066  2025              MOVS     r0,#0x25
000068  9000              STR      r0,[sp,#0]
;;;250    			i2c_write_register(I2C_DEV16_ADDR,&temp,DBG_CTL_REG,1);	
00006a  2301              MOVS     r3,#1
00006c  f24c1220          MOV      r2,#0xc120
000070  4669              MOV      r1,sp
000072  2060              MOVS     r0,#0x60
000074  f7fffffe          BL       apple_write_addr16
;;;251    			temp = (1<<4);
000078  2010              MOVS     r0,#0x10
00007a  9000              STR      r0,[sp,#0]
;;;252    			i2c_write_register(I2C_DEV16_ADDR,&temp,DBG_OE_REG,1);			
00007c  2301              MOVS     r3,#1
00007e  f24c1224          MOV      r2,#0xc124
000082  4669              MOV      r1,sp
000084  2060              MOVS     r0,#0x60
000086  f7fffffe          BL       apple_write_addr16
;;;253    			break;
00008a  e042              B        |L8.274|
                  |L8.140|
;;;254    		case ITEM_RCH://0xC120 DBG_CTL[4:0]=5,[7:5]=2; 0xC124 DBG_OE[3]=1;
;;;255    			temp = (2<<5)|(5<<0);
00008c  2045              MOVS     r0,#0x45
00008e  9000              STR      r0,[sp,#0]
;;;256    			i2c_write_register(I2C_DEV16_ADDR,&temp,DBG_CTL_REG,1);	
000090  2301              MOVS     r3,#1
000092  f24c1220          MOV      r2,#0xc120
000096  4669              MOV      r1,sp
000098  2060              MOVS     r0,#0x60
00009a  f7fffffe          BL       apple_write_addr16
;;;257    			temp = (1<<4);
00009e  2010              MOVS     r0,#0x10
0000a0  9000              STR      r0,[sp,#0]
;;;258    			i2c_write_register(I2C_DEV16_ADDR,&temp,DBG_OE_REG,1);			
0000a2  2301              MOVS     r3,#1
0000a4  f24c1224          MOV      r2,#0xc124
0000a8  4669              MOV      r1,sp
0000aa  2060              MOVS     r0,#0x60
0000ac  f7fffffe          BL       apple_write_addr16
;;;259    			break;
0000b0  e02f              B        |L8.274|
                  |L8.178|
;;;260    		case ITEM_DBGCLK://0xC120 DBG_CTL[4:0]=6,[7:5]=1; //0xC124 DBG_OE[7]=1,[3]=1;
;;;261    			temp = (1<<5)|(6<<0);
0000b2  2026              MOVS     r0,#0x26
0000b4  9000              STR      r0,[sp,#0]
;;;262    			i2c_write_register(I2C_DEV16_ADDR,&temp,DBG_CTL_REG,1);	
0000b6  2301              MOVS     r3,#1
0000b8  f24c1220          MOV      r2,#0xc120
0000bc  4669              MOV      r1,sp
0000be  2060              MOVS     r0,#0x60
0000c0  f7fffffe          BL       apple_write_addr16
;;;263    			temp = (1<<7)|(1<<4);
0000c4  2090              MOVS     r0,#0x90
0000c6  9000              STR      r0,[sp,#0]
;;;264    			i2c_write_register(I2C_DEV16_ADDR,&temp,DBG_OE_REG,1);				
0000c8  2301              MOVS     r3,#1
0000ca  f24c1224          MOV      r2,#0xc124
0000ce  4669              MOV      r1,sp
0000d0  2060              MOVS     r0,#0x60
0000d2  f7fffffe          BL       apple_write_addr16
;;;265    			break;
0000d6  e01c              B        |L8.274|
                  |L8.216|
;;;266            case ITEM_PMU_DBG_OFF:
;;;267                temp = 0;
0000d8  2000              MOVS     r0,#0
0000da  9000              STR      r0,[sp,#0]
;;;268                i2c_write_register(I2C_DEV16_ADDR,&temp,DBG_ANA_REG,1);		
0000dc  2301              MOVS     r3,#1
0000de  f24c1225          MOV      r2,#0xc125
0000e2  4669              MOV      r1,sp
0000e4  2060              MOVS     r0,#0x60
0000e6  f7fffffe          BL       apple_write_addr16
;;;269                break;
0000ea  e012              B        |L8.274|
                  |L8.236|
;;;270            case ITEM_CMU_DBG_OFF:
;;;271                temp = 0;
0000ec  2000              MOVS     r0,#0
0000ee  9000              STR      r0,[sp,#0]
;;;272                i2c_write_register(I2C_DEV16_ADDR,&temp,DBG_CTL_REG,1);
0000f0  2301              MOVS     r3,#1
0000f2  f24c1220          MOV      r2,#0xc120
0000f6  4669              MOV      r1,sp
0000f8  2060              MOVS     r0,#0x60
0000fa  f7fffffe          BL       apple_write_addr16
;;;273                i2c_write_register(I2C_DEV16_ADDR,&temp,DBG_OE_REG,1);		
0000fe  2301              MOVS     r3,#1
000100  f24c1224          MOV      r2,#0xc124
000104  4669              MOV      r1,sp
000106  2060              MOVS     r0,#0x60
000108  f7fffffe          BL       apple_write_addr16
;;;274                break;
00010c  e001              B        |L8.274|
00010e  e7ff              B        |L8.272|
                  |L8.272|
;;;275    		default:
;;;276    			break;
000110  bf00              NOP      
                  |L8.274|
000112  bf00              NOP                            ;239
;;;277    	}
;;;278    }
000114  bd38              POP      {r3-r5,pc}
;;;279    
                          ENDP


                          AREA ||i.set_apple_disable_otp||, CODE, READONLY, ALIGN=1

                  set_apple_disable_otp PROC
;;;346    
;;;347    void set_apple_disable_otp(void)
000000  b508              PUSH     {r3,lr}
;;;348    {
;;;349    	uint8_t temp;
;;;350    	i2c_read_register(I2C_DEV16_ADDR,&temp,CMU_CTL_REG,1);	  //CMU_CTL.OTP_EN
000002  2301              MOVS     r3,#1
000004  f24c1201          MOV      r2,#0xc101
000008  4669              MOV      r1,sp
00000a  2060              MOVS     r0,#0x60
00000c  f7fffffe          BL       apple_read_addr16
;;;351    	temp &= ~(1<<5);
000010  f89d0000          LDRB     r0,[sp,#0]
000014  f0200020          BIC      r0,r0,#0x20
000018  9000              STR      r0,[sp,#0]
;;;352    	i2c_write_register(I2C_DEV16_ADDR,&temp,CMU_CTL_REG,1);
00001a  2301              MOVS     r3,#1
00001c  f24c1201          MOV      r2,#0xc101
000020  4669              MOV      r1,sp
000022  2060              MOVS     r0,#0x60
000024  f7fffffe          BL       apple_write_addr16
;;;353    }
000028  bd08              POP      {r3,pc}
;;;354    
                          ENDP


                          AREA ||i.set_apple_enable_otp||, CODE, READONLY, ALIGN=1

                  set_apple_enable_otp PROC
;;;338    *******************************************************************************/
;;;339    static void set_apple_enable_otp(void)
000000  b508              PUSH     {r3,lr}
;;;340    {
;;;341    	uint8_t temp;
;;;342    	i2c_read_register(I2C_DEV16_ADDR,&temp,CMU_CTL_REG,1);
000002  2301              MOVS     r3,#1
000004  f24c1201          MOV      r2,#0xc101
000008  4669              MOV      r1,sp
00000a  2060              MOVS     r0,#0x60
00000c  f7fffffe          BL       apple_read_addr16
;;;343    	temp |= (1<<5);
000010  f89d0000          LDRB     r0,[sp,#0]
000014  f0400020          ORR      r0,r0,#0x20
000018  9000              STR      r0,[sp,#0]
;;;344    	i2c_write_register(I2C_DEV16_ADDR,&temp,CMU_CTL_REG,1);
00001a  2301              MOVS     r3,#1
00001c  f24c1201          MOV      r2,#0xc101
000020  4669              MOV      r1,sp
000022  2060              MOVS     r0,#0x60
000024  f7fffffe          BL       apple_write_addr16
;;;345    }
000028  bd08              POP      {r3,pc}
;;;346    
                          ENDP


                          AREA ||i.set_apple_read_otp||, CODE, READONLY, ALIGN=2

                  set_apple_read_otp PROC
;;;374    *******************************************************************************/
;;;375    static uint32_t set_apple_read_otp(void)
000000  b510              PUSH     {r4,lr}
;;;376    {
;;;377    	uint8_t sector;
;;;378    	for(sector=0;sector<4;sector++)
000002  2400              MOVS     r4,#0
000004  e01b              B        |L11.62|
                  |L11.6|
;;;379    	{
;;;380    		//OTP_KEY unlock
;;;381    		write_data[0] = 0x5A;
000006  205a              MOVS     r0,#0x5a
000008  4919              LDR      r1,|L11.112|
00000a  7008              STRB     r0,[r1,#0]
;;;382    		i2c_write_register(I2C_DEV16_ADDR,write_data,OTP_PSW_REG,1); 
00000c  2301              MOVS     r3,#1
00000e  f44f4244          MOV      r2,#0xc400
000012  2060              MOVS     r0,#0x60
000014  f7fffffe          BL       apple_write_addr16
;;;383    		//OTP_CMD=0X40|SECTOR|read|RUN
;;;384    		write_data[0] = 0x40|(sector<<4)|(0<<1)|(1<<0);
000018  2040              MOVS     r0,#0x40
00001a  ea401004          ORR      r0,r0,r4,LSL #4
00001e  1c40              ADDS     r0,r0,#1
000020  4913              LDR      r1,|L11.112|
000022  7008              STRB     r0,[r1,#0]
;;;385    		i2c_write_register(I2C_DEV16_ADDR, write_data,OTP_CMD_REG,1);
000024  2301              MOVS     r3,#1
000026  f24c4202          MOV      r2,#0xc402
00002a  2060              MOVS     r0,#0x60
00002c  f7fffffe          BL       apple_write_addr16
;;;386    		//判断操作结束，延时或查询RUN状态
;;;387    		//Delayms(1);//试验1msOK
;;;388    		while(set_apple_check_otp_cmd()==1){;}
000030  bf00              NOP      
                  |L11.50|
000032  f7fffffe          BL       set_apple_check_otp_cmd
000036  2801              CMP      r0,#1
000038  d0fb              BEQ      |L11.50|
00003a  1c60              ADDS     r0,r4,#1              ;378
00003c  b2c4              UXTB     r4,r0                 ;378
                  |L11.62|
00003e  2c04              CMP      r4,#4                 ;378
000040  dbe1              BLT      |L11.6|
;;;389    	}
;;;390    	//读OTP_VALUE寄存器获取OTP写入内容
;;;391    	i2c_read_register(I2C_DEV16_ADDR, read_data, OTP_VALUE0_REG, 4);
000042  2304              MOVS     r3,#4
000044  f24c4204          MOV      r2,#0xc404
000048  490a              LDR      r1,|L11.116|
00004a  2060              MOVS     r0,#0x60
00004c  f7fffffe          BL       apple_read_addr16
;;;392    	return (((uint32_t)read_data[3]<<24)|((uint32_t)read_data[2]<<16)|((uint32_t)read_data[1]<<8)|(read_data[0]));
000050  4808              LDR      r0,|L11.116|
000052  78c0              LDRB     r0,[r0,#3]  ; read_data
000054  0600              LSLS     r0,r0,#24
000056  4907              LDR      r1,|L11.116|
000058  7889              LDRB     r1,[r1,#2]  ; read_data
00005a  ea404001          ORR      r0,r0,r1,LSL #16
00005e  4905              LDR      r1,|L11.116|
000060  7849              LDRB     r1,[r1,#1]  ; read_data
000062  ea402001          ORR      r0,r0,r1,LSL #8
000066  4903              LDR      r1,|L11.116|
000068  7809              LDRB     r1,[r1,#0]  ; read_data
00006a  4308              ORRS     r0,r0,r1
;;;393    }
00006c  bd10              POP      {r4,pc}
;;;394    
                          ENDP

00006e  0000              DCW      0x0000
                  |L11.112|
                          DCD      write_data
                  |L11.116|
                          DCD      read_data

                          AREA ||i.set_apple_rework||, CODE, READONLY, ALIGN=1

                  set_apple_rework PROC
;;;288    *******************************************************************************/
;;;289    void set_apple_rework(void)
000000  b508              PUSH     {r3,lr}
;;;290    {
;;;291    	//PRST??
;;;292    //	prst_apple();
;;;293    	//reboot??	
;;;294    	uint8_t temp;
;;;295    	i2c_read_register(I2C_DEV16_ADDR,&temp,0xC100,1);
000002  2301              MOVS     r3,#1
000004  f44f4241          MOV      r2,#0xc100
000008  4669              MOV      r1,sp
00000a  2060              MOVS     r0,#0x60
00000c  f7fffffe          BL       apple_read_addr16
;;;296    	temp |= (1<<0);//RMU_CTL re_boot=1	
000010  f89d0000          LDRB     r0,[sp,#0]
000014  f0400001          ORR      r0,r0,#1
000018  9000              STR      r0,[sp,#0]
;;;297    	i2c_write_register(I2C_DEV16_ADDR,&temp,0xC100,1);
00001a  2301              MOVS     r3,#1
00001c  f44f4241          MOV      r2,#0xc100
000020  4669              MOV      r1,sp
000022  2060              MOVS     r0,#0x60
000024  f7fffffe          BL       apple_write_addr16
;;;298    }
000028  bd08              POP      {r3,pc}
;;;299     
                          ENDP


                          AREA ||i.set_apple_soft_work||, CODE, READONLY, ALIGN=1

                  set_apple_soft_work PROC
;;;221    
;;;222    void set_apple_soft_work(void)
000000  b508              PUSH     {r3,lr}
;;;223    {
;;;224    	uint8_t temp;
;;;225    	i2c_read_register(I2C_DEV16_ADDR,&temp,BOOT_CTL_REG,1);
000002  2301              MOVS     r3,#1
000004  f24c1203          MOV      r2,#0xc103
000008  4669              MOV      r1,sp
00000a  2060              MOVS     r0,#0x60
00000c  f7fffffe          BL       apple_read_addr16
;;;226    	temp &= ~(1<<5);//release CPU hold
000010  f89d0000          LDRB     r0,[sp,#0]
000014  f0200020          BIC      r0,r0,#0x20
000018  9000              STR      r0,[sp,#0]
;;;227    	temp |= (1<<0); //soft_boot=1
00001a  f89d0000          LDRB     r0,[sp,#0]
00001e  f0400001          ORR      r0,r0,#1
000022  9000              STR      r0,[sp,#0]
;;;228    	i2c_write_register(I2C_DEV16_ADDR,&temp,BOOT_CTL_REG,1);
000024  2301              MOVS     r3,#1
000026  f24c1203          MOV      r2,#0xc103
00002a  4669              MOV      r1,sp
00002c  2060              MOVS     r0,#0x60
00002e  f7fffffe          BL       apple_write_addr16
;;;229    }
000032  bd08              POP      {r3,pc}
;;;230    
                          ENDP


                          AREA ||i.set_apple_trim_value||, CODE, READONLY, ALIGN=2

                  set_apple_trim_value PROC
;;;85     #if 1
;;;86     void set_apple_trim_value(uint8_t item,uint8_t value)
000000  b570              PUSH     {r4-r6,lr}
;;;87     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;88     	switch(item)
000006  2d07              CMP      r5,#7
000008  d257              BCS      |L14.186|
00000a  e8dff005          TBB      [pc,r5]
00000e  5604              DCB      0x56,0x04
000010  111e2c3a          DCB      0x11,0x1e,0x2c,0x3a
000014  4800              DCB      0x48,0x00
;;;89     	{
;;;90         case ITEM_IREF://REF_CTL_REG REF_CTL[7:4] actually[7:5] for OTP;
;;;91             trim_ctl.iref_trim_f = value;
000016  482a              LDR      r0,|L14.192|
000018  7800              LDRB     r0,[r0,#0]  ; trim_ctl
00001a  f3641047          BFI      r0,r4,#5,#3
00001e  4928              LDR      r1,|L14.192|
000020  7008              STRB     r0,[r1,#0]
;;;92             i2c_write_register(I2C_DEV16_ADDR,&trim_ctl.ref_ctl_trim,REF_CTL_REG,1);
000022  2301              MOVS     r3,#1
000024  f24c1208          MOV      r2,#0xc108
000028  2060              MOVS     r0,#0x60
00002a  f7fffffe          BL       apple_write_addr16
;;;93             break;
00002e  e045              B        |L14.188|
;;;94         case ITEM_VREF://REF_CTL_REG REF_CTL[3:0];
;;;95             trim_ctl.vref_trim_f = value;
000030  4823              LDR      r0,|L14.192|
000032  7800              LDRB     r0,[r0,#0]  ; trim_ctl
000034  f3640003          BFI      r0,r4,#0,#4
000038  4921              LDR      r1,|L14.192|
00003a  7008              STRB     r0,[r1,#0]
;;;96             i2c_write_register(I2C_DEV16_ADDR,&trim_ctl.ref_ctl_trim,REF_CTL_REG,1);			
00003c  2301              MOVS     r3,#1
00003e  f24c1208          MOV      r2,#0xc108
000042  2060              MOVS     r0,#0x60
000044  f7fffffe          BL       apple_write_addr16
;;;97             break;
000048  e038              B        |L14.188|
;;;98         case ITEM_VBG://BGR_CTL_REG BGR_CTL[5:4];
;;;99             trim_ctl.vbg_trim_f = value;
00004a  481d              LDR      r0,|L14.192|
00004c  7840              LDRB     r0,[r0,#1]  ; trim_ctl
00004e  f3641005          BFI      r0,r4,#4,#2
000052  491b              LDR      r1,|L14.192|
000054  7048              STRB     r0,[r1,#1]
;;;100            i2c_write_register(I2C_DEV16_ADDR,&trim_ctl.bgr_ctl_trim,BGR_CTL_REG,1);			
000056  2301              MOVS     r3,#1
000058  f24c1206          MOV      r2,#0xc106
00005c  1c49              ADDS     r1,r1,#1
00005e  2060              MOVS     r0,#0x60
000060  f7fffffe          BL       apple_write_addr16
;;;101            break;
000064  e02a              B        |L14.188|
;;;102        case ITEM_LPVDD://BGR_CTL_REG BGR_CTL[3:0] actually[3:1] for OTP;
;;;103            trim_ctl.lpvdd_trim_f = value;
000066  4816              LDR      r0,|L14.192|
000068  7840              LDRB     r0,[r0,#1]  ; trim_ctl
00006a  f3640043          BFI      r0,r4,#1,#3
00006e  4914              LDR      r1,|L14.192|
000070  7048              STRB     r0,[r1,#1]
;;;104            i2c_write_register(I2C_DEV16_ADDR,&trim_ctl.bgr_ctl_trim,BGR_CTL_REG,1);				
000072  2301              MOVS     r3,#1
000074  f24c1206          MOV      r2,#0xc106
000078  1c49              ADDS     r1,r1,#1
00007a  2060              MOVS     r0,#0x60
00007c  f7fffffe          BL       apple_write_addr16
;;;105            break;
000080  e01c              B        |L14.188|
;;;106        case ITEM_RCL://RCL_CTL_REG RCL_CTL[6:0] actually[6:1] for OTP;
;;;107            trim_ctl.rcl_trim_f = value;
000082  480f              LDR      r0,|L14.192|
000084  7880              LDRB     r0,[r0,#2]  ; trim_ctl
000086  f3640046          BFI      r0,r4,#1,#6
00008a  490d              LDR      r1,|L14.192|
00008c  7088              STRB     r0,[r1,#2]
;;;108            i2c_write_register(I2C_DEV16_ADDR,&trim_ctl.rcl_ctl_trim,RCL_CTL_REG,1);			
00008e  2301              MOVS     r3,#1
000090  f24c1209          MOV      r2,#0xc109
000094  1c89              ADDS     r1,r1,#2
000096  2060              MOVS     r0,#0x60
000098  f7fffffe          BL       apple_write_addr16
;;;109            break;
00009c  e00e              B        |L14.188|
;;;110        case ITEM_RCH://OSC_CTL_REG RCH_CTL[7:0] actually[7:1] for OTP;
;;;111            trim_ctl.osc_trim_f = value;
00009e  4808              LDR      r0,|L14.192|
0000a0  78c0              LDRB     r0,[r0,#3]  ; trim_ctl
0000a2  f3640047          BFI      r0,r4,#1,#7
0000a6  4906              LDR      r1,|L14.192|
0000a8  70c8              STRB     r0,[r1,#3]
;;;112            i2c_write_register(I2C_DEV16_ADDR,&trim_ctl.osc_ctl_trim,OSC_CTL_REG,1);			
0000aa  2301              MOVS     r3,#1
0000ac  f24c120a          MOV      r2,#0xc10a
0000b0  1cc9              ADDS     r1,r1,#3
0000b2  2060              MOVS     r0,#0x60
0000b4  f7fffffe          BL       apple_write_addr16
;;;113            break;
0000b8  e000              B        |L14.188|
                  |L14.186|
;;;114        default:
;;;115            break;
0000ba  bf00              NOP      
                  |L14.188|
0000bc  bf00              NOP                            ;93
;;;116    	}
;;;117    }
0000be  bd70              POP      {r4-r6,pc}
;;;118    
                          ENDP

                  |L14.192|
                          DCD      trim_ctl

                          AREA ||i.set_apple_work_state||, CODE, READONLY, ALIGN=1

                  set_apple_work_state PROC
;;;203    
;;;204    fsm_rt_t set_apple_work_state(uint8_t state)
000000  b538              PUSH     {r3-r5,lr}
;;;205    {
000002  4604              MOV      r4,r0
;;;206    	uint8_t temp;
;;;207    	temp = state;
000004  9400              STR      r4,[sp,#0]
;;;208    	return i2c_write_register(I2C_DEV16_ADDR,&temp,0xC102,1);
000006  2301              MOVS     r3,#1
000008  f24c1202          MOV      r2,#0xc102
00000c  4669              MOV      r1,sp
00000e  2060              MOVS     r0,#0x60
000010  f7fffffe          BL       apple_write_addr16
;;;209        
;;;210    } 
000014  bd38              POP      {r3-r5,pc}
;;;211    
                          ENDP


                          AREA ||i.trim_var_load||, CODE, READONLY, ALIGN=2

                  trim_var_load PROC
;;;70     
;;;71     fsm_rt_t trim_var_load(void)
000000  b510              PUSH     {r4,lr}
;;;72     {
;;;73         fsm_rt_t ret;
;;;74         
;;;75         ret = i2c_read_register(I2C_DEV16_ADDR,&trim_ctl.ref_ctl_trim,REF_CTL_REG,1); if(ret != fsm_rt_cpl) return ret;
000002  2301              MOVS     r3,#1
000004  f24c1208          MOV      r2,#0xc108
000008  4916              LDR      r1,|L16.100|
00000a  2060              MOVS     r0,#0x60
00000c  f7fffffe          BL       apple_read_addr16
000010  4604              MOV      r4,r0
000012  b10c              CBZ      r4,|L16.24|
000014  4620              MOV      r0,r4
                  |L16.22|
;;;76         ret = i2c_read_register(I2C_DEV16_ADDR,&trim_ctl.bgr_ctl_trim,BGR_CTL_REG,1); if(ret != fsm_rt_cpl) return ret;
;;;77         ret = i2c_read_register(I2C_DEV16_ADDR,&trim_ctl.rcl_ctl_trim,RCL_CTL_REG,1); if(ret != fsm_rt_cpl) return ret;
;;;78         ret = i2c_read_register(I2C_DEV16_ADDR,&trim_ctl.osc_ctl_trim,OSC_CTL_REG,1); if(ret != fsm_rt_cpl) return ret;
;;;79         
;;;80         //trim_ctl.vbg_trim_f = BGR_FIX_VAL; //写入默认的BGR值
;;;81         
;;;82         return fsm_rt_cpl;
;;;83     }
000016  bd10              POP      {r4,pc}
                  |L16.24|
000018  2301              MOVS     r3,#1                 ;76
00001a  f24c1206          MOV      r2,#0xc106            ;76
00001e  4911              LDR      r1,|L16.100|
000020  1c49              ADDS     r1,r1,#1              ;76
000022  2060              MOVS     r0,#0x60              ;76
000024  f7fffffe          BL       apple_read_addr16
000028  4604              MOV      r4,r0                 ;76
00002a  b10c              CBZ      r4,|L16.48|
00002c  4620              MOV      r0,r4                 ;76
00002e  e7f2              B        |L16.22|
                  |L16.48|
000030  2301              MOVS     r3,#1                 ;77
000032  f24c1209          MOV      r2,#0xc109            ;77
000036  490b              LDR      r1,|L16.100|
000038  1c89              ADDS     r1,r1,#2              ;77
00003a  2060              MOVS     r0,#0x60              ;77
00003c  f7fffffe          BL       apple_read_addr16
000040  4604              MOV      r4,r0                 ;77
000042  b10c              CBZ      r4,|L16.72|
000044  4620              MOV      r0,r4                 ;77
000046  e7e6              B        |L16.22|
                  |L16.72|
000048  2301              MOVS     r3,#1                 ;78
00004a  f24c120a          MOV      r2,#0xc10a            ;78
00004e  4905              LDR      r1,|L16.100|
000050  1cc9              ADDS     r1,r1,#3              ;78
000052  2060              MOVS     r0,#0x60              ;78
000054  f7fffffe          BL       apple_read_addr16
000058  4604              MOV      r4,r0                 ;78
00005a  b10c              CBZ      r4,|L16.96|
00005c  4620              MOV      r0,r4                 ;78
00005e  e7da              B        |L16.22|
                  |L16.96|
000060  2000              MOVS     r0,#0                 ;82
000062  e7d8              B        |L16.22|
;;;84     
                          ENDP

                  |L16.100|
                          DCD      trim_ctl

                          AREA ||i.trim_var_zero_init||, CODE, READONLY, ALIGN=2

                  trim_var_zero_init PROC
;;;64     
;;;65     void trim_var_zero_init(void)
000000  4801              LDR      r0,|L17.8|
;;;66     {
;;;67         memset(&trim_ctl,0,sizeof(trim_ctl));
000002  2100              MOVS     r1,#0
000004  6001              STR      r1,[r0,#0]  ; trim_ctl
;;;68         //trim_ctl.vbg_trim_f = BGR_FIX_VAL;
;;;69     }
000006  4770              BX       lr
;;;70     
                          ENDP

                  |L17.8|
                          DCD      trim_ctl

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  write_data
                          %        16
                  read_data
                          %        16

                          AREA ||.data||, DATA, ALIGN=0

                  trim_ctl
                          DCDU     0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\chip_ft\\chip_access.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_chip_access_c_9004b8e0____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_chip_access_c_9004b8e0____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_chip_access_c_9004b8e0____REVSH|
#line 144
|__asm___13_chip_access_c_9004b8e0____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
