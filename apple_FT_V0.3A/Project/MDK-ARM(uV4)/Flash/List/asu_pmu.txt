; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\asu_pmu.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\asu_pmu.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\BERRY_TWI -I..\..\User\berry_ft -I..\..\User\ft_support -I..\..\User\berry_test -I..\..\User\factory_test -I..\..\User\emenu -I..\..\User\kiwi_ft -I..\..\User\kiwi_ft\spv40 -I..\..\User\kiwi_ft\spv40\peripheral -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\kiwi_ft -I..\..\User\MultiButton-1.1.0 -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.16.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\asu_pmu.crf ..\..\User\kiwi_ft\asu_pmu.c]
                          THUMB

                          AREA ||i.abs||, CODE, READONLY, ALIGN=1

                  abs PROC
;;;16     
;;;17     static uint32_t  abs(uint32_t a, uint32_t b)
000000  4602              MOV      r2,r0
;;;18     {
;;;19         return (a)>(b)? (a)-(b):(b)-(a);
000002  428a              CMP      r2,r1
000004  d901              BLS      |L1.10|
000006  1a50              SUBS     r0,r2,r1
                  |L1.8|
;;;20     }    
000008  4770              BX       lr
                  |L1.10|
00000a  1a88              SUBS     r0,r1,r2              ;19
00000c  e7fc              B        |L1.8|
;;;21     static fsm_rt_t pmu_bgr_trim(void);
                          ENDP


                          AREA ||i.asu_pmu_state||, CODE, READONLY, ALIGN=2

                  asu_pmu_state PROC
;;;30     
;;;31     fsm_rt_t asu_pmu_state(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;32     {
;;;33         #define PMU_PWR_CTL   0x200c0004
;;;34         #define PMU_VOLT_CTL  0x200C0008
;;;35         #define PMU_TRIM_CTL  0x200C0014
;;;36         static enum
;;;37         {
;;;38             START = 0,
;;;39             SET_IOVCC,//IOVCC 达到3.0V
;;;40             BGR_TRIM,  
;;;41             DISABLE_IOVCC,
;;;42             LPV_TRIM,
;;;43             ENABLE_IOVCC,
;;;44         } s_tState = START;
;;;45         
;;;46         if( !is_test_item(pmu_item) ) 
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       is_test_item
000008  b930              CBNZ     r0,|L2.24|
;;;47         {
;;;48             logging("INFO skip BGR\r\n");
00000a  4890              LDR      r0,|L2.588|
00000c  6801              LDR      r1,[r0,#0]  ; g_iRunTime
00000e  a090              ADR      r0,|L2.592|
000010  f7fffffe          BL       logger_buffer_write
;;;49             return fsm_rt_cpl;
000014  2000              MOVS     r0,#0
                  |L2.22|
;;;50         }        
;;;51     
;;;52         switch(s_tState)
;;;53         {
;;;54         case START:
;;;55             pmu_trim_ctl = 0;
;;;56             pmu_volt_ctl = 0;
;;;57             pmu_pwr_ctl  = 0;
;;;58             s_tState++;
;;;59             //break;
;;;60         
;;;61         case SET_IOVCC:
;;;62             {
;;;63                 asu_read_word(PMU_VOLT_CTL, &pmu_volt_ctl);
;;;64                 fsm_rt_t ret = asu_write_word(PMU_VOLT_CTL, pmu_volt_ctl | (1<<3)); //读取  PMU_VOLT_CTL SIOVCC=2.2V  设置IOVCC 3.0V
;;;65                 if(ret != fsm_rt_cpl)
;;;66                 {
;;;67                     s_tState = START;
;;;68                     return fsm_rt_err_pmu_asu; //对通讯错误作区分
;;;69                 }
;;;70                 s_tState = BGR_TRIM;
;;;71             }
;;;72             //break;
;;;73     
;;;74         case BGR_TRIM:
;;;75             {
;;;76                 fsm_rt_t ret;      
;;;77                 asu_read_word(PMU_TRIM_CTL, &pmu_trim_ctl);
;;;78                 trim_result.pmu_bgr_trim_power_on = pmu_trim_ctl & 0x0f;
;;;79                 trim_result.pmu_bgr_trim_default = BGR_TRIM_DEFAULT;
;;;80                 pmu_trim_ctl =(pmu_trim_ctl & 0xfffffff0) | trim_result.pmu_bgr_trim_default; //让trim值恢复默认值
;;;81                 asu_write_word(PMU_TRIM_CTL, pmu_trim_ctl);
;;;82                 trim_result.pmu_bgr_trim_volt_default = pmu_volt_get(ADC_RANK_BGR);//bgr_trim_set(pmu_ft_default.REF_TRIM_f.VREF_TRIM);
;;;83       
;;;84                 ret = pmu_bgr_trim();
;;;85                 if(ret != fsm_rt_cpl) 
;;;86                 {
;;;87                     s_tState =START;
;;;88                     return ret;
;;;89                 }
;;;90                 pmu_trim_ctl =(pmu_trim_ctl & 0xfffffff0) | trim_result.pmu_bgr_trim_val;
;;;91                 asu_write_word(PMU_TRIM_CTL, pmu_trim_ctl);
;;;92                 asu_write_word(PMU_VOLT_CTL, pmu_volt_ctl & ~(1<<3));  //恢复SIOVCC电压为3.0V
;;;93     //            trim_result.pmu_trim_reg_val = pmu_trim_ctl;
;;;94                 logging("SUCCESS BGR(iovcc):%d,%dmv(%d,%d)\r\n", trim_result.pmu_bgr_trim_val, 
;;;95                                                                  trim_result.pmu_bgr_trim_volt,
;;;96                                                                  trim_result.pmu_bgr_trim_default,
;;;97                                                                  trim_result.pmu_bgr_trim_volt_default);
;;;98                 s_tState = DISABLE_IOVCC;
;;;99             }
;;;100            //break;
;;;101            
;;;102        case DISABLE_IOVCC:
;;;103            {
;;;104                //disable IOVCC 让其不要干扰SIOVCC的trim
;;;105                asu_read_word(PMU_PWR_CTL, &pmu_pwr_ctl);
;;;106                pmu_pwr_ctl &= ~(1<<2);                     
;;;107                asu_write_word(PMU_PWR_CTL, pmu_pwr_ctl);
;;;108    
;;;109                s_tState = LPV_TRIM;
;;;110            }
;;;111            //break;
;;;112            
;;;113        case LPV_TRIM:
;;;114            {
;;;115                //trim_result.pmu_lpv_trim_default
;;;116                trim_result.pmu_lpv_trim_power_on = (pmu_trim_ctl >> 4 & 0x01);
;;;117                trim_result.pmu_lpv_trim_default = LPV_TRIM_DEFAULT;
;;;118                pmu_trim_ctl =  (pmu_trim_ctl & (~(1<<4))) |  trim_result.pmu_lpv_trim_default;
;;;119                asu_write_word(PMU_TRIM_CTL, pmu_trim_ctl);
;;;120                
;;;121                trim_result.pmu_lpv_trim_volt_default = pmu_volt_get(ADC_RANK_BGR);
;;;122                asu_write_word(PMU_TRIM_CTL, pmu_trim_ctl | (1<<4));
;;;123                uint32_t volt_trim1 = pmu_volt_get(ADC_RANK_BGR);
;;;124                //logging("LPV0:%dmv LPV1:%dmv\r\n",trim_result.pmu_lpv_trim_volt_default,volt_trim1);
;;;125                if(abs(volt_trim1,LPV_VOLT_TARGET) <  abs(trim_result.pmu_lpv_trim_volt_default, LPV_VOLT_TARGET))
;;;126                {
;;;127                    trim_result.pmu_lpv_trim_val = 1;
;;;128                    trim_result.pmu_lpv_trim_volt = volt_trim1;
;;;129                }
;;;130                else
;;;131                {
;;;132                    trim_result.pmu_lpv_trim_val = 0;
;;;133                    trim_result.pmu_lpv_trim_volt = trim_result.pmu_lpv_trim_volt_default;
;;;134                }
;;;135                if((trim_result.pmu_lpv_trim_volt < LPV_VOLT_MAX) && (trim_result.pmu_lpv_trim_volt > LPV_VOLT_MIN))
;;;136                {
;;;137                    trim_result.pass_pmu_lpv_trim = 1;
;;;138                   
;;;139                    logging("SUCCESS LPV(siovcc):%d,%dmv(%d,%d)\r\n", trim_result.pmu_lpv_trim_val, 
;;;140                                                                    trim_result.pmu_lpv_trim_volt,
;;;141                                                                    trim_result.pmu_lpv_trim_default,
;;;142                                                                    trim_result.pmu_lpv_trim_volt_default);
;;;143                    s_tState = ENABLE_IOVCC;
;;;144                }
;;;145                else
;;;146                {
;;;147                    trim_result.fail_pmu_lpv_trim = 1;
;;;148                    s_tState = START;
;;;149                    return fsm_rt_err_lpv;
;;;150                }
;;;151            }
;;;152            //break;
;;;153        
;;;154        case ENABLE_IOVCC:
;;;155            {
;;;156                //trim 完 lpvenable IOVCC  
;;;157                pmu_pwr_ctl |= (1<<2);                     
;;;158                asu_write_word(PMU_PWR_CTL, pmu_pwr_ctl);
;;;159                //debug("pmu_trim_ctl=0x%x\r\n",pmu_trim_ctl);
;;;160                s_tState = START;
;;;161                return fsm_rt_cpl;
;;;162            }
;;;163            //break;
;;;164        }
;;;165        return fsm_rt_on_going;
;;;166    }
000016  bd7c              POP      {r2-r6,pc}
                  |L2.24|
000018  4893              LDR      r0,|L2.616|
00001a  7800              LDRB     r0,[r0,#0]            ;52  ; s_tState
00001c  2806              CMP      r0,#6                 ;52
00001e  d27d              BCS      |L2.284|
000020  e8dff000          TBB      [pc,r0]               ;52
000024  03102778          DCB      0x03,0x10,0x27,0x78
000028  8ff2              DCB      0x8f,0xf2
00002a  2000              MOVS     r0,#0                 ;55
00002c  498f              LDR      r1,|L2.620|
00002e  6008              STR      r0,[r1,#0]            ;55  ; pmu_trim_ctl
000030  498f              LDR      r1,|L2.624|
000032  6008              STR      r0,[r1,#0]            ;56  ; pmu_volt_ctl
000034  498f              LDR      r1,|L2.628|
000036  6008              STR      r0,[r1,#0]            ;57  ; pmu_pwr_ctl
000038  488b              LDR      r0,|L2.616|
00003a  7800              LDRB     r0,[r0,#0]            ;58  ; s_tState
00003c  1c40              ADDS     r0,r0,#1              ;58
00003e  498a              LDR      r1,|L2.616|
000040  7008              STRB     r0,[r1,#0]            ;58
000042  bf00              NOP                            ;61
000044  498a              LDR      r1,|L2.624|
000046  488c              LDR      r0,|L2.632|
000048  f7fffffe          BL       asu_read_word
00004c  4888              LDR      r0,|L2.624|
00004e  6800              LDR      r0,[r0,#0]            ;64  ; pmu_volt_ctl
000050  f0400108          ORR      r1,r0,#8              ;64
000054  4888              LDR      r0,|L2.632|
000056  f7fffffe          BL       asu_write_word
00005a  4604              MOV      r4,r0                 ;64
00005c  b12c              CBZ      r4,|L2.106|
00005e  2000              MOVS     r0,#0                 ;67
000060  4981              LDR      r1,|L2.616|
000062  7008              STRB     r0,[r1,#0]            ;67
000064  f06f002b          MVN      r0,#0x2b              ;68
000068  e7d5              B        |L2.22|
                  |L2.106|
00006a  2002              MOVS     r0,#2                 ;70
00006c  497e              LDR      r1,|L2.616|
00006e  7008              STRB     r0,[r1,#0]            ;70
000070  bf00              NOP                            ;74
000072  497e              LDR      r1,|L2.620|
000074  4880              LDR      r0,|L2.632|
000076  300c              ADDS     r0,r0,#0xc            ;77
000078  f7fffffe          BL       asu_read_word
00007c  487b              LDR      r0,|L2.620|
00007e  7800              LDRB     r0,[r0,#0]            ;78  ; pmu_trim_ctl
000080  f000000f          AND      r0,r0,#0xf            ;78
000084  497d              LDR      r1,|L2.636|
000086  7248              STRB     r0,[r1,#9]            ;78
000088  2007              MOVS     r0,#7                 ;79
00008a  7288              STRB     r0,[r1,#0xa]          ;79
00008c  4877              LDR      r0,|L2.620|
00008e  6800              LDR      r0,[r0,#0]            ;80  ; pmu_trim_ctl
000090  f020000f          BIC      r0,r0,#0xf            ;80
000094  7a89              LDRB     r1,[r1,#0xa]          ;80  ; trim_result
000096  4308              ORRS     r0,r0,r1              ;80
000098  4974              LDR      r1,|L2.620|
00009a  6008              STR      r0,[r1,#0]            ;80  ; pmu_trim_ctl
00009c  4608              MOV      r0,r1                 ;81
00009e  6801              LDR      r1,[r0,#0]            ;81  ; pmu_trim_ctl
0000a0  4875              LDR      r0,|L2.632|
0000a2  300c              ADDS     r0,r0,#0xc            ;81
0000a4  f7fffffe          BL       asu_write_word
0000a8  2004              MOVS     r0,#4                 ;82
0000aa  f7fffffe          BL       pmu_volt_get
0000ae  4973              LDR      r1,|L2.636|
0000b0  6108              STR      r0,[r1,#0x10]         ;82  ; trim_result
0000b2  f7fffffe          BL       pmu_bgr_trim
0000b6  4604              MOV      r4,r0                 ;84
0000b8  b124              CBZ      r4,|L2.196|
0000ba  2000              MOVS     r0,#0                 ;87
0000bc  496a              LDR      r1,|L2.616|
0000be  7008              STRB     r0,[r1,#0]            ;87
0000c0  4620              MOV      r0,r4                 ;88
0000c2  e7a8              B        |L2.22|
                  |L2.196|
0000c4  4869              LDR      r0,|L2.620|
0000c6  6800              LDR      r0,[r0,#0]            ;90  ; pmu_trim_ctl
0000c8  f020000f          BIC      r0,r0,#0xf            ;90
0000cc  496b              LDR      r1,|L2.636|
0000ce  7a09              LDRB     r1,[r1,#8]            ;90  ; trim_result
0000d0  4308              ORRS     r0,r0,r1              ;90
0000d2  4966              LDR      r1,|L2.620|
0000d4  6008              STR      r0,[r1,#0]            ;90  ; pmu_trim_ctl
0000d6  4608              MOV      r0,r1                 ;91
0000d8  6801              LDR      r1,[r0,#0]            ;91  ; pmu_trim_ctl
0000da  4867              LDR      r0,|L2.632|
0000dc  300c              ADDS     r0,r0,#0xc            ;91
0000de  f7fffffe          BL       asu_write_word
0000e2  4863              LDR      r0,|L2.624|
0000e4  6800              LDR      r0,[r0,#0]            ;92  ; pmu_volt_ctl
0000e6  f0200108          BIC      r1,r0,#8              ;92
0000ea  4863              LDR      r0,|L2.632|
0000ec  f7fffffe          BL       asu_write_word
0000f0  4862              LDR      r0,|L2.636|
0000f2  6900              LDR      r0,[r0,#0x10]         ;94  ; trim_result
0000f4  4961              LDR      r1,|L2.636|
0000f6  7a89              LDRB     r1,[r1,#0xa]          ;94  ; trim_result
0000f8  e9cd1000          STRD     r1,r0,[sp,#0]         ;94
0000fc  485f              LDR      r0,|L2.636|
0000fe  68c3              LDR      r3,[r0,#0xc]          ;94  ; trim_result
000100  7a02              LDRB     r2,[r0,#8]            ;94  ; trim_result
000102  4852              LDR      r0,|L2.588|
000104  6801              LDR      r1,[r0,#0]            ;94  ; g_iRunTime
000106  a05e              ADR      r0,|L2.640|
000108  f7fffffe          BL       logger_buffer_write
00010c  2003              MOVS     r0,#3                 ;98
00010e  4956              LDR      r1,|L2.616|
000110  7008              STRB     r0,[r1,#0]            ;98
000112  bf00              NOP                            ;102
000114  4957              LDR      r1,|L2.628|
000116  4858              LDR      r0,|L2.632|
000118  1f00              SUBS     r0,r0,#4              ;105
00011a  e000              B        |L2.286|
                  |L2.284|
00011c  e093              B        |L2.582|
                  |L2.286|
00011e  f7fffffe          BL       asu_read_word
000122  4854              LDR      r0,|L2.628|
000124  6800              LDR      r0,[r0,#0]            ;106  ; pmu_pwr_ctl
000126  f0200004          BIC      r0,r0,#4              ;106
00012a  4952              LDR      r1,|L2.628|
00012c  6008              STR      r0,[r1,#0]            ;106  ; pmu_pwr_ctl
00012e  4608              MOV      r0,r1                 ;107
000130  6801              LDR      r1,[r0,#0]            ;107  ; pmu_pwr_ctl
000132  4851              LDR      r0,|L2.632|
000134  1f00              SUBS     r0,r0,#4              ;107
000136  f7fffffe          BL       asu_write_word
00013a  2004              MOVS     r0,#4                 ;109
00013c  494a              LDR      r1,|L2.616|
00013e  7008              STRB     r0,[r1,#0]            ;109
000140  bf00              NOP                            ;113
000142  484a              LDR      r0,|L2.620|
000144  7800              LDRB     r0,[r0,#0]            ;116  ; pmu_trim_ctl
000146  f3c01000          UBFX     r0,r0,#4,#1           ;116
00014a  494c              LDR      r1,|L2.636|
00014c  7548              STRB     r0,[r1,#0x15]         ;116
00014e  2000              MOVS     r0,#0                 ;117
000150  7588              STRB     r0,[r1,#0x16]         ;117
000152  4846              LDR      r0,|L2.620|
000154  6800              LDR      r0,[r0,#0]            ;118  ; pmu_trim_ctl
000156  f0200010          BIC      r0,r0,#0x10           ;118
00015a  7d89              LDRB     r1,[r1,#0x16]         ;118  ; trim_result
00015c  4308              ORRS     r0,r0,r1              ;118
00015e  4943              LDR      r1,|L2.620|
000160  6008              STR      r0,[r1,#0]            ;118  ; pmu_trim_ctl
000162  4608              MOV      r0,r1                 ;119
000164  6801              LDR      r1,[r0,#0]            ;119  ; pmu_trim_ctl
000166  4844              LDR      r0,|L2.632|
000168  300c              ADDS     r0,r0,#0xc            ;119
00016a  f7fffffe          BL       asu_write_word
00016e  2004              MOVS     r0,#4                 ;121
000170  f7fffffe          BL       pmu_volt_get
000174  4941              LDR      r1,|L2.636|
000176  61c8              STR      r0,[r1,#0x1c]         ;121  ; trim_result
000178  483c              LDR      r0,|L2.620|
00017a  6800              LDR      r0,[r0,#0]            ;122  ; pmu_trim_ctl
00017c  f0400110          ORR      r1,r0,#0x10           ;122
000180  483d              LDR      r0,|L2.632|
000182  300c              ADDS     r0,r0,#0xc            ;122
000184  f7fffffe          BL       asu_write_word
000188  2004              MOVS     r0,#4                 ;123
00018a  f7fffffe          BL       pmu_volt_get
00018e  4604              MOV      r4,r0                 ;123
000190  f64031b8          MOV      r1,#0xbb8             ;125
000194  4620              MOV      r0,r4                 ;125
000196  f7fffffe          BL       abs
00019a  4605              MOV      r5,r0                 ;125
00019c  4937              LDR      r1,|L2.636|
00019e  69c8              LDR      r0,[r1,#0x1c]         ;125  ; trim_result
0001a0  f64031b8          MOV      r1,#0xbb8             ;125
0001a4  f7fffffe          BL       abs
0001a8  4285              CMP      r5,r0                 ;125
0001aa  d205              BCS      |L2.440|
0001ac  2001              MOVS     r0,#1                 ;127
0001ae  4933              LDR      r1,|L2.636|
0001b0  7508              STRB     r0,[r1,#0x14]         ;127
0001b2  4608              MOV      r0,r1                 ;128
0001b4  6184              STR      r4,[r0,#0x18]         ;128  ; trim_result
0001b6  e005              B        |L2.452|
                  |L2.440|
0001b8  2000              MOVS     r0,#0                 ;132
0001ba  4930              LDR      r1,|L2.636|
0001bc  7508              STRB     r0,[r1,#0x14]         ;132
0001be  4608              MOV      r0,r1                 ;133
0001c0  69c0              LDR      r0,[r0,#0x1c]         ;133  ; trim_result
0001c2  6188              STR      r0,[r1,#0x18]         ;133  ; trim_result
                  |L2.452|
0001c4  482d              LDR      r0,|L2.636|
0001c6  6980              LDR      r0,[r0,#0x18]         ;135  ; trim_result
0001c8  f5b06f48          CMP      r0,#0xc80             ;135
0001cc  d21d              BCS      |L2.522|
0001ce  482b              LDR      r0,|L2.636|
0001d0  6980              LDR      r0,[r0,#0x18]         ;135  ; trim_result
0001d2  f5b06f2f          CMP      r0,#0xaf0             ;135
0001d6  d918              BLS      |L2.522|
0001d8  4828              LDR      r0,|L2.636|
0001da  6800              LDR      r0,[r0,#0]            ;137  ; trim_result
0001dc  f0200004          BIC      r0,r0,#4              ;137
0001e0  1d00              ADDS     r0,r0,#4              ;137
0001e2  4926              LDR      r1,|L2.636|
0001e4  6008              STR      r0,[r1,#0]            ;137  ; trim_result
0001e6  4608              MOV      r0,r1                 ;139
0001e8  69c0              LDR      r0,[r0,#0x1c]         ;139  ; trim_result
0001ea  7d89              LDRB     r1,[r1,#0x16]         ;139  ; trim_result
0001ec  e9cd1000          STRD     r1,r0,[sp,#0]         ;139
0001f0  4822              LDR      r0,|L2.636|
0001f2  6983              LDR      r3,[r0,#0x18]         ;139  ; trim_result
0001f4  7d02              LDRB     r2,[r0,#0x14]         ;139  ; trim_result
0001f6  4815              LDR      r0,|L2.588|
0001f8  6801              LDR      r1,[r0,#0]            ;139  ; g_iRunTime
0001fa  a02c              ADR      r0,|L2.684|
0001fc  f7fffffe          BL       logger_buffer_write
000200  2005              MOVS     r0,#5                 ;143
000202  4919              LDR      r1,|L2.616|
000204  7008              STRB     r0,[r1,#0]            ;143
000206  e00d              B        |L2.548|
000208  e00d              B        |L2.550|
                  |L2.522|
00020a  481c              LDR      r0,|L2.636|
00020c  6840              LDR      r0,[r0,#4]            ;147  ; trim_result
00020e  f0200002          BIC      r0,r0,#2              ;147
000212  1c80              ADDS     r0,r0,#2              ;147
000214  4919              LDR      r1,|L2.636|
000216  6048              STR      r0,[r1,#4]            ;147  ; trim_result
000218  2000              MOVS     r0,#0                 ;148
00021a  4913              LDR      r1,|L2.616|
00021c  7008              STRB     r0,[r1,#0]            ;148
00021e  f06f002c          MVN      r0,#0x2c              ;149
000222  e6f8              B        |L2.22|
                  |L2.548|
000224  bf00              NOP                            ;154
                  |L2.550|
000226  4813              LDR      r0,|L2.628|
000228  6800              LDR      r0,[r0,#0]            ;157  ; pmu_pwr_ctl
00022a  f0400004          ORR      r0,r0,#4              ;157
00022e  4911              LDR      r1,|L2.628|
000230  6008              STR      r0,[r1,#0]            ;157  ; pmu_pwr_ctl
000232  4608              MOV      r0,r1                 ;158
000234  6801              LDR      r1,[r0,#0]            ;158  ; pmu_pwr_ctl
000236  4810              LDR      r0,|L2.632|
000238  1f00              SUBS     r0,r0,#4              ;158
00023a  f7fffffe          BL       asu_write_word
00023e  2000              MOVS     r0,#0                 ;160
000240  4909              LDR      r1,|L2.616|
000242  7008              STRB     r0,[r1,#0]            ;160
000244  e6e7              B        |L2.22|
                  |L2.582|
000246  2001              MOVS     r0,#1                 ;165
000248  e6e5              B        |L2.22|
;;;167    
                          ENDP

00024a  0000              DCW      0x0000
                  |L2.588|
                          DCD      g_iRunTime
                  |L2.592|
000250  5b253864          DCB      "[%8d]INFO skip BGR\r\n",0
000254  5d494e46
000258  4f20736b
00025c  69702042
000260  47520d0a
000264  00      
000265  00                DCB      0
000266  00                DCB      0
000267  00                DCB      0
                  |L2.616|
                          DCD      s_tState
                  |L2.620|
                          DCD      pmu_trim_ctl
                  |L2.624|
                          DCD      pmu_volt_ctl
                  |L2.628|
                          DCD      pmu_pwr_ctl
                  |L2.632|
                          DCD      0x200c0008
                  |L2.636|
                          DCD      trim_result
                  |L2.640|
000280  5b253864          DCB      "[%8d]SUCCESS BGR(iovcc):%d,%dmv(%d,%d)\r\n",0
000284  5d535543
000288  43455353
00028c  20424752
000290  28696f76
000294  6363293a
000298  25642c25
00029c  646d7628
0002a0  25642c25
0002a4  64290d0a
0002a8  00      
0002a9  00                DCB      0
0002aa  00                DCB      0
0002ab  00                DCB      0
                  |L2.684|
0002ac  5b253864          DCB      "[%8d]SUCCESS LPV(siovcc):%d,%dmv(%d,%d)\r\n",0
0002b0  5d535543
0002b4  43455353
0002b8  204c5056
0002bc  2873696f
0002c0  76636329
0002c4  3a25642c
0002c8  25646d76
0002cc  2825642c
0002d0  2564290d
0002d4  0a00    
0002d6  00                DCB      0
0002d7  00                DCB      0

                          AREA ||i.bgr_trim_set||, CODE, READONLY, ALIGN=2

                  bgr_trim_set PROC
;;;169    //设置trim值，返回电压
;;;170    static uint32_t bgr_trim_set(uint8_t val)
000000  b510              PUSH     {r4,lr}
;;;171    {
000002  4604              MOV      r4,r0
;;;172        pmu_trim_ctl = (pmu_trim_ctl & 0xfffffff0) | val;       //对应位域值
000004  4809              LDR      r0,|L3.44|
000006  6800              LDR      r0,[r0,#0]  ; pmu_trim_ctl
000008  f020000f          BIC      r0,r0,#0xf
00000c  4320              ORRS     r0,r0,r4
00000e  4907              LDR      r1,|L3.44|
000010  6008              STR      r0,[r1,#0]  ; pmu_trim_ctl
;;;173        asu_write_word(PMU_TRIM_CTL, pmu_trim_ctl);         //写入cpp trim值
000012  4608              MOV      r0,r1
000014  6801              LDR      r1,[r0,#0]  ; pmu_trim_ctl
000016  4806              LDR      r0,|L3.48|
000018  f7fffffe          BL       asu_write_word
;;;174        delay_ms(1);
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       bsp_DelayMS
;;;175        return pmu_volt_get(ADC_RANK_BGR);
000022  2004              MOVS     r0,#4
000024  f7fffffe          BL       pmu_volt_get
;;;176    }
000028  bd10              POP      {r4,pc}
;;;177    
                          ENDP

00002a  0000              DCW      0x0000
                  |L3.44|
                          DCD      pmu_trim_ctl
                  |L3.48|
                          DCD      0x200c0014

                          AREA ||i.pmu_bgr_trim||, CODE, READONLY, ALIGN=2

                  pmu_bgr_trim PROC
;;;177    
;;;178    static fsm_rt_t pmu_bgr_trim(void)
000000  b500              PUSH     {lr}
;;;179    {
000002  b085              SUB      sp,sp,#0x14
;;;180        volt_search_t volt_search;
;;;181     
;;;182        volt_search.tar          = BGR_VOLT_TARGET;
000004  f44f6048          MOV      r0,#0xc80
000008  9000              STR      r0,[sp,#0]
;;;183        volt_search.trim_val_set = bgr_trim_set;
00000a  4817              LDR      r0,|L4.104|
00000c  9001              STR      r0,[sp,#4]
;;;184        volt_search.dir          = 0;//trim值越大，电压越小
00000e  2000              MOVS     r0,#0
000010  f88d0011          STRB     r0,[sp,#0x11]
;;;185        volt_search.trim_val_low = 0;
000014  f88d0008          STRB     r0,[sp,#8]
;;;186        volt_search.trim_val_hi  = BGR_TRIM_VAL_MAX;
000018  200f              MOVS     r0,#0xf
00001a  f88d0009          STRB     r0,[sp,#9]
;;;187        
;;;188        volt_binary_search(&volt_search); //换一个trim值区间 继续二分法查找
00001e  4668              MOV      r0,sp
000020  f7fffffe          BL       volt_binary_search
;;;189        
;;;190        if((volt_search.best_trim_volt <= BGR_VOLT_MAX)  && (volt_search.best_trim_volt >= BGR_VOLT_MIN))
000024  9803              LDR      r0,[sp,#0xc]
000026  f5b06f4e          CMP      r0,#0xce0
00002a  d812              BHI      |L4.82|
00002c  9803              LDR      r0,[sp,#0xc]
00002e  f5b06f42          CMP      r0,#0xc20
000032  d30e              BCC      |L4.82|
;;;191        {
;;;192            trim_result.pmu_bgr_trim_val  = volt_search.best_trim_val;
000034  f89d0010          LDRB     r0,[sp,#0x10]
000038  490c              LDR      r1,|L4.108|
00003a  7208              STRB     r0,[r1,#8]
;;;193            trim_result.pmu_bgr_trim_volt = volt_search.best_trim_volt;
00003c  9803              LDR      r0,[sp,#0xc]
00003e  60c8              STR      r0,[r1,#0xc]  ; trim_result
;;;194            trim_result.pass_pmu_bgr_trim = 1;
000040  4608              MOV      r0,r1
000042  6800              LDR      r0,[r0,#0]  ; trim_result
000044  f0200002          BIC      r0,r0,#2
000048  1c80              ADDS     r0,r0,#2
00004a  6008              STR      r0,[r1,#0]  ; trim_result
;;;195            return fsm_rt_cpl;
00004c  2000              MOVS     r0,#0
                  |L4.78|
;;;196        }
;;;197        else
;;;198        {
;;;199            trim_result.fail_pmu_bgr_trim = 1;
;;;200            return fsm_rt_err_bgr;
;;;201        }
;;;202    }
00004e  b005              ADD      sp,sp,#0x14
000050  bd00              POP      {pc}
                  |L4.82|
000052  4806              LDR      r0,|L4.108|
000054  6840              LDR      r0,[r0,#4]            ;199  ; trim_result
000056  f0200004          BIC      r0,r0,#4              ;199
00005a  1d00              ADDS     r0,r0,#4              ;199
00005c  4903              LDR      r1,|L4.108|
00005e  6048              STR      r0,[r1,#4]            ;199  ; trim_result
000060  f06f0013          MVN      r0,#0x13              ;200
000064  e7f3              B        |L4.78|
;;;203    
                          ENDP

000066  0000              DCW      0x0000
                  |L4.104|
                          DCD      bgr_trim_set
                  |L4.108|
                          DCD      trim_result

                          AREA ||i.pmu_volt_get||, CODE, READONLY, ALIGN=2

                  pmu_volt_get PROC
;;;275    //返回电压 mv
;;;276    static uint32_t pmu_volt_get(uint8_t rank)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;277    {
000004  4604              MOV      r4,r0
;;;278        uint32_t adc_sum=0;
000006  2500              MOVS     r5,#0
;;;279        for(uint8_t i=0; i<32; i++)
000008  2700              MOVS     r7,#0
00000a  e008              B        |L5.30|
                  |L5.12|
;;;280        {
;;;281            delay_us(50);
00000c  2032              MOVS     r0,#0x32
00000e  f7fffffe          BL       bsp_DelayUS
;;;282            adc_sum += g_adc_value[rank];
000012  4809              LDR      r0,|L5.56|
000014  f8300014          LDRH     r0,[r0,r4,LSL #1]
000018  4405              ADD      r5,r5,r0
00001a  1c78              ADDS     r0,r7,#1              ;279
00001c  b2c7              UXTB     r7,r0                 ;279
                  |L5.30|
00001e  2f20              CMP      r7,#0x20              ;279
000020  dbf4              BLT      |L5.12|
;;;283        }
;;;284    
;;;285        uint32_t pmu_volt = adc_sum/32 * 3300 / 4095;
000022  0968              LSRS     r0,r5,#5
000024  f64041e4          MOV      r1,#0xce4
000028  4348              MULS     r0,r1,r0
00002a  f64071ff          MOV      r1,#0xfff
00002e  fbb0f6f1          UDIV     r6,r0,r1
;;;286       
;;;287        return pmu_volt;
000032  4630              MOV      r0,r6
;;;288    }
000034  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  |L5.56|
                          DCD      g_adc_value

                          AREA ||i.volt_binary_search||, CODE, READONLY, ALIGN=1

                  volt_binary_search PROC
;;;210    //dir 考虑 trim增大与频率增大是否通向
;;;211    static void volt_binary_search(volt_search_t*  volt_search_struct)
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;212    {
000004  4606              MOV      r6,r0
;;;213        uint32_t tar                    = (*volt_search_struct).tar;
000006  6837              LDR      r7,[r6,#0]
;;;214        uint32_t(*trim_set)(uint8_t )   = (*volt_search_struct).trim_val_set;
000008  f8d6b004          LDR      r11,[r6,#4]
;;;215        uint8_t high                    = (*volt_search_struct).trim_val_hi;
00000c  f8968009          LDRB     r8,[r6,#9]
;;;216        uint8_t low                     = (*volt_search_struct).trim_val_low;
000010  f8969008          LDRB     r9,[r6,#8]
;;;217        uint8_t dir                     = (*volt_search_struct).dir;
000014  7c70              LDRB     r0,[r6,#0x11]
000016  9001              STR      r0,[sp,#4]
;;;218        uint8_t mid;
;;;219        uint32_t mid_volt;
;;;220        uint32_t min_diff               = tar;
000018  9700              STR      r7,[sp,#0]
;;;221      
;;;222        
;;;223        while (low <= high) 
00001a  e033              B        |L6.132|
                  |L6.28|
;;;224        {
;;;225            mid = (low + high) / 2;
00001c  eb090008          ADD      r0,r9,r8
000020  eb0071d0          ADD      r1,r0,r0,LSR #31
000024  f3c10447          UBFX     r4,r1,#1,#8
;;;226            mid_volt = trim_set(mid);
000028  4620              MOV      r0,r4
00002a  47d8              BLX      r11
00002c  4605              MOV      r5,r0
;;;227            //logging("mid=%3d, low=%3d, high=%3d, mid_volt=%8d\r\n",mid,low,high,mid_volt);
;;;228            
;;;229            uint32_t diff = (mid_volt > tar)?(mid_volt-tar):(tar-mid_volt);         //当前频率与目标频率的差值
00002e  42bd              CMP      r5,r7
000030  d901              BLS      |L6.54|
000032  1be8              SUBS     r0,r5,r7
000034  e000              B        |L6.56|
                  |L6.54|
000036  1b78              SUBS     r0,r7,r5
                  |L6.56|
000038  4682              MOV      r10,r0
;;;230            if (diff < min_diff) 
00003a  9800              LDR      r0,[sp,#0]
00003c  4582              CMP      r10,r0
00003e  d203              BCS      |L6.72|
;;;231            {
;;;232                min_diff = diff;
000040  f8cda000          STR      r10,[sp,#0]
;;;233                (*volt_search_struct).best_trim_val  = mid;
000044  7434              STRB     r4,[r6,#0x10]
;;;234                (*volt_search_struct).best_trim_volt = mid_volt;
000046  60f5              STR      r5,[r6,#0xc]
                  |L6.72|
;;;235            }
;;;236            
;;;237            
;;;238            if (mid_volt == tar ) 
000048  42bd              CMP      r5,r7
00004a  d100              BNE      |L6.78|
;;;239            {
;;;240                break;//return mid;
00004c  e01c              B        |L6.136|
                  |L6.78|
;;;241            } 
;;;242            else if((mid == low) && (mid== high)) /* low mid high三个数为同一值，穷举完毕 */
00004e  454c              CMP      r4,r9
000050  d102              BNE      |L6.88|
000052  4544              CMP      r4,r8
000054  d100              BNE      |L6.88|
;;;243            {
;;;244                break;
000056  e017              B        |L6.136|
                  |L6.88|
;;;245            }
;;;246            else 
;;;247            {
;;;248                if(dir)
000058  9801              LDR      r0,[sp,#4]
00005a  b148              CBZ      r0,|L6.112|
;;;249                {
;;;250                    if (mid_volt < tar) 
00005c  42bd              CMP      r5,r7
00005e  d203              BCS      |L6.104|
;;;251                    {
;;;252                        low = mid + 1;
000060  1c60              ADDS     r0,r4,#1
000062  f00009ff          AND      r9,r0,#0xff
000066  e00c              B        |L6.130|
                  |L6.104|
;;;253                    } 
;;;254                    else 
;;;255                    {
;;;256                        high = mid - 1;
000068  1e60              SUBS     r0,r4,#1
00006a  f00008ff          AND      r8,r0,#0xff
00006e  e008              B        |L6.130|
                  |L6.112|
;;;257                    }
;;;258                }
;;;259                else
;;;260                {
;;;261                    if (mid_volt < tar) 
000070  42bd              CMP      r5,r7
000072  d203              BCS      |L6.124|
;;;262                    {
;;;263                       
;;;264                        high = mid - 1;
000074  1e60              SUBS     r0,r4,#1
000076  f00008ff          AND      r8,r0,#0xff
00007a  e002              B        |L6.130|
                  |L6.124|
;;;265                    } 
;;;266                    else 
;;;267                    {
;;;268                        low = mid + 1;
00007c  1c60              ADDS     r0,r4,#1
00007e  f00009ff          AND      r9,r0,#0xff
                  |L6.130|
;;;269                    }
;;;270                }
;;;271            }
;;;272        }
000082  bf00              NOP      
                  |L6.132|
000084  45c1              CMP      r9,r8                 ;223
000086  ddc9              BLE      |L6.28|
                  |L6.136|
000088  bf00              NOP                            ;240
;;;273    }
00008a  e8bd9ffc          POP      {r2-r12,pc}
;;;274    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  pmu_trim_ctl
                          DCD      0x00000000
                  pmu_volt_ctl
                          DCD      0x00000000
                  pmu_pwr_ctl
                          DCD      0x00000000
                  s_tState
00000c  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\kiwi_ft\\asu_pmu.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_asu_pmu_c_d5db23de____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_asu_pmu_c_d5db23de____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_asu_pmu_c_d5db23de____REVSH|
#line 144
|__asm___9_asu_pmu_c_d5db23de____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
