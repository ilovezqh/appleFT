; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\ft_common.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\ft_common.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\berry_ft -I..\..\User\ft_support -I..\..\User\test_common -I..\..\User\emenu -I..\..\User\kiwi_ft -I..\..\User\kiwi_ft\spv40 -I..\..\User\kiwi_ft\spv40\peripheral -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\kiwi_ft -I..\..\User\MultiButton-1.1.0 -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.16.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\ft_common.crf ..\..\User\berry_ft\ft_common.c]
                          THUMB

                          AREA ||i.best_float_index_find||, CODE, READONLY, ALIGN=1

                  best_float_index_find PROC
;;;3      
;;;4      uint8_t best_float_index_find(float tar, float volt[], uint8_t len)
000000  b510              PUSH     {r4,lr}
;;;5      {
000002  4602              MOV      r2,r0
;;;6          float offset;
;;;7          float min;
;;;8          uint8_t ret;
;;;9      
;;;10         for (uint8_t i = 0; i < len; i++)
000004  2000              MOVS     r0,#0
000006  e027              B        |L1.88|
                  |L1.8|
;;;11         {
;;;12     
;;;13             if(volt[i] < tar)
000008  eb020480          ADD      r4,r2,r0,LSL #2
00000c  edd41a00          VLDR     s3,[r4,#0]
000010  eef41ac0          VCMPE.F32 s3,s0
000014  eef1fa10          VMRS     APSR_nzcv,FPSCR
000018  d208              BCS      |L1.44|
;;;14             {
;;;15                 offset = tar - volt[i];
00001a  eb020480          ADD      r4,r2,r0,LSL #2
00001e  edd41a00          VLDR     s3,[r4,#0]
000022  ee701a61          VSUB.F32 s3,s0,s3
000026  eef00a61          VMOV.F32 s1,s3
00002a  e007              B        |L1.60|
                  |L1.44|
;;;16             }
;;;17             else
;;;18             {
;;;19                 offset = volt[i] - tar;
00002c  eb020480          ADD      r4,r2,r0,LSL #2
000030  edd41a00          VLDR     s3,[r4,#0]
000034  ee711ac0          VSUB.F32 s3,s3,s0
000038  eef00a61          VMOV.F32 s1,s3
                  |L1.60|
;;;20             }
;;;21     
;;;22             if(i == 0)
00003c  b910              CBNZ     r0,|L1.68|
;;;23             {
;;;24                 min = offset;
00003e  eeb01a60          VMOV.F32 s2,s1
;;;25                 ret = i;
000042  4603              MOV      r3,r0
                  |L1.68|
;;;26             }
;;;27     
;;;28             if(min > offset)
000044  eeb41ae0          VCMPE.F32 s2,s1
000048  eef1fa10          VMRS     APSR_nzcv,FPSCR
00004c  dd02              BLE      |L1.84|
;;;29             {
;;;30                 min = offset;
00004e  eeb01a60          VMOV.F32 s2,s1
;;;31                 ret = i;
000052  4603              MOV      r3,r0
                  |L1.84|
000054  1c44              ADDS     r4,r0,#1              ;10
000056  b2e0              UXTB     r0,r4                 ;10
                  |L1.88|
000058  4288              CMP      r0,r1                 ;10
00005a  dbd5              BLT      |L1.8|
;;;32             }
;;;33     
;;;34         }
;;;35     
;;;36         return ret;
00005c  4618              MOV      r0,r3
;;;37     }
00005e  bd10              POP      {r4,pc}
;;;38     
                          ENDP


                          AREA ||i.best_u32_index_find||, CODE, READONLY, ALIGN=1

                  best_u32_index_find PROC
;;;38     
;;;39     uint8_t best_u32_index_find(u32 tar, u32 volt[], uint8_t len)
000000  b5f0              PUSH     {r4-r7,lr}
;;;40     {
000002  4603              MOV      r3,r0
000004  4614              MOV      r4,r2
;;;41         u32 offset;
;;;42         u32 min;
;;;43         uint8_t ret;
;;;44     
;;;45         for (uint8_t i = 0; i < len; i++)
000006  2000              MOVS     r0,#0
000008  e013              B        |L2.50|
                  |L2.10|
;;;46         {
;;;47     
;;;48             if(volt[i] < tar)
00000a  f8517020          LDR      r7,[r1,r0,LSL #2]
00000e  429f              CMP      r7,r3
000010  d203              BCS      |L2.26|
;;;49             {
;;;50                 offset = tar - volt[i];
000012  f8517020          LDR      r7,[r1,r0,LSL #2]
000016  1bda              SUBS     r2,r3,r7
000018  e002              B        |L2.32|
                  |L2.26|
;;;51             }
;;;52             else
;;;53             {
;;;54                 offset = volt[i] - tar;
00001a  f8517020          LDR      r7,[r1,r0,LSL #2]
00001e  1afa              SUBS     r2,r7,r3
                  |L2.32|
;;;55             }
;;;56     
;;;57             if(i == 0)
000020  b908              CBNZ     r0,|L2.38|
;;;58             {
;;;59                 min = offset;
000022  4615              MOV      r5,r2
;;;60                 ret = i;
000024  4606              MOV      r6,r0
                  |L2.38|
;;;61             }
;;;62     
;;;63             if(min >= offset)
000026  4295              CMP      r5,r2
000028  d301              BCC      |L2.46|
;;;64             {
;;;65                 min = offset;
00002a  4615              MOV      r5,r2
;;;66                 ret = i;
00002c  4606              MOV      r6,r0
                  |L2.46|
00002e  1c47              ADDS     r7,r0,#1              ;45
000030  b2f8              UXTB     r0,r7                 ;45
                  |L2.50|
000032  42a0              CMP      r0,r4                 ;45
000034  dbe9              BLT      |L2.10|
;;;67             }
;;;68         }
;;;69     
;;;70         return ret;
000036  4630              MOV      r0,r6
;;;71     }
000038  bdf0              POP      {r4-r7,pc}
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\berry_ft\\ft_common.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_ft_common_c_7e335078____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_ft_common_c_7e335078____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_ft_common_c_7e335078____REVSH|
#line 144
|__asm___11_ft_common_c_7e335078____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
