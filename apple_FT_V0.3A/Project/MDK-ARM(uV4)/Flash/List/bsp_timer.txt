; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\bsp_timer.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_timer.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\bsp_timer.crf ..\..\User\bsp_stm32f4xx\src\bsp_timer.c]
                          THUMB

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=1

                  SysTick_Handler PROC
;;;378    */
;;;379    void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;380    {
;;;381    	SysTick_ISR();
000002  f7fffffe          BL       SysTick_ISR
;;;382    }
000006  bd10              POP      {r4,pc}
;;;383    
                          ENDP


                          AREA ||i.SysTick_ISR||, CODE, READONLY, ALIGN=2

                  SysTick_ISR PROC
;;;85     extern void bsp_RunPer10ms(void);
;;;86     void SysTick_ISR(void)
000000  b510              PUSH     {r4,lr}
;;;87     {
;;;88     	static uint8_t s_count = 0;
;;;89      
;;;90         uint8_t i;
;;;91      
;;;92     	/* 每隔1ms进来1次 （仅用于 bsp_DelayMS） */
;;;93     	if (s_uiDelayCount > 0)
000002  481f              LDR      r0,|L2.128|
000004  6800              LDR      r0,[r0,#0]  ; s_uiDelayCount
000006  b140              CBZ      r0,|L2.26|
;;;94     	{
;;;95     		if (--s_uiDelayCount == 0)
000008  481d              LDR      r0,|L2.128|
00000a  6800              LDR      r0,[r0,#0]  ; s_uiDelayCount
00000c  1e40              SUBS     r0,r0,#1
00000e  491c              LDR      r1,|L2.128|
000010  6008              STR      r0,[r1,#0]  ; s_uiDelayCount
000012  b910              CBNZ     r0,|L2.26|
;;;96     		{
;;;97     			s_ucTimeOutFlag = 1;
000014  2001              MOVS     r0,#1
000016  491b              LDR      r1,|L2.132|
000018  7008              STRB     r0,[r1,#0]
                  |L2.26|
;;;98     		}
;;;99     	}
;;;100    
;;;101    	/* 每隔1ms，对软件定时器的计数器进行减一操作 */
;;;102    	for (i = 0; i < TMR_COUNT; i++)
00001a  2400              MOVS     r4,#0
00001c  e008              B        |L2.48|
                  |L2.30|
;;;103    	{
;;;104    		bsp_SoftTimerDec(&s_tTmr[i]);
00001e  eb040144          ADD      r1,r4,r4,LSL #1
000022  4a19              LDR      r2,|L2.136|
000024  eb020081          ADD      r0,r2,r1,LSL #2
000028  f7fffffe          BL       bsp_SoftTimerDec
00002c  1c60              ADDS     r0,r4,#1              ;102
00002e  b2c4              UXTB     r4,r0                 ;102
                  |L2.48|
000030  2c04              CMP      r4,#4                 ;102
000032  dbf4              BLT      |L2.30|
;;;105    	}
;;;106    
;;;107    	/* 全局运行时间每1ms增1 */
;;;108    	g_iRunTime++;
000034  4815              LDR      r0,|L2.140|
000036  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000038  1c40              ADDS     r0,r0,#1
00003a  4914              LDR      r1,|L2.140|
00003c  6008              STR      r0,[r1,#0]  ; g_iRunTime
;;;109        g64_run_time++;
00003e  4814              LDR      r0,|L2.144|
000040  6801              LDR      r1,[r0,#0]  ; g64_run_time
000042  6840              LDR      r0,[r0,#4]  ; g64_run_time
000044  1c49              ADDS     r1,r1,#1
000046  f1400000          ADC      r0,r0,#0
00004a  4a11              LDR      r2,|L2.144|
00004c  6011              STR      r1,[r2,#0]  ; g64_run_time
00004e  6050              STR      r0,[r2,#4]  ; g64_run_time
;;;110    	if (g_iRunTime == 0x7FFFFFFF)	/* 这个变量是 int32_t 类型，最大数为 0x7FFFFFFF */
000050  480e              LDR      r0,|L2.140|
000052  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000054  f06f4100          MVN      r1,#0x80000000
000058  4288              CMP      r0,r1
00005a  d102              BNE      |L2.98|
;;;111    	{
;;;112    		g_iRunTime = 0;
00005c  2000              MOVS     r0,#0
00005e  490b              LDR      r1,|L2.140|
000060  6008              STR      r0,[r1,#0]  ; g_iRunTime
                  |L2.98|
;;;113    	}
;;;114    
;;;115    	bsp_RunPer1ms();		/* 每隔1ms调用一次此函数，此函数在 bsp.c */
000062  f7fffffe          BL       bsp_RunPer1ms
;;;116    
;;;117    	if (++s_count >= 10)
000066  480b              LDR      r0,|L2.148|
000068  7800              LDRB     r0,[r0,#0]  ; s_count
00006a  1c40              ADDS     r0,r0,#1
00006c  b2c0              UXTB     r0,r0
00006e  4909              LDR      r1,|L2.148|
000070  7008              STRB     r0,[r1,#0]
000072  280a              CMP      r0,#0xa
000074  db03              BLT      |L2.126|
;;;118    	{
;;;119    		s_count = 0;
000076  2000              MOVS     r0,#0
000078  7008              STRB     r0,[r1,#0]
;;;120    
;;;121    		bsp_RunPer10ms();	/* 每隔10ms调用一次此函数，此函数在 bsp.c */
00007a  f7fffffe          BL       bsp_RunPer10ms
                  |L2.126|
;;;122    	}
;;;123    }
00007e  bd10              POP      {r4,pc}
;;;124    
                          ENDP

                  |L2.128|
                          DCD      s_uiDelayCount
                  |L2.132|
                          DCD      s_ucTimeOutFlag
                  |L2.136|
                          DCD      s_tTmr
                  |L2.140|
                          DCD      g_iRunTime
                  |L2.144|
                          DCD      g64_run_time
                  |L2.148|
                          DCD      s_count

                          AREA ||i.__set_PRIMASK||, CODE, READONLY, ALIGN=1

                  __set_PRIMASK PROC
;;;193     */
;;;194    __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
000000  f3808810          MSR      PRIMASK,r0
;;;195    {
;;;196      register uint32_t __regPriMask         __ASM("primask");
;;;197      __regPriMask = (priMask);
;;;198    }
000004  4770              BX       lr
;;;199    
                          ENDP


                          AREA ||i.bsp_CheckTimer||, CODE, READONLY, ALIGN=2

                  bsp_CheckTimer PROC
;;;331    */
;;;332    uint8_t bsp_CheckTimer(uint8_t _id)
000000  4601              MOV      r1,r0
;;;333    {
;;;334    	if (_id >= TMR_COUNT)
000002  2904              CMP      r1,#4
000004  db01              BLT      |L4.10|
;;;335    	{
;;;336    		return 0;
000006  2000              MOVS     r0,#0
                  |L4.8|
;;;337    	}
;;;338    
;;;339    	if (s_tTmr[_id].Flag == 1)
;;;340    	{
;;;341    		s_tTmr[_id].Flag = 0;
;;;342    		return 1;
;;;343    	}
;;;344    	else
;;;345    	{
;;;346    		return 0;
;;;347    	}
;;;348    }
000008  4770              BX       lr
                  |L4.10|
00000a  eb010041          ADD      r0,r1,r1,LSL #1       ;339
00000e  4a08              LDR      r2,|L4.48|
000010  eb020080          ADD      r0,r2,r0,LSL #2       ;339
000014  7840              LDRB     r0,[r0,#1]            ;339
000016  2801              CMP      r0,#1                 ;339
000018  d108              BNE      |L4.44|
00001a  2000              MOVS     r0,#0                 ;341
00001c  eb010241          ADD      r2,r1,r1,LSL #1       ;341
000020  4b03              LDR      r3,|L4.48|
000022  eb030282          ADD      r2,r3,r2,LSL #2       ;341
000026  7050              STRB     r0,[r2,#1]            ;341
000028  2001              MOVS     r0,#1                 ;342
00002a  e7ed              B        |L4.8|
                  |L4.44|
00002c  2000              MOVS     r0,#0                 ;346
00002e  e7eb              B        |L4.8|
;;;349    
                          ENDP

                  |L4.48|
                          DCD      s_tTmr

                          AREA ||i.bsp_DelayMS||, CODE, READONLY, ALIGN=2

                  bsp_DelayMS PROC
;;;158    */
;;;159    void bsp_DelayMS(uint32_t n)
000000  b510              PUSH     {r4,lr}
;;;160    {
000002  4604              MOV      r4,r0
;;;161    	if (n == 0)
000004  b904              CBNZ     r4,|L5.8|
                  |L5.6|
;;;162    	{
;;;163    		return;
;;;164    	}
;;;165    	else if (n == 1)
;;;166    	{
;;;167    		n = 2;
;;;168    	}
;;;169    
;;;170    	DISABLE_INT();  			/* 关中断 */
;;;171    
;;;172    	s_uiDelayCount = n;
;;;173    	s_ucTimeOutFlag = 0;
;;;174    
;;;175    	ENABLE_INT();  				/* 开中断 */
;;;176    
;;;177    	while (1)
;;;178    	{
;;;179    		bsp_Idle();				/* CPU空闲执行的操作， 见 bsp.c 和 bsp.h 文件 */
;;;180    
;;;181    		/*
;;;182    			等待延迟时间到
;;;183    			注意：编译器认为 s_ucTimeOutFlag = 0，所以可能优化错误，因此 s_ucTimeOutFlag 变量必须申明为 volatile
;;;184    		*/
;;;185    		if (s_ucTimeOutFlag == 1)
;;;186    		{
;;;187    			break;
;;;188    		}
;;;189    	}
;;;190    }
000006  bd10              POP      {r4,pc}
                  |L5.8|
000008  2c01              CMP      r4,#1                 ;165
00000a  d100              BNE      |L5.14|
00000c  2402              MOVS     r4,#2                 ;167
                  |L5.14|
00000e  2001              MOVS     r0,#1                 ;170
000010  f7fffffe          BL       __set_PRIMASK
000014  4809              LDR      r0,|L5.60|
000016  6004              STR      r4,[r0,#0]            ;172  ; s_uiDelayCount
000018  2000              MOVS     r0,#0                 ;173
00001a  4909              LDR      r1,|L5.64|
00001c  7008              STRB     r0,[r1,#0]            ;173
00001e  f7fffffe          BL       __set_PRIMASK
000022  e006              B        |L5.50|
                  |L5.36|
000024  f7fffffe          BL       bsp_Idle
000028  4805              LDR      r0,|L5.64|
00002a  7800              LDRB     r0,[r0,#0]            ;185  ; s_ucTimeOutFlag
00002c  2801              CMP      r0,#1                 ;185
00002e  d100              BNE      |L5.50|
000030  e000              B        |L5.52|
                  |L5.50|
000032  e7f7              B        |L5.36|
                  |L5.52|
000034  bf00              NOP                            ;187
000036  bf00              NOP      
000038  e7e5              B        |L5.6|
;;;191    
                          ENDP

00003a  0000              DCW      0x0000
                  |L5.60|
                          DCD      s_uiDelayCount
                  |L5.64|
                          DCD      s_ucTimeOutFlag

                          AREA ||i.bsp_DelayUS||, CODE, READONLY, ALIGN=2

                  bsp_DelayUS PROC
;;;199    */
;;;200    void bsp_DelayUS(uint32_t n)
000000  b5f0              PUSH     {r4-r7,lr}
;;;201    {
000002  4603              MOV      r3,r0
;;;202        uint32_t ticks;
;;;203        uint32_t told;
;;;204        uint32_t tnow;
;;;205        uint32_t tcnt = 0;
000004  2200              MOVS     r2,#0
;;;206        uint32_t reload;
;;;207           
;;;208    	reload = SysTick->LOAD;                
000006  f04f26e0          MOV      r6,#0xe000e000
00000a  6975              LDR      r5,[r6,#0x14]
;;;209        ticks = n * (SystemCoreClock / 1000000);	 /* 需要的节拍数 */  
00000c  4e0f              LDR      r6,|L6.76|
00000e  6836              LDR      r6,[r6,#0]  ; SystemCoreClock
000010  4f0f              LDR      r7,|L6.80|
000012  fbb6f6f7          UDIV     r6,r6,r7
000016  fb06f403          MUL      r4,r6,r3
;;;210        
;;;211        tcnt = 0;
00001a  bf00              NOP      
;;;212        told = SysTick->VAL;             /* 刚进入时的计数器值 */
00001c  f04f26e0          MOV      r6,#0xe000e000
000020  69b1              LDR      r1,[r6,#0x18]
;;;213    
;;;214        while (1)
000022  e010              B        |L6.70|
                  |L6.36|
;;;215        {
;;;216            tnow = SysTick->VAL;    
000024  f04f26e0          MOV      r6,#0xe000e000
000028  69b0              LDR      r0,[r6,#0x18]
;;;217            if (tnow != told)
00002a  4288              CMP      r0,r1
00002c  d00b              BEQ      |L6.70|
;;;218            {    
;;;219                /* SYSTICK是一个递减的计数器 */    
;;;220                if (tnow < told)
00002e  4288              CMP      r0,r1
000030  d202              BCS      |L6.56|
;;;221                {
;;;222                    tcnt += told - tnow;    
000032  1a0e              SUBS     r6,r1,r0
000034  4432              ADD      r2,r2,r6
000036  e002              B        |L6.62|
                  |L6.56|
;;;223                }
;;;224                /* 重新装载递减 */
;;;225                else
;;;226                {
;;;227                    tcnt += reload - tnow + told;    
000038  1a2e              SUBS     r6,r5,r0
00003a  440e              ADD      r6,r6,r1
00003c  4432              ADD      r2,r2,r6
                  |L6.62|
;;;228                }        
;;;229                told = tnow;
00003e  4601              MOV      r1,r0
;;;230    
;;;231                /* 时间超过/等于要延迟的时间,则退出 */
;;;232                if (tcnt >= ticks)
000040  42a2              CMP      r2,r4
000042  d300              BCC      |L6.70|
;;;233                {
;;;234                	break;
000044  e000              B        |L6.72|
                  |L6.70|
000046  e7ed              B        |L6.36|
                  |L6.72|
000048  bf00              NOP      
;;;235                }
;;;236            }  
;;;237        }
;;;238    } 
00004a  bdf0              POP      {r4-r7,pc}
;;;239    
                          ENDP

                  |L6.76|
                          DCD      SystemCoreClock
                  |L6.80|
                          DCD      0x000f4240

                          AREA ||i.bsp_GetRunTime||, CODE, READONLY, ALIGN=2

                  bsp_GetRunTime PROC
;;;357    */
;;;358    int32_t bsp_GetRunTime(void)
000000  b510              PUSH     {r4,lr}
;;;359    {
;;;360    	int32_t runtime;
;;;361    
;;;362    	DISABLE_INT();  	/* 关中断 */
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       __set_PRIMASK
;;;363    
;;;364    	runtime = g_iRunTime;	/* 这个变量在Systick中断中被改写，因此需要关中断进行保护 */
000008  4803              LDR      r0,|L7.24|
00000a  6804              LDR      r4,[r0,#0]  ; g_iRunTime
;;;365    
;;;366    	ENABLE_INT();  		/* 开中断 */
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       __set_PRIMASK
;;;367    
;;;368    	return runtime;
000012  4620              MOV      r0,r4
;;;369    }
000014  bd10              POP      {r4,pc}
;;;370    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      g_iRunTime

                          AREA ||i.bsp_InitTimer||, CODE, READONLY, ALIGN=2

                  bsp_InitTimer PROC
;;;47     */
;;;48     void bsp_InitTimer(void)
000000  b570              PUSH     {r4-r6,lr}
;;;49     {
;;;50     	uint8_t i;
;;;51     
;;;52     	/* 清零所有的软件定时器 */
;;;53     	for (i = 0; i < TMR_COUNT; i++)
000002  2000              MOVS     r0,#0
000004  e016              B        |L8.52|
                  |L8.6|
;;;54     	{
;;;55     		s_tTmr[i].Count = 0;
000006  2100              MOVS     r1,#0
000008  eb000240          ADD      r2,r0,r0,LSL #1
00000c  4b1e              LDR      r3,|L8.136|
00000e  eb030282          ADD      r2,r3,r2,LSL #2
000012  6051              STR      r1,[r2,#4]
;;;56     		s_tTmr[i].PreLoad = 0;
000014  eb000240          ADD      r2,r0,r0,LSL #1
000018  eb030282          ADD      r2,r3,r2,LSL #2
00001c  6091              STR      r1,[r2,#8]
;;;57     		s_tTmr[i].Flag = 0;
00001e  eb000240          ADD      r2,r0,r0,LSL #1
000022  eb030282          ADD      r2,r3,r2,LSL #2
000026  7051              STRB     r1,[r2,#1]
;;;58     		s_tTmr[i].Mode = TMR_ONCE_MODE;	/* 缺省是1次性工作模式 */
000028  eb000240          ADD      r2,r0,r0,LSL #1
00002c  f8031022          STRB     r1,[r3,r2,LSL #2]
000030  1c41              ADDS     r1,r0,#1              ;53
000032  b2c8              UXTB     r0,r1                 ;53
                  |L8.52|
000034  2804              CMP      r0,#4                 ;53
000036  dbe6              BLT      |L8.6|
;;;59     	}
;;;60     
;;;61     	/*
;;;62     		配置systic中断周期为1ms，并启动systick中断。
;;;63     
;;;64         	SystemCoreClock 是固件中定义的系统内核时钟，对于STM32F4XX,一般为 168MHz
;;;65     
;;;66         	SysTick_Config() 函数的形参表示内核时钟多少个周期后触发一次Systick定时中断.
;;;67     	    	-- SystemCoreClock / 1000  表示定时频率为 1000Hz， 也就是定时周期为  1ms
;;;68     	    	-- SystemCoreClock / 500   表示定时频率为 500Hz，  也就是定时周期为  2ms
;;;69     	    	-- SystemCoreClock / 2000  表示定时频率为 2000Hz， 也就是定时周期为  500us
;;;70     
;;;71         	对于常规的应用，我们一般取定时周期1ms。对于低速CPU或者低功耗应用，可以设置定时周期为 10ms
;;;72         */
;;;73     	SysTick_Config(SystemCoreClock / 1000);
000038  4914              LDR      r1,|L8.140|
00003a  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
00003c  f44f737a          MOV      r3,#0x3e8
000040  fbb1f2f3          UDIV     r2,r1,r3
000044  1e51              SUBS     r1,r2,#1
000046  f1b17f80          CMP      r1,#0x1000000
00004a  d300              BCC      |L8.78|
00004c  e01b              B        |L8.134|
                  |L8.78|
00004e  1e51              SUBS     r1,r2,#1
000050  f04f23e0          MOV      r3,#0xe000e000
000054  6159              STR      r1,[r3,#0x14]
000056  1759              ASRS     r1,r3,#29
000058  230f              MOVS     r3,#0xf
00005a  2900              CMP      r1,#0
00005c  da07              BGE      |L8.110|
00005e  071c              LSLS     r4,r3,#28
000060  0e26              LSRS     r6,r4,#24
000062  4c0b              LDR      r4,|L8.144|
000064  f001050f          AND      r5,r1,#0xf
000068  1f2d              SUBS     r5,r5,#4
00006a  5566              STRB     r6,[r4,r5]
00006c  e003              B        |L8.118|
                  |L8.110|
00006e  071c              LSLS     r4,r3,#28
000070  0e25              LSRS     r5,r4,#24
000072  4c08              LDR      r4,|L8.148|
000074  5465              STRB     r5,[r4,r1]
                  |L8.118|
000076  bf00              NOP      
000078  2100              MOVS     r1,#0
00007a  f04f23e0          MOV      r3,#0xe000e000
00007e  6199              STR      r1,[r3,#0x18]
000080  2107              MOVS     r1,#7
000082  6119              STR      r1,[r3,#0x10]
000084  bf00              NOP      
                  |L8.134|
;;;74     }
000086  bd70              POP      {r4-r6,pc}
;;;75     
                          ENDP

                  |L8.136|
                          DCD      s_tTmr
                  |L8.140|
                          DCD      SystemCoreClock
                  |L8.144|
                          DCD      0xe000ed18
                  |L8.148|
                          DCD      0xe000e400

                          AREA ||i.bsp_SoftTimerDec||, CODE, READONLY, ALIGN=1

                  bsp_SoftTimerDec PROC
;;;132    */
;;;133    static void bsp_SoftTimerDec(SOFT_TMR *_tmr)
000000  6841              LDR      r1,[r0,#4]
;;;134    {
;;;135    	if (_tmr->Count > 0)
000002  b151              CBZ      r1,|L9.26|
;;;136    	{
;;;137    		/* 如果定时器变量减到1则设置定时器到达标志 */
;;;138    		if (--_tmr->Count == 0)
000004  6841              LDR      r1,[r0,#4]
000006  1e49              SUBS     r1,r1,#1
000008  6041              STR      r1,[r0,#4]
00000a  b931              CBNZ     r1,|L9.26|
;;;139    		{
;;;140    			_tmr->Flag = 1;
00000c  2101              MOVS     r1,#1
00000e  7041              STRB     r1,[r0,#1]
;;;141    
;;;142    			/* 如果是自动模式，则自动重装计数器 */
;;;143    			if(_tmr->Mode == TMR_AUTO_MODE)
000010  7801              LDRB     r1,[r0,#0]
000012  2901              CMP      r1,#1
000014  d101              BNE      |L9.26|
;;;144    			{
;;;145    				_tmr->Count = _tmr->PreLoad;
000016  6881              LDR      r1,[r0,#8]
000018  6041              STR      r1,[r0,#4]
                  |L9.26|
;;;146    			}
;;;147    		}
;;;148    	}
;;;149    }
00001a  4770              BX       lr
;;;150    
                          ENDP


                          AREA ||i.bsp_StartAutoTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  bsp_StartAutoTimer PROC
;;;277    */
;;;278    void bsp_StartAutoTimer(uint8_t _id, uint32_t _period)
000000  b570              PUSH     {r4-r6,lr}
;;;279    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;280    	if (_id >= TMR_COUNT)
000006  2c04              CMP      r4,#4
000008  db06              BLT      |L10.24|
;;;281    	{
;;;282    		/* 打印出错的源代码文件名、函数名称 */
;;;283    		BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
00000a  4a12              LDR      r2,|L10.84|
00000c  a112              ADR      r1,|L10.88|
00000e  a01d              ADR      r0,|L10.132|
000010  f7fffffe          BL       __2printf
;;;284    		while(1); /* 参数异常，死机等待看门狗复位 */
000014  bf00              NOP      
                  |L10.22|
000016  e7fe              B        |L10.22|
                  |L10.24|
;;;285    	}
;;;286    
;;;287    	DISABLE_INT();  		/* 关中断 */
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       __set_PRIMASK
;;;288    
;;;289    	s_tTmr[_id].Count = _period;			/* 实时计数器初值 */
00001e  eb040044          ADD      r0,r4,r4,LSL #1
000022  4920              LDR      r1,|L10.164|
000024  eb010080          ADD      r0,r1,r0,LSL #2
000028  6045              STR      r5,[r0,#4]
;;;290    	s_tTmr[_id].PreLoad = _period;		/* 计数器自动重装值，仅自动模式起作用 */
00002a  eb040044          ADD      r0,r4,r4,LSL #1
00002e  eb010080          ADD      r0,r1,r0,LSL #2
000032  6085              STR      r5,[r0,#8]
;;;291    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
000034  2000              MOVS     r0,#0
000036  eb040144          ADD      r1,r4,r4,LSL #1
00003a  4a1a              LDR      r2,|L10.164|
00003c  eb020181          ADD      r1,r2,r1,LSL #2
000040  7048              STRB     r0,[r1,#1]
;;;292    	s_tTmr[_id].Mode = TMR_AUTO_MODE;	/* 自动工作模式 */
000042  2001              MOVS     r0,#1
000044  eb040144          ADD      r1,r4,r4,LSL #1
000048  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;293    
;;;294    	ENABLE_INT();  			/* 开中断 */
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       __set_PRIMASK
;;;295    }
000052  bd70              POP      {r4-r6,pc}
;;;296    
                          ENDP

                  |L10.84|
                          DCD      |symbol_number.41|
                  |L10.88|
000058  2e2e5c2e          DCB      "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_timer.c",0
00005c  2e5c5573
000060  65725c62
000064  73705f73
000068  746d3332
00006c  66347878
000070  5c737263
000074  5c627370
000078  5f74696d
00007c  65722e63
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L10.132|
000084  4572726f          DCB      "Error: file %s, function %s()\r\n",0
000088  723a2066
00008c  696c6520
000090  25732c20
000094  66756e63
000098  74696f6e
00009c  20257328
0000a0  290d0a00
                  |L10.164|
                          DCD      s_tTmr

                          AREA ||i.bsp_StartTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  bsp_StartTimer PROC
;;;249    */
;;;250    void bsp_StartTimer(uint8_t _id, uint32_t _period)
000000  b570              PUSH     {r4-r6,lr}
;;;251    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;252    	if (_id >= TMR_COUNT)
000006  2c04              CMP      r4,#4
000008  db06              BLT      |L11.24|
;;;253    	{
;;;254    		/* 打印出错的源代码文件名、函数名称 */
;;;255    		BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
00000a  4a11              LDR      r2,|L11.80|
00000c  a111              ADR      r1,|L11.84|
00000e  a01c              ADR      r0,|L11.128|
000010  f7fffffe          BL       __2printf
;;;256    		while(1); /* 参数异常，死机等待看门狗复位 */
000014  bf00              NOP      
                  |L11.22|
000016  e7fe              B        |L11.22|
                  |L11.24|
;;;257    	}
;;;258    
;;;259    	DISABLE_INT();  			/* 关中断 */
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       __set_PRIMASK
;;;260    
;;;261    	s_tTmr[_id].Count = _period;		/* 实时计数器初值 */
00001e  eb040044          ADD      r0,r4,r4,LSL #1
000022  491f              LDR      r1,|L11.160|
000024  eb010080          ADD      r0,r1,r0,LSL #2
000028  6045              STR      r5,[r0,#4]
;;;262    	s_tTmr[_id].PreLoad = _period;		/* 计数器自动重装值，仅自动模式起作用 */
00002a  eb040044          ADD      r0,r4,r4,LSL #1
00002e  eb010080          ADD      r0,r1,r0,LSL #2
000032  6085              STR      r5,[r0,#8]
;;;263    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
000034  2000              MOVS     r0,#0
000036  eb040144          ADD      r1,r4,r4,LSL #1
00003a  4a19              LDR      r2,|L11.160|
00003c  eb020181          ADD      r1,r2,r1,LSL #2
000040  7048              STRB     r0,[r1,#1]
;;;264    	s_tTmr[_id].Mode = TMR_ONCE_MODE;	/* 1次性工作模式 */
000042  eb040144          ADD      r1,r4,r4,LSL #1
000046  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;265    
;;;266    	ENABLE_INT();  				/* 开中断 */
00004a  f7fffffe          BL       __set_PRIMASK
;;;267    }
00004e  bd70              POP      {r4-r6,pc}
;;;268    
                          ENDP

                  |L11.80|
                          DCD      __FUNCTION__
                  |L11.84|
000054  2e2e5c2e          DCB      "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_timer.c",0
000058  2e5c5573
00005c  65725c62
000060  73705f73
000064  746d3332
000068  66347878
00006c  5c737263
000070  5c627370
000074  5f74696d
000078  65722e63
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L11.128|
000080  4572726f          DCB      "Error: file %s, function %s()\r\n",0
000084  723a2066
000088  696c6520
00008c  25732c20
000090  66756e63
000094  74696f6e
000098  20257328
00009c  290d0a00
                  |L11.160|
                          DCD      s_tTmr

                          AREA ||i.bsp_StopTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  bsp_StopTimer PROC
;;;304    */
;;;305    void bsp_StopTimer(uint8_t _id)
000000  b510              PUSH     {r4,lr}
;;;306    {
000002  4604              MOV      r4,r0
;;;307    	if (_id >= TMR_COUNT)
000004  2c04              CMP      r4,#4
000006  db06              BLT      |L12.22|
;;;308    	{
;;;309    		/* 打印出错的源代码文件名、函数名称 */
;;;310    		BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
000008  4a0e              LDR      r2,|L12.68|
00000a  a10f              ADR      r1,|L12.72|
00000c  a019              ADR      r0,|L12.116|
00000e  f7fffffe          BL       __2printf
;;;311    		while(1); /* 参数异常，死机等待看门狗复位 */
000012  bf00              NOP      
                  |L12.20|
000014  e7fe              B        |L12.20|
                  |L12.22|
;;;312    	}
;;;313    
;;;314    	DISABLE_INT();  	/* 关中断 */
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       __set_PRIMASK
;;;315    
;;;316    	s_tTmr[_id].Count = 0;				/* 实时计数器初值 */
00001c  2000              MOVS     r0,#0
00001e  eb040144          ADD      r1,r4,r4,LSL #1
000022  4a1c              LDR      r2,|L12.148|
000024  eb020181          ADD      r1,r2,r1,LSL #2
000028  6048              STR      r0,[r1,#4]
;;;317    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
00002a  eb040144          ADD      r1,r4,r4,LSL #1
00002e  eb020181          ADD      r1,r2,r1,LSL #2
000032  7048              STRB     r0,[r1,#1]
;;;318    	s_tTmr[_id].Mode = TMR_ONCE_MODE;	/* 自动工作模式 */
000034  eb040144          ADD      r1,r4,r4,LSL #1
000038  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;319    
;;;320    	ENABLE_INT();  		/* 开中断 */
00003c  f7fffffe          BL       __set_PRIMASK
;;;321    }
000040  bd10              POP      {r4,pc}
;;;322    
                          ENDP

000042  0000              DCW      0x0000
                  |L12.68|
                          DCD      |symbol_number.42|
                  |L12.72|
000048  2e2e5c2e          DCB      "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_timer.c",0
00004c  2e5c5573
000050  65725c62
000054  73705f73
000058  746d3332
00005c  66347878
000060  5c737263
000064  5c627370
000068  5f74696d
00006c  65722e63
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L12.116|
000074  4572726f          DCB      "Error: file %s, function %s()\r\n",0
000078  723a2066
00007c  696c6520
000080  25732c20
000084  66756e63
000088  74696f6e
00008c  20257328
000090  290d0a00
                  |L12.148|
                          DCD      s_tTmr

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_tTmr
                          %        48

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6273705f          DCB      0x62,0x73,0x70,0x5f
000004  53746172          DCB      0x53,0x74,0x61,0x72
000008  7454696d          DCB      0x74,0x54,0x69,0x6d
00000c  657200            DCB      0x65,0x72,0x00
                  |symbol_number.41|
00000f  62                DCB      0x62
000010  73705f53          DCB      0x73,0x70,0x5f,0x53
000014  74617274          DCB      0x74,0x61,0x72,0x74
000018  4175746f          DCB      0x41,0x75,0x74,0x6f
00001c  54696d65          DCB      0x54,0x69,0x6d,0x65
000020  7200              DCB      0x72,0x00
                  |symbol_number.42|
000022  6273              DCB      0x62,0x73
000024  705f5374          DCB      0x70,0x5f,0x53,0x74
000028  6f705469          DCB      0x6f,0x70,0x54,0x69
00002c  6d657200          DCB      0x6d,0x65,0x72,0x00

                          AREA ||.data||, DATA, ALIGN=3

                  s_uiDelayCount
                          DCD      0x00000000
                  s_ucTimeOutFlag
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  g_iRunTime
                          DCD      0x00000000
                          DCD      0x00000000
                  g64_run_time
000010  00000000          DCQ      0x0000000000000000
000014  00000000
                  s_count
000018  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_bsp_timer_c_95bb07ef____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____REVSH|
#line 144
|__asm___11_bsp_timer_c_95bb07ef____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
