; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\bsp_led.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_led.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\bsp_led.crf ..\..\User\bsp_stm32f4xx\src\bsp_led.c]
                          THUMB

                          AREA ||i.bsp_InitLed||, CODE, READONLY, ALIGN=2

                  bsp_InitLed PROC
;;;84     */
;;;85     void bsp_InitLed(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;86     {
;;;87     	GPIO_InitTypeDef GPIO_InitStructure;
;;;88     
;;;89     	/* 打开GPIO时钟 */
;;;90     	RCC_AHB1PeriphClockCmd(RCC_ALL_LED, ENABLE);
000002  2101              MOVS     r1,#1
000004  201a              MOVS     r0,#0x1a
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;91     
;;;92     	/*
;;;93     		配置所有的LED指示灯GPIO为推挽输出模式
;;;94     		由于将GPIO设置为输出时，GPIO输出寄存器的值缺省是0，因此会驱动LED点亮.
;;;95     		这是我不希望的，因此在改变GPIO为输出前，先关闭LED指示灯
;;;96     	*/
;;;97     	bsp_LedOff(1);
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       bsp_LedOff
;;;98     	bsp_LedOff(2);
000010  2002              MOVS     r0,#2
000012  f7fffffe          BL       bsp_LedOff
;;;99     	bsp_LedOff(3);
000016  2003              MOVS     r0,#3
000018  f7fffffe          BL       bsp_LedOff
;;;100    	bsp_LedOff(4);
00001c  2004              MOVS     r0,#4
00001e  f7fffffe          BL       bsp_LedOff
;;;101    
;;;102    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;		/* 设为输出口 */
000022  2001              MOVS     r0,#1
000024  f88d0004          STRB     r0,[sp,#4]
;;;103    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		/* 设为推挽模式 */
000028  2000              MOVS     r0,#0
00002a  f88d0006          STRB     r0,[sp,#6]
;;;104    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 上下拉电阻不使能 */
00002e  f88d0007          STRB     r0,[sp,#7]
;;;105    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	/* IO口最大速度 */
000032  2003              MOVS     r0,#3
000034  f88d0005          STRB     r0,[sp,#5]
;;;106    
;;;107    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED1;
000038  2001              MOVS     r0,#1
00003a  9000              STR      r0,[sp,#0]
;;;108    	GPIO_Init(GPIO_PORT_LED1, &GPIO_InitStructure);
00003c  4669              MOV      r1,sp
00003e  480b              LDR      r0,|L1.108|
000040  f7fffffe          BL       GPIO_Init
;;;109    
;;;110    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED2;
000044  2002              MOVS     r0,#2
000046  9000              STR      r0,[sp,#0]
;;;111    	GPIO_Init(GPIO_PORT_LED2, &GPIO_InitStructure);
000048  4669              MOV      r1,sp
00004a  4808              LDR      r0,|L1.108|
00004c  f7fffffe          BL       GPIO_Init
;;;112    
;;;113    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED3;
000050  2004              MOVS     r0,#4
000052  9000              STR      r0,[sp,#0]
;;;114    	GPIO_Init(GPIO_PORT_LED3, &GPIO_InitStructure);
000054  4669              MOV      r1,sp
000056  4806              LDR      r0,|L1.112|
000058  f7fffffe          BL       GPIO_Init
;;;115    
;;;116    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED4;
00005c  f44f6000          MOV      r0,#0x800
000060  9000              STR      r0,[sp,#0]
;;;117    	GPIO_Init(GPIO_PORT_LED4, &GPIO_InitStructure);
000062  4669              MOV      r1,sp
000064  4803              LDR      r0,|L1.116|
000066  f7fffffe          BL       GPIO_Init
;;;118    }
00006a  bd1c              POP      {r2-r4,pc}
;;;119    
                          ENDP

                  |L1.108|
                          DCD      0x40020c00
                  |L1.112|
                          DCD      0x40020400
                  |L1.116|
                          DCD      0x40021000

                          AREA ||i.bsp_IsLedOn||, CODE, READONLY, ALIGN=2

                  bsp_IsLedOn PROC
;;;215    */
;;;216    uint8_t bsp_IsLedOn(uint8_t _no)
000000  4601              MOV      r1,r0
;;;217    {
;;;218    	if (_no == 1)
000002  2901              CMP      r1,#1
000004  d108              BNE      |L2.24|
;;;219    	{
;;;220    		if ((GPIO_PORT_LED1->ODR & GPIO_PIN_LED1) == 0)
000006  4816              LDR      r0,|L2.96|
000008  6800              LDR      r0,[r0,#0]
00000a  f0000001          AND      r0,r0,#1
00000e  b908              CBNZ     r0,|L2.20|
;;;221    		{
;;;222    			return 1;
000010  2001              MOVS     r0,#1
                  |L2.18|
;;;223    		}
;;;224    		return 0;
;;;225    	}
;;;226    	else if (_no == 2)
;;;227    	{
;;;228    		if ((GPIO_PORT_LED2->ODR & GPIO_PIN_LED2) == 0)
;;;229    		{
;;;230    			return 1;
;;;231    		}
;;;232    		return 0;
;;;233    	}
;;;234    	else if (_no == 3)
;;;235    	{
;;;236    		if ((GPIO_PORT_LED3->ODR & GPIO_PIN_LED3) == 0)
;;;237    		{
;;;238    			return 1;
;;;239    		}
;;;240    		return 0;
;;;241    	}
;;;242    	else if (_no == 4)
;;;243    	{
;;;244    		if ((GPIO_PORT_LED4->ODR & GPIO_PIN_LED4) == 0)
;;;245    		{
;;;246    			return 1;
;;;247    		}
;;;248    		return 0;
;;;249    	}
;;;250    
;;;251    	return 0;
;;;252    }
000012  4770              BX       lr
                  |L2.20|
000014  2000              MOVS     r0,#0                 ;224
000016  e7fc              B        |L2.18|
                  |L2.24|
000018  2902              CMP      r1,#2                 ;226
00001a  d108              BNE      |L2.46|
00001c  4810              LDR      r0,|L2.96|
00001e  6800              LDR      r0,[r0,#0]            ;228
000020  f0000002          AND      r0,r0,#2              ;228
000024  b908              CBNZ     r0,|L2.42|
000026  2001              MOVS     r0,#1                 ;230
000028  e7f3              B        |L2.18|
                  |L2.42|
00002a  2000              MOVS     r0,#0                 ;232
00002c  e7f1              B        |L2.18|
                  |L2.46|
00002e  2903              CMP      r1,#3                 ;234
000030  d108              BNE      |L2.68|
000032  480c              LDR      r0,|L2.100|
000034  6800              LDR      r0,[r0,#0]            ;236
000036  f0000004          AND      r0,r0,#4              ;236
00003a  b908              CBNZ     r0,|L2.64|
00003c  2001              MOVS     r0,#1                 ;238
00003e  e7e8              B        |L2.18|
                  |L2.64|
000040  2000              MOVS     r0,#0                 ;240
000042  e7e6              B        |L2.18|
                  |L2.68|
000044  2904              CMP      r1,#4                 ;242
000046  d108              BNE      |L2.90|
000048  4807              LDR      r0,|L2.104|
00004a  6940              LDR      r0,[r0,#0x14]         ;244
00004c  f4006000          AND      r0,r0,#0x800          ;244
000050  b908              CBNZ     r0,|L2.86|
000052  2001              MOVS     r0,#1                 ;246
000054  e7dd              B        |L2.18|
                  |L2.86|
000056  2000              MOVS     r0,#0                 ;248
000058  e7db              B        |L2.18|
                  |L2.90|
00005a  2000              MOVS     r0,#0                 ;251
00005c  e7d9              B        |L2.18|
;;;253    
                          ENDP

00005e  0000              DCW      0x0000
                  |L2.96|
                          DCD      0x40020c14
                  |L2.100|
                          DCD      0x40020414
                  |L2.104|
                          DCD      0x40021000

                          AREA ||i.bsp_LedOff||, CODE, READONLY, ALIGN=2

                  bsp_LedOff PROC
;;;157    */
;;;158    void bsp_LedOff(uint8_t _no)
000000  1e41              SUBS     r1,r0,#1
;;;159    {
;;;160    	_no--;
000002  b2c8              UXTB     r0,r1
;;;161    
;;;162    	if (_no == 0)
000004  b918              CBNZ     r0,|L3.14|
;;;163    	{
;;;164    		GPIO_PORT_LED1->BSRRL = GPIO_PIN_LED1;
000006  2101              MOVS     r1,#1
000008  4a0a              LDR      r2,|L3.52|
00000a  8011              STRH     r1,[r2,#0]
00000c  e011              B        |L3.50|
                  |L3.14|
;;;165    	}
;;;166    	else if (_no == 1)
00000e  2801              CMP      r0,#1
000010  d103              BNE      |L3.26|
;;;167    	{
;;;168    		GPIO_PORT_LED2->BSRRL = GPIO_PIN_LED2;
000012  2102              MOVS     r1,#2
000014  4a07              LDR      r2,|L3.52|
000016  8011              STRH     r1,[r2,#0]
000018  e00b              B        |L3.50|
                  |L3.26|
;;;169    	}
;;;170    	else if (_no == 2)
00001a  2802              CMP      r0,#2
00001c  d103              BNE      |L3.38|
;;;171    	{
;;;172    		GPIO_PORT_LED3->BSRRL = GPIO_PIN_LED3;
00001e  2104              MOVS     r1,#4
000020  4a05              LDR      r2,|L3.56|
000022  8011              STRH     r1,[r2,#0]
000024  e005              B        |L3.50|
                  |L3.38|
;;;173    	}
;;;174    	else if (_no == 3)
000026  2803              CMP      r0,#3
000028  d103              BNE      |L3.50|
;;;175    	{
;;;176    		GPIO_PORT_LED4->BSRRL = GPIO_PIN_LED4;
00002a  f44f6100          MOV      r1,#0x800
00002e  4a03              LDR      r2,|L3.60|
000030  8311              STRH     r1,[r2,#0x18]
                  |L3.50|
;;;177    	}
;;;178    }
000032  4770              BX       lr
;;;179    
                          ENDP

                  |L3.52|
                          DCD      0x40020c18
                  |L3.56|
                          DCD      0x40020418
                  |L3.60|
                          DCD      0x40021000

                          AREA ||i.bsp_LedOn||, CODE, READONLY, ALIGN=2

                  bsp_LedOn PROC
;;;127    */
;;;128    void bsp_LedOn(uint8_t _no)
000000  1e41              SUBS     r1,r0,#1
;;;129    {
;;;130    	_no--;
000002  b2c8              UXTB     r0,r1
;;;131    
;;;132    	if (_no == 0)
000004  b918              CBNZ     r0,|L4.14|
;;;133    	{
;;;134    		GPIO_PORT_LED1->BSRRH = GPIO_PIN_LED1;
000006  2101              MOVS     r1,#1
000008  4a0a              LDR      r2,|L4.52|
00000a  8011              STRH     r1,[r2,#0]
00000c  e011              B        |L4.50|
                  |L4.14|
;;;135    	}
;;;136    	else if (_no == 1)
00000e  2801              CMP      r0,#1
000010  d103              BNE      |L4.26|
;;;137    	{
;;;138    		GPIO_PORT_LED2->BSRRH = GPIO_PIN_LED2;
000012  2102              MOVS     r1,#2
000014  4a07              LDR      r2,|L4.52|
000016  8011              STRH     r1,[r2,#0]
000018  e00b              B        |L4.50|
                  |L4.26|
;;;139    	}
;;;140    	else if (_no == 2)
00001a  2802              CMP      r0,#2
00001c  d103              BNE      |L4.38|
;;;141    	{
;;;142    		GPIO_PORT_LED3->BSRRH = GPIO_PIN_LED3;
00001e  2104              MOVS     r1,#4
000020  4a05              LDR      r2,|L4.56|
000022  8011              STRH     r1,[r2,#0]
000024  e005              B        |L4.50|
                  |L4.38|
;;;143    	}
;;;144    	else if (_no == 3)
000026  2803              CMP      r0,#3
000028  d103              BNE      |L4.50|
;;;145    	{
;;;146    		GPIO_PORT_LED4->BSRRH = GPIO_PIN_LED4;
00002a  f44f6100          MOV      r1,#0x800
00002e  4a03              LDR      r2,|L4.60|
000030  8351              STRH     r1,[r2,#0x1a]
                  |L4.50|
;;;147    	}
;;;148    }
000032  4770              BX       lr
;;;149    
                          ENDP

                  |L4.52|
                          DCD      0x40020c1a
                  |L4.56|
                          DCD      0x4002041a
                  |L4.60|
                          DCD      0x40021000

                          AREA ||i.bsp_LedToggle||, CODE, READONLY, ALIGN=2

                  bsp_LedToggle PROC
;;;187    */
;;;188    void bsp_LedToggle(uint8_t _no)
000000  2801              CMP      r0,#1
;;;189    {
;;;190    	if (_no == 1)
000002  d106              BNE      |L5.18|
;;;191    	{
;;;192    		GPIO_PORT_LED1->ODR ^= GPIO_PIN_LED1;
000004  4910              LDR      r1,|L5.72|
000006  6809              LDR      r1,[r1,#0]
000008  f0810101          EOR      r1,r1,#1
00000c  4a0e              LDR      r2,|L5.72|
00000e  6011              STR      r1,[r2,#0]
000010  e019              B        |L5.70|
                  |L5.18|
;;;193    	}
;;;194    	else if (_no == 2)
000012  2802              CMP      r0,#2
000014  d106              BNE      |L5.36|
;;;195    	{
;;;196    		GPIO_PORT_LED2->ODR ^= GPIO_PIN_LED2;
000016  490c              LDR      r1,|L5.72|
000018  6809              LDR      r1,[r1,#0]
00001a  f0810102          EOR      r1,r1,#2
00001e  4a0a              LDR      r2,|L5.72|
000020  6011              STR      r1,[r2,#0]
000022  e010              B        |L5.70|
                  |L5.36|
;;;197    	}
;;;198    	else if (_no == 3)
000024  2803              CMP      r0,#3
000026  d106              BNE      |L5.54|
;;;199    	{
;;;200    		GPIO_PORT_LED3->ODR ^= GPIO_PIN_LED3;
000028  4908              LDR      r1,|L5.76|
00002a  6809              LDR      r1,[r1,#0]
00002c  f0810104          EOR      r1,r1,#4
000030  4a06              LDR      r2,|L5.76|
000032  6011              STR      r1,[r2,#0]
000034  e007              B        |L5.70|
                  |L5.54|
;;;201    	}
;;;202    	else if (_no == 4)
000036  2804              CMP      r0,#4
000038  d105              BNE      |L5.70|
;;;203    	{
;;;204    		GPIO_PORT_LED4->ODR ^= GPIO_PIN_LED4;
00003a  4905              LDR      r1,|L5.80|
00003c  6949              LDR      r1,[r1,#0x14]
00003e  f4816100          EOR      r1,r1,#0x800
000042  4a03              LDR      r2,|L5.80|
000044  6151              STR      r1,[r2,#0x14]
                  |L5.70|
;;;205    	}
;;;206    }
000046  4770              BX       lr
;;;207    
                          ENDP

                  |L5.72|
                          DCD      0x40020c14
                  |L5.76|
                          DCD      0x40020414
                  |L5.80|
                          DCD      0x40021000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_led.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_led_c_ba23b041____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_led_c_ba23b041____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_led_c_ba23b041____REVSH|
#line 144
|__asm___9_bsp_led_c_ba23b041____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
