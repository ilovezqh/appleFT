; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\asu_ram.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\asu_ram.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\BERRY_TWI -I..\..\User\berry_ft -I..\..\User\ft_support -I..\..\User\berry_test -I..\..\User\factory_test -I..\..\User\emenu -I..\..\User\kiwi_ft -I..\..\User\kiwi_ft\spv40 -I..\..\User\kiwi_ft\spv40\peripheral -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\kiwi_ft -I..\..\User\MultiButton-1.1.0 -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.16.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\asu_ram.crf ..\..\User\kiwi_ft\asu_ram.c]
                          THUMB

                          AREA ||i.asu_ram_pattern_state||, CODE, READONLY, ALIGN=2

                  asu_ram_pattern_state PROC
;;;42     //ram 上运行程序， 测试刘俭demo ok  本函数使用的局部变量占用较多，请修改启动文件，保证堆栈空间够用
;;;43     fsm_rt_t  asu_ram_pattern_state(void)
000000  b510              PUSH     {r4,lr}
;;;44     {
;;;45     //	DIR         DirInf;
;;;46         static enum
;;;47         {
;;;48             START = 0,
;;;49             RAM_CODE_SEND,
;;;50             WAIT_SPL_RUN,
;;;51             
;;;52         }s_tState = START;
;;;53     	static fsm_rt_t ret;
;;;54      
;;;55     //    uint32_t row_cnt=0;
;;;56     //    char path[32];
;;;57     //    uint8_t rbuf[80];
;;;58     //    uint32_t data = 0;  
;;;59     //    uint32_t test_data[8]={0};
;;;60        // int32_t err;
;;;61         timer_creat();
;;;62         
;;;63         switch(s_tState)
000002  482b              LDR      r0,|L1.176|
000004  7800              LDRB     r0,[r0,#0]  ; s_tState
000006  b120              CBZ      r0,|L1.18|
000008  2801              CMP      r0,#1
00000a  d028              BEQ      |L1.94|
00000c  2802              CMP      r0,#2
00000e  d145              BNE      |L1.156|
000010  e036              B        |L1.128|
                  |L1.18|
;;;64         {
;;;65         case START:
;;;66             if(!is_test_item(run_kiwi_pattern_item)) return fsm_rt_cpl;
000012  2004              MOVS     r0,#4
000014  f7fffffe          BL       is_test_item
000018  b908              CBNZ     r0,|L1.30|
00001a  2000              MOVS     r0,#0
                  |L1.28|
;;;67             if(is_pattern_file_fail) 
;;;68             {
;;;69                 logging("Don't Find File:%s\r\n",FT_RAM_BIN);
;;;70                 return fsm_rt_err_no_bin;
;;;71             }
;;;72             
;;;73     //        ret = asu_write_word(GPIO_PRSTN,  0x0);
;;;74     //        if(ret != fsm_rt_cpl) return fsm_rt_err_bist_npu_ram;
;;;75     //        ret = asu_write_word(GPIO_PTEST,  0x0);
;;;76     //        if(ret != fsm_rt_cpl) return fsm_rt_err_bist_npu_ram;
;;;77             ret = asu_write_word(DVDD_GLOBAL0,  (KIWI_EXT_CLK_PIN <<16)|KIWI_UART_DIV); // 高2byte设置ext_clk的gpio，低2byte设置uart_div;
;;;78             if(ret != fsm_rt_cpl) return fsm_rt_err_bist_npu_ram;
;;;79             hp_osc_init();
;;;80             s_tState++;
;;;81             //break;
;;;82             
;;;83         case RAM_CODE_SEND:
;;;84             {
;;;85                 ret = ram_code_send();
;;;86                 if(ret != fsm_rt_cpl)
;;;87                 {
;;;88                     goto fail;
;;;89                 }
;;;90                 s_tState = WAIT_SPL_RUN;
;;;91                 timer_start(100);
;;;92             }
;;;93             break;
;;;94         case WAIT_SPL_RUN:
;;;95             if(is_time_up())
;;;96             {
;;;97                 s_tState = START;
;;;98                 return fsm_rt_cpl;
;;;99             }
;;;100            break;
;;;101        }
;;;102        return fsm_rt_on_going;
;;;103        
;;;104        fail:
;;;105        s_tState = START;
;;;106        return ret;
;;;107    }
00001c  bd10              POP      {r4,pc}
                  |L1.30|
00001e  4825              LDR      r0,|L1.180|
000020  7800              LDRB     r0,[r0,#0]            ;67  ; is_pattern_file_fail
000022  b140              CBZ      r0,|L1.54|
000024  a224              ADR      r2,|L1.184|
000026  482e              LDR      r0,|L1.224|
000028  6801              LDR      r1,[r0,#0]            ;69  ; g_iRunTime
00002a  a02e              ADR      r0,|L1.228|
00002c  f7fffffe          BL       logger_buffer_write
000030  f06f0005          MVN      r0,#5                 ;70
000034  e7f2              B        |L1.28|
                  |L1.54|
000036  4932              LDR      r1,|L1.256|
000038  4832              LDR      r0,|L1.260|
00003a  f7fffffe          BL       asu_write_word
00003e  4932              LDR      r1,|L1.264|
000040  7008              STRB     r0,[r1,#0]            ;77
000042  4608              MOV      r0,r1                 ;78
000044  7800              LDRB     r0,[r0,#0]            ;78  ; ret
000046  b110              CBZ      r0,|L1.78|
000048  f06f001b          MVN      r0,#0x1b              ;78
00004c  e7e6              B        |L1.28|
                  |L1.78|
00004e  f7fffffe          BL       hp_osc_init
000052  4817              LDR      r0,|L1.176|
000054  7800              LDRB     r0,[r0,#0]            ;80  ; s_tState
000056  1c40              ADDS     r0,r0,#1              ;80
000058  4915              LDR      r1,|L1.176|
00005a  7008              STRB     r0,[r1,#0]            ;80
00005c  bf00              NOP                            ;83
                  |L1.94|
00005e  f7fffffe          BL       ram_code_send
000062  4929              LDR      r1,|L1.264|
000064  7008              STRB     r0,[r1,#0]            ;85
000066  4608              MOV      r0,r1                 ;86
000068  7800              LDRB     r0,[r0,#0]            ;86  ; ret
00006a  b100              CBZ      r0,|L1.110|
00006c  e019              B        |L1.162|
                  |L1.110|
00006e  2002              MOVS     r0,#2                 ;90
000070  490f              LDR      r1,|L1.176|
000072  7008              STRB     r0,[r1,#0]            ;90
000074  481a              LDR      r0,|L1.224|
000076  6800              LDR      r0,[r0,#0]            ;91  ; g_iRunTime
000078  3064              ADDS     r0,r0,#0x64           ;91
00007a  4924              LDR      r1,|L1.268|
00007c  6008              STR      r0,[r1,#0]            ;91  ; timer
00007e  e00d              B        |L1.156|
                  |L1.128|
000080  4817              LDR      r0,|L1.224|
000082  6800              LDR      r0,[r0,#0]            ;95  ; g_iRunTime
000084  4921              LDR      r1,|L1.268|
000086  6809              LDR      r1,[r1,#0]            ;95  ; timer
000088  1a40              SUBS     r0,r0,r1              ;95
00008a  f06f4100          MVN      r1,#0x80000000        ;95
00008e  4288              CMP      r0,r1                 ;95
000090  d203              BCS      |L1.154|
000092  2000              MOVS     r0,#0                 ;97
000094  4906              LDR      r1,|L1.176|
000096  7008              STRB     r0,[r1,#0]            ;97
000098  e7c0              B        |L1.28|
                  |L1.154|
00009a  bf00              NOP                            ;100
                  |L1.156|
00009c  bf00              NOP                            ;93
00009e  2001              MOVS     r0,#1                 ;102
0000a0  e7bc              B        |L1.28|
                  |L1.162|
0000a2  2000              MOVS     r0,#0                 ;105
0000a4  4902              LDR      r1,|L1.176|
0000a6  7008              STRB     r0,[r1,#0]            ;105
0000a8  4817              LDR      r0,|L1.264|
0000aa  f9900000          LDRSB    r0,[r0,#0]            ;106  ; ret
0000ae  e7b5              B        |L1.28|
;;;108    
                          ENDP

                  |L1.176|
                          DCD      s_tState
                  |L1.180|
                          DCD      is_pattern_file_fail
                  |L1.184|
0000b8  66745f70          DCB      "ft_pattern/kiwi_ft_uart_spl_v0.2.bin",0
0000bc  61747465
0000c0  726e2f6b
0000c4  6977695f
0000c8  66745f75
0000cc  6172745f
0000d0  73706c5f
0000d4  76302e32
0000d8  2e62696e
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
                  |L1.224|
                          DCD      g_iRunTime
                  |L1.228|
0000e4  5b253864          DCB      "[%8d]Don't Find File:%s\r\n",0
0000e8  5d446f6e
0000ec  27742046
0000f0  696e6420
0000f4  46696c65
0000f8  3a25730d
0000fc  0a00    
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L1.256|
                          DCD      0x000f0051
                  |L1.260|
                          DCD      0x20008000
                  |L1.264|
                          DCD      ||ret||
                  |L1.268|
                          DCD      timer

                          AREA ||i.pattern_file_open||, CODE, READONLY, ALIGN=2

                  pattern_file_open PROC
;;;20     
;;;21     int32_t pattern_file_open(void)
000000  b510              PUSH     {r4,lr}
;;;22     {
;;;23         FRESULT     result;
;;;24         
;;;25         result = f_open(&pattern_file, FT_RAM_BIN, FA_READ);
000002  2201              MOVS     r2,#1
000004  a10a              ADR      r1,|L2.48|
000006  4814              LDR      r0,|L2.88|
000008  f7fffffe          BL       f_open
00000c  4604              MOV      r4,r0
;;;26         if (result !=  FR_OK)
00000e  b14c              CBZ      r4,|L2.36|
;;;27     	{
;;;28             is_pattern_file_fail = 1;
000010  2001              MOVS     r0,#1
000012  4912              LDR      r1,|L2.92|
000014  7008              STRB     r0,[r1,#0]
;;;29     		LCD_SHOW_NG("Don't Find File:%s\r\n",FT_RAM_BIN);
000016  a206              ADR      r2,|L2.48|
000018  a111              ADR      r1,|L2.96|
00001a  f7fffffe          BL       display_show_log
;;;30             return -1;
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L2.34|
;;;31     		//
;;;32     	}
;;;33         is_pattern_file_fail = 0;
;;;34         return 0;
;;;35     }
000022  bd10              POP      {r4,pc}
                  |L2.36|
000024  2000              MOVS     r0,#0                 ;33
000026  490d              LDR      r1,|L2.92|
000028  7008              STRB     r0,[r1,#0]            ;33
00002a  bf00              NOP                            ;34
00002c  e7f9              B        |L2.34|
;;;36     #define DVDD_GLOBAL0                    0x20008000
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
000030  66745f70          DCB      "ft_pattern/kiwi_ft_uart_spl_v0.2.bin",0
000034  61747465
000038  726e2f6b
00003c  6977695f
000040  66745f75
000044  6172745f
000048  73706c5f
00004c  76302e32
000050  2e62696e
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
                  |L2.88|
                          DCD      pattern_file
                  |L2.92|
                          DCD      is_pattern_file_fail
                  |L2.96|
000060  446f6e27          DCB      "Don't Find File:%s\r\n",0
000064  74204669
000068  6e642046
00006c  696c653a
000070  25730d0a
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0

                          AREA ||i.ram_code_send||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  ram_code_send PROC
;;;110    
;;;111    static fsm_rt_t ram_code_send(void)
000000  b538              PUSH     {r3-r5,lr}
;;;112    {
;;;113        uint32_t    bw;
;;;114        fsm_rt_t ret;
;;;115        
;;;116        debug("bin size:%d\r\n",(uint32_t)pattern_file.fsize);
000002  4819              LDR      r0,|L3.104|
000004  68c1              LDR      r1,[r0,#0xc]  ; pattern_file
000006  a019              ADR      r0,|L3.108|
000008  f7fffffe          BL       __2printf
;;;117        f_lseek(&pattern_file, 0);
00000c  2100              MOVS     r1,#0
00000e  4816              LDR      r0,|L3.104|
000010  f7fffffe          BL       f_lseek
;;;118    
;;;119        spl_send_head(0xc0,0x40001000,pattern_file.fsize);
000014  4814              LDR      r0,|L3.104|
000016  4919              LDR      r1,|L3.124|
000018  68c2              LDR      r2,[r0,#0xc]  ; pattern_file
00001a  20c0              MOVS     r0,#0xc0
00001c  f7fffffe          BL       spl_send_head
;;;120    	/* 读取文件: */
;;;121    	while( f_read(&pattern_file, &msg_ack.content_byte, 512, &bw) == FR_OK && bw >0)
000020  e003              B        |L3.42|
                  |L3.34|
;;;122        {
;;;123            spl_send_body(bw, msg_ack.content_byte);
000022  4917              LDR      r1,|L3.128|
000024  9800              LDR      r0,[sp,#0]
000026  f7fffffe          BL       spl_send_body
                  |L3.42|
00002a  466b              MOV      r3,sp                 ;121
00002c  f44f7200          MOV      r2,#0x200             ;121
000030  4913              LDR      r1,|L3.128|
000032  480d              LDR      r0,|L3.104|
000034  f7fffffe          BL       f_read
000038  b910              CBNZ     r0,|L3.64|
00003a  9800              LDR      r0,[sp,#0]            ;121
00003c  2800              CMP      r0,#0                 ;121
00003e  d1f0              BNE      |L3.34|
                  |L3.64|
;;;124            
;;;125            //asu_write_bytes(row_cnt*512,  rbuf,   512);                           /* 将cpft_ram_hp_offset.bin中的内容搬运到kiwi RAM区 */
;;;126            #if 0
;;;127                                                                      /* 512个数一组计数 */ 
;;;128            for(uint32_t i=0; i<bw; i++)
;;;129            {
;;;130                if(i % 16 == 0)
;;;131                {
;;;132                    debug("\r\n");
;;;133                    debug("%08xh:",i+row_cnt);
;;;134                }
;;;135                debug(" %02x ",msg_ack.content_byte[i]);
;;;136            }
;;;137            row_cnt += bw;
;;;138            //delay_ms(100);
;;;139            #endif
;;;140        }
;;;141        spl_send_tail();
000040  f7fffffe          BL       spl_send_tail
;;;142        
;;;143     
;;;144        do
000044  bf00              NOP      
                  |L3.70|
;;;145        {
;;;146            ret = kiwi_ack_paser();
000046  f7fffffe          BL       kiwi_ack_paser
00004a  4604              MOV      r4,r0
;;;147        }while(ret == fsm_rt_on_going);
00004c  2c01              CMP      r4,#1
00004e  d0fa              BEQ      |L3.70|
;;;148        
;;;149       
;;;150        if(ret == fsm_rt_cpl)
000050  b944              CBNZ     r4,|L3.100|
;;;151        {
;;;152    //        comClearTxFifo(COM2);
;;;153    //        comClearRxFifo(COM2);
;;;154            debug("len=%d,content:0x%x\r\n",msg_ack.len, msg_ack.content_word[0]);
000052  480b              LDR      r0,|L3.128|
000054  380c              SUBS     r0,r0,#0xc
000056  68c2              LDR      r2,[r0,#0xc]  ; msg_ack
000058  6881              LDR      r1,[r0,#8]  ; msg_ack
00005a  a00a              ADR      r0,|L3.132|
00005c  f7fffffe          BL       __2printf
;;;155            return fsm_rt_cpl;
000060  2000              MOVS     r0,#0
                  |L3.98|
;;;156        }
;;;157        else
;;;158        {
;;;159           return ret;
;;;160        }
;;;161    }
000062  bd38              POP      {r3-r5,pc}
                  |L3.100|
000064  4620              MOV      r0,r4                 ;159
000066  e7fc              B        |L3.98|
                          ENDP

                  |L3.104|
                          DCD      pattern_file
                  |L3.108|
00006c  62696e20          DCB      "bin size:%d\r\n",0
000070  73697a65
000074  3a25640d
000078  0a00    
00007a  00                DCB      0
00007b  00                DCB      0
                  |L3.124|
                          DCD      0x40001000
                  |L3.128|
                          DCD      msg_ack+0xc
                  |L3.132|
000084  6c656e3d          DCB      "len=%d,content:0x%x\r\n",0
000088  25642c63
00008c  6f6e7465
000090  6e743a30
000094  7825780d
000098  0a00    
00009a  00                DCB      0
00009b  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pattern_file
                          %        552

                          AREA ||.data||, DATA, ALIGN=2

                  g_row
                          DCD      0x00000000
                  is_pattern_file_fail
000004  01                DCB      0x01
                  s_tState
000005  00                DCB      0x00
                  ||ret||
000006  0000              DCB      0x00,0x00
                  timer
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\kiwi_ft\\asu_ram.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_asu_ram_c_g_row____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_asu_ram_c_g_row____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_asu_ram_c_g_row____REVSH|
#line 144
|__asm___9_asu_ram_c_g_row____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
