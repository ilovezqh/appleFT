; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\perf_counter.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\perf_counter.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 --preinclude=Pre_Include_Global.h -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\berry_ft -I..\..\User\ft_support -I..\..\User\test_common -I..\..\User\emenu -I..\..\User\kiwi_ft -I..\..\User\kiwi_ft\spv40 -I..\..\User\kiwi_ft\spv40\peripheral -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\kiwi_ft -I..\..\User\MultiButton-1.1.0 -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\GorgonMeducer\perf_counter\2.2.3\lib -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\perf_counter.crf C:/Users/qizha/AppData/Local/Arm/Packs/GorgonMeducer/perf_counter/2.2.3/perf_counter.c]
                          THUMB

                          AREA ||i.EventRecorderTimerGetCount||, CODE, READONLY, ALIGN=1

                  EventRecorderTimerGetCount PROC
;;;511    /// \return       timer count (32-bit)
;;;512    uint32_t EventRecorderTimerGetCount (void)
000000  b510              PUSH     {r4,lr}
;;;513    {
;;;514        return get_system_ticks();
000002  f7fffffe          BL       get_system_ticks
;;;515    }
000006  bd10              POP      {r4,pc}
;;;516    
                          ENDP


                          AREA ||i.EventRecorderTimerGetFreq||, CODE, READONLY, ALIGN=2

                  EventRecorderTimerGetFreq PROC
;;;504    /// \return       timer frequency in Hz
;;;505    uint32_t EventRecorderTimerGetFreq (void)
000000  4801              LDR      r0,|L2.8|
;;;506    {
;;;507        return SystemCoreClock;
000002  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;508    }
000004  4770              BX       lr
;;;509    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      SystemCoreClock

                          AREA ||i.EventRecorderTimerSetup||, CODE, READONLY, ALIGN=1

                  EventRecorderTimerSetup PROC
;;;496    /// \return       status (1=Success, 0=Failure)
;;;497    uint32_t EventRecorderTimerSetup (void)
000000  2001              MOVS     r0,#1
;;;498    {
;;;499        /* doing nothing at all */
;;;500        return 1;
;;;501    }
000002  4770              BX       lr
;;;502    
                          ENDP


                          AREA ||i.__get_PRIMASK||, CODE, READONLY, ALIGN=1

                  __get_PRIMASK PROC
;;;663     */
;;;664    __STATIC_INLINE uint32_t __get_PRIMASK(void)
000000  f3ef8010          MRS      r0,PRIMASK
;;;665    {
;;;666      register uint32_t __regPriMask         __ASM("primask");
;;;667      return(__regPriMask);
;;;668    }
000004  4770              BX       lr
;;;669    
                          ENDP


                          AREA ||i.__on_context_switch_in||, CODE, READONLY, ALIGN=2

                  __on_context_switch_in PROC
;;;664    
;;;665    void __on_context_switch_in(uint32_t *pwStack)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;666    {
000004  4604              MOV      r4,r0
;;;667        struct __task_cycle_info_t *ptRootAgent = (struct __task_cycle_info_t *)pwStack;
000006  4627              MOV      r7,r4
;;;668        int64_t lTimeStamp = get_system_ticks();
000008  f7fffffe          BL       get_system_ticks
00000c  4605              MOV      r5,r0
00000e  460e              MOV      r6,r1
;;;669    
;;;670        ptRootAgent->lLastTimeStamp = lTimeStamp;
000010  e9c75606          STRD     r5,r6,[r7,#0x18]
;;;671        ptRootAgent->tInfo.hwActiveCount++;
000014  8ab8              LDRH     r0,[r7,#0x14]
000016  1c40              ADDS     r0,r0,#1
000018  82b8              STRH     r0,[r7,#0x14]
;;;672    
;;;673        if (MAGIC_WORD_AGENT_LIST_VALID == ptRootAgent->wMagicWord) {
00001a  490b              LDR      r1,|L5.72|
00001c  6af8              LDR      r0,[r7,#0x2c]
00001e  4288              CMP      r0,r1
000020  d110              BNE      |L5.68|
;;;674            // update all agents
;;;675            task_cycle_info_agent_t *ptAgent = ptRootAgent->tList.ptNext;
000022  6a78              LDR      r0,[r7,#0x24]
;;;676            while(NULL != ptAgent) {
000024  e00b              B        |L5.62|
                  |L5.38|
;;;677                if (NULL != ptAgent->ptInfo) {
000026  6801              LDR      r1,[r0,#0]
000028  b141              CBZ      r1,|L5.60|
;;;678                    if (ptAgent->ptInfo->bEnabled) {
00002a  6801              LDR      r1,[r0,#0]
00002c  8ac9              LDRH     r1,[r1,#0x16]
00002e  0bc9              LSRS     r1,r1,#15
000030  b121              CBZ      r1,|L5.60|
;;;679                        ptAgent->ptInfo->hwActiveCount++;
000032  6801              LDR      r1,[r0,#0]
000034  8a89              LDRH     r1,[r1,#0x14]
000036  1c49              ADDS     r1,r1,#1
000038  6802              LDR      r2,[r0,#0]
00003a  8291              STRH     r1,[r2,#0x14]
                  |L5.60|
;;;680                    }
;;;681                }
;;;682                ptAgent = ptAgent->ptNext;
00003c  6840              LDR      r0,[r0,#4]
                  |L5.62|
00003e  2800              CMP      r0,#0                 ;676
000040  d1f1              BNE      |L5.38|
;;;683            }
;;;684        }
000042  bf00              NOP      
                  |L5.68|
;;;685    }
000044  e8bd81f0          POP      {r4-r8,pc}
;;;686    
                          ENDP

                  |L5.72|
                          DCD      0x8492a53c

                          AREA ||i.__on_context_switch_out||, CODE, READONLY, ALIGN=2

                  __on_context_switch_out PROC
;;;686    
;;;687    void __on_context_switch_out(uint32_t *pwStack)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;688    {
000004  4606              MOV      r6,r0
;;;689        struct __task_cycle_info_t *ptRootAgent = (struct __task_cycle_info_t *)pwStack;
000006  4637              MOV      r7,r6
;;;690        int64_t lCycleUsed = get_system_ticks() - ptRootAgent->lLastTimeStamp - g_nOffset;
000008  f7fffffe          BL       get_system_ticks
00000c  e9d72306          LDRD     r2,r3,[r7,#0x18]
000010  1a82              SUBS     r2,r0,r2
000012  eb610103          SBC      r1,r1,r3
000016  4814              LDR      r0,|L6.104|
000018  6800              LDR      r0,[r0,#0]  ; g_nOffset
00001a  1a14              SUBS     r4,r2,r0
00001c  eb6175e0          SBC      r5,r1,r0,ASR #31
;;;691    
;;;692        ptRootAgent->tInfo.nUsedRecent = lCycleUsed;
000020  613c              STR      r4,[r7,#0x10]
;;;693        ptRootAgent->tInfo.lUsedTotal += lCycleUsed;
000022  e9d71002          LDRD     r1,r0,[r7,#8]
000026  1909              ADDS     r1,r1,r4
000028  4168              ADCS     r0,r0,r5
00002a  e9c71002          STRD     r1,r0,[r7,#8]
;;;694    
;;;695        if (MAGIC_WORD_AGENT_LIST_VALID == ptRootAgent->wMagicWord) {
00002e  490f              LDR      r1,|L6.108|
000030  6af8              LDR      r0,[r7,#0x2c]
000032  4288              CMP      r0,r1
000034  d115              BNE      |L6.98|
;;;696            // update all agents
;;;697            task_cycle_info_agent_t *ptAgent = ptRootAgent->tList.ptNext;
000036  6a78              LDR      r0,[r7,#0x24]
;;;698            while(NULL != ptAgent) {
000038  e010              B        |L6.92|
                  |L6.58|
;;;699                if (NULL != ptAgent->ptInfo) {
00003a  6801              LDR      r1,[r0,#0]
00003c  b169              CBZ      r1,|L6.90|
;;;700                    if (ptAgent->ptInfo->bEnabled) {
00003e  6801              LDR      r1,[r0,#0]
000040  8ac9              LDRH     r1,[r1,#0x16]
000042  0bc9              LSRS     r1,r1,#15
000044  b149              CBZ      r1,|L6.90|
;;;701                        ptAgent->ptInfo->nUsedRecent = lCycleUsed;
000046  6801              LDR      r1,[r0,#0]
000048  610c              STR      r4,[r1,#0x10]
;;;702                        ptAgent->ptInfo->lUsedTotal += lCycleUsed;
00004a  6801              LDR      r1,[r0,#0]
00004c  e9d12102          LDRD     r2,r1,[r1,#8]
000050  1912              ADDS     r2,r2,r4
000052  4169              ADCS     r1,r1,r5
000054  6803              LDR      r3,[r0,#0]
000056  e9c32102          STRD     r2,r1,[r3,#8]
                  |L6.90|
;;;703                    }
;;;704                }
;;;705                ptAgent = ptAgent->ptNext;
00005a  6840              LDR      r0,[r0,#4]
                  |L6.92|
00005c  2800              CMP      r0,#0                 ;698
00005e  d1ec              BNE      |L6.58|
;;;706            }
;;;707        }
000060  bf00              NOP      
                  |L6.98|
;;;708    }
000062  e8bd81f0          POP      {r4-r8,pc}
;;;709    
                          ENDP

000066  0000              DCW      0x0000
                  |L6.104|
                          DCD      g_nOffset
                  |L6.108|
                          DCD      0x8492a53c

                          AREA ||i.__perf_counter_init||, CODE, READONLY, ALIGN=1

                  __perf_counter_init PROC
;;;324    __attribute__((constructor))
;;;325    void __perf_counter_init(void)
000000  b510              PUSH     {r4,lr}
;;;326    {
;;;327        init_cycle_counter(true);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       init_cycle_counter
;;;328    }
000008  bd10              POP      {r4,pc}
;;;329    
                          ENDP


                          AREA ||i.__perf_os_patch_init||, CODE, READONLY, ALIGN=1

                  __perf_os_patch_init PROC
;;;232    __WEAK
;;;233    void __perf_os_patch_init(void)
000000  4770              BX       lr
;;;234    {
;;;235    }
;;;236    
                          ENDP


                          AREA ||i.__perfc_is_time_out||, CODE, READONLY, ALIGN=1

                  __perfc_is_time_out PROC
;;;467    
;;;468    bool __perfc_is_time_out(int64_t lPeriod, int64_t *plTimestamp, bool bAutoReload)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;469    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  4699              MOV      r9,r3
;;;470        if (NULL == plTimestamp) {
00000c  b914              CBNZ     r4,|L9.20|
;;;471            return false;
00000e  2000              MOVS     r0,#0
                  |L9.16|
;;;472        }
;;;473        
;;;474        int64_t lTimestamp = get_system_ticks();
;;;475    
;;;476    
;;;477        if (0 == *plTimestamp) {
;;;478            *plTimestamp = lPeriod;
;;;479            *plTimestamp += lTimestamp;
;;;480            
;;;481            return false;
;;;482        }
;;;483    
;;;484        if (lTimestamp >= *plTimestamp) {
;;;485            if (bAutoReload) {
;;;486                *plTimestamp = lPeriod + lTimestamp;
;;;487            }
;;;488            return true;
;;;489        }
;;;490    
;;;491        return false;
;;;492    }
000010  e8bd87f0          POP      {r4-r10,pc}
                  |L9.20|
000014  f7fffffe          BL       get_system_ticks
000018  4605              MOV      r5,r0                 ;474
00001a  460e              MOV      r6,r1                 ;474
00001c  2000              MOVS     r0,#0                 ;477
00001e  4601              MOV      r1,r0                 ;477
000020  e9d43200          LDRD     r3,r2,[r4,#0]         ;477
000024  4058              EORS     r0,r0,r3              ;477
000026  4051              EORS     r1,r1,r2              ;477
000028  4308              ORRS     r0,r0,r1              ;477
00002a  d109              BNE      |L9.64|
00002c  e9c47800          STRD     r7,r8,[r4,#0]         ;478
000030  e9d41000          LDRD     r1,r0,[r4,#0]         ;479
000034  1949              ADDS     r1,r1,r5              ;479
000036  4170              ADCS     r0,r0,r6              ;479
000038  e9c41000          STRD     r1,r0,[r4,#0]         ;479
00003c  2000              MOVS     r0,#0                 ;481
00003e  e7e7              B        |L9.16|
                  |L9.64|
000040  e9d41000          LDRD     r1,r0,[r4,#0]         ;484
000044  1a69              SUBS     r1,r5,r1              ;484
000046  eb760000          SBCS     r0,r6,r0              ;484
00004a  db09              BLT      |L9.96|
00004c  f1b90f00          CMP      r9,#0                 ;485
000050  d004              BEQ      |L9.92|
000052  1979              ADDS     r1,r7,r5              ;486
000054  eb480006          ADC      r0,r8,r6              ;486
000058  e9c41000          STRD     r1,r0,[r4,#0]         ;486
                  |L9.92|
00005c  2001              MOVS     r0,#1                 ;488
00005e  e7d7              B        |L9.16|
                  |L9.96|
000060  2000              MOVS     r0,#0                 ;491
000062  e7d5              B        |L9.16|
;;;493    
                          ENDP


                          AREA ||i.__set_PRIMASK||, CODE, READONLY, ALIGN=1

                  __set_PRIMASK PROC
;;;675     */
;;;676    __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
000000  f3808810          MSR      PRIMASK,r0
;;;677    {
;;;678      register uint32_t __regPriMask         __ASM("primask");
;;;679      __regPriMask = (priMask);
;;;680    }
000004  4770              BX       lr
;;;681    
                          ENDP


                          AREA ||i.__start_task_cycle_counter||, CODE, READONLY, ALIGN=1

                  __start_task_cycle_counter PROC
                  ||__tagsym$$noinline||
;;;710    __attribute__((noinline))
;;;711    void __start_task_cycle_counter(task_cycle_info_t *ptInfo)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;712    {
000004  4604              MOV      r4,r0
;;;713        struct __task_cycle_info_t * ptRootAgent =
000006  f7fffffe          BL       get_rtos_task_cycle_info
00000a  4605              MOV      r5,r0
;;;714            (struct __task_cycle_info_t *)get_rtos_task_cycle_info();
;;;715        if (NULL == ptRootAgent) {
00000c  b90d              CBNZ     r5,|L11.18|
                  |L11.14|
;;;716            return ;
;;;717        }
;;;718    
;;;719        __IRQ_SAFE {
;;;720            ptRootAgent->lLastTimeStamp = get_system_ticks();
;;;721            ptRootAgent->tInfo.lUsedTotal = 0;
;;;722    
;;;723            if (NULL != ptInfo) {
;;;724                ptInfo->lUsedTotal = 0;
;;;725                ptInfo->bEnabled = true;
;;;726            }
;;;727        }
;;;728    }
00000e  e8bd87f0          POP      {r4-r10,pc}
                  |L11.18|
000012  f7fffffe          BL       __get_PRIMASK
000016  4681              MOV      r9,r0                 ;719
000018  b672              CPSID    i                     ;719
00001a  46c8              MOV      r8,r9                 ;719
00001c  4646              MOV      r6,r8                 ;719
00001e  2700              MOVS     r7,#0                 ;719
000020  e012              B        |L11.72|
                  |L11.34|
000022  f7fffffe          BL       get_system_ticks
000026  e9c50106          STRD     r0,r1,[r5,#0x18]      ;720
00002a  2000              MOVS     r0,#0                 ;721
00002c  60a8              STR      r0,[r5,#8]            ;721
00002e  60e8              STR      r0,[r5,#0xc]          ;721
000030  b13c              CBZ      r4,|L11.66|
000032  60a0              STR      r0,[r4,#8]            ;724
000034  60e0              STR      r0,[r4,#0xc]          ;724
000036  8ae0              LDRH     r0,[r4,#0x16]         ;725
000038  f4204000          BIC      r0,r0,#0x8000         ;725
00003c  f5004000          ADD      r0,r0,#0x8000         ;725
000040  82e0              STRH     r0,[r4,#0x16]         ;725
                  |L11.66|
000042  4630              MOV      r0,r6                 ;719
000044  f7fffffe          BL       __set_PRIMASK
                  |L11.72|
000048  1e38              SUBS     r0,r7,#0              ;719
00004a  f1070704          ADD      r7,r7,#4              ;719
00004e  d0e8              BEQ      |L11.34|
000050  bf00              NOP      
000052  e7dc              B        |L11.14|
;;;729    
                          ENDP


                          AREA ||i.__stop_task_cycle_counter||, CODE, READONLY, ALIGN=2

                  __stop_task_cycle_counter PROC
                  |symbol_number.283|
;;;730    __attribute__((noinline))
;;;731    int64_t __stop_task_cycle_counter(task_cycle_info_t *ptInfo)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;732    {
000004  4604              MOV      r4,r0
;;;733        struct __task_cycle_info_t * ptRootAgent =
000006  f7fffffe          BL       get_rtos_task_cycle_info
00000a  4681              MOV      r9,r0
;;;734            (struct __task_cycle_info_t *)get_rtos_task_cycle_info();
;;;735        if (NULL == ptRootAgent) {
00000c  f1b90f00          CMP      r9,#0
000010  d103              BNE      |L12.26|
;;;736            return 0;
000012  2000              MOVS     r0,#0
000014  4601              MOV      r1,r0
                  |L12.22|
;;;737        }
;;;738    
;;;739        int64_t lCycles = 0;
;;;740    
;;;741        __IRQ_SAFE {
;;;742            int64_t lCycleUsed = get_system_ticks() - ptRootAgent->lLastTimeStamp - g_nOffset;
;;;743            ptRootAgent->tInfo.lUsedTotal += lCycleUsed;
;;;744    
;;;745            if (NULL != ptInfo) {
;;;746                if (ptInfo->bEnabled) {
;;;747                    ptInfo->nUsedRecent = lCycleUsed;
;;;748                    ptInfo->lUsedTotal += lCycleUsed;
;;;749                    ptInfo->bEnabled = false;
;;;750                }
;;;751    
;;;752                lCycles = ptInfo->lUsedTotal;
;;;753            } else {
;;;754                lCycles = ptRootAgent->tInfo.lUsedTotal;
;;;755            }
;;;756        }
;;;757    
;;;758        return lCycles;
;;;759    }
000016  e8bd9ff0          POP      {r4-r12,pc}
                  |L12.26|
00001a  2500              MOVS     r5,#0                 ;739
00001c  462e              MOV      r6,r5                 ;739
00001e  f7fffffe          BL       __get_PRIMASK
000022  4680              MOV      r8,r0                 ;741
000024  b672              CPSID    i                     ;741
000026  4647              MOV      r7,r8                 ;741
000028  46ba              MOV      r10,r7                ;741
00002a  f04f0b00          MOV      r11,#0                ;741
00002e  e02a              B        |L12.134|
                  |L12.48|
000030  f7fffffe          BL       get_system_ticks
000034  e9d92306          LDRD     r2,r3,[r9,#0x18]      ;742
000038  1a82              SUBS     r2,r0,r2              ;742
00003a  eb610103          SBC      r1,r1,r3              ;742
00003e  4816              LDR      r0,|L12.152|
000040  6800              LDR      r0,[r0,#0]            ;742  ; g_nOffset
000042  1a17              SUBS     r7,r2,r0              ;742
000044  eb6178e0          SBC      r8,r1,r0,ASR #31      ;742
000048  e9d91002          LDRD     r1,r0,[r9,#8]         ;743
00004c  19c9              ADDS     r1,r1,r7              ;743
00004e  eb400008          ADC      r0,r0,r8              ;743
000052  e9c91002          STRD     r1,r0,[r9,#8]         ;743
000056  b18c              CBZ      r4,|L12.124|
000058  8ae0              LDRH     r0,[r4,#0x16]         ;746
00005a  0bc0              LSRS     r0,r0,#15             ;746
00005c  b158              CBZ      r0,|L12.118|
00005e  6127              STR      r7,[r4,#0x10]         ;747
000060  e9d41002          LDRD     r1,r0,[r4,#8]         ;748
000064  19c9              ADDS     r1,r1,r7              ;748
000066  eb400008          ADC      r0,r0,r8              ;748
00006a  e9c41002          STRD     r1,r0,[r4,#8]         ;748
00006e  8ae0              LDRH     r0,[r4,#0x16]         ;749
000070  f4204000          BIC      r0,r0,#0x8000         ;749
000074  82e0              STRH     r0,[r4,#0x16]         ;749
                  |L12.118|
000076  e9d45602          LDRD     r5,r6,[r4,#8]         ;752
00007a  e001              B        |L12.128|
                  |L12.124|
00007c  e9d95602          LDRD     r5,r6,[r9,#8]         ;754
                  |L12.128|
000080  4650              MOV      r0,r10                ;741
000082  f7fffffe          BL       __set_PRIMASK
                  |L12.134|
000086  f1bb0000          SUBS     r0,r11,#0             ;741
00008a  f10b0b04          ADD      r11,r11,#4            ;741
00008e  d0cf              BEQ      |L12.48|
000090  4628              MOV      r0,r5                 ;758
000092  4631              MOV      r1,r6                 ;758
000094  e7bf              B        |L12.22|
;;;760    
                          ENDP

000096  0000              DCW      0x0000
                  |L12.152|
                          DCD      g_nOffset

                          AREA ||i.before_cycle_counter_reconfiguration||, CODE, READONLY, ALIGN=2

                  before_cycle_counter_reconfiguration PROC
;;;303    
;;;304    void before_cycle_counter_reconfiguration(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;305    {
;;;306        __IRQ_SAFE {
000004  f7fffffe          BL       __get_PRIMASK
000008  4607              MOV      r7,r0
00000a  b672              CPSID    i
00000c  463e              MOV      r6,r7
00000e  4634              MOV      r4,r6
000010  2500              MOVS     r5,#0
000012  e01b              B        |L13.76|
                  |L13.20|
;;;307            SysTick->CTRL  = 0;                                                     /* disable SysTick first */
000014  2000              MOVS     r0,#0
000016  f04f21e0          MOV      r1,#0xe000e000
00001a  6108              STR      r0,[r1,#0x10]
;;;308    
;;;309            if (SCB->ICSR & SCB_ICSR_PENDSTSET_Msk) {                               /* pending SysTick exception */
00001c  480e              LDR      r0,|L13.88|
00001e  6800              LDR      r0,[r0,#0]
000020  f0006080          AND      r0,r0,#0x4000000
000024  b128              CBZ      r0,|L13.50|
;;;310                SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;                                 /* clear pending bit */
000026  f04f7000          MOV      r0,#0x2000000
00002a  490b              LDR      r1,|L13.88|
00002c  6008              STR      r0,[r1,#0]
;;;311    
;;;312                user_code_insert_to_systick_handler();                              /* manually handle exception */
00002e  f7fffffe          BL       user_code_insert_to_systick_handler
                  |L13.50|
;;;313    
;;;314            }
;;;315            s_lSystemClockCounts = get_system_ticks();                              /* get the final cycle counter value */
000032  f7fffffe          BL       get_system_ticks
000036  4a09              LDR      r2,|L13.92|
000038  6010              STR      r0,[r2,#0]  ; s_lSystemClockCounts
00003a  6051              STR      r1,[r2,#4]  ; s_lSystemClockCounts
;;;316    
;;;317            SysTick->LOAD = 0UL;
00003c  2000              MOVS     r0,#0
00003e  f04f21e0          MOV      r1,#0xe000e000
000042  6148              STR      r0,[r1,#0x14]
;;;318            SysTick->VAL = 0UL;                                                     /* clear the Current Value Register */
000044  6188              STR      r0,[r1,#0x18]
000046  4620              MOV      r0,r4                 ;306
000048  f7fffffe          BL       __set_PRIMASK
                  |L13.76|
00004c  1e28              SUBS     r0,r5,#0              ;306
00004e  f1050504          ADD      r5,r5,#4              ;306
000052  d0df              BEQ      |L13.20|
;;;319        }
;;;320    }
000054  e8bd81f0          POP      {r4-r8,pc}
;;;321    
                          ENDP

                  |L13.88|
                          DCD      0xe000ed04
                  |L13.92|
                          DCD      s_lSystemClockCounts

                          AREA ||i.check_systick||, CODE, READONLY, ALIGN=2

                  check_systick PROC
;;;270     */
;;;271    __STATIC_INLINE int32_t check_systick(void)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;272    {
;;;273        int32_t nTemp = (int32_t)SysTick->LOAD - (int32_t)SysTick->VAL;
000004  6949              LDR      r1,[r1,#0x14]
000006  f04f22e0          MOV      r2,#0xe000e000
00000a  6992              LDR      r2,[r2,#0x18]
00000c  1a88              SUBS     r0,r1,r2
;;;274    
;;;275        /*        Since we cannot stop counting temporarily, there are several
;;;276         *        conditions which we should take into consideration:
;;;277         *        - Condition 1: when assigning nTemp with the register value (LOAD-VAL),
;;;278         *            the underflow didn't happen but when we check the PENDSTSET bit,
;;;279         *            the underflow happens, for this condition, we should not
;;;280         *            do any compensation. When this happens, the (LOAD-nTemp) is
;;;281         *            smaller than PERF_CNT_COMPENSATION_THRESHOLD (a small value) as
;;;282         *            long as LOAD is bigger than (or equals to) the
;;;283         *            PERF_CNT_COMPENSATION_THRESHOLD;
;;;284         *        - Condition 2: when assigning nTemp with the register value (LOAD-VAL),
;;;285         *            the VAL is zero and underflow happened and the PENDSTSET bit
;;;286         *            is set, for this condition, we should not do any compensation.
;;;287         *            When this happens, the (LOAD-nTemp) is equals to zero.
;;;288         *        - Condition 3: when assigning nTemp with the register value (LOAD-VAL),
;;;289         *            the underflow has already happened, hence the PENDSTSET
;;;290         *            is set, for this condition, we should compensate the return
;;;291         *            value. When this happens, the (LOAD-nTemp) is bigger than (or
;;;292         *            equals to) PERF_CNT_COMPENSATION_THRESHOLD.
;;;293         *        The following code implements an equivalent logic.
;;;294         */
;;;295        if (SCB->ICSR & SCB_ICSR_PENDSTSET_Msk){
00000e  4908              LDR      r1,|L14.48|
000010  6809              LDR      r1,[r1,#0]
000012  f0016180          AND      r1,r1,#0x4000000
000016  b151              CBZ      r1,|L14.46|
;;;296            if (((int32_t)SysTick->LOAD - nTemp) >= PERF_CNT_COMPENSATION_THRESHOLD) {
000018  f04f21e0          MOV      r1,#0xe000e000
00001c  6949              LDR      r1,[r1,#0x14]
00001e  1a09              SUBS     r1,r1,r0
000020  2910              CMP      r1,#0x10
000022  db04              BLT      |L14.46|
;;;297                nTemp += SysTick->LOAD + 1;
000024  f04f21e0          MOV      r1,#0xe000e000
000028  6949              LDR      r1,[r1,#0x14]
00002a  1c49              ADDS     r1,r1,#1
00002c  4408              ADD      r0,r0,r1
                  |L14.46|
;;;298            }
;;;299        }
;;;300    
;;;301        return nTemp;
;;;302    }
00002e  4770              BX       lr
;;;303    
                          ENDP

                  |L14.48|
                          DCD      0xe000ed04

                          AREA ||i.clock||, CODE, READONLY, ALIGN=1

                  clock PROC
                  |symbol_number.285|
;;;417    __attribute__((noinline))
;;;418    int64_t clock(void)
000000  b510              PUSH     {r4,lr}
;;;419    {
;;;420        return get_system_ticks();
000002  f7fffffe          BL       get_system_ticks
;;;421    }
000006  bd10              POP      {r4,pc}
;;;422    
                          ENDP


                          AREA ||i.delay_ms||, CODE, READONLY, ALIGN=2

                  delay_ms PROC
;;;348    
;;;349    void delay_ms(int32_t nMs)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;350    {
000004  4607              MOV      r7,r0
;;;351        int64_t lUs = (int64_t)nMs * (int64_t)s_nMSUnit;
000006  4811              LDR      r0,|L16.76|
000008  6800              LDR      r0,[r0,#0]  ; s_nMSUnit
00000a  fb875000          SMULL    r5,r0,r7,r0
00000e  4606              MOV      r6,r0
;;;352        int32_t iCompensate = g_nOffset > PERF_CNT_DELAY_US_COMPENSATION
000010  480f              LDR      r0,|L16.80|
000012  6800              LDR      r0,[r0,#0]  ; g_nOffset
000014  285a              CMP      r0,#0x5a
000016  dd02              BLE      |L16.30|
;;;353                            ? g_nOffset 
000018  480d              LDR      r0,|L16.80|
00001a  6800              LDR      r0,[r0,#0]  ; g_nOffset
00001c  e000              B        |L16.32|
                  |L16.30|
;;;354                            : PERF_CNT_DELAY_US_COMPENSATION;
00001e  205a              MOVS     r0,#0x5a
                  |L16.32|
000020  4604              MOV      r4,r0
;;;355    
;;;356        if (lUs <= iCompensate) {
000022  17e0              ASRS     r0,r4,#31
000024  1b61              SUBS     r1,r4,r5
000026  41b0              SBCS     r0,r0,r6
000028  db01              BLT      |L16.46|
                  |L16.42|
;;;357            return ;
;;;358        }
;;;359    
;;;360        lUs -= iCompensate;
;;;361    
;;;362        lUs += get_system_ticks();
;;;363        while(get_system_ticks() < lUs);
;;;364    }
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L16.46|
00002e  1b2d              SUBS     r5,r5,r4              ;360
000030  eb6676e4          SBC      r6,r6,r4,ASR #31      ;360
000034  f7fffffe          BL       get_system_ticks
000038  1945              ADDS     r5,r0,r5              ;362
00003a  414e              ADCS     r6,r6,r1              ;362
00003c  bf00              NOP                            ;363
                  |L16.62|
00003e  f7fffffe          BL       get_system_ticks
000042  1b40              SUBS     r0,r0,r5              ;363
000044  41b1              SBCS     r1,r1,r6              ;363
000046  dbfa              BLT      |L16.62|
000048  bf00              NOP      
00004a  e7ee              B        |L16.42|
;;;365    
                          ENDP

                  |L16.76|
                          DCD      s_nMSUnit
                  |L16.80|
                          DCD      g_nOffset

                          AREA ||i.delay_us||, CODE, READONLY, ALIGN=2

                  delay_us PROC
;;;330    
;;;331    void delay_us(int32_t nUs)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;332    {
000004  4607              MOV      r7,r0
;;;333        int64_t lUs = (int64_t)nUs * (int64_t)s_nUSUnit;
000006  4811              LDR      r0,|L17.76|
000008  6800              LDR      r0,[r0,#0]  ; s_nUSUnit
00000a  fb875000          SMULL    r5,r0,r7,r0
00000e  4606              MOV      r6,r0
;;;334        int32_t iCompensate = g_nOffset > PERF_CNT_DELAY_US_COMPENSATION
000010  480f              LDR      r0,|L17.80|
000012  6800              LDR      r0,[r0,#0]  ; g_nOffset
000014  285a              CMP      r0,#0x5a
000016  dd02              BLE      |L17.30|
;;;335                            ? g_nOffset 
000018  480d              LDR      r0,|L17.80|
00001a  6800              LDR      r0,[r0,#0]  ; g_nOffset
00001c  e000              B        |L17.32|
                  |L17.30|
;;;336                            : PERF_CNT_DELAY_US_COMPENSATION;
00001e  205a              MOVS     r0,#0x5a
                  |L17.32|
000020  4604              MOV      r4,r0
;;;337    
;;;338        if (lUs <= iCompensate) {
000022  17e0              ASRS     r0,r4,#31
000024  1b61              SUBS     r1,r4,r5
000026  41b0              SBCS     r0,r0,r6
000028  db01              BLT      |L17.46|
                  |L17.42|
;;;339            return ;
;;;340        }
;;;341    
;;;342        lUs -= iCompensate;
;;;343    
;;;344        lUs += get_system_ticks();
;;;345        while(get_system_ticks() < lUs);
;;;346    }
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L17.46|
00002e  1b2d              SUBS     r5,r5,r4              ;342
000030  eb6676e4          SBC      r6,r6,r4,ASR #31      ;342
000034  f7fffffe          BL       get_system_ticks
000038  1945              ADDS     r5,r0,r5              ;344
00003a  414e              ADCS     r6,r6,r1              ;344
00003c  bf00              NOP                            ;345
                  |L17.62|
00003e  f7fffffe          BL       get_system_ticks
000042  1b40              SUBS     r0,r0,r5              ;345
000044  41b1              SBCS     r1,r1,r6              ;345
000046  dbfa              BLT      |L17.62|
000048  bf00              NOP      
00004a  e7ee              B        |L17.42|
;;;347    
                          ENDP

                  |L17.76|
                          DCD      s_nUSUnit
                  |L17.80|
                          DCD      g_nOffset

                          AREA ||i.disable_task_cycle_info||, CODE, READONLY, ALIGN=1

                  disable_task_cycle_info PROC
;;;567    
;;;568    bool disable_task_cycle_info(task_cycle_info_t *ptInfo)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;569    {
000004  4604              MOV      r4,r0
;;;570        if (NULL == ptInfo) {
000006  b914              CBNZ     r4,|L18.14|
;;;571            return false;
000008  2000              MOVS     r0,#0
                  |L18.10|
;;;572        }
;;;573        bool bOrig;
;;;574        __IRQ_SAFE {
;;;575            bOrig = ptInfo->bEnabled;
;;;576            ptInfo->bEnabled = false;
;;;577        }
;;;578        return bOrig;
;;;579    }
00000a  e8bd87f0          POP      {r4-r10,pc}
                  |L18.14|
00000e  f7fffffe          BL       __get_PRIMASK
000012  4681              MOV      r9,r0                 ;574
000014  b672              CPSID    i                     ;574
000016  46c8              MOV      r8,r9                 ;574
000018  4646              MOV      r6,r8                 ;574
00001a  2700              MOVS     r7,#0                 ;574
00001c  e008              B        |L18.48|
                  |L18.30|
00001e  8ae0              LDRH     r0,[r4,#0x16]         ;575
000020  0bc5              LSRS     r5,r0,#15             ;575
000022  8ae0              LDRH     r0,[r4,#0x16]         ;576
000024  f4204000          BIC      r0,r0,#0x8000         ;576
000028  82e0              STRH     r0,[r4,#0x16]         ;576
00002a  4630              MOV      r0,r6                 ;574
00002c  f7fffffe          BL       __set_PRIMASK
                  |L18.48|
000030  1e38              SUBS     r0,r7,#0              ;574
000032  f1070704          ADD      r7,r7,#4              ;574
000036  d0f2              BEQ      |L18.30|
000038  4628              MOV      r0,r5                 ;578
00003a  e7e6              B        |L18.10|
;;;580    
                          ENDP


                          AREA ||i.enable_task_cycle_info||, CODE, READONLY, ALIGN=1

                  enable_task_cycle_info PROC
;;;554    
;;;555    bool enable_task_cycle_info(task_cycle_info_t *ptInfo)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;556    {
000004  4604              MOV      r4,r0
;;;557        if (NULL == ptInfo) {
000006  b914              CBNZ     r4,|L19.14|
;;;558            return false;
000008  2000              MOVS     r0,#0
                  |L19.10|
;;;559        }
;;;560        bool bOrig;
;;;561        __IRQ_SAFE {
;;;562            bOrig = ptInfo->bEnabled;
;;;563            ptInfo->bEnabled = true;
;;;564        }
;;;565        return bOrig;
;;;566    }
00000a  e8bd87f0          POP      {r4-r10,pc}
                  |L19.14|
00000e  f7fffffe          BL       __get_PRIMASK
000012  4681              MOV      r9,r0                 ;561
000014  b672              CPSID    i                     ;561
000016  46c8              MOV      r8,r9                 ;561
000018  4646              MOV      r6,r8                 ;561
00001a  2700              MOVS     r7,#0                 ;561
00001c  e00a              B        |L19.52|
                  |L19.30|
00001e  8ae0              LDRH     r0,[r4,#0x16]         ;562
000020  0bc5              LSRS     r5,r0,#15             ;562
000022  8ae0              LDRH     r0,[r4,#0x16]         ;563
000024  f4204000          BIC      r0,r0,#0x8000         ;563
000028  f5004000          ADD      r0,r0,#0x8000         ;563
00002c  82e0              STRH     r0,[r4,#0x16]         ;563
00002e  4630              MOV      r0,r6                 ;561
000030  f7fffffe          BL       __set_PRIMASK
                  |L19.52|
000034  1e38              SUBS     r0,r7,#0              ;561
000036  f1070704          ADD      r7,r7,#4              ;561
00003a  d0f0              BEQ      |L19.30|
00003c  4628              MOV      r0,r5                 ;565
00003e  e7e4              B        |L19.10|
;;;567    
                          ENDP


                          AREA ||i.get_rtos_task_cycle_info||, CODE, READONLY, ALIGN=1

                  get_rtos_task_cycle_info PROC
;;;519    __WEAK
;;;520    task_cycle_info_t * get_rtos_task_cycle_info(void)
000000  2000              MOVS     r0,#0
;;;521    {
;;;522        return NULL;
;;;523    }
000002  4770              BX       lr
;;;524    
                          ENDP


                          AREA ||i.get_system_ms||, CODE, READONLY, ALIGN=2

                  get_system_ms PROC
;;;422    
;;;423    int32_t get_system_ms(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;424    {
;;;425        int32_t nTemp = 0;
000004  2400              MOVS     r4,#0
;;;426    
;;;427        __IRQ_SAFE {
000006  f7fffffe          BL       __get_PRIMASK
00000a  4680              MOV      r8,r0
00000c  b672              CPSID    i
00000e  4647              MOV      r7,r8
000010  463d              MOV      r5,r7
000012  2600              MOVS     r6,#0
000014  e00e              B        |L21.52|
                  |L21.22|
;;;428            nTemp = s_nSystemMS + (check_systick() + s_nMSResidule) / s_nMSUnit;
000016  f7fffffe          BL       check_systick
00001a  490a              LDR      r1,|L21.68|
00001c  6809              LDR      r1,[r1,#0]  ; s_nMSResidule
00001e  4408              ADD      r0,r0,r1
000020  4909              LDR      r1,|L21.72|
000022  6809              LDR      r1,[r1,#0]  ; s_nMSUnit
000024  fb90f0f1          SDIV     r0,r0,r1
000028  4908              LDR      r1,|L21.76|
00002a  6809              LDR      r1,[r1,#0]  ; s_nSystemMS
00002c  1844              ADDS     r4,r0,r1
00002e  4628              MOV      r0,r5                 ;427
000030  f7fffffe          BL       __set_PRIMASK
                  |L21.52|
000034  1e30              SUBS     r0,r6,#0              ;427
000036  f1060604          ADD      r6,r6,#4              ;427
00003a  d0ec              BEQ      |L21.22|
;;;429        }
;;;430    
;;;431        return nTemp;
00003c  4620              MOV      r0,r4
;;;432    }
00003e  e8bd81f0          POP      {r4-r8,pc}
;;;433    
                          ENDP

000042  0000              DCW      0x0000
                  |L21.68|
                          DCD      s_nMSResidule
                  |L21.72|
                          DCD      s_nMSUnit
                  |L21.76|
                          DCD      s_nSystemMS

                          AREA ||i.get_system_ticks||, CODE, READONLY, ALIGN=2

                  get_system_ticks PROC
                  |symbol_number.286|
;;;366    __attribute__((noinline))
;;;367    int64_t get_system_ticks(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;368    {
;;;369        int64_t lTemp = 0;
000004  2100              MOVS     r1,#0
000006  460c              MOV      r4,r1
000008  460d              MOV      r5,r1
;;;370    
;;;371        __IRQ_SAFE {
00000a  f7fffffe          BL       __get_PRIMASK
00000e  4681              MOV      r9,r0
000010  b672              CPSID    i
000012  46c8              MOV      r8,r9
000014  4646              MOV      r6,r8
000016  2700              MOVS     r7,#0
000018  e018              B        |L22.76|
                  |L22.26|
;;;372            lTemp = check_systick() + s_lSystemClockCounts;
00001a  f7fffffe          BL       check_systick
00001e  4b0f              LDR      r3,|L22.92|
000020  681a              LDR      r2,[r3,#0]  ; s_lSystemClockCounts
000022  685b              LDR      r3,[r3,#4]  ; s_lSystemClockCounts
000024  1884              ADDS     r4,r0,r2
000026  eb4375e0          ADC      r5,r3,r0,ASR #31
;;;373            
;;;374            /* When calling get_system_ticks() in an exception handler that has a  
;;;375             * higher priority than the SysTick_Handler, in some rare cases, the 
;;;376             * lTemp might be temporarily smaller than the previous value (i.e. 
;;;377             * s_lOldTimestamp), to mitigate the adverse effects of this problem,
;;;378             * we use the following code to avoid time-rolling-back issue.
;;;379             * 
;;;380             * NOTE: the issue mentioned above doesn't accumulate or have long-lasting
;;;381             *       effects.
;;;382             */
;;;383            if (lTemp < s_lOldTimestamp) {
00002a  490d              LDR      r1,|L22.96|
00002c  6808              LDR      r0,[r1,#0]  ; s_lOldTimestamp
00002e  6849              LDR      r1,[r1,#4]  ; s_lOldTimestamp
000030  1a20              SUBS     r0,r4,r0
000032  eb750001          SBCS     r0,r5,r1
000036  da03              BGE      |L22.64|
;;;384                lTemp = s_lOldTimestamp;
000038  4809              LDR      r0,|L22.96|
00003a  6804              LDR      r4,[r0,#0]  ; s_lOldTimestamp
00003c  6845              LDR      r5,[r0,#4]  ; s_lOldTimestamp
00003e  e002              B        |L22.70|
                  |L22.64|
;;;385            } else {
;;;386                s_lOldTimestamp = lTemp;
000040  4807              LDR      r0,|L22.96|
000042  6004              STR      r4,[r0,#0]  ; s_lOldTimestamp
000044  6045              STR      r5,[r0,#4]  ; s_lOldTimestamp
                  |L22.70|
000046  4630              MOV      r0,r6                 ;371
000048  f7fffffe          BL       __set_PRIMASK
                  |L22.76|
00004c  1e38              SUBS     r0,r7,#0              ;371
00004e  f1070704          ADD      r7,r7,#4              ;371
000052  d0e2              BEQ      |L22.26|
;;;387            }
;;;388        }
;;;389    
;;;390        return lTemp;
000054  4620              MOV      r0,r4
000056  4629              MOV      r1,r5
;;;391    }
000058  e8bd87f0          POP      {r4-r10,pc}
;;;392    
                          ENDP

                  |L22.92|
                          DCD      s_lSystemClockCounts
                  |L22.96|
                          DCD      s_lOldTimestamp

                          AREA ||i.get_system_us||, CODE, READONLY, ALIGN=2

                  get_system_us PROC
;;;433    
;;;434    int32_t get_system_us(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;435    {
;;;436        int32_t nTemp = 0;
000004  2400              MOVS     r4,#0
;;;437    
;;;438        __IRQ_SAFE {
000006  f7fffffe          BL       __get_PRIMASK
00000a  4680              MOV      r8,r0
00000c  b672              CPSID    i
00000e  4647              MOV      r7,r8
000010  463d              MOV      r5,r7
000012  2600              MOVS     r6,#0
000014  e00e              B        |L23.52|
                  |L23.22|
;;;439            nTemp = s_nSystemUS + (check_systick() + s_nUSResidule) / s_nUSUnit;
000016  f7fffffe          BL       check_systick
00001a  490a              LDR      r1,|L23.68|
00001c  6809              LDR      r1,[r1,#0]  ; s_nUSResidule
00001e  4408              ADD      r0,r0,r1
000020  4909              LDR      r1,|L23.72|
000022  6809              LDR      r1,[r1,#0]  ; s_nUSUnit
000024  fb90f0f1          SDIV     r0,r0,r1
000028  4908              LDR      r1,|L23.76|
00002a  6809              LDR      r1,[r1,#0]  ; s_nSystemUS
00002c  1844              ADDS     r4,r0,r1
00002e  4628              MOV      r0,r5                 ;438
000030  f7fffffe          BL       __set_PRIMASK
                  |L23.52|
000034  1e30              SUBS     r0,r6,#0              ;438
000036  f1060604          ADD      r6,r6,#4              ;438
00003a  d0ec              BEQ      |L23.22|
;;;440        }
;;;441    
;;;442        return nTemp;
00003c  4620              MOV      r0,r4
;;;443    }
00003e  e8bd81f0          POP      {r4-r8,pc}
;;;444    
                          ENDP

000042  0000              DCW      0x0000
                  |L23.68|
                          DCD      s_nUSResidule
                  |L23.72|
                          DCD      s_nUSUnit
                  |L23.76|
                          DCD      s_nSystemUS

                          AREA ||i.init_cycle_counter||, CODE, READONLY, ALIGN=2

                  init_cycle_counter PROC
;;;249    
;;;250    void init_cycle_counter(bool bIsSysTickOccupied)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;251    {
000004  4604              MOV      r4,r0
;;;252        __IRQ_SAFE {
000006  f7fffffe          BL       __get_PRIMASK
00000a  4680              MOV      r8,r0
00000c  b672              CPSID    i
00000e  4647              MOV      r7,r8
000010  463d              MOV      r5,r7
000012  2600              MOVS     r6,#0
000014  e01a              B        |L24.76|
                  |L24.22|
;;;253            if (!bIsSysTickOccupied) {
000016  b994              CBNZ     r4,|L24.62|
;;;254                SysTick_Config(0x01000000);             // use the longest period
000018  f04f7080          MOV      r0,#0x1000000
00001c  1e41              SUBS     r1,r0,#1
00001e  f1b17f80          CMP      r1,#0x1000000
000022  d300              BCC      |L24.38|
000024  e00a              B        |L24.60|
                  |L24.38|
000026  2100              MOVS     r1,#0
000028  f04f22e0          MOV      r2,#0xe000e000
00002c  6111              STR      r1,[r2,#0x10]
00002e  1e41              SUBS     r1,r0,#1
000030  6151              STR      r1,[r2,#0x14]
000032  2100              MOVS     r1,#0
000034  6191              STR      r1,[r2,#0x18]
000036  2107              MOVS     r1,#7
000038  6111              STR      r1,[r2,#0x10]
00003a  bf00              NOP      
                  |L24.60|
00003c  bf00              NOP      
                  |L24.62|
;;;255            }
;;;256            SCB->ICSR      = SCB_ICSR_PENDSTCLR_Msk;
00003e  f04f7000          MOV      r0,#0x2000000
000042  490c              LDR      r1,|L24.116|
000044  6008              STR      r0,[r1,#0]
000046  4628              MOV      r0,r5                 ;252
000048  f7fffffe          BL       __set_PRIMASK
                  |L24.76|
00004c  1e30              SUBS     r0,r6,#0              ;252
00004e  f1060604          ADD      r6,r6,#4              ;252
000052  d0e0              BEQ      |L24.22|
;;;257        }
;;;258        
;;;259        update_perf_counter();
000054  f7fffffe          BL       update_perf_counter
;;;260        s_lSystemClockCounts = 0;                       // reset system cycle counter
000058  2100              MOVS     r1,#0
00005a  4a07              LDR      r2,|L24.120|
00005c  6011              STR      r1,[r2,#0]  ; s_lSystemClockCounts
00005e  6051              STR      r1,[r2,#4]  ; s_lSystemClockCounts
;;;261        s_nSystemMS = 0;                                // reset system millisecond counter
000060  2000              MOVS     r0,#0
000062  4906              LDR      r1,|L24.124|
000064  6008              STR      r0,[r1,#0]  ; s_nSystemMS
;;;262        s_nSystemUS = 0;                                // reset system microsecond counter
000066  4906              LDR      r1,|L24.128|
000068  6008              STR      r0,[r1,#0]  ; s_nSystemUS
;;;263    
;;;264        __perf_os_patch_init();
00006a  f7fffffe          BL       __perf_os_patch_init
;;;265    }
00006e  e8bd81f0          POP      {r4-r8,pc}
;;;266    
                          ENDP

000072  0000              DCW      0x0000
                  |L24.116|
                          DCD      0xe000ed04
                  |L24.120|
                          DCD      s_lSystemClockCounts
                  |L24.124|
                          DCD      s_nSystemMS
                  |L24.128|
                          DCD      s_nSystemUS

                          AREA ||i.init_task_cycle_counter||, CODE, READONLY, ALIGN=2

                  init_task_cycle_counter PROC
;;;524    
;;;525    void init_task_cycle_counter(void)
000000  b510              PUSH     {r4,lr}
;;;526    {
;;;527        struct __task_cycle_info_t * ptRootAgent =
000002  f7fffffe          BL       get_rtos_task_cycle_info
000006  4604              MOV      r4,r0
;;;528            (struct __task_cycle_info_t *)get_rtos_task_cycle_info();
;;;529        if (NULL == ptRootAgent) {
000008  b904              CBNZ     r4,|L25.12|
                  |L25.10|
;;;530            return ;
;;;531        }
;;;532    
;;;533        memset(ptRootAgent, 0, sizeof(struct __task_cycle_info_t));
;;;534    
;;;535        ptRootAgent->tList.ptInfo = &(ptRootAgent->tInfo);
;;;536        ptRootAgent->tInfo.lStart = get_system_ticks();
;;;537        ptRootAgent->wMagicWord = MAGIC_WORD_CANARY;
;;;538    }
00000a  bd10              POP      {r4,pc}
                  |L25.12|
00000c  2130              MOVS     r1,#0x30              ;533
00000e  4620              MOV      r0,r4                 ;533
000010  f7fffffe          BL       __aeabi_memclr4
000014  6224              STR      r4,[r4,#0x20]         ;535
000016  f7fffffe          BL       get_system_ticks
00001a  e9c40100          STRD     r0,r1,[r4,#0]         ;536
00001e  4802              LDR      r0,|L25.40|
000020  62e0              STR      r0,[r4,#0x2c]         ;537
000022  bf00              NOP      
000024  e7f1              B        |L25.10|
;;;539    
                          ENDP

000026  0000              DCW      0x0000
                  |L25.40|
                          DCD      0xdeadbeef

                          AREA ||i.init_task_cycle_info||, CODE, READONLY, ALIGN=1

                  init_task_cycle_info PROC
;;;539    
;;;540    task_cycle_info_t *init_task_cycle_info(task_cycle_info_t *ptInfo)
000000  b510              PUSH     {r4,lr}
;;;541    {
000002  4604              MOV      r4,r0
;;;542        do {
000004  bf00              NOP      
;;;543            if (NULL == ptInfo) {
000006  b904              CBNZ     r4,|L26.10|
;;;544                break;
000008  e00a              B        |L26.32|
                  |L26.10|
;;;545            }
;;;546    
;;;547            memset(ptInfo, 0, sizeof(task_cycle_info_t));
00000a  2118              MOVS     r1,#0x18
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       __aeabi_memclr4
;;;548    
;;;549            ptInfo->bEnabled = true;
000012  8ae0              LDRH     r0,[r4,#0x16]
000014  f4204000          BIC      r0,r0,#0x8000
000018  f5004000          ADD      r0,r0,#0x8000
00001c  82e0              STRH     r0,[r4,#0x16]
;;;550        } while(0);
00001e  bf00              NOP      
                  |L26.32|
000020  bf00              NOP                            ;544
;;;551    
;;;552        return ptInfo;
000022  4620              MOV      r0,r4
;;;553    }
000024  bd10              POP      {r4,pc}
;;;554    
                          ENDP


                          AREA ||i.perfc_convert_ms_to_ticks||, CODE, READONLY, ALIGN=2

                  perfc_convert_ms_to_ticks PROC
;;;449    
;;;450    int64_t perfc_convert_ms_to_ticks(uint32_t wMS)
000000  b5f0              PUSH     {r4-r7,lr}
;;;451    {
000002  4602              MOV      r2,r0
;;;452        int64_t lResult = (int64_t)s_nMSUnit * (int64_t)wMS;
000004  480a              LDR      r0,|L27.48|
000006  6800              LDR      r0,[r0,#0]  ; s_nMSUnit
000008  17c5              ASRS     r5,r0,#31
00000a  2600              MOVS     r6,#0
00000c  fba03702          UMULL    r3,r7,r0,r2
000010  fb057502          MLA      r5,r5,r2,r7
000014  fb005406          MLA      r4,r0,r6,r5
;;;453        return lResult ? lResult : 1;
000018  2100              MOVS     r1,#0
00001a  ea830001          EOR      r0,r3,r1
00001e  4061              EORS     r1,r1,r4
000020  4308              ORRS     r0,r0,r1
000022  d002              BEQ      |L27.42|
000024  4618              MOV      r0,r3
000026  4621              MOV      r1,r4
                  |L27.40|
;;;454    }
000028  bdf0              POP      {r4-r7,pc}
                  |L27.42|
00002a  2001              MOVS     r0,#1                 ;453
00002c  2100              MOVS     r1,#0                 ;453
00002e  e7fb              B        |L27.40|
;;;455    
                          ENDP

                  |L27.48|
                          DCD      s_nMSUnit

                          AREA ||i.perfc_convert_ticks_to_ms||, CODE, READONLY, ALIGN=2

                  perfc_convert_ticks_to_ms PROC
;;;444    
;;;445    int64_t perfc_convert_ticks_to_ms(int64_t lTick)
000000  b570              PUSH     {r4-r6,lr}
;;;446    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;447        return lTick / (int64_t)s_nMSUnit;
000006  4804              LDR      r0,|L28.24|
000008  6802              LDR      r2,[r0,#0]  ; s_nMSUnit
00000a  17d3              ASRS     r3,r2,#31
00000c  4620              MOV      r0,r4
00000e  4629              MOV      r1,r5
000010  f7fffffe          BL       __aeabi_ldivmod
;;;448    }
000014  bd70              POP      {r4-r6,pc}
;;;449    
                          ENDP

000016  0000              DCW      0x0000
                  |L28.24|
                          DCD      s_nMSUnit

                          AREA ||i.perfc_convert_ticks_to_us||, CODE, READONLY, ALIGN=2

                  perfc_convert_ticks_to_us PROC
;;;455    
;;;456    int64_t perfc_convert_ticks_to_us(int64_t lTick)
000000  b570              PUSH     {r4-r6,lr}
;;;457    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;458        return lTick / (int64_t)s_nUSUnit;
000006  4804              LDR      r0,|L29.24|
000008  6802              LDR      r2,[r0,#0]  ; s_nUSUnit
00000a  17d3              ASRS     r3,r2,#31
00000c  4620              MOV      r0,r4
00000e  4629              MOV      r1,r5
000010  f7fffffe          BL       __aeabi_ldivmod
;;;459    }
000014  bd70              POP      {r4-r6,pc}
;;;460    
                          ENDP

000016  0000              DCW      0x0000
                  |L29.24|
                          DCD      s_nUSUnit

                          AREA ||i.perfc_convert_us_to_ticks||, CODE, READONLY, ALIGN=2

                  perfc_convert_us_to_ticks PROC
;;;460    
;;;461    int64_t perfc_convert_us_to_ticks(uint32_t wMS)
000000  b5f0              PUSH     {r4-r7,lr}
;;;462    {
000002  4602              MOV      r2,r0
;;;463        int64_t lResult = (int64_t)s_nUSUnit * (int64_t)wMS;
000004  480a              LDR      r0,|L30.48|
000006  6800              LDR      r0,[r0,#0]  ; s_nUSUnit
000008  17c5              ASRS     r5,r0,#31
00000a  2600              MOVS     r6,#0
00000c  fba03702          UMULL    r3,r7,r0,r2
000010  fb057502          MLA      r5,r5,r2,r7
000014  fb005406          MLA      r4,r0,r6,r5
;;;464        return lResult ? lResult : 1;
000018  2100              MOVS     r1,#0
00001a  ea830001          EOR      r0,r3,r1
00001e  4061              EORS     r1,r1,r4
000020  4308              ORRS     r0,r0,r1
000022  d002              BEQ      |L30.42|
000024  4618              MOV      r0,r3
000026  4621              MOV      r1,r4
                  |L30.40|
;;;465    }
000028  bdf0              POP      {r4-r7,pc}
                  |L30.42|
00002a  2001              MOVS     r0,#1                 ;464
00002c  2100              MOVS     r1,#0                 ;464
00002e  e7fb              B        |L30.40|
;;;466    
                          ENDP

                  |L30.48|
                          DCD      s_nUSUnit

                          AREA ||i.register_task_cycle_agent||, CODE, READONLY, ALIGN=2

                  register_task_cycle_agent PROC
;;;590    
;;;591    task_cycle_info_agent_t *register_task_cycle_agent(task_cycle_info_t *ptInfo,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;592                                                 task_cycle_info_agent_t *ptAgent)
;;;593    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;594        __IRQ_SAFE {
000008  f7fffffe          BL       __get_PRIMASK
00000c  4681              MOV      r9,r0
00000e  b672              CPSID    i
000010  46c8              MOV      r8,r9
000012  4646              MOV      r6,r8
000014  2700              MOVS     r7,#0
000016  e01b              B        |L31.80|
                  |L31.24|
;;;595            do {
000018  bf00              NOP      
;;;596                if (NULL == ptAgent || NULL == ptInfo) {
00001a  b104              CBZ      r4,|L31.30|
00001c  b905              CBNZ     r5,|L31.32|
                  |L31.30|
;;;597                    break;
00001e  e013              B        |L31.72|
                  |L31.32|
;;;598                }
;;;599    
;;;600                struct __task_cycle_info_t * ptRootAgent =
000020  f7fffffe          BL       get_rtos_task_cycle_info
;;;601                    (struct __task_cycle_info_t *)get_rtos_task_cycle_info();
;;;602                if (NULL == ptRootAgent) {
000024  b900              CBNZ     r0,|L31.40|
;;;603                    break;
000026  e00f              B        |L31.72|
                  |L31.40|
;;;604                }
;;;605    
;;;606                ptRootAgent->wMagicWord = MAGIC_WORD_AGENT_LIST_VALID;
000028  490d              LDR      r1,|L31.96|
00002a  62c1              STR      r1,[r0,#0x2c]
;;;607    
;;;608                ptAgent->ptInfo = ptInfo;
00002c  6025              STR      r5,[r4,#0]
;;;609    
;;;610                // push to the stack
;;;611                do {
00002e  bf00              NOP      
;;;612                    // set next-list
;;;613                    ptAgent->ptNext = ptRootAgent->tList.ptNext;
000030  6a41              LDR      r1,[r0,#0x24]
000032  6061              STR      r1,[r4,#4]
;;;614                    ptRootAgent->tList.ptNext = ptAgent;
000034  6244              STR      r4,[r0,#0x24]
;;;615    
;;;616                    // set prev-list
;;;617                    ptAgent->ptPrev = &(ptRootAgent->tList);
000036  f1000120          ADD      r1,r0,#0x20
00003a  60a1              STR      r1,[r4,#8]
;;;618                    if (NULL != ptAgent->ptNext) {
00003c  6861              LDR      r1,[r4,#4]
00003e  b109              CBZ      r1,|L31.68|
;;;619                        ptAgent->ptNext->ptPrev = ptAgent;
000040  6861              LDR      r1,[r4,#4]
000042  608c              STR      r4,[r1,#8]
                  |L31.68|
;;;620                    }
;;;621                } while(0);
000044  bf00              NOP      
;;;622    
;;;623            } while(0);
000046  bf00              NOP      
                  |L31.72|
000048  bf00              NOP                            ;597
00004a  4630              MOV      r0,r6                 ;594
00004c  f7fffffe          BL       __set_PRIMASK
                  |L31.80|
000050  1e38              SUBS     r0,r7,#0              ;594
000052  f1070704          ADD      r7,r7,#4              ;594
000056  d0df              BEQ      |L31.24|
;;;624        }
;;;625    
;;;626        return ptAgent;
000058  4620              MOV      r0,r4
;;;627    }
00005a  e8bd87f0          POP      {r4-r10,pc}
;;;628    
                          ENDP

00005e  0000              DCW      0x0000
                  |L31.96|
                          DCD      0x8492a53c

                          AREA ||i.resume_task_cycle_info||, CODE, READONLY, ALIGN=1

                  resume_task_cycle_info PROC
;;;580    
;;;581    void resume_task_cycle_info(task_cycle_info_t *ptInfo, bool bEnabledStatus)
000000  b900              CBNZ     r0,|L32.4|
                  |L32.2|
;;;582    {
;;;583        if (NULL == ptInfo) {
;;;584            return;
;;;585        }
;;;586    
;;;587        ptInfo->bEnabled = bEnabledStatus;
;;;588    }
000002  4770              BX       lr
                  |L32.4|
000004  8ac2              LDRH     r2,[r0,#0x16]         ;587
000006  f36132cf          BFI      r2,r1,#15,#1          ;587
00000a  82c2              STRH     r2,[r0,#0x16]         ;587
00000c  bf00              NOP      
00000e  e7f8              B        |L32.2|
;;;589    
                          ENDP


                          AREA ||i.unregister_task_cycle_agent||, CODE, READONLY, ALIGN=1

                  unregister_task_cycle_agent PROC
;;;629    task_cycle_info_agent_t *
;;;630    unregister_task_cycle_agent(task_cycle_info_agent_t *ptAgent)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;631    {
000004  4604              MOV      r4,r0
;;;632        __IRQ_SAFE {
000006  f7fffffe          BL       __get_PRIMASK
00000a  4680              MOV      r8,r0
00000c  b672              CPSID    i
00000e  4647              MOV      r7,r8
000010  463d              MOV      r5,r7
000012  2600              MOVS     r6,#0
000014  e017              B        |L33.70|
                  |L33.22|
;;;633            do {
000016  bf00              NOP      
;;;634                if (NULL == ptAgent) {
000018  b904              CBNZ     r4,|L33.28|
;;;635                    break;
00001a  e010              B        |L33.62|
                  |L33.28|
;;;636                }
;;;637    
;;;638                task_cycle_info_agent_t *ptPrev = ptAgent->ptPrev;
00001c  68a0              LDR      r0,[r4,#8]
;;;639                if (NULL == ptPrev) {
00001e  b900              CBNZ     r0,|L33.34|
;;;640                    break;      /* this should not happen */
000020  e00d              B        |L33.62|
                  |L33.34|
;;;641                }
;;;642                if (ptPrev->ptNext != ptAgent) {
000022  6841              LDR      r1,[r0,#4]
000024  42a1              CMP      r1,r4
000026  d000              BEQ      |L33.42|
;;;643                    // already removed
;;;644                    break;
000028  e009              B        |L33.62|
                  |L33.42|
;;;645                }
;;;646    
;;;647                //! remove agent from the next-list
;;;648                ptPrev->ptNext = ptAgent->ptNext;
00002a  6861              LDR      r1,[r4,#4]
00002c  6041              STR      r1,[r0,#4]
;;;649    
;;;650                if (NULL != ptAgent->ptNext) {
00002e  6861              LDR      r1,[r4,#4]
000030  b109              CBZ      r1,|L33.54|
;;;651                    // remove agent from the prev-list
;;;652                    ptAgent->ptNext->ptPrev = ptPrev;
000032  6861              LDR      r1,[r4,#4]
000034  6088              STR      r0,[r1,#8]
                  |L33.54|
;;;653                }
;;;654    
;;;655                ptAgent->ptNext = NULL;
000036  2100              MOVS     r1,#0
000038  6061              STR      r1,[r4,#4]
;;;656                ptAgent->ptPrev = NULL;
00003a  60a1              STR      r1,[r4,#8]
;;;657    
;;;658            } while(0);
00003c  bf00              NOP      
                  |L33.62|
00003e  bf00              NOP                            ;635
000040  4628              MOV      r0,r5                 ;632
000042  f7fffffe          BL       __set_PRIMASK
                  |L33.70|
000046  1e30              SUBS     r0,r6,#0              ;632
000048  f1060604          ADD      r6,r6,#4              ;632
00004c  d0e3              BEQ      |L33.22|
;;;659        }
;;;660    
;;;661        return ptAgent;
00004e  4620              MOV      r0,r4
;;;662    }
000050  e8bd81f0          POP      {r4-r8,pc}
;;;663    
                          ENDP


                          AREA ||i.update_perf_counter||, CODE, READONLY, ALIGN=2

                  update_perf_counter PROC
;;;237    
;;;238    void update_perf_counter(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;239    {
;;;240        s_nUSUnit = SystemCoreClock / 1000000ul;
000004  4816              LDR      r0,|L34.96|
000006  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000008  4916              LDR      r1,|L34.100|
00000a  fbb0f0f1          UDIV     r0,r0,r1
00000e  4916              LDR      r1,|L34.104|
000010  6008              STR      r0,[r1,#0]  ; s_nUSUnit
;;;241        s_nMSUnit = SystemCoreClock / 1000ul;
000012  4813              LDR      r0,|L34.96|
000014  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000016  f44f717a          MOV      r1,#0x3e8
00001a  fbb0f0f1          UDIV     r0,r0,r1
00001e  4913              LDR      r1,|L34.108|
000020  6008              STR      r0,[r1,#0]  ; s_nMSUnit
;;;242        
;;;243        __IRQ_SAFE {
000022  f7fffffe          BL       __get_PRIMASK
000026  4607              MOV      r7,r0
000028  b672              CPSID    i
00002a  463e              MOV      r6,r7
00002c  4634              MOV      r4,r6
00002e  2500              MOVS     r5,#0
000030  e00f              B        |L34.82|
                  |L34.50|
;;;244            g_lLastTimeStamp = get_system_ticks();
000032  f7fffffe          BL       get_system_ticks
000036  4a0e              LDR      r2,|L34.112|
000038  6010              STR      r0,[r2,#0]  ; g_lLastTimeStamp
00003a  6051              STR      r1,[r2,#4]  ; g_lLastTimeStamp
;;;245            g_nOffset = get_system_ticks() - g_lLastTimeStamp;
00003c  f7fffffe          BL       get_system_ticks
000040  4a0b              LDR      r2,|L34.112|
000042  6811              LDR      r1,[r2,#0]  ; g_lLastTimeStamp
000044  6852              LDR      r2,[r2,#4]  ; g_lLastTimeStamp
000046  1a40              SUBS     r0,r0,r1
000048  490a              LDR      r1,|L34.116|
00004a  6008              STR      r0,[r1,#0]  ; g_nOffset
00004c  4620              MOV      r0,r4                 ;243
00004e  f7fffffe          BL       __set_PRIMASK
                  |L34.82|
000052  1e28              SUBS     r0,r5,#0              ;243
000054  f1050504          ADD      r5,r5,#4              ;243
000058  d0eb              BEQ      |L34.50|
;;;246        }
;;;247    }
00005a  e8bd81f0          POP      {r4-r8,pc}
;;;248    
                          ENDP

00005e  0000              DCW      0x0000
                  |L34.96|
                          DCD      SystemCoreClock
                  |L34.100|
                          DCD      0x000f4240
                  |L34.104|
                          DCD      s_nUSUnit
                  |L34.108|
                          DCD      s_nMSUnit
                  |L34.112|
                          DCD      g_lLastTimeStamp
                  |L34.116|
                          DCD      g_nOffset

                          AREA ||i.user_code_insert_to_systick_handler||, CODE, READONLY, ALIGN=2

                  user_code_insert_to_systick_handler PROC
;;;208    
;;;209    void user_code_insert_to_systick_handler(void)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;210    {
;;;211        uint32_t wLoad = SysTick->LOAD + 1;
000004  6949              LDR      r1,[r1,#0x14]
000006  1c48              ADDS     r0,r1,#1
;;;212        s_lSystemClockCounts += wLoad;
000008  491e              LDR      r1,|L35.132|
00000a  680b              LDR      r3,[r1,#0]  ; s_lSystemClockCounts
00000c  6849              LDR      r1,[r1,#4]  ; s_lSystemClockCounts
00000e  181b              ADDS     r3,r3,r0
000010  f1410100          ADC      r1,r1,#0
000014  4a1b              LDR      r2,|L35.132|
000016  6013              STR      r3,[r2,#0]  ; s_lSystemClockCounts
000018  6051              STR      r1,[r2,#4]  ; s_lSystemClockCounts
;;;213    
;;;214        // update system ms counter
;;;215        do {
00001a  bf00              NOP      
;;;216            s_nMSResidule += wLoad;
00001c  4a1a              LDR      r2,|L35.136|
00001e  6812              LDR      r2,[r2,#0]  ; s_nMSResidule
000020  4402              ADD      r2,r2,r0
000022  4b19              LDR      r3,|L35.136|
000024  601a              STR      r2,[r3,#0]  ; s_nMSResidule
;;;217            int32_t nMS = s_nMSResidule / s_nMSUnit;
000026  461a              MOV      r2,r3
000028  6812              LDR      r2,[r2,#0]  ; s_nMSResidule
00002a  4b18              LDR      r3,|L35.140|
00002c  681b              LDR      r3,[r3,#0]  ; s_nMSUnit
00002e  fb92f1f3          SDIV     r1,r2,r3
;;;218            s_nMSResidule -= nMS * s_nMSUnit;
000032  4a15              LDR      r2,|L35.136|
000034  6812              LDR      r2,[r2,#0]  ; s_nMSResidule
000036  4b15              LDR      r3,|L35.140|
000038  681b              LDR      r3,[r3,#0]  ; s_nMSUnit
00003a  fb012213          MLS      r2,r1,r3,r2
00003e  4b12              LDR      r3,|L35.136|
000040  601a              STR      r2,[r3,#0]  ; s_nMSResidule
;;;219            s_nSystemMS += nMS;
000042  4a13              LDR      r2,|L35.144|
000044  6812              LDR      r2,[r2,#0]  ; s_nSystemMS
000046  440a              ADD      r2,r2,r1
000048  4b11              LDR      r3,|L35.144|
00004a  601a              STR      r2,[r3,#0]  ; s_nSystemMS
;;;220        } while(0);
00004c  bf00              NOP      
;;;221    
;;;222        // update system us counter
;;;223        do {
00004e  bf00              NOP      
;;;224            s_nUSResidule += wLoad;
000050  4a10              LDR      r2,|L35.148|
000052  6812              LDR      r2,[r2,#0]  ; s_nUSResidule
000054  4402              ADD      r2,r2,r0
000056  4b0f              LDR      r3,|L35.148|
000058  601a              STR      r2,[r3,#0]  ; s_nUSResidule
;;;225            int32_t nUS = s_nUSResidule / s_nUSUnit;
00005a  461a              MOV      r2,r3
00005c  6812              LDR      r2,[r2,#0]  ; s_nUSResidule
00005e  4b0e              LDR      r3,|L35.152|
000060  681b              LDR      r3,[r3,#0]  ; s_nUSUnit
000062  fb92f1f3          SDIV     r1,r2,r3
;;;226            s_nUSResidule -= nUS * s_nUSUnit;
000066  4a0b              LDR      r2,|L35.148|
000068  6812              LDR      r2,[r2,#0]  ; s_nUSResidule
00006a  4b0b              LDR      r3,|L35.152|
00006c  681b              LDR      r3,[r3,#0]  ; s_nUSUnit
00006e  fb012213          MLS      r2,r1,r3,r2
000072  4b08              LDR      r3,|L35.148|
000074  601a              STR      r2,[r3,#0]  ; s_nUSResidule
;;;227            s_nSystemUS += nUS;
000076  4a09              LDR      r2,|L35.156|
000078  6812              LDR      r2,[r2,#0]  ; s_nSystemUS
00007a  440a              ADD      r2,r2,r1
00007c  4b07              LDR      r3,|L35.156|
00007e  601a              STR      r2,[r3,#0]  ; s_nSystemUS
;;;228        } while(0);
000080  bf00              NOP      
;;;229    
;;;230    }
000082  4770              BX       lr
;;;231    
                          ENDP

                  |L35.132|
                          DCD      s_lSystemClockCounts
                  |L35.136|
                          DCD      s_nMSResidule
                  |L35.140|
                          DCD      s_nMSUnit
                  |L35.144|
                          DCD      s_nSystemMS
                  |L35.148|
                          DCD      s_nUSResidule
                  |L35.152|
                          DCD      s_nUSUnit
                  |L35.156|
                          DCD      s_nSystemUS

                          AREA ||.data||, DATA, ALIGN=3

                  g_lLastTimeStamp
000000  00000000          DCQ      0x0000000000000000
000004  00000000
                  s_lOldTimestamp
                          %        8
                  g_nOffset
                          DCD      0x00000000
                  s_nUSUnit
                          DCD      0x00000001
                  s_nMSUnit
                          DCD      0x00000001
                  s_nMSResidule
                          DCD      0x00000000
                  s_nUSResidule
                          DCD      0x00000000
                  s_nSystemMS
                          DCD      0x00000000
                  s_nSystemUS
                          DCD      0x00000000
                          DCD      0x00000000
                  s_lSystemClockCounts
000030  00000000          DCQ      0x0000000000000000
000034  00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __perf_counter_init

;*** Start embedded assembler ***

#line 1 "C:/Users/qizha/AppData/Local/Arm/Packs/GorgonMeducer/perf_counter/2.2.3/perf_counter.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_perf_counter_c_5877411c____REV16|
#line 208 "C:\\Users\\qizha\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.9.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___14_perf_counter_c_5877411c____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_perf_counter_c_5877411c____REVSH|
#line 223
|__asm___14_perf_counter_c_5877411c____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_perf_counter_c_5877411c____RRX|
#line 410
|__asm___14_perf_counter_c_5877411c____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
