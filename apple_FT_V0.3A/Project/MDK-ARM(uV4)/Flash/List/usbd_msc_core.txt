; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\usbd_msc_core.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\usbd_msc_core.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\usbd_msc_core.crf ..\..\Libraries\STM32_USB_Device_Library\Class\msc\src\usbd_msc_core.c]
                          THUMB

                          AREA ||i.USBD_MSC_DataIn||, CODE, READONLY, ALIGN=1

                  USBD_MSC_DataIn PROC
;;;432    */
;;;433    uint8_t  USBD_MSC_DataIn (void  *pdev, 
000000  b570              PUSH     {r4-r6,lr}
;;;434                                  uint8_t epnum)
;;;435    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;436      MSC_BOT_DataIn(pdev , epnum);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       MSC_BOT_DataIn
;;;437      return USBD_OK;
00000e  2000              MOVS     r0,#0
;;;438    }
000010  bd70              POP      {r4-r6,pc}
;;;439    
                          ENDP


                          AREA ||i.USBD_MSC_DataOut||, CODE, READONLY, ALIGN=1

                  USBD_MSC_DataOut PROC
;;;446    */
;;;447    uint8_t  USBD_MSC_DataOut (void  *pdev, 
000000  b570              PUSH     {r4-r6,lr}
;;;448                                   uint8_t epnum)
;;;449    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;450      MSC_BOT_DataOut(pdev , epnum);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       MSC_BOT_DataOut
;;;451      return USBD_OK;
00000e  2000              MOVS     r0,#0
;;;452    }
000010  bd70              POP      {r4-r6,pc}
;;;453    
                          ENDP


                          AREA ||i.USBD_MSC_DeInit||, CODE, READONLY, ALIGN=1

                  USBD_MSC_DeInit PROC
;;;302    */
;;;303    uint8_t  USBD_MSC_DeInit (void  *pdev, 
000000  b570              PUSH     {r4-r6,lr}
;;;304                                  uint8_t cfgidx)
;;;305    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;306      /* Close MSC EPs */
;;;307      DCD_EP_Close (pdev , MSC_IN_EP);
000006  2181              MOVS     r1,#0x81
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       DCD_EP_Close
;;;308      DCD_EP_Close (pdev , MSC_OUT_EP);
00000e  2101              MOVS     r1,#1
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       DCD_EP_Close
;;;309      
;;;310      /* Un Init the BOT layer */
;;;311      MSC_BOT_DeInit(pdev);   
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       MSC_BOT_DeInit
;;;312      return USBD_OK;
00001c  2000              MOVS     r0,#0
;;;313    }
00001e  bd70              POP      {r4-r6,pc}
;;;314    /**
                          ENDP


                          AREA ||i.USBD_MSC_GetCfgDesc||, CODE, READONLY, ALIGN=2

                  USBD_MSC_GetCfgDesc PROC
;;;460    */
;;;461    uint8_t  *USBD_MSC_GetCfgDesc (uint8_t speed, uint16_t *length)
000000  4602              MOV      r2,r0
;;;462    {
;;;463      *length = sizeof (USBD_MSC_CfgDesc);
000002  2020              MOVS     r0,#0x20
000004  8008              STRH     r0,[r1,#0]
;;;464      return USBD_MSC_CfgDesc;
000006  4801              LDR      r0,|L4.12|
;;;465    }
000008  4770              BX       lr
;;;466    
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      USBD_MSC_CfgDesc

                          AREA ||i.USBD_MSC_Init||, CODE, READONLY, ALIGN=1

                  USBD_MSC_Init PROC
;;;272    */
;;;273    uint8_t  USBD_MSC_Init (void  *pdev, 
000000  b570              PUSH     {r4-r6,lr}
;;;274                                uint8_t cfgidx)
;;;275    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;276      USBD_MSC_DeInit(pdev , cfgidx );
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USBD_MSC_DeInit
;;;277      
;;;278      /* Open EP IN */
;;;279      DCD_EP_Open(pdev,
00000e  2302              MOVS     r3,#2
000010  2240              MOVS     r2,#0x40
000012  2181              MOVS     r1,#0x81
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       DCD_EP_Open
;;;280                  MSC_IN_EP,
;;;281                  MSC_EPIN_SIZE,
;;;282                  USB_OTG_EP_BULK);
;;;283      
;;;284      /* Open EP OUT */
;;;285      DCD_EP_Open(pdev,
00001a  2302              MOVS     r3,#2
00001c  2240              MOVS     r2,#0x40
00001e  2101              MOVS     r1,#1
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       DCD_EP_Open
;;;286                  MSC_OUT_EP,
;;;287                  MSC_EPOUT_SIZE,
;;;288                  USB_OTG_EP_BULK);
;;;289     
;;;290      /* Init the BOT  layer */
;;;291      MSC_BOT_Init(pdev); 
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       MSC_BOT_Init
;;;292      
;;;293      return USBD_OK;
00002c  2000              MOVS     r0,#0
;;;294    }
00002e  bd70              POP      {r4-r6,pc}
;;;295    
                          ENDP


                          AREA ||i.USBD_MSC_Setup||, CODE, READONLY, ALIGN=2

                  USBD_MSC_Setup PROC
;;;320    */
;;;321    uint8_t  USBD_MSC_Setup (void  *pdev, USB_SETUP_REQ *req)
000000  b570              PUSH     {r4-r6,lr}
;;;322    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;323      
;;;324      switch (req->bmRequest & USB_REQ_TYPE_MASK)
000006  7820              LDRB     r0,[r4,#0]
000008  f0000060          AND      r0,r0,#0x60
00000c  2800              CMP      r0,#0
00000e  d049              BEQ      |L6.164|
000010  2820              CMP      r0,#0x20
000012  d17b              BNE      |L6.268|
;;;325      {
;;;326    
;;;327      /* Class request */
;;;328      case USB_REQ_TYPE_CLASS :
;;;329        switch (req->bRequest)
000014  7860              LDRB     r0,[r4,#1]
000016  28fe              CMP      r0,#0xfe
000018  d002              BEQ      |L6.32|
00001a  28ff              CMP      r0,#0xff
00001c  d13a              BNE      |L6.148|
00001e  e025              B        |L6.108|
                  |L6.32|
;;;330        {
;;;331        case BOT_GET_MAX_LUN :
;;;332    
;;;333          if((req->wValue  == 0) && 
000020  8860              LDRH     r0,[r4,#2]
000022  b9e0              CBNZ     r0,|L6.94|
;;;334             (req->wLength == 1) &&
000024  88e0              LDRH     r0,[r4,#6]
000026  2801              CMP      r0,#1
000028  d119              BNE      |L6.94|
;;;335             ((req->bmRequest & 0x80) == 0x80))
00002a  7820              LDRB     r0,[r4,#0]
00002c  f0000080          AND      r0,r0,#0x80
000030  2880              CMP      r0,#0x80
000032  d114              BNE      |L6.94|
;;;336          {
;;;337            USBD_MSC_MaxLun = USBD_STORAGE_fops->GetMaxLun();
000034  4937              LDR      r1,|L6.276|
000036  6809              LDR      r1,[r1,#0]  ; USBD_STORAGE_fops
000038  6988              LDR      r0,[r1,#0x18]
00003a  4780              BLX      r0
00003c  4936              LDR      r1,|L6.280|
00003e  7008              STRB     r0,[r1,#0]
;;;338            if(USBD_MSC_MaxLun > 0)
000040  4608              MOV      r0,r1
000042  7800              LDRB     r0,[r0,#0]  ; USBD_MSC_MaxLun
000044  2800              CMP      r0,#0
000046  dd04              BLE      |L6.82|
;;;339            {
;;;340               USBD_CtlSendData (pdev,
000048  2201              MOVS     r2,#1
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       USBD_CtlSendData
000050  e00b              B        |L6.106|
                  |L6.82|
;;;341                                 &USBD_MSC_MaxLun,
;;;342                                  1);
;;;343            }
;;;344            else
;;;345            {
;;;346              USBD_CtlError(pdev , req);
000052  4621              MOV      r1,r4
000054  4628              MOV      r0,r5
000056  f7fffffe          BL       USBD_CtlError
;;;347              return USBD_FAIL; 
00005a  2002              MOVS     r0,#2
                  |L6.92|
;;;348              
;;;349            }
;;;350          }
;;;351          else
;;;352          {
;;;353             USBD_CtlError(pdev , req);
;;;354             return USBD_FAIL; 
;;;355          }
;;;356          break;
;;;357          
;;;358        case BOT_RESET :
;;;359          if((req->wValue  == 0) && 
;;;360             (req->wLength == 0) &&
;;;361            ((req->bmRequest & 0x80) != 0x80))
;;;362          {      
;;;363             MSC_BOT_Reset(pdev);
;;;364          }
;;;365          else
;;;366          {
;;;367             USBD_CtlError(pdev , req);
;;;368             return USBD_FAIL; 
;;;369          }
;;;370          break;
;;;371    
;;;372        default:
;;;373           USBD_CtlError(pdev , req);
;;;374           return USBD_FAIL; 
;;;375        }
;;;376        break;
;;;377      /* Interface & Endpoint request */
;;;378      case USB_REQ_TYPE_STANDARD:
;;;379        switch (req->bRequest)
;;;380        {
;;;381        case USB_REQ_GET_INTERFACE :
;;;382          USBD_CtlSendData (pdev,
;;;383                            &USBD_MSC_AltSet,
;;;384                            1);
;;;385          break;
;;;386          
;;;387        case USB_REQ_SET_INTERFACE :
;;;388          USBD_MSC_AltSet = (uint8_t)(req->wValue);
;;;389          break;
;;;390        
;;;391        case USB_REQ_CLEAR_FEATURE:  
;;;392          
;;;393          /* Flush the FIFO and Clear the stall status */    
;;;394          DCD_EP_Flush(pdev, (uint8_t)req->wIndex);
;;;395          
;;;396          /* Re-activate the EP */      
;;;397          DCD_EP_Close (pdev , (uint8_t)req->wIndex);
;;;398          if((((uint8_t)req->wIndex) & 0x80) == 0x80)
;;;399          {
;;;400            DCD_EP_Open(pdev,
;;;401                        ((uint8_t)req->wIndex),
;;;402                        MSC_EPIN_SIZE,
;;;403                        USB_OTG_EP_BULK);
;;;404          }
;;;405          else
;;;406          {
;;;407            DCD_EP_Open(pdev,
;;;408                        ((uint8_t)req->wIndex),
;;;409                        MSC_EPOUT_SIZE,
;;;410                        USB_OTG_EP_BULK);
;;;411          }
;;;412          
;;;413          /* Handle BOT error */
;;;414          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
;;;415          break;
;;;416          
;;;417        }  
;;;418        break;
;;;419       
;;;420      default:
;;;421        break;
;;;422      }
;;;423      return USBD_OK;
;;;424    }
00005c  bd70              POP      {r4-r6,pc}
                  |L6.94|
00005e  4621              MOV      r1,r4                 ;353
000060  4628              MOV      r0,r5                 ;353
000062  f7fffffe          BL       USBD_CtlError
000066  2002              MOVS     r0,#2                 ;354
000068  e7f8              B        |L6.92|
                  |L6.106|
00006a  e019              B        |L6.160|
                  |L6.108|
00006c  8860              LDRH     r0,[r4,#2]            ;359
00006e  b950              CBNZ     r0,|L6.134|
000070  88e0              LDRH     r0,[r4,#6]            ;360
000072  b940              CBNZ     r0,|L6.134|
000074  7820              LDRB     r0,[r4,#0]            ;361
000076  f0000080          AND      r0,r0,#0x80           ;361
00007a  2880              CMP      r0,#0x80              ;361
00007c  d003              BEQ      |L6.134|
00007e  4628              MOV      r0,r5                 ;363
000080  f7fffffe          BL       MSC_BOT_Reset
000084  e005              B        |L6.146|
                  |L6.134|
000086  4621              MOV      r1,r4                 ;367
000088  4628              MOV      r0,r5                 ;367
00008a  f7fffffe          BL       USBD_CtlError
00008e  2002              MOVS     r0,#2                 ;368
000090  e7e4              B        |L6.92|
                  |L6.146|
000092  e005              B        |L6.160|
                  |L6.148|
000094  4621              MOV      r1,r4                 ;373
000096  4628              MOV      r0,r5                 ;373
000098  f7fffffe          BL       USBD_CtlError
00009c  2002              MOVS     r0,#2                 ;374
00009e  e7dd              B        |L6.92|
                  |L6.160|
0000a0  bf00              NOP                            ;356
0000a2  e034              B        |L6.270|
                  |L6.164|
0000a4  7860              LDRB     r0,[r4,#1]            ;379
0000a6  2801              CMP      r0,#1                 ;379
0000a8  d00e              BEQ      |L6.200|
0000aa  280a              CMP      r0,#0xa               ;379
0000ac  d002              BEQ      |L6.180|
0000ae  280b              CMP      r0,#0xb               ;379
0000b0  d129              BNE      |L6.262|
0000b2  e005              B        |L6.192|
                  |L6.180|
0000b4  2201              MOVS     r2,#1                 ;382
0000b6  4919              LDR      r1,|L6.284|
0000b8  4628              MOV      r0,r5                 ;382
0000ba  f7fffffe          BL       USBD_CtlSendData
0000be  e022              B        |L6.262|
                  |L6.192|
0000c0  78a0              LDRB     r0,[r4,#2]            ;388
0000c2  4916              LDR      r1,|L6.284|
0000c4  7008              STRB     r0,[r1,#0]            ;388
0000c6  e01e              B        |L6.262|
                  |L6.200|
0000c8  7921              LDRB     r1,[r4,#4]            ;394
0000ca  4628              MOV      r0,r5                 ;394
0000cc  f7fffffe          BL       DCD_EP_Flush
0000d0  7921              LDRB     r1,[r4,#4]            ;397
0000d2  4628              MOV      r0,r5                 ;397
0000d4  f7fffffe          BL       DCD_EP_Close
0000d8  7920              LDRB     r0,[r4,#4]            ;398
0000da  f0000080          AND      r0,r0,#0x80           ;398
0000de  2880              CMP      r0,#0x80              ;398
0000e0  d106              BNE      |L6.240|
0000e2  7921              LDRB     r1,[r4,#4]            ;400
0000e4  2302              MOVS     r3,#2                 ;400
0000e6  2240              MOVS     r2,#0x40              ;400
0000e8  4628              MOV      r0,r5                 ;400
0000ea  f7fffffe          BL       DCD_EP_Open
0000ee  e005              B        |L6.252|
                  |L6.240|
0000f0  7921              LDRB     r1,[r4,#4]            ;407
0000f2  2302              MOVS     r3,#2                 ;407
0000f4  2240              MOVS     r2,#0x40              ;407
0000f6  4628              MOV      r0,r5                 ;407
0000f8  f7fffffe          BL       DCD_EP_Open
                  |L6.252|
0000fc  7921              LDRB     r1,[r4,#4]            ;414
0000fe  4628              MOV      r0,r5                 ;414
000100  f7fffffe          BL       MSC_BOT_CplClrFeature
000104  bf00              NOP                            ;415
                  |L6.262|
000106  bf00              NOP                            ;385
000108  e001              B        |L6.270|
00010a  e7ff              B        |L6.268|
                  |L6.268|
00010c  bf00              NOP                            ;421
                  |L6.270|
00010e  bf00              NOP                            ;376
000110  2000              MOVS     r0,#0                 ;423
000112  e7a3              B        |L6.92|
;;;425    
                          ENDP

                  |L6.276|
                          DCD      USBD_STORAGE_fops
                  |L6.280|
                          DCD      USBD_MSC_MaxLun
                  |L6.284|
                          DCD      USBD_MSC_AltSet

                          AREA ||.data||, DATA, ALIGN=2

                  USBD_MSC_cb
                          DCD      USBD_MSC_Init
                          DCD      USBD_MSC_DeInit
                          DCD      USBD_MSC_Setup
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      USBD_MSC_DataIn
                          DCD      USBD_MSC_DataOut
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      USBD_MSC_GetCfgDesc
                  USBD_MSC_CfgDesc
00002c  09022000          DCB      0x09,0x02,0x20,0x00
000030  010104c0          DCB      0x01,0x01,0x04,0xc0
000034  32090400          DCB      0x32,0x09,0x04,0x00
000038  00020806          DCB      0x00,0x02,0x08,0x06
00003c  50050705          DCB      0x50,0x05,0x07,0x05
000040  81024000          DCB      0x81,0x02,0x40,0x00
000044  00070501          DCB      0x00,0x07,0x05,0x01
000048  02400000          DCB      0x02,0x40,0x00,0x00
                  USBD_MSC_MaxLun
00004c  00                DCB      0x00
                  USBD_MSC_AltSet
00004d  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\Libraries\\STM32_USB_Device_Library\\Class\\msc\\src\\usbd_msc_core.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_usbd_msc_core_c_773b89ee____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_usbd_msc_core_c_773b89ee____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_usbd_msc_core_c_773b89ee____REVSH|
#line 144
|__asm___15_usbd_msc_core_c_773b89ee____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
