; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\test_ram.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\test_ram.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\test_ram.crf ..\..\User\chip_ft\test_ram.c]
                          THUMB

                          AREA ||i.ram_code_send||, CODE, READONLY, ALIGN=1

                  ram_code_send PROC
;;;99     *******************************************************************************/
;;;100    static fsm_rt_t ram_code_send(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;101    {
;;;102     
;;;103        uint8_t temp;	
;;;104        uint8_t rd[2];
;;;105        uint16_t apple_cal_crc16;
;;;106        
;;;107        //运行代码写入code区
;;;108        write_apple_code_zone();
000002  f7fffffe          BL       write_apple_code_zone
;;;109        //运行代码大小及CRC写入CRC对应寄存器
;;;110        write_apple_crc_zone();	
000006  f7fffffe          BL       write_apple_crc_zone
;;;111        //设置apple启动CRC计算,0xC136 ROM_CTL[0]=1 
;;;112        temp = 0x01; 
00000a  2001              MOVS     r0,#1
00000c  9001              STR      r0,[sp,#4]
;;;113        i2c_write_register(I2C_DEV16_ADDR,&temp,ROM_CTL_REG,1);
00000e  2301              MOVS     r3,#1
000010  f24c1236          MOV      r2,#0xc136
000014  a901              ADD      r1,sp,#4
000016  2060              MOVS     r0,#0x60
000018  f7fffffe          BL       apple_write_addr16
;;;114        //等待CRC计算完成
;;;115        delay_ms(10); 	
00001c  200a              MOVS     r0,#0xa
00001e  f7fffffe          BL       bsp_DelayMS
;;;116        //读apple计算出来的CRC,0xC134/0xC135=high byte/low byte
;;;117        i2c_read_register(I2C_DEV16_ADDR,rd,ROM_CALH_REG,2); 
000022  2302              MOVS     r3,#2
000024  f24c1234          MOV      r2,#0xc134
000028  4669              MOV      r1,sp
00002a  2060              MOVS     r0,#0x60
00002c  f7fffffe          BL       apple_read_addr16
;;;118        apple_cal_crc16 = ((uint16_t)rd[0]<<8) + rd[1];	
000030  f89d0001          LDRB     r0,[sp,#1]
000034  f89d1000          LDRB     r1,[sp,#0]
000038  eb002001          ADD      r0,r0,r1,LSL #8
00003c  b284              UXTH     r4,r0
;;;119        //比对确定CRC与计算CRC,确保写入内容正确
;;;120        if(apple_cal_crc16 != CRC16_CHECK_CODE)	return fsm_rt_err_Read_bin_crc_err;	
00003e  f64740fa          MOV      r0,#0x7cfa
000042  4284              CMP      r4,r0
000044  d002              BEQ      |L1.76|
000046  f06f0041          MVN      r0,#0x41
                  |L1.74|
;;;121     
;;;122        return fsm_rt_cpl;
;;;123    }
00004a  bd1c              POP      {r2-r4,pc}
                  |L1.76|
00004c  2000              MOVS     r0,#0                 ;122
00004e  e7fc              B        |L1.74|
                          ENDP


                          AREA ||i.test_load_into_ram||, CODE, READONLY, ALIGN=2

                  test_load_into_ram PROC
;;;20     //  本函数使用的局部变量占用较多，请修改启动文件，保证堆栈空间够用
;;;21     fsm_rt_t  test_load_into_ram(void)
000000  b510              PUSH     {r4,lr}
;;;22     {
;;;23     //	DIR         DirInf;
;;;24         static enum
;;;25         {
;;;26             START = 0,
;;;27             RAM_CODE_SEND,
;;;28             WAIT_SPL_RUN,
;;;29         }s_tState = START;
;;;30         
;;;31     	static fsm_rt_t ret;
;;;32     
;;;33         timer_creat();
;;;34         
;;;35         switch(s_tState)
000002  4827              LDR      r0,|L2.160|
000004  7800              LDRB     r0,[r0,#0]  ; s_tState
000006  b120              CBZ      r0,|L2.18|
000008  2801              CMP      r0,#1
00000a  d01a              BEQ      |L2.66|
00000c  2802              CMP      r0,#2
00000e  d13c              BNE      |L2.138|
000010  e02d              B        |L2.110|
                  |L2.18|
;;;36         {
;;;37         case START:
;;;38             apple_prst();
000012  2002              MOVS     r0,#2
000014  f7fffffe          BL       socket_prst_ctl
000018  200a              MOVS     r0,#0xa
00001a  f7fffffe          BL       bsp_DelayMS
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       socket_prst_ctl
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       bsp_DelayMS
;;;39             set_apple_debug_out(ITEM_PMU_DBG_OFF);
00002a  200b              MOVS     r0,#0xb
00002c  f7fffffe          BL       set_apple_debug_out
;;;40             set_apple_debug_out(ITEM_CMU_DBG_OFF);
000030  200c              MOVS     r0,#0xc
000032  f7fffffe          BL       set_apple_debug_out
;;;41             s_tState++;
000036  481a              LDR      r0,|L2.160|
000038  7800              LDRB     r0,[r0,#0]  ; s_tState
00003a  1c40              ADDS     r0,r0,#1
00003c  4918              LDR      r1,|L2.160|
00003e  7008              STRB     r0,[r1,#0]
;;;42             //break;
;;;43             
;;;44         case RAM_CODE_SEND:
000040  bf00              NOP      
                  |L2.66|
;;;45             {
;;;46                 ret = ram_code_send();
000042  f7fffffe          BL       ram_code_send
000046  4917              LDR      r1,|L2.164|
000048  7008              STRB     r0,[r1,#0]
;;;47                 if(ret != fsm_rt_cpl)
00004a  4608              MOV      r0,r1
00004c  7800              LDRB     r0,[r0,#0]  ; ret
00004e  b100              CBZ      r0,|L2.82|
;;;48                 {
;;;49                     goto fail;
000050  e01e              B        |L2.144|
                  |L2.82|
;;;50                 }
;;;51                 logging("SUCCESS RAM load\r\n");
000052  4815              LDR      r0,|L2.168|
000054  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000056  a015              ADR      r0,|L2.172|
000058  f7fffffe          BL       logger_buffer_write
;;;52                 s_tState = WAIT_SPL_RUN;
00005c  2002              MOVS     r0,#2
00005e  4910              LDR      r1,|L2.160|
000060  7008              STRB     r0,[r1,#0]
;;;53                 timer_start(10);//
000062  4811              LDR      r0,|L2.168|
000064  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000066  300a              ADDS     r0,r0,#0xa
000068  4916              LDR      r1,|L2.196|
00006a  6008              STR      r0,[r1,#0]  ; timer
;;;54             }
;;;55             break;
00006c  e00d              B        |L2.138|
                  |L2.110|
;;;56         case WAIT_SPL_RUN:
;;;57             if(is_time_up())
00006e  480e              LDR      r0,|L2.168|
000070  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000072  4914              LDR      r1,|L2.196|
000074  6809              LDR      r1,[r1,#0]  ; timer
000076  1a40              SUBS     r0,r0,r1
000078  f06f4100          MVN      r1,#0x80000000
00007c  4288              CMP      r0,r1
00007e  d203              BCS      |L2.136|
;;;58             {
;;;59                 s_tState = START;
000080  2000              MOVS     r0,#0
000082  4907              LDR      r1,|L2.160|
000084  7008              STRB     r0,[r1,#0]
                  |L2.134|
;;;60                 return fsm_rt_cpl;
;;;61             }
;;;62             break;
;;;63         }
;;;64         return fsm_rt_on_going;
;;;65         
;;;66         fail:
;;;67         s_tState = START;
;;;68         return ret;
;;;69     }
000086  bd10              POP      {r4,pc}
                  |L2.136|
000088  bf00              NOP                            ;62
                  |L2.138|
00008a  bf00              NOP                            ;55
00008c  2001              MOVS     r0,#1                 ;64
00008e  e7fa              B        |L2.134|
                  |L2.144|
000090  2000              MOVS     r0,#0                 ;67
000092  4903              LDR      r1,|L2.160|
000094  7008              STRB     r0,[r1,#0]            ;67
000096  4803              LDR      r0,|L2.164|
000098  f9900000          LDRSB    r0,[r0,#0]            ;68  ; ret
00009c  e7f3              B        |L2.134|
;;;70     
                          ENDP

00009e  0000              DCW      0x0000
                  |L2.160|
                          DCD      s_tState
                  |L2.164|
                          DCD      ||ret||
                  |L2.168|
                          DCD      g_iRunTime
                  |L2.172|
0000ac  5b253864          DCB      "[%8d]SUCCESS RAM load\r\n",0
0000b0  5d535543
0000b4  43455353
0000b8  2052414d
0000bc  206c6f61
0000c0  640d0a00
                  |L2.196|
                          DCD      timer

                          AREA ||i.write_apple_code_zone||, CODE, READONLY, ALIGN=2

                  write_apple_code_zone PROC
;;;73     ////pattern 9
;;;74     static void write_apple_code_zone(void)
000000  b510              PUSH     {r4,lr}
;;;75     {	
;;;76     	i2c_write_register(I2C_DEV16_ADDR, (uint8_t *)spt5113c_firmware, 0, FIRMWARE_SIZE);
000002  f240337b          MOV      r3,#0x37b
000006  2200              MOVS     r2,#0
000008  4902              LDR      r1,|L3.20|
00000a  2060              MOVS     r0,#0x60
00000c  f7fffffe          BL       apple_write_addr16
;;;77     }
000010  bd10              POP      {r4,pc}
;;;78     
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      spt5113c_firmware

                          AREA ||i.write_apple_crc_zone||, CODE, READONLY, ALIGN=1

                  write_apple_crc_zone PROC
;;;78     
;;;79     static void write_apple_crc_zone(void)
000000  b508              PUSH     {r3,lr}
;;;80     {
;;;81         uint8_t wr[4];
;;;82     	//运行代码长度
;;;83     	wr[0] = ((FIRMWARE_SIZE-1)>>8)&0xff;	
000002  2003              MOVS     r0,#3
000004  f88d0000          STRB     r0,[sp,#0]
;;;84     	wr[1] = (FIRMWARE_SIZE-1)&0xff;
000008  207a              MOVS     r0,#0x7a
00000a  f88d0001          STRB     r0,[sp,#1]
;;;85     	//运行代码CRC
;;;86         wr[2] = (CRC16_CHECK_CODE>>8)&0xff;
00000e  207c              MOVS     r0,#0x7c
000010  f88d0002          STRB     r0,[sp,#2]
;;;87         wr[3] = CRC16_CHECK_CODE&0xff;
000014  20fa              MOVS     r0,#0xfa
000016  f88d0003          STRB     r0,[sp,#3]
;;;88     	//写入CRC区
;;;89     	i2c_write_register(I2C_DEV16_ADDR,wr,ROM_LENH_REG,4);	
00001a  2304              MOVS     r3,#4
00001c  f24c1230          MOV      r2,#0xc130
000020  4669              MOV      r1,sp
000022  2060              MOVS     r0,#0x60
000024  f7fffffe          BL       apple_write_addr16
;;;90     }
000028  bd08              POP      {r3,pc}
;;;91     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  spt5113c_firmware
000000  02016de4          DCB      0x02,0x01,0x6d,0xe4
000004  f58e90c3          DCB      0xf5,0x8e,0x90,0xc3
000008  03f01202          DCB      0x03,0xf0,0x12,0x02
00000c  b81202f4          DCB      0xb8,0x12,0x02,0xf4
000010  1202da12          DCB      0x12,0x02,0xda,0x12
000014  005e90c1          DCB      0x00,0x5e,0x90,0xc1
000018  137459f0          DCB      0x13,0x74,0x59,0xf0
00001c  90c11074          DCB      0x90,0xc1,0x10,0x74
000020  10f090c8          DCB      0x10,0xf0,0x90,0xc8
000024  03e05410          DCB      0x03,0xe0,0x54,0x10
000028  641070f6          DCB      0x64,0x10,0x70,0xf6
00002c  7410f090          DCB      0x74,0x10,0xf0,0x90
000030  c303745a          DCB      0xc3,0x03,0x74,0x5a
000034  f090c803          DCB      0xf0,0x90,0xc8,0x03
000038  e030e208          DCB      0xe0,0x30,0xe2,0x08
00003c  7404f012          DCB      0x74,0x04,0xf0,0x12
000040  029380d8          DCB      0x02,0x93,0x80,0xd8
000044  1201f912          DCB      0x12,0x01,0xf9,0x12
000048  032d80d0          DCB      0x03,0x2d,0x80,0xd0
00004c  010b0002          DCB      0x01,0x0b,0x00,0x02
000050  08000001          DCB      0x08,0x00,0x00,0x01
000054  0a00c100          DCB      0x0a,0x00,0xc1,0x00
000058  00000002          DCB      0x00,0x00,0x00,0x02
00005c  031d90c1          DCB      0x03,0x1d,0x90,0xc1
000060  01e04410          DCB      0x01,0xe0,0x44,0x10
000064  f0e4fbfa          DCB      0xf0,0xe4,0xfb,0xfa
000068  ae02eb78          DCB      0xae,0x02,0xeb,0x78
00006c  02c333ce          DCB      0x02,0xc3,0x33,0xce
000070  33ced8f9          DCB      0x33,0xce,0xd8,0xf9
000074  2420ffee          DCB      0x24,0x20,0xff,0xee
000078  34c8fcad          DCB      0x34,0xc8,0xfc,0xad
00007c  07eb25e0          DCB      0x07,0xeb,0x25,0xe0
000080  ffea33fe          DCB      0xff,0xea,0x33,0xfe
000084  74472ff5          DCB      0x74,0x47,0x2f,0xf5
000088  8274033e          DCB      0x82,0x74,0x03,0x3e
00008c  f583e493          DCB      0xf5,0x83,0xe4,0x93
000090  ff740193          DCB      0xff,0x74,0x01,0x93
000094  8d828c83          DCB      0x8d,0x82,0x8c,0x83
000098  cff0a3ef          DCB      0xcf,0xf0,0xa3,0xef
00009c  f00bbb00          DCB      0xf0,0x0b,0xbb,0x00
0000a0  010aeb64          DCB      0x01,0x0a,0xeb,0x64
0000a4  0d4a70c0          DCB      0x0d,0x4a,0x70,0xc0
0000a8  e4fafbae          DCB      0xe4,0xfa,0xfb,0xae
0000ac  02eb7802          DCB      0x02,0xeb,0x78,0x02
0000b0  c333ce33          DCB      0xc3,0x33,0xce,0x33
0000b4  ced8f924          DCB      0xce,0xd8,0xf9,0x24
0000b8  22ffee34          DCB      0x22,0xff,0xee,0x34
0000bc  c8fcad07          DCB      0xc8,0xfc,0xad,0x07
0000c0  eb25e0ff          DCB      0xeb,0x25,0xe0,0xff
0000c4  ea33fe74          DCB      0xea,0x33,0xfe,0x74
0000c8  612ff582          DCB      0x61,0x2f,0xf5,0x82
0000cc  74033ef5          DCB      0x74,0x03,0x3e,0xf5
0000d0  83e493ff          DCB      0x83,0xe4,0x93,0xff
0000d4  7401938d          DCB      0x74,0x01,0x93,0x8d
0000d8  828c83cf          DCB      0x82,0x8c,0x83,0xcf
0000dc  f0a3eff0          DCB      0xf0,0xa3,0xef,0xf0
0000e0  0bbb0001          DCB      0x0b,0xbb,0x00,0x01
0000e4  0aeb640d          DCB      0x0a,0xeb,0x64,0x0d
0000e8  4a70c090          DCB      0x4a,0x70,0xc0,0x90
0000ec  c806741f          DCB      0xc8,0x06,0x74,0x1f
0000f0  f0a374ff          DCB      0xf0,0xa3,0x74,0xff
0000f4  f090c808          DCB      0xf0,0x90,0xc8,0x08
0000f8  741ff0a3          DCB      0x74,0x1f,0xf0,0xa3
0000fc  74fff090          DCB      0x74,0xff,0xf0,0x90
000100  c8147433          DCB      0xc8,0x14,0x74,0x33
000104  f090c815          DCB      0xf0,0x90,0xc8,0x15
000108  7438f090          DCB      0x74,0x38,0xf0,0x90
00010c  c80c7402          DCB      0xc8,0x0c,0x74,0x02
000110  f0a374ac          DCB      0xf0,0xa3,0x74,0xac
000114  f090c80a          DCB      0xf0,0x90,0xc8,0x0a
000118  7402f0a3          DCB      0x74,0x02,0xf0,0xa3
00011c  e4f090c8          DCB      0xe4,0xf0,0x90,0xc8
000120  057404f0          DCB      0x05,0x74,0x04,0xf0
000124  90c81074          DCB      0x90,0xc8,0x10,0x74
000128  0cf0e490          DCB      0x0c,0xf0,0xe4,0x90
00012c  c811f090          DCB      0xc8,0x11,0xf0,0x90
000130  c80f7465          DCB      0xc8,0x0f,0x74,0x65
000134  f090c816          DCB      0xf0,0x90,0xc8,0x16
000138  7401f090          DCB      0x74,0x01,0xf0,0x90
00013c  c817743c          DCB      0xc8,0x17,0x74,0x3c
000140  f090c818          DCB      0xf0,0x90,0xc8,0x18
000144  7403f0a3          DCB      0x74,0x03,0xf0,0xa3
000148  74e8f090          DCB      0x74,0xe8,0xf0,0x90
00014c  c81a7403          DCB      0xc8,0x1a,0x74,0x03
000150  f0a37420          DCB      0xf0,0xa3,0x74,0x20
000154  f0e490c8          DCB      0xf0,0xe4,0x90,0xc8
000158  13f090c9          DCB      0x13,0xf0,0x90,0xc9
00015c  54f0a3f0          DCB      0x54,0xf0,0xa3,0xf0
000160  90c80274          DCB      0x90,0xc8,0x02,0x74
000164  10f090c1          DCB      0x10,0xf0,0x90,0xc1
000168  047413f0          DCB      0x04,0x74,0x13,0xf0
00016c  22787fe4          DCB      0x22,0x78,0x7f,0xe4
000170  f6d8fd75          DCB      0xf6,0xd8,0xfd,0x75
000174  81200201          DCB      0x81,0x20,0x02,0x01
000178  b4020003          DCB      0xb4,0x02,0x00,0x03
00017c  e493a3f8          DCB      0xe4,0x93,0xa3,0xf8
000180  e493a340          DCB      0xe4,0x93,0xa3,0x40
000184  03f68001          DCB      0x03,0xf6,0x80,0x01
000188  f208dff4          DCB      0xf2,0x08,0xdf,0xf4
00018c  8029e493          DCB      0x80,0x29,0xe4,0x93
000190  a3f85407          DCB      0xa3,0xf8,0x54,0x07
000194  240cc8c3          DCB      0x24,0x0c,0xc8,0xc3
000198  33c4540f          DCB      0x33,0xc4,0x54,0x0f
00019c  4420c883          DCB      0x44,0x20,0xc8,0x83
0001a0  4004f456          DCB      0x40,0x04,0xf4,0x56
0001a4  800146f6          DCB      0x80,0x01,0x46,0xf6
0001a8  dfe4800b          DCB      0xdf,0xe4,0x80,0x0b
0001ac  01020408          DCB      0x01,0x02,0x04,0x08
0001b0  10204080          DCB      0x10,0x20,0x40,0x80
0001b4  90004ce4          DCB      0x90,0x00,0x4c,0xe4
0001b8  7e019360          DCB      0x7e,0x01,0x93,0x60
0001bc  bca3ff54          DCB      0xbc,0xa3,0xff,0x54
0001c0  3f30e509          DCB      0x3f,0x30,0xe5,0x09
0001c4  541ffee4          DCB      0x54,0x1f,0xfe,0xe4
0001c8  93a36001          DCB      0x93,0xa3,0x60,0x01
0001cc  0ecf54c0          DCB      0x0e,0xcf,0x54,0xc0
0001d0  25e060a8          DCB      0x25,0xe0,0x60,0xa8
0001d4  40b8e493          DCB      0x40,0xb8,0xe4,0x93
0001d8  a3fae493          DCB      0xa3,0xfa,0xe4,0x93
0001dc  a3f8e493          DCB      0xa3,0xf8,0xe4,0x93
0001e0  a3c8c582          DCB      0xa3,0xc8,0xc5,0x82
0001e4  c8cac583          DCB      0xc8,0xca,0xc5,0x83
0001e8  caf0a3c8          DCB      0xca,0xf0,0xa3,0xc8
0001ec  c582c8ca          DCB      0xc5,0x82,0xc8,0xca
0001f0  c583cadf          DCB      0xc5,0x83,0xca,0xdf
0001f4  e9dee780          DCB      0xe9,0xde,0xe7,0x80
0001f8  bee4f50d          DCB      0xbe,0xe4,0xf5,0x0d
0001fc  f50ef50f          DCB      0xf5,0x0e,0xf5,0x0f
000200  f50cc3e5          DCB      0xf5,0x0c,0xc3,0xe5
000204  0c940d74          DCB      0x0c,0x94,0x0d,0x74
000208  80948050          DCB      0x80,0x94,0x80,0x50
00020c  24af0c12          DCB      0x24,0xaf,0x0c,0x12
000210  030aef30          DCB      0x03,0x0a,0xef,0x30
000214  e317050d          DCB      0xe3,0x17,0x05,0x0d
000218  7e007401          DCB      0x7e,0x00,0x74,0x01
00021c  a80c0880          DCB      0xa8,0x0c,0x08,0x80
000220  05c333ce          DCB      0x05,0xc3,0x33,0xce
000224  33ced8f9          DCB      0x33,0xce,0xd8,0xf9
000228  420fee42          DCB      0x42,0x0f,0xee,0x42
00022c  0e050c80          DCB      0x0e,0x05,0x0c,0x80
000230  d1d3e50d          DCB      0xd1,0xd3,0xe5,0x0d
000234  94007480          DCB      0x94,0x00,0x74,0x80
000238  94804005          DCB      0x94,0x80,0x40,0x05
00023c  750a0180          DCB      0x75,0x0a,0x01,0x80
000240  03e4f50a          DCB      0x03,0xe4,0xf5,0x0a
000244  e50bc395          DCB      0xe5,0x0b,0xc3,0x95
000248  0d500385          DCB      0x0d,0x50,0x03,0x85
00024c  0d0bc3e5          DCB      0x0d,0x0b,0xc3,0xe5
000250  09950fe5          DCB      0x09,0x95,0x0f,0xe5
000254  08950e50          DCB      0x08,0x95,0x0e,0x50
000258  06850e08          DCB      0x06,0x85,0x0e,0x08
00025c  850f0990          DCB      0x85,0x0f,0x09,0x90
000260  2f00e508          DCB      0x2f,0x00,0xe5,0x08
000264  f0a3e509          DCB      0xf0,0xa3,0xe5,0x09
000268  f0228c0d          DCB      0xf0,0x22,0x8c,0x0d
00026c  8d0eef75          DCB      0x8d,0x0e,0xef,0x75
000270  f004a424          DCB      0xf0,0x04,0xa4,0x24
000274  20ffe5f0          DCB      0x20,0xff,0xe5,0xf0
000278  34c8fe8f          DCB      0x34,0xc8,0xfe,0x8f
00027c  82f583e5          DCB      0x82,0xf5,0x83,0xe5
000280  0d54c0fc          DCB      0x0d,0x54,0xc0,0xfc
000284  e04cfda3          DCB      0xe0,0x4c,0xfd,0xa3
000288  e08f828e          DCB      0xe0,0x8f,0x82,0x8e
00028c  83cdf0a3          DCB      0x83,0xcd,0xf0,0xa3
000290  edf022e4          DCB      0xed,0xf0,0x22,0xe4
000294  f50cc3e5          DCB      0xf5,0x0c,0xc3,0xe5
000298  0c940d74          DCB      0x0c,0x94,0x0d,0x74
00029c  80948050          DCB      0x80,0x94,0x80,0x50
0002a0  16af0c12          DCB      0x16,0xaf,0x0c,0x12
0002a4  030aef30          DCB      0x03,0x0a,0xef,0x30
0002a8  e2097d00          DCB      0xe2,0x09,0x7d,0x00
0002ac  7cc0af0c          DCB      0x7c,0xc0,0xaf,0x0c
0002b0  12026a05          DCB      0x12,0x02,0x6a,0x05
0002b4  0c80df22          DCB      0x0c,0x80,0xdf,0x22
0002b8  90c20274          DCB      0x90,0xc2,0x02,0x74
0002bc  08f090c2          DCB      0x08,0xf0,0x90,0xc2
0002c0  1e74c5f0          DCB      0x1e,0x74,0xc5,0xf0
0002c4  90c103e0          DCB      0x90,0xc1,0x03,0xe0
0002c8  4402f090          DCB      0x44,0x02,0xf0,0x90
0002cc  c2037415          DCB      0xc2,0x03,0x74,0x15
0002d0  f0d28390          DCB      0xf0,0xd2,0x83,0x90
0002d4  c2107401          DCB      0xc2,0x10,0x74,0x01
0002d8  f02290c1          DCB      0xf0,0x22,0x90,0xc1
0002dc  0e7427f0          DCB      0x0e,0x74,0x27,0xf0
0002e0  90c10f74          DCB      0x90,0xc1,0x0f,0x74
0002e4  2ff090c1          DCB      0x2f,0xf0,0x90,0xc1
0002e8  0de04409          DCB      0x0d,0xe0,0x44,0x09
0002ec  f043a880          DCB      0xf0,0x43,0xa8,0x80
0002f0  43b80822          DCB      0x43,0xb8,0x08,0x22
0002f4  90c20474          DCB      0x90,0xc2,0x04,0x74
0002f8  02f07598          DCB      0x02,0xf0,0x75,0x98
0002fc  7075d8c0          DCB      0x70,0x75,0xd8,0xc0
000300  75878075          DCB      0x75,0x87,0x80,0x75
000304  aa5275ba          DCB      0xaa,0x52,0x75,0xba
000308  7f22ef75          DCB      0x7f,0x22,0xef,0x75
00030c  f012a424          DCB      0xf0,0x12,0xa4,0x24
000310  69ffe5f0          DCB      0x69,0xff,0xe5,0xf0
000314  34c88f82          DCB      0x34,0xc8,0x8f,0x82
000318  f583e0ff          DCB      0xf5,0x83,0xe0,0xff
00031c  22c0e0c0          DCB      0x22,0xc0,0xe0,0xc0
000320  83c08212          DCB      0x83,0xc0,0x82,0x12
000324  033fd082          DCB      0x03,0x3f,0xd0,0x82
000328  d083d0e0          DCB      0xd0,0x83,0xd0,0xe0
00032c  32e50a60          DCB      0x32,0xe5,0x0a,0x60
000330  05af0b12          DCB      0x05,0xaf,0x0b,0x12
000334  0337228f          DCB      0x03,0x37,0x22,0x8f
000338  993099fd          DCB      0x99,0x30,0x99,0xfd
00033c  c2992290          DCB      0xc2,0x99,0x22,0x90
000340  c210e044          DCB      0xc2,0x10,0xe0,0x44
000344  02f022d8          DCB      0x02,0xf0,0x22,0xd8
000348  00d800d8          DCB      0x00,0xd8,0x00,0xd8
00034c  00d800d8          DCB      0x00,0xd8,0x00,0xd8
000350  00d800d8          DCB      0x00,0xd8,0x00,0xd8
000354  00d800d8          DCB      0x00,0xd8,0x00,0xd8
000358  00d800d8          DCB      0x00,0xd8,0x00,0xd8
00035c  00d800d8          DCB      0x00,0xd8,0x00,0xd8
000360  00000100          DCB      0x00,0x00,0x01,0x00
000364  02000400          DCB      0x02,0x00,0x04,0x00
000368  08001000          DCB      0x08,0x00,0x10,0x00
00036c  20004000          DCB      0x20,0x00,0x40,0x00
000370  80010002          DCB      0x80,0x01,0x00,0x02
000374  00040008          DCB      0x00,0x04,0x00,0x08
000378  001000            DCB      0x00,0x10,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  s_tState
000000  00                DCB      0x00
                  ||ret||
000001  000000            DCB      0x00,0x00,0x00
                  timer
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\chip_ft\\test_ram.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_test_ram_c_41ec18e0____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_test_ram_c_41ec18e0____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_test_ram_c_41ec18e0____REVSH|
#line 144
|__asm___10_test_ram_c_41ec18e0____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
