; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\demo_spi_flash.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\demo_spi_flash.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\demo_spi_flash.crf ..\..\User\demo_spi_flash.c]
                          THUMB

                          AREA ||i.DemoSpiFlash||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  DemoSpiFlash PROC
;;;42     */
;;;43     void DemoSpiFlash(uint8_t cmd)
000000  b570              PUSH     {r4-r6,lr}
;;;44     {
000002  4605              MOV      r5,r0
;;;45         static uint8_t init_flg = 0;
;;;46      
;;;47     	uint32_t uiReadPageNo = 0;
000004  2400              MOVS     r4,#0
;;;48         
;;;49         if(init_flg == 0)
000006  483c              LDR      r0,|L1.248|
000008  7800              LDRB     r0,[r0,#0]  ; init_flg
00000a  b910              CBNZ     r0,|L1.18|
;;;50         {
;;;51             init_flg = 1;
00000c  2001              MOVS     r0,#1
00000e  493a              LDR      r1,|L1.248|
000010  7008              STRB     r0,[r1,#0]
                  |L1.18|
;;;52              
;;;53         }
;;;54         
;;;55     //	/* 检测串行Flash OK */
;;;56     //	printf("检测到串行Flash, ID = %08X, 型号: %s \r\n", g_tSF.ChipID , g_tSF.ChipName);
;;;57     //	printf("    容量 : %dM字节, 扇区大小 : %d字节\r\n", g_tSF.TotalSize/(1024*1024), g_tSF.SectorSize);
;;;58     
;;;59     //	sfDispMenu();		/* 打印命令提示 */
;;;60      
;;;61         //cmd = getchar();	/* 从串口读入一个字符 (阻塞方式) */
;;;62       
;;;63             switch (cmd)
000012  4628              MOV      r0,r5
000014  2d46              CMP      r5,#0x46
000016  d038              BEQ      |L1.138|
000018  dc08              BGT      |L1.44|
00001a  f1a00041          SUB      r0,r0,#0x41
00001e  2805              CMP      r0,#5
000020  d258              BCS      |L1.212|
000022  e8dff000          TBB      [pc,r0]
000026  0c15              DCB      0x0c,0x15
000028  1e242b00          DCB      0x1e,0x24,0x2b,0x00
                  |L1.44|
00002c  2847              CMP      r0,#0x47
00002e  d036              BEQ      |L1.158|
000030  2848              CMP      r0,#0x48
000032  d03e              BEQ      |L1.178|
000034  2867              CMP      r0,#0x67
000036  d031              BEQ      |L1.156|
000038  2868              CMP      r0,#0x68
00003a  d14b              BNE      |L1.212|
00003c  e03a              B        |L1.180|
;;;64             {
;;;65                 case 'A':
;;;66                     printf("\r\n【1 - 读串行Flash, 地址:0x%X,长度:%d字节】\r\n", TEST_ADDR, TEST_SIZE);
00003e  f44f5280          MOV      r2,#0x1000
000042  2100              MOVS     r1,#0
000044  a02d              ADR      r0,|L1.252|
000046  f7fffffe          BL       __2printf
;;;67                     sfReadTest();		/* 读串行Flash数据，并打印出来数据内容 */
00004a  f7fffffe          BL       sfReadTest
;;;68                     break;
00004e  e051              B        |L1.244|
;;;69     
;;;70                 case 'B':
;;;71                     printf("\r\n【2 - 写串行Flash, 地址:0x%X,长度:%d字节】\r\n", TEST_ADDR, TEST_SIZE);
000050  f44f5280          MOV      r2,#0x1000
000054  2100              MOVS     r1,#0
000056  a038              ADR      r0,|L1.312|
000058  f7fffffe          BL       __2printf
;;;72                     sfWriteTest();		/* 写串行Flash数据，并打印写入速度 */
00005c  f7fffffe          BL       sfWriteTest
;;;73                     break;
000060  e048              B        |L1.244|
;;;74     
;;;75                 case 'C':
;;;76                     printf("\r\n【3 - 擦除整个串行Flash】\r\n");
000062  a044              ADR      r0,|L1.372|
000064  f7fffffe          BL       __2printf
;;;77                     sfErase();			/* 擦除串行Flash数据，实际上就是写入全0xFF */
000068  f7fffffe          BL       sfErase
;;;78                     break;
00006c  e042              B        |L1.244|
;;;79     
;;;80                 case 'D':
;;;81                     printf("\r\n【4 - 写整个串行Flash, 全0x55】\r\n");
00006e  a04b              ADR      r0,|L1.412|
000070  f7fffffe          BL       __2printf
;;;82                     sfWriteAll(0x55);			/* 擦除串行Flash数据，实际上就是写入全0xFF */
000074  2055              MOVS     r0,#0x55
000076  f7fffffe          BL       sfWriteAll
;;;83                     break;
00007a  e03b              B        |L1.244|
;;;84     
;;;85                 case 'E':
;;;86                     printf("\r\n【5 - 写整个串行Flash, 全0xAA】\r\n");
00007c  a053              ADR      r0,|L1.460|
00007e  f7fffffe          BL       __2printf
;;;87                     sfWriteAll(0xAA);			/* 擦除串行Flash数据，实际上就是写入全0xFF */
000082  20aa              MOVS     r0,#0xaa
000084  f7fffffe          BL       sfWriteAll
;;;88                     break;
000088  e034              B        |L1.244|
                  |L1.138|
;;;89     
;;;90                 case 'F':
;;;91                     printf("\r\n【6 - 读整个串行Flash, %dM字节】\r\n", g_tSF.TotalSize/(1024*1024));
00008a  485c              LDR      r0,|L1.508|
00008c  6940              LDR      r0,[r0,#0x14]  ; g_tSF
00008e  0d01              LSRS     r1,r0,#20
000090  a05b              ADR      r0,|L1.512|
000092  f7fffffe          BL       __2printf
;;;92                     sfTestReadSpeed();		/* 读整个串行Flash数据，测试速度 */
000096  f7fffffe          BL       sfTestReadSpeed
;;;93                     break;
00009a  e02b              B        |L1.244|
                  |L1.156|
;;;94     
;;;95                 case 'g':
;;;96                 case 'G': /* 读取前1K */
00009c  bf00              NOP      
                  |L1.158|
;;;97                     if (uiReadPageNo > 0)
00009e  b10c              CBZ      r4,|L1.164|
;;;98                     {
;;;99                         uiReadPageNo--;
0000a0  1e64              SUBS     r4,r4,#1
0000a2  e002              B        |L1.170|
                  |L1.164|
;;;100                    }
;;;101                    else
;;;102                    {
;;;103                        printf("已经是最前\r\n");
0000a4  a062              ADR      r0,|L1.560|
0000a6  f7fffffe          BL       __2printf
                  |L1.170|
;;;104                    }
;;;105                    sfViewData(uiReadPageNo * 1024);
0000aa  02a0              LSLS     r0,r4,#10
0000ac  f7fffffe          BL       sfViewData
;;;106                    break;
0000b0  e020              B        |L1.244|
                  |L1.178|
;;;107    
;;;108                case 'H':
;;;109                case 'h': /* 读取后1K */
0000b2  bf00              NOP      
                  |L1.180|
;;;110                    if (uiReadPageNo < g_tSF.TotalSize / 1024 - 1)
0000b4  4851              LDR      r0,|L1.508|
0000b6  6940              LDR      r0,[r0,#0x14]  ; g_tSF
0000b8  2101              MOVS     r1,#1
0000ba  ebc12090          RSB      r0,r1,r0,LSR #10
0000be  42a0              CMP      r0,r4
0000c0  d901              BLS      |L1.198|
;;;111                    {
;;;112                        uiReadPageNo++;
0000c2  1c64              ADDS     r4,r4,#1
0000c4  e002              B        |L1.204|
                  |L1.198|
;;;113                    }
;;;114                    else
;;;115                    {
;;;116                        printf("已经是最后\r\n");
0000c6  a05f              ADR      r0,|L1.580|
0000c8  f7fffffe          BL       __2printf
                  |L1.204|
;;;117                    }
;;;118                    sfViewData(uiReadPageNo * 1024);
0000cc  02a0              LSLS     r0,r4,#10
0000ce  f7fffffe          BL       sfViewData
;;;119                    break;
0000d2  e00f              B        |L1.244|
                  |L1.212|
;;;120    
;;;121                default:
;;;122                    sfDispMenu();	/* 无效命令，重新打印命令提示 */
0000d4  f7fffffe          BL       sfDispMenu
;;;123                    printf("检测到串行Flash, ID = %08X, 型号: %s \r\n", g_tSF.ChipID , g_tSF.ChipName);
0000d8  4848              LDR      r0,|L1.508|
0000da  1d02              ADDS     r2,r0,#4
0000dc  6801              LDR      r1,[r0,#0]  ; g_tSF
0000de  a05e              ADR      r0,|L1.600|
0000e0  f7fffffe          BL       __2printf
;;;124                    printf("    容量 : %dM字节, 扇区大小 : %d字节\r\n", g_tSF.TotalSize/(1024*1024), g_tSF.SectorSize);
0000e4  4845              LDR      r0,|L1.508|
0000e6  8b02              LDRH     r2,[r0,#0x18]  ; g_tSF
0000e8  6940              LDR      r0,[r0,#0x14]  ; g_tSF
0000ea  0d01              LSRS     r1,r0,#20
0000ec  a066              ADR      r0,|L1.648|
0000ee  f7fffffe          BL       __2printf
;;;125                    break;
0000f2  bf00              NOP      
                  |L1.244|
0000f4  bf00              NOP                            ;68
;;;126    
;;;127            }
;;;128     
;;;129    }
0000f6  bd70              POP      {r4-r6,pc}
;;;130    
                          ENDP

                  |L1.248|
                          DCD      init_flg
                  |L1.252|
0000fc  0d0ae380          DCB      "\r\n",227,128,144,"1 - ",232,175,187,228,184,178,232,161
000100  9031202d
000104  20e8afbb
000108  e4b8b2e8
00010c  a1      
00010d  8c466c61          DCB      140,"Flash, ",229,156,176,229,157,128,":0x%X,",233,149,191
000111  73682c20
000115  e59cb0e5
000119  9d803a30
00011d  7825582c
000121  e995bf  
000124  e5baa63a          DCB      229,186,166,":%d",229,173,151,232,138,130,227,128,145,"\\"
000128  2564e5ad
00012c  97e88a82
000130  e380915c
000134  720a00            DCB      "r\n",0
000137  00                DCB      0
                  |L1.312|
000138  0d0ae380          DCB      "\r\n",227,128,144,"2 - ",229,134,153,228,184,178,232,161
00013c  9032202d
000140  20e58699
000144  e4b8b2e8
000148  a1      
000149  8c466c61          DCB      140,"Flash, ",229,156,176,229,157,128,":0x%X,",233,149,191
00014d  73682c20
000151  e59cb0e5
000155  9d803a30
000159  7825582c
00015d  e995bf  
000160  e5baa63a          DCB      229,186,166,":%d",229,173,151,232,138,130,227,128,145,"\\"
000164  2564e5ad
000168  97e88a82
00016c  e380915c
000170  720a00            DCB      "r\n",0
000173  00                DCB      0
                  |L1.372|
000174  0d0ae380          DCB      "\r\n",227,128,144,"3 - ",230,147,166,233,153,164,230,149
000178  9033202d
00017c  20e693a6
000180  e999a4e6
000184  95      
000185  b4e4b8aa          DCB      180,228,184,170,228,184,178,232,161,140,"Flash",227,128,145
000189  e4b8b2e8
00018d  a18c466c
000191  617368e3
000195  8091    
000197  5c720a00          DCB      "\\r\n",0
00019b  00                DCB      0
                  |L1.412|
00019c  0d0ae380          DCB      "\r\n",227,128,144,"4 - ",229,134,153,230,149,180,228,184
0001a0  9034202d
0001a4  20e58699
0001a8  e695b4e4
0001ac  b8      
0001ad  aae4b8b2          DCB      170,228,184,178,232,161,140,"Flash, ",229,133,168,"0x55",227
0001b1  e8a18c46
0001b5  6c617368
0001b9  2c20e585
0001bd  a8307835
0001c1  35e3    
0001c3  80915c72          DCB      128,145,"\\r\n",0
0001c7  0a00    
0001c9  00                DCB      0
0001ca  00                DCB      0
0001cb  00                DCB      0
                  |L1.460|
0001cc  0d0ae380          DCB      "\r\n",227,128,144,"5 - ",229,134,153,230,149,180,228,184
0001d0  9035202d
0001d4  20e58699
0001d8  e695b4e4
0001dc  b8      
0001dd  aae4b8b2          DCB      170,228,184,178,232,161,140,"Flash, ",229,133,168,"0xAA",227
0001e1  e8a18c46
0001e5  6c617368
0001e9  2c20e585
0001ed  a8307841
0001f1  41e3    
0001f3  80915c72          DCB      128,145,"\\r\n",0
0001f7  0a00    
0001f9  00                DCB      0
0001fa  00                DCB      0
0001fb  00                DCB      0
                  |L1.508|
                          DCD      g_tSF
                  |L1.512|
000200  0d0ae380          DCB      "\r\n",227,128,144,"6 - ",232,175,187,230,149,180,228,184
000204  9036202d
000208  20e8afbb
00020c  e695b4e4
000210  b8      
000211  aae4b8b2          DCB      170,228,184,178,232,161,140,"Flash, %dM",229,173,151,232
000215  e8a18c46
000219  6c617368
00021d  2c202564
000221  4de5ad97
000225  e8      
000226  8a82e380          DCB      138,130,227,128,145,"\\r\n",0
00022a  915c720a
00022e  00      
00022f  00                DCB      0
                  |L1.560|
000230  e5b7b2e7          DCB      229,183,178,231,187,143,230,152,175,230,156,128,229,137,141
000234  bb8fe698
000238  afe69c80
00023c  e5898d  
00023f  5c720a00          DCB      "\\r\n",0
000243  00                DCB      0
                  |L1.580|
000244  e5b7b2e7          DCB      229,183,178,231,187,143,230,152,175,230,156,128,229,144,142
000248  bb8fe698
00024c  afe69c80
000250  e5908e  
000253  5c720a00          DCB      "\\r\n",0
000257  00                DCB      0
                  |L1.600|
000258  e6a380e6          DCB      230,163,128,230,181,139,229,136,176,228,184,178,232,161,140
00025c  b58be588
000260  b0e4b8b2
000264  e8a18c  
000267  466c6173          DCB      "Flash, ID = %08X, ",229,158,139,229,143,183,": %s \r\n",0
00026b  682c2049
00026f  44203d20
000273  25303858
000277  2c20e59e
00027b  8be58fb7
00027f  3a202573
000283  200d0a00
000287  00                DCB      0
                  |L1.648|
000288  20202020          DCB      "    ",229,174,185,233,135,143," : %dM",229,173,151,232,138
00028c  e5aeb9e9
000290  878f203a
000294  2025644d
000298  e5ad97e8
00029c  8a      
00029d  822c20e6          DCB      130,", ",230,137,135,229,140,186,229,164,167,229,176,143
0002a1  8987e58c
0002a5  bae5a4a7
0002a9  e5b08f  
0002ac  203a2025          DCB      " : %d",229,173,151,232,138,130,"\r\n",0
0002b0  64e5ad97
0002b4  e88a820d
0002b8  0a00    
0002ba  00                DCB      0
0002bb  00                DCB      0

                          AREA ||i.sfDispMenu||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  sfDispMenu PROC
;;;339    */
;;;340    static void sfDispMenu(void)
000000  b510              PUSH     {r4,lr}
;;;341    {
;;;342    	printf("\r\n*******************************************\r\n");
000002  a015              ADR      r0,|L2.88|
000004  f7fffffe          BL       __2printf
;;;343    	printf("请选择操作命令:\r\n");
000008  a01f              ADR      r0,|L2.136|
00000a  f7fffffe          BL       __2printf
;;;344    	printf("【A - 读串行Flash, 地址:0x%X,长度:%d字节】\r\n", TEST_ADDR, TEST_SIZE);
00000e  f44f5280          MOV      r2,#0x1000
000012  2100              MOVS     r1,#0
000014  a023              ADR      r0,|L2.164|
000016  f7fffffe          BL       __2printf
;;;345    	printf("【B - 写串行Flash, 地址:0x%X,长度:%d字节】\r\n", TEST_ADDR, TEST_SIZE);
00001a  f44f5280          MOV      r2,#0x1000
00001e  2100              MOVS     r1,#0
000020  a02f              ADR      r0,|L2.224|
000022  f7fffffe          BL       __2printf
;;;346    	printf("【C - 擦除整个串行Flash】\r\n");
000026  a03d              ADR      r0,|L2.284|
000028  f7fffffe          BL       __2printf
;;;347    	printf("【D - 写整个串行Flash, 全0x55】\r\n");
00002c  a045              ADR      r0,|L2.324|
00002e  f7fffffe          BL       __2printf
;;;348    	printf("【E - 写整个串行Flash, 全0xAA】\r\n");
000032  a04f              ADR      r0,|L2.368|
000034  f7fffffe          BL       __2printf
;;;349    	printf("【F - 读整个串行Flash, 测试读速度】\r\n");
000038  a058              ADR      r0,|L2.412|
00003a  f7fffffe          BL       __2printf
;;;350    	printf("【G - 读取前1K，地址自动减少】\r\n");
00003e  a064              ADR      r0,|L2.464|
000040  f7fffffe          BL       __2printf
;;;351    	printf("【H - 读取后1K，地址自动增加】\r\n");
000044  a06e              ADR      r0,|L2.512|
000046  f7fffffe          BL       __2printf
;;;352    	printf("其他任意键 - 显示命令提示\r\n");
00004a  a079              ADR      r0,|L2.560|
00004c  f7fffffe          BL       __2printf
;;;353    	printf("\r\n");
000050  a080              ADR      r0,|L2.596|
000052  f7fffffe          BL       __2printf
;;;354    }
000056  bd10              POP      {r4,pc}
;;;355    
                          ENDP

                  |L2.88|
000058  0d0a2a2a          DCB      "\r\n*******************************************\r\n",0
00005c  2a2a2a2a
000060  2a2a2a2a
000064  2a2a2a2a
000068  2a2a2a2a
00006c  2a2a2a2a
000070  2a2a2a2a
000074  2a2a2a2a
000078  2a2a2a2a
00007c  2a2a2a2a
000080  2a2a2a2a
000084  2a0d0a00
                  |L2.136|
000088  e8afb7e9          DCB      232,175,183,233,128,137,230,139,169,230,147,141,228,189,156
00008c  8089e68b
000090  a9e6938d
000094  e4bd9c  
000097  e591bde4          DCB      229,145,189,228,187,164,":\r\n",0
00009b  bba43a0d
00009f  0a00    
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L2.164|
0000a4  e3809041          DCB      227,128,144,"A - ",232,175,187,228,184,178,232,161,140,"F"
0000a8  202d20e8
0000ac  afbbe4b8
0000b0  b2e8a18c
0000b4  46      
0000b5  6c617368          DCB      "lash, ",229,156,176,229,157,128,":0x%X,",233,149,191,229
0000b9  2c20e59c
0000bd  b0e59d80
0000c1  3a307825
0000c5  582ce995
0000c9  bfe5    
0000cb  baa63a25          DCB      186,166,":%d",229,173,151,232,138,130,227,128,145,"\\r\n"
0000cf  64e5ad97
0000d3  e88a82e3
0000d7  80915c72
0000db  0a      
0000dc  00                DCB      0
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
                  |L2.224|
0000e0  e3809042          DCB      227,128,144,"B - ",229,134,153,228,184,178,232,161,140,"F"
0000e4  202d20e5
0000e8  8699e4b8
0000ec  b2e8a18c
0000f0  46      
0000f1  6c617368          DCB      "lash, ",229,156,176,229,157,128,":0x%X,",233,149,191,229
0000f5  2c20e59c
0000f9  b0e59d80
0000fd  3a307825
000101  582ce995
000105  bfe5    
000107  baa63a25          DCB      186,166,":%d",229,173,151,232,138,130,227,128,145,"\\r\n"
00010b  64e5ad97
00010f  e88a82e3
000113  80915c72
000117  0a      
000118  00                DCB      0
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L2.284|
00011c  e3809043          DCB      227,128,144,"C - ",230,147,166,233,153,164,230,149,180,228
000120  202d20e6
000124  93a6e999
000128  a4e695b4
00012c  e4      
00012d  b8aae4b8          DCB      184,170,228,184,178,232,161,140,"Flash",227,128,145,"\\r"
000131  b2e8a18c
000135  466c6173
000139  68e38091
00013d  5c72    
00013f  0a00              DCB      "\n",0
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0
                  |L2.324|
000144  e3809044          DCB      227,128,144,"D - ",229,134,153,230,149,180,228,184,170,228
000148  202d20e5
00014c  8699e695
000150  b4e4b8aa
000154  e4      
000155  b8b2e8a1          DCB      184,178,232,161,140,"Flash, ",229,133,168,"0x55",227,128
000159  8c466c61
00015d  73682c20
000161  e585a830
000165  783535e3
000169  80      
00016a  915c720a          DCB      145,"\\r\n",0
00016e  00      
00016f  00                DCB      0
                  |L2.368|
000170  e3809045          DCB      227,128,144,"E - ",229,134,153,230,149,180,228,184,170,228
000174  202d20e5
000178  8699e695
00017c  b4e4b8aa
000180  e4      
000181  b8b2e8a1          DCB      184,178,232,161,140,"Flash, ",229,133,168,"0xAA",227,128
000185  8c466c61
000189  73682c20
00018d  e585a830
000191  784141e3
000195  80      
000196  915c720a          DCB      145,"\\r\n",0
00019a  00      
00019b  00                DCB      0
                  |L2.412|
00019c  e3809046          DCB      227,128,144,"F - ",232,175,187,230,149,180,228,184,170,228
0001a0  202d20e8
0001a4  afbbe695
0001a8  b4e4b8aa
0001ac  e4      
0001ad  b8b2e8a1          DCB      184,178,232,161,140,"Flash, ",230,181,139,232,175,149,232
0001b1  8c466c61
0001b5  73682c20
0001b9  e6b58be8
0001bd  af95e8  
0001c0  afbbe980          DCB      175,187,233,128,159,229,186,166,227,128,145,"\\r\n",0
0001c4  9fe5baa6
0001c8  e380915c
0001cc  720a00  
0001cf  00                DCB      0
                  |L2.464|
0001d0  e3809047          DCB      227,128,144,"G - ",232,175,187,229,143,150,229,137,141,"1"
0001d4  202d20e8
0001d8  afbbe58f
0001dc  96e5898d
0001e0  31      
0001e1  4befbc8c          DCB      "K",239,188,140,229,156,176,229,157,128,232,135,170,229,138
0001e5  e59cb0e5
0001e9  9d80e887
0001ed  aae58a  
0001f0  a8e5878f          DCB      168,229,135,143,229,176,145,227,128,145,"\\r\n",0
0001f4  e5b091e3
0001f8  80915c72
0001fc  0a00    
0001fe  00                DCB      0
0001ff  00                DCB      0
                  |L2.512|
000200  e3809048          DCB      227,128,144,"H - ",232,175,187,229,143,150,229,144,142,"1"
000204  202d20e8
000208  afbbe58f
00020c  96e5908e
000210  31      
000211  4befbc8c          DCB      "K",239,188,140,229,156,176,229,157,128,232,135,170,229,138
000215  e59cb0e5
000219  9d80e887
00021d  aae58a  
000220  a8e5a29e          DCB      168,229,162,158,229,138,160,227,128,145,"\\r\n",0
000224  e58aa0e3
000228  80915c72
00022c  0a00    
00022e  00                DCB      0
00022f  00                DCB      0
                  |L2.560|
000230  e585b6e4          DCB      229,133,182,228,187,150,228,187,187,230,132,143,233,148,174
000234  bb96e4bb
000238  bbe6848f
00023c  e994ae  
00023f  202d20e6          DCB      " - ",230,152,190,231,164,186,229,145,189,228,187,164,230
000243  98bee7a4
000247  bae591bd
00024b  e4bba4e6
00024f  8f90e7a4          DCB      143,144,231,164,186
000253  ba      
                  |L2.596|
000254  0d0a00            DCB      "\r\n",0
000257  00                DCB      0

                          AREA ||i.sfErase||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  sfErase PROC
;;;285    */
;;;286    static void sfErase(void)
000000  b570              PUSH     {r4-r6,lr}
;;;287    {
;;;288    	int32_t iTime1, iTime2;
;;;289    
;;;290    	iTime1 = bsp_GetRunTime();	/* 记下开始时间 */
000002  f7fffffe          BL       bsp_GetRunTime
000006  4604              MOV      r4,r0
;;;291    	sf_EraseChip();
000008  f7fffffe          BL       sf_EraseChip
;;;292    	iTime2 = bsp_GetRunTime();	/* 记下结束时间 */
00000c  f7fffffe          BL       bsp_GetRunTime
000010  4605              MOV      r5,r0
;;;293    
;;;294    	/* 打印读速度 */
;;;295    	printf("擦除串行Flash完成！, 耗时: %dms\r\n", iTime2 - iTime1);
000012  1b29              SUBS     r1,r5,r4
000014  a001              ADR      r0,|L3.28|
000016  f7fffffe          BL       __2printf
;;;296    	return;
;;;297    }
00001a  bd70              POP      {r4-r6,pc}
;;;298    
                          ENDP

                  |L3.28|
00001c  e693a6e9          DCB      230,147,166,233,153,164,228,184,178,232,161,140,"Flash",229
000020  99a4e4b8
000024  b2e8a18c
000028  466c6173
00002c  68e5    
00002e  ae8ce688          DCB      174,140,230,136,144,239,188,129,", ",232,128,151,230,151
000032  90efbc81
000036  2c20e880
00003a  97e697  
00003d  b63a2025          DCB      182,": %dms\r\n",0
000041  646d730d
000045  0a00    
000047  00                DCB      0

                          AREA ||i.sfReadTest||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  sfReadTest PROC
;;;138    */
;;;139    static void sfReadTest(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;140    {
000002  b081              SUB      sp,sp,#4
000004  f5ad5d80          SUB      sp,sp,#0x1000
;;;141    	uint16_t i;
;;;142    	int32_t iTime1, iTime2;
;;;143    	uint8_t buf[TEST_SIZE];
;;;144    
;;;145    	/* 起始地址 = 0， 数据长度为 256 */
;;;146    	iTime1 = bsp_GetRunTime();	/* 记下开始时间 */
000008  f7fffffe          BL       bsp_GetRunTime
00000c  4605              MOV      r5,r0
;;;147    	sf_ReadBuffer(buf, TEST_ADDR, TEST_SIZE);
00000e  f44f5280          MOV      r2,#0x1000
000012  2100              MOVS     r1,#0
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       sf_ReadBuffer
;;;148    	iTime2 = bsp_GetRunTime();	/* 记下结束时间 */
00001a  f7fffffe          BL       bsp_GetRunTime
00001e  4606              MOV      r6,r0
;;;149    	printf("读串行Flash成功，数据如下：\r\n");
000020  a016              ADR      r0,|L4.124|
000022  f7fffffe          BL       __2printf
;;;150    
;;;151    	/* 打印数据 */
;;;152    	for (i = 0; i < TEST_SIZE; i++)
000026  2400              MOVS     r4,#0
000028  e015              B        |L4.86|
                  |L4.42|
;;;153    	{
;;;154    		printf(" %02X", buf[i]);
00002a  a801              ADD      r0,sp,#4
00002c  5d01              LDRB     r1,[r0,r4]
00002e  a01e              ADR      r0,|L4.168|
000030  f7fffffe          BL       __2printf
;;;155    
;;;156    		if ((i & 31) == 31)
000034  f004001f          AND      r0,r4,#0x1f
000038  281f              CMP      r0,#0x1f
00003a  d103              BNE      |L4.68|
;;;157    		{
;;;158    			printf("\r\n");	/* 每行显示16字节数据 */
00003c  a01c              ADR      r0,|L4.176|
00003e  f7fffffe          BL       __2printf
000042  e006              B        |L4.82|
                  |L4.68|
;;;159    		}
;;;160    		else if ((i & 31) == 15)
000044  f004001f          AND      r0,r4,#0x1f
000048  280f              CMP      r0,#0xf
00004a  d102              BNE      |L4.82|
;;;161    		{
;;;162    			printf(" - ");
00004c  a019              ADR      r0,|L4.180|
00004e  f7fffffe          BL       __2printf
                  |L4.82|
000052  1c60              ADDS     r0,r4,#1              ;152
000054  b284              UXTH     r4,r0                 ;152
                  |L4.86|
000056  f5b45f80          CMP      r4,#0x1000            ;152
00005a  dbe6              BLT      |L4.42|
;;;163    		}
;;;164    	}
;;;165    
;;;166    	/* 打印读速度 */
;;;167    	printf("数据长度: %d字节, 读耗时: %dms, 读速度: %d Bytes/s\r\n", TEST_SIZE, iTime2 - iTime1, (TEST_SIZE * 1000) / (iTime2 - iTime1));
00005c  1b70              SUBS     r0,r6,r5
00005e  f44f117a          MOV      r1,#0x3e8000
000062  fb91f7f0          SDIV     r7,r1,r0
000066  1b72              SUBS     r2,r6,r5
000068  463b              MOV      r3,r7
00006a  f44f5180          MOV      r1,#0x1000
00006e  4812              LDR      r0,|L4.184|
000070  f7fffffe          BL       __2printf
;;;168    }
000074  b001              ADD      sp,sp,#4
000076  f50d5d80          ADD      sp,sp,#0x1000
00007a  bdf0              POP      {r4-r7,pc}
;;;169    
                          ENDP

                  |L4.124|
00007c  e8afbbe4          DCB      232,175,187,228,184,178,232,161,140,"Flash",230,136,144,229
000080  b8b2e8a1
000084  8c466c61
000088  7368e688
00008c  90e5    
00008e  8a9fefbc          DCB      138,159,239,188,140,230,149,176,230,141,174,229,166,130,228
000092  8ce695b0
000096  e68daee5
00009a  a682e4  
00009d  b88befbc          DCB      184,139,239,188,154,"\r\n",0
0000a1  9a0d0a00
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L4.168|
0000a8  20253032          DCB      " %02X",0
0000ac  5800    
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L4.176|
0000b0  0d0a00            DCB      "\r\n",0
0000b3  00                DCB      0
                  |L4.180|
0000b4  202d2000          DCB      " - ",0
                  |L4.184|
                          DCD      ||.conststring||

                          AREA ||i.sfTestReadSpeed||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  sfTestReadSpeed PROC
;;;178    */
;;;179    static void sfTestReadSpeed(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;180    {
000004  f5ad5d80          SUB      sp,sp,#0x1000
;;;181    	uint16_t i;
;;;182    	int32_t iTime1, iTime2;
;;;183    	uint8_t buf[TEST_SIZE];
;;;184    	uint32_t uiAddr;
;;;185    
;;;186    	/* 起始地址 = 0， 数据长度为 256 */
;;;187    	iTime1 = bsp_GetRunTime();	/* 记下开始时间 */
000008  f7fffffe          BL       bsp_GetRunTime
00000c  4606              MOV      r6,r0
;;;188    	uiAddr = 0;
00000e  2700              MOVS     r7,#0
;;;189    	for (i = 0; i < g_tSF.TotalSize / TEST_SIZE; i++, uiAddr += TEST_SIZE)
000010  2500              MOVS     r5,#0
000012  e009              B        |L5.40|
                  |L5.20|
;;;190    	{
;;;191    		sf_ReadBuffer(buf, uiAddr, TEST_SIZE);
000014  f44f5280          MOV      r2,#0x1000
000018  4639              MOV      r1,r7
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       sf_ReadBuffer
000020  1c68              ADDS     r0,r5,#1              ;189
000022  b285              UXTH     r5,r0                 ;189
000024  f5075780          ADD      r7,r7,#0x1000         ;189
                  |L5.40|
000028  480d              LDR      r0,|L5.96|
00002a  6940              LDR      r0,[r0,#0x14]         ;189  ; g_tSF
00002c  ebb53f10          CMP      r5,r0,LSR #12         ;189
000030  d3f0              BCC      |L5.20|
;;;192    	}
;;;193    	iTime2 = bsp_GetRunTime();	/* 记下结束时间 */
000032  f7fffffe          BL       bsp_GetRunTime
000036  4604              MOV      r4,r0
;;;194    
;;;195    	/* 打印读速度 */
;;;196    	printf("数据长度: %d字节, 读耗时: %dms, 读速度: %d Bytes/s\r\n", g_tSF.TotalSize, iTime2 - iTime1, (g_tSF.TotalSize * 1000) / (iTime2 - iTime1));
000038  4809              LDR      r0,|L5.96|
00003a  6940              LDR      r0,[r0,#0x14]  ; g_tSF
00003c  f44f717a          MOV      r1,#0x3e8
000040  4348              MULS     r0,r1,r0
000042  1ba1              SUBS     r1,r4,r6
000044  fbb0f8f1          UDIV     r8,r0,r1
000048  1ba2              SUBS     r2,r4,r6
00004a  4805              LDR      r0,|L5.96|
00004c  4643              MOV      r3,r8
00004e  6941              LDR      r1,[r0,#0x14]  ; g_tSF
000050  4804              LDR      r0,|L5.100|
000052  f7fffffe          BL       __2printf
;;;197    }
000056  f50d5d80          ADD      sp,sp,#0x1000
00005a  e8bd81f0          POP      {r4-r8,pc}
;;;198    
                          ENDP

00005e  0000              DCW      0x0000
                  |L5.96|
                          DCD      g_tSF
                  |L5.100|
                          DCD      ||.conststring||

                          AREA ||i.sfViewData||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  sfViewData PROC
;;;307    */
;;;308    static void sfViewData(uint32_t _uiAddr)
000000  b530              PUSH     {r4,r5,lr}
;;;309    {
000002  f2ad4d04          SUB      sp,sp,#0x404
000006  4605              MOV      r5,r0
;;;310    	uint16_t i;
;;;311    	uint8_t buf[1024];
;;;312    
;;;313    	sf_ReadBuffer(buf, _uiAddr,  1024);		/* 读数据 */
000008  f44f6280          MOV      r2,#0x400
00000c  4629              MOV      r1,r5
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       sf_ReadBuffer
;;;314    	printf("地址：0x%08X; 数据长度 = 1024\r\n", _uiAddr);
000014  4629              MOV      r1,r5
000016  a010              ADR      r0,|L6.88|
000018  f7fffffe          BL       __2printf
;;;315    
;;;316    	/* 打印数据 */
;;;317    	for (i = 0; i < 1024; i++)
00001c  2400              MOVS     r4,#0
00001e  e015              B        |L6.76|
                  |L6.32|
;;;318    	{
;;;319    		printf(" %02X", buf[i]);
000020  a801              ADD      r0,sp,#4
000022  5d01              LDRB     r1,[r0,r4]
000024  a016              ADR      r0,|L6.128|
000026  f7fffffe          BL       __2printf
;;;320    
;;;321    		if ((i & 31) == 31)
00002a  f004001f          AND      r0,r4,#0x1f
00002e  281f              CMP      r0,#0x1f
000030  d103              BNE      |L6.58|
;;;322    		{
;;;323    			printf("\r\n");	/* 每行显示16字节数据 */
000032  a012              ADR      r0,|L6.124|
000034  f7fffffe          BL       __2printf
000038  e006              B        |L6.72|
                  |L6.58|
;;;324    		}
;;;325    		else if ((i & 31) == 15)
00003a  f004001f          AND      r0,r4,#0x1f
00003e  280f              CMP      r0,#0xf
000040  d102              BNE      |L6.72|
;;;326    		{
;;;327    			printf(" - ");
000042  a011              ADR      r0,|L6.136|
000044  f7fffffe          BL       __2printf
                  |L6.72|
000048  1c60              ADDS     r0,r4,#1              ;317
00004a  b284              UXTH     r4,r0                 ;317
                  |L6.76|
00004c  f5b46f80          CMP      r4,#0x400             ;317
000050  dbe6              BLT      |L6.32|
;;;328    		}
;;;329    	}
;;;330    }
000052  f20d4d04          ADD      sp,sp,#0x404
000056  bd30              POP      {r4,r5,pc}
;;;331    
                          ENDP

                  |L6.88|
000058  e59cb0e5          DCB      229,156,176,229,157,128,239,188,154,"0x%08X; ",230,149,176
00005c  9d80efbc
000060  9a307825
000064  3038583b
000068  20e695b0
00006c  e68daee9          DCB      230,141,174,233,149,191,229,186,166," = 1024"
000070  95bfe5ba
000074  a6203d20
000078  31303234
                  |L6.124|
00007c  0d0a00            DCB      "\r\n",0
00007f  00                DCB      0
                  |L6.128|
000080  20253032          DCB      " %02X",0
000084  5800    
000086  00                DCB      0
000087  00                DCB      0
                  |L6.136|
000088  202d2000          DCB      " - ",0

                          AREA ||i.sfWriteAll||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  sfWriteAll PROC
;;;244    */
;;;245    static void sfWriteAll(uint8_t _ch)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;246    {
000004  f5ad5d80          SUB      sp,sp,#0x1000
000008  4607              MOV      r7,r0
;;;247    	uint16_t i;
;;;248    	int32_t iTime1, iTime2;
;;;249    	uint8_t buf[4 * 1024];
;;;250    
;;;251    	/* 填充测试缓冲区 */
;;;252    	for (i = 0; i < TEST_SIZE; i++)
00000a  2400              MOVS     r4,#0
00000c  e003              B        |L7.22|
                  |L7.14|
;;;253    	{
;;;254    		buf[i] = _ch;
00000e  f80d7004          STRB     r7,[sp,r4]
000012  1c60              ADDS     r0,r4,#1              ;252
000014  b284              UXTH     r4,r0                 ;252
                  |L7.22|
000016  f5b45f80          CMP      r4,#0x1000            ;252
00001a  dbf8              BLT      |L7.14|
;;;255    	}
;;;256    
;;;257    	/* 写EEPROM, 起始地址 = 0，数据长度为 256 */
;;;258    	iTime1 = bsp_GetRunTime();	/* 记下开始时间 */
00001c  f7fffffe          BL       bsp_GetRunTime
000020  4605              MOV      r5,r0
;;;259    	for (i = 0; i < g_tSF.TotalSize / g_tSF.SectorSize; i++)
000022  2400              MOVS     r4,#0
000024  e01f              B        |L7.102|
                  |L7.38|
;;;260    	{
;;;261    		if (sf_WriteBuffer(buf, i * g_tSF.SectorSize, g_tSF.SectorSize) == 0)
000026  481e              LDR      r0,|L7.160|
000028  8b02              LDRH     r2,[r0,#0x18]  ; g_tSF
00002a  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
00002c  fb00f104          MUL      r1,r0,r4
000030  4668              MOV      r0,sp
000032  f7fffffe          BL       sf_WriteBuffer
000036  b930              CBNZ     r0,|L7.70|
;;;262    		{
;;;263    			printf("写串行Flash出错！\r\n");
000038  a01a              ADR      r0,|L7.164|
00003a  f7fffffe          BL       __2printf
                  |L7.62|
;;;264    			return;
;;;265    		}
;;;266    		printf(".");
;;;267    		if (((i + 1) % 128) == 0)
;;;268    		{
;;;269    			printf("\r\n");
;;;270    		}
;;;271    	}
;;;272    	iTime2 = bsp_GetRunTime();	/* 记下结束时间 */
;;;273    
;;;274    	/* 打印读速度 */
;;;275    	printf("数据长度: %dK字节, 写耗时: %dms, 写速度: %dB/s\r\n", g_tSF.TotalSize / 1024, iTime2 - iTime1, (g_tSF.TotalSize * 1000) / (iTime2 - iTime1));
;;;276    }
00003e  f50d5d80          ADD      sp,sp,#0x1000
000042  e8bd81f0          POP      {r4-r8,pc}
                  |L7.70|
000046  a01e              ADR      r0,|L7.192|
000048  f7fffffe          BL       __2printf
00004c  1c60              ADDS     r0,r4,#1              ;267
00004e  17c1              ASRS     r1,r0,#31             ;267
000050  eb006151          ADD      r1,r0,r1,LSR #25      ;267
000054  11c9              ASRS     r1,r1,#7              ;267
000056  eba011c1          SUB      r1,r0,r1,LSL #7       ;267
00005a  b911              CBNZ     r1,|L7.98|
00005c  a019              ADR      r0,|L7.196|
00005e  f7fffffe          BL       __2printf
                  |L7.98|
000062  1c60              ADDS     r0,r4,#1              ;259
000064  b284              UXTH     r4,r0                 ;259
                  |L7.102|
000066  480e              LDR      r0,|L7.160|
000068  6940              LDR      r0,[r0,#0x14]         ;259  ; g_tSF
00006a  490d              LDR      r1,|L7.160|
00006c  8b09              LDRH     r1,[r1,#0x18]         ;259  ; g_tSF
00006e  fbb0f0f1          UDIV     r0,r0,r1              ;259
000072  42a0              CMP      r0,r4                 ;259
000074  d8d7              BHI      |L7.38|
000076  f7fffffe          BL       bsp_GetRunTime
00007a  4606              MOV      r6,r0                 ;272
00007c  4808              LDR      r0,|L7.160|
00007e  6940              LDR      r0,[r0,#0x14]         ;275  ; g_tSF
000080  f44f717a          MOV      r1,#0x3e8             ;275
000084  4348              MULS     r0,r1,r0              ;275
000086  1b71              SUBS     r1,r6,r5              ;275
000088  fbb0f8f1          UDIV     r8,r0,r1              ;275
00008c  1b72              SUBS     r2,r6,r5              ;275
00008e  4804              LDR      r0,|L7.160|
000090  6940              LDR      r0,[r0,#0x14]         ;275  ; g_tSF
000092  0a81              LSRS     r1,r0,#10             ;275
000094  4643              MOV      r3,r8                 ;275
000096  a00c              ADR      r0,|L7.200|
000098  f7fffffe          BL       __2printf
00009c  bf00              NOP      
00009e  e7ce              B        |L7.62|
;;;277    
                          ENDP

                  |L7.160|
                          DCD      g_tSF
                  |L7.164|
0000a4  e58699e4          DCB      229,134,153,228,184,178,232,161,140,"Flash",229,135,186,233
0000a8  b8b2e8a1
0000ac  8c466c61
0000b0  7368e587
0000b4  bae9    
0000b6  9499efbc          DCB      148,153,239,188,129,"\\r\n",0
0000ba  815c720a
0000be  00      
0000bf  00                DCB      0
                  |L7.192|
0000c0  2e00              DCB      ".",0
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L7.196|
0000c4  0d0a00            DCB      "\r\n",0
0000c7  00                DCB      0
                  |L7.200|
0000c8  e695b0e6          DCB      230,149,176,230,141,174,233,149,191,229,186,166,": %dK",229
0000cc  8daee995
0000d0  bfe5baa6
0000d4  3a202564
0000d8  4be5    
0000da  ad97e88a          DCB      173,151,232,138,130,", ",229,134,153,232,128,151,230,151
0000de  822c20e5
0000e2  8699e880
0000e6  97e697  
0000e9  b63a2025          DCB      182,": %dms, ",229,134,153,233,128,159,229,186,166,": %d"
0000ed  646d732c
0000f1  20e58699
0000f5  e9809fe5
0000f9  baa63a20
0000fd  2564    
0000ff  422f730d          DCB      "B/s\r\n",0
000103  0a00    
000105  00                DCB      0
000106  00                DCB      0
000107  00                DCB      0

                          AREA ||i.sfWriteTest||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  sfWriteTest PROC
;;;206    */
;;;207    static void sfWriteTest(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;208    {
000002  b081              SUB      sp,sp,#4
000004  f5ad5d80          SUB      sp,sp,#0x1000
;;;209    	uint16_t i;
;;;210    	int32_t iTime1, iTime2;
;;;211    	uint8_t buf[TEST_SIZE];
;;;212    
;;;213    	/* 填充测试缓冲区 */
;;;214    	for (i = 0; i < TEST_SIZE; i++)
000008  2400              MOVS     r4,#0
00000a  e003              B        |L8.20|
                  |L8.12|
;;;215    	{
;;;216    		buf[i] = i;
00000c  a901              ADD      r1,sp,#4
00000e  550c              STRB     r4,[r1,r4]
000010  1c60              ADDS     r0,r4,#1              ;214
000012  b284              UXTH     r4,r0                 ;214
                  |L8.20|
000014  f5b45f80          CMP      r4,#0x1000            ;214
000018  dbf8              BLT      |L8.12|
;;;217    	}
;;;218    
;;;219    	/* 写EEPROM, 起始地址 = 0，数据长度为 256 */
;;;220    	iTime1 = bsp_GetRunTime();	/* 记下开始时间 */
00001a  f7fffffe          BL       bsp_GetRunTime
00001e  4605              MOV      r5,r0
;;;221    	if (sf_WriteBuffer(buf, TEST_ADDR, TEST_SIZE) == 0)
000020  f44f5280          MOV      r2,#0x1000
000024  2100              MOVS     r1,#0
000026  a801              ADD      r0,sp,#4
000028  f7fffffe          BL       sf_WriteBuffer
00002c  b930              CBNZ     r0,|L8.60|
;;;222    	{
;;;223    		printf("写串行Flash出错！\r\n");
00002e  a00d              ADR      r0,|L8.100|
000030  f7fffffe          BL       __2printf
                  |L8.52|
;;;224    		return;
;;;225    	}
;;;226    	else
;;;227    	{
;;;228    		iTime2 = bsp_GetRunTime();	/* 记下结束时间 */
;;;229    		printf("写串行Flash成功！\r\n");
;;;230    	}
;;;231    
;;;232    
;;;233    	/* 打印读速度 */
;;;234    	printf("数据长度: %d字节, 写耗时: %dms, 写速度: %dB/s\r\n", TEST_SIZE, iTime2 - iTime1, (TEST_SIZE * 1000) / (iTime2 - iTime1));
;;;235    }
000034  b001              ADD      sp,sp,#4
000036  f50d5d80          ADD      sp,sp,#0x1000
00003a  bdf0              POP      {r4-r7,pc}
                  |L8.60|
00003c  f7fffffe          BL       bsp_GetRunTime
000040  4606              MOV      r6,r0                 ;228
000042  a00f              ADR      r0,|L8.128|
000044  f7fffffe          BL       __2printf
000048  1b70              SUBS     r0,r6,r5              ;234
00004a  f44f117a          MOV      r1,#0x3e8000          ;234
00004e  fb91f7f0          SDIV     r7,r1,r0              ;234
000052  1b72              SUBS     r2,r6,r5              ;234
000054  463b              MOV      r3,r7                 ;234
000056  f44f5180          MOV      r1,#0x1000            ;234
00005a  a010              ADR      r0,|L8.156|
00005c  f7fffffe          BL       __2printf
000060  bf00              NOP      
000062  e7e7              B        |L8.52|
;;;236    
                          ENDP

                  |L8.100|
000064  e58699e4          DCB      229,134,153,228,184,178,232,161,140,"Flash",229,135,186,233
000068  b8b2e8a1
00006c  8c466c61
000070  7368e587
000074  bae9    
000076  9499efbc          DCB      148,153,239,188,129,"\\r\n",0
00007a  815c720a
00007e  00      
00007f  00                DCB      0
                  |L8.128|
000080  e58699e4          DCB      229,134,153,228,184,178,232,161,140,"Flash",230,136,144,229
000084  b8b2e8a1
000088  8c466c61
00008c  7368e688
000090  90e5    
000092  8a9fefbc          DCB      138,159,239,188,129,"\\r\n",0
000096  815c720a
00009a  00      
00009b  00                DCB      0
                  |L8.156|
00009c  e695b0e6          DCB      230,149,176,230,141,174,233,149,191,229,186,166,": %d",229
0000a0  8daee995
0000a4  bfe5baa6
0000a8  3a202564
0000ac  e5      
0000ad  ad97e88a          DCB      173,151,232,138,130,", ",229,134,153,232,128,151,230,151
0000b1  822c20e5
0000b5  8699e880
0000b9  97e697  
0000bc  b63a2025          DCB      182,": %dms, ",229,134,153,233,128,159,229,186,166,": %d"
0000c0  646d732c
0000c4  20e58699
0000c8  e9809fe5
0000cc  baa63a20
0000d0  2564    
0000d2  422f730d          DCB      "B/s\r\n",0
0000d6  0a00    

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  e695b0e6          DCB      230,149,176,230,141,174,233,149,191,229,186,166,": %d",229
000004  8daee995
000008  bfe5baa6
00000c  3a202564
000010  e5      
000011  ad97e88a          DCB      173,151,232,138,130,", ",232,175,187,232,128,151,230,151
000015  822c20e8
000019  afbbe880
00001d  97e697  
000020  b63a2025          DCB      182,": %dms, ",232,175,187,233,128,159,229,186,166,": %d"
000024  646d732c
000028  20e8afbb
00002c  e9809fe5
000030  baa63a20
000034  2564    
000036  20427974          DCB      " Bytes/s\r\n",0
00003a  65732f73
00003e  0d0a00  

                          AREA ||.data||, DATA, ALIGN=0

                  init_flg
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\demo_spi_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_demo_spi_flash_c_7ee74ca9____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_demo_spi_flash_c_7ee74ca9____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_demo_spi_flash_c_7ee74ca9____REVSH|
#line 144
|__asm___16_demo_spi_flash_c_7ee74ca9____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
