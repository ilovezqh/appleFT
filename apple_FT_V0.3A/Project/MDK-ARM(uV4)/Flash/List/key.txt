; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\key.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\key.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\key.crf ..\..\User\key.c]
                          THUMB

                          AREA ||i.cali_current_callback||, CODE, READONLY, ALIGN=1

                  cali_current_callback PROC
;;;146    
;;;147    static void cali_current_callback(void* btn)
000000  b538              PUSH     {r3-r5,lr}
;;;148    {
000002  4605              MOV      r5,r0
;;;149        extern fsm_rt_t no_load_current_calibration(void);
;;;150        display_fill(0, 0, BSP_LCD_WIDTH, BSP_LCD_HEIGHT, BLACK); //相当于delay 450ms，执行时间450ms
000004  2000              MOVS     r0,#0
000006  f44f73a0          MOV      r3,#0x140
00000a  22f0              MOVS     r2,#0xf0
00000c  4601              MOV      r1,r0
00000e  9000              STR      r0,[sp,#0]
000010  f7fffffe          BL       display_fill
;;;151        fsm_rt_t ret;
;;;152        do
000014  bf00              NOP      
                  |L1.22|
;;;153        {
;;;154            ret = no_load_current_calibration();
000016  f7fffffe          BL       no_load_current_calibration
00001a  4604              MOV      r4,r0
;;;155        }while(ret == fsm_rt_on_going);
00001c  2c01              CMP      r4,#1
00001e  d0fa              BEQ      |L1.22|
;;;156        BEEP_KeyTone();
000020  f7fffffe          BL       BEEP_KeyTone
;;;157    }
000024  bd38              POP      {r3-r5,pc}
;;;158    
                          ENDP


                          AREA ||i.clear_logger_callback||, CODE, READONLY, ALIGN=1

                  clear_logger_callback PROC
;;;139    
;;;140    static void clear_logger_callback(void* btn)
000000  b538              PUSH     {r3-r5,lr}
;;;141    {
000002  4604              MOV      r4,r0
;;;142        //
;;;143        display_fill(0, 0, BSP_LCD_WIDTH, BSP_LCD_HEIGHT, BLACK); //相当于delay 450ms，执行时间450ms
000004  2000              MOVS     r0,#0
000006  f44f73a0          MOV      r3,#0x140
00000a  22f0              MOVS     r2,#0xf0
00000c  4601              MOV      r1,r0
00000e  9000              STR      r0,[sp,#0]
000010  f7fffffe          BL       display_fill
;;;144        test_logger_clear(); //清除文件
000014  f7fffffe          BL       test_logger_clear
;;;145    }
000018  bd38              POP      {r3-r5,pc}
;;;146    
                          ENDP


                          AREA ||i.down_btn_read_pin||, CODE, READONLY, ALIGN=2

                  down_btn_read_pin PROC
;;;52     uint8_t  up_btn_read_pin(void)      { return GPIO_ReadInputDataBit(UP_BTN_PORT,     UP_BTN_PIN);}
;;;53     uint8_t  down_btn_read_pin(void)    { return GPIO_ReadInputDataBit(DOWN_BTN_PORT,   DOWN_BTN_PIN);}
000000  b510              PUSH     {r4,lr}
000002  f44f7180          MOV      r1,#0x100
000006  4802              LDR      r0,|L3.16|
000008  f7fffffe          BL       GPIO_ReadInputDataBit
00000c  bd10              POP      {r4,pc}
;;;54     uint8_t  start_btn_read_pin(void)   { return GPIO_ReadInputDataBit(START_BTN_PORT,  START_BTN_PIN);}
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x40021000

                          AREA ||i.dut_cmd_read_pin||, CODE, READONLY, ALIGN=2

                  dut_cmd_read_pin PROC
;;;56     uint8_t  robot_cmd_read_pin(void)   { return GPIO_ReadInputDataBit(ROBOT_CMD_PORT,  ROBOT_CMD_PIN);}
;;;57     uint8_t  dut_cmd_read_pin(void)     { return GPIO_ReadInputDataBit(DUT_CMD_PORT,    DUT_CMD_PIN);}
000000  b510              PUSH     {r4,lr}
000002  2180              MOVS     r1,#0x80
000004  4801              LDR      r0,|L4.12|
000006  f7fffffe          BL       GPIO_ReadInputDataBit
00000a  bd10              POP      {r4,pc}
;;;58     uint8_t  dut_start_read_pin(void)   { return GPIO_ReadInputDataBit(DUT_START_PORT,    DUT_START_PIN);}
                          ENDP

                  |L4.12|
                          DCD      0x40020c00

                          AREA ||i.dut_start_read_pin||, CODE, READONLY, ALIGN=2

                  dut_start_read_pin PROC
;;;57     uint8_t  dut_cmd_read_pin(void)     { return GPIO_ReadInputDataBit(DUT_CMD_PORT,    DUT_CMD_PIN);}
;;;58     uint8_t  dut_start_read_pin(void)   { return GPIO_ReadInputDataBit(DUT_START_PORT,    DUT_START_PIN);}
000000  b510              PUSH     {r4,lr}
000002  f44f5100          MOV      r1,#0x2000
000006  4802              LDR      r0,|L5.16|
000008  f7fffffe          BL       GPIO_ReadInputDataBit
00000c  bd10              POP      {r4,pc}
;;;59     
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0x40020800

                          AREA ||i.esc_btn_read_pin||, CODE, READONLY, ALIGN=2

                  esc_btn_read_pin PROC
;;;54     uint8_t  start_btn_read_pin(void)   { return GPIO_ReadInputDataBit(START_BTN_PORT,  START_BTN_PIN);}
;;;55     uint8_t  esc_btn_read_pin(void)     { return GPIO_ReadInputDataBit(ESC_BTN_PORT,    ESC_BTN_PIN);}
000000  b510              PUSH     {r4,lr}
000002  f44f6180          MOV      r1,#0x400
000006  4802              LDR      r0,|L6.16|
000008  f7fffffe          BL       GPIO_ReadInputDataBit
00000c  bd10              POP      {r4,pc}
;;;56     uint8_t  robot_cmd_read_pin(void)   { return GPIO_ReadInputDataBit(ROBOT_CMD_PORT,  ROBOT_CMD_PIN);}
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0x40021000

                          AREA ||i.key_init||, CODE, READONLY, ALIGN=2

                  key_init PROC
;;;63     
;;;64     void key_init(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;65     {
;;;66         GPIO_InitTypeDef gpio_init;
;;;67     
;;;68     	/* 第1步：打开GPIO时钟 */
;;;69     	ALL_KEY_GPIO_CLK_ENABLE();
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
00000a  2101              MOVS     r1,#1
00000c  2008              MOVS     r0,#8
00000e  f7fffffe          BL       RCC_AHB1PeriphClockCmd
000012  2101              MOVS     r1,#1
000014  2010              MOVS     r0,#0x10
000016  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;70     
;;;71     	/* 第2步：配置所有的按键GPIO为浮动输入模式(实际上CPU复位后就是输入状态) */
;;;72     	gpio_init.GPIO_Mode = GPIO_Mode_IN;	                                        // GPIO_Mode_IPU; /* 设置输入 */
00001a  2000              MOVS     r0,#0
00001c  f88d0004          STRB     r0,[sp,#4]
;;;73         gpio_init.GPIO_OType = GPIO_OType_PP;
000020  f88d0006          STRB     r0,[sp,#6]
;;;74     	gpio_init.GPIO_PuPd = GPIO_PuPd_UP;
000024  2001              MOVS     r0,#1
000026  f88d0007          STRB     r0,[sp,#7]
;;;75     	gpio_init.GPIO_Speed = GPIO_Speed_50MHz; /* GPIO速度等级 */
00002a  2002              MOVS     r0,#2
00002c  f88d0005          STRB     r0,[sp,#5]
;;;76         
;;;77         gpio_init.GPIO_Pin = UP_BTN_PIN;
000030  2080              MOVS     r0,#0x80
000032  9000              STR      r0,[sp,#0]
;;;78         GPIO_Init(UP_BTN_PORT, &gpio_init);
000034  4669              MOV      r1,sp
000036  4846              LDR      r0,|L7.336|
000038  f7fffffe          BL       GPIO_Init
;;;79         
;;;80         gpio_init.GPIO_Pin = DOWN_BTN_PIN;
00003c  f44f7080          MOV      r0,#0x100
000040  9000              STR      r0,[sp,#0]
;;;81         GPIO_Init(DOWN_BTN_PORT, &gpio_init);
000042  4669              MOV      r1,sp
000044  4842              LDR      r0,|L7.336|
000046  f7fffffe          BL       GPIO_Init
;;;82         
;;;83         gpio_init.GPIO_Pin = START_BTN_PIN;
00004a  f44f7000          MOV      r0,#0x200
00004e  9000              STR      r0,[sp,#0]
;;;84         GPIO_Init(START_BTN_PORT, &gpio_init);
000050  4669              MOV      r1,sp
000052  483f              LDR      r0,|L7.336|
000054  f7fffffe          BL       GPIO_Init
;;;85         
;;;86         gpio_init.GPIO_Pin = ESC_BTN_PIN;
000058  f44f6080          MOV      r0,#0x400
00005c  9000              STR      r0,[sp,#0]
;;;87         GPIO_Init(ESC_BTN_PORT, &gpio_init);
00005e  4669              MOV      r1,sp
000060  483b              LDR      r0,|L7.336|
000062  f7fffffe          BL       GPIO_Init
;;;88         
;;;89         gpio_init.GPIO_Pin = ROBOT_CMD_PIN;
000066  f44f5080          MOV      r0,#0x1000
00006a  9000              STR      r0,[sp,#0]
;;;90         GPIO_Init(ROBOT_CMD_PORT, &gpio_init);
00006c  4669              MOV      r1,sp
00006e  4838              LDR      r0,|L7.336|
000070  f7fffffe          BL       GPIO_Init
;;;91         
;;;92         gpio_init.GPIO_Pin = DUT_CMD_PIN;
000074  2080              MOVS     r0,#0x80
000076  9000              STR      r0,[sp,#0]
;;;93         GPIO_Init(DUT_CMD_PORT, &gpio_init);
000078  4669              MOV      r1,sp
00007a  4836              LDR      r0,|L7.340|
00007c  f7fffffe          BL       GPIO_Init
;;;94         
;;;95         gpio_init.GPIO_Pin = DUT_START_PIN;
000080  f44f5000          MOV      r0,#0x2000
000084  9000              STR      r0,[sp,#0]
;;;96         GPIO_Init(DUT_START_PORT, &gpio_init);
000086  4669              MOV      r1,sp
000088  4833              LDR      r0,|L7.344|
00008a  f7fffffe          BL       GPIO_Init
;;;97     
;;;98         button_init(&up_btn,        up_btn_read_pin,    Bit_RESET);
00008e  2200              MOVS     r2,#0
000090  4932              LDR      r1,|L7.348|
000092  4833              LDR      r0,|L7.352|
000094  f7fffffe          BL       button_init
;;;99         button_init(&down_btn,      down_btn_read_pin,  Bit_RESET);
000098  2200              MOVS     r2,#0
00009a  4932              LDR      r1,|L7.356|
00009c  4832              LDR      r0,|L7.360|
00009e  f7fffffe          BL       button_init
;;;100        button_init(&start_btn,     start_btn_read_pin, Bit_RESET);
0000a2  2200              MOVS     r2,#0
0000a4  4931              LDR      r1,|L7.364|
0000a6  4832              LDR      r0,|L7.368|
0000a8  f7fffffe          BL       button_init
;;;101        button_init(&esc_btn,       esc_btn_read_pin,   Bit_RESET);
0000ac  2200              MOVS     r2,#0
0000ae  4931              LDR      r1,|L7.372|
0000b0  4831              LDR      r0,|L7.376|
0000b2  f7fffffe          BL       button_init
;;;102      
;;;103        
;;;104        if(g_eBoardType == board_v20)
0000b6  4831              LDR      r0,|L7.380|
0000b8  7800              LDRB     r0,[r0,#0]  ; g_eBoardType
0000ba  2814              CMP      r0,#0x14
0000bc  d105              BNE      |L7.202|
;;;105        {
;;;106            button_init(&robot_cmd_btn, robot_cmd_read_pin, Bit_RESET);
0000be  2200              MOVS     r2,#0
0000c0  492f              LDR      r1,|L7.384|
0000c2  4830              LDR      r0,|L7.388|
0000c4  f7fffffe          BL       button_init
0000c8  e00e              B        |L7.232|
                  |L7.202|
;;;107        }
;;;108        else
;;;109        {
;;;110            button_init(&robot_cmd_btn, robot_cmd_read_pin, Bit_SET);
0000ca  2201              MOVS     r2,#1
0000cc  492c              LDR      r1,|L7.384|
0000ce  482d              LDR      r0,|L7.388|
0000d0  f7fffffe          BL       button_init
;;;111            button_init(&dut_cmd_btn,   dut_cmd_read_pin,   Bit_SET); //CMD高时（机台给低电平，MOS管关断，CMD变高）
0000d4  2201              MOVS     r2,#1
0000d6  492c              LDR      r1,|L7.392|
0000d8  482c              LDR      r0,|L7.396|
0000da  f7fffffe          BL       button_init
;;;112            button_init(&dut_start_btn, dut_start_read_pin, Bit_SET); //CMD高时（机台给低电平，MOS管关断，CMD变高）
0000de  2201              MOVS     r2,#1
0000e0  492b              LDR      r1,|L7.400|
0000e2  482c              LDR      r0,|L7.404|
0000e4  f7fffffe          BL       button_init
                  |L7.232|
;;;113        }
;;;114    
;;;115        /* 启动测试的按键 绑定 */
;;;116        button_attach(&start_btn,       SINGLE_CLICK,  test_start_callback ); //启动
0000e8  4a2b              LDR      r2,|L7.408|
0000ea  2103              MOVS     r1,#3
0000ec  4820              LDR      r0,|L7.368|
0000ee  f7fffffe          BL       button_attach
;;;117        button_attach(&robot_cmd_btn,   SINGLE_CLICK,  test_start_callback ); //启动
0000f2  4a29              LDR      r2,|L7.408|
0000f4  2103              MOVS     r1,#3
0000f6  4823              LDR      r0,|L7.388|
0000f8  f7fffffe          BL       button_attach
;;;118        button_attach(&dut_cmd_btn,     SINGLE_CLICK,  test_start_callback ); //启动
0000fc  4a26              LDR      r2,|L7.408|
0000fe  2103              MOVS     r1,#3
000100  4822              LDR      r0,|L7.396|
000102  f7fffffe          BL       button_attach
;;;119        button_attach(&dut_start_btn,   SINGLE_CLICK,  test_start_callback ); //启动
000106  4a24              LDR      r2,|L7.408|
000108  2103              MOVS     r1,#3
00010a  4822              LDR      r0,|L7.404|
00010c  f7fffffe          BL       button_attach
;;;120     
;;;121        button_attach(&down_btn,   DOUBLE_CLICK,      clear_logger_callback ); //双击清除日志
000110  4a22              LDR      r2,|L7.412|
000112  2104              MOVS     r1,#4
000114  4814              LDR      r0,|L7.360|
000116  f7fffffe          BL       button_attach
;;;122        button_attach(&down_btn,   LONG_PRESS_START,  cali_current_callback ); //长按校准电流
00011a  4a21              LDR      r2,|L7.416|
00011c  2105              MOVS     r1,#5
00011e  4812              LDR      r0,|L7.360|
000120  f7fffffe          BL       button_attach
;;;123        
;;;124        button_start(&up_btn);
000124  480e              LDR      r0,|L7.352|
000126  f7fffffe          BL       button_start
;;;125        button_start(&down_btn);
00012a  480f              LDR      r0,|L7.360|
00012c  f7fffffe          BL       button_start
;;;126        button_start(&start_btn);
000130  480f              LDR      r0,|L7.368|
000132  f7fffffe          BL       button_start
;;;127        button_start(&esc_btn);
000136  4810              LDR      r0,|L7.376|
000138  f7fffffe          BL       button_start
;;;128        button_start(&robot_cmd_btn);
00013c  4811              LDR      r0,|L7.388|
00013e  f7fffffe          BL       button_start
;;;129        button_start(&dut_cmd_btn);
000142  4812              LDR      r0,|L7.396|
000144  f7fffffe          BL       button_start
;;;130        button_start(&dut_start_btn);
000148  4812              LDR      r0,|L7.404|
00014a  f7fffffe          BL       button_start
;;;131     
;;;132    }
00014e  bd1c              POP      {r2-r4,pc}
;;;133    
                          ENDP

                  |L7.336|
                          DCD      0x40021000
                  |L7.340|
                          DCD      0x40020c00
                  |L7.344|
                          DCD      0x40020800
                  |L7.348|
                          DCD      up_btn_read_pin
                  |L7.352|
                          DCD      up_btn
                  |L7.356|
                          DCD      down_btn_read_pin
                  |L7.360|
                          DCD      down_btn
                  |L7.364|
                          DCD      start_btn_read_pin
                  |L7.368|
                          DCD      start_btn
                  |L7.372|
                          DCD      esc_btn_read_pin
                  |L7.376|
                          DCD      esc_btn
                  |L7.380|
                          DCD      g_eBoardType
                  |L7.384|
                          DCD      robot_cmd_read_pin
                  |L7.388|
                          DCD      robot_cmd_btn
                  |L7.392|
                          DCD      dut_cmd_read_pin
                  |L7.396|
                          DCD      dut_cmd_btn
                  |L7.400|
                          DCD      dut_start_read_pin
                  |L7.404|
                          DCD      dut_start_btn
                  |L7.408|
                          DCD      test_start_callback
                  |L7.412|
                          DCD      clear_logger_callback
                  |L7.416|
                          DCD      cali_current_callback

                          AREA ||i.robot_cmd_read_pin||, CODE, READONLY, ALIGN=2

                  robot_cmd_read_pin PROC
;;;55     uint8_t  esc_btn_read_pin(void)     { return GPIO_ReadInputDataBit(ESC_BTN_PORT,    ESC_BTN_PIN);}
;;;56     uint8_t  robot_cmd_read_pin(void)   { return GPIO_ReadInputDataBit(ROBOT_CMD_PORT,  ROBOT_CMD_PIN);}
000000  b510              PUSH     {r4,lr}
000002  f44f5180          MOV      r1,#0x1000
000006  4802              LDR      r0,|L8.16|
000008  f7fffffe          BL       GPIO_ReadInputDataBit
00000c  bd10              POP      {r4,pc}
;;;57     uint8_t  dut_cmd_read_pin(void)     { return GPIO_ReadInputDataBit(DUT_CMD_PORT,    DUT_CMD_PIN);}
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x40021000

                          AREA ||i.start_btn_read_pin||, CODE, READONLY, ALIGN=2

                  start_btn_read_pin PROC
;;;53     uint8_t  down_btn_read_pin(void)    { return GPIO_ReadInputDataBit(DOWN_BTN_PORT,   DOWN_BTN_PIN);}
;;;54     uint8_t  start_btn_read_pin(void)   { return GPIO_ReadInputDataBit(START_BTN_PORT,  START_BTN_PIN);}
000000  b510              PUSH     {r4,lr}
000002  f44f7100          MOV      r1,#0x200
000006  4802              LDR      r0,|L9.16|
000008  f7fffffe          BL       GPIO_ReadInputDataBit
00000c  bd10              POP      {r4,pc}
;;;55     uint8_t  esc_btn_read_pin(void)     { return GPIO_ReadInputDataBit(ESC_BTN_PORT,    ESC_BTN_PIN);}
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40021000

                          AREA ||i.test_start_callback||, CODE, READONLY, ALIGN=1

                  test_start_callback PROC
;;;133    
;;;134    static void test_start_callback(void* btn)
000000  b510              PUSH     {r4,lr}
;;;135    {
000002  4604              MOV      r4,r0
;;;136        // do something here
;;;137        test_start_en();
000004  f7fffffe          BL       test_start_en
;;;138    }
000008  bd10              POP      {r4,pc}
;;;139    
                          ENDP


                          AREA ||i.up_btn_read_pin||, CODE, READONLY, ALIGN=2

                  up_btn_read_pin PROC
;;;51         
;;;52     uint8_t  up_btn_read_pin(void)      { return GPIO_ReadInputDataBit(UP_BTN_PORT,     UP_BTN_PIN);}
000000  b510              PUSH     {r4,lr}
000002  2180              MOVS     r1,#0x80
000004  4801              LDR      r0,|L11.12|
000006  f7fffffe          BL       GPIO_ReadInputDataBit
00000a  bd10              POP      {r4,pc}
;;;53     uint8_t  down_btn_read_pin(void)    { return GPIO_ReadInputDataBit(DOWN_BTN_PORT,   DOWN_BTN_PIN);}
                          ENDP

                  |L11.12|
                          DCD      0x40021000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  up_btn
                          %        40
                  down_btn
                          %        40
                  start_btn
                          %        40
                  esc_btn
                          %        40
                  robot_cmd_btn
                          %        40
                  dut_cmd_btn
                          %        40
                  dut_start_btn
                          %        40

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\key.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_key_c_8f814c8b____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_key_c_8f814c8b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_key_c_8f814c8b____REVSH|
#line 144
|__asm___5_key_c_8f814c8b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
