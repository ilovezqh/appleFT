; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\lcd.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\lcd.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\lcd.crf ..\..\User\lcd.c]
                          THUMB

                          AREA ||i.display_fill||, CODE, READONLY, ALIGN=1

                  display_fill PROC
;;;33     
;;;34     void display_fill(uint16_t start_x, uint16_t start_y, uint16_t end_x, uint16_t end_y, uint16_t fill_color)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;35     {
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  9e0a              LDR      r6,[sp,#0x28]
;;;36         uint8_t color[2] = { (fill_color >> 8) & 0xFF, fill_color & 0xFF };
00000e  0a30              LSRS     r0,r6,#8
000010  f88d0000          STRB     r0,[sp,#0]
000014  b2f0              UXTB     r0,r6
000016  f88d0001          STRB     r0,[sp,#1]
;;;37     
;;;38         display_set_addr(start_x, start_y, end_x - 1, end_y - 1);
00001a  1e68              SUBS     r0,r5,#1
00001c  b283              UXTH     r3,r0
00001e  1e60              SUBS     r0,r4,#1
000020  b282              UXTH     r2,r0
000022  4651              MOV      r1,r10
000024  4648              MOV      r0,r9
000026  f7fffffe          BL       display_set_addr
;;;39     
;;;40         for(uint32_t i = 0; i < end_y; i++)
00002a  2700              MOVS     r7,#0
00002c  e00b              B        |L1.70|
                  |L1.46|
;;;41         {
;;;42             for(uint32_t x = 0; x < end_x; x++)
00002e  f04f0800          MOV      r8,#0
000032  e005              B        |L1.64|
                  |L1.52|
;;;43             {
;;;44                 bsp_lcd_send_data(color, 2);
000034  2102              MOVS     r1,#2
000036  4668              MOV      r0,sp
000038  f7fffffe          BL       bsp_lcd_send_data
00003c  f1080801          ADD      r8,r8,#1              ;42
                  |L1.64|
000040  45a0              CMP      r8,r4                 ;42
000042  d3f7              BCC      |L1.52|
000044  1c7f              ADDS     r7,r7,#1              ;40
                  |L1.70|
000046  42af              CMP      r7,r5                 ;40
000048  d3f1              BCC      |L1.46|
;;;45             }
;;;46         }
;;;47     }
00004a  e8bd8ff8          POP      {r3-r11,pc}
;;;48     
                          ENDP


                          AREA ||i.display_set_addr||, CODE, READONLY, ALIGN=2

                  display_set_addr PROC
;;;11     
;;;12     void display_set_addr(uint16_t start_x, uint16_t start_y, uint16_t end_x, uint16_t end_y)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;13     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;14         uint8_t send_cmd[3] = { 0x2A, 0x2B, 0x2C };
00000c  a01a              ADR      r0,|L2.120|
00000e  6800              LDR      r0,[r0,#0]
000010  9001              STR      r0,[sp,#4]
;;;15         uint8_t send_data[4] = { 0x00 };
000012  2000              MOVS     r0,#0
000014  9000              STR      r0,[sp,#0]
;;;16     
;;;17         send_data[0] = (start_x >> 8) & 0xFF;
000016  0a20              LSRS     r0,r4,#8
000018  f88d0000          STRB     r0,[sp,#0]
;;;18         send_data[1] = start_x & 0xFF;
00001c  b2e0              UXTB     r0,r4
00001e  f88d0001          STRB     r0,[sp,#1]
;;;19         send_data[2] = (end_x >> 8) & 0xFF;
000022  0a30              LSRS     r0,r6,#8
000024  f88d0002          STRB     r0,[sp,#2]
;;;20         send_data[3] = end_x & 0xFF;
000028  b2f0              UXTB     r0,r6
00002a  f88d0003          STRB     r0,[sp,#3]
;;;21         bsp_lcd_send_cmd(send_cmd, 1);
00002e  2101              MOVS     r1,#1
000030  a801              ADD      r0,sp,#4
000032  f7fffffe          BL       bsp_lcd_send_cmd
;;;22         bsp_lcd_send_data(send_data, 4);
000036  2104              MOVS     r1,#4
000038  4668              MOV      r0,sp
00003a  f7fffffe          BL       bsp_lcd_send_data
;;;23     
;;;24         send_data[0] = (start_y >> 8) & 0xFF;
00003e  0a28              LSRS     r0,r5,#8
000040  f88d0000          STRB     r0,[sp,#0]
;;;25         send_data[1] = start_y & 0xFF;
000044  b2e8              UXTB     r0,r5
000046  f88d0001          STRB     r0,[sp,#1]
;;;26         send_data[2] = (end_y >> 8) & 0xFF;
00004a  0a38              LSRS     r0,r7,#8
00004c  f88d0002          STRB     r0,[sp,#2]
;;;27         send_data[3] = end_y & 0xFF;
000050  b2f8              UXTB     r0,r7
000052  f88d0003          STRB     r0,[sp,#3]
;;;28         bsp_lcd_send_cmd(send_cmd + 1, 1);
000056  2101              MOVS     r1,#1
000058  f10d0005          ADD      r0,sp,#5
00005c  f7fffffe          BL       bsp_lcd_send_cmd
;;;29         bsp_lcd_send_data(send_data, 4);
000060  2104              MOVS     r1,#4
000062  4668              MOV      r0,sp
000064  f7fffffe          BL       bsp_lcd_send_data
;;;30     
;;;31         bsp_lcd_send_cmd(send_cmd + 2, 1);
000068  2101              MOVS     r1,#1
00006a  f10d0006          ADD      r0,sp,#6
00006e  f7fffffe          BL       bsp_lcd_send_cmd
;;;32     }
000072  e8bd81fc          POP      {r2-r8,pc}
;;;33     
                          ENDP

000076  0000              DCW      0x0000
                  |L2.120|
000078  2a2b2c00          DCB      "*+,",0

                          AREA ||i.display_show_char||, CODE, READONLY, ALIGN=2

                  display_show_char PROC
;;;48     
;;;49     void display_show_char(uint16_t x, uint16_t y, uint8_t num, uint16_t font_color, uint16_t bg_color)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;50     {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  f8dda028          LDR      r10,[sp,#0x28]
;;;51         uint8_t f_color[2] = { (font_color >> 8) & 0xFF, font_color & 0xFF};
000010  0a28              LSRS     r0,r5,#8
000012  f88d0004          STRB     r0,[sp,#4]
000016  b2e8              UXTB     r0,r5
000018  f88d0005          STRB     r0,[sp,#5]
;;;52         uint8_t b_color[2] = { (bg_color >> 8) & 0xFF, bg_color & 0xFF};
00001c  ea4f201a          LSR      r0,r10,#8
000020  f88d0000          STRB     r0,[sp,#0]
000024  f00a00ff          AND      r0,r10,#0xff
000028  f88d0001          STRB     r0,[sp,#1]
;;;53     	uint8_t i, t;
;;;54     
;;;55     	num -= ' ';    //得到偏移后的值
00002c  f1a40020          SUB      r0,r4,#0x20
000030  b2c4              UXTB     r4,r0
;;;56     	display_set_addr(x, y, x + 7, y + 15);  //设置光标位置 
000032  f109000f          ADD      r0,r9,#0xf
000036  b283              UXTH     r3,r0
000038  f1080007          ADD      r0,r8,#7
00003c  b282              UXTH     r2,r0
00003e  4649              MOV      r1,r9
000040  4640              MOV      r0,r8
000042  f7fffffe          BL       display_set_addr
;;;57     	for(i = 0; i < 16; i++)
000046  2600              MOVS     r6,#0
000048  e018              B        |L3.124|
                  |L3.74|
;;;58     	{ 
;;;59     		for(t = 0; t < 8; t++)
00004a  2700              MOVS     r7,#0
00004c  e012              B        |L3.116|
                  |L3.78|
;;;60     		{
;;;61         		if(lcd_ascii_1608[num][i] & (1 << t))
00004e  480d              LDR      r0,|L3.132|
000050  eb001004          ADD      r0,r0,r4,LSL #4
000054  5d80              LDRB     r0,[r0,r6]
000056  2101              MOVS     r1,#1
000058  40b9              LSLS     r1,r1,r7
00005a  4008              ANDS     r0,r0,r1
00005c  b120              CBZ      r0,|L3.104|
;;;62                 {
;;;63                     bsp_lcd_send_data(f_color, 2);
00005e  2102              MOVS     r1,#2
000060  a801              ADD      r0,sp,#4
000062  f7fffffe          BL       bsp_lcd_send_data
000066  e003              B        |L3.112|
                  |L3.104|
;;;64         		}
;;;65         		else
;;;66         		{
;;;67                     bsp_lcd_send_data(b_color, 2);
000068  2102              MOVS     r1,#2
00006a  4668              MOV      r0,sp
00006c  f7fffffe          BL       bsp_lcd_send_data
                  |L3.112|
000070  1c78              ADDS     r0,r7,#1              ;59
000072  b2c7              UXTB     r7,r0                 ;59
                  |L3.116|
000074  2f08              CMP      r7,#8                 ;59
000076  dbea              BLT      |L3.78|
000078  1c70              ADDS     r0,r6,#1              ;57
00007a  b2c6              UXTB     r6,r0                 ;57
                  |L3.124|
00007c  2e10              CMP      r6,#0x10              ;57
00007e  dbe4              BLT      |L3.74|
;;;68         		}
;;;69     		}
;;;70     	}
;;;71     }
000080  e8bd87fc          POP      {r2-r10,pc}
;;;72     
                          ENDP

                  |L3.132|
                          DCD      lcd_ascii_1608

                          AREA ||i.display_show_log||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  display_show_log PROC
;;;337     */
;;;338    void display_show_log(disp_show_type_enum show_type, const char *fmt, ...)
000000  b40f              PUSH     {r0-r3}
;;;339    {
000002  b538              PUSH     {r3-r5,lr}
000004  4604              MOV      r4,r0
;;;340        int32_t output_len = 0;
000006  2500              MOVS     r5,#0
;;;341        va_list args;
;;;342    
;;;343        memset(log_buf, 0x00, sizeof(log_buf));
000008  2140              MOVS     r1,#0x40
00000a  4824              LDR      r0,|L4.156|
00000c  f7fffffe          BL       __aeabi_memclr
;;;344        if(show_type == DISP_SHOW_LOG)
000010  b144              CBZ      r4,|L4.36|
;;;345        {
;;;346            //log_buf[0] = 0xAA;
;;;347        }
;;;348        else if(show_type == DISP_SHOW_NG)
000012  2c01              CMP      r4,#1
000014  d006              BEQ      |L4.36|
;;;349        {
;;;350            //log_buf[0] = 0xBB;
;;;351        }
;;;352        else if(show_type == DISP_SHOW_PASS)
000016  2c02              CMP      r4,#2
000018  d004              BEQ      |L4.36|
;;;353        {
;;;354            //log_buf[0] = 0xCC;
;;;355        }
;;;356        else if(show_type == DISP_SHOW_WARN)
00001a  2c03              CMP      r4,#3
00001c  d002              BEQ      |L4.36|
                  |L4.30|
;;;357        {
;;;358            //log_buf[0] = 0xCC;
;;;359        }
;;;360        else
;;;361        {
;;;362            return ;
;;;363        }
;;;364        va_start(args, fmt);
;;;365        output_len = vsnprintf(log_buf + 1, sizeof(log_buf) - 1, fmt, args) + 1;
;;;366        va_end(args);
;;;367        log_buf[output_len] = '\n';
;;;368        output_len++;
;;;369    
;;;370        DEBUG("%s", log_buf + 1);
;;;371        
;;;372        if(show_type == DISP_SHOW_LOG)
;;;373        {
;;;374            display_show_string(log_buf+1, WHITE, BLACK);
;;;375        }
;;;376        else if(show_type == DISP_SHOW_NG)
;;;377        {
;;;378            display_show_string(log_buf+1, RED, BLACK);
;;;379        }
;;;380        else if(show_type == DISP_SHOW_PASS)
;;;381        {
;;;382            display_show_string(log_buf+1, GREEN, BLACK);
;;;383        }
;;;384        else if(show_type == DISP_SHOW_WARN)
;;;385        {
;;;386            display_show_string(log_buf+1, YELLOW, BLACK);
;;;387        }
;;;388                
;;;389    }
00001e  bc38              POP      {r3-r5}
000020  f85dfb14          LDR      pc,[sp],#0x14
                  |L4.36|
000024  a806              ADD      r0,sp,#0x18           ;364
000026  9000              STR      r0,[sp,#0]            ;364
000028  213f              MOVS     r1,#0x3f              ;365
00002a  481c              LDR      r0,|L4.156|
00002c  1c40              ADDS     r0,r0,#1              ;365
00002e  9b00              LDR      r3,[sp,#0]            ;365
000030  9a05              LDR      r2,[sp,#0x14]         ;365
000032  f7fffffe          BL       vsnprintf
000036  1c45              ADDS     r5,r0,#1              ;365
000038  2000              MOVS     r0,#0                 ;366
00003a  9000              STR      r0,[sp,#0]            ;366
00003c  200a              MOVS     r0,#0xa               ;367
00003e  4917              LDR      r1,|L4.156|
000040  5548              STRB     r0,[r1,r5]            ;367
000042  1c6d              ADDS     r5,r5,#1              ;368
000044  1c49              ADDS     r1,r1,#1              ;370
000046  a016              ADR      r0,|L4.160|
000048  f7fffffe          BL       __2printf
00004c  b93c              CBNZ     r4,|L4.94|
00004e  2200              MOVS     r2,#0                 ;374
000050  f64f71ff          MOV      r1,#0xffff            ;374
000054  4811              LDR      r0,|L4.156|
000056  1c40              ADDS     r0,r0,#1              ;374
000058  f7fffffe          BL       display_show_string
00005c  e01c              B        |L4.152|
                  |L4.94|
00005e  2c01              CMP      r4,#1                 ;376
000060  d107              BNE      |L4.114|
000062  2200              MOVS     r2,#0                 ;378
000064  f44f4178          MOV      r1,#0xf800            ;378
000068  480c              LDR      r0,|L4.156|
00006a  1c40              ADDS     r0,r0,#1              ;378
00006c  f7fffffe          BL       display_show_string
000070  e012              B        |L4.152|
                  |L4.114|
000072  2c02              CMP      r4,#2                 ;380
000074  d107              BNE      |L4.134|
000076  2200              MOVS     r2,#0                 ;382
000078  f44f61fc          MOV      r1,#0x7e0             ;382
00007c  4807              LDR      r0,|L4.156|
00007e  1c40              ADDS     r0,r0,#1              ;382
000080  f7fffffe          BL       display_show_string
000084  e008              B        |L4.152|
                  |L4.134|
000086  2c03              CMP      r4,#3                 ;384
000088  d106              BNE      |L4.152|
00008a  2200              MOVS     r2,#0                 ;386
00008c  f64f71e0          MOV      r1,#0xffe0            ;386
000090  4802              LDR      r0,|L4.156|
000092  1c40              ADDS     r0,r0,#1              ;386
000094  f7fffffe          BL       display_show_string
                  |L4.152|
000098  bf00              NOP      
00009a  e7c0              B        |L4.30|
                          ENDP

                  |L4.156|
                          DCD      log_buf
                  |L4.160|
0000a0  257300            DCB      "%s",0
0000a3  00                DCB      0

                          AREA ||i.display_show_logger||, CODE, READONLY, ALIGN=2

                  display_show_logger PROC
;;;73     #define LCD_SHOW_LOG(fmt, ...)          display_show_log(DISP_SHOW_LOG, fmt, ##__VA_ARGS__)
;;;74     void display_show_logger(char *p, uint16_t bg_color)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;75     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;76         uint16_t font_color;
;;;77         uint32_t now_x = 0, now_y = 0;
000008  2700              MOVS     r7,#0
00000a  2500              MOVS     r5,#0
;;;78         static uint8_t fill_buff[64];
;;;79         uint8_t flg_ok_line=0;
00000c  46a8              MOV      r8,r5
;;;80         //display_fill(0, now_y, 240, now_y + 32, WHITE);
;;;81          while( *p != '\0' )
00000e  e08e              B        |L5.302|
                  |L5.16|
;;;82          {
;;;83              if(!flg_ok_line)
000010  f1b80f00          CMP      r8,#0
000014  d12e              BNE      |L5.116|
;;;84              {
;;;85                 if( memcmp(p,"SUCCESS", 7) == 0 )
000016  2207              MOVS     r2,#7
000018  a157              ADR      r1,|L5.376|
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       memcmp
000020  b928              CBNZ     r0,|L5.46|
;;;86                 {
;;;87                     font_color = GREEN;
000022  f44f6afc          MOV      r10,#0x7e0
;;;88                     flg_ok_line = 1;
000026  f04f0801          MOV      r8,#1
;;;89                     p=p+8;
00002a  3408              ADDS     r4,r4,#8
00002c  e022              B        |L5.116|
                  |L5.46|
;;;90                 }
;;;91                 else if( memcmp(p,"FINISH", 6) == 0 )
00002e  2206              MOVS     r2,#6
000030  a153              ADR      r1,|L5.384|
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       memcmp
000038  b928              CBNZ     r0,|L5.70|
;;;92                 {
;;;93                     font_color = YELLOW;
00003a  f64f7ae0          MOV      r10,#0xffe0
;;;94                     flg_ok_line = 1;
00003e  f04f0801          MOV      r8,#1
;;;95                     p=p+7;
000042  1de4              ADDS     r4,r4,#7
000044  e016              B        |L5.116|
                  |L5.70|
;;;96                 }
;;;97                 else if( memcmp(p,"fail", 4) == 0 )
000046  2204              MOVS     r2,#4
000048  a14f              ADR      r1,|L5.392|
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       memcmp
000050  b928              CBNZ     r0,|L5.94|
;;;98                 {
;;;99                     font_color = RED;
000052  f44f4a78          MOV      r10,#0xf800
;;;100                    flg_ok_line = 1;
000056  f04f0801          MOV      r8,#1
;;;101                    p=p+5;
00005a  1d64              ADDS     r4,r4,#5
00005c  e00a              B        |L5.116|
                  |L5.94|
;;;102                }
;;;103                else if( memcmp(p,"ERROR", 5) == 0 )
00005e  2205              MOVS     r2,#5
000060  a14b              ADR      r1,|L5.400|
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       memcmp
000068  b920              CBNZ     r0,|L5.116|
;;;104                {
;;;105                    font_color = RED;
00006a  f44f4a78          MOV      r10,#0xf800
;;;106                    flg_ok_line = 1;
00006e  f04f0801          MOV      r8,#1
;;;107                    p=p+6;
000072  1da4              ADDS     r4,r4,#6
                  |L5.116|
;;;108                }
;;;109                
;;;110             }
;;;111             
;;;112             
;;;113             if(*p =='\0') break;
000074  7820              LDRB     r0,[r4,#0]
000076  b900              CBNZ     r0,|L5.122|
000078  e05d              B        |L5.310|
                  |L5.122|
;;;114             
;;;115             if(!flg_ok_line) 
00007a  f1b80f00          CMP      r8,#0
00007e  d101              BNE      |L5.132|
;;;116             {
;;;117                 p++;
000080  1c64              ADDS     r4,r4,#1
;;;118                 continue;
000082  e054              B        |L5.302|
                  |L5.132|
;;;119             }
;;;120             if(*p == '\r')p++;
000084  7820              LDRB     r0,[r4,#0]
000086  280d              CMP      r0,#0xd
000088  d100              BNE      |L5.140|
00008a  1c64              ADDS     r4,r4,#1
                  |L5.140|
;;;121             if(*p == '\n' )
00008c  7820              LDRB     r0,[r4,#0]
00008e  280a              CMP      r0,#0xa
000090  d122              BNE      |L5.216|
;;;122             {
;;;123                flg_ok_line = 0;
000092  f04f0800          MOV      r8,#0
;;;124                now_x = 0;
000096  2700              MOVS     r7,#0
;;;125                now_y += 16;
000098  3510              ADDS     r5,r5,#0x10
;;;126                if(now_y >= 320)
00009a  f5b57fa0          CMP      r5,#0x140
00009e  d300              BCC      |L5.162|
;;;127                {
;;;128                    now_y = 0;
0000a0  2500              MOVS     r5,#0
                  |L5.162|
;;;129                }
;;;130                memset((uint16_t *)fill_buff, bg_color, sizeof(fill_buff) / sizeof(bg_color));
0000a2  4632              MOV      r2,r6
0000a4  2120              MOVS     r1,#0x20
0000a6  483c              LDR      r0,|L5.408|
0000a8  f7fffffe          BL       __aeabi_memset
;;;131                display_set_addr(0, now_y, 240, now_y + 32);
0000ac  f1050020          ADD      r0,r5,#0x20
0000b0  b283              UXTH     r3,r0
0000b2  b2a9              UXTH     r1,r5
0000b4  22f0              MOVS     r2,#0xf0
0000b6  2000              MOVS     r0,#0
0000b8  f7fffffe          BL       display_set_addr
;;;132                for(uint32_t i = 0; i < 7680 / sizeof(fill_buff); i++)
0000bc  f04f0900          MOV      r9,#0
0000c0  e005              B        |L5.206|
                  |L5.194|
;;;133                {
;;;134                    bsp_lcd_send_data(fill_buff, sizeof(fill_buff));
0000c2  2140              MOVS     r1,#0x40
0000c4  4834              LDR      r0,|L5.408|
0000c6  f7fffffe          BL       bsp_lcd_send_data
0000ca  f1090901          ADD      r9,r9,#1              ;132
                  |L5.206|
0000ce  f1b90f78          CMP      r9,#0x78              ;132
0000d2  d3f6              BCC      |L5.194|
;;;135                }
;;;136                p++;
0000d4  1c64              ADDS     r4,r4,#1
;;;137                continue;
0000d6  e02a              B        |L5.302|
                  |L5.216|
;;;138            }
;;;139            if(now_x >= 240)
0000d8  2ff0              CMP      r7,#0xf0
0000da  d31e              BCC      |L5.282|
;;;140            {
;;;141                now_x = 0;
0000dc  2700              MOVS     r7,#0
;;;142                now_y += 16;
0000de  3510              ADDS     r5,r5,#0x10
;;;143                if(now_y >= 320)
0000e0  f5b57fa0          CMP      r5,#0x140
0000e4  d300              BCC      |L5.232|
;;;144                {
;;;145                    now_y = 0;
0000e6  2500              MOVS     r5,#0
                  |L5.232|
;;;146                }
;;;147                memset((uint16_t *)fill_buff, bg_color, sizeof(fill_buff) / sizeof(bg_color));
0000e8  4632              MOV      r2,r6
0000ea  2120              MOVS     r1,#0x20
0000ec  482a              LDR      r0,|L5.408|
0000ee  f7fffffe          BL       __aeabi_memset
;;;148                display_set_addr(0, now_y, 240, now_y + 32);
0000f2  f1050020          ADD      r0,r5,#0x20
0000f6  b283              UXTH     r3,r0
0000f8  b2a9              UXTH     r1,r5
0000fa  22f0              MOVS     r2,#0xf0
0000fc  2000              MOVS     r0,#0
0000fe  f7fffffe          BL       display_set_addr
;;;149                for(uint32_t i = 0; i < 7680 / sizeof(fill_buff); i++)
000102  f04f0900          MOV      r9,#0
000106  e005              B        |L5.276|
                  |L5.264|
;;;150                {
;;;151                    bsp_lcd_send_data(fill_buff, sizeof(fill_buff));
000108  2140              MOVS     r1,#0x40
00010a  4823              LDR      r0,|L5.408|
00010c  f7fffffe          BL       bsp_lcd_send_data
000110  f1090901          ADD      r9,r9,#1              ;149
                  |L5.276|
000114  f1b90f78          CMP      r9,#0x78              ;149
000118  d3f6              BCC      |L5.264|
                  |L5.282|
;;;152                }
;;;153            }
;;;154    		display_show_char(now_x, now_y, *p, font_color, bg_color);
00011a  9600              STR      r6,[sp,#0]
00011c  7822              LDRB     r2,[r4,#0]
00011e  b2a9              UXTH     r1,r5
000120  b2b8              UXTH     r0,r7
000122  4653              MOV      r3,r10
000124  f7fffffe          BL       display_show_char
;;;155            now_x += 8;
000128  3708              ADDS     r7,r7,#8
;;;156    		p++;
00012a  1c64              ADDS     r4,r4,#1
00012c  bf00              NOP                            ;118
                  |L5.302|
00012e  7820              LDRB     r0,[r4,#0]            ;81
000130  2800              CMP      r0,#0                 ;81
000132  f47faf6d          BNE      |L5.16|
                  |L5.310|
000136  bf00              NOP                            ;113
;;;157             
;;;158         } 
;;;159         for( ;now_y<=320; now_y+=16)
000138  e019              B        |L5.366|
                  |L5.314|
;;;160         {
;;;161            now_x = 0;
00013a  2700              MOVS     r7,#0
;;;162            memset((uint16_t *)fill_buff, bg_color, sizeof(fill_buff) / sizeof(bg_color));
00013c  4632              MOV      r2,r6
00013e  2120              MOVS     r1,#0x20
000140  4815              LDR      r0,|L5.408|
000142  f7fffffe          BL       __aeabi_memset
;;;163            display_set_addr(0, now_y, 240, now_y + 32);
000146  f1050020          ADD      r0,r5,#0x20
00014a  b283              UXTH     r3,r0
00014c  b2a9              UXTH     r1,r5
00014e  22f0              MOVS     r2,#0xf0
000150  2000              MOVS     r0,#0
000152  f7fffffe          BL       display_set_addr
;;;164            for(uint32_t i = 0; i < 7680 / sizeof(fill_buff); i++)
000156  46b9              MOV      r9,r7
000158  e005              B        |L5.358|
                  |L5.346|
;;;165            {
;;;166                bsp_lcd_send_data(fill_buff, sizeof(fill_buff));
00015a  2140              MOVS     r1,#0x40
00015c  480e              LDR      r0,|L5.408|
00015e  f7fffffe          BL       bsp_lcd_send_data
000162  f1090901          ADD      r9,r9,#1              ;164
                  |L5.358|
000166  f1b90f78          CMP      r9,#0x78              ;164
00016a  d3f6              BCC      |L5.346|
00016c  3510              ADDS     r5,r5,#0x10           ;159
                  |L5.366|
00016e  f5b57fa0          CMP      r5,#0x140             ;159
000172  d9e2              BLS      |L5.314|
;;;167            }
;;;168         }
;;;169         
;;;170                
;;;171                
;;;172         
;;;173        #if 0
;;;174    	while(*p != '\0')
;;;175    	{
;;;176            do
;;;177            {
;;;178                p++;
;;;179            }while(memcmp(p,"SUCCESS", 7) != 0);
;;;180            
;;;181                
;;;182            if(*p == '\r')p++;
;;;183            if(*p == '\n')
;;;184            {
;;;185                
;;;186                now_x = 0;
;;;187                now_y += 16;
;;;188                if(now_y >= 320)
;;;189                {
;;;190                    now_y = 0;
;;;191                }
;;;192                memset((uint16_t *)fill_buff, bg_color, sizeof(fill_buff) / sizeof(bg_color));
;;;193                display_set_addr(0, now_y, 240, now_y + 32);
;;;194                for(uint32_t i = 0; i < 7680 / sizeof(fill_buff); i++)
;;;195                {
;;;196                    bsp_lcd_send_data(fill_buff, sizeof(fill_buff));
;;;197                }
;;;198                p++;
;;;199                continue;
;;;200            }
;;;201            if(now_x >= 240)
;;;202            {
;;;203                now_x = 0;
;;;204                now_y += 16;
;;;205                if(now_y >= 320)
;;;206                {
;;;207                    now_y = 0;
;;;208                }
;;;209                memset((uint16_t *)fill_buff, bg_color, sizeof(fill_buff) / sizeof(bg_color));
;;;210                display_set_addr(0, now_y, 240, now_y + 32);
;;;211                for(uint32_t i = 0; i < 7680 / sizeof(fill_buff); i++)
;;;212                {
;;;213                    bsp_lcd_send_data(fill_buff, sizeof(fill_buff));
;;;214                }
;;;215            }
;;;216    		display_show_char(now_x, now_y, *p, font_color, bg_color);
;;;217            now_x += 8;
;;;218    		p++;
;;;219    	}
;;;220        #endif
;;;221    }
000174  e8bd8ff8          POP      {r3-r11,pc}
;;;222    
                          ENDP

                  |L5.376|
000178  53554343          DCB      "SUCCESS",0
00017c  45535300
                  |L5.384|
000180  46494e49          DCB      "FINISH",0
000184  534800  
000187  00                DCB      0
                  |L5.392|
000188  6661696c          DCB      "fail",0
00018c  00      
00018d  00                DCB      0
00018e  00                DCB      0
00018f  00                DCB      0
                  |L5.400|
000190  4552524f          DCB      "ERROR",0
000194  5200    
000196  00                DCB      0
000197  00                DCB      0
                  |L5.408|
                          DCD      fill_buff

                          AREA ||i.display_show_string||, CODE, READONLY, ALIGN=2

                  display_show_string PROC
;;;222    
;;;223    void display_show_string(char *p, uint16_t font_color, uint16_t bg_color)
000000  b5f8              PUSH     {r3-r7,lr}
;;;224    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;225        static uint32_t now_x = 0, now_y = 0;
;;;226        static uint8_t fill_buff[64];
;;;227    
;;;228        //display_fill(0, now_y, 240, now_y + 32, WHITE);
;;;229    	while(*p != '\0')
000008  e06e              B        |L6.232|
                  |L6.10|
;;;230    	{
;;;231            if(*p == '\r')p++;
00000a  7820              LDRB     r0,[r4,#0]
00000c  280d              CMP      r0,#0xd
00000e  d100              BNE      |L6.18|
000010  1c64              ADDS     r4,r4,#1
                  |L6.18|
;;;232            if(*p == '\n')
000012  7820              LDRB     r0,[r4,#0]
000014  280a              CMP      r0,#0xa
000016  d129              BNE      |L6.108|
;;;233            {
;;;234              
;;;235                now_x = 0;
000018  2000              MOVS     r0,#0
00001a  4935              LDR      r1,|L6.240|
00001c  6008              STR      r0,[r1,#0]  ; now_x
;;;236                now_y += 16;
00001e  4835              LDR      r0,|L6.244|
000020  6800              LDR      r0,[r0,#0]  ; now_y
000022  3010              ADDS     r0,r0,#0x10
000024  4933              LDR      r1,|L6.244|
000026  6008              STR      r0,[r1,#0]  ; now_y
;;;237                if(now_y >= 320)
000028  4608              MOV      r0,r1
00002a  6800              LDR      r0,[r0,#0]  ; now_y
00002c  f5b07fa0          CMP      r0,#0x140
000030  d301              BCC      |L6.54|
;;;238                {
;;;239                    now_y = 0;
000032  2000              MOVS     r0,#0
000034  6008              STR      r0,[r1,#0]  ; now_y
                  |L6.54|
;;;240                }
;;;241                memset((uint16_t *)fill_buff, bg_color, sizeof(fill_buff) / sizeof(bg_color));
000036  4632              MOV      r2,r6
000038  2120              MOVS     r1,#0x20
00003a  482f              LDR      r0,|L6.248|
00003c  f7fffffe          BL       __aeabi_memset
;;;242                display_set_addr(0, now_y, 240, now_y + 32);
000040  482c              LDR      r0,|L6.244|
000042  8800              LDRH     r0,[r0,#0]  ; now_y
000044  3020              ADDS     r0,r0,#0x20
000046  b283              UXTH     r3,r0
000048  482a              LDR      r0,|L6.244|
00004a  8800              LDRH     r0,[r0,#0]  ; now_y
00004c  b281              UXTH     r1,r0
00004e  22f0              MOVS     r2,#0xf0
000050  2000              MOVS     r0,#0
000052  f7fffffe          BL       display_set_addr
;;;243                for(uint32_t i = 0; i < 7680 / sizeof(fill_buff); i++)
000056  2700              MOVS     r7,#0
000058  e004              B        |L6.100|
                  |L6.90|
;;;244                {
;;;245                    bsp_lcd_send_data(fill_buff, sizeof(fill_buff));
00005a  2140              MOVS     r1,#0x40
00005c  4826              LDR      r0,|L6.248|
00005e  f7fffffe          BL       bsp_lcd_send_data
000062  1c7f              ADDS     r7,r7,#1              ;243
                  |L6.100|
000064  2f78              CMP      r7,#0x78              ;243
000066  d3f8              BCC      |L6.90|
;;;246                }
;;;247                p++;
000068  1c64              ADDS     r4,r4,#1
;;;248                continue;
00006a  e03d              B        |L6.232|
                  |L6.108|
;;;249            }
;;;250            if(now_x >= 240)
00006c  4820              LDR      r0,|L6.240|
00006e  6800              LDR      r0,[r0,#0]  ; now_x
000070  28f0              CMP      r0,#0xf0
000072  d327              BCC      |L6.196|
;;;251            {
;;;252                now_x = 0;
000074  2000              MOVS     r0,#0
000076  491e              LDR      r1,|L6.240|
000078  6008              STR      r0,[r1,#0]  ; now_x
;;;253                now_y += 16;
00007a  481e              LDR      r0,|L6.244|
00007c  6800              LDR      r0,[r0,#0]  ; now_y
00007e  3010              ADDS     r0,r0,#0x10
000080  491c              LDR      r1,|L6.244|
000082  6008              STR      r0,[r1,#0]  ; now_y
;;;254                if(now_y >= 320)
000084  4608              MOV      r0,r1
000086  6800              LDR      r0,[r0,#0]  ; now_y
000088  f5b07fa0          CMP      r0,#0x140
00008c  d301              BCC      |L6.146|
;;;255                {
;;;256                    now_y = 0;
00008e  2000              MOVS     r0,#0
000090  6008              STR      r0,[r1,#0]  ; now_y
                  |L6.146|
;;;257                }
;;;258                memset((uint16_t *)fill_buff, bg_color, sizeof(fill_buff) / sizeof(bg_color));
000092  4632              MOV      r2,r6
000094  2120              MOVS     r1,#0x20
000096  4818              LDR      r0,|L6.248|
000098  f7fffffe          BL       __aeabi_memset
;;;259                display_set_addr(0, now_y, 240, now_y + 32);
00009c  4815              LDR      r0,|L6.244|
00009e  8800              LDRH     r0,[r0,#0]  ; now_y
0000a0  3020              ADDS     r0,r0,#0x20
0000a2  b283              UXTH     r3,r0
0000a4  4813              LDR      r0,|L6.244|
0000a6  8800              LDRH     r0,[r0,#0]  ; now_y
0000a8  b281              UXTH     r1,r0
0000aa  22f0              MOVS     r2,#0xf0
0000ac  2000              MOVS     r0,#0
0000ae  f7fffffe          BL       display_set_addr
;;;260                for(uint32_t i = 0; i < 7680 / sizeof(fill_buff); i++)
0000b2  2700              MOVS     r7,#0
0000b4  e004              B        |L6.192|
                  |L6.182|
;;;261                {
;;;262                    bsp_lcd_send_data(fill_buff, sizeof(fill_buff));
0000b6  2140              MOVS     r1,#0x40
0000b8  480f              LDR      r0,|L6.248|
0000ba  f7fffffe          BL       bsp_lcd_send_data
0000be  1c7f              ADDS     r7,r7,#1              ;260
                  |L6.192|
0000c0  2f78              CMP      r7,#0x78              ;260
0000c2  d3f8              BCC      |L6.182|
                  |L6.196|
;;;263                }
;;;264            }
;;;265    		display_show_char(now_x, now_y, *p, font_color, bg_color);
0000c4  9600              STR      r6,[sp,#0]
0000c6  7822              LDRB     r2,[r4,#0]
0000c8  4b0a              LDR      r3,|L6.244|
0000ca  881b              LDRH     r3,[r3,#0]  ; now_y
0000cc  b299              UXTH     r1,r3
0000ce  4b08              LDR      r3,|L6.240|
0000d0  881b              LDRH     r3,[r3,#0]  ; now_x
0000d2  b298              UXTH     r0,r3
0000d4  462b              MOV      r3,r5
0000d6  f7fffffe          BL       display_show_char
;;;266            now_x += 8;
0000da  4805              LDR      r0,|L6.240|
0000dc  6800              LDR      r0,[r0,#0]  ; now_x
0000de  3008              ADDS     r0,r0,#8
0000e0  4903              LDR      r1,|L6.240|
0000e2  6008              STR      r0,[r1,#0]  ; now_x
;;;267    		p++;
0000e4  1c64              ADDS     r4,r4,#1
0000e6  bf00              NOP                            ;248
                  |L6.232|
0000e8  7820              LDRB     r0,[r4,#0]            ;229
0000ea  2800              CMP      r0,#0                 ;229
0000ec  d18d              BNE      |L6.10|
;;;268    	}
;;;269    }
0000ee  bdf8              POP      {r3-r7,pc}
;;;270    
                          ENDP

                  |L6.240|
                          DCD      now_x
                  |L6.244|
                          DCD      now_y
                  |L6.248|
                          DCD      |symbol_number.28|

                          AREA ||i.lcd_disp||, CODE, READONLY, ALIGN=2

                  lcd_disp PROC
;;;272    
;;;273    void lcd_disp(char *p, uint16_t font_color, uint16_t bg_color,line_mode_e mode)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;274    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;275        static uint32_t now_x = 0, now_y = 0;
;;;276        static uint8_t fill_buff[64];
;;;277    
;;;278        switch(mode)
00000c  b127              CBZ      r7,|L7.24|
00000e  2f01              CMP      r7,#1
000010  d008              BEQ      |L7.36|
000012  2f02              CMP      r7,#2
000014  d10f              BNE      |L7.54|
000016  e006              B        |L7.38|
                  |L7.24|
;;;279        {
;;;280        case page_start_line:
;;;281            now_x = 0; now_y = 0;
000018  2000              MOVS     r0,#0
00001a  4945              LDR      r1,|L7.304|
00001c  6008              STR      r0,[r1,#0]  ; now_x
00001e  4945              LDR      r1,|L7.308|
000020  6008              STR      r0,[r1,#0]  ; now_y
;;;282            break;
000022  e008              B        |L7.54|
                  |L7.36|
;;;283        case line_by_line:
;;;284            break;
000024  e007              B        |L7.54|
                  |L7.38|
;;;285        case page_tail_line:
;;;286            now_x = 0;now_y=320-16;
000026  2000              MOVS     r0,#0
000028  4941              LDR      r1,|L7.304|
00002a  6008              STR      r0,[r1,#0]  ; now_x
00002c  f44f7098          MOV      r0,#0x130
000030  4940              LDR      r1,|L7.308|
000032  6008              STR      r0,[r1,#0]  ; now_y
;;;287            break;
000034  bf00              NOP      
                  |L7.54|
000036  bf00              NOP                            ;282
;;;288        }
;;;289        //display_fill(0, now_y, 240, now_y + 32, WHITE);
;;;290    	while(*p != '\0')
000038  e074              B        |L7.292|
                  |L7.58|
;;;291    	{
;;;292            if(*p == '\r')p++;
00003a  7820              LDRB     r0,[r4,#0]
00003c  280d              CMP      r0,#0xd
00003e  d100              BNE      |L7.66|
000040  1c64              ADDS     r4,r4,#1
                  |L7.66|
;;;293            if(*p == '\n')
000042  7820              LDRB     r0,[r4,#0]
000044  280a              CMP      r0,#0xa
000046  d12c              BNE      |L7.162|
;;;294            {
;;;295              
;;;296                now_x = 0;
000048  2000              MOVS     r0,#0
00004a  4939              LDR      r1,|L7.304|
00004c  6008              STR      r0,[r1,#0]  ; now_x
;;;297                now_y += 16;
00004e  4839              LDR      r0,|L7.308|
000050  6800              LDR      r0,[r0,#0]  ; now_y
000052  3010              ADDS     r0,r0,#0x10
000054  4937              LDR      r1,|L7.308|
000056  6008              STR      r0,[r1,#0]  ; now_y
;;;298                if(now_y >= 320)
000058  4608              MOV      r0,r1
00005a  6800              LDR      r0,[r0,#0]  ; now_y
00005c  f5b07fa0          CMP      r0,#0x140
000060  d301              BCC      |L7.102|
;;;299                {
;;;300                    now_y = 0;
000062  2000              MOVS     r0,#0
000064  6008              STR      r0,[r1,#0]  ; now_y
                  |L7.102|
;;;301                }
;;;302                memset((uint16_t *)fill_buff, bg_color, sizeof(fill_buff) / sizeof(bg_color));
000066  4632              MOV      r2,r6
000068  2120              MOVS     r1,#0x20
00006a  4833              LDR      r0,|L7.312|
00006c  f7fffffe          BL       __aeabi_memset
;;;303                display_set_addr(0, now_y, 240, now_y + 32);
000070  4830              LDR      r0,|L7.308|
000072  8800              LDRH     r0,[r0,#0]  ; now_y
000074  3020              ADDS     r0,r0,#0x20
000076  b283              UXTH     r3,r0
000078  482e              LDR      r0,|L7.308|
00007a  8800              LDRH     r0,[r0,#0]  ; now_y
00007c  b281              UXTH     r1,r0
00007e  22f0              MOVS     r2,#0xf0
000080  2000              MOVS     r0,#0
000082  f7fffffe          BL       display_set_addr
;;;304                for(uint32_t i = 0; i < 7680 / sizeof(fill_buff); i++)
000086  f04f0800          MOV      r8,#0
00008a  e005              B        |L7.152|
                  |L7.140|
;;;305                {
;;;306                    bsp_lcd_send_data(fill_buff, sizeof(fill_buff));
00008c  2140              MOVS     r1,#0x40
00008e  482a              LDR      r0,|L7.312|
000090  f7fffffe          BL       bsp_lcd_send_data
000094  f1080801          ADD      r8,r8,#1              ;304
                  |L7.152|
000098  f1b80f78          CMP      r8,#0x78              ;304
00009c  d3f6              BCC      |L7.140|
;;;307                }
;;;308                p++;
00009e  1c64              ADDS     r4,r4,#1
;;;309                continue;
0000a0  e040              B        |L7.292|
                  |L7.162|
;;;310            }
;;;311            if(now_x >= 240)
0000a2  4823              LDR      r0,|L7.304|
0000a4  6800              LDR      r0,[r0,#0]  ; now_x
0000a6  28f0              CMP      r0,#0xf0
0000a8  d32a              BCC      |L7.256|
;;;312            {
;;;313                now_x = 0;
0000aa  2000              MOVS     r0,#0
0000ac  4920              LDR      r1,|L7.304|
0000ae  6008              STR      r0,[r1,#0]  ; now_x
;;;314                now_y += 16;
0000b0  4820              LDR      r0,|L7.308|
0000b2  6800              LDR      r0,[r0,#0]  ; now_y
0000b4  3010              ADDS     r0,r0,#0x10
0000b6  491f              LDR      r1,|L7.308|
0000b8  6008              STR      r0,[r1,#0]  ; now_y
;;;315                if(now_y >= 320)
0000ba  4608              MOV      r0,r1
0000bc  6800              LDR      r0,[r0,#0]  ; now_y
0000be  f5b07fa0          CMP      r0,#0x140
0000c2  d301              BCC      |L7.200|
;;;316                {
;;;317                    now_y = 0;
0000c4  2000              MOVS     r0,#0
0000c6  6008              STR      r0,[r1,#0]  ; now_y
                  |L7.200|
;;;318                }
;;;319                memset((uint16_t *)fill_buff, bg_color, sizeof(fill_buff) / sizeof(bg_color));
0000c8  4632              MOV      r2,r6
0000ca  2120              MOVS     r1,#0x20
0000cc  481a              LDR      r0,|L7.312|
0000ce  f7fffffe          BL       __aeabi_memset
;;;320                display_set_addr(0, now_y, 240, now_y + 32);
0000d2  4818              LDR      r0,|L7.308|
0000d4  8800              LDRH     r0,[r0,#0]  ; now_y
0000d6  3020              ADDS     r0,r0,#0x20
0000d8  b283              UXTH     r3,r0
0000da  4816              LDR      r0,|L7.308|
0000dc  8800              LDRH     r0,[r0,#0]  ; now_y
0000de  b281              UXTH     r1,r0
0000e0  22f0              MOVS     r2,#0xf0
0000e2  2000              MOVS     r0,#0
0000e4  f7fffffe          BL       display_set_addr
;;;321                for(uint32_t i = 0; i < 7680 / sizeof(fill_buff); i++)
0000e8  f04f0800          MOV      r8,#0
0000ec  e005              B        |L7.250|
                  |L7.238|
;;;322                {
;;;323                    bsp_lcd_send_data(fill_buff, sizeof(fill_buff));
0000ee  2140              MOVS     r1,#0x40
0000f0  4811              LDR      r0,|L7.312|
0000f2  f7fffffe          BL       bsp_lcd_send_data
0000f6  f1080801          ADD      r8,r8,#1              ;321
                  |L7.250|
0000fa  f1b80f78          CMP      r8,#0x78              ;321
0000fe  d3f6              BCC      |L7.238|
                  |L7.256|
;;;324                }
;;;325            }
;;;326    		display_show_char(now_x, now_y, *p, font_color, bg_color);
000100  9600              STR      r6,[sp,#0]
000102  7822              LDRB     r2,[r4,#0]
000104  4b0b              LDR      r3,|L7.308|
000106  881b              LDRH     r3,[r3,#0]  ; now_y
000108  b299              UXTH     r1,r3
00010a  4b09              LDR      r3,|L7.304|
00010c  881b              LDRH     r3,[r3,#0]  ; now_x
00010e  b298              UXTH     r0,r3
000110  462b              MOV      r3,r5
000112  f7fffffe          BL       display_show_char
;;;327            now_x += 8;
000116  4806              LDR      r0,|L7.304|
000118  6800              LDR      r0,[r0,#0]  ; now_x
00011a  3008              ADDS     r0,r0,#8
00011c  4904              LDR      r1,|L7.304|
00011e  6008              STR      r0,[r1,#0]  ; now_x
;;;328    		p++;
000120  1c64              ADDS     r4,r4,#1
000122  bf00              NOP                            ;309
                  |L7.292|
000124  7820              LDRB     r0,[r4,#0]            ;290
000126  2800              CMP      r0,#0                 ;290
000128  d187              BNE      |L7.58|
;;;329    	}
;;;330    }
00012a  e8bd83f8          POP      {r3-r9,pc}
;;;331    
                          ENDP

00012e  0000              DCW      0x0000
                  |L7.304|
                          DCD      |symbol_number.32|
                  |L7.308|
                          DCD      |symbol_number.33|
                  |L7.312|
                          DCD      |symbol_number.29|

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  log_buf
                          %        64
                  fill_buff
                          %        64
                  |symbol_number.28|
                          %        64
                  |symbol_number.29|
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  lcd_ascii_1206
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  00000404          DCB      0x00,0x00,0x04,0x04
000010  04040400          DCB      0x04,0x04,0x04,0x00
000014  00040000          DCB      0x00,0x04,0x00,0x00
000018  14140a00          DCB      0x14,0x14,0x0a,0x00
00001c  00000000          DCB      0x00,0x00,0x00,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  00000a0a          DCB      0x00,0x00,0x0a,0x0a
000028  1f0a0a1f          DCB      0x1f,0x0a,0x0a,0x1f
00002c  0a0a0000          DCB      0x0a,0x0a,0x00,0x00
000030  00040e15          DCB      0x00,0x04,0x0e,0x15
000034  05060c14          DCB      0x05,0x06,0x0c,0x14
000038  150e0400          DCB      0x15,0x0e,0x04,0x00
00003c  00001215          DCB      0x00,0x00,0x12,0x15
000040  0d152e2c          DCB      0x0d,0x15,0x2e,0x2c
000044  2a120000          DCB      0x2a,0x12,0x00,0x00
000048  0000040a          DCB      0x00,0x00,0x04,0x0a
00004c  0a361515          DCB      0x0a,0x36,0x15,0x15
000050  29160000          DCB      0x29,0x16,0x00,0x00
000054  02020100          DCB      0x02,0x02,0x01,0x00
000058  00000000          DCB      0x00,0x00,0x00,0x00
00005c  00000000          DCB      0x00,0x00,0x00,0x00
000060  10080804          DCB      0x10,0x08,0x08,0x04
000064  04040404          DCB      0x04,0x04,0x04,0x04
000068  08081000          DCB      0x08,0x08,0x10,0x00
00006c  02040408          DCB      0x02,0x04,0x04,0x08
000070  08080808          DCB      0x08,0x08,0x08,0x08
000074  04040200          DCB      0x04,0x04,0x02,0x00
000078  00000004          DCB      0x00,0x00,0x00,0x04
00007c  150e0e15          DCB      0x15,0x0e,0x0e,0x15
000080  04000000          DCB      0x04,0x00,0x00,0x00
000084  00000008          DCB      0x00,0x00,0x00,0x08
000088  083e0808          DCB      0x08,0x3e,0x08,0x08
00008c  00000000          DCB      0x00,0x00,0x00,0x00
000090  00000000          DCB      0x00,0x00,0x00,0x00
000094  00000000          DCB      0x00,0x00,0x00,0x00
000098  02020100          DCB      0x02,0x02,0x01,0x00
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  003f0000          DCB      0x00,0x3f,0x00,0x00
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
0000a8  00000000          DCB      0x00,0x00,0x00,0x00
0000ac  00000000          DCB      0x00,0x00,0x00,0x00
0000b0  00020000          DCB      0x00,0x02,0x00,0x00
0000b4  00201010          DCB      0x00,0x20,0x10,0x10
0000b8  08080404          DCB      0x08,0x08,0x04,0x04
0000bc  02020100          DCB      0x02,0x02,0x01,0x00
0000c0  00000e11          DCB      0x00,0x00,0x0e,0x11
0000c4  11111111          DCB      0x11,0x11,0x11,0x11
0000c8  110e0000          DCB      0x11,0x0e,0x00,0x00
0000cc  00000406          DCB      0x00,0x00,0x04,0x06
0000d0  04040404          DCB      0x04,0x04,0x04,0x04
0000d4  040e0000          DCB      0x04,0x0e,0x00,0x00
0000d8  00000e11          DCB      0x00,0x00,0x0e,0x11
0000dc  11080402          DCB      0x11,0x08,0x04,0x02
0000e0  011f0000          DCB      0x01,0x1f,0x00,0x00
0000e4  00000e11          DCB      0x00,0x00,0x0e,0x11
0000e8  100c1010          DCB      0x10,0x0c,0x10,0x10
0000ec  110e0000          DCB      0x11,0x0e,0x00,0x00
0000f0  0000080c          DCB      0x00,0x00,0x08,0x0c
0000f4  0c0a091f          DCB      0x0c,0x0a,0x09,0x1f
0000f8  081c0000          DCB      0x08,0x1c,0x00,0x00
0000fc  00001f01          DCB      0x00,0x00,0x1f,0x01
000100  010f1110          DCB      0x01,0x0f,0x11,0x10
000104  110e0000          DCB      0x11,0x0e,0x00,0x00
000108  00000c12          DCB      0x00,0x00,0x0c,0x12
00010c  010d1311          DCB      0x01,0x0d,0x13,0x11
000110  110e0000          DCB      0x11,0x0e,0x00,0x00
000114  00001e10          DCB      0x00,0x00,0x1e,0x10
000118  08080404          DCB      0x08,0x08,0x04,0x04
00011c  04040000          DCB      0x04,0x04,0x00,0x00
000120  00000e11          DCB      0x00,0x00,0x0e,0x11
000124  110e1111          DCB      0x11,0x0e,0x11,0x11
000128  110e0000          DCB      0x11,0x0e,0x00,0x00
00012c  00000e11          DCB      0x00,0x00,0x0e,0x11
000130  11191610          DCB      0x11,0x19,0x16,0x10
000134  09060000          DCB      0x09,0x06,0x00,0x00
000138  00000000          DCB      0x00,0x00,0x00,0x00
00013c  04000000          DCB      0x04,0x00,0x00,0x00
000140  00040000          DCB      0x00,0x04,0x00,0x00
000144  00000000          DCB      0x00,0x00,0x00,0x00
000148  00040000          DCB      0x00,0x04,0x00,0x00
00014c  00040400          DCB      0x00,0x04,0x04,0x00
000150  00001008          DCB      0x00,0x00,0x10,0x08
000154  04020204          DCB      0x04,0x02,0x02,0x04
000158  08100000          DCB      0x08,0x10,0x00,0x00
00015c  00000000          DCB      0x00,0x00,0x00,0x00
000160  3f003f00          DCB      0x3f,0x00,0x3f,0x00
000164  00000000          DCB      0x00,0x00,0x00,0x00
000168  00000204          DCB      0x00,0x00,0x02,0x04
00016c  08101008          DCB      0x08,0x10,0x10,0x08
000170  04020000          DCB      0x04,0x02,0x00,0x00
000174  00000e11          DCB      0x00,0x00,0x0e,0x11
000178  11080404          DCB      0x11,0x08,0x04,0x04
00017c  00040000          DCB      0x00,0x04,0x00,0x00
000180  00001c22          DCB      0x00,0x00,0x1c,0x22
000184  292d2d1d          DCB      0x29,0x2d,0x2d,0x1d
000188  221c0000          DCB      0x22,0x1c,0x00,0x00
00018c  00000404          DCB      0x00,0x00,0x04,0x04
000190  0c0a0a1e          DCB      0x0c,0x0a,0x0a,0x1e
000194  12330000          DCB      0x12,0x33,0x00,0x00
000198  00000f12          DCB      0x00,0x00,0x0f,0x12
00019c  120e1212          DCB      0x12,0x0e,0x12,0x12
0001a0  120f0000          DCB      0x12,0x0f,0x00,0x00
0001a4  00001e11          DCB      0x00,0x00,0x1e,0x11
0001a8  01010101          DCB      0x01,0x01,0x01,0x01
0001ac  110e0000          DCB      0x11,0x0e,0x00,0x00
0001b0  00000f12          DCB      0x00,0x00,0x0f,0x12
0001b4  12121212          DCB      0x12,0x12,0x12,0x12
0001b8  120f0000          DCB      0x12,0x0f,0x00,0x00
0001bc  00001f12          DCB      0x00,0x00,0x1f,0x12
0001c0  0a0e0a02          DCB      0x0a,0x0e,0x0a,0x02
0001c4  121f0000          DCB      0x12,0x1f,0x00,0x00
0001c8  00001f12          DCB      0x00,0x00,0x1f,0x12
0001cc  0a0e0a02          DCB      0x0a,0x0e,0x0a,0x02
0001d0  02070000          DCB      0x02,0x07,0x00,0x00
0001d4  00001c12          DCB      0x00,0x00,0x1c,0x12
0001d8  01013911          DCB      0x01,0x01,0x39,0x11
0001dc  120c0000          DCB      0x12,0x0c,0x00,0x00
0001e0  00003312          DCB      0x00,0x00,0x33,0x12
0001e4  121e1212          DCB      0x12,0x1e,0x12,0x12
0001e8  12330000          DCB      0x12,0x33,0x00,0x00
0001ec  00001f04          DCB      0x00,0x00,0x1f,0x04
0001f0  04040404          DCB      0x04,0x04,0x04,0x04
0001f4  041f0000          DCB      0x04,0x1f,0x00,0x00
0001f8  00003e08          DCB      0x00,0x00,0x3e,0x08
0001fc  08080808          DCB      0x08,0x08,0x08,0x08
000200  08080907          DCB      0x08,0x08,0x09,0x07
000204  00003712          DCB      0x00,0x00,0x37,0x12
000208  0a060a12          DCB      0x0a,0x06,0x0a,0x12
00020c  12370000          DCB      0x12,0x37,0x00,0x00
000210  00000702          DCB      0x00,0x00,0x07,0x02
000214  02020202          DCB      0x02,0x02,0x02,0x02
000218  223f0000          DCB      0x22,0x3f,0x00,0x00
00021c  00003b1b          DCB      0x00,0x00,0x3b,0x1b
000220  1b1b1515          DCB      0x1b,0x1b,0x15,0x15
000224  15350000          DCB      0x15,0x35,0x00,0x00
000228  00003b12          DCB      0x00,0x00,0x3b,0x12
00022c  16161a1a          DCB      0x16,0x16,0x1a,0x1a
000230  12170000          DCB      0x12,0x17,0x00,0x00
000234  00000e11          DCB      0x00,0x00,0x0e,0x11
000238  11111111          DCB      0x11,0x11,0x11,0x11
00023c  110e0000          DCB      0x11,0x0e,0x00,0x00
000240  00000f12          DCB      0x00,0x00,0x0f,0x12
000244  120e0202          DCB      0x12,0x0e,0x02,0x02
000248  02070000          DCB      0x02,0x07,0x00,0x00
00024c  00000e11          DCB      0x00,0x00,0x0e,0x11
000250  11111117          DCB      0x11,0x11,0x11,0x17
000254  190e1800          DCB      0x19,0x0e,0x18,0x00
000258  00000f12          DCB      0x00,0x00,0x0f,0x12
00025c  120e0a12          DCB      0x12,0x0e,0x0a,0x12
000260  12370000          DCB      0x12,0x37,0x00,0x00
000264  00001e11          DCB      0x00,0x00,0x1e,0x11
000268  01060810          DCB      0x01,0x06,0x08,0x10
00026c  110f0000          DCB      0x11,0x0f,0x00,0x00
000270  00001f15          DCB      0x00,0x00,0x1f,0x15
000274  04040404          DCB      0x04,0x04,0x04,0x04
000278  040e0000          DCB      0x04,0x0e,0x00,0x00
00027c  00003312          DCB      0x00,0x00,0x33,0x12
000280  12121212          DCB      0x12,0x12,0x12,0x12
000284  120c0000          DCB      0x12,0x0c,0x00,0x00
000288  00003312          DCB      0x00,0x00,0x33,0x12
00028c  120a0a0c          DCB      0x12,0x0a,0x0a,0x0c
000290  04040000          DCB      0x04,0x04,0x00,0x00
000294  00001515          DCB      0x00,0x00,0x15,0x15
000298  15150e0a          DCB      0x15,0x15,0x0e,0x0a
00029c  0a0a0000          DCB      0x0a,0x0a,0x00,0x00
0002a0  00001b0a          DCB      0x00,0x00,0x1b,0x0a
0002a4  0a04040a          DCB      0x0a,0x04,0x04,0x0a
0002a8  0a1b0000          DCB      0x0a,0x1b,0x00,0x00
0002ac  00001b0a          DCB      0x00,0x00,0x1b,0x0a
0002b0  0a0a0404          DCB      0x0a,0x0a,0x04,0x04
0002b4  040e0000          DCB      0x04,0x0e,0x00,0x00
0002b8  00001f09          DCB      0x00,0x00,0x1f,0x09
0002bc  08040402          DCB      0x08,0x04,0x04,0x02
0002c0  121f0000          DCB      0x12,0x1f,0x00,0x00
0002c4  1c040404          DCB      0x1c,0x04,0x04,0x04
0002c8  04040404          DCB      0x04,0x04,0x04,0x04
0002cc  04041c00          DCB      0x04,0x04,0x1c,0x00
0002d0  00020204          DCB      0x00,0x02,0x02,0x04
0002d4  04040808          DCB      0x04,0x04,0x08,0x08
0002d8  08101000          DCB      0x08,0x10,0x10,0x00
0002dc  0e080808          DCB      0x0e,0x08,0x08,0x08
0002e0  08080808          DCB      0x08,0x08,0x08,0x08
0002e4  08080e00          DCB      0x08,0x08,0x0e,0x00
0002e8  040a0000          DCB      0x04,0x0a,0x00,0x00
0002ec  00000000          DCB      0x00,0x00,0x00,0x00
0002f0  00000000          DCB      0x00,0x00,0x00,0x00
0002f4  00000000          DCB      0x00,0x00,0x00,0x00
0002f8  00000000          DCB      0x00,0x00,0x00,0x00
0002fc  0000003f          DCB      0x00,0x00,0x00,0x3f
000300  02040000          DCB      0x02,0x04,0x00,0x00
000304  00000000          DCB      0x00,0x00,0x00,0x00
000308  00000000          DCB      0x00,0x00,0x00,0x00
00030c  00000000          DCB      0x00,0x00,0x00,0x00
000310  000c121c          DCB      0x00,0x0c,0x12,0x1c
000314  123c0000          DCB      0x12,0x3c,0x00,0x00
000318  00030202          DCB      0x00,0x03,0x02,0x02
00031c  020e1212          DCB      0x02,0x0e,0x12,0x12
000320  120e0000          DCB      0x12,0x0e,0x00,0x00
000324  00000000          DCB      0x00,0x00,0x00,0x00
000328  001c1202          DCB      0x00,0x1c,0x12,0x02
00032c  120c0000          DCB      0x12,0x0c,0x00,0x00
000330  00181010          DCB      0x00,0x18,0x10,0x10
000334  101c1212          DCB      0x10,0x1c,0x12,0x12
000338  123c0000          DCB      0x12,0x3c,0x00,0x00
00033c  00000000          DCB      0x00,0x00,0x00,0x00
000340  000c121e          DCB      0x00,0x0c,0x12,0x1e
000344  021c0000          DCB      0x02,0x1c,0x00,0x00
000348  00182404          DCB      0x00,0x18,0x24,0x04
00034c  041e0404          DCB      0x04,0x1e,0x04,0x04
000350  041e0000          DCB      0x04,0x1e,0x00,0x00
000354  00000000          DCB      0x00,0x00,0x00,0x00
000358  003c120c          DCB      0x00,0x3c,0x12,0x0c
00035c  021c221c          DCB      0x02,0x1c,0x22,0x1c
000360  00030202          DCB      0x00,0x03,0x02,0x02
000364  020e1212          DCB      0x02,0x0e,0x12,0x12
000368  12370000          DCB      0x12,0x37,0x00,0x00
00036c  00040400          DCB      0x00,0x04,0x04,0x00
000370  00060404          DCB      0x00,0x06,0x04,0x04
000374  040e0000          DCB      0x04,0x0e,0x00,0x00
000378  00080800          DCB      0x00,0x08,0x08,0x00
00037c  000c0808          DCB      0x00,0x0c,0x08,0x08
000380  08080807          DCB      0x08,0x08,0x08,0x07
000384  00030202          DCB      0x00,0x03,0x02,0x02
000388  021a0a06          DCB      0x02,0x1a,0x0a,0x06
00038c  0a130000          DCB      0x0a,0x13,0x00,0x00
000390  00070404          DCB      0x00,0x07,0x04,0x04
000394  04040404          DCB      0x04,0x04,0x04,0x04
000398  041f0000          DCB      0x04,0x1f,0x00,0x00
00039c  00000000          DCB      0x00,0x00,0x00,0x00
0003a0  000f1515          DCB      0x00,0x0f,0x15,0x15
0003a4  15150000          DCB      0x15,0x15,0x00,0x00
0003a8  00000000          DCB      0x00,0x00,0x00,0x00
0003ac  000f1212          DCB      0x00,0x0f,0x12,0x12
0003b0  12370000          DCB      0x12,0x37,0x00,0x00
0003b4  00000000          DCB      0x00,0x00,0x00,0x00
0003b8  000c1212          DCB      0x00,0x0c,0x12,0x12
0003bc  120c0000          DCB      0x12,0x0c,0x00,0x00
0003c0  00000000          DCB      0x00,0x00,0x00,0x00
0003c4  000f1212          DCB      0x00,0x0f,0x12,0x12
0003c8  120e0207          DCB      0x12,0x0e,0x02,0x07
0003cc  00000000          DCB      0x00,0x00,0x00,0x00
0003d0  001c1212          DCB      0x00,0x1c,0x12,0x12
0003d4  121c1038          DCB      0x12,0x1c,0x10,0x38
0003d8  00000000          DCB      0x00,0x00,0x00,0x00
0003dc  001b0602          DCB      0x00,0x1b,0x06,0x02
0003e0  02070000          DCB      0x02,0x07,0x00,0x00
0003e4  00000000          DCB      0x00,0x00,0x00,0x00
0003e8  001e020c          DCB      0x00,0x1e,0x02,0x0c
0003ec  101e0000          DCB      0x10,0x1e,0x00,0x00
0003f0  00000004          DCB      0x00,0x00,0x00,0x04
0003f4  041e0404          DCB      0x04,0x1e,0x04,0x04
0003f8  041c0000          DCB      0x04,0x1c,0x00,0x00
0003fc  00000000          DCB      0x00,0x00,0x00,0x00
000400  001b1212          DCB      0x00,0x1b,0x12,0x12
000404  123c0000          DCB      0x12,0x3c,0x00,0x00
000408  00000000          DCB      0x00,0x00,0x00,0x00
00040c  001b0a0a          DCB      0x00,0x1b,0x0a,0x0a
000410  04040000          DCB      0x04,0x04,0x00,0x00
000414  00000000          DCB      0x00,0x00,0x00,0x00
000418  0015150e          DCB      0x00,0x15,0x15,0x0e
00041c  0a0a0000          DCB      0x0a,0x0a,0x00,0x00
000420  00000000          DCB      0x00,0x00,0x00,0x00
000424  001b0a04          DCB      0x00,0x1b,0x0a,0x04
000428  0a1b0000          DCB      0x0a,0x1b,0x00,0x00
00042c  00000000          DCB      0x00,0x00,0x00,0x00
000430  00331212          DCB      0x00,0x33,0x12,0x12
000434  0c080403          DCB      0x0c,0x08,0x04,0x03
000438  00000000          DCB      0x00,0x00,0x00,0x00
00043c  001e0804          DCB      0x00,0x1e,0x08,0x04
000440  041e0000          DCB      0x04,0x1e,0x00,0x00
000444  18080808          DCB      0x18,0x08,0x08,0x08
000448  080c0808          DCB      0x08,0x0c,0x08,0x08
00044c  08081800          DCB      0x08,0x08,0x18,0x00
000450  08080808          DCB      0x08,0x08,0x08,0x08
000454  08080808          DCB      0x08,0x08,0x08,0x08
000458  08080808          DCB      0x08,0x08,0x08,0x08
00045c  06040404          DCB      0x06,0x04,0x04,0x04
000460  04080404          DCB      0x04,0x08,0x04,0x04
000464  04040600          DCB      0x04,0x04,0x06,0x00
000468  16090000          DCB      0x16,0x09,0x00,0x00
00046c  00000000          DCB      0x00,0x00,0x00,0x00
000470  00000000          DCB      0x00,0x00,0x00,0x00
                  lcd_ascii_1608
000474  00000000          DCB      0x00,0x00,0x00,0x00
000478  00000000          DCB      0x00,0x00,0x00,0x00
00047c  00000000          DCB      0x00,0x00,0x00,0x00
000480  00000000          DCB      0x00,0x00,0x00,0x00
000484  00000008          DCB      0x00,0x00,0x00,0x08
000488  08080808          DCB      0x08,0x08,0x08,0x08
00048c  08080000          DCB      0x08,0x08,0x00,0x00
000490  18180000          DCB      0x18,0x18,0x00,0x00
000494  00486c24          DCB      0x00,0x48,0x6c,0x24
000498  12000000          DCB      0x12,0x00,0x00,0x00
00049c  00000000          DCB      0x00,0x00,0x00,0x00
0004a0  00000000          DCB      0x00,0x00,0x00,0x00
0004a4  00000024          DCB      0x00,0x00,0x00,0x24
0004a8  24247f12          DCB      0x24,0x24,0x7f,0x12
0004ac  12127f12          DCB      0x12,0x12,0x7f,0x12
0004b0  12120000          DCB      0x12,0x12,0x00,0x00
0004b4  0000081c          DCB      0x00,0x00,0x08,0x1c
0004b8  2a2a0a0c          DCB      0x2a,0x2a,0x0a,0x0c
0004bc  1828282a          DCB      0x18,0x28,0x28,0x2a
0004c0  2a1c0808          DCB      0x2a,0x1c,0x08,0x08
0004c4  00000022          DCB      0x00,0x00,0x00,0x22
0004c8  25151515          DCB      0x25,0x15,0x15,0x15
0004cc  2a585454          DCB      0x2a,0x58,0x54,0x54
0004d0  54220000          DCB      0x54,0x22,0x00,0x00
0004d4  0000000c          DCB      0x00,0x00,0x00,0x0c
0004d8  1212120a          DCB      0x12,0x12,0x12,0x0a
0004dc  76252911          DCB      0x76,0x25,0x29,0x11
0004e0  916e0000          DCB      0x91,0x6e,0x00,0x00
0004e4  00060604          DCB      0x00,0x06,0x06,0x04
0004e8  03000000          DCB      0x03,0x00,0x00,0x00
0004ec  00000000          DCB      0x00,0x00,0x00,0x00
0004f0  00000000          DCB      0x00,0x00,0x00,0x00
0004f4  00402010          DCB      0x00,0x40,0x20,0x10
0004f8  10080808          DCB      0x10,0x08,0x08,0x08
0004fc  08080810          DCB      0x08,0x08,0x08,0x10
000500  10204000          DCB      0x10,0x20,0x40,0x00
000504  00020408          DCB      0x00,0x02,0x04,0x08
000508  08101010          DCB      0x08,0x10,0x10,0x10
00050c  10101008          DCB      0x10,0x10,0x10,0x08
000510  08040200          DCB      0x08,0x04,0x02,0x00
000514  00000000          DCB      0x00,0x00,0x00,0x00
000518  08086b1c          DCB      0x08,0x08,0x6b,0x1c
00051c  1c6b0808          DCB      0x1c,0x6b,0x08,0x08
000520  00000000          DCB      0x00,0x00,0x00,0x00
000524  00000000          DCB      0x00,0x00,0x00,0x00
000528  08080808          DCB      0x08,0x08,0x08,0x08
00052c  7f080808          DCB      0x7f,0x08,0x08,0x08
000530  08000000          DCB      0x08,0x00,0x00,0x00
000534  00000000          DCB      0x00,0x00,0x00,0x00
000538  00000000          DCB      0x00,0x00,0x00,0x00
00053c  00000000          DCB      0x00,0x00,0x00,0x00
000540  06060403          DCB      0x06,0x06,0x04,0x03
000544  00000000          DCB      0x00,0x00,0x00,0x00
000548  00000000          DCB      0x00,0x00,0x00,0x00
00054c  fe000000          DCB      0xfe,0x00,0x00,0x00
000550  00000000          DCB      0x00,0x00,0x00,0x00
000554  00000000          DCB      0x00,0x00,0x00,0x00
000558  00000000          DCB      0x00,0x00,0x00,0x00
00055c  00000000          DCB      0x00,0x00,0x00,0x00
000560  06060000          DCB      0x06,0x06,0x00,0x00
000564  00008040          DCB      0x00,0x00,0x80,0x40
000568  40202010          DCB      0x40,0x20,0x20,0x10
00056c  10080804          DCB      0x10,0x08,0x08,0x04
000570  04020200          DCB      0x04,0x02,0x02,0x00
000574  00000018          DCB      0x00,0x00,0x00,0x18
000578  24424242          DCB      0x24,0x42,0x42,0x42
00057c  42424242          DCB      0x42,0x42,0x42,0x42
000580  24180000          DCB      0x24,0x18,0x00,0x00
000584  00000008          DCB      0x00,0x00,0x00,0x08
000588  0e080808          DCB      0x0e,0x08,0x08,0x08
00058c  08080808          DCB      0x08,0x08,0x08,0x08
000590  083e0000          DCB      0x08,0x3e,0x00,0x00
000594  0000003c          DCB      0x00,0x00,0x00,0x3c
000598  42424220          DCB      0x42,0x42,0x42,0x20
00059c  20100804          DCB      0x20,0x10,0x08,0x04
0005a0  427e0000          DCB      0x42,0x7e,0x00,0x00
0005a4  0000003c          DCB      0x00,0x00,0x00,0x3c
0005a8  42422018          DCB      0x42,0x42,0x20,0x18
0005ac  20404042          DCB      0x20,0x40,0x40,0x42
0005b0  221c0000          DCB      0x22,0x1c,0x00,0x00
0005b4  00000020          DCB      0x00,0x00,0x00,0x20
0005b8  30282424          DCB      0x30,0x28,0x24,0x24
0005bc  22227e20          DCB      0x22,0x22,0x7e,0x20
0005c0  20780000          DCB      0x20,0x78,0x00,0x00
0005c4  0000007e          DCB      0x00,0x00,0x00,0x7e
0005c8  0202021a          DCB      0x02,0x02,0x02,0x1a
0005cc  26404042          DCB      0x26,0x40,0x40,0x42
0005d0  221c0000          DCB      0x22,0x1c,0x00,0x00
0005d4  00000038          DCB      0x00,0x00,0x00,0x38
0005d8  2402021a          DCB      0x24,0x02,0x02,0x1a
0005dc  26424242          DCB      0x26,0x42,0x42,0x42
0005e0  24180000          DCB      0x24,0x18,0x00,0x00
0005e4  0000007e          DCB      0x00,0x00,0x00,0x7e
0005e8  22221010          DCB      0x22,0x22,0x10,0x10
0005ec  08080808          DCB      0x08,0x08,0x08,0x08
0005f0  08080000          DCB      0x08,0x08,0x00,0x00
0005f4  0000003c          DCB      0x00,0x00,0x00,0x3c
0005f8  42424224          DCB      0x42,0x42,0x42,0x24
0005fc  18244242          DCB      0x18,0x24,0x42,0x42
000600  423c0000          DCB      0x42,0x3c,0x00,0x00
000604  00000018          DCB      0x00,0x00,0x00,0x18
000608  24424242          DCB      0x24,0x42,0x42,0x42
00060c  64584040          DCB      0x64,0x58,0x40,0x40
000610  241c0000          DCB      0x24,0x1c,0x00,0x00
000614  00000000          DCB      0x00,0x00,0x00,0x00
000618  00001818          DCB      0x00,0x00,0x18,0x18
00061c  00000000          DCB      0x00,0x00,0x00,0x00
000620  18180000          DCB      0x18,0x18,0x00,0x00
000624  00000000          DCB      0x00,0x00,0x00,0x00
000628  00000008          DCB      0x00,0x00,0x00,0x08
00062c  00000000          DCB      0x00,0x00,0x00,0x00
000630  00080804          DCB      0x00,0x08,0x08,0x04
000634  00000040          DCB      0x00,0x00,0x00,0x40
000638  20100804          DCB      0x20,0x10,0x08,0x04
00063c  02040810          DCB      0x02,0x04,0x08,0x10
000640  20400000          DCB      0x20,0x40,0x00,0x00
000644  00000000          DCB      0x00,0x00,0x00,0x00
000648  00007f00          DCB      0x00,0x00,0x7f,0x00
00064c  00007f00          DCB      0x00,0x00,0x7f,0x00
000650  00000000          DCB      0x00,0x00,0x00,0x00
000654  00000002          DCB      0x00,0x00,0x00,0x02
000658  04081020          DCB      0x04,0x08,0x10,0x20
00065c  40201008          DCB      0x40,0x20,0x10,0x08
000660  04020000          DCB      0x04,0x02,0x00,0x00
000664  0000003c          DCB      0x00,0x00,0x00,0x3c
000668  42424640          DCB      0x42,0x42,0x46,0x40
00066c  20101000          DCB      0x20,0x10,0x10,0x00
000670  18180000          DCB      0x18,0x18,0x00,0x00
000674  0000001c          DCB      0x00,0x00,0x00,0x1c
000678  225a5555          DCB      0x22,0x5a,0x55,0x55
00067c  55552d42          DCB      0x55,0x55,0x2d,0x42
000680  221c0000          DCB      0x22,0x1c,0x00,0x00
000684  00000008          DCB      0x00,0x00,0x00,0x08
000688  08181414          DCB      0x08,0x18,0x14,0x14
00068c  243c2242          DCB      0x24,0x3c,0x22,0x42
000690  42e70000          DCB      0x42,0xe7,0x00,0x00
000694  0000001f          DCB      0x00,0x00,0x00,0x1f
000698  2222221e          DCB      0x22,0x22,0x22,0x1e
00069c  22424242          DCB      0x22,0x42,0x42,0x42
0006a0  221f0000          DCB      0x22,0x1f,0x00,0x00
0006a4  0000007c          DCB      0x00,0x00,0x00,0x7c
0006a8  42420101          DCB      0x42,0x42,0x01,0x01
0006ac  01010142          DCB      0x01,0x01,0x01,0x42
0006b0  221c0000          DCB      0x22,0x1c,0x00,0x00
0006b4  0000001f          DCB      0x00,0x00,0x00,0x1f
0006b8  22424242          DCB      0x22,0x42,0x42,0x42
0006bc  42424242          DCB      0x42,0x42,0x42,0x42
0006c0  221f0000          DCB      0x22,0x1f,0x00,0x00
0006c4  0000003f          DCB      0x00,0x00,0x00,0x3f
0006c8  4212121e          DCB      0x42,0x12,0x12,0x1e
0006cc  12120242          DCB      0x12,0x12,0x02,0x42
0006d0  423f0000          DCB      0x42,0x3f,0x00,0x00
0006d4  0000003f          DCB      0x00,0x00,0x00,0x3f
0006d8  4212121e          DCB      0x42,0x12,0x12,0x1e
0006dc  12120202          DCB      0x12,0x12,0x02,0x02
0006e0  02070000          DCB      0x02,0x07,0x00,0x00
0006e4  0000003c          DCB      0x00,0x00,0x00,0x3c
0006e8  22220101          DCB      0x22,0x22,0x01,0x01
0006ec  01712122          DCB      0x01,0x71,0x21,0x22
0006f0  221c0000          DCB      0x22,0x1c,0x00,0x00
0006f4  000000e7          DCB      0x00,0x00,0x00,0xe7
0006f8  42424242          DCB      0x42,0x42,0x42,0x42
0006fc  7e424242          DCB      0x7e,0x42,0x42,0x42
000700  42e70000          DCB      0x42,0xe7,0x00,0x00
000704  0000003e          DCB      0x00,0x00,0x00,0x3e
000708  08080808          DCB      0x08,0x08,0x08,0x08
00070c  08080808          DCB      0x08,0x08,0x08,0x08
000710  083e0000          DCB      0x08,0x3e,0x00,0x00
000714  0000007c          DCB      0x00,0x00,0x00,0x7c
000718  10101010          DCB      0x10,0x10,0x10,0x10
00071c  10101010          DCB      0x10,0x10,0x10,0x10
000720  1010110f          DCB      0x10,0x10,0x11,0x0f
000724  00000077          DCB      0x00,0x00,0x00,0x77
000728  22120a0e          DCB      0x22,0x12,0x0a,0x0e
00072c  0a121222          DCB      0x0a,0x12,0x12,0x22
000730  22770000          DCB      0x22,0x77,0x00,0x00
000734  00000007          DCB      0x00,0x00,0x00,0x07
000738  02020202          DCB      0x02,0x02,0x02,0x02
00073c  02020202          DCB      0x02,0x02,0x02,0x02
000740  427f0000          DCB      0x42,0x7f,0x00,0x00
000744  00000077          DCB      0x00,0x00,0x00,0x77
000748  36363636          DCB      0x36,0x36,0x36,0x36
00074c  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000750  2a6b0000          DCB      0x2a,0x6b,0x00,0x00
000754  000000e3          DCB      0x00,0x00,0x00,0xe3
000758  46464a4a          DCB      0x46,0x46,0x4a,0x4a
00075c  52525262          DCB      0x52,0x52,0x52,0x62
000760  62470000          DCB      0x62,0x47,0x00,0x00
000764  0000001c          DCB      0x00,0x00,0x00,0x1c
000768  22414141          DCB      0x22,0x41,0x41,0x41
00076c  41414141          DCB      0x41,0x41,0x41,0x41
000770  221c0000          DCB      0x22,0x1c,0x00,0x00
000774  0000003f          DCB      0x00,0x00,0x00,0x3f
000778  42424242          DCB      0x42,0x42,0x42,0x42
00077c  3e020202          DCB      0x3e,0x02,0x02,0x02
000780  02070000          DCB      0x02,0x07,0x00,0x00
000784  0000001c          DCB      0x00,0x00,0x00,0x1c
000788  22414141          DCB      0x22,0x41,0x41,0x41
00078c  41414d53          DCB      0x41,0x41,0x4d,0x53
000790  321c6000          DCB      0x32,0x1c,0x60,0x00
000794  0000003f          DCB      0x00,0x00,0x00,0x3f
000798  4242423e          DCB      0x42,0x42,0x42,0x3e
00079c  12122222          DCB      0x12,0x12,0x22,0x22
0007a0  42c70000          DCB      0x42,0xc7,0x00,0x00
0007a4  0000007c          DCB      0x00,0x00,0x00,0x7c
0007a8  42420204          DCB      0x42,0x42,0x02,0x04
0007ac  18204042          DCB      0x18,0x20,0x40,0x42
0007b0  423e0000          DCB      0x42,0x3e,0x00,0x00
0007b4  0000007f          DCB      0x00,0x00,0x00,0x7f
0007b8  49080808          DCB      0x49,0x08,0x08,0x08
0007bc  08080808          DCB      0x08,0x08,0x08,0x08
0007c0  081c0000          DCB      0x08,0x1c,0x00,0x00
0007c4  000000e7          DCB      0x00,0x00,0x00,0xe7
0007c8  42424242          DCB      0x42,0x42,0x42,0x42
0007cc  42424242          DCB      0x42,0x42,0x42,0x42
0007d0  423c0000          DCB      0x42,0x3c,0x00,0x00
0007d4  000000e7          DCB      0x00,0x00,0x00,0xe7
0007d8  42422224          DCB      0x42,0x42,0x22,0x24
0007dc  24141418          DCB      0x24,0x14,0x14,0x18
0007e0  08080000          DCB      0x08,0x08,0x00,0x00
0007e4  0000006b          DCB      0x00,0x00,0x00,0x6b
0007e8  49494949          DCB      0x49,0x49,0x49,0x49
0007ec  55553622          DCB      0x55,0x55,0x36,0x22
0007f0  22220000          DCB      0x22,0x22,0x00,0x00
0007f4  000000e7          DCB      0x00,0x00,0x00,0xe7
0007f8  42242418          DCB      0x42,0x24,0x24,0x18
0007fc  18182424          DCB      0x18,0x18,0x24,0x24
000800  42e70000          DCB      0x42,0xe7,0x00,0x00
000804  00000077          DCB      0x00,0x00,0x00,0x77
000808  22221414          DCB      0x22,0x22,0x14,0x14
00080c  08080808          DCB      0x08,0x08,0x08,0x08
000810  081c0000          DCB      0x08,0x1c,0x00,0x00
000814  0000007e          DCB      0x00,0x00,0x00,0x7e
000818  21201010          DCB      0x21,0x20,0x10,0x10
00081c  08040442          DCB      0x08,0x04,0x04,0x42
000820  423f0000          DCB      0x42,0x3f,0x00,0x00
000824  00780808          DCB      0x00,0x78,0x08,0x08
000828  08080808          DCB      0x08,0x08,0x08,0x08
00082c  08080808          DCB      0x08,0x08,0x08,0x08
000830  08087800          DCB      0x08,0x08,0x78,0x00
000834  00000202          DCB      0x00,0x00,0x02,0x02
000838  04040808          DCB      0x04,0x04,0x08,0x08
00083c  08101020          DCB      0x08,0x10,0x10,0x20
000840  20204040          DCB      0x20,0x20,0x40,0x40
000844  001e1010          DCB      0x00,0x1e,0x10,0x10
000848  10101010          DCB      0x10,0x10,0x10,0x10
00084c  10101010          DCB      0x10,0x10,0x10,0x10
000850  10101e00          DCB      0x10,0x10,0x1e,0x00
000854  00384400          DCB      0x00,0x38,0x44,0x00
000858  00000000          DCB      0x00,0x00,0x00,0x00
00085c  00000000          DCB      0x00,0x00,0x00,0x00
000860  00000000          DCB      0x00,0x00,0x00,0x00
000864  00000000          DCB      0x00,0x00,0x00,0x00
000868  00000000          DCB      0x00,0x00,0x00,0x00
00086c  00000000          DCB      0x00,0x00,0x00,0x00
000870  000000ff          DCB      0x00,0x00,0x00,0xff
000874  00060800          DCB      0x00,0x06,0x08,0x00
000878  00000000          DCB      0x00,0x00,0x00,0x00
00087c  00000000          DCB      0x00,0x00,0x00,0x00
000880  00000000          DCB      0x00,0x00,0x00,0x00
000884  00000000          DCB      0x00,0x00,0x00,0x00
000888  0000003c          DCB      0x00,0x00,0x00,0x3c
00088c  42784442          DCB      0x42,0x78,0x44,0x42
000890  42fc0000          DCB      0x42,0xfc,0x00,0x00
000894  00000003          DCB      0x00,0x00,0x00,0x03
000898  0202021a          DCB      0x02,0x02,0x02,0x1a
00089c  26424242          DCB      0x26,0x42,0x42,0x42
0008a0  261a0000          DCB      0x26,0x1a,0x00,0x00
0008a4  00000000          DCB      0x00,0x00,0x00,0x00
0008a8  00000038          DCB      0x00,0x00,0x00,0x38
0008ac  44020202          DCB      0x44,0x02,0x02,0x02
0008b0  44380000          DCB      0x44,0x38,0x00,0x00
0008b4  00000060          DCB      0x00,0x00,0x00,0x60
0008b8  40404078          DCB      0x40,0x40,0x40,0x78
0008bc  44424242          DCB      0x44,0x42,0x42,0x42
0008c0  64d80000          DCB      0x64,0xd8,0x00,0x00
0008c4  00000000          DCB      0x00,0x00,0x00,0x00
0008c8  0000003c          DCB      0x00,0x00,0x00,0x3c
0008cc  427e0202          DCB      0x42,0x7e,0x02,0x02
0008d0  423c0000          DCB      0x42,0x3c,0x00,0x00
0008d4  000000f0          DCB      0x00,0x00,0x00,0xf0
0008d8  8808087e          DCB      0x88,0x08,0x08,0x7e
0008dc  08080808          DCB      0x08,0x08,0x08,0x08
0008e0  083e0000          DCB      0x08,0x3e,0x00,0x00
0008e4  00000000          DCB      0x00,0x00,0x00,0x00
0008e8  0000007c          DCB      0x00,0x00,0x00,0x7c
0008ec  22221c02          DCB      0x22,0x22,0x1c,0x02
0008f0  3c42423c          DCB      0x3c,0x42,0x42,0x3c
0008f4  00000003          DCB      0x00,0x00,0x00,0x03
0008f8  0202023a          DCB      0x02,0x02,0x02,0x3a
0008fc  46424242          DCB      0x46,0x42,0x42,0x42
000900  42e70000          DCB      0x42,0xe7,0x00,0x00
000904  0000000c          DCB      0x00,0x00,0x00,0x0c
000908  0c00000e          DCB      0x0c,0x00,0x00,0x0e
00090c  08080808          DCB      0x08,0x08,0x08,0x08
000910  083e0000          DCB      0x08,0x3e,0x00,0x00
000914  00000030          DCB      0x00,0x00,0x00,0x30
000918  30000038          DCB      0x30,0x00,0x00,0x38
00091c  20202020          DCB      0x20,0x20,0x20,0x20
000920  2020221e          DCB      0x20,0x20,0x22,0x1e
000924  00000003          DCB      0x00,0x00,0x00,0x03
000928  02020272          DCB      0x02,0x02,0x02,0x72
00092c  120a1612          DCB      0x12,0x0a,0x16,0x12
000930  22770000          DCB      0x22,0x77,0x00,0x00
000934  0000000e          DCB      0x00,0x00,0x00,0x0e
000938  08080808          DCB      0x08,0x08,0x08,0x08
00093c  08080808          DCB      0x08,0x08,0x08,0x08
000940  083e0000          DCB      0x08,0x3e,0x00,0x00
000944  00000000          DCB      0x00,0x00,0x00,0x00
000948  0000007f          DCB      0x00,0x00,0x00,0x7f
00094c  92929292          DCB      0x92,0x92,0x92,0x92
000950  92b70000          DCB      0x92,0xb7,0x00,0x00
000954  00000000          DCB      0x00,0x00,0x00,0x00
000958  0000003b          DCB      0x00,0x00,0x00,0x3b
00095c  46424242          DCB      0x46,0x42,0x42,0x42
000960  42e70000          DCB      0x42,0xe7,0x00,0x00
000964  00000000          DCB      0x00,0x00,0x00,0x00
000968  0000003c          DCB      0x00,0x00,0x00,0x3c
00096c  42424242          DCB      0x42,0x42,0x42,0x42
000970  423c0000          DCB      0x42,0x3c,0x00,0x00
000974  00000000          DCB      0x00,0x00,0x00,0x00
000978  0000001b          DCB      0x00,0x00,0x00,0x1b
00097c  26424242          DCB      0x26,0x42,0x42,0x42
000980  221e0207          DCB      0x22,0x1e,0x02,0x07
000984  00000000          DCB      0x00,0x00,0x00,0x00
000988  00000078          DCB      0x00,0x00,0x00,0x78
00098c  44424242          DCB      0x44,0x42,0x42,0x42
000990  447840e0          DCB      0x44,0x78,0x40,0xe0
000994  00000000          DCB      0x00,0x00,0x00,0x00
000998  00000077          DCB      0x00,0x00,0x00,0x77
00099c  4c040404          DCB      0x4c,0x04,0x04,0x04
0009a0  041f0000          DCB      0x04,0x1f,0x00,0x00
0009a4  00000000          DCB      0x00,0x00,0x00,0x00
0009a8  0000007c          DCB      0x00,0x00,0x00,0x7c
0009ac  42023c40          DCB      0x42,0x02,0x3c,0x40
0009b0  423e0000          DCB      0x42,0x3e,0x00,0x00
0009b4  00000000          DCB      0x00,0x00,0x00,0x00
0009b8  0008083e          DCB      0x00,0x08,0x08,0x3e
0009bc  08080808          DCB      0x08,0x08,0x08,0x08
0009c0  08300000          DCB      0x08,0x30,0x00,0x00
0009c4  00000000          DCB      0x00,0x00,0x00,0x00
0009c8  00000063          DCB      0x00,0x00,0x00,0x63
0009cc  42424242          DCB      0x42,0x42,0x42,0x42
0009d0  62dc0000          DCB      0x62,0xdc,0x00,0x00
0009d4  00000000          DCB      0x00,0x00,0x00,0x00
0009d8  000000e7          DCB      0x00,0x00,0x00,0xe7
0009dc  42242414          DCB      0x42,0x24,0x24,0x14
0009e0  08080000          DCB      0x08,0x08,0x00,0x00
0009e4  00000000          DCB      0x00,0x00,0x00,0x00
0009e8  000000eb          DCB      0x00,0x00,0x00,0xeb
0009ec  49495555          DCB      0x49,0x49,0x55,0x55
0009f0  22220000          DCB      0x22,0x22,0x00,0x00
0009f4  00000000          DCB      0x00,0x00,0x00,0x00
0009f8  00000076          DCB      0x00,0x00,0x00,0x76
0009fc  24181818          DCB      0x24,0x18,0x18,0x18
000a00  246e0000          DCB      0x24,0x6e,0x00,0x00
000a04  00000000          DCB      0x00,0x00,0x00,0x00
000a08  000000e7          DCB      0x00,0x00,0x00,0xe7
000a0c  42242414          DCB      0x42,0x24,0x24,0x14
000a10  18080807          DCB      0x18,0x08,0x08,0x07
000a14  00000000          DCB      0x00,0x00,0x00,0x00
000a18  0000007e          DCB      0x00,0x00,0x00,0x7e
000a1c  22100808          DCB      0x22,0x10,0x08,0x08
000a20  447e0000          DCB      0x44,0x7e,0x00,0x00
000a24  00c02020          DCB      0x00,0xc0,0x20,0x20
000a28  20202010          DCB      0x20,0x20,0x20,0x10
000a2c  20202020          DCB      0x20,0x20,0x20,0x20
000a30  2020c000          DCB      0x20,0x20,0xc0,0x00
000a34  10101010          DCB      0x10,0x10,0x10,0x10
000a38  10101010          DCB      0x10,0x10,0x10,0x10
000a3c  10101010          DCB      0x10,0x10,0x10,0x10
000a40  10101010          DCB      0x10,0x10,0x10,0x10
000a44  00060808          DCB      0x00,0x06,0x08,0x08
000a48  08080810          DCB      0x08,0x08,0x08,0x10
000a4c  08080808          DCB      0x08,0x08,0x08,0x08
000a50  08080600          DCB      0x08,0x08,0x06,0x00
000a54  0c32c200          DCB      0x0c,0x32,0xc2,0x00
000a58  00000000          DCB      0x00,0x00,0x00,0x00
000a5c  00000000          DCB      0x00,0x00,0x00,0x00
000a60  00000000          DCB      0x00,0x00,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  now_x
                          DCD      0x00000000
                  now_y
                          DCD      0x00000000
                  |symbol_number.32|
                          DCD      0x00000000
                  |symbol_number.33|
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_59c59a2e____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_lcd_c_59c59a2e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_59c59a2e____REVSH|
#line 144
|__asm___5_lcd_c_59c59a2e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
