; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\test_flash_read_check.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\test_flash_read_check.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\berry_ft -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\kiwi_ft -I..\..\User\kiwi_ft\spv40 -I..\..\User\kiwi_ft\spv40\peripheral -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\kiwi_ft -I..\..\User\MultiButton-1.1.0 -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\test_flash_read_check.crf ..\..\User\kiwi_ft\test_flash_read_check.c]
                          THUMB

                          AREA ||i.test_flash_read_check||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  test_flash_read_check PROC
;;;4      
;;;5      fsm_rt_t test_flash_read_check(void)
000000  b530              PUSH     {r4,r5,lr}
;;;6      {
000002  f6ad0d14          SUB      sp,sp,#0x814
;;;7          fsm_rt_t ret=fsm_rt_cpl;
000006  2400              MOVS     r4,#0
;;;8          
;;;9          static enum
;;;10         {
;;;11             START = 0,    
;;;12             FLASH_READ_ID,
;;;13             FLASH_READ_AREA_SET,
;;;14             FLASH_READ,
;;;15         } s_tState = START;
;;;16         uint8_t wbuf[2048];
;;;17         uint32_t bw;
;;;18         switch(s_tState)
000008  4858              LDR      r0,|L1.364|
00000a  7800              LDRB     r0,[r0,#0]  ; s_tState
00000c  b130              CBZ      r0,|L1.28|
00000e  2801              CMP      r0,#1
000010  d00a              BEQ      |L1.40|
000012  2802              CMP      r0,#2
000014  d02e              BEQ      |L1.116|
000016  2803              CMP      r0,#3
000018  d12b              BNE      |L1.114|
00001a  e043              B        |L1.164|
                  |L1.28|
;;;19         {
;;;20         case START:
;;;21             s_tState++;
00001c  4853              LDR      r0,|L1.364|
00001e  7800              LDRB     r0,[r0,#0]  ; s_tState
000020  1c40              ADDS     r0,r0,#1
000022  4952              LDR      r1,|L1.364|
000024  7008              STRB     r0,[r1,#0]
;;;22             //break;
;;;23         
;;;24         case FLASH_READ_ID:
000026  bf00              NOP      
                  |L1.40|
;;;25             {
;;;26                  /** @step 1:kiwi flash 引脚配置，返回chip id */
;;;27                 const uint8_t flash_pin_cfg[12]={10,11,12,13,14,15,1,1,1,1,1,1};
000028  a051              ADR      r0,|L1.368|
00002a  e9d03200          LDRD     r3,r2,[r0,#0]
00002e  6881              LDR      r1,[r0,#8]
000030  e9cd3201          STRD     r3,r2,[sp,#4]
000034  9103              STR      r1,[sp,#0xc]
;;;28                 do
000036  bf00              NOP      
                  |L1.56|
;;;29                 { 
;;;30                    ret = spl_send_and_paser(0x2f,sizeof(flash_pin_cfg),(uint8_t*)flash_pin_cfg);
000038  aa01              ADD      r2,sp,#4
00003a  210c              MOVS     r1,#0xc
00003c  202f              MOVS     r0,#0x2f
00003e  f7fffffe          BL       spl_send_and_paser
000042  4604              MOV      r4,r0
;;;31                 }while(ret == fsm_rt_on_going);
000044  2c01              CMP      r4,#1
000046  d0f7              BEQ      |L1.56|
;;;32                 if(ret != fsm_rt_cpl ) goto fail;
000048  b104              CBZ      r4,|L1.76|
00004a  e089              B        |L1.352|
                  |L1.76|
;;;33            
;;;34                 
;;;35                 
;;;36                 do{
00004c  bf00              NOP      
                  |L1.78|
;;;37                     ret = spl_send_and_paser(0x25,0,NULL);
00004e  2200              MOVS     r2,#0
000050  4611              MOV      r1,r2
000052  2025              MOVS     r0,#0x25
000054  f7fffffe          BL       spl_send_and_paser
000058  4604              MOV      r4,r0
;;;38                 }while(ret == fsm_rt_on_going);
00005a  2c01              CMP      r4,#1
00005c  d0f7              BEQ      |L1.78|
;;;39                 if(ret != fsm_rt_cpl) goto fail;
00005e  b104              CBZ      r4,|L1.98|
000060  e07e              B        |L1.352|
                  |L1.98|
;;;40                 /* ssop24核封flash型号P25D40,4Mbit,chip id:0x856013  */
;;;41                 debug("flash chip id:0x%08x\r\n",*((uint32_t*)&msg_recv.msg_body.content[0])); 
000062  4846              LDR      r0,|L1.380|
000064  6901              LDR      r1,[r0,#0x10]  ; msg_recv
000066  a046              ADR      r0,|L1.384|
000068  f7fffffe          BL       __2printf
;;;42                 s_tState = FLASH_READ_AREA_SET;
00006c  2002              MOVS     r0,#2
00006e  493f              LDR      r1,|L1.364|
000070  7008              STRB     r0,[r1,#0]
                  |L1.114|
;;;43                 
;;;44             }
;;;45             break;
000072  e072              B        |L1.346|
                  |L1.116|
;;;46         
;;;47         case FLASH_READ_AREA_SET:
;;;48             {
;;;49                 const uint32_t flash_read_area_cfg[]={0,4096,2048,0};
000074  4848              LDR      r0,|L1.408|
000076  e9d05300          LDRD     r5,r3,[r0,#0]
00007a  e9d02102          LDRD     r2,r1,[r0,#8]
00007e  e9cd5300          STRD     r5,r3,[sp,#0]
000082  e9cd2102          STRD     r2,r1,[sp,#8]
;;;50                 do
000086  bf00              NOP      
                  |L1.136|
;;;51                 { 
;;;52                    ret = spl_send_and_paser(0x22,sizeof(flash_read_area_cfg),(uint8_t*)flash_read_area_cfg);
000088  466a              MOV      r2,sp
00008a  2110              MOVS     r1,#0x10
00008c  2022              MOVS     r0,#0x22
00008e  f7fffffe          BL       spl_send_and_paser
000092  4604              MOV      r4,r0
;;;53                 }while(ret == fsm_rt_on_going);
000094  2c01              CMP      r4,#1
000096  d0f7              BEQ      |L1.136|
;;;54                 if(ret != fsm_rt_cpl ) goto fail;
000098  b104              CBZ      r4,|L1.156|
00009a  e061              B        |L1.352|
                  |L1.156|
;;;55                 s_tState = FLASH_READ;
00009c  2003              MOVS     r0,#3
00009e  4933              LDR      r1,|L1.364|
0000a0  7008              STRB     r0,[r1,#0]
;;;56             }
;;;57             break;
0000a2  e05a              B        |L1.346|
                  |L1.164|
;;;58         
;;;59         case FLASH_READ:
;;;60             {
;;;61                 do
0000a4  bf00              NOP      
                  |L1.166|
;;;62                 { 
;;;63                    ret = spl_send_and_paser(0x23,0,NULL);
0000a6  2200              MOVS     r2,#0
0000a8  4611              MOV      r1,r2
0000aa  2023              MOVS     r0,#0x23
0000ac  f7fffffe          BL       spl_send_and_paser
0000b0  4604              MOV      r4,r0
;;;64                 }while(ret == fsm_rt_on_going);
0000b2  2c01              CMP      r4,#1
0000b4  d0f7              BEQ      |L1.166|
;;;65                 if(ret != fsm_rt_cpl ) return ret;
0000b6  b11c              CBZ      r4,|L1.192|
0000b8  4620              MOV      r0,r4
                  |L1.186|
;;;66                 f_lseek(&customer_file, 0); //文件索引跳到0的位置
;;;67                 if( f_read(&customer_file, wbuf, 2048, &bw) == FR_OK && bw == 2048)
;;;68                 {
;;;69                     if(memcmp(wbuf, msg_recv.msg_body.content,2048) != 0)
;;;70                     {
;;;71                         ret = fsm_rt_err_flash_read_head_2k;
;;;72                         goto fail;
;;;73                     }
;;;74                 }
;;;75                 
;;;76                 do
;;;77                 { 
;;;78                    ret = spl_send_and_paser(0x23,0,NULL);
;;;79                 }while(ret == fsm_rt_on_going);
;;;80                 if(ret != fsm_rt_cpl ) return ret;
;;;81                 
;;;82                 if( f_read(&customer_file, wbuf, 2048, &bw) == FR_OK && bw == 2048)
;;;83                 {
;;;84                     memcpy(msg_recv.msg_body.content, wbuf, 40);
;;;85                     if(memcmp(wbuf, msg_recv.msg_body.content,2048) != 0)
;;;86                     {
;;;87                         ret = fsm_rt_err_flash_read_tail_2k;
;;;88                         goto fail;
;;;89                     }
;;;90                 }
;;;91                 logging("SUCCESS flash 4K read check!\r\n");
;;;92                 s_tState = START;
;;;93                 return fsm_rt_cpl;
;;;94             }
;;;95             //break;
;;;96         }
;;;97         
;;;98         return fsm_rt_on_going;
;;;99         
;;;100        fail:
;;;101        s_tState = START;
;;;102        return ret;
;;;103    }
0000ba  f60d0d14          ADD      sp,sp,#0x814
0000be  bd30              POP      {r4,r5,pc}
                  |L1.192|
0000c0  2100              MOVS     r1,#0                 ;66
0000c2  4836              LDR      r0,|L1.412|
0000c4  f7fffffe          BL       f_lseek
0000c8  ab04              ADD      r3,sp,#0x10           ;67
0000ca  f44f6200          MOV      r2,#0x800             ;67
0000ce  a905              ADD      r1,sp,#0x14           ;67
0000d0  4832              LDR      r0,|L1.412|
0000d2  f7fffffe          BL       f_read
0000d6  b970              CBNZ     r0,|L1.246|
0000d8  9804              LDR      r0,[sp,#0x10]         ;67
0000da  f5b06f00          CMP      r0,#0x800             ;67
0000de  d10a              BNE      |L1.246|
0000e0  f44f6200          MOV      r2,#0x800             ;69
0000e4  4925              LDR      r1,|L1.380|
0000e6  3110              ADDS     r1,r1,#0x10           ;69
0000e8  a805              ADD      r0,sp,#0x14           ;69
0000ea  f7fffffe          BL       memcmp
0000ee  b110              CBZ      r0,|L1.246|
0000f0  f06f0430          MVN      r4,#0x30              ;71
0000f4  e034              B        |L1.352|
                  |L1.246|
0000f6  bf00              NOP                            ;76
                  |L1.248|
0000f8  2200              MOVS     r2,#0                 ;78
0000fa  4611              MOV      r1,r2                 ;78
0000fc  2023              MOVS     r0,#0x23              ;78
0000fe  f7fffffe          BL       spl_send_and_paser
000102  4604              MOV      r4,r0                 ;78
000104  2c01              CMP      r4,#1                 ;79
000106  d0f7              BEQ      |L1.248|
000108  b10c              CBZ      r4,|L1.270|
00010a  4620              MOV      r0,r4                 ;80
00010c  e7d5              B        |L1.186|
                  |L1.270|
00010e  ab04              ADD      r3,sp,#0x10           ;82
000110  f44f6200          MOV      r2,#0x800             ;82
000114  a905              ADD      r1,sp,#0x14           ;82
000116  4821              LDR      r0,|L1.412|
000118  f7fffffe          BL       f_read
00011c  b9a0              CBNZ     r0,|L1.328|
00011e  9804              LDR      r0,[sp,#0x10]         ;82
000120  f5b06f00          CMP      r0,#0x800             ;82
000124  d110              BNE      |L1.328|
000126  2228              MOVS     r2,#0x28              ;84
000128  a905              ADD      r1,sp,#0x14           ;84
00012a  4814              LDR      r0,|L1.380|
00012c  3010              ADDS     r0,r0,#0x10           ;84
00012e  f7fffffe          BL       __aeabi_memcpy4
000132  f44f6200          MOV      r2,#0x800             ;85
000136  4911              LDR      r1,|L1.380|
000138  3110              ADDS     r1,r1,#0x10           ;85
00013a  a805              ADD      r0,sp,#0x14           ;85
00013c  f7fffffe          BL       memcmp
000140  b110              CBZ      r0,|L1.328|
000142  f06f0431          MVN      r4,#0x31              ;87
000146  e00b              B        |L1.352|
                  |L1.328|
000148  4815              LDR      r0,|L1.416|
00014a  6801              LDR      r1,[r0,#0]            ;91  ; g_iRunTime
00014c  a015              ADR      r0,|L1.420|
00014e  f7fffffe          BL       logger_buffer_write
000152  2000              MOVS     r0,#0                 ;92
000154  4905              LDR      r1,|L1.364|
000156  7008              STRB     r0,[r1,#0]            ;92
000158  e7af              B        |L1.186|
                  |L1.346|
00015a  bf00              NOP                            ;45
00015c  2001              MOVS     r0,#1                 ;98
00015e  e7ac              B        |L1.186|
                  |L1.352|
000160  2000              MOVS     r0,#0                 ;101
000162  4902              LDR      r1,|L1.364|
000164  7008              STRB     r0,[r1,#0]            ;101
000166  4620              MOV      r0,r4                 ;102
000168  e7a7              B        |L1.186|
                          ENDP

00016a  0000              DCW      0x0000
                  |L1.364|
                          DCD      s_tState
                  |L1.368|
000170  0a0b0c0d          DCB      "\n\v\f\r",14,15,1,1,1,1,1,1
000174  0e0f0101
000178  01010101
                  |L1.380|
                          DCD      msg_recv
                  |L1.384|
000180  666c6173          DCB      "flash chip id:0x%08x\r\n",0
000184  68206368
000188  69702069
00018c  643a3078
000190  25303878
000194  0d0a00  
000197  00                DCB      0
                  |L1.408|
                          DCD      ||.constdata||
                  |L1.412|
                          DCD      customer_file
                  |L1.416|
                          DCD      g_iRunTime
                  |L1.420|
0001a4  5b253864          DCB      "[%8d]SUCCESS flash 4K read check!\r\n",0
0001a8  5d535543
0001ac  43455353
0001b0  20666c61
0001b4  73682034
0001b8  4b207265
0001bc  61642063
0001c0  6865636b
0001c4  210d0a00

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00000000
                          DCD      0x00001000
                          DCD      0x00000800
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=0

                  pmu_item_en
000000  01                DCB      0x01
                  osc_audio_item_en
000001  01                DCB      0x01
                  osc_pmu_item_en
000002  01                DCB      0x01
                  osc_core_item_en
000003  01                DCB      0x01
                  pattern_item_en
000004  01                DCB      0x01
                  efuse_write_item_en
000005  01                DCB      0x01
                  customer_flash_item_en
000006  01                DCB      0x01
                  s_tState
000007  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\kiwi_ft\\test_flash_read_check.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___23_test_flash_read_check_c_d418cdae____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___23_test_flash_read_check_c_d418cdae____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___23_test_flash_read_check_c_d418cdae____REVSH|
#line 144
|__asm___23_test_flash_read_check_c_d418cdae____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
