; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\asu_bus.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\asu_bus.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\BERRY_TWI -I..\..\User\berry_ft -I..\..\User\ft_support -I..\..\User\berry_test -I..\..\User\factory_test -I..\..\User\emenu -I..\..\User\kiwi_ft -I..\..\User\kiwi_ft\spv40 -I..\..\User\kiwi_ft\spv40\peripheral -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\kiwi_ft -I..\..\User\MultiButton-1.1.0 -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.16.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\asu_bus.crf ..\..\User\kiwi_ft\asu_bus.c]
                          THUMB

                          AREA ||i.asu_pack_send||, CODE, READONLY, ALIGN=2

                  asu_pack_send PROC
;;;60     
;;;61     void asu_pack_send(uint32_t cmd,uint32_t addr,uint32_t len,uint8_t* pdat)
000000  b51f              PUSH     {r0-r4,lr}
;;;62     {
000002  b082              SUB      sp,sp,#8
000004  461c              MOV      r4,r3
;;;63     	uint32_t sum = 0;
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
;;;64     	sum = 0;
00000a  9001              STR      r0,[sp,#4]
;;;65     	sum += do_sum((uint8_t *)&cmd,sizeof(cmd));
00000c  2104              MOVS     r1,#4
00000e  a802              ADD      r0,sp,#8
000010  f7fffffe          BL       do_sum
000014  9901              LDR      r1,[sp,#4]
000016  4408              ADD      r0,r0,r1
000018  9001              STR      r0,[sp,#4]
;;;66     	sum += do_sum((uint8_t *)&addr,sizeof(addr));
00001a  2104              MOVS     r1,#4
00001c  a803              ADD      r0,sp,#0xc
00001e  f7fffffe          BL       do_sum
000022  9901              LDR      r1,[sp,#4]
000024  4408              ADD      r0,r0,r1
000026  9001              STR      r0,[sp,#4]
;;;67     	sum += do_sum((uint8_t *)&len,sizeof(len));
000028  2104              MOVS     r1,#4
00002a  a804              ADD      r0,sp,#0x10
00002c  f7fffffe          BL       do_sum
000030  9901              LDR      r1,[sp,#4]
000032  4408              ADD      r0,r0,r1
000034  9001              STR      r0,[sp,#4]
;;;68     	if(cmd & MSG_CMD_DATA_FLAG_MASK)
000036  9802              LDR      r0,[sp,#8]
000038  f0000040          AND      r0,r0,#0x40
00003c  b130              CBZ      r0,|L1.76|
;;;69     	{
;;;70     		sum += do_sum(pdat,len);
00003e  4620              MOV      r0,r4
000040  9904              LDR      r1,[sp,#0x10]
000042  f7fffffe          BL       do_sum
000046  9901              LDR      r1,[sp,#4]
000048  4408              ADD      r0,r0,r1
00004a  9001              STR      r0,[sp,#4]
                  |L1.76|
;;;71     	}
;;;72     	uart_send_datas((uint8_t *)msg_sync_header,sizeof(msg_sync_header));
00004c  2104              MOVS     r1,#4
00004e  480e              LDR      r0,|L1.136|
000050  f7fffffe          BL       uart_send_datas
;;;73     	uart_send_datas((uint8_t *)&cmd,sizeof(cmd));
000054  2104              MOVS     r1,#4
000056  a802              ADD      r0,sp,#8
000058  f7fffffe          BL       uart_send_datas
;;;74     	uart_send_datas((uint8_t *)&addr,sizeof(addr));
00005c  2104              MOVS     r1,#4
00005e  a803              ADD      r0,sp,#0xc
000060  f7fffffe          BL       uart_send_datas
;;;75     	uart_send_datas((uint8_t *)&len,sizeof(len));
000064  2104              MOVS     r1,#4
000066  a804              ADD      r0,sp,#0x10
000068  f7fffffe          BL       uart_send_datas
;;;76     	if(cmd & MSG_CMD_DATA_FLAG_MASK)
00006c  9802              LDR      r0,[sp,#8]
00006e  f0000040          AND      r0,r0,#0x40
000072  b118              CBZ      r0,|L1.124|
;;;77     	{
;;;78     		uart_send_datas(pdat,len);
000074  4620              MOV      r0,r4
000076  9904              LDR      r1,[sp,#0x10]
000078  f7fffffe          BL       uart_send_datas
                  |L1.124|
;;;79     	}
;;;80     	uart_send_datas((uint8_t *)&sum,sizeof(sum));
00007c  2104              MOVS     r1,#4
00007e  a801              ADD      r0,sp,#4
000080  f7fffffe          BL       uart_send_datas
;;;81     }
000084  b006              ADD      sp,sp,#0x18
000086  bd10              POP      {r4,pc}
;;;82     
                          ENDP

                  |L1.136|
                          DCD      msg_sync_header

                          AREA ||i.do_sum||, CODE, READONLY, ALIGN=1

                  do_sum PROC
;;;39     */
;;;40     uint32_t do_sum(uint8_t *pdata,uint32_t len)
000000  b510              PUSH     {r4,lr}
;;;41     {
000002  4602              MOV      r2,r0
;;;42     	uint32_t sum = 0;
000004  2000              MOVS     r0,#0
;;;43     	while(len--)
000006  e002              B        |L2.14|
                  |L2.8|
;;;44     	{
;;;45     		sum += *pdata++;
000008  f8124b01          LDRB     r4,[r2],#1
00000c  4420              ADD      r0,r0,r4
                  |L2.14|
00000e  1e0b              SUBS     r3,r1,#0              ;43
000010  f1a10101          SUB      r1,r1,#1              ;43
000014  d1f8              BNE      |L2.8|
;;;46     	}
;;;47     	return sum;
;;;48     }
000016  bd10              POP      {r4,pc}
;;;49      
                          ENDP


                          AREA ||i.kiwi_ack_paser||, CODE, READONLY, ALIGN=2

                  kiwi_ack_paser PROC
;;;110    */
;;;111    fsm_rt_t kiwi_ack_paser(void)
000000  b538              PUSH     {r3-r5,lr}
;;;112    {
;;;113    	static uint32_t msg_paser_field_index = 0;
;;;114        static uint32_t mem_total_len_temp;
;;;115        static enum
;;;116        {
;;;117            START = 0,
;;;118            MSG_SYNC,
;;;119            GET_CMD,
;;;120            GET_MEM_START_ADDR,
;;;121            GET_MEM_TOTAL_LEN,
;;;122            GET_MEM_CONTENT,
;;;123            GET_SUM,
;;;124            IS_SUM_CHECK_OK,
;;;125        } s_tState = START;
;;;126        
;;;127        uint8_t value = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;128    
;;;129        timer_creat();
;;;130        switch(s_tState)
000006  488e              LDR      r0,|L3.576|
000008  7800              LDRB     r0,[r0,#0]  ; s_tState
00000a  2808              CMP      r0,#8
00000c  d238              BCS      |L3.128|
00000e  e8dff000          TBB      [pc,r0]
000012  0417              DCB      0x04,0x17
000014  3856749f          DCB      0x38,0x56,0x74,0x9f
000018  bbdb              DCB      0xbb,0xdb
;;;131        {
;;;132        case START:
;;;133            timer_start(BROM_ACK_TIMEOUT);   //开启brom响应超时定时   
00001a  488a              LDR      r0,|L3.580|
00001c  6800              LDR      r0,[r0,#0]  ; g_iRunTime
00001e  3064              ADDS     r0,r0,#0x64
000020  4989              LDR      r1,|L3.584|
000022  6008              STR      r0,[r1,#0]  ; timer
;;;134            memset(&msg_ack,0,sizeof(msg_ack));
000024  f64001a8          MOV      r1,#0x8a8
000028  4888              LDR      r0,|L3.588|
00002a  f7fffffe          BL       __aeabi_memclr4
;;;135            msg_paser_field_index = 0;   
00002e  2000              MOVS     r0,#0
000030  4987              LDR      r1,|L3.592|
000032  6008              STR      r0,[r1,#0]  ; msg_paser_field_index
;;;136            s_tState++;
000034  4882              LDR      r0,|L3.576|
000036  7800              LDRB     r0,[r0,#0]  ; s_tState
000038  1c40              ADDS     r0,r0,#1
00003a  4981              LDR      r1,|L3.576|
00003c  7008              STRB     r0,[r1,#0]
;;;137            //break;
;;;138        
;;;139        case MSG_SYNC:
00003e  bf00              NOP      
;;;140            if(comGetChar(COM2, &value))
000040  4669              MOV      r1,sp
000042  2001              MOVS     r0,#1
000044  f7fffffe          BL       comGetChar
000048  b1d0              CBZ      r0,|L3.128|
;;;141            {
;;;142                if(value == msg_sync_header[msg_paser_field_index])
00004a  4882              LDR      r0,|L3.596|
00004c  4980              LDR      r1,|L3.592|
00004e  6809              LDR      r1,[r1,#0]  ; msg_paser_field_index
000050  5c40              LDRB     r0,[r0,r1]
000052  f89d1000          LDRB     r1,[sp,#0]
000056  4288              CMP      r0,r1
000058  d105              BNE      |L3.102|
;;;143                {
;;;144                    msg_paser_field_index++;
00005a  487d              LDR      r0,|L3.592|
00005c  6800              LDR      r0,[r0,#0]  ; msg_paser_field_index
00005e  1c40              ADDS     r0,r0,#1
000060  497b              LDR      r1,|L3.592|
000062  6008              STR      r0,[r1,#0]  ; msg_paser_field_index
000064  e002              B        |L3.108|
                  |L3.102|
;;;145                }
;;;146                else
;;;147                {
;;;148                    msg_paser_field_index = 0;
000066  2000              MOVS     r0,#0
000068  4979              LDR      r1,|L3.592|
00006a  6008              STR      r0,[r1,#0]  ; msg_paser_field_index
                  |L3.108|
;;;149                }
;;;150                
;;;151                if(msg_paser_field_index == 4)
00006c  4878              LDR      r0,|L3.592|
00006e  6800              LDR      r0,[r0,#0]  ; msg_paser_field_index
000070  2804              CMP      r0,#4
000072  d105              BNE      |L3.128|
;;;152                {
;;;153                    msg_paser_field_index = 0;
000074  2000              MOVS     r0,#0
000076  4976              LDR      r1,|L3.592|
000078  6008              STR      r0,[r1,#0]  ; msg_paser_field_index
;;;154                    s_tState = GET_CMD;
00007a  2002              MOVS     r0,#2
00007c  4970              LDR      r1,|L3.576|
00007e  7008              STRB     r0,[r1,#0]
                  |L3.128|
;;;155                }    
;;;156            }
;;;157            break;
000080  e0cc              B        |L3.540|
;;;158            
;;;159        case GET_CMD:
;;;160            if( uart_recv_byte(&value) )
000082  4668              MOV      r0,sp
000084  f7fffffe          BL       uart_recv_byte
000088  b1c0              CBZ      r0,|L3.188|
;;;161            {
;;;162                msg_ack.cmd |= value <<(msg_paser_field_index<<3);
00008a  4870              LDR      r0,|L3.588|
00008c  6800              LDR      r0,[r0,#0]  ; msg_ack
00008e  4970              LDR      r1,|L3.592|
000090  7809              LDRB     r1,[r1,#0]  ; msg_paser_field_index
000092  00ca              LSLS     r2,r1,#3
000094  f89d1000          LDRB     r1,[sp,#0]
000098  4091              LSLS     r1,r1,r2
00009a  4308              ORRS     r0,r0,r1
00009c  496b              LDR      r1,|L3.588|
00009e  6008              STR      r0,[r1,#0]  ; msg_ack
;;;163                msg_paser_field_index++;
0000a0  486b              LDR      r0,|L3.592|
0000a2  6800              LDR      r0,[r0,#0]  ; msg_paser_field_index
0000a4  1c40              ADDS     r0,r0,#1
0000a6  496a              LDR      r1,|L3.592|
0000a8  6008              STR      r0,[r1,#0]  ; msg_paser_field_index
;;;164                if(msg_paser_field_index == 4)
0000aa  4608              MOV      r0,r1
0000ac  6800              LDR      r0,[r0,#0]  ; msg_paser_field_index
0000ae  2804              CMP      r0,#4
0000b0  d104              BNE      |L3.188|
;;;165                {
;;;166                    msg_paser_field_index = 0;
0000b2  2000              MOVS     r0,#0
0000b4  6008              STR      r0,[r1,#0]  ; msg_paser_field_index
;;;167                    s_tState = GET_MEM_START_ADDR;
0000b6  2003              MOVS     r0,#3
0000b8  4961              LDR      r1,|L3.576|
0000ba  7008              STRB     r0,[r1,#0]
                  |L3.188|
;;;168                }
;;;169            }
;;;170            break;
0000bc  e0ae              B        |L3.540|
;;;171            
;;;172        case GET_MEM_START_ADDR:
;;;173            if( uart_recv_byte(&value) )
0000be  4668              MOV      r0,sp
0000c0  f7fffffe          BL       uart_recv_byte
0000c4  b1c0              CBZ      r0,|L3.248|
;;;174            {
;;;175                msg_ack.addr |= value <<(msg_paser_field_index<<3);
0000c6  4861              LDR      r0,|L3.588|
0000c8  6840              LDR      r0,[r0,#4]  ; msg_ack
0000ca  4961              LDR      r1,|L3.592|
0000cc  7809              LDRB     r1,[r1,#0]  ; msg_paser_field_index
0000ce  00ca              LSLS     r2,r1,#3
0000d0  f89d1000          LDRB     r1,[sp,#0]
0000d4  4091              LSLS     r1,r1,r2
0000d6  4308              ORRS     r0,r0,r1
0000d8  495c              LDR      r1,|L3.588|
0000da  6048              STR      r0,[r1,#4]  ; msg_ack
;;;176                msg_paser_field_index++;
0000dc  485c              LDR      r0,|L3.592|
0000de  6800              LDR      r0,[r0,#0]  ; msg_paser_field_index
0000e0  1c40              ADDS     r0,r0,#1
0000e2  495b              LDR      r1,|L3.592|
0000e4  6008              STR      r0,[r1,#0]  ; msg_paser_field_index
;;;177                if(msg_paser_field_index == 4)
0000e6  4608              MOV      r0,r1
0000e8  6800              LDR      r0,[r0,#0]  ; msg_paser_field_index
0000ea  2804              CMP      r0,#4
0000ec  d104              BNE      |L3.248|
;;;178                {
;;;179                    msg_paser_field_index = 0;
0000ee  2000              MOVS     r0,#0
0000f0  6008              STR      r0,[r1,#0]  ; msg_paser_field_index
;;;180                    s_tState = GET_MEM_TOTAL_LEN;
0000f2  2004              MOVS     r0,#4
0000f4  4952              LDR      r1,|L3.576|
0000f6  7008              STRB     r0,[r1,#0]
                  |L3.248|
;;;181                }
;;;182            }
;;;183            break;
0000f8  e090              B        |L3.540|
;;;184            
;;;185        case GET_MEM_TOTAL_LEN:
;;;186            if( uart_recv_byte(&value) )
0000fa  4668              MOV      r0,sp
0000fc  f7fffffe          BL       uart_recv_byte
000100  b308              CBZ      r0,|L3.326|
;;;187            {
;;;188                msg_ack.len |= value <<(msg_paser_field_index<<3);
000102  4852              LDR      r0,|L3.588|
000104  6880              LDR      r0,[r0,#8]  ; msg_ack
000106  4952              LDR      r1,|L3.592|
000108  7809              LDRB     r1,[r1,#0]  ; msg_paser_field_index
00010a  00ca              LSLS     r2,r1,#3
00010c  f89d1000          LDRB     r1,[sp,#0]
000110  4091              LSLS     r1,r1,r2
000112  4308              ORRS     r0,r0,r1
000114  494d              LDR      r1,|L3.588|
000116  6088              STR      r0,[r1,#8]  ; msg_ack
;;;189                msg_paser_field_index++;
000118  484d              LDR      r0,|L3.592|
00011a  6800              LDR      r0,[r0,#0]  ; msg_paser_field_index
00011c  1c40              ADDS     r0,r0,#1
00011e  494c              LDR      r1,|L3.592|
000120  6008              STR      r0,[r1,#0]  ; msg_paser_field_index
;;;190                if(msg_paser_field_index == 4)
000122  4608              MOV      r0,r1
000124  6800              LDR      r0,[r0,#0]  ; msg_paser_field_index
000126  2804              CMP      r0,#4
000128  d111              BNE      |L3.334|
;;;191                {
;;;192                    msg_paser_field_index = 0;
00012a  2000              MOVS     r0,#0
00012c  6008              STR      r0,[r1,#0]  ; msg_paser_field_index
;;;193                    mem_total_len_temp = msg_ack.len;
00012e  4847              LDR      r0,|L3.588|
000130  6880              LDR      r0,[r0,#8]  ; msg_ack
000132  4949              LDR      r1,|L3.600|
000134  6008              STR      r0,[r1,#0]  ; mem_total_len_temp
;;;194                    
;;;195                    if(msg_ack.cmd & MSG_CMD_DATA_FLAG_MASK)
000136  4845              LDR      r0,|L3.588|
000138  7800              LDRB     r0,[r0,#0]  ; msg_ack
00013a  f0000040          AND      r0,r0,#0x40
00013e  b118              CBZ      r0,|L3.328|
;;;196                    {
;;;197                        s_tState = GET_MEM_CONTENT;
000140  2005              MOVS     r0,#5
000142  493f              LDR      r1,|L3.576|
000144  7008              STRB     r0,[r1,#0]
                  |L3.326|
000146  e002              B        |L3.334|
                  |L3.328|
;;;198                    }
;;;199                    else
;;;200                    {
;;;201                        s_tState = GET_SUM;
000148  2006              MOVS     r0,#6
00014a  493d              LDR      r1,|L3.576|
00014c  7008              STRB     r0,[r1,#0]
                  |L3.334|
;;;202                    }
;;;203                }
;;;204            }
;;;205            break;
00014e  e065              B        |L3.540|
;;;206            
;;;207        case GET_MEM_CONTENT:
;;;208            if( uart_recv_byte(&value) )
000150  4668              MOV      r0,sp
000152  f7fffffe          BL       uart_recv_byte
000156  b1b0              CBZ      r0,|L3.390|
;;;209            {
;;;210                //在此接收数据
;;;211                msg_ack.content_byte[msg_paser_field_index] = value;
000158  f89d1000          LDRB     r1,[sp,#0]
00015c  483b              LDR      r0,|L3.588|
00015e  300c              ADDS     r0,r0,#0xc
000160  4a3b              LDR      r2,|L3.592|
000162  6812              LDR      r2,[r2,#0]  ; msg_paser_field_index
000164  5481              STRB     r1,[r0,r2]
;;;212                msg_paser_field_index++;
000166  483a              LDR      r0,|L3.592|
000168  6800              LDR      r0,[r0,#0]  ; msg_paser_field_index
00016a  1c40              ADDS     r0,r0,#1
00016c  4938              LDR      r1,|L3.592|
00016e  6008              STR      r0,[r1,#0]  ; msg_paser_field_index
;;;213                if(mem_total_len_temp == msg_paser_field_index) 
000170  4839              LDR      r0,|L3.600|
000172  6800              LDR      r0,[r0,#0]  ; mem_total_len_temp
000174  6809              LDR      r1,[r1,#0]  ; msg_paser_field_index
000176  4288              CMP      r0,r1
000178  d105              BNE      |L3.390|
;;;214                {
;;;215                    //数据接收完毕则跳出
;;;216                    msg_paser_field_index = 0;
00017a  2000              MOVS     r0,#0
00017c  4934              LDR      r1,|L3.592|
00017e  6008              STR      r0,[r1,#0]  ; msg_paser_field_index
;;;217                    s_tState = GET_SUM;
000180  2006              MOVS     r0,#6
000182  492f              LDR      r1,|L3.576|
000184  7008              STRB     r0,[r1,#0]
                  |L3.390|
;;;218                }
;;;219            }
;;;220            break;
000186  e049              B        |L3.540|
;;;221            
;;;222        case GET_SUM:
;;;223            if( uart_recv_byte(&value) )
000188  4668              MOV      r0,sp
00018a  f7fffffe          BL       uart_recv_byte
00018e  b1d0              CBZ      r0,|L3.454|
;;;224            {
;;;225                msg_ack.check_sum |= value <<(msg_paser_field_index<<3);
000190  482e              LDR      r0,|L3.588|
000192  f8d008a4          LDR      r0,[r0,#0x8a4]  ; msg_ack
000196  492e              LDR      r1,|L3.592|
000198  7809              LDRB     r1,[r1,#0]  ; msg_paser_field_index
00019a  00ca              LSLS     r2,r1,#3
00019c  f89d1000          LDRB     r1,[sp,#0]
0001a0  4091              LSLS     r1,r1,r2
0001a2  4308              ORRS     r0,r0,r1
0001a4  4929              LDR      r1,|L3.588|
0001a6  f8c108a4          STR      r0,[r1,#0x8a4]  ; msg_ack
;;;226                msg_paser_field_index++;
0001aa  4829              LDR      r0,|L3.592|
0001ac  6800              LDR      r0,[r0,#0]  ; msg_paser_field_index
0001ae  1c40              ADDS     r0,r0,#1
0001b0  4927              LDR      r1,|L3.592|
0001b2  6008              STR      r0,[r1,#0]  ; msg_paser_field_index
;;;227                if(msg_paser_field_index == 4)
0001b4  4608              MOV      r0,r1
0001b6  6800              LDR      r0,[r0,#0]  ; msg_paser_field_index
0001b8  2804              CMP      r0,#4
0001ba  d104              BNE      |L3.454|
;;;228                {
;;;229                    msg_paser_field_index = 0;
0001bc  2000              MOVS     r0,#0
0001be  6008              STR      r0,[r1,#0]  ; msg_paser_field_index
;;;230                    
;;;231                    s_tState = IS_SUM_CHECK_OK;
0001c0  2007              MOVS     r0,#7
0001c2  491f              LDR      r1,|L3.576|
0001c4  7008              STRB     r0,[r1,#0]
                  |L3.454|
;;;232                }
;;;233            }
;;;234            break;
0001c6  e029              B        |L3.540|
;;;235        
;;;236        case IS_SUM_CHECK_OK:
;;;237            {
;;;238                uint32_t sum = 0;
0001c8  2400              MOVS     r4,#0
;;;239                sum += do_sum((uint8_t *)&msg_ack.cmd,sizeof(msg_ack.cmd));
0001ca  2104              MOVS     r1,#4
0001cc  481f              LDR      r0,|L3.588|
0001ce  f7fffffe          BL       do_sum
0001d2  4404              ADD      r4,r4,r0
;;;240                sum += do_sum((uint8_t *)&msg_ack.addr,sizeof(msg_ack.addr));
0001d4  2104              MOVS     r1,#4
0001d6  481d              LDR      r0,|L3.588|
0001d8  1d00              ADDS     r0,r0,#4
0001da  f7fffffe          BL       do_sum
0001de  4404              ADD      r4,r4,r0
;;;241                sum += do_sum((uint8_t *)&msg_ack.len,sizeof(msg_ack.len));
0001e0  2104              MOVS     r1,#4
0001e2  481a              LDR      r0,|L3.588|
0001e4  3008              ADDS     r0,r0,#8
0001e6  f7fffffe          BL       do_sum
0001ea  4404              ADD      r4,r4,r0
;;;242                if(msg_ack.cmd & MSG_CMD_DATA_FLAG_MASK)
0001ec  4817              LDR      r0,|L3.588|
0001ee  7800              LDRB     r0,[r0,#0]  ; msg_ack
0001f0  f0000040          AND      r0,r0,#0x40
0001f4  b128              CBZ      r0,|L3.514|
;;;243                {
;;;244                    sum += do_sum((uint8_t *)msg_ack.content_word,msg_ack.len);
0001f6  4815              LDR      r0,|L3.588|
0001f8  6881              LDR      r1,[r0,#8]  ; msg_ack
0001fa  300c              ADDS     r0,r0,#0xc
0001fc  f7fffffe          BL       do_sum
000200  4404              ADD      r4,r4,r0
                  |L3.514|
;;;245                }
;;;246                s_tState = START;
000202  2000              MOVS     r0,#0
000204  490e              LDR      r1,|L3.576|
000206  7008              STRB     r0,[r1,#0]
;;;247                if(msg_ack.check_sum != sum) 
000208  4810              LDR      r0,|L3.588|
00020a  f8d008a4          LDR      r0,[r0,#0x8a4]  ; msg_ack
00020e  42a0              CMP      r0,r4
000210  d002              BEQ      |L3.536|
;;;248                {
;;;249                    return fsm_rt_err_sum_check;
000212  f06f0024          MVN      r0,#0x24
                  |L3.534|
;;;250                }
;;;251                else
;;;252                {
;;;253                    return fsm_rt_cpl;
;;;254                }
;;;255            }
;;;256            //break;
;;;257        }
;;;258        
;;;259        if(is_time_up())
;;;260        {
;;;261            s_tState = START;
;;;262            return fsm_rt_err_ack_timeout;
;;;263        }
;;;264        
;;;265        return fsm_rt_on_going;
;;;266    }
000216  bd38              POP      {r3-r5,pc}
                  |L3.536|
000218  2000              MOVS     r0,#0                 ;253
00021a  e7fc              B        |L3.534|
                  |L3.540|
00021c  bf00              NOP                            ;157
00021e  4809              LDR      r0,|L3.580|
000220  6800              LDR      r0,[r0,#0]            ;259  ; g_iRunTime
000222  4909              LDR      r1,|L3.584|
000224  6809              LDR      r1,[r1,#0]            ;259  ; timer
000226  1a40              SUBS     r0,r0,r1              ;259
000228  f06f4100          MVN      r1,#0x80000000        ;259
00022c  4288              CMP      r0,r1                 ;259
00022e  d205              BCS      |L3.572|
000230  2000              MOVS     r0,#0                 ;261
000232  4903              LDR      r1,|L3.576|
000234  7008              STRB     r0,[r1,#0]            ;261
000236  f06f0023          MVN      r0,#0x23              ;262
00023a  e7ec              B        |L3.534|
                  |L3.572|
00023c  2001              MOVS     r0,#1                 ;265
00023e  e7ea              B        |L3.534|
;;;267      
                          ENDP

                  |L3.576|
                          DCD      s_tState
                  |L3.580|
                          DCD      g_iRunTime
                  |L3.584|
                          DCD      timer
                  |L3.588|
                          DCD      msg_ack
                  |L3.592|
                          DCD      msg_paser_field_index
                  |L3.596|
                          DCD      msg_sync_header
                  |L3.600|
                          DCD      mem_total_len_temp

                          AREA ||i.spl_send_body||, CODE, READONLY, ALIGN=2

                  spl_send_body PROC
;;;95     
;;;96     void spl_send_body(uint32_t len,uint8_t* pdat)
000000  b570              PUSH     {r4-r6,lr}
;;;97     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;98         spl_sum += do_sum(pdat,len);
000006  4621              MOV      r1,r4
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       do_sum
00000e  4905              LDR      r1,|L4.36|
000010  6809              LDR      r1,[r1,#0]  ; spl_sum
000012  4408              ADD      r0,r0,r1
000014  4903              LDR      r1,|L4.36|
000016  6008              STR      r0,[r1,#0]  ; spl_sum
;;;99         uart_send_datas(pdat,len);
000018  4621              MOV      r1,r4
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       uart_send_datas
;;;100    }
000020  bd70              POP      {r4-r6,pc}
;;;101    
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      spl_sum

                          AREA ||i.spl_send_head||, CODE, READONLY, ALIGN=2

                  spl_send_head PROC
;;;83     uint32_t spl_sum;
;;;84     void spl_send_head(uint32_t cmd,uint32_t addr,uint32_t len)
000000  b507              PUSH     {r0-r2,lr}
;;;85     {
;;;86         spl_sum = 0;
000002  2000              MOVS     r0,#0
000004  4916              LDR      r1,|L5.96|
000006  6008              STR      r0,[r1,#0]  ; spl_sum
;;;87         spl_sum += do_sum((uint8_t *)&cmd,sizeof(cmd));
000008  2104              MOVS     r1,#4
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       do_sum
000010  4913              LDR      r1,|L5.96|
000012  6809              LDR      r1,[r1,#0]  ; spl_sum
000014  4408              ADD      r0,r0,r1
000016  4912              LDR      r1,|L5.96|
000018  6008              STR      r0,[r1,#0]  ; spl_sum
;;;88     	spl_sum += do_sum((uint8_t *)&addr,sizeof(addr));
00001a  2104              MOVS     r1,#4
00001c  a801              ADD      r0,sp,#4
00001e  f7fffffe          BL       do_sum
000022  490f              LDR      r1,|L5.96|
000024  6809              LDR      r1,[r1,#0]  ; spl_sum
000026  4408              ADD      r0,r0,r1
000028  490d              LDR      r1,|L5.96|
00002a  6008              STR      r0,[r1,#0]  ; spl_sum
;;;89     	spl_sum += do_sum((uint8_t *)&len,sizeof(len));
00002c  2104              MOVS     r1,#4
00002e  a802              ADD      r0,sp,#8
000030  f7fffffe          BL       do_sum
000034  490a              LDR      r1,|L5.96|
000036  6809              LDR      r1,[r1,#0]  ; spl_sum
000038  4408              ADD      r0,r0,r1
00003a  4909              LDR      r1,|L5.96|
00003c  6008              STR      r0,[r1,#0]  ; spl_sum
;;;90         uart_send_datas((uint8_t *)msg_sync_header,sizeof(msg_sync_header));
00003e  2104              MOVS     r1,#4
000040  4808              LDR      r0,|L5.100|
000042  f7fffffe          BL       uart_send_datas
;;;91     	uart_send_datas((uint8_t *)&cmd,sizeof(cmd));
000046  2104              MOVS     r1,#4
000048  4668              MOV      r0,sp
00004a  f7fffffe          BL       uart_send_datas
;;;92     	uart_send_datas((uint8_t *)&addr,sizeof(addr));
00004e  2104              MOVS     r1,#4
000050  a801              ADD      r0,sp,#4
000052  f7fffffe          BL       uart_send_datas
;;;93         uart_send_datas((uint8_t *)&len,sizeof(len));
000056  2104              MOVS     r1,#4
000058  a802              ADD      r0,sp,#8
00005a  f7fffffe          BL       uart_send_datas
;;;94     }
00005e  bd0e              POP      {r1-r3,pc}
;;;95     
                          ENDP

                  |L5.96|
                          DCD      spl_sum
                  |L5.100|
                          DCD      msg_sync_header

                          AREA ||i.spl_send_tail||, CODE, READONLY, ALIGN=2

                  spl_send_tail PROC
;;;101    
;;;102    void spl_send_tail()
000000  b510              PUSH     {r4,lr}
;;;103    {
;;;104        uart_send_datas((uint8_t *)&spl_sum, sizeof(spl_sum));
000002  2104              MOVS     r1,#4
000004  4801              LDR      r0,|L6.12|
000006  f7fffffe          BL       uart_send_datas
;;;105    }
00000a  bd10              POP      {r4,pc}
;;;106    
                          ENDP

                  |L6.12|
                          DCD      spl_sum

                          AREA ||i.tx_rx_mode_set||, CODE, READONLY, ALIGN=2

                  tx_rx_mode_set PROC
;;;269    //单线半双工串口，同时也需要在kiwi上电期间拉低GPIO6(ON_OFF)，让kiwi brom不跳转到app
;;;270    void tx_rx_mode_set(uint8_t tx_rx_mode)
000000  b51c              PUSH     {r2-r4,lr}
;;;271    {
000002  4604              MOV      r4,r0
;;;272     
;;;273        GPIO_InitTypeDef GPIO_InitStructure;
;;;274        //GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_USART2);
;;;275        
;;;276        switch(tx_rx_mode)
000004  b124              CBZ      r4,|L7.16|
000006  2c01              CMP      r4,#1
000008  d019              BEQ      |L7.62|
00000a  2c02              CMP      r4,#2
00000c  d14b              BNE      |L7.166|
00000e  e030              B        |L7.114|
                  |L7.16|
;;;277        {
;;;278        case TXRX_PIN_MODE_COM:
;;;279            /* 配置 USART Tx 为复用功能 */
;;;280            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
000010  2000              MOVS     r0,#0
000012  f88d0006          STRB     r0,[sp,#6]
;;;281            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
000016  2001              MOVS     r0,#1
000018  f88d0007          STRB     r0,[sp,#7]
;;;282            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
00001c  2002              MOVS     r0,#2
00001e  f88d0004          STRB     r0,[sp,#4]
;;;283    
;;;284            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
000022  2020              MOVS     r0,#0x20
000024  9000              STR      r0,[sp,#0]
;;;285            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000026  2002              MOVS     r0,#2
000028  f88d0005          STRB     r0,[sp,#5]
;;;286            GPIO_Init(GPIOD, &GPIO_InitStructure);
00002c  4669              MOV      r1,sp
00002e  481f              LDR      r0,|L7.172|
000030  f7fffffe          BL       GPIO_Init
;;;287            USART_Cmd(USART2, ENABLE);		/* 使能串口 */
000034  2101              MOVS     r1,#1
000036  481e              LDR      r0,|L7.176|
000038  f7fffffe          BL       USART_Cmd
;;;288            break;
00003c  e034              B        |L7.168|
                  |L7.62|
;;;289        
;;;290        case TXRX_PIN_MODE_IO_LOW:
;;;291            USART_Cmd(USART2, DISABLE);		/* 使能串口 */
00003e  2100              MOVS     r1,#0
000040  481b              LDR      r0,|L7.176|
000042  f7fffffe          BL       USART_Cmd
;;;292            GPIO_ResetBits(GPIOD,GPIO_Pin_5);
000046  2120              MOVS     r1,#0x20
000048  4818              LDR      r0,|L7.172|
00004a  f7fffffe          BL       GPIO_ResetBits
;;;293            /* 配置 USART Tx 为复用功能 */
;;;294            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
00004e  2000              MOVS     r0,#0
000050  f88d0006          STRB     r0,[sp,#6]
;;;295            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
000054  2001              MOVS     r0,#1
000056  f88d0007          STRB     r0,[sp,#7]
;;;296            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;	/* 复用模式 */
00005a  f88d0004          STRB     r0,[sp,#4]
;;;297    
;;;298            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
00005e  2020              MOVS     r0,#0x20
000060  9000              STR      r0,[sp,#0]
;;;299            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000062  2002              MOVS     r0,#2
000064  f88d0005          STRB     r0,[sp,#5]
;;;300            GPIO_Init(GPIOD, &GPIO_InitStructure);
000068  4669              MOV      r1,sp
00006a  4810              LDR      r0,|L7.172|
00006c  f7fffffe          BL       GPIO_Init
;;;301            break;
000070  e01a              B        |L7.168|
                  |L7.114|
;;;302        
;;;303        case TXRX_PIN_MODE_IO_HIGH:
;;;304            USART_Cmd(USART2, DISABLE);		/* 使能串口 */
000072  2100              MOVS     r1,#0
000074  480e              LDR      r0,|L7.176|
000076  f7fffffe          BL       USART_Cmd
;;;305            GPIO_SetBits(GPIOD,GPIO_Pin_5);
00007a  2120              MOVS     r1,#0x20
00007c  480b              LDR      r0,|L7.172|
00007e  f7fffffe          BL       GPIO_SetBits
;;;306            /* 配置 USART Tx 为复用功能 */
;;;307            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
000082  2000              MOVS     r0,#0
000084  f88d0006          STRB     r0,[sp,#6]
;;;308            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
000088  2001              MOVS     r0,#1
00008a  f88d0007          STRB     r0,[sp,#7]
;;;309            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;	/* 复用模式 */
00008e  f88d0004          STRB     r0,[sp,#4]
;;;310    
;;;311            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
000092  2020              MOVS     r0,#0x20
000094  9000              STR      r0,[sp,#0]
;;;312            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000096  2002              MOVS     r0,#2
000098  f88d0005          STRB     r0,[sp,#5]
;;;313            GPIO_Init(GPIOD, &GPIO_InitStructure);
00009c  4669              MOV      r1,sp
00009e  4803              LDR      r0,|L7.172|
0000a0  f7fffffe          BL       GPIO_Init
;;;314            break;
0000a4  e000              B        |L7.168|
                  |L7.166|
;;;315        default:
;;;316            break;
0000a6  bf00              NOP      
                  |L7.168|
0000a8  bf00              NOP                            ;288
;;;317        }
;;;318    }
0000aa  bd1c              POP      {r2-r4,pc}
                          ENDP

                  |L7.172|
                          DCD      0x40020c00
                  |L7.176|
                          DCD      0x40004400

                          AREA ||i.uart_recv_byte||, CODE, READONLY, ALIGN=1

                  uart_recv_byte PROC
;;;55     
;;;56     static uint8_t uart_recv_byte(uint8_t* byte)
000000  b510              PUSH     {r4,lr}
;;;57     {
000002  4604              MOV      r4,r0
;;;58         return comGetChar(COM2, byte);
000004  4621              MOV      r1,r4
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       comGetChar
;;;59     }
00000c  bd10              POP      {r4,pc}
;;;60     
                          ENDP


                          AREA ||i.uart_send_datas||, CODE, READONLY, ALIGN=1

                  uart_send_datas PROC
;;;50     
;;;51     void uart_send_datas(uint8_t* buf, uint32_t len)
000000  b570              PUSH     {r4-r6,lr}
;;;52     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;53         comSendBuf(COM2, buf, len);
000006  b2aa              UXTH     r2,r5
000008  4621              MOV      r1,r4
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       comSendBuf
;;;54     }
000010  bd70              POP      {r4-r6,pc}
;;;55     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  msg_ack
                          %        2216

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  msg_sync_header
000000  4b495749          DCB      0x4b,0x49,0x57,0x49

                          AREA ||.data||, DATA, ALIGN=2

                  spl_sum
                          DCD      0x00000000
                  msg_paser_field_index
                          DCD      0x00000000
                  mem_total_len_temp
                          DCD      0x00000000
                  s_tState
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  timer
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\kiwi_ft\\asu_bus.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_asu_bus_c_do_sum____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_asu_bus_c_do_sum____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_asu_bus_c_do_sum____REVSH|
#line 144
|__asm___9_asu_bus_c_do_sum____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
