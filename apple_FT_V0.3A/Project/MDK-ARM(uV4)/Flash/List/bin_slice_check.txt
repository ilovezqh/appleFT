; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\bin_slice_check.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bin_slice_check.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\berry_ft -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\kiwi_ft -I..\..\User\kiwi_ft\spv40 -I..\..\User\kiwi_ft\spv40\peripheral -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\kiwi_ft -I..\..\User\MultiButton-1.1.0 -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\bin_slice_check.crf ..\..\User\kiwi_ft\bin_slice_check.c]
                          THUMB

                          AREA ||i.group_crc_init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  group_crc_init PROC
;;;15     static uint8_t is_group_check_enable=0;
;;;16     void group_crc_init(uint32_t bin_size)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;17     {
000004  4605              MOV      r5,r0
;;;18         uint32_t slice_total = bin_size/2048;
000006  0aee              LSRS     r6,r5,#11
;;;19         uint32_t group_diff  = slice_total/BIN_DEPART_NUM;
000008  0937              LSRS     r7,r6,#4
;;;20         
;;;21         if(slice_total < BIN_DEPART_NUM) 
00000a  2e10              CMP      r6,#0x10
00000c  d203              BCS      |L1.22|
;;;22         {
;;;23             is_group_check_enable = 0;
00000e  2000              MOVS     r0,#0
000010  4911              LDR      r1,|L1.88|
000012  7008              STRB     r0,[r1,#0]
000014  e01e              B        |L1.84|
                  |L1.22|
;;;24         }
;;;25         else
;;;26         {
;;;27             is_group_check_enable = 1;
000016  2001              MOVS     r0,#1
000018  490f              LDR      r1,|L1.88|
00001a  7008              STRB     r0,[r1,#0]
;;;28             for(uint32_t i=0; i<BIN_DEPART_NUM-1; i++)
00001c  2400              MOVS     r4,#0
00001e  e00c              B        |L1.58|
                  |L1.32|
;;;29             {
;;;30                 group_crc[i].slice_num = group_diff*(i+1);
000020  1c60              ADDS     r0,r4,#1
000022  4378              MULS     r0,r7,r0
000024  490d              LDR      r1,|L1.92|
000026  f8410034          STR      r0,[r1,r4,LSL #3]
;;;31                 debug(" group_crc[%d].slice_num =%d \r\n",i, group_crc[i].slice_num);
00002a  4608              MOV      r0,r1
00002c  f8502034          LDR      r2,[r0,r4,LSL #3]
000030  4621              MOV      r1,r4
000032  a00b              ADR      r0,|L1.96|
000034  f7fffffe          BL       __2printf
000038  1c64              ADDS     r4,r4,#1              ;28
                  |L1.58|
00003a  2c0f              CMP      r4,#0xf               ;28
00003c  d3f0              BCC      |L1.32|
;;;32             }
;;;33             group_crc[BIN_DEPART_NUM-1].slice_num = (bin_size+2047)/2048;  // 
00003e  f20570ff          ADD      r0,r5,#0x7ff
000042  0ac0              LSRS     r0,r0,#11
000044  4905              LDR      r1,|L1.92|
000046  6788              STR      r0,[r1,#0x78]  ; group_crc
;;;34             debug(" group_crc[%d].slice_num =%d \r\n",BIN_DEPART_NUM-1, group_crc[BIN_DEPART_NUM-1].slice_num);
000048  4608              MOV      r0,r1
00004a  210f              MOVS     r1,#0xf
00004c  6f82              LDR      r2,[r0,#0x78]  ; group_crc
00004e  a004              ADR      r0,|L1.96|
000050  f7fffffe          BL       __2printf
                  |L1.84|
;;;35         }                             
;;;36         
;;;37     }
000054  e8bd81f0          POP      {r4-r8,pc}
;;;38     static uint32_t group_index;     /* crc计算步骤 */
                          ENDP

                  |L1.88|
                          DCD      is_group_check_enable
                  |L1.92|
                          DCD      group_crc
                  |L1.96|
000060  2067726f          DCB      " group_crc[%d].slice_num =%d \r\n",0
000064  75705f63
000068  72635b25
00006c  645d2e73
000070  6c696365
000074  5f6e756d
000078  203d2564
00007c  200d0a00

                          AREA ||i.slice_check_process||, CODE, READONLY, ALIGN=1

                  slice_check_process PROC
;;;46     
;;;47     fsm_rt_t slice_check_process(uint8_t* pbuff, uint32_t size, uint32_t slice_num)
000000  4603              MOV      r3,r0
;;;48     {
;;;49     //    uint32_t crc32_cur_result = crc32_partial_calcu(pbuff, size);
;;;50     //    if(is_group_check_enable && (slice_num == group_crc[group_index].slice_num))
;;;51     //    {
;;;52     //        if(group_crc[group_index].crc_reasult != crc32_cur_result)
;;;53     //        {
;;;54     //            logging("fail:bin group check %d\r\n", slice_num);
;;;55     //            return fsm_rt_err_Read_bin_crc_err;
;;;56     //        }
;;;57     //    }
;;;58     //    group_index++;
;;;59     //    if(group_index == BIN_DEPART_NUM)
;;;60     //    {
;;;61     //        return fsm_rt_cpl;
;;;62     //    }
;;;63     //    return fsm_rt_on_going;
;;;64         
;;;65     }
000002  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.slice_check_start||, CODE, READONLY, ALIGN=2

                  slice_check_start PROC
;;;40     
;;;41     void slice_check_start(void)
000000  2000              MOVS     r0,#0
;;;42     {
;;;43         group_index = 0;
000002  4901              LDR      r1,|L3.8|
000004  6008              STR      r0,[r1,#0]  ; group_index
;;;44         //crc32_partial_start();
;;;45     }
000006  4770              BX       lr
;;;46     
                          ENDP

                  |L3.8|
                          DCD      group_index

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  group_crc
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  is_group_check_enable
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  group_index
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\kiwi_ft\\bin_slice_check.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_bin_slice_check_c_9a92ebca____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_bin_slice_check_c_9a92ebca____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_bin_slice_check_c_9a92ebca____REVSH|
#line 144
|__asm___17_bin_slice_check_c_9a92ebca____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
