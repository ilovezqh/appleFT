; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\asu_bus_kiwi.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\asu_bus_kiwi.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\BERRY_TWI -I..\..\User\berry_ft -I..\..\User\ft_support -I..\..\User\berry_test -I..\..\User\factory_test -I..\..\User\emenu -I..\..\User\kiwi_ft -I..\..\User\kiwi_ft\spv40 -I..\..\User\kiwi_ft\spv40\peripheral -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\kiwi_ft -I..\..\User\MultiButton-1.1.0 -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.16.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\asu_bus_kiwi.crf ..\..\User\kiwi_ft\asu_bus_kiwi.c]
                          THUMB

                          AREA ||i.asu_cmd_buf_sm||, CODE, READONLY, ALIGN=2

                  asu_cmd_buf_sm PROC
;;;133    //命令发送，buffer sm：state machine
;;;134    fsm_rt_t asu_cmd_buf_sm(uint32_t cmd,uint32_t addr,uint32_t len,uint8_t* pdat)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;135    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;136        static enum
;;;137        {
;;;138            START = 0,  
;;;139            IS_ACK,
;;;140        } s_tState = START;
;;;141        
;;;142        switch(s_tState)
00000c  4811              LDR      r0,|L1.84|
00000e  7800              LDRB     r0,[r0,#0]  ; s_tState
000010  b110              CBZ      r0,|L1.24|
000012  2801              CMP      r0,#1
000014  d11a              BNE      |L1.76|
000016  e00b              B        |L1.48|
                  |L1.24|
;;;143        {
;;;144        case START:
;;;145            asu_pack_send(cmd,addr,len,pdat);                                       //要发送的数据打包发送
000018  4643              MOV      r3,r8
00001a  463a              MOV      r2,r7
00001c  4631              MOV      r1,r6
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       asu_pack_send
;;;146            s_tState++;
000024  480b              LDR      r0,|L1.84|
000026  7800              LDRB     r0,[r0,#0]  ; s_tState
000028  1c40              ADDS     r0,r0,#1
00002a  490a              LDR      r1,|L1.84|
00002c  7008              STRB     r0,[r1,#0]
;;;147            //break;
;;;148        
;;;149        case IS_ACK:
00002e  bf00              NOP      
                  |L1.48|
;;;150            {
;;;151                fsm_rt_t ret = kiwi_ack_paser();//带超时返回错误号
000030  f7fffffe          BL       kiwi_ack_paser
000034  4604              MOV      r4,r0
;;;152                if(ret != fsm_rt_on_going)
000036  2c01              CMP      r4,#1
000038  d007              BEQ      |L1.74|
;;;153                {
;;;154                    s_tState = START;
00003a  2000              MOVS     r0,#0
00003c  4905              LDR      r1,|L1.84|
00003e  7008              STRB     r0,[r1,#0]
;;;155                    if(ret == fsm_rt_cpl)
000040  b90c              CBNZ     r4,|L1.70|
                  |L1.66|
;;;156                    {
;;;157                        //debug("len=%d,content:0x%x\r\n",msg_ack.len, msg_ack.content_word[0]);
;;;158                     
;;;159                        return fsm_rt_cpl;
;;;160                    }
;;;161                    else
;;;162                    {
;;;163                       return ret; 
;;;164                    }
;;;165                }
;;;166            }
;;;167    
;;;168            break;
;;;169        default:
;;;170            break;
;;;171        }
;;;172        
;;;173        return fsm_rt_on_going;
;;;174    }
000042  e8bd81f0          POP      {r4-r8,pc}
                  |L1.70|
000046  4620              MOV      r0,r4                 ;163
000048  e7fb              B        |L1.66|
                  |L1.74|
00004a  e000              B        |L1.78|
                  |L1.76|
00004c  bf00              NOP                            ;170
                  |L1.78|
00004e  bf00              NOP                            ;168
000050  2001              MOVS     r0,#1                 ;173
000052  e7f6              B        |L1.66|
;;;175    
                          ENDP

                  |L1.84|
                          DCD      |symbol_number.26|

                          AREA ||i.asu_read_buf||, CODE, READONLY, ALIGN=2

                  asu_read_buf PROC
;;;204    
;;;205    fsm_rt_t asu_read_buf(uint32_t addr, uint32_t len, uint32_t **p)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;206    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;207        fsm_rt_t ret = asu_send_buf(0x81,addr,len,NULL);
00000a  2300              MOVS     r3,#0
00000c  462a              MOV      r2,r5
00000e  4621              MOV      r1,r4
000010  2081              MOVS     r0,#0x81
000012  f7fffffe          BL       asu_send_buf
000016  4607              MOV      r7,r0
;;;208        *p = msg_ack.content_word;
000018  4802              LDR      r0,|L2.36|
00001a  6030              STR      r0,[r6,#0]
;;;209        return ret;
00001c  4638              MOV      r0,r7
;;;210    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;211    
                          ENDP

000022  0000              DCW      0x0000
                  |L2.36|
                          DCD      msg_ack+0xc

                          AREA ||i.asu_read_word||, CODE, READONLY, ALIGN=2

                  asu_read_word PROC
;;;197    ////////////////////////////////////////////////////////////////////////////////
;;;198    fsm_rt_t asu_read_word(uint32_t addr, uint32_t* pdat)
000000  b570              PUSH     {r4-r6,lr}
;;;199    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;200        fsm_rt_t ret = asu_send_buf(0x81,addr, 4, NULL);                            /* 从地址空间读取数据 */
000006  2300              MOVS     r3,#0
000008  2204              MOVS     r2,#4
00000a  4621              MOV      r1,r4
00000c  2081              MOVS     r0,#0x81
00000e  f7fffffe          BL       asu_send_buf
000012  4606              MOV      r6,r0
;;;201        *pdat = msg_ack.content_word[0];
000014  4802              LDR      r0,|L3.32|
000016  68c0              LDR      r0,[r0,#0xc]  ; msg_ack
000018  6028              STR      r0,[r5,#0]
;;;202        return ret;
00001a  4630              MOV      r0,r6
;;;203    }
00001c  bd70              POP      {r4-r6,pc}
;;;204    
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
                          DCD      msg_ack

                          AREA ||i.asu_send_buf||, CODE, READONLY, ALIGN=1

                  asu_send_buf PROC
;;;184    */
;;;185    fsm_rt_t asu_send_buf(uint32_t cmd,uint32_t addr,uint32_t len,uint8_t* pdat)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;186    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;187        fsm_rt_t ret;
;;;188        
;;;189        do
00000c  bf00              NOP      
                  |L4.14|
;;;190        {
;;;191            ret = asu_cmd_buf_sm(cmd, addr, len, pdat);
00000e  4643              MOV      r3,r8
000010  463a              MOV      r2,r7
000012  4631              MOV      r1,r6
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       asu_cmd_buf_sm
00001a  4604              MOV      r4,r0
;;;192        }while(ret == fsm_rt_on_going);
00001c  2c01              CMP      r4,#1
00001e  d0f6              BEQ      |L4.14|
;;;193        
;;;194        return ret;
000020  4620              MOV      r0,r4
;;;195    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;196    
                          ENDP


                          AREA ||i.asu_write_buf||, CODE, READONLY, ALIGN=1

                  asu_write_buf PROC
;;;216    
;;;217    fsm_rt_t asu_write_buf(uint32_t addr,uint32_t len, uint32_t* buf)
000000  b570              PUSH     {r4-r6,lr}
;;;218    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;219        return asu_send_buf(0xc2,addr, len,(uint8_t*) buf);
000008  4633              MOV      r3,r6
00000a  462a              MOV      r2,r5
00000c  4621              MOV      r1,r4
00000e  20c2              MOVS     r0,#0xc2
000010  f7fffffe          BL       asu_send_buf
;;;220    }
000014  bd70              POP      {r4-r6,pc}
;;;221    
                          ENDP


                          AREA ||i.asu_write_word||, CODE, READONLY, ALIGN=1

                  asu_write_word PROC
;;;211    
;;;212    fsm_rt_t asu_write_word(uint32_t addr, uint32_t data)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;213    {
000002  4604              MOV      r4,r0
;;;214        return asu_send_buf(0xc2,addr, 4, (uint8_t*)&data);
000004  ab01              ADD      r3,sp,#4
000006  2204              MOVS     r2,#4
000008  4621              MOV      r1,r4
00000a  20c2              MOVS     r0,#0xc2
00000c  f7fffffe          BL       asu_send_buf
;;;215    }
000010  bd1c              POP      {r2-r4,pc}
;;;216    
                          ENDP


                          AREA ||i.test_hand_shark_state||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  test_hand_shark_state PROC
;;;13     
;;;14     fsm_rt_t test_hand_shark_state(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;15     {
;;;16         #define CHIP_ID_REG         0x20000000
;;;17         #define CHIP_OTP_DATA_REG   0x20000010
;;;18         #define MEM_CTL_REG         0x20009004
;;;19         #define MEM_STAT_REG        0x20009008
;;;20         uint32_t  chip_id;
;;;21         
;;;22         static enum
;;;23         {
;;;24             START = 0,
;;;25             GET_CHIP_ID,
;;;26             CACHE_BIST_EN,
;;;27             CACHE_BIST_RESULT_QUERY,
;;;28             GET_OTP_DATA,
;;;29         } s_tState = START;
;;;30         fsm_rt_t ret;
;;;31         if( !is_test_item(pmu_item) ) 
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       is_test_item
000008  b930              CBNZ     r0,|L7.24|
;;;32         {
;;;33             logging("INFO skip BGR\r\n");
00000a  484f              LDR      r0,|L7.328|
00000c  6801              LDR      r1,[r0,#0]  ; g_iRunTime
00000e  a04f              ADR      r0,|L7.332|
000010  f7fffffe          BL       logger_buffer_write
;;;34             return fsm_rt_cpl;
000014  2000              MOVS     r0,#0
                  |L7.22|
;;;35         }        
;;;36     
;;;37         timer_creat();
;;;38         switch(s_tState)
;;;39         {
;;;40         case START:
;;;41             s_tState++;
;;;42             //break;
;;;43         
;;;44         case GET_CHIP_ID:
;;;45             {
;;;46                 comSendChar(COM2,0x80); //同步波特率 发单个byte 0x80
;;;47                 ret = asu_read_word(CHIP_ID_REG, &chip_id); //读取chip  id：brom 0x81
;;;48                 if(ret != fsm_rt_cpl) goto fail;
;;;49                 if(chip_id != KIWI_CHIP_ID)
;;;50                 {
;;;51                     ret = fsm_rt_err_chip_id;
;;;52                     goto fail;
;;;53                 }
;;;54                 s_tState = CACHE_BIST_EN;
;;;55             }
;;;56             //break;
;;;57             
;;;58         case CACHE_BIST_EN:
;;;59             {
;;;60                 uint32_t mem_ctl;
;;;61                 ret = asu_read_word(MEM_CTL_REG, &mem_ctl);
;;;62                 if(ret != fsm_rt_cpl)
;;;63                 {
;;;64                     ret = fsm_rt_err_bist_asu;
;;;65                     goto fail;
;;;66                 }
;;;67                 mem_ctl |= (1<<1);
;;;68                 ret = asu_write_word(MEM_CTL_REG,mem_ctl);
;;;69                 if(ret != fsm_rt_cpl)
;;;70                 {
;;;71                     ret = fsm_rt_err_bist_asu;
;;;72                     goto fail;
;;;73                 }
;;;74                 timer_start(500);
;;;75                 s_tState = CACHE_BIST_RESULT_QUERY;
;;;76             }
;;;77             //break;
;;;78             
;;;79         case CACHE_BIST_RESULT_QUERY:
;;;80             {
;;;81                 uint32_t mem_stat;
;;;82     
;;;83                 ret = asu_read_word(MEM_STAT_REG, &mem_stat);
;;;84                 if(ret != fsm_rt_cpl)
;;;85                 {
;;;86                     ret = fsm_rt_err_bist_asu;
;;;87                     goto fail;
;;;88                 }
;;;89                 if( (mem_stat&(1<<1)) )
;;;90                 {
;;;91                     if( mem_stat & (1<<17) )
;;;92                     {
;;;93                         ret = fsm_rt_err_bist_cache;
;;;94                         goto fail;
;;;95                     }
;;;96                     else
;;;97                     {
;;;98                         s_tState = GET_OTP_DATA; 
;;;99                         logging("SUCCESS cache bist\r\n");
;;;100                    }
;;;101                } 
;;;102                if(is_time_up())
;;;103                {
;;;104                    ret = fsm_rt_err_bist_timeout;
;;;105                    goto fail;
;;;106                }
;;;107            }
;;;108            break;
;;;109            
;;;110        case GET_OTP_DATA:
;;;111            {
;;;112                uint32_t* pOTP_DATA;
;;;113                ret = asu_read_buf(CHIP_OTP_DATA_REG, 32, &pOTP_DATA); //32byte 
;;;114                if(ret != fsm_rt_cpl) goto fail;
;;;115                for(uint8_t i=0; i<8; i++)
;;;116                {
;;;117                    debug("OTP_DATA[%d]=0x%08x\r\n",i,pOTP_DATA[i]);
;;;118                    efuse_pre_data.word_table[i] = pOTP_DATA[i];
;;;119                }
;;;120                s_tState = START;
;;;121                return fsm_rt_cpl;
;;;122            }
;;;123            //break;
;;;124        }
;;;125    
;;;126        return fsm_rt_on_going;
;;;127        
;;;128        fail:
;;;129        s_tState = START;
;;;130        return ret;
;;;131    }
000016  bd7c              POP      {r2-r6,pc}
                  |L7.24|
000018  4852              LDR      r0,|L7.356|
00001a  7800              LDRB     r0,[r0,#0]            ;38  ; s_tState
00001c  2805              CMP      r0,#5                 ;38
00001e  d26a              BCS      |L7.246|
000020  e8dff000          TBB      [pc,r0]               ;38
000024  03092040          DCB      0x03,0x09,0x20,0x40
000028  6a00              DCB      0x6a,0x00
00002a  484e              LDR      r0,|L7.356|
00002c  7800              LDRB     r0,[r0,#0]            ;41  ; s_tState
00002e  1c40              ADDS     r0,r0,#1              ;41
000030  494c              LDR      r1,|L7.356|
000032  7008              STRB     r0,[r1,#0]            ;41
000034  bf00              NOP                            ;44
000036  2180              MOVS     r1,#0x80              ;46
000038  2001              MOVS     r0,#1                 ;46
00003a  f7fffffe          BL       comSendChar
00003e  a901              ADD      r1,sp,#4              ;47
000040  f04f5000          MOV      r0,#0x20000000        ;47
000044  f7fffffe          BL       asu_read_word
000048  4604              MOV      r4,r0                 ;47
00004a  b104              CBZ      r4,|L7.78|
00004c  e076              B        |L7.316|
                  |L7.78|
00004e  4946              LDR      r1,|L7.360|
000050  9801              LDR      r0,[sp,#4]            ;49
000052  4288              CMP      r0,r1                 ;49
000054  d002              BEQ      |L7.92|
000056  f06f0425          MVN      r4,#0x25              ;51
00005a  e06f              B        |L7.316|
                  |L7.92|
00005c  2002              MOVS     r0,#2                 ;54
00005e  4941              LDR      r1,|L7.356|
000060  7008              STRB     r0,[r1,#0]            ;54
000062  bf00              NOP                            ;58
000064  4669              MOV      r1,sp                 ;61
000066  4841              LDR      r0,|L7.364|
000068  f7fffffe          BL       asu_read_word
00006c  4604              MOV      r4,r0                 ;61
00006e  b114              CBZ      r4,|L7.118|
000070  f06f0432          MVN      r4,#0x32              ;64
000074  e062              B        |L7.316|
                  |L7.118|
000076  9800              LDR      r0,[sp,#0]            ;67
000078  f0400002          ORR      r0,r0,#2              ;67
00007c  9000              STR      r0,[sp,#0]            ;67
00007e  483b              LDR      r0,|L7.364|
000080  9900              LDR      r1,[sp,#0]            ;68
000082  f7fffffe          BL       asu_write_word
000086  4604              MOV      r4,r0                 ;68
000088  b114              CBZ      r4,|L7.144|
00008a  f06f0432          MVN      r4,#0x32              ;71
00008e  e055              B        |L7.316|
                  |L7.144|
000090  482d              LDR      r0,|L7.328|
000092  6800              LDR      r0,[r0,#0]            ;74  ; g_iRunTime
000094  f50070fa          ADD      r0,r0,#0x1f4          ;74
000098  4935              LDR      r1,|L7.368|
00009a  6008              STR      r0,[r1,#0]            ;74  ; timer
00009c  2003              MOVS     r0,#3                 ;75
00009e  4931              LDR      r1,|L7.356|
0000a0  7008              STRB     r0,[r1,#0]            ;75
0000a2  bf00              NOP                            ;79
0000a4  4669              MOV      r1,sp                 ;83
0000a6  4831              LDR      r0,|L7.364|
0000a8  1d00              ADDS     r0,r0,#4              ;83
0000aa  f7fffffe          BL       asu_read_word
0000ae  4604              MOV      r4,r0                 ;83
0000b0  b114              CBZ      r4,|L7.184|
0000b2  f06f0432          MVN      r4,#0x32              ;86
0000b6  e041              B        |L7.316|
                  |L7.184|
0000b8  9800              LDR      r0,[sp,#0]            ;89
0000ba  f0000002          AND      r0,r0,#2              ;89
0000be  b170              CBZ      r0,|L7.222|
0000c0  9800              LDR      r0,[sp,#0]            ;91
0000c2  f4003000          AND      r0,r0,#0x20000        ;91
0000c6  b110              CBZ      r0,|L7.206|
0000c8  f06f0433          MVN      r4,#0x33              ;93
0000cc  e036              B        |L7.316|
                  |L7.206|
0000ce  2004              MOVS     r0,#4                 ;98
0000d0  4924              LDR      r1,|L7.356|
0000d2  7008              STRB     r0,[r1,#0]            ;98
0000d4  481c              LDR      r0,|L7.328|
0000d6  6801              LDR      r1,[r0,#0]            ;99  ; g_iRunTime
0000d8  a026              ADR      r0,|L7.372|
0000da  f7fffffe          BL       logger_buffer_write
                  |L7.222|
0000de  481a              LDR      r0,|L7.328|
0000e0  6800              LDR      r0,[r0,#0]            ;102  ; g_iRunTime
0000e2  4923              LDR      r1,|L7.368|
0000e4  6809              LDR      r1,[r1,#0]            ;102  ; timer
0000e6  1a40              SUBS     r0,r0,r1              ;102
0000e8  f06f4100          MVN      r1,#0x80000000        ;102
0000ec  4288              CMP      r0,r1                 ;102
0000ee  d202              BCS      |L7.246|
0000f0  f06f0416          MVN      r4,#0x16              ;104
0000f4  e022              B        |L7.316|
                  |L7.246|
0000f6  e01e              B        |L7.310|
0000f8  466a              MOV      r2,sp                 ;113
0000fa  2120              MOVS     r1,#0x20              ;113
0000fc  4824              LDR      r0,|L7.400|
0000fe  f7fffffe          BL       asu_read_buf
000102  4604              MOV      r4,r0                 ;113
000104  b104              CBZ      r4,|L7.264|
000106  e019              B        |L7.316|
                  |L7.264|
000108  2500              MOVS     r5,#0                 ;115
00010a  e00e              B        |L7.298|
                  |L7.268|
00010c  9800              LDR      r0,[sp,#0]            ;117
00010e  f8502025          LDR      r2,[r0,r5,LSL #2]     ;117
000112  4629              MOV      r1,r5                 ;117
000114  a01f              ADR      r0,|L7.404|
000116  f7fffffe          BL       __2printf
00011a  9800              LDR      r0,[sp,#0]            ;118
00011c  f8500025          LDR      r0,[r0,r5,LSL #2]     ;118
000120  4922              LDR      r1,|L7.428|
000122  f8410025          STR      r0,[r1,r5,LSL #2]     ;118
000126  1c68              ADDS     r0,r5,#1              ;115
000128  b2c5              UXTB     r5,r0                 ;115
                  |L7.298|
00012a  2d08              CMP      r5,#8                 ;115
00012c  dbee              BLT      |L7.268|
00012e  2000              MOVS     r0,#0                 ;120
000130  490c              LDR      r1,|L7.356|
000132  7008              STRB     r0,[r1,#0]            ;120
000134  e76f              B        |L7.22|
                  |L7.310|
000136  bf00              NOP                            ;108
000138  2001              MOVS     r0,#1                 ;126
00013a  e76c              B        |L7.22|
                  |L7.316|
00013c  2000              MOVS     r0,#0                 ;129
00013e  4909              LDR      r1,|L7.356|
000140  7008              STRB     r0,[r1,#0]            ;129
000142  4620              MOV      r0,r4                 ;130
000144  e767              B        |L7.22|
;;;132    
                          ENDP

000146  0000              DCW      0x0000
                  |L7.328|
                          DCD      g_iRunTime
                  |L7.332|
00014c  5b253864          DCB      "[%8d]INFO skip BGR\r\n",0
000150  5d494e46
000154  4f20736b
000158  69702042
00015c  47520d0a
000160  00      
000161  00                DCB      0
000162  00                DCB      0
000163  00                DCB      0
                  |L7.356|
                          DCD      s_tState
                  |L7.360|
                          DCD      0x49533180
                  |L7.364|
                          DCD      0x20009004
                  |L7.368|
                          DCD      timer
                  |L7.372|
000174  5b253864          DCB      "[%8d]SUCCESS cache bist\r\n",0
000178  5d535543
00017c  43455353
000180  20636163
000184  68652062
000188  6973740d
00018c  0a00    
00018e  00                DCB      0
00018f  00                DCB      0
                  |L7.400|
                          DCD      0x20000010
                  |L7.404|
000194  4f54505f          DCB      "OTP_DATA[%d]=0x%08x\r\n",0
000198  44415441
00019c  5b25645d
0001a0  3d307825
0001a4  3038780d
0001a8  0a00    
0001aa  00                DCB      0
0001ab  00                DCB      0
                  |L7.428|
                          DCD      efuse_pre_data

                          AREA ||.data||, DATA, ALIGN=2

                  sync_tab
000000  4b495749          DCB      0x4b,0x49,0x57,0x49
000004  81000000          DCB      0x81,0x00,0x00,0x00
000008  00000020          DCB      0x00,0x00,0x00,0x20
00000c  04000000          DCB      0x04,0x00,0x00,0x00
000010  a5000000          DCB      0xa5,0x00,0x00,0x00
                  sync_baud_rate
000014  80                DCB      0x80
                  s_tState
000015  000000            DCB      0x00,0x00,0x00
                  timer
                          DCD      0x00000000
                  |symbol_number.26|
00001c  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\kiwi_ft\\asu_bus_kiwi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_asu_bus_kiwi_c_sync_tab____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_asu_bus_kiwi_c_sync_tab____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_asu_bus_kiwi_c_sync_tab____REVSH|
#line 144
|__asm___14_asu_bus_kiwi_c_sync_tab____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
