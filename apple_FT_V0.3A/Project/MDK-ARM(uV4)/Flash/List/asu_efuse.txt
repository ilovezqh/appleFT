; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\asu_efuse.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\asu_efuse.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\BERRY_TWI -I..\..\User\berry_ft -I..\..\User\ft_support -I..\..\User\berry_test -I..\..\User\factory_test -I..\..\User\emenu -I..\..\User\kiwi_ft -I..\..\User\kiwi_ft\spv40 -I..\..\User\kiwi_ft\spv40\peripheral -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\kiwi_ft -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.16.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\asu_efuse.crf ..\..\User\kiwi_ft\asu_efuse.c]
                          THUMB

                          AREA ||i.asu_efuse_read_state||, CODE, READONLY, ALIGN=2

                  asu_efuse_read_state PROC
;;;76     
;;;77     fsm_rt_t asu_efuse_read_state(void)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;78     {
;;;79          //写efuse   读efuse  校验
;;;80         int32_t err = 0;
000004  2700              MOVS     r7,#0
;;;81         fsm_rt_t ret;
;;;82         
;;;83        // logging("---- start efuse read test \r\n");
;;;84     
;;;85         err = efuse_ops_init();
000006  f7fffffe          BL       efuse_ops_init
00000a  4607              MOV      r7,r0
;;;86         if(err)
00000c  b147              CBZ      r7,|L1.32|
;;;87         {
;;;88             logging("efuse_ops_init() failed:%d\r\n",err);
00000e  463a              MOV      r2,r7
000010  4830              LDR      r0,|L1.212|
000012  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000014  a030              ADR      r0,|L1.216|
000016  f7fffffe          BL       logger_buffer_write
;;;89             ret = fsm_rt_err_efuse_init;
00001a  f06f0808          MVN      r8,#8
;;;90             goto fail;
00001e  e04e              B        |L1.190|
                  |L1.32|
;;;91         }
;;;92         
;;;93         err = efuse_ops_dump_all(efuse_pre_data.sector_tab);
000020  4836              LDR      r0,|L1.252|
000022  f7fffffe          BL       efuse_ops_dump_all
000026  4607              MOV      r7,r0
;;;94         if(err)
000028  b147              CBZ      r7,|L1.60|
;;;95         {
;;;96             logging("efuse_ops_dump_all() failed:%d\r\n",err);
00002a  463a              MOV      r2,r7
00002c  4829              LDR      r0,|L1.212|
00002e  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000030  a033              ADR      r0,|L1.256|
000032  f7fffffe          BL       logger_buffer_write
;;;97             ret = fsm_rt_err_efuse_dump_all;
000036  f06f080a          MVN      r8,#0xa
;;;98             goto fail;
00003a  e040              B        |L1.190|
                  |L1.60|
;;;99         }
;;;100    
;;;101        memcpy(efuse_post_data.sector_tab,efuse_pre_data.sector_tab,sizeof(kiwi_efuse_t));
00003c  2280              MOVS     r2,#0x80
00003e  492f              LDR      r1,|L1.252|
000040  4839              LDR      r0,|L1.296|
000042  f7fffffe          BL       __aeabi_memcpy4
;;;102    
;;;103        logging("SUCCESS efuse read\r\n");
000046  4823              LDR      r0,|L1.212|
000048  6801              LDR      r1,[r0,#0]  ; g_iRunTime
00004a  a038              ADR      r0,|L1.300|
00004c  f7fffffe          BL       logger_buffer_write
;;;104        for(uint8_t i=0; i<16; i++)
000050  2400              MOVS     r4,#0
000052  e028              B        |L1.166|
                  |L1.84|
;;;105        {
;;;106            uint32_t value = efuse_pre_data.sector_tab[i/8][i%8];
000054  4620              MOV      r0,r4
000056  17e2              ASRS     r2,r4,#31
000058  eb047252          ADD      r2,r4,r2,LSR #29
00005c  10d2              ASRS     r2,r2,#3
00005e  4b27              LDR      r3,|L1.252|
000060  eb031242          ADD      r2,r3,r2,LSL #5
000064  4621              MOV      r1,r4
000066  17e3              ASRS     r3,r4,#31
000068  eb047353          ADD      r3,r4,r3,LSR #29
00006c  10db              ASRS     r3,r3,#3
00006e  eba403c3          SUB      r3,r4,r3,LSL #3
000072  f8529023          LDR      r9,[r2,r3,LSL #2]
;;;107            if(value) logging("[%d][%d]=0x%08x\r\n",i/8,i%8,value);
000076  f1b90f00          CMP      r9,#0
00007a  d012              BEQ      |L1.162|
00007c  4625              MOV      r5,r4
00007e  4626              MOV      r6,r4
000080  17e0              ASRS     r0,r4,#31
000082  eb047050          ADD      r0,r4,r0,LSR #29
000086  10c0              ASRS     r0,r0,#3
000088  eba403c0          SUB      r3,r4,r0,LSL #3
00008c  17e0              ASRS     r0,r4,#31
00008e  eb047050          ADD      r0,r4,r0,LSR #29
000092  10c2              ASRS     r2,r0,#3
000094  480f              LDR      r0,|L1.212|
000096  f8cd9000          STR      r9,[sp,#0]
00009a  6801              LDR      r1,[r0,#0]  ; g_iRunTime
00009c  a02a              ADR      r0,|L1.328|
00009e  f7fffffe          BL       logger_buffer_write
                  |L1.162|
0000a2  1c60              ADDS     r0,r4,#1              ;104
0000a4  b2c4              UXTB     r4,r0                 ;104
                  |L1.166|
0000a6  2c10              CMP      r4,#0x10              ;104
0000a8  dbd4              BLT      |L1.84|
;;;108        }
;;;109        
;;;110        trim_result.pass_efuse_read = 1;
0000aa  482d              LDR      r0,|L1.352|
0000ac  6800              LDR      r0,[r0,#0]  ; trim_result
0000ae  f0200001          BIC      r0,r0,#1
0000b2  1c40              ADDS     r0,r0,#1
0000b4  492a              LDR      r1,|L1.352|
0000b6  6008              STR      r0,[r1,#0]  ; trim_result
;;;111        return fsm_rt_cpl;
0000b8  2000              MOVS     r0,#0
                  |L1.186|
;;;112    
;;;113        fail:
;;;114        trim_result.fail_efuse_read = 1;
;;;115        efuse_ops_deinit();
;;;116        return ret;
;;;117    }
0000ba  e8bd83f8          POP      {r3-r9,pc}
                  |L1.190|
0000be  4828              LDR      r0,|L1.352|
0000c0  6840              LDR      r0,[r0,#4]            ;114  ; trim_result
0000c2  f0200001          BIC      r0,r0,#1              ;114
0000c6  1c40              ADDS     r0,r0,#1              ;114
0000c8  4925              LDR      r1,|L1.352|
0000ca  6048              STR      r0,[r1,#4]            ;114  ; trim_result
0000cc  f7fffffe          BL       efuse_ops_deinit
0000d0  4640              MOV      r0,r8                 ;116
0000d2  e7f2              B        |L1.186|
;;;118    
                          ENDP

                  |L1.212|
                          DCD      g_iRunTime
                  |L1.216|
0000d8  5b253864          DCB      "[%8d]efuse_ops_init() failed:%d\r\n",0
0000dc  5d656675
0000e0  73655f6f
0000e4  70735f69
0000e8  6e697428
0000ec  29206661
0000f0  696c6564
0000f4  3a25640d
0000f8  0a00    
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L1.252|
                          DCD      efuse_pre_data
                  |L1.256|
000100  5b253864          DCB      "[%8d]efuse_ops_dump_all() failed:%d\r\n",0
000104  5d656675
000108  73655f6f
00010c  70735f64
000110  756d705f
000114  616c6c28
000118  29206661
00011c  696c6564
000120  3a25640d
000124  0a00    
000126  00                DCB      0
000127  00                DCB      0
                  |L1.296|
                          DCD      efuse_post_data
                  |L1.300|
00012c  5b253864          DCB      "[%8d]SUCCESS efuse read\r\n",0
000130  5d535543
000134  43455353
000138  20656675
00013c  73652072
000140  6561640d
000144  0a00    
000146  00                DCB      0
000147  00                DCB      0
                  |L1.328|
000148  5b253864          DCB      "[%8d][%d][%d]=0x%08x\r\n",0
00014c  5d5b2564
000150  5d5b2564
000154  5d3d3078
000158  25303878
00015c  0d0a00  
00015f  00                DCB      0
                  |L1.352|
                          DCD      trim_result

                          AREA ||i.asu_efuse_write_state||, CODE, READONLY, ALIGN=2

                  asu_efuse_write_state PROC
;;;24     
;;;25     fsm_rt_t asu_efuse_write_state(void)
000000  b530              PUSH     {r4,r5,lr}
;;;26     {
000002  b0a1              SUB      sp,sp,#0x84
;;;27          //写efuse   读efuse  校验
;;;28         int32_t err = 0;
000004  2500              MOVS     r5,#0
;;;29         fsm_rt_t ret;
;;;30         kiwi_efuse_t efuse_readback_data;
;;;31         
;;;32         //logging("---- start efuse write \r\n");
;;;33          
;;;34         
;;;35         err = efuse_ops_init(); 
000006  f7fffffe          BL       efuse_ops_init
00000a  4605              MOV      r5,r0
;;;36         if(err)
00000c  b145              CBZ      r5,|L2.32|
;;;37         {
;;;38             logging("efuse_ops_init() failed:%d\r\n",err);
00000e  462a              MOV      r2,r5
000010  4824              LDR      r0,|L2.164|
000012  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000014  a024              ADR      r0,|L2.168|
000016  f7fffffe          BL       logger_buffer_write
;;;39             ret = fsm_rt_err_efuse_init;
00001a  f06f0408          MVN      r4,#8
;;;40             goto fail;
00001e  e034              B        |L2.138|
                  |L2.32|
;;;41         }
;;;42         
;;;43         err = efuse_ops_program_all(efuse_post_data.sector_tab);
000020  482a              LDR      r0,|L2.204|
000022  f7fffffe          BL       efuse_ops_program_all
000026  4605              MOV      r5,r0
;;;44         if(err)
000028  b145              CBZ      r5,|L2.60|
;;;45         {
;;;46             logging("efuse_ops_program_all() failed:%d\r\n",err);
00002a  462a              MOV      r2,r5
00002c  481d              LDR      r0,|L2.164|
00002e  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000030  a027              ADR      r0,|L2.208|
000032  f7fffffe          BL       logger_buffer_write
;;;47             ret = fsm_rt_err_efuse_program_all;
000036  f06f0409          MVN      r4,#9
;;;48             goto fail;
00003a  e026              B        |L2.138|
                  |L2.60|
;;;49         }
;;;50     
;;;51         err = efuse_ops_dump_all(efuse_readback_data.sector_tab);
00003c  a801              ADD      r0,sp,#4
00003e  f7fffffe          BL       efuse_ops_dump_all
000042  4605              MOV      r5,r0
;;;52         if(err)
000044  b145              CBZ      r5,|L2.88|
;;;53         {
;;;54             logging("efuse_ops_dump_all() failed:%d\r\n",err);
000046  462a              MOV      r2,r5
000048  4816              LDR      r0,|L2.164|
00004a  6801              LDR      r1,[r0,#0]  ; g_iRunTime
00004c  a02b              ADR      r0,|L2.252|
00004e  f7fffffe          BL       logger_buffer_write
;;;55             ret = fsm_rt_err_efuse_dump_all;
000052  f06f040a          MVN      r4,#0xa
;;;56             goto fail;
000056  e018              B        |L2.138|
                  |L2.88|
;;;57         }
;;;58      
;;;59         if(memcmp(efuse_readback_data.sector_tab,efuse_post_data.sector_tab,sizeof(kiwi_efuse_t)) != 0)
000058  2280              MOVS     r2,#0x80
00005a  491c              LDR      r1,|L2.204|
00005c  a801              ADD      r0,sp,#4
00005e  f7fffffe          BL       memcmp
000062  b138              CBZ      r0,|L2.116|
;;;60         {
;;;61             logging("efuse verify failed!\r\n");
000064  480f              LDR      r0,|L2.164|
000066  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000068  a02e              ADR      r0,|L2.292|
00006a  f7fffffe          BL       logger_buffer_write
;;;62             ret = fsm_rt_err_efuse_check;
00006e  f06f040b          MVN      r4,#0xb
;;;63             goto fail;
000072  e00a              B        |L2.138|
                  |L2.116|
;;;64         }
;;;65     
;;;66         
;;;67         trim_result.pass_efuse_write = 1;
000074  4832              LDR      r0,|L2.320|
000076  6800              LDR      r0,[r0,#0]  ; trim_result
000078  f4206080          BIC      r0,r0,#0x400
00007c  f5006080          ADD      r0,r0,#0x400
000080  492f              LDR      r1,|L2.320|
000082  6008              STR      r0,[r1,#0]  ; trim_result
;;;68         return fsm_rt_cpl;
000084  2000              MOVS     r0,#0
                  |L2.134|
;;;69     
;;;70         fail:
;;;71         trim_result.fail_efuse_write = 1;
;;;72         efuse_ops_deinit();
;;;73         return ret;
;;;74     }
000086  b021              ADD      sp,sp,#0x84
000088  bd30              POP      {r4,r5,pc}
                  |L2.138|
00008a  482d              LDR      r0,|L2.320|
00008c  6840              LDR      r0,[r0,#4]            ;71  ; trim_result
00008e  f4206080          BIC      r0,r0,#0x400          ;71
000092  f5006080          ADD      r0,r0,#0x400          ;71
000096  492a              LDR      r1,|L2.320|
000098  6048              STR      r0,[r1,#4]            ;71  ; trim_result
00009a  f7fffffe          BL       efuse_ops_deinit
00009e  4620              MOV      r0,r4                 ;73
0000a0  e7f1              B        |L2.134|
;;;75     
                          ENDP

0000a2  0000              DCW      0x0000
                  |L2.164|
                          DCD      g_iRunTime
                  |L2.168|
0000a8  5b253864          DCB      "[%8d]efuse_ops_init() failed:%d\r\n",0
0000ac  5d656675
0000b0  73655f6f
0000b4  70735f69
0000b8  6e697428
0000bc  29206661
0000c0  696c6564
0000c4  3a25640d
0000c8  0a00    
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L2.204|
                          DCD      efuse_post_data
                  |L2.208|
0000d0  5b253864          DCB      "[%8d]efuse_ops_program_all() failed:%d\r\n",0
0000d4  5d656675
0000d8  73655f6f
0000dc  70735f70
0000e0  726f6772
0000e4  616d5f61
0000e8  6c6c2829
0000ec  20666169
0000f0  6c65643a
0000f4  25640d0a
0000f8  00      
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L2.252|
0000fc  5b253864          DCB      "[%8d]efuse_ops_dump_all() failed:%d\r\n",0
000100  5d656675
000104  73655f6f
000108  70735f64
00010c  756d705f
000110  616c6c28
000114  29206661
000118  696c6564
00011c  3a25640d
000120  0a00    
000122  00                DCB      0
000123  00                DCB      0
                  |L2.292|
000124  5b253864          DCB      "[%8d]efuse verify failed!\r\n",0
000128  5d656675
00012c  73652076
000130  65726966
000134  79206661
000138  696c6564
00013c  210d0a00
                  |L2.320|
                          DCD      trim_result

                          AREA ||i.efuse_ops_deinit||, CODE, READONLY, ALIGN=1

                  efuse_ops_deinit PROC
;;;155    
;;;156    static void efuse_ops_deinit(void)
000000  b510              PUSH     {r4,lr}
;;;157    {
;;;158        asu_bus_set(asu_dis);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       asu_bus_set
;;;159    }
000008  bd10              POP      {r4,pc}
;;;160    
                          ENDP


                          AREA ||i.efuse_ops_dump_all||, CODE, READONLY, ALIGN=2

                  efuse_ops_dump_all PROC
;;;201    
;;;202    static int32_t efuse_ops_dump_all(uint32_t out[4][8])
000000  b5f8              PUSH     {r3-r7,lr}
;;;203    {
000002  4605              MOV      r5,r0
;;;204    	uint32_t efuse_cmd = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;205    
;;;206    	for(uint32_t i=0;i<4;i++)
000008  2400              MOVS     r4,#0
00000a  e035              B        |L4.120|
                  |L4.12|
;;;207    	{
;;;208    		efuse_cmd = (i << 4) | DEV_EFUSE_CMD_RUN;
00000c  2001              MOVS     r0,#1
00000e  eb001004          ADD      r0,r0,r4,LSL #4
000012  9000              STR      r0,[sp,#0]
;;;209    
;;;210    		asu_write_word((uint32_t)&DEV_EFUSE->CMD,efuse_cmd);
000014  481a              LDR      r0,|L4.128|
000016  9900              LDR      r1,[sp,#0]
000018  f7fffffe          BL       asu_write_word
;;;211    
;;;212    		uint32_t flag_timeout = 1;
00001c  2601              MOVS     r6,#1
;;;213    		timer_creat();
;;;214            timer_start(100);
00001e  4819              LDR      r0,|L4.132|
000020  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000022  3064              ADDS     r0,r0,#0x64
000024  4918              LDR      r1,|L4.136|
000026  6008              STR      r0,[r1,#0]  ; timer
;;;215    
;;;216    		do
000028  bf00              NOP      
                  |L4.42|
;;;217    		{
;;;218    			asu_read_word((uint32_t)&DEV_EFUSE->CMD, &efuse_cmd);
00002a  4669              MOV      r1,sp
00002c  4814              LDR      r0,|L4.128|
00002e  f7fffffe          BL       asu_read_word
;;;219    			if((efuse_cmd & DEV_EFUSE_CMD_RUN) == 0)
000032  9800              LDR      r0,[sp,#0]
000034  f0000001          AND      r0,r0,#1
000038  b908              CBNZ     r0,|L4.62|
;;;220    			{
;;;221    				flag_timeout = 0;
00003a  2600              MOVS     r6,#0
;;;222    				break;
00003c  e008              B        |L4.80|
                  |L4.62|
;;;223    			}
;;;224    		}while(!is_time_up());
00003e  4811              LDR      r0,|L4.132|
000040  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000042  4911              LDR      r1,|L4.136|
000044  6809              LDR      r1,[r1,#0]  ; timer
000046  1a40              SUBS     r0,r0,r1
000048  f06f4100          MVN      r1,#0x80000000
00004c  4288              CMP      r0,r1
00004e  d2ec              BCS      |L4.42|
                  |L4.80|
000050  bf00              NOP                            ;222
;;;225    
;;;226    		if(flag_timeout)
000052  b14e              CBZ      r6,|L4.104|
;;;227    		{
;;;228    			logging("%s:%d:efuse program bit timeout!\r\n",__FILE__,__LINE__);
000054  23e4              MOVS     r3,#0xe4
000056  a20d              ADR      r2,|L4.140|
000058  480a              LDR      r0,|L4.132|
00005a  6801              LDR      r1,[r0,#0]  ; g_iRunTime
00005c  a013              ADR      r0,|L4.172|
00005e  f7fffffe          BL       logger_buffer_write
;;;229    			return -1;
000062  f04f30ff          MOV      r0,#0xffffffff
                  |L4.102|
;;;230    		}
;;;231    
;;;232    		asu_read((uint32_t)&DEV_EFUSE->VALUE0, out[i], 8);
;;;233    	}
;;;234    	return 0;
;;;235    }
000066  bdf8              POP      {r3-r7,pc}
                  |L4.104|
000068  eb051144          ADD      r1,r5,r4,LSL #5       ;232
00006c  2208              MOVS     r2,#8                 ;232
00006e  4804              LDR      r0,|L4.128|
000070  3018              ADDS     r0,r0,#0x18           ;232
000072  f7fffffe          BL       asu_read
000076  1c64              ADDS     r4,r4,#1              ;206
                  |L4.120|
000078  2c04              CMP      r4,#4                 ;206
00007a  d3c7              BCC      |L4.12|
00007c  2000              MOVS     r0,#0                 ;234
00007e  e7f2              B        |L4.102|
;;;236    
                          ENDP

                  |L4.128|
                          DCD      0x20160008
                  |L4.132|
                          DCD      g_iRunTime
                  |L4.136|
                          DCD      |symbol_number.24|
                  |L4.140|
00008c  2e2e5c2e          DCB      "..\\..\\User\\kiwi_ft\\asu_efuse.c",0
000090  2e5c5573
000094  65725c6b
000098  6977695f
00009c  66745c61
0000a0  73755f65
0000a4  66757365
0000a8  2e6300  
0000ab  00                DCB      0
                  |L4.172|
0000ac  5b253864          DCB      "[%8d]%s:%d:efuse program bit timeout!\r\n",0
0000b0  5d25733a
0000b4  25643a65
0000b8  66757365
0000bc  2070726f
0000c0  6772616d
0000c4  20626974
0000c8  2074696d
0000cc  656f7574
0000d0  210d0a00

                          AREA ||i.efuse_ops_init||, CODE, READONLY, ALIGN=2

                  efuse_ops_init PROC
;;;119    
;;;120    static int32_t efuse_ops_init(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;121    {
;;;122    	int32_t err = 0;
000002  2400              MOVS     r4,#0
;;;123    
;;;124    	err = asu_bus_set(asu_asu);
000004  2003              MOVS     r0,#3
000006  f7fffffe          BL       asu_bus_set
00000a  4604              MOV      r4,r0
;;;125    	if(err)
00000c  b15c              CBZ      r4,|L5.38|
;;;126    	{
;;;127    		logging("%s:%d:asu connect failed:%d\r\n",__FILE__,__LINE__,err);
00000e  237f              MOVS     r3,#0x7f
000010  a21c              ADR      r2,|L5.132|
000012  4824              LDR      r0,|L5.164|
000014  9400              STR      r4,[sp,#0]
000016  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000018  a023              ADR      r0,|L5.168|
00001a  f7fffffe          BL       logger_buffer_write
;;;128    		return -1;
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L5.34|
;;;129    	}
;;;130    
;;;131    	uint32_t cmu_clken0  = 0;
;;;132    	uint32_t rmu_rsten0  = 0;
;;;133    	uint32_t pmu_pwr_ctl = 0;
;;;134    
;;;135    	//CMU设置
;;;136    	asu_read_word((uint32_t)&DEV_CMU->CLKEN0, &cmu_clken0);
;;;137    	cmu_clken0 |= DEV_CMU_CLKEN0_EFUSE | DEV_RMU_RSTEN0_AON;
;;;138    	asu_write_word((uint32_t)&DEV_CMU->CLKEN0, cmu_clken0);
;;;139    
;;;140    	//RMU设置
;;;141    	asu_read_word((uint32_t)&DEV_RMU->RSTEN0, &rmu_rsten0);
;;;142    	rmu_rsten0 |= DEV_RMU_RSTEN0_EFUSE | DEV_RMU_RSTEN0_AON;
;;;143    	asu_write_word((uint32_t)&DEV_RMU->RSTEN0, rmu_rsten0);
;;;144    
;;;145    	//PMU设置
;;;146    	asu_read_word((uint32_t)&AON_PMU->PWR_CTL, &pmu_pwr_ctl);
;;;147    	pmu_pwr_ctl |= AON_PMU_PWR_CTL_VDDQ_NORM_EN;
;;;148    	asu_write_word((uint32_t)&AON_PMU->PWR_CTL, pmu_pwr_ctl);
;;;149    
;;;150    	//延时100ms，等待VDDQ稳定
;;;151    	delay_us(100*1000);
;;;152    
;;;153    	return 0;
;;;154    }
000022  b004              ADD      sp,sp,#0x10
000024  bd10              POP      {r4,pc}
                  |L5.38|
000026  2000              MOVS     r0,#0                 ;131
000028  9003              STR      r0,[sp,#0xc]          ;131
00002a  9002              STR      r0,[sp,#8]            ;132
00002c  9001              STR      r0,[sp,#4]            ;133
00002e  a903              ADD      r1,sp,#0xc            ;136
000030  f04f2020          MOV      r0,#0x20002000        ;136
000034  f7fffffe          BL       asu_read_word
000038  4924              LDR      r1,|L5.204|
00003a  9803              LDR      r0,[sp,#0xc]          ;137
00003c  4308              ORRS     r0,r0,r1              ;137
00003e  9003              STR      r0,[sp,#0xc]          ;137
000040  f04f2020          MOV      r0,#0x20002000        ;138
000044  9903              LDR      r1,[sp,#0xc]          ;138
000046  f7fffffe          BL       asu_write_word
00004a  a902              ADD      r1,sp,#8              ;141
00004c  4820              LDR      r0,|L5.208|
00004e  f7fffffe          BL       asu_read_word
000052  491e              LDR      r1,|L5.204|
000054  9802              LDR      r0,[sp,#8]            ;142
000056  4308              ORRS     r0,r0,r1              ;142
000058  9002              STR      r0,[sp,#8]            ;142
00005a  481d              LDR      r0,|L5.208|
00005c  9902              LDR      r1,[sp,#8]            ;143
00005e  f7fffffe          BL       asu_write_word
000062  a901              ADD      r1,sp,#4              ;146
000064  481b              LDR      r0,|L5.212|
000066  f7fffffe          BL       asu_read_word
00006a  9801              LDR      r0,[sp,#4]            ;147
00006c  f4406000          ORR      r0,r0,#0x800          ;147
000070  9001              STR      r0,[sp,#4]            ;147
000072  4818              LDR      r0,|L5.212|
000074  9901              LDR      r1,[sp,#4]            ;148
000076  f7fffffe          BL       asu_write_word
00007a  4817              LDR      r0,|L5.216|
00007c  f7fffffe          BL       bsp_DelayUS
000080  2000              MOVS     r0,#0                 ;153
000082  e7ce              B        |L5.34|
;;;155    
                          ENDP

                  |L5.132|
000084  2e2e5c2e          DCB      "..\\..\\User\\kiwi_ft\\asu_efuse.c",0
000088  2e5c5573
00008c  65725c6b
000090  6977695f
000094  66745c61
000098  73755f65
00009c  66757365
0000a0  2e6300  
0000a3  00                DCB      0
                  |L5.164|
                          DCD      g_iRunTime
                  |L5.168|
0000a8  5b253864          DCB      "[%8d]%s:%d:asu connect failed:%d\r\n",0
0000ac  5d25733a
0000b0  25643a61
0000b4  73752063
0000b8  6f6e6e65
0000bc  63742066
0000c0  61696c65
0000c4  643a2564
0000c8  0d0a00  
0000cb  00                DCB      0
                  |L5.204|
                          DCD      0x08000004
                  |L5.208|
                          DCD      0x20003000
                  |L5.212|
                          DCD      0x21004000
                  |L5.216|
                          DCD      0x000186a0

                          AREA ||i.efuse_ops_program_all||, CODE, READONLY, ALIGN=1

                  efuse_ops_program_all PROC
;;;236    
;;;237    static int32_t efuse_ops_program_all(uint32_t vals[4][8])
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;238    {
000004  4605              MOV      r5,r0
;;;239    	for(uint32_t bit_addr=0;bit_addr<1024;bit_addr++)
000006  2400              MOVS     r4,#0
000008  e01b              B        |L6.66|
                  |L6.10|
;;;240    	{
;;;241    		uint32_t sector_index = (bit_addr >> 8) & 0x3u;
00000a  f3c42601          UBFX     r6,r4,#8,#2
;;;242    		uint32_t word_index = (bit_addr >> 5) & 0x7u;
00000e  f3c41742          UBFX     r7,r4,#5,#3
;;;243    		uint32_t bit_index = bit_addr & 0x1fu;
000012  f004081f          AND      r8,r4,#0x1f
;;;244    		if(vals[sector_index][word_index] & (1u << bit_index))
000016  eb051046          ADD      r0,r5,r6,LSL #5
00001a  f8500027          LDR      r0,[r0,r7,LSL #2]
00001e  2101              MOVS     r1,#1
000020  fa01f108          LSL      r1,r1,r8
000024  4008              ANDS     r0,r0,r1
000026  b158              CBZ      r0,|L6.64|
;;;245    		{
;;;246    //			logging("program sector[%d].word[%d].bit[%d]\r\n",sector_index,word_index,bit_index);
;;;247    			int32_t err = efuse_ops_program_bit(bit_addr);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       efuse_ops_program_bit
00002e  4681              MOV      r9,r0
;;;248    			if(err)
000030  f1b90f00          CMP      r9,#0
000034  d003              BEQ      |L6.62|
;;;249    			{
;;;250    				return -1;
000036  f04f30ff          MOV      r0,#0xffffffff
                  |L6.58|
;;;251    			}
;;;252    		}
;;;253    	}
;;;254    	return 0;
;;;255    }
00003a  e8bd87f0          POP      {r4-r10,pc}
                  |L6.62|
00003e  bf00              NOP                            ;252
                  |L6.64|
000040  1c64              ADDS     r4,r4,#1              ;239
                  |L6.66|
000042  f5b46f80          CMP      r4,#0x400             ;239
000046  d3e0              BCC      |L6.10|
000048  2000              MOVS     r0,#0                 ;254
00004a  e7f6              B        |L6.58|
                          ENDP


                          AREA ||i.efuse_ops_program_bit||, CODE, READONLY, ALIGN=2

                  efuse_ops_program_bit PROC
;;;160    
;;;161    static int32_t efuse_ops_program_bit(uint32_t addr)
000000  b57c              PUSH     {r2-r6,lr}
;;;162    {
000002  4604              MOV      r4,r0
;;;163    	uint32_t efuse_cmd = 0;
000004  2000              MOVS     r0,#0
000006  9001              STR      r0,[sp,#4]
;;;164    
;;;165    	if(addr >= 1024)
000008  f5b46f80          CMP      r4,#0x400
00000c  d30a              BCC      |L7.36|
;;;166    	{
;;;167    		logging("%s:%d:invalid efuse addr:%d\r\n",__FILE__,__LINE__,addr);
00000e  23a7              MOVS     r3,#0xa7
000010  a21e              ADR      r2,|L7.140|
000012  4826              LDR      r0,|L7.172|
000014  9400              STR      r4,[sp,#0]
000016  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000018  a025              ADR      r0,|L7.176|
00001a  f7fffffe          BL       logger_buffer_write
;;;168    		return -1;
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L7.34|
;;;169    	}
;;;170    
;;;171    	asu_write_word((uint32_t)&DEV_EFUSE->ADR, addr);
;;;172    
;;;173    	efuse_cmd =
;;;174    			DEV_EFUSE_CMD_PG_MODE_MANUAL	|
;;;175    			DEV_EFUSE_CMD_EFUSEPROGRAM		|
;;;176    			DEV_EFUSE_CMD_RUN;
;;;177    
;;;178    	asu_write_word((uint32_t)&DEV_EFUSE->CMD,efuse_cmd);
;;;179    
;;;180    	uint32_t flag_timeout = 1;
;;;181    	 
;;;182        timer_creat();
;;;183        timer_start(100);
;;;184    	do
;;;185    	{
;;;186    		asu_read_word((uint32_t)&DEV_EFUSE->CMD, &efuse_cmd);
;;;187    		if((efuse_cmd & DEV_EFUSE_CMD_RUN) == 0)
;;;188    		{
;;;189    			flag_timeout = 0;
;;;190    			break;
;;;191    		}
;;;192    	}while(!is_time_up());
;;;193    
;;;194    	if(flag_timeout)
;;;195    	{
;;;196    		logging("%s:%d:efuse program bit timeout!\r\n",__FILE__,__LINE__);
;;;197    		return -1;
;;;198    	}
;;;199    	return 0;
;;;200    }
000022  bd7c              POP      {r2-r6,pc}
                  |L7.36|
000024  4621              MOV      r1,r4                 ;171
000026  482b              LDR      r0,|L7.212|
000028  f7fffffe          BL       asu_write_word
00002c  200d              MOVS     r0,#0xd               ;173
00002e  9001              STR      r0,[sp,#4]            ;173
000030  4828              LDR      r0,|L7.212|
000032  1d00              ADDS     r0,r0,#4              ;178
000034  9901              LDR      r1,[sp,#4]            ;178
000036  f7fffffe          BL       asu_write_word
00003a  2501              MOVS     r5,#1                 ;180
00003c  481b              LDR      r0,|L7.172|
00003e  6800              LDR      r0,[r0,#0]            ;183  ; g_iRunTime
000040  3064              ADDS     r0,r0,#0x64           ;183
000042  4925              LDR      r1,|L7.216|
000044  6008              STR      r0,[r1,#0]            ;183  ; timer
000046  bf00              NOP                            ;184
                  |L7.72|
000048  a901              ADD      r1,sp,#4              ;186
00004a  4822              LDR      r0,|L7.212|
00004c  1d00              ADDS     r0,r0,#4              ;186
00004e  f7fffffe          BL       asu_read_word
000052  9801              LDR      r0,[sp,#4]            ;187
000054  f0000001          AND      r0,r0,#1              ;187
000058  b908              CBNZ     r0,|L7.94|
00005a  2500              MOVS     r5,#0                 ;189
00005c  e008              B        |L7.112|
                  |L7.94|
00005e  4813              LDR      r0,|L7.172|
000060  6800              LDR      r0,[r0,#0]            ;192  ; g_iRunTime
000062  491d              LDR      r1,|L7.216|
000064  6809              LDR      r1,[r1,#0]            ;192  ; timer
000066  1a40              SUBS     r0,r0,r1              ;192
000068  f06f4100          MVN      r1,#0x80000000        ;192
00006c  4288              CMP      r0,r1                 ;192
00006e  d2eb              BCS      |L7.72|
                  |L7.112|
000070  bf00              NOP                            ;190
000072  b14d              CBZ      r5,|L7.136|
000074  23c4              MOVS     r3,#0xc4              ;196
000076  a205              ADR      r2,|L7.140|
000078  480c              LDR      r0,|L7.172|
00007a  6801              LDR      r1,[r0,#0]            ;196  ; g_iRunTime
00007c  a017              ADR      r0,|L7.220|
00007e  f7fffffe          BL       logger_buffer_write
000082  f04f30ff          MOV      r0,#0xffffffff        ;197
000086  e7cc              B        |L7.34|
                  |L7.136|
000088  2000              MOVS     r0,#0                 ;199
00008a  e7ca              B        |L7.34|
;;;201    
                          ENDP

                  |L7.140|
00008c  2e2e5c2e          DCB      "..\\..\\User\\kiwi_ft\\asu_efuse.c",0
000090  2e5c5573
000094  65725c6b
000098  6977695f
00009c  66745c61
0000a0  73755f65
0000a4  66757365
0000a8  2e6300  
0000ab  00                DCB      0
                  |L7.172|
                          DCD      g_iRunTime
                  |L7.176|
0000b0  5b253864          DCB      "[%8d]%s:%d:invalid efuse addr:%d\r\n",0
0000b4  5d25733a
0000b8  25643a69
0000bc  6e76616c
0000c0  69642065
0000c4  66757365
0000c8  20616464
0000cc  723a2564
0000d0  0d0a00  
0000d3  00                DCB      0
                  |L7.212|
                          DCD      0x20160004
                  |L7.216|
                          DCD      timer
                  |L7.220|
0000dc  5b253864          DCB      "[%8d]%s:%d:efuse program bit timeout!\r\n",0
0000e0  5d25733a
0000e4  25643a65
0000e8  66757365
0000ec  2070726f
0000f0  6772616d
0000f4  20626974
0000f8  2074696d
0000fc  656f7574
000100  210d0a00

                          AREA ||.data||, DATA, ALIGN=2

                  efuse_write_data
000000  02000c40          DCB      0x02,0x00,0x0c,0x40
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000020  01000056          DCB      0x01,0x00,0x00,0x56
                          DCD      0x00000000
000028  00000000          DCB      0x00,0x00,0x00,0x00
00002c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          %        64
                  timer
                          DCD      0x00000000
                  |symbol_number.24|
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\kiwi_ft\\asu_efuse.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_asu_efuse_c_8eaca5db____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_asu_efuse_c_8eaca5db____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_asu_efuse_c_8eaca5db____REVSH|
#line 144
|__asm___11_asu_efuse_c_8eaca5db____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
