; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\bsp_spi_flash.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_spi_flash.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\bsp_spi_flash.crf ..\..\User\bsp_stm32f4xx\src\bsp_spi_flash.c]
                          THUMB

                          AREA ||i.bsp_InitSFlash||, CODE, READONLY, ALIGN=1

                  bsp_InitSFlash PROC
;;;162    */
;;;163    void bsp_InitSFlash(void)
000000  b510              PUSH     {r4,lr}
;;;164    {
;;;165    	sf_ConfigGPIO();			/* 配置GPIO */
000002  f7fffffe          BL       sf_ConfigGPIO
;;;166    	
;;;167    	//sf_CfgSpiHard();
;;;168    
;;;169    	sf_ReadInfo();				/* 自动识别芯片型号 */
000006  f7fffffe          BL       sf_ReadInfo
;;;170    
;;;171    	sf_SetCS(0);				/* 软件方式，使能串行Flash片选 */
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       sf_SetCS
;;;172    	bsp_spiWrite1(CMD_DISWR);		/* 发送禁止写入的命令,即使能软件写保护 */
000010  2004              MOVS     r0,#4
000012  f7fffffe          BL       bsp_spiWrite1
;;;173    	sf_SetCS(1);				/* 软件方式，禁能串行Flash片选 */
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       sf_SetCS
;;;174    
;;;175    	sf_WaitForWriteEnd();		/* 等待串行Flash内部操作完成 */
00001c  f7fffffe          BL       sf_WaitForWriteEnd
;;;176    
;;;177    	sf_WriteStatus(0);			/* 解除所有BLOCK的写保护 */
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       sf_WriteStatus
;;;178    }
000026  bd10              POP      {r4,pc}
;;;179    
                          ENDP


                          AREA ||i.sf_AutoWritePage||, CODE, READONLY, ALIGN=2

                  sf_AutoWritePage PROC
;;;438    */
;;;439    static uint8_t sf_AutoWritePage(uint8_t *_ucpSrc, uint32_t _uiWrAddr, uint16_t _usWrLen)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;440    {
000004  b081              SUB      sp,sp,#4
000006  f5ad5d80          SUB      sp,sp,#0x1000
00000a  4607              MOV      r7,r0
00000c  460d              MOV      r5,r1
00000e  4616              MOV      r6,r2
;;;441    	uint16_t i;
;;;442    	uint16_t j;					/* 用于延时 */
;;;443    	uint32_t uiFirstAddr;		/* 扇区首址 */
;;;444    	uint8_t ucNeedErase;		/* 1表示需要擦除 */
;;;445    	uint8_t cRet;
;;;446    	uint8_t s_spiBuf[4*1024];	/* 用于写函数，先读出整个page，修改缓冲区后，再整个page回写 */	
;;;447    
;;;448    	/* 长度为0时不继续操作,直接认为成功 */
;;;449    	if (_usWrLen == 0)
000010  b92e              CBNZ     r6,|L2.30|
;;;450    	{
;;;451    		return 1;
000012  2001              MOVS     r0,#1
                  |L2.20|
;;;452    	}
;;;453    
;;;454    	/* 如果偏移地址超过芯片容量则退出 */
;;;455    	if (_uiWrAddr >= g_tSF.TotalSize)
;;;456    	{
;;;457    		return 0;
;;;458    	}
;;;459    
;;;460    	/* 如果数据长度大于扇区容量，则退出 */
;;;461    	if (_usWrLen > g_tSF.SectorSize)
;;;462    	{
;;;463    		return 0;
;;;464    	}
;;;465    
;;;466    	/* 如果FLASH中的数据没有变化,则不写FLASH */
;;;467    	sf_ReadBuffer(s_spiBuf, _uiWrAddr, _usWrLen);
;;;468    	if (memcmp(s_spiBuf, _ucpSrc, _usWrLen) == 0)
;;;469    	{
;;;470    		return 1;
;;;471    	}
;;;472    
;;;473    	/* 判断是否需要先擦除扇区 */
;;;474    	/* 如果旧数据修改为新数据，所有位均是 1->0 或者 0->0, 则无需擦除,提高Flash寿命 */
;;;475    	ucNeedErase = 0;
;;;476    	if (sf_NeedErase(s_spiBuf, _ucpSrc, _usWrLen))
;;;477    	{
;;;478    		ucNeedErase = 1;
;;;479    	}
;;;480    
;;;481    	uiFirstAddr = _uiWrAddr & (~(g_tSF.SectorSize - 1));
;;;482    
;;;483    	if (_usWrLen == g_tSF.SectorSize)		/* 整个扇区都改写 */
;;;484    	{
;;;485    		for	(i = 0; i < g_tSF.SectorSize; i++)
;;;486    		{
;;;487    			s_spiBuf[i] = _ucpSrc[i];
;;;488    		}
;;;489    	}
;;;490    	else						/* 改写部分数据 */
;;;491    	{
;;;492    		/* 先将整个扇区的数据读出 */
;;;493    		sf_ReadBuffer(s_spiBuf, uiFirstAddr, g_tSF.SectorSize);
;;;494    
;;;495    		/* 再用新数据覆盖 */
;;;496    		i = _uiWrAddr & (g_tSF.SectorSize - 1);
;;;497    		memcpy(&s_spiBuf[i], _ucpSrc, _usWrLen);
;;;498    	}
;;;499    
;;;500    	/* 写完之后进行校验，如果不正确则重写，最多3次 */
;;;501    	cRet = 0;
;;;502    	for (i = 0; i < 3; i++)
;;;503    	{
;;;504    
;;;505    		/* 如果旧数据修改为新数据，所有位均是 1->0 或者 0->0, 则无需擦除,提高Flash寿命 */
;;;506    		if (ucNeedErase == 1)
;;;507    		{
;;;508    			sf_EraseSector(uiFirstAddr);		/* 擦除1个扇区 */
;;;509    		}
;;;510    
;;;511    		/* 编程一个PAGE */
;;;512    		sf_PageWrite(s_spiBuf, uiFirstAddr, g_tSF.SectorSize);
;;;513    
;;;514    		if (sf_CmpData(_uiWrAddr, _ucpSrc, _usWrLen) == 0)
;;;515    		{
;;;516    			cRet = 1;
;;;517    			break;
;;;518    		}
;;;519    		else
;;;520    		{
;;;521    			if (sf_CmpData(_uiWrAddr, _ucpSrc, _usWrLen) == 0)
;;;522    			{
;;;523    				cRet = 1;
;;;524    				break;
;;;525    			}
;;;526    
;;;527    			/* 失败后延迟一段时间再重试 */
;;;528    			for (j = 0; j < 10000; j++);
;;;529    		}
;;;530    	}
;;;531    
;;;532    	return cRet;
;;;533    }
000014  b001              ADD      sp,sp,#4
000016  f50d5d80          ADD      sp,sp,#0x1000
00001a  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.30|
00001e  483e              LDR      r0,|L2.280|
000020  6940              LDR      r0,[r0,#0x14]         ;455  ; g_tSF
000022  42a8              CMP      r0,r5                 ;455
000024  d801              BHI      |L2.42|
000026  2000              MOVS     r0,#0                 ;457
000028  e7f4              B        |L2.20|
                  |L2.42|
00002a  483b              LDR      r0,|L2.280|
00002c  8b00              LDRH     r0,[r0,#0x18]         ;461  ; g_tSF
00002e  42b0              CMP      r0,r6                 ;461
000030  da01              BGE      |L2.54|
000032  2000              MOVS     r0,#0                 ;463
000034  e7ee              B        |L2.20|
                  |L2.54|
000036  4632              MOV      r2,r6                 ;467
000038  4629              MOV      r1,r5                 ;467
00003a  a801              ADD      r0,sp,#4              ;467
00003c  f7fffffe          BL       sf_ReadBuffer
000040  4632              MOV      r2,r6                 ;468
000042  4639              MOV      r1,r7                 ;468
000044  a801              ADD      r0,sp,#4              ;468
000046  f7fffffe          BL       memcmp
00004a  b908              CBNZ     r0,|L2.80|
00004c  2001              MOVS     r0,#1                 ;470
00004e  e7e1              B        |L2.20|
                  |L2.80|
000050  f04f0a00          MOV      r10,#0                ;475
000054  4632              MOV      r2,r6                 ;476
000056  4639              MOV      r1,r7                 ;476
000058  a801              ADD      r0,sp,#4              ;476
00005a  f7fffffe          BL       sf_NeedErase
00005e  b108              CBZ      r0,|L2.100|
000060  f04f0a01          MOV      r10,#1                ;478
                  |L2.100|
000064  482c              LDR      r0,|L2.280|
000066  8b00              LDRH     r0,[r0,#0x18]         ;481  ; g_tSF
000068  1e40              SUBS     r0,r0,#1              ;481
00006a  ea250800          BIC      r8,r5,r0              ;481
00006e  482a              LDR      r0,|L2.280|
000070  8b00              LDRH     r0,[r0,#0x18]         ;483  ; g_tSF
000072  42b0              CMP      r0,r6                 ;483
000074  d10b              BNE      |L2.142|
000076  2400              MOVS     r4,#0                 ;485
000078  e004              B        |L2.132|
                  |L2.122|
00007a  5d38              LDRB     r0,[r7,r4]            ;487
00007c  a901              ADD      r1,sp,#4              ;487
00007e  5508              STRB     r0,[r1,r4]            ;487
000080  1c60              ADDS     r0,r4,#1              ;485
000082  b284              UXTH     r4,r0                 ;485
                  |L2.132|
000084  4824              LDR      r0,|L2.280|
000086  8b00              LDRH     r0,[r0,#0x18]         ;485  ; g_tSF
000088  42a0              CMP      r0,r4                 ;485
00008a  dcf6              BGT      |L2.122|
00008c  e010              B        |L2.176|
                  |L2.142|
00008e  4822              LDR      r0,|L2.280|
000090  8b02              LDRH     r2,[r0,#0x18]         ;493  ; g_tSF
000092  4641              MOV      r1,r8                 ;493
000094  a801              ADD      r0,sp,#4              ;493
000096  f7fffffe          BL       sf_ReadBuffer
00009a  481f              LDR      r0,|L2.280|
00009c  8b00              LDRH     r0,[r0,#0x18]         ;496  ; g_tSF
00009e  1e40              SUBS     r0,r0,#1              ;496
0000a0  4028              ANDS     r0,r0,r5              ;496
0000a2  b284              UXTH     r4,r0                 ;496
0000a4  a901              ADD      r1,sp,#4              ;497
0000a6  1908              ADDS     r0,r1,r4              ;497
0000a8  4632              MOV      r2,r6                 ;497
0000aa  4639              MOV      r1,r7                 ;497
0000ac  f7fffffe          BL       __aeabi_memcpy
                  |L2.176|
0000b0  f04f0b00          MOV      r11,#0                ;501
0000b4  2400              MOVS     r4,#0                 ;502
0000b6  e02a              B        |L2.270|
                  |L2.184|
0000b8  f1ba0f01          CMP      r10,#1                ;506
0000bc  d102              BNE      |L2.196|
0000be  4640              MOV      r0,r8                 ;508
0000c0  f7fffffe          BL       sf_EraseSector
                  |L2.196|
0000c4  4814              LDR      r0,|L2.280|
0000c6  8b02              LDRH     r2,[r0,#0x18]         ;512  ; g_tSF
0000c8  4641              MOV      r1,r8                 ;512
0000ca  a801              ADD      r0,sp,#4              ;512
0000cc  f7fffffe          BL       sf_PageWrite
0000d0  4632              MOV      r2,r6                 ;514
0000d2  4639              MOV      r1,r7                 ;514
0000d4  4628              MOV      r0,r5                 ;514
0000d6  f7fffffe          BL       sf_CmpData
0000da  b910              CBNZ     r0,|L2.226|
0000dc  f04f0b01          MOV      r11,#1                ;516
0000e0  e017              B        |L2.274|
                  |L2.226|
0000e2  4632              MOV      r2,r6                 ;521
0000e4  4639              MOV      r1,r7                 ;521
0000e6  4628              MOV      r0,r5                 ;521
0000e8  f7fffffe          BL       sf_CmpData
0000ec  b910              CBNZ     r0,|L2.244|
0000ee  f04f0b01          MOV      r11,#1                ;523
0000f2  e00e              B        |L2.274|
                  |L2.244|
0000f4  f04f0900          MOV      r9,#0                 ;528
0000f8  e003              B        |L2.258|
                  |L2.250|
0000fa  f1090001          ADD      r0,r9,#1              ;528
0000fe  fa1ff980          UXTH     r9,r0                 ;528
                  |L2.258|
000102  f2427010          MOV      r0,#0x2710            ;528
000106  4581              CMP      r9,r0                 ;528
000108  dbf7              BLT      |L2.250|
00010a  1c60              ADDS     r0,r4,#1              ;502
00010c  b284              UXTH     r4,r0                 ;502
                  |L2.270|
00010e  2c03              CMP      r4,#3                 ;502
000110  dbd2              BLT      |L2.184|
                  |L2.274|
000112  bf00              NOP                            ;517
000114  4658              MOV      r0,r11                ;532
000116  e77d              B        |L2.20|
;;;534    
                          ENDP

                  |L2.280|
                          DCD      g_tSF

                          AREA ||i.sf_CfgSpiHard||, CODE, READONLY, ALIGN=2

                  sf_CfgSpiHard PROC
;;;94     */
;;;95     void sf_CfgSpiHard(void)
000000  b500              PUSH     {lr}
;;;96     {
000002  b085              SUB      sp,sp,#0x14
;;;97     	SPI_InitTypeDef  SPI_InitStructure;
;;;98     
;;;99     	/* 配置SPI硬件参数 */
;;;100    	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;	/* 数据方向：2线全双工 */
000004  2000              MOVS     r0,#0
000006  f8ad0000          STRH     r0,[sp,#0]
;;;101    	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;		/* STM32的SPI工作模式 ：主机模式 */
00000a  f44f7082          MOV      r0,#0x104
00000e  f8ad0002          STRH     r0,[sp,#2]
;;;102    	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;	/* 数据位长度 ： 8位 */
000012  2000              MOVS     r0,#0
000014  f8ad0004          STRH     r0,[sp,#4]
;;;103    	/* SPI_CPOL和SPI_CPHA结合使用决定时钟和数据采样点的相位关系、
;;;104    	   本例配置: 总线空闲是高电平,第2个边沿（上升沿采样数据)
;;;105    	*/
;;;106    	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;			/* 时钟上升沿采样数据 */
000018  2002              MOVS     r0,#2
00001a  f8ad0006          STRH     r0,[sp,#6]
;;;107    	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;		/* 时钟的第2个边沿采样数据 */
00001e  2001              MOVS     r0,#1
000020  f8ad0008          STRH     r0,[sp,#8]
;;;108    	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;			/* 片选控制方式：软件控制 */
000024  0240              LSLS     r0,r0,#9
000026  f8ad000a          STRH     r0,[sp,#0xa]
;;;109    
;;;110    	/* 设置波特率预分频系数 SPI_BaudRatePrescaler_8 ，实测SCK周期 96ns, 10.4MHz */
;;;111    	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;//SPI_BaudRatePrescaler_2;
00002a  2010              MOVS     r0,#0x10
00002c  f8ad000c          STRH     r0,[sp,#0xc]
;;;112    
;;;113    	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;	/* 数据位传输次序：高位先传 */
000030  2000              MOVS     r0,#0
000032  f8ad000e          STRH     r0,[sp,#0xe]
;;;114    	SPI_InitStructure.SPI_CRCPolynomial = 7;			/* CRC多项式寄存器，复位后为7。本例程不用 */
000036  2007              MOVS     r0,#7
000038  f8ad0010          STRH     r0,[sp,#0x10]
;;;115    	SPI_Init(SPI2, &SPI_InitStructure);
00003c  4669              MOV      r1,sp
00003e  4804              LDR      r0,|L3.80|
000040  f7fffffe          BL       SPI_Init
;;;116    
;;;117    	SPI_Cmd(SPI2, ENABLE);				/* 使能SPI  */
000044  2101              MOVS     r1,#1
000046  4802              LDR      r0,|L3.80|
000048  f7fffffe          BL       SPI_Cmd
;;;118    }
00004c  b005              ADD      sp,sp,#0x14
00004e  bd00              POP      {pc}
;;;119    
                          ENDP

                  |L3.80|
                          DCD      0x40003800

                          AREA ||i.sf_CmpData||, CODE, READONLY, ALIGN=2

                  sf_CmpData PROC
;;;350    */
;;;351    static uint8_t sf_CmpData(uint32_t _uiSrcAddr, uint8_t *_ucpTar, uint32_t _uiSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;352    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;353    	uint8_t ucValue;
;;;354    
;;;355    	/* 如果读取的数据长度为0或者超出串行Flash地址空间，则直接返回 */
;;;356    	if ((_uiSrcAddr + _uiSize) > g_tSF.TotalSize)
00000a  1960              ADDS     r0,r4,r5
00000c  4918              LDR      r1,|L4.112|
00000e  6949              LDR      r1,[r1,#0x14]  ; g_tSF
000010  4288              CMP      r0,r1
000012  d902              BLS      |L4.26|
;;;357    	{
;;;358    		return 1;
000014  2001              MOVS     r0,#1
                  |L4.22|
;;;359    	}
;;;360    
;;;361    	if (_uiSize == 0)
;;;362    	{
;;;363    		return 0;
;;;364    	}
;;;365    
;;;366    	sf_SetCS(0);									/* 使能片选 */
;;;367    	bsp_spiWrite1(CMD_READ);							/* 发送读命令 */
;;;368    	bsp_spiWrite1((_uiSrcAddr & 0xFF0000) >> 16);		/* 发送扇区地址的高8bit */
;;;369    	bsp_spiWrite1((_uiSrcAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
;;;370    	bsp_spiWrite1(_uiSrcAddr & 0xFF);					/* 发送扇区地址低8bit */
;;;371    	while (_uiSize--)
;;;372    	{
;;;373    		/* 读一个字节 */
;;;374    		ucValue = bsp_spiRead1();
;;;375    		if (*_ucpTar++ != ucValue)
;;;376    		{
;;;377    			sf_SetCS(1);
;;;378    			return 1;
;;;379    		}
;;;380    	}
;;;381    	sf_SetCS(1);
;;;382    	return 0;
;;;383    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L4.26|
00001a  b90d              CBNZ     r5,|L4.32|
00001c  2000              MOVS     r0,#0                 ;363
00001e  e7fa              B        |L4.22|
                  |L4.32|
000020  2000              MOVS     r0,#0                 ;366
000022  f7fffffe          BL       sf_SetCS
000026  2003              MOVS     r0,#3                 ;367
000028  f7fffffe          BL       bsp_spiWrite1
00002c  f3c44007          UBFX     r0,r4,#16,#8          ;368
000030  f7fffffe          BL       bsp_spiWrite1
000034  f3c42007          UBFX     r0,r4,#8,#8           ;369
000038  f7fffffe          BL       bsp_spiWrite1
00003c  b2e0              UXTB     r0,r4                 ;370
00003e  f7fffffe          BL       bsp_spiWrite1
000042  e00b              B        |L4.92|
                  |L4.68|
000044  f7fffffe          BL       bsp_spiRead1
000048  4607              MOV      r7,r0                 ;374
00004a  f8161b01          LDRB     r1,[r6],#1            ;375
00004e  42b9              CMP      r1,r7                 ;375
000050  d004              BEQ      |L4.92|
000052  2001              MOVS     r0,#1                 ;377
000054  f7fffffe          BL       sf_SetCS
000058  2001              MOVS     r0,#1                 ;378
00005a  e7dc              B        |L4.22|
                  |L4.92|
00005c  1e28              SUBS     r0,r5,#0              ;371
00005e  f1a50501          SUB      r5,r5,#1              ;371
000062  d1ef              BNE      |L4.68|
000064  2001              MOVS     r0,#1                 ;381
000066  f7fffffe          BL       sf_SetCS
00006a  2000              MOVS     r0,#0                 ;382
00006c  e7d3              B        |L4.22|
;;;384    
                          ENDP

00006e  0000              DCW      0x0000
                  |L4.112|
                          DCD      g_tSF

                          AREA ||i.sf_ConfigGPIO||, CODE, READONLY, ALIGN=2

                  sf_ConfigGPIO PROC
;;;66     */
;;;67     static void sf_ConfigGPIO(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;68     {
;;;69     	/*
;;;70     		普林芯驰STM32-V4 开发板口线分配：  串行Flash型号为 W25Q64BVSSIG (80MHz)
;;;71     		PF8/SF_CS
;;;72     	*/
;;;73     	GPIO_InitTypeDef GPIO_InitStructure;
;;;74     
;;;75     	/* 使能GPIO 时钟 */
;;;76     	RCC_AHB1PeriphClockCmd(SF_RCC_CS, ENABLE);
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;77     
;;;78     	/* 配置片选口线为推挽输出模式 */
;;;79     	sf_SetCS(1);		/* 片选置高，不选中 */
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       sf_SetCS
;;;80     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
000010  2001              MOVS     r0,#1
000012  f88d0004          STRB     r0,[sp,#4]
;;;81         GPIO_InitStructure.GPIO_PuPd =  GPIO_PuPd_UP;
000016  f88d0007          STRB     r0,[sp,#7]
;;;82     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001a  2002              MOVS     r0,#2
00001c  f88d0005          STRB     r0,[sp,#5]
;;;83     	GPIO_InitStructure.GPIO_Pin = SF_PIN_CS;
000020  0200              LSLS     r0,r0,#8
000022  9000              STR      r0,[sp,#0]
;;;84     	GPIO_Init(SF_PORT_CS, &GPIO_InitStructure);
000024  4669              MOV      r1,sp
000026  4802              LDR      r0,|L5.48|
000028  f7fffffe          BL       GPIO_Init
;;;85     }
00002c  bd1c              POP      {r2-r4,pc}
;;;86     
                          ENDP

00002e  0000              DCW      0x0000
                  |L5.48|
                          DCD      0x40020c00

                          AREA ||i.sf_EraseChip||, CODE, READONLY, ALIGN=1

                  sf_EraseChip PROC
;;;210    */
;;;211    void sf_EraseChip(void)
000000  b510              PUSH     {r4,lr}
;;;212    {
;;;213    	sf_WriteEnable();								/* 发送写使能命令 */
000002  f7fffffe          BL       sf_WriteEnable
;;;214    
;;;215    	/* 擦除扇区操作 */
;;;216    	sf_SetCS(0);									/* 使能片选 */
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       sf_SetCS
;;;217    	bsp_spiWrite1(CMD_BE);							/* 发送整片擦除命令 */
00000c  20c7              MOVS     r0,#0xc7
00000e  f7fffffe          BL       bsp_spiWrite1
;;;218    	sf_SetCS(1);									/* 禁能片选 */
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       sf_SetCS
;;;219    
;;;220    	sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
000018  f7fffffe          BL       sf_WaitForWriteEnd
;;;221    }
00001c  bd10              POP      {r4,pc}
;;;222    
                          ENDP


                          AREA ||i.sf_EraseSector||, CODE, READONLY, ALIGN=1

                  sf_EraseSector PROC
;;;187    */
;;;188    void sf_EraseSector(uint32_t _uiSectorAddr)
000000  b510              PUSH     {r4,lr}
;;;189    {
000002  4604              MOV      r4,r0
;;;190    	sf_WriteEnable();								/* 发送写使能命令 */
000004  f7fffffe          BL       sf_WriteEnable
;;;191    
;;;192    	/* 擦除扇区操作 */
;;;193    	sf_SetCS(0);									/* 使能片选 */
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       sf_SetCS
;;;194    	bsp_spiWrite1(CMD_SE);								/* 发送擦除命令 */
00000e  2020              MOVS     r0,#0x20
000010  f7fffffe          BL       bsp_spiWrite1
;;;195    	bsp_spiWrite1((_uiSectorAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
000014  f3c44007          UBFX     r0,r4,#16,#8
000018  f7fffffe          BL       bsp_spiWrite1
;;;196    	bsp_spiWrite1((_uiSectorAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
00001c  f3c42007          UBFX     r0,r4,#8,#8
000020  f7fffffe          BL       bsp_spiWrite1
;;;197    	bsp_spiWrite1(_uiSectorAddr & 0xFF);				/* 发送扇区地址低8bit */
000024  b2e0              UXTB     r0,r4
000026  f7fffffe          BL       bsp_spiWrite1
;;;198    	sf_SetCS(1);									/* 禁能片选 */
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       sf_SetCS
;;;199    
;;;200    	sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
000030  f7fffffe          BL       sf_WaitForWriteEnd
;;;201    }
000034  bd10              POP      {r4,pc}
;;;202    
                          ENDP


                          AREA ||i.sf_NeedErase||, CODE, READONLY, ALIGN=1

                  sf_NeedErase PROC
;;;394    */
;;;395    static uint8_t sf_NeedErase(uint8_t * _ucpOldBuf, uint8_t *_ucpNewBuf, uint16_t _usLen)
000000  b570              PUSH     {r4-r6,lr}
;;;396    {
000002  4603              MOV      r3,r0
;;;397    	uint16_t i;
;;;398    	uint8_t ucOld;
;;;399    
;;;400    	/*
;;;401    	算法第1步：old 求反, new 不变
;;;402    	      old    new
;;;403    		  1101   0101
;;;404    	~     1111
;;;405    		= 0010   0101
;;;406    
;;;407    	算法第2步: old 求反的结果与 new 位与
;;;408    		  0010   old
;;;409    	&	  0101   new
;;;410    		 =0000
;;;411    
;;;412    	算法第3步: 结果为0,则表示无需擦除. 否则表示需要擦除
;;;413    	*/
;;;414    
;;;415    	for (i = 0; i < _usLen; i++)
000004  2400              MOVS     r4,#0
000006  e00b              B        |L8.32|
                  |L8.8|
;;;416    	{
;;;417    		ucOld = *_ucpOldBuf++;
000008  f8135b01          LDRB     r5,[r3],#1
;;;418    		ucOld = ~ucOld;
00000c  43e8              MVNS     r0,r5
00000e  b2c5              UXTB     r5,r0
;;;419    
;;;420    		/* 注意错误的写法: if (ucOld & (*_ucpNewBuf++) != 0) */
;;;421    		if ((ucOld & (*_ucpNewBuf++)) != 0)
000010  f8110b01          LDRB     r0,[r1],#1
000014  4028              ANDS     r0,r0,r5
000016  b108              CBZ      r0,|L8.28|
;;;422    		{
;;;423    			return 1;
000018  2001              MOVS     r0,#1
                  |L8.26|
;;;424    		}
;;;425    	}
;;;426    	return 0;
;;;427    }
00001a  bd70              POP      {r4-r6,pc}
                  |L8.28|
00001c  1c60              ADDS     r0,r4,#1              ;415
00001e  b284              UXTH     r4,r0                 ;415
                  |L8.32|
000020  4294              CMP      r4,r2                 ;415
000022  dbf1              BLT      |L8.8|
000024  2000              MOVS     r0,#0                 ;426
000026  e7f8              B        |L8.26|
;;;428    
                          ENDP


                          AREA ||i.sf_PageWrite||, CODE, READONLY, ALIGN=2

                  sf_PageWrite PROC
;;;232    */
;;;233    void sf_PageWrite(uint8_t * _pBuf, uint32_t _uiWriteAddr, uint16_t _usSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;234    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;235    	uint32_t i, j;
;;;236    
;;;237    	if (g_tSF.ChipID == SST25VF016B_ID)
00000a  484a              LDR      r0,|L9.308|
00000c  6800              LDR      r0,[r0,#0]  ; g_tSF
00000e  494a              LDR      r1,|L9.312|
000010  4288              CMP      r0,r1
000012  d153              BNE      |L9.188|
;;;238    	{
;;;239    		/* AAI指令要求传入的数据个数是偶数 */
;;;240    		if ((_usSize < 2) && (_usSize % 2))
000014  2d02              CMP      r5,#2
000016  da08              BGE      |L9.42|
000018  4628              MOV      r0,r5
00001a  eb0571d0          ADD      r1,r5,r0,LSR #31
00001e  1049              ASRS     r1,r1,#1
000020  eba50141          SUB      r1,r5,r1,LSL #1
000024  b109              CBZ      r1,|L9.42|
                  |L9.38|
;;;241    		{
;;;242    			return ;
;;;243    		}
;;;244    
;;;245    		sf_WriteEnable();								/* 发送写使能命令 */
;;;246    
;;;247    		sf_SetCS(0);									/* 使能片选 */
;;;248    		bsp_spiWrite1(CMD_AAI);							/* 发送AAI命令(地址自动增加编程) */
;;;249    		bsp_spiWrite1((_uiWriteAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
;;;250    		bsp_spiWrite1((_uiWriteAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
;;;251    		bsp_spiWrite1(_uiWriteAddr & 0xFF);				/* 发送扇区地址低8bit */
;;;252    		bsp_spiWrite1(*_pBuf++);							/* 发送第1个数据 */
;;;253    		bsp_spiWrite1(*_pBuf++);							/* 发送第2个数据 */
;;;254    		sf_SetCS(1);									/* 禁能片选 */
;;;255    
;;;256    		sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
;;;257    
;;;258    		_usSize -= 2;									/* 计算剩余字节数 */
;;;259    
;;;260    		for (i = 0; i < _usSize / 2; i++)
;;;261    		{
;;;262    			sf_SetCS(0);								/* 使能片选 */
;;;263    			bsp_spiWrite1(CMD_AAI);						/* 发送AAI命令(地址自动增加编程) */
;;;264    			bsp_spiWrite1(*_pBuf++);						/* 发送数据 */
;;;265    			bsp_spiWrite1(*_pBuf++);						/* 发送数据 */
;;;266    			sf_SetCS(1);								/* 禁能片选 */
;;;267    			sf_WaitForWriteEnd();						/* 等待串行Flash内部写操作完成 */
;;;268    		}
;;;269    
;;;270    		/* 进入写保护状态 */
;;;271    		sf_SetCS(0);
;;;272    		bsp_spiWrite1(CMD_DISWR);
;;;273    		sf_SetCS(1);
;;;274    
;;;275    		sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
;;;276    	}
;;;277    	else	/* for MX25L1606E 、 W25Q64BV */
;;;278    	{
;;;279    		for (j = 0; j < _usSize / 256; j++)
;;;280    		{
;;;281    			sf_WriteEnable();								/* 发送写使能命令 */
;;;282    
;;;283    			sf_SetCS(0);									/* 使能片选 */
;;;284    			bsp_spiWrite1(0x02);								/* 发送AAI命令(地址自动增加编程) */
;;;285    			bsp_spiWrite1((_uiWriteAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
;;;286    			bsp_spiWrite1((_uiWriteAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
;;;287    			bsp_spiWrite1(_uiWriteAddr & 0xFF);				/* 发送扇区地址低8bit */
;;;288    
;;;289    			for (i = 0; i < 256; i++)
;;;290    			{
;;;291    				bsp_spiWrite1(*_pBuf++);					/* 发送数据 */
;;;292    			}
;;;293    
;;;294    			sf_SetCS(1);								/* 禁止片选 */
;;;295    
;;;296    			sf_WaitForWriteEnd();						/* 等待串行Flash内部写操作完成 */
;;;297    
;;;298    			_uiWriteAddr += 256;
;;;299    		}
;;;300    
;;;301    		/* 进入写保护状态 */
;;;302    		sf_SetCS(0);
;;;303    		bsp_spiWrite1(CMD_DISWR);
;;;304    		sf_SetCS(1);
;;;305    
;;;306    		sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
;;;307    	}
;;;308    }
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L9.42|
00002a  f7fffffe          BL       sf_WriteEnable
00002e  2000              MOVS     r0,#0                 ;247
000030  f7fffffe          BL       sf_SetCS
000034  20ad              MOVS     r0,#0xad              ;248
000036  f7fffffe          BL       bsp_spiWrite1
00003a  f3c64007          UBFX     r0,r6,#16,#8          ;249
00003e  f7fffffe          BL       bsp_spiWrite1
000042  f3c62007          UBFX     r0,r6,#8,#8           ;250
000046  f7fffffe          BL       bsp_spiWrite1
00004a  b2f0              UXTB     r0,r6                 ;251
00004c  f7fffffe          BL       bsp_spiWrite1
000050  f8140b01          LDRB     r0,[r4],#1            ;252
000054  f7fffffe          BL       bsp_spiWrite1
000058  f8140b01          LDRB     r0,[r4],#1            ;253
00005c  f7fffffe          BL       bsp_spiWrite1
000060  2001              MOVS     r0,#1                 ;254
000062  f7fffffe          BL       sf_SetCS
000066  f7fffffe          BL       sf_WaitForWriteEnd
00006a  1ea8              SUBS     r0,r5,#2              ;258
00006c  b285              UXTH     r5,r0                 ;258
00006e  2700              MOVS     r7,#0                 ;260
000070  e013              B        |L9.154|
                  |L9.114|
000072  2000              MOVS     r0,#0                 ;262
000074  f7fffffe          BL       sf_SetCS
000078  20ad              MOVS     r0,#0xad              ;263
00007a  f7fffffe          BL       bsp_spiWrite1
00007e  f8140b01          LDRB     r0,[r4],#1            ;264
000082  f7fffffe          BL       bsp_spiWrite1
000086  f8140b01          LDRB     r0,[r4],#1            ;265
00008a  f7fffffe          BL       bsp_spiWrite1
00008e  2001              MOVS     r0,#1                 ;266
000090  f7fffffe          BL       sf_SetCS
000094  f7fffffe          BL       sf_WaitForWriteEnd
000098  1c7f              ADDS     r7,r7,#1              ;260
                  |L9.154|
00009a  eb0571d5          ADD      r1,r5,r5,LSR #31      ;260
00009e  ebb70f61          CMP      r7,r1,ASR #1          ;260
0000a2  d3e6              BCC      |L9.114|
0000a4  2000              MOVS     r0,#0                 ;271
0000a6  f7fffffe          BL       sf_SetCS
0000aa  2004              MOVS     r0,#4                 ;272
0000ac  f7fffffe          BL       bsp_spiWrite1
0000b0  2001              MOVS     r0,#1                 ;273
0000b2  f7fffffe          BL       sf_SetCS
0000b6  f7fffffe          BL       sf_WaitForWriteEnd
0000ba  e038              B        |L9.302|
                  |L9.188|
0000bc  f04f0800          MOV      r8,#0                 ;279
0000c0  e024              B        |L9.268|
                  |L9.194|
0000c2  f7fffffe          BL       sf_WriteEnable
0000c6  2000              MOVS     r0,#0                 ;283
0000c8  f7fffffe          BL       sf_SetCS
0000cc  2002              MOVS     r0,#2                 ;284
0000ce  f7fffffe          BL       bsp_spiWrite1
0000d2  f3c64007          UBFX     r0,r6,#16,#8          ;285
0000d6  f7fffffe          BL       bsp_spiWrite1
0000da  f3c62007          UBFX     r0,r6,#8,#8           ;286
0000de  f7fffffe          BL       bsp_spiWrite1
0000e2  b2f0              UXTB     r0,r6                 ;287
0000e4  f7fffffe          BL       bsp_spiWrite1
0000e8  2700              MOVS     r7,#0                 ;289
0000ea  e004              B        |L9.246|
                  |L9.236|
0000ec  f8140b01          LDRB     r0,[r4],#1            ;291
0000f0  f7fffffe          BL       bsp_spiWrite1
0000f4  1c7f              ADDS     r7,r7,#1              ;289
                  |L9.246|
0000f6  2fff              CMP      r7,#0xff              ;289
0000f8  d9f8              BLS      |L9.236|
0000fa  2001              MOVS     r0,#1                 ;294
0000fc  f7fffffe          BL       sf_SetCS
000100  f7fffffe          BL       sf_WaitForWriteEnd
000104  f5067680          ADD      r6,r6,#0x100          ;298
000108  f1080801          ADD      r8,r8,#1              ;279
                  |L9.268|
00010c  17e9              ASRS     r1,r5,#31             ;279
00010e  eb056111          ADD      r1,r5,r1,LSR #24      ;279
000112  ebb82f21          CMP      r8,r1,ASR #8          ;279
000116  d3d4              BCC      |L9.194|
000118  2000              MOVS     r0,#0                 ;302
00011a  f7fffffe          BL       sf_SetCS
00011e  2004              MOVS     r0,#4                 ;303
000120  f7fffffe          BL       bsp_spiWrite1
000124  2001              MOVS     r0,#1                 ;304
000126  f7fffffe          BL       sf_SetCS
00012a  f7fffffe          BL       sf_WaitForWriteEnd
                  |L9.302|
00012e  bf00              NOP      
000130  e779              B        |L9.38|
;;;309    
                          ENDP

000132  0000              DCW      0x0000
                  |L9.308|
                          DCD      g_tSF
                  |L9.312|
                          DCD      0x00bf2541

                          AREA ||i.sf_ReadBuffer||, CODE, READONLY, ALIGN=2

                  sf_ReadBuffer PROC
;;;319    */
;;;320    void sf_ReadBuffer(uint8_t * _pBuf, uint32_t _uiReadAddr, uint32_t _uiSize)
000000  b570              PUSH     {r4-r6,lr}
;;;321    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;322    	/* 如果读取的数据长度为0或者超出串行Flash地址空间，则直接返回 */
;;;323    	if ((_uiSize == 0) ||(_uiReadAddr + _uiSize) > g_tSF.TotalSize)
000008  b125              CBZ      r5,|L10.20|
00000a  1960              ADDS     r0,r4,r5
00000c  4911              LDR      r1,|L10.84|
00000e  6949              LDR      r1,[r1,#0x14]  ; g_tSF
000010  4288              CMP      r0,r1
000012  d900              BLS      |L10.22|
                  |L10.20|
;;;324    	{
;;;325    		return;
;;;326    	}
;;;327    
;;;328    	/* 擦除扇区操作 */
;;;329    	sf_SetCS(0);									/* 使能片选 */
;;;330    	bsp_spiWrite1(CMD_READ);							/* 发送读命令 */
;;;331    	bsp_spiWrite1((_uiReadAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
;;;332    	bsp_spiWrite1((_uiReadAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
;;;333    	bsp_spiWrite1(_uiReadAddr & 0xFF);				/* 发送扇区地址低8bit */
;;;334    	while (_uiSize--)
;;;335    	{
;;;336    		*_pBuf++ = bsp_spiRead1();			/* 读一个字节并存储到pBuf，读完后指针自加1 */
;;;337    	}
;;;338    	sf_SetCS(1);									/* 禁能片选 */
;;;339    }
000014  bd70              POP      {r4-r6,pc}
                  |L10.22|
000016  2000              MOVS     r0,#0                 ;329
000018  f7fffffe          BL       sf_SetCS
00001c  2003              MOVS     r0,#3                 ;330
00001e  f7fffffe          BL       bsp_spiWrite1
000022  f3c44007          UBFX     r0,r4,#16,#8          ;331
000026  f7fffffe          BL       bsp_spiWrite1
00002a  f3c42007          UBFX     r0,r4,#8,#8           ;332
00002e  f7fffffe          BL       bsp_spiWrite1
000032  b2e0              UXTB     r0,r4                 ;333
000034  f7fffffe          BL       bsp_spiWrite1
000038  e003              B        |L10.66|
                  |L10.58|
00003a  f7fffffe          BL       bsp_spiRead1
00003e  f8060b01          STRB     r0,[r6],#1            ;336
                  |L10.66|
000042  1e28              SUBS     r0,r5,#0              ;334
000044  f1a50501          SUB      r5,r5,#1              ;334
000048  d1f7              BNE      |L10.58|
00004a  2001              MOVS     r0,#1                 ;338
00004c  f7fffffe          BL       sf_SetCS
000050  bf00              NOP      
000052  e7df              B        |L10.20|
;;;340    
                          ENDP

                  |L10.84|
                          DCD      g_tSF

                          AREA ||i.sf_ReadID||, CODE, READONLY, ALIGN=1

                  sf_ReadID PROC
;;;652    */
;;;653    uint32_t sf_ReadID(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;654    {
;;;655    	uint32_t uiID;
;;;656    	uint8_t id1, id2, id3;
;;;657    
;;;658    	sf_SetCS(0);									/* 使能片选 */
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       sf_SetCS
;;;659    	bsp_spiWrite1(CMD_RDID);								/* 发送读ID命令 */
00000a  209f              MOVS     r0,#0x9f
00000c  f7fffffe          BL       bsp_spiWrite1
;;;660    	id1 = bsp_spiRead1();					/* 读ID的第1个字节 */
000010  f7fffffe          BL       bsp_spiRead1
000014  4605              MOV      r5,r0
;;;661    	id2 = bsp_spiRead1();					/* 读ID的第2个字节 */
000016  f7fffffe          BL       bsp_spiRead1
00001a  4606              MOV      r6,r0
;;;662    	id3 = bsp_spiRead1();					/* 读ID的第3个字节 */
00001c  f7fffffe          BL       bsp_spiRead1
000020  4607              MOV      r7,r0
;;;663    	sf_SetCS(1);									/* 禁能片选 */
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       sf_SetCS
;;;664    
;;;665    	uiID = ((uint32_t)id1 << 16) | ((uint32_t)id2 << 8) | id3;
000028  0428              LSLS     r0,r5,#16
00002a  ea402006          ORR      r0,r0,r6,LSL #8
00002e  ea400407          ORR      r4,r0,r7
;;;666    
;;;667    	return uiID;
000032  4620              MOV      r0,r4
;;;668    }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;669    
                          ENDP


                          AREA ||i.sf_ReadInfo||, CODE, READONLY, ALIGN=2

                  sf_ReadInfo PROC
;;;677    */
;;;678    void sf_ReadInfo(void)
000000  b510              PUSH     {r4,lr}
;;;679    {
;;;680    	/* 自动识别串行Flash型号 */
;;;681    	{
;;;682    		g_tSF.ChipID = sf_ReadID();	/* 芯片ID */
000002  f7fffffe          BL       sf_ReadID
000006  4939              LDR      r1,|L12.236|
000008  6008              STR      r0,[r1,#0]  ; g_tSF
;;;683    
;;;684    		switch (g_tSF.ChipID)
00000a  4608              MOV      r0,r1
00000c  6800              LDR      r0,[r0,#0]  ; g_tSF
00000e  4a38              LDR      r2,|L12.240|
000010  1a81              SUBS     r1,r0,r2
000012  4290              CMP      r0,r2
000014  d01f              BEQ      |L12.86|
000016  dc0c              BGT      |L12.50|
000018  4936              LDR      r1,|L12.244|
00001a  4408              ADD      r0,r0,r1
00001c  2800              CMP      r0,#0
00001e  d03e              BEQ      |L12.158|
000020  4935              LDR      r1,|L12.248|
000022  4408              ADD      r0,r0,r1
000024  2800              CMP      r0,#0
000026  d046              BEQ      |L12.182|
000028  4934              LDR      r1,|L12.252|
00002a  4408              ADD      r0,r0,r1
00002c  2800              CMP      r0,#0
00002e  d14e              BNE      |L12.206|
000030  e005              B        |L12.62|
                  |L12.50|
000032  4833              LDR      r0,|L12.256|
000034  4408              ADD      r0,r0,r1
000036  b1d0              CBZ      r0,|L12.110|
000038  2801              CMP      r0,#1
00003a  d148              BNE      |L12.206|
00003c  e023              B        |L12.134|
                  |L12.62|
;;;685    		{
;;;686            case SST25VF016B_ID:
;;;687                strcpy(g_tSF.ChipName, "SST25VF016B");
00003e  a131              ADR      r1,|L12.260|
000040  482a              LDR      r0,|L12.236|
000042  1d00              ADDS     r0,r0,#4
000044  f7fffffe          BL       strcpy
;;;688                g_tSF.TotalSize = 2 * 1024 * 1024;	    /* 总容量 = 2M */
000048  f44f1000          MOV      r0,#0x200000
00004c  4927              LDR      r1,|L12.236|
00004e  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;689                g_tSF.SectorSize = 4 * 1024;		    /* 扇区大小 = 4K */
000050  1240              ASRS     r0,r0,#9
000052  8308              STRH     r0,[r1,#0x18]
;;;690                break;
000054  e047              B        |L12.230|
                  |L12.86|
;;;691    
;;;692            case MX25L1606E_ID:
;;;693                strcpy(g_tSF.ChipName, "MX25L1606E");
000056  a12e              ADR      r1,|L12.272|
000058  4824              LDR      r0,|L12.236|
00005a  1d00              ADDS     r0,r0,#4
00005c  f7fffffe          BL       strcpy
;;;694                g_tSF.TotalSize = 2 * 1024 * 1024;	    /* 总容量 = 2M */
000060  f44f1000          MOV      r0,#0x200000
000064  4921              LDR      r1,|L12.236|
000066  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;695                g_tSF.SectorSize = 4 * 1024;			/* 扇区大小 = 4K */
000068  1240              ASRS     r0,r0,#9
00006a  8308              STRH     r0,[r1,#0x18]
;;;696                break;
00006c  e03b              B        |L12.230|
                  |L12.110|
;;;697    
;;;698            case W25Q64_ID:
;;;699                strcpy(g_tSF.ChipName, "W25Q64");
00006e  a12b              ADR      r1,|L12.284|
000070  481e              LDR      r0,|L12.236|
000072  1d00              ADDS     r0,r0,#4
000074  f7fffffe          BL       strcpy
;;;700                g_tSF.TotalSize = 8 * 1024 * 1024;	    /* 总容量 = 8MB */
000078  f44f0000          MOV      r0,#0x800000
00007c  491b              LDR      r1,|L12.236|
00007e  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;701                g_tSF.SectorSize = 4 * 1024;		    /* 扇区大小 = 4K */
000080  12c0              ASRS     r0,r0,#11
000082  8308              STRH     r0,[r1,#0x18]
;;;702                break;
000084  e02f              B        |L12.230|
                  |L12.134|
;;;703    
;;;704    
;;;705            case W25Q128_ID:
;;;706                strcpy(g_tSF.ChipName, "W25Q128");
000086  a127              ADR      r1,|L12.292|
000088  4818              LDR      r0,|L12.236|
00008a  1d00              ADDS     r0,r0,#4
00008c  f7fffffe          BL       strcpy
;;;707                g_tSF.TotalSize = 16 * 1024 * 1024;	    /* 总容量 = 16M */
000090  f04f7080          MOV      r0,#0x1000000
000094  4915              LDR      r1,|L12.236|
000096  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;708                g_tSF.SectorSize = 4 * 1024;		    /* 扇区大小 = 4K */
000098  1300              ASRS     r0,r0,#12
00009a  8308              STRH     r0,[r1,#0x18]
;;;709                break;	
00009c  e023              B        |L12.230|
                  |L12.158|
;;;710    
;;;711            case BY25Q128_ID:
;;;712                strcpy(g_tSF.ChipName, "BY25Q128");
00009e  a123              ADR      r1,|L12.300|
0000a0  4812              LDR      r0,|L12.236|
0000a2  1d00              ADDS     r0,r0,#4
0000a4  f7fffffe          BL       strcpy
;;;713                g_tSF.TotalSize = 16 * 1024 * 1024;	    /* 总容量 = 16M */
0000a8  f04f7080          MOV      r0,#0x1000000
0000ac  490f              LDR      r1,|L12.236|
0000ae  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;714                g_tSF.SectorSize = 4 * 1024;		    /* 扇区大小 = 4K */
0000b0  1300              ASRS     r0,r0,#12
0000b2  8308              STRH     r0,[r1,#0x18]
;;;715                break;		
0000b4  e017              B        |L12.230|
                  |L12.182|
;;;716            
;;;717            
;;;718            case P25Q32H_ID:
;;;719                strcpy(g_tSF.ChipName, "P25Q32H");
0000b6  a120              ADR      r1,|L12.312|
0000b8  480c              LDR      r0,|L12.236|
0000ba  1d00              ADDS     r0,r0,#4
0000bc  f7fffffe          BL       strcpy
;;;720                g_tSF.TotalSize = 4 * 1024 * 1024;	    /* 总容量 = 4M */
0000c0  f44f0080          MOV      r0,#0x400000
0000c4  4909              LDR      r1,|L12.236|
0000c6  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;721                g_tSF.SectorSize = 4 * 1024;		    /* 扇区大小 = 4K */
0000c8  1280              ASRS     r0,r0,#10
0000ca  8308              STRH     r0,[r1,#0x18]
;;;722                break;
0000cc  e00b              B        |L12.230|
                  |L12.206|
;;;723            default:
;;;724                strcpy(g_tSF.ChipName, "Unknow Flash");
0000ce  a11c              ADR      r1,|L12.320|
0000d0  4806              LDR      r0,|L12.236|
0000d2  1d00              ADDS     r0,r0,#4
0000d4  f7fffffe          BL       strcpy
;;;725                g_tSF.TotalSize = 2 * 1024 * 1024;
0000d8  f44f1000          MOV      r0,#0x200000
0000dc  4903              LDR      r1,|L12.236|
0000de  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;726                g_tSF.SectorSize = 4 * 1024;
0000e0  1240              ASRS     r0,r0,#9
0000e2  8308              STRH     r0,[r1,#0x18]
;;;727                break;
0000e4  bf00              NOP      
                  |L12.230|
0000e6  bf00              NOP                            ;690
;;;728    		}
;;;729    	}
;;;730    }
0000e8  bd10              POP      {r4,pc}
;;;731    
                          ENDP

0000ea  0000              DCW      0x0000
                  |L12.236|
                          DCD      g_tSF
                  |L12.240|
                          DCD      0x00c22015
                  |L12.244|
                          DCD      0xff97bfe8
                  |L12.248|
                          DCD      0xffe2e002
                  |L12.252|
                          DCD      0xffc63ad5
                  |L12.256|
                          DCD      0xffd2dffe
                  |L12.260|
000104  53535432          DCB      "SST25VF016B",0
000108  35564630
00010c  31364200
                  |L12.272|
000110  4d583235          DCB      "MX25L1606E",0
000114  4c313630
000118  364500  
00011b  00                DCB      0
                  |L12.284|
00011c  57323551          DCB      "W25Q64",0
000120  363400  
000123  00                DCB      0
                  |L12.292|
000124  57323551          DCB      "W25Q128",0
000128  31323800
                  |L12.300|
00012c  42593235          DCB      "BY25Q128",0
000130  51313238
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
                  |L12.312|
000138  50323551          DCB      "P25Q32H",0
00013c  33324800
                  |L12.320|
000140  556e6b6e          DCB      "Unknow Flash",0
000144  6f772046
000148  6c617368
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0

                          AREA ||i.sf_SetCS||, CODE, READONLY, ALIGN=2

                  sf_SetCS PROC
;;;127    */
;;;128    static void sf_SetCS(uint8_t _level)
000000  b510              PUSH     {r4,lr}
;;;129    {
000002  4604              MOV      r4,r0
;;;130    	if (_level == 0)
000004  b954              CBNZ     r4,|L13.28|
;;;131    	{
;;;132    		bsp_SpiBusEnter();	/* 占用SPI总线， 用于总线共享 */
000006  f7fffffe          BL       bsp_SpiBusEnter
;;;133    
;;;134    		#ifdef SOFT_SPI		/* 软件SPI */
;;;135    			bsp_SetSpiSck(1);
;;;136    			SF_CS_0();
;;;137    		#endif
;;;138    
;;;139    		#ifdef HARD_SPI		/* 硬件SPI */
;;;140    
;;;141    			bsp_SPI_Init(SPI_Direction_2Lines_FullDuplex | SPI_Mode_Master | SPI_DataSize_8b
00000a  f2403007          MOV      r0,#0x307
00000e  f7fffffe          BL       bsp_SPI_Init
;;;142    				| SPI_CPOL_High | SPI_CPHA_2Edge | SPI_NSS_Soft | SPI_BaudRatePrescaler_2 | SPI_FirstBit_MSB);
;;;143    
;;;144    			SF_CS_0();
000012  f44f7000          MOV      r0,#0x200
000016  4905              LDR      r1,|L13.44|
000018  8008              STRH     r0,[r1,#0]
00001a  e006              B        |L13.42|
                  |L13.28|
;;;145    		#endif
;;;146    	}
;;;147    	else
;;;148    	{
;;;149    		SF_CS_1();
00001c  f44f7000          MOV      r0,#0x200
000020  4902              LDR      r1,|L13.44|
000022  1e89              SUBS     r1,r1,#2
000024  8008              STRH     r0,[r1,#0]
;;;150    
;;;151    		bsp_SpiBusExit();	/* 释放SPI总线， 用于总线共享 */
000026  f7fffffe          BL       bsp_SpiBusExit
                  |L13.42|
;;;152    	}
;;;153    }
00002a  bd10              POP      {r4,pc}
;;;154    
                          ENDP

                  |L13.44|
                          DCD      0x40020c1a

                          AREA ||i.sf_WaitForWriteEnd||, CODE, READONLY, ALIGN=1

                  sf_WaitForWriteEnd PROC
;;;787    */
;;;788    static void sf_WaitForWriteEnd(void)
000000  b510              PUSH     {r4,lr}
;;;789    {
;;;790        #define timer_creat()        static int32_t timer=0
;;;791        #define timer_start(var)     timer=g_iRunTime+var
;;;792        #define is_time_up()        ((g_iRunTime - timer) < (UINT32_MAX/2))
;;;793        
;;;794    //    timer_creat();
;;;795    	sf_SetCS(0);									/* 使能片选 */
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       sf_SetCS
;;;796    	bsp_spiWrite1(CMD_RDSR);							/* 发送命令， 读状态寄存器 */
000008  2005              MOVS     r0,#5
00000a  f7fffffe          BL       bsp_spiWrite1
;;;797        
;;;798       // timer_start(100);
;;;799    	while((bsp_spiRead1() & WIP_FLAG) == SET)	/* 判断状态寄存器的忙标志位 */
00000e  bf00              NOP      
                  |L14.16|
000010  f7fffffe          BL       bsp_spiRead1
000014  f0000001          AND      r0,r0,#1
000018  2800              CMP      r0,#0
00001a  d1f9              BNE      |L14.16|
;;;800        {
;;;801           // if(is_time_up()) break;
;;;802        }
;;;803    	sf_SetCS(1);									/* 禁能片选 */
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       sf_SetCS
;;;804    }
000022  bd10              POP      {r4,pc}
;;;805    
                          ENDP


                          AREA ||i.sf_WriteBuffer||, CODE, READONLY, ALIGN=2

                  sf_WriteBuffer PROC
;;;544    */
;;;545    uint8_t sf_WriteBuffer(uint8_t* _pBuf, uint32_t _uiWriteAddr, uint16_t _usWriteSize)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;546    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;547    	uint16_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
00000a  f04f0800          MOV      r8,#0
00000e  46c1              MOV      r9,r8
000010  46c2              MOV      r10,r8
000012  2400              MOVS     r4,#0
000014  46a3              MOV      r11,r4
;;;548    
;;;549    	Addr = _uiWriteAddr % g_tSF.SectorSize;
000016  4856              LDR      r0,|L15.368|
000018  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
00001a  fbb5f1f0          UDIV     r1,r5,r0
00001e  fb005011          MLS      r0,r0,r1,r5
000022  fa1ffa80          UXTH     r10,r0
;;;550    	count = g_tSF.SectorSize - Addr;
000026  4852              LDR      r0,|L15.368|
000028  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
00002a  eba0000a          SUB      r0,r0,r10
00002e  b284              UXTH     r4,r0
;;;551    	NumOfPage =  _usWriteSize / g_tSF.SectorSize;
000030  484f              LDR      r0,|L15.368|
000032  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
000034  fb96f0f0          SDIV     r0,r6,r0
000038  fa1ff880          UXTH     r8,r0
;;;552    	NumOfSingle = _usWriteSize % g_tSF.SectorSize;
00003c  484c              LDR      r0,|L15.368|
00003e  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
000040  fb96f1f0          SDIV     r1,r6,r0
000044  fb006011          MLS      r0,r0,r1,r6
000048  fa1ff980          UXTH     r9,r0
;;;553    
;;;554    	if (Addr == 0) /* 起始地址是页面首地址  */
00004c  f1ba0f00          CMP      r10,#0
000050  d12a              BNE      |L15.168|
;;;555    	{
;;;556    		if (NumOfPage == 0) /* 数据长度小于页面大小 */
000052  f1b80f00          CMP      r8,#0
000056  d108              BNE      |L15.106|
;;;557    		{
;;;558    			if (sf_AutoWritePage(_pBuf, _uiWriteAddr, _usWriteSize) == 0)
000058  4632              MOV      r2,r6
00005a  4629              MOV      r1,r5
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       sf_AutoWritePage
000062  2800              CMP      r0,#0
000064  d17e              BNE      |L15.356|
                  |L15.102|
;;;559    			{
;;;560    				return 0;
;;;561    			}
;;;562    		}
;;;563    		else 	/* 数据长度大于等于页面大小 */
;;;564    		{
;;;565    			while (NumOfPage--)
;;;566    			{
;;;567    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, g_tSF.SectorSize) == 0)
;;;568    				{
;;;569    					return 0;
;;;570    				}
;;;571    				_uiWriteAddr +=  g_tSF.SectorSize;
;;;572    				_pBuf += g_tSF.SectorSize;
;;;573    			}
;;;574    			if (sf_AutoWritePage(_pBuf, _uiWriteAddr, NumOfSingle) == 0)
;;;575    			{
;;;576    				return 0;
;;;577    			}
;;;578    		}
;;;579    	}
;;;580    	else  /* 起始地址不是页面首地址  */
;;;581    	{
;;;582    		if (NumOfPage == 0) /* 数据长度小于页面大小 */
;;;583    		{
;;;584    			if (NumOfSingle > count) /* (_usWriteSize + _uiWriteAddr) > SPI_FLASH_PAGESIZE */
;;;585    			{
;;;586    				temp = NumOfSingle - count;
;;;587    
;;;588    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, count) == 0)
;;;589    				{
;;;590    					return 0;
;;;591    				}
;;;592    
;;;593    				_uiWriteAddr +=  count;
;;;594    				_pBuf += count;
;;;595    
;;;596    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, temp) == 0)
;;;597    				{
;;;598    					return 0;
;;;599    				}
;;;600    			}
;;;601    			else
;;;602    			{
;;;603    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, _usWriteSize) == 0)
;;;604    				{
;;;605    					return 0;
;;;606    				}
;;;607    			}
;;;608    		}
;;;609    		else	/* 数据长度大于等于页面大小 */
;;;610    		{
;;;611    			_usWriteSize -= count;
;;;612    			NumOfPage =  _usWriteSize / g_tSF.SectorSize;
;;;613    			NumOfSingle = _usWriteSize % g_tSF.SectorSize;
;;;614    
;;;615    			if (sf_AutoWritePage(_pBuf, _uiWriteAddr, count) == 0)
;;;616    			{
;;;617    				return 0;
;;;618    			}
;;;619    
;;;620    			_uiWriteAddr +=  count;
;;;621    			_pBuf += count;
;;;622    
;;;623    			while (NumOfPage--)
;;;624    			{
;;;625    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, g_tSF.SectorSize) == 0)
;;;626    				{
;;;627    					return 0;
;;;628    				}
;;;629    				_uiWriteAddr +=  g_tSF.SectorSize;
;;;630    				_pBuf += g_tSF.SectorSize;
;;;631    			}
;;;632    
;;;633    			if (NumOfSingle != 0)
;;;634    			{
;;;635    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, NumOfSingle) == 0)
;;;636    				{
;;;637    					return 0;
;;;638    				}
;;;639    			}
;;;640    		}
;;;641    	}
;;;642    	return 1;	/* 成功 */
;;;643    }
000066  e8bd9ff0          POP      {r4-r12,pc}
                  |L15.106|
00006a  e00e              B        |L15.138|
                  |L15.108|
00006c  4840              LDR      r0,|L15.368|
00006e  8b02              LDRH     r2,[r0,#0x18]         ;567  ; g_tSF
000070  4629              MOV      r1,r5                 ;567
000072  4638              MOV      r0,r7                 ;567
000074  f7fffffe          BL       sf_AutoWritePage
000078  b908              CBNZ     r0,|L15.126|
00007a  2000              MOVS     r0,#0                 ;569
00007c  e7f3              B        |L15.102|
                  |L15.126|
00007e  483c              LDR      r0,|L15.368|
000080  8b00              LDRH     r0,[r0,#0x18]         ;571  ; g_tSF
000082  4405              ADD      r5,r5,r0              ;571
000084  483a              LDR      r0,|L15.368|
000086  8b00              LDRH     r0,[r0,#0x18]         ;572  ; g_tSF
000088  4407              ADD      r7,r7,r0              ;572
                  |L15.138|
00008a  f1b80000          SUBS     r0,r8,#0              ;565
00008e  f1a80101          SUB      r1,r8,#1              ;565
000092  fa1ff881          UXTH     r8,r1                 ;565
000096  d1e9              BNE      |L15.108|
000098  464a              MOV      r2,r9                 ;574
00009a  4629              MOV      r1,r5                 ;574
00009c  4638              MOV      r0,r7                 ;574
00009e  f7fffffe          BL       sf_AutoWritePage
0000a2  2800              CMP      r0,#0                 ;574
0000a4  d161              BNE      |L15.362|
0000a6  e7de              B        |L15.102|
                  |L15.168|
0000a8  f1b80f00          CMP      r8,#0                 ;582
0000ac  d11f              BNE      |L15.238|
0000ae  45a1              CMP      r9,r4                 ;584
0000b0  dd15              BLE      |L15.222|
0000b2  eba90004          SUB      r0,r9,r4              ;586
0000b6  fa1ffb80          UXTH     r11,r0                ;586
0000ba  4622              MOV      r2,r4                 ;588
0000bc  4629              MOV      r1,r5                 ;588
0000be  4638              MOV      r0,r7                 ;588
0000c0  f7fffffe          BL       sf_AutoWritePage
0000c4  b908              CBNZ     r0,|L15.202|
0000c6  2000              MOVS     r0,#0                 ;590
0000c8  e7cd              B        |L15.102|
                  |L15.202|
0000ca  4425              ADD      r5,r5,r4              ;593
0000cc  4427              ADD      r7,r7,r4              ;594
0000ce  465a              MOV      r2,r11                ;596
0000d0  4629              MOV      r1,r5                 ;596
0000d2  4638              MOV      r0,r7                 ;596
0000d4  f7fffffe          BL       sf_AutoWritePage
0000d8  2800              CMP      r0,#0                 ;596
0000da  d146              BNE      |L15.362|
0000dc  e7c3              B        |L15.102|
                  |L15.222|
0000de  4632              MOV      r2,r6                 ;603
0000e0  4629              MOV      r1,r5                 ;603
0000e2  4638              MOV      r0,r7                 ;603
0000e4  f7fffffe          BL       sf_AutoWritePage
0000e8  bbe0              CBNZ     r0,|L15.356|
0000ea  2000              MOVS     r0,#0                 ;605
0000ec  e7bb              B        |L15.102|
                  |L15.238|
0000ee  1b30              SUBS     r0,r6,r4              ;611
0000f0  b286              UXTH     r6,r0                 ;611
0000f2  481f              LDR      r0,|L15.368|
0000f4  8b00              LDRH     r0,[r0,#0x18]         ;612  ; g_tSF
0000f6  fb96f0f0          SDIV     r0,r6,r0              ;612
0000fa  fa1ff880          UXTH     r8,r0                 ;612
0000fe  481c              LDR      r0,|L15.368|
000100  8b00              LDRH     r0,[r0,#0x18]         ;613  ; g_tSF
000102  fb96f1f0          SDIV     r1,r6,r0              ;613
000106  fb006011          MLS      r0,r0,r1,r6           ;613
00010a  fa1ff980          UXTH     r9,r0                 ;613
00010e  4622              MOV      r2,r4                 ;615
000110  4629              MOV      r1,r5                 ;615
000112  4638              MOV      r0,r7                 ;615
000114  f7fffffe          BL       sf_AutoWritePage
000118  b908              CBNZ     r0,|L15.286|
00011a  2000              MOVS     r0,#0                 ;617
00011c  e7a3              B        |L15.102|
                  |L15.286|
00011e  4425              ADD      r5,r5,r4              ;620
000120  4427              ADD      r7,r7,r4              ;621
000122  e00e              B        |L15.322|
                  |L15.292|
000124  4812              LDR      r0,|L15.368|
000126  8b02              LDRH     r2,[r0,#0x18]         ;625  ; g_tSF
000128  4629              MOV      r1,r5                 ;625
00012a  4638              MOV      r0,r7                 ;625
00012c  f7fffffe          BL       sf_AutoWritePage
000130  b908              CBNZ     r0,|L15.310|
000132  2000              MOVS     r0,#0                 ;627
000134  e797              B        |L15.102|
                  |L15.310|
000136  480e              LDR      r0,|L15.368|
000138  8b00              LDRH     r0,[r0,#0x18]         ;629  ; g_tSF
00013a  4405              ADD      r5,r5,r0              ;629
00013c  480c              LDR      r0,|L15.368|
00013e  8b00              LDRH     r0,[r0,#0x18]         ;630  ; g_tSF
000140  4407              ADD      r7,r7,r0              ;630
                  |L15.322|
000142  f1b80000          SUBS     r0,r8,#0              ;623
000146  f1a80101          SUB      r1,r8,#1              ;623
00014a  fa1ff881          UXTH     r8,r1                 ;623
00014e  d1e9              BNE      |L15.292|
000150  f1b90f00          CMP      r9,#0                 ;633
000154  d009              BEQ      |L15.362|
000156  464a              MOV      r2,r9                 ;635
000158  4629              MOV      r1,r5                 ;635
00015a  4638              MOV      r0,r7                 ;635
00015c  f7fffffe          BL       sf_AutoWritePage
000160  b900              CBNZ     r0,|L15.356|
000162  e000              B        |L15.358|
                  |L15.356|
000164  e001              B        |L15.362|
                  |L15.358|
000166  2000              MOVS     r0,#0                 ;637
000168  e77d              B        |L15.102|
                  |L15.362|
00016a  2001              MOVS     r0,#1                 ;642
00016c  e77b              B        |L15.102|
;;;644    
                          ENDP

00016e  0000              DCW      0x0000
                  |L15.368|
                          DCD      g_tSF

                          AREA ||i.sf_WriteEnable||, CODE, READONLY, ALIGN=1

                  sf_WriteEnable PROC
;;;739    */
;;;740    static void sf_WriteEnable(void)
000000  b510              PUSH     {r4,lr}
;;;741    {
;;;742    	sf_SetCS(0);									/* 使能片选 */
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       sf_SetCS
;;;743    	bsp_spiWrite1(CMD_WREN);								/* 发送命令 */
000008  2006              MOVS     r0,#6
00000a  f7fffffe          BL       bsp_spiWrite1
;;;744    	sf_SetCS(1);									/* 禁能片选 */
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       sf_SetCS
;;;745    }
000014  bd10              POP      {r4,pc}
;;;746    
                          ENDP


                          AREA ||i.sf_WriteStatus||, CODE, READONLY, ALIGN=2

                  sf_WriteStatus PROC
;;;754    */
;;;755    static void sf_WriteStatus(uint8_t _ucValue)
000000  b510              PUSH     {r4,lr}
;;;756    {
000002  4604              MOV      r4,r0
;;;757    
;;;758    	if (g_tSF.ChipID == SST25VF016B_ID)
000004  4813              LDR      r0,|L17.84|
000006  6800              LDR      r0,[r0,#0]  ; g_tSF
000008  4913              LDR      r1,|L17.88|
00000a  4288              CMP      r0,r1
00000c  d115              BNE      |L17.58|
;;;759    	{
;;;760    		/* 第1步：先使能写状态寄存器 */
;;;761    		sf_SetCS(0);									    /* 使能片选 */
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       sf_SetCS
;;;762    		bsp_spiWrite1(CMD_EWRSR);							/* 发送命令， 允许写状态寄存器 */
000014  2050              MOVS     r0,#0x50
000016  f7fffffe          BL       bsp_spiWrite1
;;;763    		sf_SetCS(1);									    /* 禁能片选 */
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       sf_SetCS
;;;764    
;;;765    		/* 第2步：再写状态寄存器 */
;;;766    		sf_SetCS(0);									    /* 使能片选 */
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       sf_SetCS
;;;767    		bsp_spiWrite1(CMD_WRSR);							/* 发送命令， 写状态寄存器 */
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       bsp_spiWrite1
;;;768    		bsp_spiWrite1(_ucValue);							/* 发送数据：状态寄存器的值 */
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       bsp_spiWrite1
;;;769    		sf_SetCS(1);									    /* 禁能片选 */
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       sf_SetCS
000038  e00b              B        |L17.82|
                  |L17.58|
;;;770    	}
;;;771    	else
;;;772    	{
;;;773    		sf_SetCS(0);									    /* 使能片选 */
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       sf_SetCS
;;;774    		bsp_spiWrite1(CMD_WRSR);							/* 发送命令， 写状态寄存器 */
000040  2001              MOVS     r0,#1
000042  f7fffffe          BL       bsp_spiWrite1
;;;775    		bsp_spiWrite1(_ucValue);							/* 发送数据：状态寄存器的值 */
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       bsp_spiWrite1
;;;776    		sf_SetCS(1);									    /* 禁能片选 */
00004c  2001              MOVS     r0,#1
00004e  f7fffffe          BL       sf_SetCS
                  |L17.82|
;;;777    	}
;;;778    }
000052  bd10              POP      {r4,pc}
;;;779    
                          ENDP

                  |L17.84|
                          DCD      g_tSF
                  |L17.88|
                          DCD      0x00bf2541

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tSF
                          %        28

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_spi_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_spi_flash_c_69e7dfca____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_spi_flash_c_69e7dfca____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_spi_flash_c_69e7dfca____REVSH|
#line 144
|__asm___15_bsp_spi_flash_c_69e7dfca____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
