; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\test_otp.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\test_otp.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\test_otp.crf ..\..\User\chip_ft\test_otp.c]
                          THUMB

                          AREA ||i.is_otp_err_1_to_0||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  is_otp_err_1_to_0 PROC
;;;225    //fsm_rt_err_efuse_1_to_0
;;;226    static uint8_t is_otp_err_1_to_0(otp_t* dest, otp_t* src)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;227    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;228        uint32_t err_cnt=0;
000008  2700              MOVS     r7,#0
;;;229     
;;;230        for(uint8_t k=0; k<32; k++)
00000a  2400              MOVS     r4,#0
00000c  e01e              B        |L1.76|
                  |L1.14|
;;;231        {
;;;232            uint8_t bit_dest = !!(dest->all &  ((uint32_t)0x01<<k));
00000e  2101              MOVS     r1,#1
000010  40a1              LSLS     r1,r1,r4
000012  6828              LDR      r0,[r5,#0]
000014  4008              ANDS     r0,r0,r1
000016  b108              CBZ      r0,|L1.28|
000018  2001              MOVS     r0,#1
00001a  e000              B        |L1.30|
                  |L1.28|
00001c  2000              MOVS     r0,#0
                  |L1.30|
00001e  4680              MOV      r8,r0
;;;233            uint8_t bit_src  = !!(src->all  &  ((uint32_t)0x01<<k));
000020  2001              MOVS     r0,#1
000022  40a0              LSLS     r0,r0,r4
000024  6831              LDR      r1,[r6,#0]
000026  4001              ANDS     r1,r1,r0
000028  b109              CBZ      r1,|L1.46|
00002a  2001              MOVS     r0,#1
00002c  e000              B        |L1.48|
                  |L1.46|
00002e  2000              MOVS     r0,#0
                  |L1.48|
000030  4681              MOV      r9,r0
;;;234            
;;;235            if(!bit_dest && bit_src)// 从1改写成0
000032  f1b80f00          CMP      r8,#0
000036  d107              BNE      |L1.72|
000038  f1b90f00          CMP      r9,#0
00003c  d004              BEQ      |L1.72|
;;;236            {
;;;237                debug("efuse 1_to_0:bit:%d \r\n", k);
00003e  4621              MOV      r1,r4
000040  a006              ADR      r0,|L1.92|
000042  f7fffffe          BL       __2printf
;;;238                err_cnt++;
000046  1c7f              ADDS     r7,r7,#1
                  |L1.72|
000048  1c60              ADDS     r0,r4,#1              ;230
00004a  b2c4              UXTB     r4,r0                 ;230
                  |L1.76|
00004c  2c20              CMP      r4,#0x20              ;230
00004e  dbde              BLT      |L1.14|
;;;239            }
;;;240        }
;;;241     
;;;242        if(err_cnt)
000050  b117              CBZ      r7,|L1.88|
;;;243        {
;;;244            return 1;
000052  2001              MOVS     r0,#1
                  |L1.84|
;;;245        }
;;;246        return 0;
;;;247    }
000054  e8bd87f0          POP      {r4-r10,pc}
                  |L1.88|
000058  2000              MOVS     r0,#0                 ;246
00005a  e7fb              B        |L1.84|
;;;248    
                          ENDP

                  |L1.92|
00005c  65667573          DCB      "efuse 1_to_0:bit:%d \r\n",0
000060  6520315f
000064  746f5f30
000068  3a626974
00006c  3a256420
000070  0d0a00  
000073  00                DCB      0

                          AREA ||i.otp_struct_printf||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  otp_struct_printf PROC
;;;251    
;;;252    void otp_struct_printf(const otp_t* efuse_data, char* str)
000000  b570              PUSH     {r4-r6,lr}
;;;253    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;254        debug("%s\r\n",str);
000006  4629              MOV      r1,r5
000008  a01a              ADR      r0,|L2.116|
00000a  f7fffffe          BL       __2printf
;;;255        debug("efuse all:%8X\r\n",  efuse_data->all);
00000e  a01b              ADR      r0,|L2.124|
000010  6821              LDR      r1,[r4,#0]
000012  f7fffffe          BL       __2printf
;;;256        debug("iref:%d(%d)\r\n",    efuse_data->iref_f  ,   efuse_data->iref_f*2);
000016  6820              LDR      r0,[r4,#0]
000018  f3c04042          UBFX     r0,r0,#17,#3
00001c  0042              LSLS     r2,r0,#1
00001e  6820              LDR      r0,[r4,#0]
000020  f3c04142          UBFX     r1,r0,#17,#3
000024  a019              ADR      r0,|L2.140|
000026  f7fffffe          BL       __2printf
;;;257        debug("bgr:%d(%d)\r\n",     efuse_data->bgr_f   ,   efuse_data->bgr_f);
00002a  8820              LDRH     r0,[r4,#0]
00002c  f3c02201          UBFX     r2,r0,#8,#2
000030  f3c02101          UBFX     r1,r0,#8,#2
000034  a019              ADR      r0,|L2.156|
000036  f7fffffe          BL       __2printf
;;;258        debug("vref:%d(%d) \r\n",   efuse_data->vref_f  ,   efuse_data->vref_f*2);
00003a  7820              LDRB     r0,[r4,#0]
00003c  f3c01003          UBFX     r0,r0,#4,#4
000040  0042              LSLS     r2,r0,#1
000042  7820              LDRB     r0,[r4,#0]
000044  f3c01103          UBFX     r1,r0,#4,#4
000048  a018              ADR      r0,|L2.172|
00004a  f7fffffe          BL       __2printf
;;;259        debug("rcl:%d(%d)\r\n",     efuse_data->rcl_f   ,   efuse_data->rcl_f*2);
00004e  8820              LDRH     r0,[r4,#0]
000050  f3c02085          UBFX     r0,r0,#10,#6
000054  0042              LSLS     r2,r0,#1
000056  8820              LDRH     r0,[r4,#0]
000058  f3c02185          UBFX     r1,r0,#10,#6
00005c  a017              ADR      r0,|L2.188|
00005e  f7fffffe          BL       __2printf
;;;260        debug("rch:%d(%d)\r\n",     efuse_data->rch_f   ,   efuse_data->rch_f*2);
000062  6820              LDR      r0,[r4,#0]
000064  0e40              LSRS     r0,r0,#25
000066  0042              LSLS     r2,r0,#1
000068  6820              LDR      r0,[r4,#0]
00006a  0e41              LSRS     r1,r0,#25
00006c  a017              ADR      r0,|L2.204|
00006e  f7fffffe          BL       __2printf
;;;261       
;;;262    }
000072  bd70              POP      {r4-r6,pc}
;;;263    
                          ENDP

                  |L2.116|
000074  25730d0a          DCB      "%s\r\n",0
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0
                  |L2.124|
00007c  65667573          DCB      "efuse all:%8X\r\n",0
000080  6520616c
000084  6c3a2538
000088  580d0a00
                  |L2.140|
00008c  69726566          DCB      "iref:%d(%d)\r\n",0
000090  3a256428
000094  2564290d
000098  0a00    
00009a  00                DCB      0
00009b  00                DCB      0
                  |L2.156|
00009c  6267723a          DCB      "bgr:%d(%d)\r\n",0
0000a0  25642825
0000a4  64290d0a
0000a8  00      
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L2.172|
0000ac  76726566          DCB      "vref:%d(%d) \r\n",0
0000b0  3a256428
0000b4  25642920
0000b8  0d0a00  
0000bb  00                DCB      0
                  |L2.188|
0000bc  72636c3a          DCB      "rcl:%d(%d)\r\n",0
0000c0  25642825
0000c4  64290d0a
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L2.204|
0000cc  7263683a          DCB      "rch:%d(%d)\r\n",0
0000d0  25642825
0000d4  64290d0a
0000d8  00      
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0

                          AREA ||i.test_efuse||, CODE, READONLY, ALIGN=2

                  test_efuse PROC
;;;19     
;;;20     fsm_rt_t test_efuse(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;21     {
;;;22         static enum
;;;23         {
;;;24             START = 0,    
;;;25             READ_EFUSE,
;;;26             FINAL_DATA_READY,        //最终写入的efuse值 准备就绪
;;;27             WRITE_EFUSE,
;;;28             READBACK_EFUSE,
;;;29         //READBACK_EFUSE, //立即读回efuse没有意义，spl程序中会进行写入再回读的操作，并返回状态给主机
;;;30         } s_tState = START;
;;;31      
;;;32         fsm_rt_t ret;
;;;33         
;;;34         switch(s_tState)
000004  48d7              LDR      r0,|L3.868|
000006  7800              LDRB     r0,[r0,#0]  ; s_tState
000008  2805              CMP      r0,#5
00000a  d20d              BCS      |L3.40|
00000c  e8dff000          TBB      [pc,r0]
000010  03090ded          DCB      0x03,0x09,0x0d,0xed
000014  ec00              DCB      0xec,0x00
;;;35         {
;;;36         case START:
;;;37             s_tState++;
000016  48d3              LDR      r0,|L3.868|
000018  7800              LDRB     r0,[r0,#0]  ; s_tState
00001a  1c40              ADDS     r0,r0,#1
00001c  49d1              LDR      r1,|L3.868|
00001e  7008              STRB     r0,[r1,#0]
;;;38             
;;;39             //break;
;;;40         
;;;41         case READ_EFUSE:
000020  bf00              NOP      
;;;42             {
;;;43                 s_tState = FINAL_DATA_READY;
000022  2002              MOVS     r0,#2
000024  49cf              LDR      r1,|L3.868|
000026  7008              STRB     r0,[r1,#0]
                  |L3.40|
;;;44     //            if(otp_read_data.all == 0)    
;;;45     //            {
;;;46     //                s_tState = WRITE_EFUSE;
;;;47     //            }
;;;48     //            else 
;;;49     //            {
;;;50     //                s_tState = START;
;;;51     //                return fsm_rt_cpl;
;;;52     //            } 
;;;53             }
;;;54             break;
000028  e193              B        |L3.850|
;;;55             
;;;56         case FINAL_DATA_READY:
;;;57             {
;;;58                 /* 1.根据trim到寄存器的值，转成otp待写入的值  */
;;;59                 
;;;60                 otp_wait_write_data.all      = trim_reg_data.all ^ reg_default.all;
00002a  48cf              LDR      r0,|L3.872|
00002c  6800              LDR      r0,[r0,#0]  ; trim_reg_data
00002e  49cf              LDR      r1,|L3.876|
000030  6809              LDR      r1,[r1,#0]  ; reg_default
000032  4048              EORS     r0,r0,r1
000034  49ce              LDR      r1,|L3.880|
000036  6008              STR      r0,[r1,#0]  ; otp_wait_write_data
;;;61                 
;;;62                 /* 2.otp已被写入的区域,则忽视 trim值,延续读到的值  并进行QC*/
;;;63                 uint8_t qc_err_cnt=0;
000038  2500              MOVS     r5,#0
;;;64                 if( otp_read_data.iref_f  || ON_BOARD_FT )  
00003a  48ce              LDR      r0,|L3.884|
00003c  6800              LDR      r0,[r0,#0]  ; otp_read_data
00003e  f3c04042          UBFX     r0,r0,#17,#3
000042  b900              CBNZ     r0,|L3.70|
000044  e025              B        |L3.146|
                  |L3.70|
;;;65                 {
;;;66                     otp_wait_write_data.iref_f  = otp_read_data.iref_f;
000046  48cb              LDR      r0,|L3.884|
000048  6800              LDR      r0,[r0,#0]  ; otp_read_data
00004a  0c41              LSRS     r1,r0,#17
00004c  48c8              LDR      r0,|L3.880|
00004e  6800              LDR      r0,[r0,#0]  ; otp_wait_write_data
000050  f3614053          BFI      r0,r1,#17,#3
000054  49c6              LDR      r1,|L3.880|
000056  6008              STR      r0,[r1,#0]  ; otp_wait_write_data
;;;67                     if(is_iref_qc_ng() && (!ON_BOARD_FT))
000058  48c7              LDR      r0,|L3.888|
00005a  6800              LDR      r0,[r0,#0]  ; default_measure
00005c  282d              CMP      r0,#0x2d
00005e  d303              BCC      |L3.104|
000060  48c5              LDR      r0,|L3.888|
000062  6800              LDR      r0,[r0,#0]  ; default_measure
000064  2837              CMP      r0,#0x37
000066  d914              BLS      |L3.146|
                  |L3.104|
000068  bf00              NOP      
;;;68                     {
;;;69                         qc_err_cnt++;
00006a  1c68              ADDS     r0,r5,#1
00006c  b2c5              UXTB     r5,r0
;;;70                         logging("fail iref QC NG:%d.%duA\r\n", default_measure.irefCurrent/10,default_measure.irefCurrent%10);
00006e  48c2              LDR      r0,|L3.888|
000070  6800              LDR      r0,[r0,#0]  ; default_measure
000072  210a              MOVS     r1,#0xa
000074  fbb0f2f1          UDIV     r2,r0,r1
000078  fb010712          MLS      r7,r1,r2,r0
00007c  48be              LDR      r0,|L3.888|
00007e  6800              LDR      r0,[r0,#0]  ; default_measure
000080  fbb0f8f1          UDIV     r8,r0,r1
000084  463b              MOV      r3,r7
000086  4642              MOV      r2,r8
000088  48bc              LDR      r0,|L3.892|
00008a  6801              LDR      r1,[r0,#0]  ; g_iRunTime
00008c  a0bc              ADR      r0,|L3.896|
00008e  f7fffffe          BL       logger_buffer_write
                  |L3.146|
;;;71                     }
;;;72                 }
;;;73                 
;;;74                 if( otp_read_data.bgr_f  )  otp_wait_write_data.bgr_f   = otp_read_data.bgr_f;
000092  48b8              LDR      r0,|L3.884|
000094  8800              LDRH     r0,[r0,#0]  ; otp_read_data
000096  f3c02001          UBFX     r0,r0,#8,#2
00009a  b140              CBZ      r0,|L3.174|
00009c  48b5              LDR      r0,|L3.884|
00009e  8800              LDRH     r0,[r0,#0]  ; otp_read_data
0000a0  0a01              LSRS     r1,r0,#8
0000a2  48b3              LDR      r0,|L3.880|
0000a4  6800              LDR      r0,[r0,#0]  ; otp_wait_write_data
0000a6  f3612009          BFI      r0,r1,#8,#2
0000aa  49b1              LDR      r1,|L3.880|
0000ac  6008              STR      r0,[r1,#0]  ; otp_wait_write_data
                  |L3.174|
;;;75                 
;;;76                 if( otp_read_data.vref_f )
0000ae  48b1              LDR      r0,|L3.884|
0000b0  7800              LDRB     r0,[r0,#0]  ; otp_read_data
0000b2  f3c01003          UBFX     r0,r0,#4,#4
0000b6  b1e8              CBZ      r0,|L3.244|
;;;77                 {
;;;78                     otp_wait_write_data.vref_f  = otp_read_data.vref_f;
0000b8  48ae              LDR      r0,|L3.884|
0000ba  7800              LDRB     r0,[r0,#0]  ; otp_read_data
0000bc  0901              LSRS     r1,r0,#4
0000be  48ac              LDR      r0,|L3.880|
0000c0  6800              LDR      r0,[r0,#0]  ; otp_wait_write_data
0000c2  f3611007          BFI      r0,r1,#4,#4
0000c6  49aa              LDR      r1,|L3.880|
0000c8  6008              STR      r0,[r1,#0]  ; otp_wait_write_data
;;;79                     if(is_vref_qc_ng())
0000ca  48ab              LDR      r0,|L3.888|
0000cc  6880              LDR      r0,[r0,#8]  ; default_measure
0000ce  f2405102          MOV      r1,#0x502
0000d2  4288              CMP      r0,r1
0000d4  d305              BCC      |L3.226|
0000d6  48a8              LDR      r0,|L3.888|
0000d8  6880              LDR      r0,[r0,#8]  ; default_measure
0000da  f2405189          MOV      r1,#0x589
0000de  4288              CMP      r0,r1
0000e0  d908              BLS      |L3.244|
                  |L3.226|
;;;80                     {
;;;81                         qc_err_cnt++;
0000e2  1c68              ADDS     r0,r5,#1
0000e4  b2c5              UXTB     r5,r0
;;;82                         logging("fail vref QC NG:%dmv\r\n", default_measure.vrefVolt);
0000e6  48a4              LDR      r0,|L3.888|
0000e8  6882              LDR      r2,[r0,#8]  ; default_measure
0000ea  48a4              LDR      r0,|L3.892|
0000ec  6801              LDR      r1,[r0,#0]  ; g_iRunTime
0000ee  a0ac              ADR      r0,|L3.928|
0000f0  f7fffffe          BL       logger_buffer_write
                  |L3.244|
;;;83                     }
;;;84                 }                
;;;85                 
;;;86                 if(otp_read_data.lpvdd_f) 
0000f4  489f              LDR      r0,|L3.884|
0000f6  7800              LDRB     r0,[r0,#0]  ; otp_read_data
0000f8  f3c00042          UBFX     r0,r0,#1,#3
0000fc  b1e8              CBZ      r0,|L3.314|
;;;87                 {
;;;88                     otp_wait_write_data.lpvdd_f   = otp_read_data.lpvdd_f;
0000fe  489d              LDR      r0,|L3.884|
000100  7800              LDRB     r0,[r0,#0]  ; otp_read_data
000102  0841              LSRS     r1,r0,#1
000104  489a              LDR      r0,|L3.880|
000106  6800              LDR      r0,[r0,#0]  ; otp_wait_write_data
000108  f3610043          BFI      r0,r1,#1,#3
00010c  4998              LDR      r1,|L3.880|
00010e  6008              STR      r0,[r1,#0]  ; otp_wait_write_data
;;;89                     if(is_vref_qc_ng())
000110  4899              LDR      r0,|L3.888|
000112  6880              LDR      r0,[r0,#8]  ; default_measure
000114  f2405102          MOV      r1,#0x502
000118  4288              CMP      r0,r1
00011a  d305              BCC      |L3.296|
00011c  4896              LDR      r0,|L3.888|
00011e  6880              LDR      r0,[r0,#8]  ; default_measure
000120  f2405189          MOV      r1,#0x589
000124  4288              CMP      r0,r1
000126  d908              BLS      |L3.314|
                  |L3.296|
;;;90                     {
;;;91                         qc_err_cnt++;
000128  1c68              ADDS     r0,r5,#1
00012a  b2c5              UXTB     r5,r0
;;;92                         logging("fail lpvdd QC NG:%dmv\r\n", default_measure.lpvddVolt);
00012c  4892              LDR      r0,|L3.888|
00012e  68c2              LDR      r2,[r0,#0xc]  ; default_measure
000130  4892              LDR      r0,|L3.892|
000132  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000134  a0a1              ADR      r0,|L3.956|
000136  f7fffffe          BL       logger_buffer_write
                  |L3.314|
;;;93                     }
;;;94                 }
;;;95                 
;;;96                 if(otp_read_data.rcl_f)   
00013a  488e              LDR      r0,|L3.884|
00013c  8800              LDRH     r0,[r0,#0]  ; otp_read_data
00013e  f3c02085          UBFX     r0,r0,#10,#6
000142  b1e8              CBZ      r0,|L3.384|
;;;97                 {
;;;98                     otp_wait_write_data.rcl_f     = otp_read_data.rcl_f;
000144  488b              LDR      r0,|L3.884|
000146  8800              LDRH     r0,[r0,#0]  ; otp_read_data
000148  0a81              LSRS     r1,r0,#10
00014a  4889              LDR      r0,|L3.880|
00014c  6800              LDR      r0,[r0,#0]  ; otp_wait_write_data
00014e  f361208f          BFI      r0,r1,#10,#6
000152  4987              LDR      r1,|L3.880|
000154  6008              STR      r0,[r1,#0]  ; otp_wait_write_data
;;;99                     if(is_rcl_qc_ng())
000156  4888              LDR      r0,|L3.888|
000158  6900              LDR      r0,[r0,#0x10]  ; default_measure
00015a  f24761c0          MOV      r1,#0x76c0
00015e  4288              CMP      r0,r1
000160  d305              BCC      |L3.366|
000162  4885              LDR      r0,|L3.888|
000164  6900              LDR      r0,[r0,#0x10]  ; default_measure
000166  f2483140          MOV      r1,#0x8340
00016a  4288              CMP      r0,r1
00016c  d908              BLS      |L3.384|
                  |L3.366|
;;;100                    {
;;;101                        qc_err_cnt++;
00016e  1c68              ADDS     r0,r5,#1
000170  b2c5              UXTB     r5,r0
;;;102                        logging("fail rcl QC NG:%dhz\r\n", default_measure.rclFreq);
000172  4881              LDR      r0,|L3.888|
000174  6902              LDR      r2,[r0,#0x10]  ; default_measure
000176  4881              LDR      r0,|L3.892|
000178  6801              LDR      r1,[r0,#0]  ; g_iRunTime
00017a  a098              ADR      r0,|L3.988|
00017c  f7fffffe          BL       logger_buffer_write
                  |L3.384|
;;;103                    }
;;;104                }
;;;105                
;;;106                if(otp_read_data.rch_f)
000180  487c              LDR      r0,|L3.884|
000182  6800              LDR      r0,[r0,#0]  ; otp_read_data
000184  0e40              LSRS     r0,r0,#25
000186  b1d8              CBZ      r0,|L3.448|
;;;107                {
;;;108                    otp_wait_write_data.rch_f     = otp_read_data.rch_f;
000188  487a              LDR      r0,|L3.884|
00018a  6800              LDR      r0,[r0,#0]  ; otp_read_data
00018c  0e41              LSRS     r1,r0,#25
00018e  4878              LDR      r0,|L3.880|
000190  6800              LDR      r0,[r0,#0]  ; otp_wait_write_data
000192  f361605f          BFI      r0,r1,#25,#7
000196  4976              LDR      r1,|L3.880|
000198  6008              STR      r0,[r1,#0]  ; otp_wait_write_data
;;;109                    if(is_rch_qc_ng())
00019a  4877              LDR      r0,|L3.888|
00019c  6940              LDR      r0,[r0,#0x14]  ; default_measure
00019e  4996              LDR      r1,|L3.1016|
0001a0  4288              CMP      r0,r1
0001a2  d304              BCC      |L3.430|
0001a4  4874              LDR      r0,|L3.888|
0001a6  6940              LDR      r0,[r0,#0x14]  ; default_measure
0001a8  4994              LDR      r1,|L3.1020|
0001aa  4288              CMP      r0,r1
0001ac  d908              BLS      |L3.448|
                  |L3.430|
;;;110                    {
;;;111                        qc_err_cnt++;
0001ae  1c68              ADDS     r0,r5,#1
0001b0  b2c5              UXTB     r5,r0
;;;112                        logging("fail rch QC NG:%dhz\r\n", default_measure.rchFreq);
0001b2  4871              LDR      r0,|L3.888|
0001b4  6942              LDR      r2,[r0,#0x14]  ; default_measure
0001b6  4871              LDR      r0,|L3.892|
0001b8  6801              LDR      r1,[r0,#0]  ; g_iRunTime
0001ba  a091              ADR      r0,|L3.1024|
0001bc  f7fffffe          BL       logger_buffer_write
                  |L3.448|
;;;113                    }
;;;114                }                
;;;115                if(qc_err_cnt)
0001c0  b115              CBZ      r5,|L3.456|
;;;116                {
;;;117                    ret =  fsm_rt_err_tested_chip_qc ;
0001c2  f06f0645          MVN      r6,#0x45
;;;118                    goto fail;
0001c6  e0c7              B        |L3.856|
                  |L3.456|
;;;119                }
;;;120                
;;;121                /* 3.其他的配置信息如果需要改写 直接报错 */
;;;122                //if(otp_read_data.i2c_irq_pu_en_f)   
;;;123                
;;;124                uint8_t err_cnt=0;
0001c8  2400              MOVS     r4,#0
;;;125                if( otp_read_data.asu_dev_addr_f && !custommer_data.asu_dev_addr_f  ) 
0001ca  486a              LDR      r0,|L3.884|
0001cc  6800              LDR      r0,[r0,#0]  ; otp_read_data
0001ce  f3c06000          UBFX     r0,r0,#24,#1
0001d2  b170              CBZ      r0,|L3.498|
0001d4  4891              LDR      r0,|L3.1052|
0001d6  6800              LDR      r0,[r0,#0]  ; custommer_data
0001d8  f3c06000          UBFX     r0,r0,#24,#1
0001dc  b948              CBNZ     r0,|L3.498|
;;;126                {
;;;127                    err_cnt++;
0001de  1c60              ADDS     r0,r4,#1
0001e0  b2c4              UXTB     r4,r0
;;;128                    logging("fail: asu_dev_addr_f conflict\r\n");
0001e2  4866              LDR      r0,|L3.892|
0001e4  6801              LDR      r1,[r0,#0]  ; g_iRunTime
0001e6  e001              B        |L3.492|
0001e8  e093              B        |L3.786|
0001ea  e08b              B        |L3.772|
                  |L3.492|
0001ec  a08c              ADR      r0,|L3.1056|
0001ee  f7fffffe          BL       logger_buffer_write
                  |L3.498|
;;;129                }
;;;130                if( otp_read_data.prst_ctl_vs_f && !custommer_data.prst_ctl_vs_f  ) 
0001f2  4860              LDR      r0,|L3.884|
0001f4  6800              LDR      r0,[r0,#0]  ; otp_read_data
0001f6  f3c050c0          UBFX     r0,r0,#23,#1
0001fa  b158              CBZ      r0,|L3.532|
0001fc  4887              LDR      r0,|L3.1052|
0001fe  6800              LDR      r0,[r0,#0]  ; custommer_data
000200  f3c050c0          UBFX     r0,r0,#23,#1
000204  b930              CBNZ     r0,|L3.532|
;;;131                {
;;;132                    err_cnt++;
000206  1c60              ADDS     r0,r4,#1
000208  b2c4              UXTB     r4,r0
;;;133                    logging("fail: prst_ctl_vs_f conflict\r\n");
00020a  485c              LDR      r0,|L3.892|
00020c  6801              LDR      r1,[r0,#0]  ; g_iRunTime
00020e  a08e              ADR      r0,|L3.1096|
000210  f7fffffe          BL       logger_buffer_write
                  |L3.532|
;;;134                }
;;;135                if( otp_read_data.prst_ctl_en_f && !custommer_data.prst_ctl_en_f   ) 
000214  4857              LDR      r0,|L3.884|
000216  6800              LDR      r0,[r0,#0]  ; otp_read_data
000218  f3c05080          UBFX     r0,r0,#22,#1
00021c  b158              CBZ      r0,|L3.566|
00021e  487f              LDR      r0,|L3.1052|
000220  6800              LDR      r0,[r0,#0]  ; custommer_data
000222  f3c05080          UBFX     r0,r0,#22,#1
000226  b930              CBNZ     r0,|L3.566|
;;;136                {
;;;137                    err_cnt++;
000228  1c60              ADDS     r0,r4,#1
00022a  b2c4              UXTB     r4,r0
;;;138                    logging("fail: prst_ctl_en_f  conflict\r\n");
00022c  4853              LDR      r0,|L3.892|
00022e  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000230  a08e              ADR      r0,|L3.1132|
000232  f7fffffe          BL       logger_buffer_write
                  |L3.566|
;;;139                }
;;;140                if( otp_read_data.prst_ctl_pol_f && !custommer_data.prst_ctl_pol_f  ) 
000236  484f              LDR      r0,|L3.884|
000238  6800              LDR      r0,[r0,#0]  ; otp_read_data
00023a  f3c05001          UBFX     r0,r0,#20,#2
00023e  b158              CBZ      r0,|L3.600|
000240  4876              LDR      r0,|L3.1052|
000242  6800              LDR      r0,[r0,#0]  ; custommer_data
000244  f3c05001          UBFX     r0,r0,#20,#2
000248  b930              CBNZ     r0,|L3.600|
;;;141                {
;;;142                    err_cnt++;
00024a  1c60              ADDS     r0,r4,#1
00024c  b2c4              UXTB     r4,r0
;;;143                    logging("fail: prst_ctl_pol_f conflict\r\n");
00024e  484b              LDR      r0,|L3.892|
000250  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000252  a090              ADR      r0,|L3.1172|
000254  f7fffffe          BL       logger_buffer_write
                  |L3.600|
;;;144                }
;;;145                if( otp_read_data.prst_ctl_pe_f && !custommer_data.prst_ctl_pe_f  ) 
000258  4846              LDR      r0,|L3.884|
00025a  6800              LDR      r0,[r0,#0]  ; otp_read_data
00025c  f3c04000          UBFX     r0,r0,#16,#1
000260  b158              CBZ      r0,|L3.634|
000262  486e              LDR      r0,|L3.1052|
000264  6800              LDR      r0,[r0,#0]  ; custommer_data
000266  f3c04000          UBFX     r0,r0,#16,#1
00026a  b930              CBNZ     r0,|L3.634|
;;;146                {
;;;147                    err_cnt++;
00026c  1c60              ADDS     r0,r4,#1
00026e  b2c4              UXTB     r4,r0
;;;148                    logging("fail: prst_ctl_pe_f conflict\r\n");
000270  4842              LDR      r0,|L3.892|
000272  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000274  a091              ADR      r0,|L3.1212|
000276  f7fffffe          BL       logger_buffer_write
                  |L3.634|
;;;149                }
;;;150                if( otp_read_data.i2c_irq_pu_en_f && !custommer_data.i2c_irq_pu_en_f  ) 
00027a  483e              LDR      r0,|L3.884|
00027c  7800              LDRB     r0,[r0,#0]  ; otp_read_data
00027e  f0000001          AND      r0,r0,#1
000282  b158              CBZ      r0,|L3.668|
000284  4865              LDR      r0,|L3.1052|
000286  7800              LDRB     r0,[r0,#0]  ; custommer_data
000288  f0000001          AND      r0,r0,#1
00028c  b930              CBNZ     r0,|L3.668|
;;;151                {
;;;152                    err_cnt++;
00028e  1c60              ADDS     r0,r4,#1
000290  b2c4              UXTB     r4,r0
;;;153                    logging("fail: i2c_irq_pu_en_f conflict\r\n");
000292  483a              LDR      r0,|L3.892|
000294  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000296  a092              ADR      r0,|L3.1248|
000298  f7fffffe          BL       logger_buffer_write
                  |L3.668|
;;;154                }
;;;155               
;;;156                if(err_cnt)
00029c  b114              CBZ      r4,|L3.676|
;;;157                {
;;;158                    ret =  fsm_rt_err_custommer_conflict;
00029e  f06f0656          MVN      r6,#0x56
;;;159                    goto fail;
0002a2  e059              B        |L3.856|
                  |L3.676|
;;;160                }
;;;161     
;;;162                otp_wait_write_data.all |= custommer_data.all;//加入用户配置
0002a4  4832              LDR      r0,|L3.880|
0002a6  6800              LDR      r0,[r0,#0]  ; otp_wait_write_data
0002a8  495c              LDR      r1,|L3.1052|
0002aa  6809              LDR      r1,[r1,#0]  ; custommer_data
0002ac  4308              ORRS     r0,r0,r1
0002ae  4930              LDR      r1,|L3.880|
0002b0  6008              STR      r0,[r1,#0]  ; otp_wait_write_data
;;;163                
;;;164                otp_final_write_data.all = otp_wait_write_data.all;
0002b2  4608              MOV      r0,r1
0002b4  6800              LDR      r0,[r0,#0]  ; otp_wait_write_data
0002b6  4994              LDR      r1,|L3.1288|
0002b8  6008              STR      r0,[r1,#0]  ; otp_final_write_data
;;;165                
;;;166          
;;;167                if( is_otp_err_1_to_0(&otp_final_write_data,  &otp_read_data) ) //检测待写入OTP的数是否存在错误： 将OTP从1改成0的情况
0002ba  492e              LDR      r1,|L3.884|
0002bc  4892              LDR      r0,|L3.1288|
0002be  f7fffffe          BL       is_otp_err_1_to_0
0002c2  b110              CBZ      r0,|L3.714|
;;;168                {
;;;169                    ret = fsm_rt_err_efuse_1_to_0;   
0002c4  f06f063b          MVN      r6,#0x3b
;;;170                    goto fail;
0002c8  e046              B        |L3.856|
                  |L3.714|
;;;171                }
;;;172                if(otp_final_write_data.all == otp_read_data.all) 
0002ca  488f              LDR      r0,|L3.1288|
0002cc  6800              LDR      r0,[r0,#0]  ; otp_final_write_data
0002ce  4929              LDR      r1,|L3.884|
0002d0  6809              LDR      r1,[r1,#0]  ; otp_read_data
0002d2  4288              CMP      r0,r1
0002d4  d109              BNE      |L3.746|
;;;173                {
;;;174                    
;;;175                    logging("SUCCESS otp no need update!\r\n");
0002d6  4829              LDR      r0,|L3.892|
0002d8  6801              LDR      r1,[r0,#0]  ; g_iRunTime
0002da  a08c              ADR      r0,|L3.1292|
0002dc  f7fffffe          BL       logger_buffer_write
;;;176                    s_tState = START;
0002e0  2000              MOVS     r0,#0
0002e2  4920              LDR      r1,|L3.868|
0002e4  7008              STRB     r0,[r1,#0]
                  |L3.742|
;;;177                    return fsm_rt_cpl;
;;;178                }
;;;179                logging(" [ WRITE ]read=%08X  write:%08X\r\n",otp_read_data.all, otp_final_write_data.all);
;;;180                
;;;181                s_tState = WRITE_EFUSE;
;;;182            }
;;;183            break;
;;;184            
;;;185        case WRITE_EFUSE:
;;;186            {
;;;187    //            for(uint8_t i=10;i!=0;i--)
;;;188                {
;;;189                    otp_write(&otp_final_write_data);
;;;190                    //delay_ms(5);
;;;191                }
;;;192                
;;;193                s_tState = READBACK_EFUSE;
;;;194            }
;;;195            break;
;;;196            
;;;197        case READBACK_EFUSE:
;;;198            {
;;;199                otp_read(&otp_read_data);
;;;200                set_apple_disable_otp();
;;;201                if(otp_read_data.all != otp_final_write_data.all)
;;;202                {
;;;203                    logging("[ READBACK ] fail: read=%8X  write:%8X\r\n",otp_read_data.all, otp_final_write_data.all);
;;;204                    ret = fsm_rt_err_efuse_readback;
;;;205                    goto fail;
;;;206                }
;;;207                logging("SUCCESS otp update!\r\n");
;;;208                s_tState = START;
;;;209                return fsm_rt_cpl;
;;;210            }
;;;211            //break;        
;;;212        }
;;;213        
;;;214        return fsm_rt_on_going;
;;;215        
;;;216        fail:
;;;217        
;;;218        s_tState = START;
;;;219        return ret;
;;;220    }
0002e6  e8bd81f0          POP      {r4-r8,pc}
                  |L3.746|
0002ea  4887              LDR      r0,|L3.1288|
0002ec  6803              LDR      r3,[r0,#0]            ;179  ; otp_final_write_data
0002ee  4821              LDR      r0,|L3.884|
0002f0  6802              LDR      r2,[r0,#0]            ;179  ; otp_read_data
0002f2  4822              LDR      r0,|L3.892|
0002f4  6801              LDR      r1,[r0,#0]            ;179  ; g_iRunTime
0002f6  a08e              ADR      r0,|L3.1328|
0002f8  f7fffffe          BL       logger_buffer_write
0002fc  2003              MOVS     r0,#3                 ;181
0002fe  4919              LDR      r1,|L3.868|
000300  7008              STRB     r0,[r1,#0]            ;181
000302  e026              B        |L3.850|
                  |L3.772|
000304  4880              LDR      r0,|L3.1288|
000306  f7fffffe          BL       otp_write
00030a  2004              MOVS     r0,#4                 ;193
00030c  4915              LDR      r1,|L3.868|
00030e  7008              STRB     r0,[r1,#0]            ;193
000310  e01f              B        |L3.850|
                  |L3.786|
000312  4818              LDR      r0,|L3.884|
000314  f7fffffe          BL       otp_read
000318  f7fffffe          BL       set_apple_disable_otp
00031c  4815              LDR      r0,|L3.884|
00031e  6800              LDR      r0,[r0,#0]            ;201  ; otp_read_data
000320  4979              LDR      r1,|L3.1288|
000322  6809              LDR      r1,[r1,#0]            ;201  ; otp_final_write_data
000324  4288              CMP      r0,r1                 ;201
000326  d00b              BEQ      |L3.832|
000328  4877              LDR      r0,|L3.1288|
00032a  6803              LDR      r3,[r0,#0]            ;203  ; otp_final_write_data
00032c  4811              LDR      r0,|L3.884|
00032e  6802              LDR      r2,[r0,#0]            ;203  ; otp_read_data
000330  4812              LDR      r0,|L3.892|
000332  6801              LDR      r1,[r0,#0]            ;203  ; g_iRunTime
000334  a088              ADR      r0,|L3.1368|
000336  f7fffffe          BL       logger_buffer_write
00033a  f06f0650          MVN      r6,#0x50              ;204
00033e  e00b              B        |L3.856|
                  |L3.832|
000340  480e              LDR      r0,|L3.892|
000342  6801              LDR      r1,[r0,#0]            ;207  ; g_iRunTime
000344  a090              ADR      r0,|L3.1416|
000346  f7fffffe          BL       logger_buffer_write
00034a  2000              MOVS     r0,#0                 ;208
00034c  4905              LDR      r1,|L3.868|
00034e  7008              STRB     r0,[r1,#0]            ;208
000350  e7c9              B        |L3.742|
                  |L3.850|
000352  bf00              NOP                            ;54
000354  2001              MOVS     r0,#1                 ;214
000356  e7c6              B        |L3.742|
                  |L3.856|
000358  2000              MOVS     r0,#0                 ;218
00035a  4902              LDR      r1,|L3.868|
00035c  7008              STRB     r0,[r1,#0]            ;218
00035e  4630              MOV      r0,r6                 ;219
000360  e7c1              B        |L3.742|
;;;221     
                          ENDP

000362  0000              DCW      0x0000
                  |L3.868|
                          DCD      s_tState
                  |L3.872|
                          DCD      trim_reg_data
                  |L3.876|
                          DCD      reg_default
                  |L3.880|
                          DCD      otp_wait_write_data
                  |L3.884|
                          DCD      otp_read_data
                  |L3.888|
                          DCD      default_measure
                  |L3.892|
                          DCD      g_iRunTime
                  |L3.896|
000380  5b253864          DCB      "[%8d]fail iref QC NG:%d.%duA\r\n",0
000384  5d666169
000388  6c206972
00038c  65662051
000390  43204e47
000394  3a25642e
000398  25647541
00039c  0d0a00  
00039f  00                DCB      0
                  |L3.928|
0003a0  5b253864          DCB      "[%8d]fail vref QC NG:%dmv\r\n",0
0003a4  5d666169
0003a8  6c207672
0003ac  65662051
0003b0  43204e47
0003b4  3a25646d
0003b8  760d0a00
                  |L3.956|
0003bc  5b253864          DCB      "[%8d]fail lpvdd QC NG:%dmv\r\n",0
0003c0  5d666169
0003c4  6c206c70
0003c8  76646420
0003cc  5143204e
0003d0  473a2564
0003d4  6d760d0a
0003d8  00      
0003d9  00                DCB      0
0003da  00                DCB      0
0003db  00                DCB      0
                  |L3.988|
0003dc  5b253864          DCB      "[%8d]fail rcl QC NG:%dhz\r\n",0
0003e0  5d666169
0003e4  6c207263
0003e8  6c205143
0003ec  204e473a
0003f0  2564687a
0003f4  0d0a00  
0003f7  00                DCB      0
                  |L3.1016|
                          DCD      0x04b87f00
                  |L3.1020|
                          DCD      0x04d0e900
                  |L3.1024|
000400  5b253864          DCB      "[%8d]fail rch QC NG:%dhz\r\n",0
000404  5d666169
000408  6c207263
00040c  68205143
000410  204e473a
000414  2564687a
000418  0d0a00  
00041b  00                DCB      0
                  |L3.1052|
                          DCD      custommer_data
                  |L3.1056|
000420  5b253864          DCB      "[%8d]fail: asu_dev_addr_f conflict\r\n",0
000424  5d666169
000428  6c3a2061
00042c  73755f64
000430  65765f61
000434  6464725f
000438  6620636f
00043c  6e666c69
000440  63740d0a
000444  00      
000445  00                DCB      0
000446  00                DCB      0
000447  00                DCB      0
                  |L3.1096|
000448  5b253864          DCB      "[%8d]fail: prst_ctl_vs_f conflict\r\n",0
00044c  5d666169
000450  6c3a2070
000454  7273745f
000458  63746c5f
00045c  76735f66
000460  20636f6e
000464  666c6963
000468  740d0a00
                  |L3.1132|
00046c  5b253864          DCB      "[%8d]fail: prst_ctl_en_f  conflict\r\n",0
000470  5d666169
000474  6c3a2070
000478  7273745f
00047c  63746c5f
000480  656e5f66
000484  2020636f
000488  6e666c69
00048c  63740d0a
000490  00      
000491  00                DCB      0
000492  00                DCB      0
000493  00                DCB      0
                  |L3.1172|
000494  5b253864          DCB      "[%8d]fail: prst_ctl_pol_f conflict\r\n",0
000498  5d666169
00049c  6c3a2070
0004a0  7273745f
0004a4  63746c5f
0004a8  706f6c5f
0004ac  6620636f
0004b0  6e666c69
0004b4  63740d0a
0004b8  00      
0004b9  00                DCB      0
0004ba  00                DCB      0
0004bb  00                DCB      0
                  |L3.1212|
0004bc  5b253864          DCB      "[%8d]fail: prst_ctl_pe_f conflict\r\n",0
0004c0  5d666169
0004c4  6c3a2070
0004c8  7273745f
0004cc  63746c5f
0004d0  70655f66
0004d4  20636f6e
0004d8  666c6963
0004dc  740d0a00
                  |L3.1248|
0004e0  5b253864          DCB      "[%8d]fail: i2c_irq_pu_en_f conflict\r\n",0
0004e4  5d666169
0004e8  6c3a2069
0004ec  32635f69
0004f0  72715f70
0004f4  755f656e
0004f8  5f662063
0004fc  6f6e666c
000500  6963740d
000504  0a00    
000506  00                DCB      0
000507  00                DCB      0
                  |L3.1288|
                          DCD      otp_final_write_data
                  |L3.1292|
00050c  5b253864          DCB      "[%8d]SUCCESS otp no need update!\r\n",0
000510  5d535543
000514  43455353
000518  206f7470
00051c  206e6f20
000520  6e656564
000524  20757064
000528  61746521
00052c  0d0a00  
00052f  00                DCB      0
                  |L3.1328|
000530  5b253864          DCB      "[%8d] [ WRITE ]read=%08X  write:%08X\r\n",0
000534  5d205b20
000538  57524954
00053c  45205d72
000540  6561643d
000544  25303858
000548  20207772
00054c  6974653a
000550  25303858
000554  0d0a00  
000557  00                DCB      0
                  |L3.1368|
000558  5b253864          DCB      "[%8d][ READBACK ] fail: read=%8X  write:%8X\r\n",0
00055c  5d5b2052
000560  45414442
000564  41434b20
000568  5d206661
00056c  696c3a20
000570  72656164
000574  3d253858
000578  20207772
00057c  6974653a
000580  2538580d
000584  0a00    
000586  00                DCB      0
000587  00                DCB      0
                  |L3.1416|
000588  5b253864          DCB      "[%8d]SUCCESS otp update!\r\n",0
00058c  5d535543
000590  43455353
000594  206f7470
000598  20757064
00059c  61746521
0005a0  0d0a00  
0005a3  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  reg_default
000000  885e0858          DCB      0x88,0x5e,0x08,0x58

                          AREA ||.data||, DATA, ALIGN=2

                  otp_final_write_data
                          DCD      0x00000000
                  otp_wait_write_data
                          DCD      0x00000000
                  s_tState
000008  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\chip_ft\\test_otp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_test_otp_c_3031474c____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_test_otp_c_3031474c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_test_otp_c_3031474c____REVSH|
#line 144
|__asm___10_test_otp_c_3031474c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
