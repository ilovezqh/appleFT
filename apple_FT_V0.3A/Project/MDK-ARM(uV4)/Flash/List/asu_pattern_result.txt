; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\asu_pattern_result.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\asu_pattern_result.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\BERRY_TWI -I..\..\User\berry_ft -I..\..\User\ft_support -I..\..\User\berry_test -I..\..\User\factory_test -I..\..\User\emenu -I..\..\User\kiwi_ft -I..\..\User\kiwi_ft\spv40 -I..\..\User\kiwi_ft\spv40\peripheral -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\kiwi_ft -I..\..\User\MultiButton-1.1.0 -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.16.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\asu_pattern_result.crf ..\..\User\kiwi_ft\asu_pattern_result.c]
                          THUMB

                          AREA ||i.asu_pattern_result_state||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  asu_pattern_result_state PROC
;;;84     
;;;85     fsm_rt_t asu_pattern_result_state(void)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;86     {
;;;87         static enum
;;;88         {
;;;89             START = 0,
;;;90             OSC_AUDIO_TRIM,
;;;91      
;;;92             TEST_IO_S1,
;;;93             TEST_IO_S2,
;;;94             TEST_I2C,
;;;95             TEST_UART,
;;;96             TEST_EN,
;;;97             TEST_QUERY,
;;;98             READ_EFUSE, 
;;;99             WRITE_EFUSE, 
;;;100            IS_KIWI_RUN_PATTERN_CPL,
;;;101        } s_tState = START;
;;;102        fsm_rt_t ret;
;;;103        static uint8_t read_twice_flg=0;
;;;104        static uint8_t test_start_flg;
;;;105        static uint8_t test_item;
;;;106    
;;;107        switch(s_tState)
000004  48df              LDR      r0,|L1.900|
000006  7800              LDRB     r0,[r0,#0]  ; s_tState
000008  280b              CMP      r0,#0xb
00000a  d248              BCS      |L1.158|
00000c  e8dff000          TBB      [pc,r0]
000010  061e485a          DCB      0x06,0x1e,0x48,0x5a
000014  6c7e909f          DCB      0x6c,0x7e,0x90,0x9f
000018  f7f6f500          DCB      0xf7,0xf6,0xf5,0x00
;;;108        {
;;;109        case START:
;;;110            if(!is_test_item(run_kiwi_pattern_item)) return fsm_rt_cpl;
00001c  2004              MOVS     r0,#4
00001e  f7fffffe          BL       is_test_item
000022  b910              CBNZ     r0,|L1.42|
000024  2000              MOVS     r0,#0
                  |L1.38|
;;;111            test_en.all = 0;
;;;112            read_twice_flg = 0;
;;;113            test_success.all = 0;
;;;114            test_start_flg = 0;
;;;115            test_item = 0;
;;;116            s_tState++;
;;;117            //break;
;;;118    
;;;119        case OSC_AUDIO_TRIM:
;;;120            {
;;;121                extern fsm_rt_t osc_audio_trim(void);
;;;122               
;;;123                if( is_test_item(cmu_osc_audio_item) )    
;;;124                {
;;;125                    do
;;;126                    {
;;;127                        ret = osc_audio_trim();
;;;128                    }while(ret == fsm_rt_on_going);
;;;129    
;;;130                    if(ret != fsm_rt_cpl)
;;;131                    {
;;;132                        s_tState = START;
;;;133                        return ret;
;;;134                    }
;;;135                    logging("SUCCESS Oaduio:%d,%d(%d,%d)\r\n", trim_result.osc_audio_trim_val, 
;;;136                                    trim_result.osc_audio_trim_freq,
;;;137                                    trim_result.osc_audio_trim_default,
;;;138                                    trim_result.osc_audio_trim_freq_default);
;;;139                } 
;;;140                else 
;;;141                {
;;;142                    logging("INFO skip Oaudio!\r\n");
;;;143                }
;;;144                
;;;145       
;;;146                #if TEST_IO_EN
;;;147                s_tState = TEST_QUERY;
;;;148                #else 
;;;149                s_tState = READ_EFUSE;
;;;150                #endif
;;;151                
;;;152               
;;;153                
;;;154            }
;;;155            break;
;;;156            
;;;157        case TEST_IO_S1:
;;;158            {
;;;159                test_en.io_s1 = 1;  
;;;160                bsp_ch440r_ctrl_ex(CH440R_EX_CTRL_IO_S1);
;;;161                test_item   = s_tState;  
;;;162                s_tState    = TEST_EN;
;;;163            }
;;;164            break;
;;;165            
;;;166        case TEST_IO_S2:
;;;167            {
;;;168                test_en.io_s2 = 1;   
;;;169                bsp_ch440r_ctrl_ex(CH440R_EX_CTRL_IO_S2);
;;;170                test_item   = s_tState; 
;;;171                s_tState    = TEST_EN;
;;;172            }
;;;173            break;
;;;174            
;;;175        case TEST_I2C:
;;;176            {
;;;177                test_en.i2c = 1;
;;;178                bsp_ch440r_ctrl_ex(CH440R_EX_CTRL_I2C);
;;;179                test_item   = s_tState; 
;;;180                s_tState    = TEST_EN;
;;;181            }
;;;182            break;
;;;183            
;;;184        case TEST_UART:
;;;185            {
;;;186                test_en.uart = 1;
;;;187                bsp_ch440r_ctrl_ex(CH440R_EX_CTRL_UART);
;;;188                test_item   = s_tState;
;;;189                s_tState    = TEST_EN;
;;;190            }
;;;191            break;
;;;192            
;;;193        case TEST_EN:
;;;194            do
;;;195            { 
;;;196                ret = online_update_sm(0xF0,4,(uint8_t*)&test_en);
;;;197            }while(ret == fsm_rt_on_going);
;;;198            if(ret != fsm_rt_cpl )
;;;199            {
;;;200                goto fail;
;;;201            }
;;;202            s_tState = TEST_QUERY;
;;;203            break;
;;;204                
;;;205       
;;;206        case TEST_QUERY: //查询测试结果
;;;207            {
;;;208                if(test_item == 0) //初始
;;;209                {
;;;210                    s_tState = TEST_IO_S1;
;;;211                }
;;;212                else
;;;213                {
;;;214                    
;;;215                    do
;;;216                    { 
;;;217                       ret = online_update_sm(0xF1,0,NULL);
;;;218                    }while(ret == fsm_rt_on_going);
;;;219                    if(ret != fsm_rt_cpl ) { goto fail; }
;;;220     
;;;221                    uint16_t test_done = msg_recv.msg_body.content[0] | 
;;;222                                        (msg_recv.msg_body.content[1] << 8);
;;;223                    uint16_t test_fail = msg_recv.msg_body.content[2] | 
;;;224                                        (msg_recv.msg_body.content[3] << 8);
;;;225                    uint32_t test_fail_info = msg_recv.msg_body.content[4]        | 
;;;226                                             (msg_recv.msg_body.content[5] << 8)  |
;;;227                                             (msg_recv.msg_body.content[6] << 16) |
;;;228                                             (msg_recv.msg_body.content[7] << 24);
;;;229                    
;;;230                    
;;;231                    if((test_item == TEST_IO_S1)   && (test_done & 0x01))
;;;232                    {
;;;233                        s_tState = TEST_IO_S2;
;;;234                        if(test_fail & 0x01)
;;;235                        {
;;;236                            ret = fsm_rt_err_io_s1;
;;;237                            logging("fail_io_num:0x%x\r\n",test_fail_info);
;;;238                            goto fail;
;;;239                        }
;;;240                    }
;;;241                    else if((test_item == TEST_IO_S2)   && (test_done & 0x02))
;;;242                    {
;;;243                        s_tState = READ_EFUSE;
;;;244                        if(test_fail & 0x02)
;;;245                        {
;;;246                            ret = fsm_rt_err_io_s2;
;;;247                            logging("fail_io_num:0x%x\r\n",test_fail_info);
;;;248                            goto fail;
;;;249                        }
;;;250                        logging("SUCCESS IO test");
;;;251                    }
;;;252                    else if((test_item == TEST_I2C)   && (test_done & 0x04))
;;;253                    {
;;;254                        s_tState = TEST_I2C;
;;;255                        if(test_fail & 0x04)
;;;256                        {
;;;257                            ret = fsm_rt_err_i2c;
;;;258                            goto fail;
;;;259                        }
;;;260                    }
;;;261                    else if((test_item == TEST_UART)   && (test_done & 0x08))
;;;262                    {
;;;263                        s_tState = TEST_UART;
;;;264                        if(test_fail & 0x08)
;;;265                        {
;;;266                            ret = fsm_rt_err_uart;
;;;267                            goto fail;
;;;268                        }
;;;269                    }
;;;270                }  
;;;271            }
;;;272            break;
;;;273    
;;;274        case READ_EFUSE:
;;;275            {
;;;276                //debug("READ_EFUSE\r\n");
;;;277                //uint32_t efuse_post[8];
;;;278                do
;;;279                { 
;;;280                   ret = online_update_sm(0xF3,0,NULL);
;;;281                }while(ret == fsm_rt_on_going);
;;;282                if(ret != fsm_rt_cpl ) 
;;;283                {
;;;284                    s_tState = START;
;;;285                    return ret; 
;;;286                }
;;;287                uint8_t var = sizeof(efuse_pre_data.word_table);
;;;288                memcpy(efuse_pre_data.word_table,(uint8_t*)&msg_recv.msg_body.content[0],var);
;;;289                debug("read  efuse value:");
;;;290                for(uint8_t i=0; i<8; i++)
;;;291                {
;;;292                    debug("[%d]0x%08x  ",i,efuse_pre_data.word_table[i]);
;;;293                }
;;;294                debug("\r\n");
;;;295               
;;;296                read_twice_flg++;
;;;297                if(read_twice_flg == 2)
;;;298                {
;;;299                    s_tState = START;
;;;300                    return fsm_rt_cpl;
;;;301                }
;;;302                else
;;;303                {
;;;304                    s_tState = WRITE_EFUSE;
;;;305                } 
;;;306            }
;;;307            break;
;;;308            
;;;309        case WRITE_EFUSE:
;;;310            {
;;;311                if(!is_test_item(efuse_write_item)) 
;;;312                {
;;;313                    trim_result_to_efuse(&efuse_post_data);
;;;314                    debug("write efuse value:");
;;;315                    for(uint8_t i=0; i<8; i++)
;;;316                    {
;;;317                        debug("[%d]0x%08x  ",i,efuse_post_data.word_table[i]);
;;;318                    }
;;;319                    debug("\r\n");
;;;320                    logging("INFO skip efuse write!\r\n");
;;;321                    //return fsm_rt_cpl;
;;;322                }
;;;323                else
;;;324                {
;;;325                    //debug("WRITE_EFUSE\r\n");
;;;326                    for(uint8_t i=0; i<8; i++)
;;;327                    {
;;;328                        efuse_post_data.word_table[i] = efuse_pre_data.word_table[i];
;;;329                    }
;;;330                    
;;;331                    trim_result_to_efuse(&efuse_post_data);
;;;332                    
;;;333                    #if 0
;;;334                    do
;;;335                    { 
;;;336                       ret = online_update_sm(0xF4,sizeof(efuse_post_data.word_table),(uint8_t*)efuse_post_data.word_table);
;;;337                    }while(ret == fsm_rt_on_going);
;;;338                    if(ret != fsm_rt_cpl ) return ret; 
;;;339                    #else
;;;340                    do
;;;341                    {
;;;342                        ret = spl_efuse_write(&efuse_post_data);
;;;343                    }while(ret == fsm_rt_on_going);
;;;344                    if(ret != fsm_rt_cpl ) 
;;;345                    {
;;;346                        s_tState = START;
;;;347                        return ret;
;;;348                    } 
;;;349                    #endif
;;;350                   
;;;351                    debug("write efuse value:");
;;;352                    for(uint8_t i=0; i<8; i++)
;;;353                    {
;;;354                        debug("[%d]0x%08x  ",i,efuse_post_data.word_table[i]);
;;;355                    }
;;;356                    debug("\r\n");
;;;357                }
;;;358                s_tState = READ_EFUSE; 
;;;359            }
;;;360            break;
;;;361            
;;;362        case IS_KIWI_RUN_PATTERN_CPL:
;;;363            {
;;;364                s_tState = START;
;;;365            }
;;;366            break;
;;;367        }
;;;368        return fsm_rt_on_going;
;;;369        
;;;370        fail:
;;;371        s_tState = START;
;;;372        return ret;
;;;373    }
000026  e8bd81fc          POP      {r2-r8,pc}
                  |L1.42|
00002a  2000              MOVS     r0,#0                 ;111
00002c  49d6              LDR      r1,|L1.904|
00002e  6008              STR      r0,[r1,#0]            ;111  ; test_en
000030  49d6              LDR      r1,|L1.908|
000032  7008              STRB     r0,[r1,#0]            ;112
000034  49d6              LDR      r1,|L1.912|
000036  8008              STRH     r0,[r1,#0]            ;113
000038  49d6              LDR      r1,|L1.916|
00003a  7008              STRB     r0,[r1,#0]            ;114
00003c  49d6              LDR      r1,|L1.920|
00003e  7008              STRB     r0,[r1,#0]            ;115
000040  48d0              LDR      r0,|L1.900|
000042  7800              LDRB     r0,[r0,#0]            ;116  ; s_tState
000044  1c40              ADDS     r0,r0,#1              ;116
000046  49cf              LDR      r1,|L1.900|
000048  7008              STRB     r0,[r1,#0]            ;116
00004a  bf00              NOP                            ;119
00004c  2001              MOVS     r0,#1                 ;123
00004e  f7fffffe          BL       is_test_item
000052  b1e0              CBZ      r0,|L1.142|
000054  bf00              NOP                            ;125
                  |L1.86|
000056  f7fffffe          BL       osc_audio_trim
00005a  4604              MOV      r4,r0                 ;127
00005c  2c01              CMP      r4,#1                 ;128
00005e  d0fa              BEQ      |L1.86|
000060  b124              CBZ      r4,|L1.108|
000062  2000              MOVS     r0,#0                 ;132
000064  49c7              LDR      r1,|L1.900|
000066  7008              STRB     r0,[r1,#0]            ;132
000068  4620              MOV      r0,r4                 ;133
00006a  e7dc              B        |L1.38|
                  |L1.108|
00006c  48cb              LDR      r0,|L1.924|
00006e  6a80              LDR      r0,[r0,#0x28]         ;135  ; trim_result
000070  49ca              LDR      r1,|L1.924|
000072  f8911022          LDRB     r1,[r1,#0x22]         ;135  ; trim_result
000076  e9cd1000          STRD     r1,r0,[sp,#0]         ;135
00007a  48c8              LDR      r0,|L1.924|
00007c  6a43              LDR      r3,[r0,#0x24]         ;135  ; trim_result
00007e  f8902020          LDRB     r2,[r0,#0x20]         ;135  ; trim_result
000082  48c7              LDR      r0,|L1.928|
000084  6801              LDR      r1,[r0,#0]            ;135  ; g_iRunTime
000086  a0c7              ADR      r0,|L1.932|
000088  f7fffffe          BL       logger_buffer_write
00008c  e004              B        |L1.152|
                  |L1.142|
00008e  48c4              LDR      r0,|L1.928|
000090  6801              LDR      r1,[r0,#0]            ;142  ; g_iRunTime
000092  a0cd              ADR      r0,|L1.968|
000094  f7fffffe          BL       logger_buffer_write
                  |L1.152|
000098  2008              MOVS     r0,#8                 ;149
00009a  49ba              LDR      r1,|L1.900|
00009c  7008              STRB     r0,[r1,#0]            ;149
                  |L1.158|
00009e  e168              B        |L1.882|
0000a0  48b9              LDR      r0,|L1.904|
0000a2  6800              LDR      r0,[r0,#0]            ;159  ; test_en
0000a4  f0200001          BIC      r0,r0,#1              ;159
0000a8  1c40              ADDS     r0,r0,#1              ;159
0000aa  49b7              LDR      r1,|L1.904|
0000ac  6008              STR      r0,[r1,#0]            ;159  ; test_en
0000ae  2004              MOVS     r0,#4                 ;160
0000b0  f7fffffe          BL       bsp_ch440r_ctrl_ex
0000b4  48b3              LDR      r0,|L1.900|
0000b6  7800              LDRB     r0,[r0,#0]            ;161  ; s_tState
0000b8  49b7              LDR      r1,|L1.920|
0000ba  7008              STRB     r0,[r1,#0]            ;161
0000bc  2006              MOVS     r0,#6                 ;162
0000be  49b1              LDR      r1,|L1.900|
0000c0  7008              STRB     r0,[r1,#0]            ;162
0000c2  e156              B        |L1.882|
0000c4  48b0              LDR      r0,|L1.904|
0000c6  6800              LDR      r0,[r0,#0]            ;168  ; test_en
0000c8  f0200002          BIC      r0,r0,#2              ;168
0000cc  1c80              ADDS     r0,r0,#2              ;168
0000ce  49ae              LDR      r1,|L1.904|
0000d0  6008              STR      r0,[r1,#0]            ;168  ; test_en
0000d2  2010              MOVS     r0,#0x10              ;169
0000d4  f7fffffe          BL       bsp_ch440r_ctrl_ex
0000d8  48aa              LDR      r0,|L1.900|
0000da  7800              LDRB     r0,[r0,#0]            ;170  ; s_tState
0000dc  49ae              LDR      r1,|L1.920|
0000de  7008              STRB     r0,[r1,#0]            ;170
0000e0  2006              MOVS     r0,#6                 ;171
0000e2  49a8              LDR      r1,|L1.900|
0000e4  7008              STRB     r0,[r1,#0]            ;171
0000e6  e144              B        |L1.882|
0000e8  48a7              LDR      r0,|L1.904|
0000ea  6800              LDR      r0,[r0,#0]            ;177  ; test_en
0000ec  f0200004          BIC      r0,r0,#4              ;177
0000f0  1d00              ADDS     r0,r0,#4              ;177
0000f2  49a5              LDR      r1,|L1.904|
0000f4  6008              STR      r0,[r1,#0]            ;177  ; test_en
0000f6  2002              MOVS     r0,#2                 ;178
0000f8  f7fffffe          BL       bsp_ch440r_ctrl_ex
0000fc  48a1              LDR      r0,|L1.900|
0000fe  7800              LDRB     r0,[r0,#0]            ;179  ; s_tState
000100  49a5              LDR      r1,|L1.920|
000102  7008              STRB     r0,[r1,#0]            ;179
000104  2006              MOVS     r0,#6                 ;180
000106  499f              LDR      r1,|L1.900|
000108  7008              STRB     r0,[r1,#0]            ;180
00010a  e132              B        |L1.882|
00010c  489e              LDR      r0,|L1.904|
00010e  6800              LDR      r0,[r0,#0]            ;186  ; test_en
000110  f0200008          BIC      r0,r0,#8              ;186
000114  3008              ADDS     r0,r0,#8              ;186
000116  499c              LDR      r1,|L1.904|
000118  6008              STR      r0,[r1,#0]            ;186  ; test_en
00011a  2008              MOVS     r0,#8                 ;187
00011c  f7fffffe          BL       bsp_ch440r_ctrl_ex
000120  4898              LDR      r0,|L1.900|
000122  7800              LDRB     r0,[r0,#0]            ;188  ; s_tState
000124  499c              LDR      r1,|L1.920|
000126  7008              STRB     r0,[r1,#0]            ;188
000128  2006              MOVS     r0,#6                 ;189
00012a  4996              LDR      r1,|L1.900|
00012c  7008              STRB     r0,[r1,#0]            ;189
00012e  e120              B        |L1.882|
000130  bf00              NOP                            ;194
                  |L1.306|
000132  4a95              LDR      r2,|L1.904|
000134  2104              MOVS     r1,#4                 ;196
000136  20f0              MOVS     r0,#0xf0              ;196
000138  f7fffffe          BL       online_update_sm
00013c  4604              MOV      r4,r0                 ;196
00013e  2c01              CMP      r4,#1                 ;197
000140  d0f7              BEQ      |L1.306|
000142  b104              CBZ      r4,|L1.326|
000144  e118              B        |L1.888|
                  |L1.326|
000146  2007              MOVS     r0,#7                 ;202
000148  498e              LDR      r1,|L1.900|
00014a  7008              STRB     r0,[r1,#0]            ;202
00014c  e111              B        |L1.882|
00014e  4892              LDR      r0,|L1.920|
000150  7800              LDRB     r0,[r0,#0]            ;208  ; test_item
000152  b918              CBNZ     r0,|L1.348|
000154  2002              MOVS     r0,#2                 ;210
000156  498b              LDR      r1,|L1.900|
000158  7008              STRB     r0,[r1,#0]            ;210
00015a  e078              B        |L1.590|
                  |L1.348|
00015c  bf00              NOP                            ;215
                  |L1.350|
00015e  2200              MOVS     r2,#0                 ;217
000160  4611              MOV      r1,r2                 ;217
000162  20f1              MOVS     r0,#0xf1              ;217
000164  f7fffffe          BL       online_update_sm
000168  4604              MOV      r4,r0                 ;217
00016a  2c01              CMP      r4,#1                 ;218
00016c  d0f7              BEQ      |L1.350|
00016e  b104              CBZ      r4,|L1.370|
000170  e102              B        |L1.888|
                  |L1.370|
000172  489c              LDR      r0,|L1.996|
000174  7b81              LDRB     r1,[r0,#0xe]          ;221  ; msg_recv
000176  7bc0              LDRB     r0,[r0,#0xf]          ;221
000178  ea412500          ORR      r5,r1,r0,LSL #8       ;221
00017c  4899              LDR      r0,|L1.996|
00017e  7c01              LDRB     r1,[r0,#0x10]         ;223
000180  7c40              LDRB     r0,[r0,#0x11]         ;223
000182  ea412600          ORR      r6,r1,r0,LSL #8       ;223
000186  4897              LDR      r0,|L1.996|
000188  7c81              LDRB     r1,[r0,#0x12]         ;225
00018a  7cc0              LDRB     r0,[r0,#0x13]         ;225
00018c  ea412100          ORR      r1,r1,r0,LSL #8       ;225
000190  4894              LDR      r0,|L1.996|
000192  7d00              LDRB     r0,[r0,#0x14]         ;225
000194  ea414100          ORR      r1,r1,r0,LSL #16      ;225
000198  4892              LDR      r0,|L1.996|
00019a  7d40              LDRB     r0,[r0,#0x15]         ;225
00019c  ea416700          ORR      r7,r1,r0,LSL #24      ;225
0001a0  487d              LDR      r0,|L1.920|
0001a2  7800              LDRB     r0,[r0,#0]            ;231  ; test_item
0001a4  2802              CMP      r0,#2                 ;231
0001a6  d112              BNE      |L1.462|
0001a8  f0050001          AND      r0,r5,#1              ;231
0001ac  b178              CBZ      r0,|L1.462|
0001ae  2003              MOVS     r0,#3                 ;233
0001b0  4974              LDR      r1,|L1.900|
0001b2  7008              STRB     r0,[r1,#0]            ;233
0001b4  f0060001          AND      r0,r6,#1              ;234
0001b8  2800              CMP      r0,#0                 ;234
0001ba  d047              BEQ      |L1.588|
0001bc  f06f0434          MVN      r4,#0x34              ;236
0001c0  463a              MOV      r2,r7                 ;237
0001c2  4877              LDR      r0,|L1.928|
0001c4  6801              LDR      r1,[r0,#0]            ;237  ; g_iRunTime
0001c6  a088              ADR      r0,|L1.1000|
0001c8  f7fffffe          BL       logger_buffer_write
0001cc  e0d4              B        |L1.888|
                  |L1.462|
0001ce  4872              LDR      r0,|L1.920|
0001d0  7800              LDRB     r0,[r0,#0]            ;241  ; test_item
0001d2  2803              CMP      r0,#3                 ;241
0001d4  d11a              BNE      |L1.524|
0001d6  f0050002          AND      r0,r5,#2              ;241
0001da  b1b8              CBZ      r0,|L1.524|
0001dc  2008              MOVS     r0,#8                 ;243
0001de  4969              LDR      r1,|L1.900|
0001e0  7008              STRB     r0,[r1,#0]            ;243
0001e2  f0060002          AND      r0,r6,#2              ;244
0001e6  b158              CBZ      r0,|L1.512|
0001e8  f06f0435          MVN      r4,#0x35              ;246
0001ec  463a              MOV      r2,r7                 ;247
0001ee  486c              LDR      r0,|L1.928|
0001f0  6801              LDR      r1,[r0,#0]            ;247  ; g_iRunTime
0001f2  a07d              ADR      r0,|L1.1000|
0001f4  f7fffffe          BL       logger_buffer_write
0001f8  e0be              B        |L1.888|
0001fa  e0b6              B        |L1.874|
0001fc  e062              B        |L1.708|
0001fe  e027              B        |L1.592|
                  |L1.512|
000200  4867              LDR      r0,|L1.928|
000202  6801              LDR      r1,[r0,#0]            ;250  ; g_iRunTime
000204  a07e              ADR      r0,|L1.1024|
000206  f7fffffe          BL       logger_buffer_write
00020a  e01f              B        |L1.588|
                  |L1.524|
00020c  4862              LDR      r0,|L1.920|
00020e  7800              LDRB     r0,[r0,#0]            ;252  ; test_item
000210  2804              CMP      r0,#4                 ;252
000212  d10b              BNE      |L1.556|
000214  f0050004          AND      r0,r5,#4              ;252
000218  b140              CBZ      r0,|L1.556|
00021a  2004              MOVS     r0,#4                 ;254
00021c  4959              LDR      r1,|L1.900|
00021e  7008              STRB     r0,[r1,#0]            ;254
000220  f0060004          AND      r0,r6,#4              ;255
000224  b190              CBZ      r0,|L1.588|
000226  f06f0420          MVN      r4,#0x20              ;257
00022a  e0a5              B        |L1.888|
                  |L1.556|
00022c  485a              LDR      r0,|L1.920|
00022e  7800              LDRB     r0,[r0,#0]            ;261  ; test_item
000230  2805              CMP      r0,#5                 ;261
000232  d10b              BNE      |L1.588|
000234  f0050008          AND      r0,r5,#8              ;261
000238  b140              CBZ      r0,|L1.588|
00023a  2005              MOVS     r0,#5                 ;263
00023c  4951              LDR      r1,|L1.900|
00023e  7008              STRB     r0,[r1,#0]            ;263
000240  f0060008          AND      r0,r6,#8              ;264
000244  b110              CBZ      r0,|L1.588|
000246  f06f0421          MVN      r4,#0x21              ;266
00024a  e095              B        |L1.888|
                  |L1.588|
00024c  bf00              NOP                            ;270
                  |L1.590|
00024e  e090              B        |L1.882|
                  |L1.592|
000250  bf00              NOP                            ;278
                  |L1.594|
000252  2200              MOVS     r2,#0                 ;280
000254  4611              MOV      r1,r2                 ;280
000256  20f3              MOVS     r0,#0xf3              ;280
000258  f7fffffe          BL       online_update_sm
00025c  4604              MOV      r4,r0                 ;280
00025e  2c01              CMP      r4,#1                 ;281
000260  d0f7              BEQ      |L1.594|
000262  b124              CBZ      r4,|L1.622|
000264  2000              MOVS     r0,#0                 ;284
000266  4947              LDR      r1,|L1.900|
000268  7008              STRB     r0,[r1,#0]            ;284
00026a  4620              MOV      r0,r4                 ;285
00026c  e6db              B        |L1.38|
                  |L1.622|
00026e  2620              MOVS     r6,#0x20              ;287
000270  4632              MOV      r2,r6                 ;288
000272  495c              LDR      r1,|L1.996|
000274  310e              ADDS     r1,r1,#0xe            ;288
000276  4868              LDR      r0,|L1.1048|
000278  f7fffffe          BL       __aeabi_memcpy
00027c  a067              ADR      r0,|L1.1052|
00027e  f7fffffe          BL       __2printf
000282  2500              MOVS     r5,#0                 ;290
000284  e008              B        |L1.664|
                  |L1.646|
000286  4864              LDR      r0,|L1.1048|
000288  f8502025          LDR      r2,[r0,r5,LSL #2]     ;292
00028c  4629              MOV      r1,r5                 ;292
00028e  a068              ADR      r0,|L1.1072|
000290  f7fffffe          BL       __2printf
000294  1c68              ADDS     r0,r5,#1              ;290
000296  b2c5              UXTB     r5,r0                 ;290
                  |L1.664|
000298  2d08              CMP      r5,#8                 ;290
00029a  dbf4              BLT      |L1.646|
00029c  a049              ADR      r0,|L1.964|
00029e  f7fffffe          BL       __2printf
0002a2  483a              LDR      r0,|L1.908|
0002a4  7800              LDRB     r0,[r0,#0]            ;296  ; read_twice_flg
0002a6  1c40              ADDS     r0,r0,#1              ;296
0002a8  4938              LDR      r1,|L1.908|
0002aa  7008              STRB     r0,[r1,#0]            ;296
0002ac  4608              MOV      r0,r1                 ;297
0002ae  7800              LDRB     r0,[r0,#0]            ;297  ; read_twice_flg
0002b0  2802              CMP      r0,#2                 ;297
0002b2  d103              BNE      |L1.700|
0002b4  2000              MOVS     r0,#0                 ;299
0002b6  4933              LDR      r1,|L1.900|
0002b8  7008              STRB     r0,[r1,#0]            ;299
0002ba  e6b4              B        |L1.38|
                  |L1.700|
0002bc  2009              MOVS     r0,#9                 ;304
0002be  4931              LDR      r1,|L1.900|
0002c0  7008              STRB     r0,[r1,#0]            ;304
0002c2  e056              B        |L1.882|
                  |L1.708|
0002c4  2005              MOVS     r0,#5                 ;311
0002c6  f7fffffe          BL       is_test_item
0002ca  b9d8              CBNZ     r0,|L1.772|
0002cc  485c              LDR      r0,|L1.1088|
0002ce  f7fffffe          BL       trim_result_to_efuse
0002d2  a05c              ADR      r0,|L1.1092|
0002d4  f7fffffe          BL       __2printf
0002d8  2500              MOVS     r5,#0                 ;315
0002da  e008              B        |L1.750|
                  |L1.732|
0002dc  4858              LDR      r0,|L1.1088|
0002de  f8502025          LDR      r2,[r0,r5,LSL #2]     ;317
0002e2  4629              MOV      r1,r5                 ;317
0002e4  a052              ADR      r0,|L1.1072|
0002e6  f7fffffe          BL       __2printf
0002ea  1c68              ADDS     r0,r5,#1              ;315
0002ec  b2c5              UXTB     r5,r0                 ;315
                  |L1.750|
0002ee  2d08              CMP      r5,#8                 ;315
0002f0  dbf4              BLT      |L1.732|
0002f2  a034              ADR      r0,|L1.964|
0002f4  f7fffffe          BL       __2printf
0002f8  4829              LDR      r0,|L1.928|
0002fa  6801              LDR      r1,[r0,#0]            ;320  ; g_iRunTime
0002fc  a056              ADR      r0,|L1.1112|
0002fe  f7fffffe          BL       logger_buffer_write
000302  e02e              B        |L1.866|
                  |L1.772|
000304  2000              MOVS     r0,#0                 ;326
000306  e007              B        |L1.792|
                  |L1.776|
000308  4943              LDR      r1,|L1.1048|
00030a  f8511020          LDR      r1,[r1,r0,LSL #2]     ;328
00030e  4a4c              LDR      r2,|L1.1088|
000310  f8421020          STR      r1,[r2,r0,LSL #2]     ;328
000314  1c41              ADDS     r1,r0,#1              ;326
000316  b2c8              UXTB     r0,r1                 ;326
                  |L1.792|
000318  2808              CMP      r0,#8                 ;326
00031a  dbf5              BLT      |L1.776|
00031c  4848              LDR      r0,|L1.1088|
00031e  f7fffffe          BL       trim_result_to_efuse
000322  bf00              NOP                            ;340
                  |L1.804|
000324  4846              LDR      r0,|L1.1088|
000326  f7fffffe          BL       spl_efuse_write
00032a  4604              MOV      r4,r0                 ;342
00032c  2c01              CMP      r4,#1                 ;343
00032e  d0f9              BEQ      |L1.804|
000330  b124              CBZ      r4,|L1.828|
000332  2000              MOVS     r0,#0                 ;346
000334  4913              LDR      r1,|L1.900|
000336  7008              STRB     r0,[r1,#0]            ;346
000338  4620              MOV      r0,r4                 ;347
00033a  e674              B        |L1.38|
                  |L1.828|
00033c  a041              ADR      r0,|L1.1092|
00033e  f7fffffe          BL       __2printf
000342  2500              MOVS     r5,#0                 ;352
000344  e008              B        |L1.856|
                  |L1.838|
000346  483e              LDR      r0,|L1.1088|
000348  f8502025          LDR      r2,[r0,r5,LSL #2]     ;354
00034c  4629              MOV      r1,r5                 ;354
00034e  a038              ADR      r0,|L1.1072|
000350  f7fffffe          BL       __2printf
000354  1c68              ADDS     r0,r5,#1              ;352
000356  b2c5              UXTB     r5,r0                 ;352
                  |L1.856|
000358  2d08              CMP      r5,#8                 ;352
00035a  dbf4              BLT      |L1.838|
00035c  a019              ADR      r0,|L1.964|
00035e  f7fffffe          BL       __2printf
                  |L1.866|
000362  2008              MOVS     r0,#8                 ;358
000364  4907              LDR      r1,|L1.900|
000366  7008              STRB     r0,[r1,#0]            ;358
000368  e003              B        |L1.882|
                  |L1.874|
00036a  2000              MOVS     r0,#0                 ;364
00036c  4905              LDR      r1,|L1.900|
00036e  7008              STRB     r0,[r1,#0]            ;364
000370  bf00              NOP                            ;366
                  |L1.882|
000372  bf00              NOP                            ;155
000374  2001              MOVS     r0,#1                 ;368
000376  e656              B        |L1.38|
                  |L1.888|
000378  2000              MOVS     r0,#0                 ;371
00037a  4902              LDR      r1,|L1.900|
00037c  7008              STRB     r0,[r1,#0]            ;371
00037e  4620              MOV      r0,r4                 ;372
000380  e651              B        |L1.38|
;;;374    
                          ENDP

000382  0000              DCW      0x0000
                  |L1.900|
                          DCD      s_tState
                  |L1.904|
                          DCD      test_en
                  |L1.908|
                          DCD      read_twice_flg
                  |L1.912|
                          DCD      test_success
                  |L1.916|
                          DCD      test_start_flg
                  |L1.920|
                          DCD      test_item
                  |L1.924|
                          DCD      trim_result
                  |L1.928|
                          DCD      g_iRunTime
                  |L1.932|
0003a4  5b253864          DCB      "[%8d]SUCCESS Oaduio:%d,%d(%d,%d)"
0003a8  5d535543
0003ac  43455353
0003b0  204f6164
0003b4  75696f3a
0003b8  25642c25
0003bc  64282564
0003c0  2c256429
                  |L1.964|
0003c4  0d0a00            DCB      "\r\n",0
0003c7  00                DCB      0
                  |L1.968|
0003c8  5b253864          DCB      "[%8d]INFO skip Oaudio!\r\n",0
0003cc  5d494e46
0003d0  4f20736b
0003d4  6970204f
0003d8  61756469
0003dc  6f210d0a
0003e0  00      
0003e1  00                DCB      0
0003e2  00                DCB      0
0003e3  00                DCB      0
                  |L1.996|
                          DCD      msg_recv
                  |L1.1000|
0003e8  5b253864          DCB      "[%8d]fail_io_num:0x%x\r\n",0
0003ec  5d666169
0003f0  6c5f696f
0003f4  5f6e756d
0003f8  3a307825
0003fc  780d0a00
                  |L1.1024|
000400  5b253864          DCB      "[%8d]SUCCESS IO test",0
000404  5d535543
000408  43455353
00040c  20494f20
000410  74657374
000414  00      
000415  00                DCB      0
000416  00                DCB      0
000417  00                DCB      0
                  |L1.1048|
                          DCD      efuse_pre_data
                  |L1.1052|
00041c  72656164          DCB      "read  efuse value:",0
000420  20206566
000424  75736520
000428  76616c75
00042c  653a00  
00042f  00                DCB      0
                  |L1.1072|
000430  5b25645d          DCB      "[%d]0x%08x  ",0
000434  30782530
000438  38782020
00043c  00      
00043d  00                DCB      0
00043e  00                DCB      0
00043f  00                DCB      0
                  |L1.1088|
                          DCD      efuse_post_data
                  |L1.1092|
000444  77726974          DCB      "write efuse value:",0
000448  65206566
00044c  75736520
000450  76616c75
000454  653a00  
000457  00                DCB      0
                  |L1.1112|
000458  5b253864          DCB      "[%8d]INFO skip efuse write!\r\n",0
00045c  5d494e46
000460  4f20736b
000464  69702065
000468  66757365
00046c  20777269
000470  7465210d
000474  0a00    
000476  00                DCB      0
000477  00                DCB      0

                          AREA ||i.osc_audio_trim_spl_set||, CODE, READONLY, ALIGN=2

                  osc_audio_trim_spl_set PROC
;;;375     
;;;376    fsm_rt_t osc_audio_trim_spl_set(uint8_t val)
000000  b538              PUSH     {r3-r5,lr}
;;;377    {
000002  4605              MOV      r5,r0
;;;378        fsm_rt_t ret;
;;;379        uint8_t osc_audio_cfg[2]={val,7};//[0]:trim值  [1]:放出时钟的引脚
000004  a007              ADR      r0,|L2.36|
000006  6800              LDR      r0,[r0,#0]
000008  9000              STR      r0,[sp,#0]
00000a  f88d5000          STRB     r5,[sp,#0]
;;;380        do
00000e  bf00              NOP      
                  |L2.16|
;;;381        { 
;;;382            ret = online_update_sm(0xF2,2,osc_audio_cfg);
000010  466a              MOV      r2,sp
000012  2102              MOVS     r1,#2
000014  20f2              MOVS     r0,#0xf2
000016  f7fffffe          BL       online_update_sm
00001a  4604              MOV      r4,r0
;;;383        }while(ret == fsm_rt_on_going);
00001c  2c01              CMP      r4,#1
00001e  d0f7              BEQ      |L2.16|
;;;384        return ret; 
000020  4620              MOV      r0,r4
;;;385    }
000022  bd38              POP      {r3-r5,pc}
;;;386    
                          ENDP

                  |L2.36|
000024  00                DCB      0
000025  0700              DCB      "\a",0
000027  00                DCB      0

                          AREA ||i.spl_efuse_write||, CODE, READONLY, ALIGN=2

                  spl_efuse_write PROC
;;;448    
;;;449    static fsm_rt_t spl_efuse_write(kiwi_efuse_t* efuse_data)
000000  b570              PUSH     {r4-r6,lr}
;;;450    {
000002  4605              MOV      r5,r0
;;;451        fsm_rt_t ret;
;;;452        
;;;453        uint32_t len = sizeof(kiwi_efuse_t);
000004  2620              MOVS     r6,#0x20
;;;454        
;;;455        do
000006  bf00              NOP      
                  |L3.8|
;;;456        {
;;;457            ret = online_update_sm(0xF4, len, (uint8_t*)(*efuse_data).word_table);
000008  462a              MOV      r2,r5
00000a  4631              MOV      r1,r6
00000c  20f4              MOVS     r0,#0xf4
00000e  f7fffffe          BL       online_update_sm
000012  4604              MOV      r4,r0
;;;458        }while(ret == fsm_rt_on_going);
000014  2c01              CMP      r4,#1
000016  d0f7              BEQ      |L3.8|
;;;459        if(ret != fsm_rt_cpl ) return ret;
000018  b10c              CBZ      r4,|L3.30|
00001a  4620              MOV      r0,r4
                  |L3.28|
;;;460        
;;;461        switch(msg_recv.msg_body.content[0])
;;;462        {
;;;463            case 0:  return fsm_rt_cpl;
;;;464            case 1:  return fsm_rt_err_efuse_check;
;;;465            default: return fsm_rt_err_efuse_check;
;;;466        }
;;;467    }
00001c  bd70              POP      {r4-r6,pc}
                  |L3.30|
00001e  4807              LDR      r0,|L3.60|
000020  7b80              LDRB     r0,[r0,#0xe]          ;461  ; msg_recv
000022  b110              CBZ      r0,|L3.42|
000024  2801              CMP      r0,#1                 ;461
000026  d105              BNE      |L3.52|
000028  e001              B        |L3.46|
                  |L3.42|
00002a  2000              MOVS     r0,#0                 ;463
00002c  e7f6              B        |L3.28|
                  |L3.46|
00002e  f06f000b          MVN      r0,#0xb               ;464
000032  e7f3              B        |L3.28|
                  |L3.52|
000034  f06f000b          MVN      r0,#0xb               ;465
000038  e7f0              B        |L3.28|
;;;468            
                          ENDP

00003a  0000              DCW      0x0000
                  |L3.60|
                          DCD      msg_recv

                          AREA ||i.trim_result_to_efuse||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  trim_result_to_efuse PROC
;;;387    
;;;388    static void trim_result_to_efuse(kiwi_efuse_t *efuse_data)
000000  b510              PUSH     {r4,lr}
;;;389    {
000002  4604              MOV      r4,r0
;;;390        (*efuse_data).EFUSE_VLD = 0x8e3b5a69;
000004  4864              LDR      r0,|L4.408|
000006  6020              STR      r0,[r4,#0]
;;;391        if(trim_result.pass_pmu_bgr_trim)
000008  4864              LDR      r0,|L4.412|
00000a  7800              LDRB     r0,[r0,#0]  ; trim_result
00000c  f3c00040          UBFX     r0,r0,#1,#1
000010  b150              CBZ      r0,|L4.40|
;;;392        {
;;;393            (*efuse_data).PMU_BGR_VLD  = 1;
000012  68e0              LDR      r0,[r4,#0xc]
000014  f0200010          BIC      r0,r0,#0x10
000018  3010              ADDS     r0,r0,#0x10
00001a  60e0              STR      r0,[r4,#0xc]
;;;394            (*efuse_data).PMU_BGR_TRIM = trim_result.pmu_bgr_trim_val;            
00001c  485f              LDR      r0,|L4.412|
00001e  7a01              LDRB     r1,[r0,#8]  ; trim_result
000020  68e0              LDR      r0,[r4,#0xc]
000022  f3610003          BFI      r0,r1,#0,#4
000026  60e0              STR      r0,[r4,#0xc]
                  |L4.40|
;;;395        }
;;;396        
;;;397        if(trim_result.pass_pmu_lpv_trim)
000028  485c              LDR      r0,|L4.412|
00002a  7800              LDRB     r0,[r0,#0]  ; trim_result
00002c  f3c00080          UBFX     r0,r0,#2,#1
000030  b150              CBZ      r0,|L4.72|
;;;398        {
;;;399            (*efuse_data).PMU_LPV_VLD  = 1;
000032  68e0              LDR      r0,[r4,#0xc]
000034  f0200040          BIC      r0,r0,#0x40
000038  3040              ADDS     r0,r0,#0x40
00003a  60e0              STR      r0,[r4,#0xc]
;;;400            (*efuse_data).PMU_LPV_TRIM = trim_result.pmu_lpv_trim_val;            
00003c  4857              LDR      r0,|L4.412|
00003e  7d01              LDRB     r1,[r0,#0x14]  ; trim_result
000040  68e0              LDR      r0,[r4,#0xc]
000042  f3611045          BFI      r0,r1,#5,#1
000046  60e0              STR      r0,[r4,#0xc]
                  |L4.72|
;;;401        }
;;;402        
;;;403        if(trim_result.pass_osc_audio_trim)
000048  4854              LDR      r0,|L4.412|
00004a  7800              LDRB     r0,[r0,#0]  ; trim_result
00004c  f3c000c0          UBFX     r0,r0,#3,#1
000050  b160              CBZ      r0,|L4.108|
;;;404        {
;;;405            (*efuse_data).OSC_AUDIO_VLD  = 1;
000052  68a0              LDR      r0,[r4,#8]
000054  f4200080          BIC      r0,r0,#0x400000
000058  f5000080          ADD      r0,r0,#0x400000
00005c  60a0              STR      r0,[r4,#8]
;;;406            (*efuse_data).OSC_AUDIO_TRIM = trim_result.osc_audio_trim_val;  
00005e  484f              LDR      r0,|L4.412|
000060  f8901020          LDRB     r1,[r0,#0x20]  ; trim_result
000064  68a0              LDR      r0,[r4,#8]
000066  f3614015          BFI      r0,r1,#16,#6
00006a  60a0              STR      r0,[r4,#8]
                  |L4.108|
;;;407        }
;;;408        
;;;409        if(trim_result.pass_osc_pmu_trim)
00006c  484b              LDR      r0,|L4.412|
00006e  7800              LDRB     r0,[r0,#0]  ; trim_result
000070  f3c01000          UBFX     r0,r0,#4,#1
000074  b160              CBZ      r0,|L4.144|
;;;410        {
;;;411            (*efuse_data).OSC_32K_VLD  = 1;
000076  68e0              LDR      r0,[r4,#0xc]
000078  f4205000          BIC      r0,r0,#0x2000
00007c  f5005000          ADD      r0,r0,#0x2000
000080  60e0              STR      r0,[r4,#0xc]
;;;412            (*efuse_data).OSC_32K_TRIM = trim_result.osc_pmu_trim_val;  
000082  4846              LDR      r0,|L4.412|
000084  f890102c          LDRB     r1,[r0,#0x2c]  ; trim_result
000088  68e0              LDR      r0,[r4,#0xc]
00008a  f36110cc          BFI      r0,r1,#7,#6
00008e  60e0              STR      r0,[r4,#0xc]
                  |L4.144|
;;;413        }
;;;414        
;;;415        if(trim_result.pass_osc_core_trim)
000090  4842              LDR      r0,|L4.412|
000092  7800              LDRB     r0,[r0,#0]  ; trim_result
000094  f3c01040          UBFX     r0,r0,#5,#1
000098  2800              CMP      r0,#0
00009a  d058              BEQ      |L4.334|
;;;416        {
;;;417            (*efuse_data).OSC_CORE_60M_VLD  = 1;
00009c  6960              LDR      r0,[r4,#0x14]
00009e  f0200080          BIC      r0,r0,#0x80
0000a2  3080              ADDS     r0,r0,#0x80
0000a4  6160              STR      r0,[r4,#0x14]
;;;418            (*efuse_data).OSC_CORE_70M_VLD  = 1;
0000a6  6960              LDR      r0,[r4,#0x14]
0000a8  f4204000          BIC      r0,r0,#0x8000
0000ac  f5004000          ADD      r0,r0,#0x8000
0000b0  6160              STR      r0,[r4,#0x14]
;;;419            (*efuse_data).OSC_CORE_80M_VLD  = 1;
0000b2  6960              LDR      r0,[r4,#0x14]
0000b4  f4200000          BIC      r0,r0,#0x800000
0000b8  f5000000          ADD      r0,r0,#0x800000
0000bc  6160              STR      r0,[r4,#0x14]
;;;420            (*efuse_data).OSC_CORE_90M_VLD  = 1;
0000be  6960              LDR      r0,[r4,#0x14]
0000c0  f0204000          BIC      r0,r0,#0x80000000
0000c4  f1004000          ADD      r0,r0,#0x80000000
0000c8  6160              STR      r0,[r4,#0x14]
;;;421            (*efuse_data).OSC_CORE_100M_VLD  = 1;
0000ca  69a0              LDR      r0,[r4,#0x18]
0000cc  f0200080          BIC      r0,r0,#0x80
0000d0  3080              ADDS     r0,r0,#0x80
0000d2  61a0              STR      r0,[r4,#0x18]
;;;422            (*efuse_data).OSC_CORE_110M_VLD  = 1;
0000d4  69a0              LDR      r0,[r4,#0x18]
0000d6  f4204000          BIC      r0,r0,#0x8000
0000da  f5004000          ADD      r0,r0,#0x8000
0000de  61a0              STR      r0,[r4,#0x18]
;;;423            (*efuse_data).OSC_CORE_120M_VLD  = 1;
0000e0  69a0              LDR      r0,[r4,#0x18]
0000e2  f4200000          BIC      r0,r0,#0x800000
0000e6  f5000000          ADD      r0,r0,#0x800000
0000ea  61a0              STR      r0,[r4,#0x18]
;;;424            (*efuse_data).OSC_CORE_60M_TRIM = trim_result.osc_core_trim_val[0]; 
0000ec  482b              LDR      r0,|L4.412|
0000ee  f8901038          LDRB     r1,[r0,#0x38]  ; trim_result
0000f2  6960              LDR      r0,[r4,#0x14]
0000f4  f3610006          BFI      r0,r1,#0,#7
0000f8  6160              STR      r0,[r4,#0x14]
;;;425            (*efuse_data).OSC_CORE_70M_TRIM = trim_result.osc_core_trim_val[1]; 
0000fa  4828              LDR      r0,|L4.412|
0000fc  f8901039          LDRB     r1,[r0,#0x39]
000100  6960              LDR      r0,[r4,#0x14]
000102  f361200e          BFI      r0,r1,#8,#7
000106  6160              STR      r0,[r4,#0x14]
;;;426            (*efuse_data).OSC_CORE_80M_TRIM = trim_result.osc_core_trim_val[2]; 
000108  4824              LDR      r0,|L4.412|
00010a  f890103a          LDRB     r1,[r0,#0x3a]
00010e  6960              LDR      r0,[r4,#0x14]
000110  f3614016          BFI      r0,r1,#16,#7
000114  6160              STR      r0,[r4,#0x14]
;;;427            (*efuse_data).OSC_CORE_90M_TRIM = trim_result.osc_core_trim_val[3]; 
000116  4821              LDR      r0,|L4.412|
000118  f890103b          LDRB     r1,[r0,#0x3b]
00011c  6960              LDR      r0,[r4,#0x14]
00011e  f361601e          BFI      r0,r1,#24,#7
000122  6160              STR      r0,[r4,#0x14]
;;;428            (*efuse_data).OSC_CORE_100M_TRIM = trim_result.osc_core_trim_val[4]; 
000124  481d              LDR      r0,|L4.412|
000126  f890103c          LDRB     r1,[r0,#0x3c]
00012a  69a0              LDR      r0,[r4,#0x18]
00012c  f3610006          BFI      r0,r1,#0,#7
000130  61a0              STR      r0,[r4,#0x18]
;;;429            (*efuse_data).OSC_CORE_110M_TRIM = trim_result.osc_core_trim_val[5]; 
000132  481a              LDR      r0,|L4.412|
000134  f890103d          LDRB     r1,[r0,#0x3d]
000138  69a0              LDR      r0,[r4,#0x18]
00013a  f361200e          BFI      r0,r1,#8,#7
00013e  61a0              STR      r0,[r4,#0x18]
;;;430            (*efuse_data).OSC_CORE_120M_TRIM = trim_result.osc_core_trim_val[6]; 
000140  4816              LDR      r0,|L4.412|
000142  f890103e          LDRB     r1,[r0,#0x3e]
000146  69a0              LDR      r0,[r4,#0x18]
000148  f3614016          BFI      r0,r1,#16,#7
00014c  61a0              STR      r0,[r4,#0x18]
                  |L4.334|
;;;431     
;;;432        }
;;;433        if(trim_result.pmu_lpv_trim_power_on != trim_result.pmu_lpv_trim_default)
00014e  4813              LDR      r0,|L4.412|
000150  7d40              LDRB     r0,[r0,#0x15]  ; trim_result
000152  4912              LDR      r1,|L4.412|
000154  7d89              LDRB     r1,[r1,#0x16]  ; trim_result
000156  4288              CMP      r0,r1
000158  d004              BEQ      |L4.356|
;;;434        {
;;;435            debug("pmu_lpv_trim_power_on=%d\r\n",trim_result.pmu_lpv_trim_power_on);
00015a  4810              LDR      r0,|L4.412|
00015c  7d41              LDRB     r1,[r0,#0x15]  ; trim_result
00015e  a010              ADR      r0,|L4.416|
000160  f7fffffe          BL       __2printf
                  |L4.356|
;;;436        }
;;;437        if(trim_result.pmu_bgr_trim_power_on != trim_result.pmu_bgr_trim_default)
000164  480d              LDR      r0,|L4.412|
000166  7a40              LDRB     r0,[r0,#9]  ; trim_result
000168  490c              LDR      r1,|L4.412|
00016a  7a89              LDRB     r1,[r1,#0xa]  ; trim_result
00016c  4288              CMP      r0,r1
00016e  d004              BEQ      |L4.378|
;;;438        {
;;;439            debug("pmu_bgr_trim_power_on=%d\r\n",trim_result.pmu_bgr_trim_power_on);
000170  480a              LDR      r0,|L4.412|
000172  7a41              LDRB     r1,[r0,#9]  ; trim_result
000174  a011              ADR      r0,|L4.444|
000176  f7fffffe          BL       __2printf
                  |L4.378|
;;;440        }
;;;441        if(trim_result.osc_pmu_trim_power_on != trim_result.osc_pmu_trim_default)
00017a  4808              LDR      r0,|L4.412|
00017c  f890002d          LDRB     r0,[r0,#0x2d]  ; trim_result
000180  4906              LDR      r1,|L4.412|
000182  f891102e          LDRB     r1,[r1,#0x2e]  ; trim_result
000186  4288              CMP      r0,r1
000188  d005              BEQ      |L4.406|
;;;442        {
;;;443            debug("osc_pmu_trim_power_on=%d\r\n",trim_result.osc_pmu_trim_power_on);
00018a  4804              LDR      r0,|L4.412|
00018c  f890102d          LDRB     r1,[r0,#0x2d]  ; trim_result
000190  a011              ADR      r0,|L4.472|
000192  f7fffffe          BL       __2printf
                  |L4.406|
;;;444        }
;;;445        
;;;446    }
000196  bd10              POP      {r4,pc}
;;;447    
                          ENDP

                  |L4.408|
                          DCD      0x8e3b5a69
                  |L4.412|
                          DCD      trim_result
                  |L4.416|
0001a0  706d755f          DCB      "pmu_lpv_trim_power_on=%d\r\n",0
0001a4  6c70765f
0001a8  7472696d
0001ac  5f706f77
0001b0  65725f6f
0001b4  6e3d2564
0001b8  0d0a00  
0001bb  00                DCB      0
                  |L4.444|
0001bc  706d755f          DCB      "pmu_bgr_trim_power_on=%d\r\n",0
0001c0  6267725f
0001c4  7472696d
0001c8  5f706f77
0001cc  65725f6f
0001d0  6e3d2564
0001d4  0d0a00  
0001d7  00                DCB      0
                  |L4.472|
0001d8  6f73635f          DCB      "osc_pmu_trim_power_on=%d\r\n",0
0001dc  706d755f
0001e0  7472696d
0001e4  5f706f77
0001e8  65725f6f
0001ec  6e3d2564
0001f0  0d0a00  
0001f3  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  kiwi_ft_str
000000  68656c6c          DCB      0x68,0x65,0x6c,0x6c
000004  6f206b69          DCB      0x6f,0x20,0x6b,0x69
000008  77692100          DCB      0x77,0x69,0x21,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  pattern_result_flag
                          DCD      0x00000000
                  test_en
                          DCD      0x00000000
                  test_success
000008  0000              DCB      0x00,0x00
                  s_tState
00000a  00                DCB      0x00
                  read_twice_flg
00000b  00                DCB      0x00
                  test_start_flg
00000c  00                DCB      0x00
                  test_item
00000d  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\kiwi_ft\\asu_pattern_result.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_asu_pattern_result_c_5905ccaf____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___20_asu_pattern_result_c_5905ccaf____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_asu_pattern_result_c_5905ccaf____REVSH|
#line 144
|__asm___20_asu_pattern_result_c_5905ccaf____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
