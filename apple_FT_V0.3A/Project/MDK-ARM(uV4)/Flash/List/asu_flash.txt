; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\asu_flash.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\asu_flash.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\BERRY_TWI -I..\..\User\berry_ft -I..\..\User\ft_support -I..\..\User\berry_test -I..\..\User\factory_test -I..\..\User\emenu -I..\..\User\kiwi_ft -I..\..\User\kiwi_ft\spv40 -I..\..\User\kiwi_ft\spv40\peripheral -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\kiwi_ft -I..\..\User\MultiButton-1.1.0 -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.16.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\asu_flash.crf ..\..\User\kiwi_ft\asu_flash.c]
                          THUMB

                          AREA ||i.asu_flash_state||, CODE, READONLY, ALIGN=2

                  asu_flash_state PROC
;;;49     //falsh上运行程序 
;;;50     fsm_rt_t asu_flash_state(void)
000000  b510              PUSH     {r4,lr}
;;;51     {
;;;52         /* 本函数使用的局部变量占用较多，请修改启动文件，保证堆栈空间够用 */
;;;53     
;;;54         //FRESULT     result;
;;;55     //	DIR         DirInf;
;;;56         uint32_t    bw;
;;;57         //    char path[32];
;;;58         uint8_t wbuf[4096]; //1个扇区的大小 4k byte
;;;59     //    uint32_t sector_cnt=0;
;;;60     //    uint32_t row_cnt=0;
;;;61     //    uint32_t data; //写CPUVEC地址为0
;;;62         
;;;63      
;;;64         fsm_rt_t ret=fsm_rt_cpl;
000002  2400              MOVS     r4,#0
;;;65         if( !is_test_item(customer_flash_item)  || (RUN_MODE == RUN_MODE_FT)) 
000004  2006              MOVS     r0,#6
000006  f7fffffe          BL       is_test_item
00000a  b100              CBZ      r0,|L1.14|
00000c  bf00              NOP      
                  |L1.14|
;;;66         {
;;;67             logging("INFO skip customer flash\r\n");
00000e  4803              LDR      r0,|L1.28|
000010  6801              LDR      r1,[r0,#0]  ; g_iRunTime
000012  a003              ADR      r0,|L1.32|
000014  f7fffffe          BL       logger_buffer_write
;;;68             return fsm_rt_cpl;
000018  2000              MOVS     r0,#0
;;;69         }
;;;70     
;;;71     	/* 打开文件1 */
;;;72     	if(is_customer_file_fail) 
;;;73         {
;;;74             logging("Don't Find File: flash.bin\r\n");
;;;75             logging("FAIL customer flash\r\n");
;;;76             return fsm_rt_err_no_bin;
;;;77         }
;;;78         /* 将flash bin中的内容传给kiwi spl，让其烧录flash */
;;;79        //f_lseek(&customer_file, 0);
;;;80         logging("start buring: flash.bin\r\n");
;;;81     /** @step 1:kiwi flash 引脚配置，返回chip id */
;;;82         const uint8_t flash_pin_cfg[12]={10,11,12,13,14,15,1,1,1,1,1,1};
;;;83         do
;;;84         { 
;;;85            ret = online_update_sm(0x2f,sizeof(flash_pin_cfg),(uint8_t*)flash_pin_cfg);
;;;86            
;;;87         }while(ret == fsm_rt_on_going);
;;;88         if(ret != fsm_rt_cpl ) return ret;
;;;89         
;;;90     /** @step 2:kiwi flash 读取区域配置，返回  */
;;;91         const uint32_t flash_read_area_cfg[]={2048,40,2408,0};
;;;92         do
;;;93         { 
;;;94            ret = online_update_sm(0x22,sizeof(flash_read_area_cfg),(uint8_t*)flash_read_area_cfg);
;;;95         }while(ret == fsm_rt_on_going);
;;;96         if(ret != fsm_rt_cpl ) return ret;
;;;97         
;;;98         
;;;99     /** @step 3:kiwi flash 读flash，返回之前设置的flash区域和长度数据  */
;;;100        do
;;;101        { 
;;;102           ret = online_update_sm(0x23,0,NULL);
;;;103        }while(ret == fsm_rt_on_going);
;;;104        if(ret != fsm_rt_cpl ) return ret;
;;;105        
;;;106        uint8_t flash_efuse_area[40];
;;;107        #if 0
;;;108        debug("flash area 2048,40byte data:\r\n");
;;;109        for(uint8_t i=0; i< msg_recv.msg_head.length; i++)
;;;110        {
;;;111            debug("[%d]=0x%02x ",i,msg_recv.msg_body.content[i]);
;;;112        }
;;;113        #endif
;;;114        memcpy(flash_efuse_area, msg_recv.msg_body.content,40);  //应用程序用来存储efuse值的flash段
;;;115     
;;;116        
;;;117    /** @step 4:kiwi flash 写区域设置，返回 写成功与否  */
;;;118                                      
;;;119        uint32_t flash_write_area_cfg[]={  0,  0,  2048,  0};// 起始地址  数据长度   切片长度    保留
;;;120        if(customer_file.fsize > 0x1000) //大于4k
;;;121        {
;;;122            flash_write_area_cfg[0] = 0x1000;
;;;123            flash_write_area_cfg[1] = customer_file.fsize - 0x1000;
;;;124            do
;;;125            {  //设置写区域
;;;126               ret = online_update_sm(0x20,sizeof(flash_write_area_cfg),(uint8_t*)flash_write_area_cfg);
;;;127            }while(ret == fsm_rt_on_going);
;;;128            if(ret != fsm_rt_cpl ) return ret;
;;;129            
;;;130            f_lseek(&customer_file, 0x1000); //文件 索引跳到4096的位置
;;;131            for(uint32_t i; i<= (flash_write_area_cfg[1]/2048); i++)
;;;132            {
;;;133                /* 读取文件 */
;;;134                if( f_read(&customer_file, wbuf, 2048, &bw) == FR_OK && bw >0)
;;;135                {   bsp_LedToggle(1);	/* 翻转LED4的状态 */
;;;136                    IWDG_Feed();
;;;137                    ret = spl_flash_write(wbuf, bw);
;;;138                    if(ret != fsm_rt_cpl ) return ret;
;;;139                }
;;;140            }
;;;141            
;;;142            flash_write_area_cfg[0] = 0x0000;
;;;143            flash_write_area_cfg[1] = 0x1000;
;;;144            do
;;;145            {  //设置写区域
;;;146               ret = online_update_sm(0x20,sizeof(flash_write_area_cfg),(uint8_t*)flash_write_area_cfg);
;;;147            }while(ret == fsm_rt_on_going);
;;;148            if(ret != fsm_rt_cpl ) return ret;
;;;149            
;;;150            f_lseek(&customer_file, 0); //文件 索引跳到0的位置
;;;151            /* 读取文件 */
;;;152            if( f_read(&customer_file, wbuf, 2048, &bw) == FR_OK && bw == 2048)
;;;153            {
;;;154                bsp_LedToggle(1);	/* 翻转LED4的状态 */
;;;155                IWDG_Feed();
;;;156                ret = spl_flash_write(wbuf, bw);
;;;157                if(ret != fsm_rt_cpl ) return ret;
;;;158            }
;;;159            else
;;;160            {
;;;161                return fsm_rt_err_flash_2k;
;;;162            }
;;;163            
;;;164            if( f_read(&customer_file, wbuf, 2048, &bw) == FR_OK && bw == 2048)
;;;165            {
;;;166                bsp_LedToggle(1);	/* 翻转LED4的状态 */
;;;167                IWDG_Feed();
;;;168                memcpy(wbuf, flash_efuse_area, 40);
;;;169                ret = spl_flash_write(wbuf, bw);
;;;170                if(ret != fsm_rt_cpl ) return ret;
;;;171            }
;;;172            else
;;;173            {
;;;174                return fsm_rt_err_flash_4k;
;;;175            }
;;;176        }
;;;177        else
;;;178        {
;;;179            flash_write_area_cfg[0] = 0x0000;
;;;180            flash_write_area_cfg[1] = customer_file.fsize;
;;;181            do
;;;182            {  //设置写区域
;;;183               ret = online_update_sm(0x20,sizeof(flash_write_area_cfg),(uint8_t*)flash_write_area_cfg);
;;;184            }while(ret == fsm_rt_on_going);
;;;185            if(ret != fsm_rt_cpl ) return ret;
;;;186            
;;;187            for(uint32_t i; i<= (customer_file.fsize/2048); i++)
;;;188            {
;;;189                /* 读取文件 */
;;;190                if( f_read(&customer_file, wbuf, 2048, &bw) == FR_OK && bw >0)
;;;191                {
;;;192                    bsp_LedToggle(1);	/* 翻转LED4的状态 */
;;;193                    IWDG_Feed();
;;;194                    if(i==1) memcpy(wbuf, flash_efuse_area, 40);
;;;195                    ret = spl_flash_write(wbuf, bw);
;;;196                    if(ret != fsm_rt_cpl ) return ret;
;;;197                }
;;;198            }
;;;199        }
;;;200        
;;;201    
;;;202       
;;;203    //	/* 读取文件 */
;;;204    //	while( f_read(&customer_file, &wbuf, 2048, &bw) == FR_OK && bw >0)
;;;205    //    {
;;;206    //        #if 0
;;;207    //        for(uint32_t j=0; j<bw; j++)
;;;208    //        {
;;;209    //            if(j%16==0) debug("\r\n%08xh:",row_cnt/16);
;;;210    //            debug(" %02x ",wbuf[j]);
;;;211    //            row_cnt++; /* 16个数一组计数 */
;;;212    //        }
;;;213    //        
;;;214    //        #endif
;;;215    ////        uint8_t is_success = asu_flashWriteBuffer(wbuf, sector_cnt * g_tOrange_Flash.SectorSize, 4096);  /* 此函数会读出比较 */
;;;216    ////        if(!is_success) 
;;;217    ////        {
;;;218    ////            ret = fsm_rt_err_flash;   
;;;219    ////            goto fail;
;;;220    ////        }
;;;221    //        sector_cnt++;
;;;222    //    }
;;;223     
;;;224     #if 0
;;;225        //RE BOOT 置位
;;;226        do
;;;227        { 
;;;228           ret = online_update_sm(0x24,0,NULL);
;;;229           
;;;230        }while(ret == fsm_rt_on_going);
;;;231        if(ret != fsm_rt_cpl ) return ret;
;;;232    #endif 
;;;233    
;;;234        logging("online update ok!\r\n");
;;;235        return fsm_rt_cpl;
;;;236    }
00001a  bd10              POP      {r4,pc}
;;;237    
                          ENDP

                  |L1.28|
                          DCD      g_iRunTime
                  |L1.32|
000020  5b253864          DCB      "[%8d]INFO skip customer flash\r\n",0
000024  5d494e46
000028  4f20736b
00002c  69702063
000030  7573746f
000034  6d657220
000038  666c6173
00003c  680d0a00

                          AREA ||i.customer_file_open||, CODE, READONLY, ALIGN=2

                  customer_file_open PROC
;;;17     
;;;18     int32_t customer_file_open(void)
000000  b510              PUSH     {r4,lr}
;;;19     {
;;;20         FRESULT     result;
;;;21         
;;;22         result = f_open(&customer_file, CUSTOMER_FLASH_BIN, FA_READ);
000002  2201              MOVS     r2,#1
000004  a10a              ADR      r1,|L2.48|
000006  4815              LDR      r0,|L2.92|
000008  f7fffffe          BL       f_open
00000c  4604              MOV      r4,r0
;;;23         if (result !=  FR_OK)
00000e  b14c              CBZ      r4,|L2.36|
;;;24     	{
;;;25             is_customer_file_fail = 1;
000010  2001              MOVS     r0,#1
000012  4913              LDR      r1,|L2.96|
000014  7008              STRB     r0,[r1,#0]
;;;26     		LCD_SHOW_NG("Don't Find File:%s\r\n",CUSTOMER_FLASH_BIN);
000016  a206              ADR      r2,|L2.48|
000018  a112              ADR      r1,|L2.100|
00001a  f7fffffe          BL       display_show_log
;;;27             return -1;
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L2.34|
;;;28     		//
;;;29     	}
;;;30         is_customer_file_fail = 0;
;;;31         
;;;32         return 0;
;;;33     }
000022  bd10              POP      {r4,pc}
                  |L2.36|
000024  2000              MOVS     r0,#0                 ;30
000026  490e              LDR      r1,|L2.96|
000028  7008              STRB     r0,[r1,#0]            ;30
00002a  bf00              NOP                            ;32
00002c  e7f9              B        |L2.34|
;;;34     
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
000030  63757374          DCB      "customer_code/kiwi_hello_ft_cnt_flash.bin",0
000034  6f6d6572
000038  5f636f64
00003c  652f6b69
000040  77695f68
000044  656c6c6f
000048  5f66745f
00004c  636e745f
000050  666c6173
000054  682e6269
000058  6e00    
00005a  00                DCB      0
00005b  00                DCB      0
                  |L2.92|
                          DCD      customer_file
                  |L2.96|
                          DCD      is_customer_file_fail
                  |L2.100|
000064  446f6e27          DCB      "Don't Find File:%s\r\n",0
000068  74204669
00006c  6e642046
000070  696c653a
000074  25730d0a
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0

                          AREA ||i.spl_flash_write||, CODE, READONLY, ALIGN=2

                  spl_flash_write PROC
;;;239    
;;;240    static fsm_rt_t spl_flash_write(uint8_t* pdat, uint32_t len)
000000  b570              PUSH     {r4-r6,lr}
;;;241    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;242        fsm_rt_t ret;
;;;243        
;;;244        do
000006  bf00              NOP      
                  |L3.8|
;;;245        {
;;;246            ret = online_update_sm(0x21,len, pdat);
000008  462a              MOV      r2,r5
00000a  4631              MOV      r1,r6
00000c  2021              MOVS     r0,#0x21
00000e  f7fffffe          BL       online_update_sm
000012  4604              MOV      r4,r0
;;;247        }while(ret == fsm_rt_on_going);
000014  2c01              CMP      r4,#1
000016  d0f7              BEQ      |L3.8|
;;;248        if(ret != fsm_rt_cpl ) return ret;
000018  b10c              CBZ      r4,|L3.30|
00001a  4620              MOV      r0,r4
                  |L3.28|
;;;249        
;;;250        switch(msg_recv.msg_body.content[0])
;;;251        {
;;;252            case 0:  return fsm_rt_cpl;
;;;253            case 1:  return fsm_rt_err_spl_flash_check;
;;;254            case 2:  return fsm_rt_err_spl_flash_oversize;
;;;255            default: return fsm_rt_cpl;
;;;256        }
;;;257    }
00001c  bd70              POP      {r4-r6,pc}
                  |L3.30|
00001e  4809              LDR      r0,|L3.68|
000020  7b80              LDRB     r0,[r0,#0xe]          ;250  ; msg_recv
000022  b120              CBZ      r0,|L3.46|
000024  2801              CMP      r0,#1                 ;250
000026  d004              BEQ      |L3.50|
000028  2802              CMP      r0,#2                 ;250
00002a  d108              BNE      |L3.62|
00002c  e004              B        |L3.56|
                  |L3.46|
00002e  2000              MOVS     r0,#0                 ;252
000030  e7f4              B        |L3.28|
                  |L3.50|
000032  f06f002a          MVN      r0,#0x2a              ;253
000036  e7f1              B        |L3.28|
                  |L3.56|
000038  f06f0029          MVN      r0,#0x29              ;254
00003c  e7ee              B        |L3.28|
                  |L3.62|
00003e  2000              MOVS     r0,#0                 ;255
000040  e7ec              B        |L3.28|
                          ENDP

000042  0000              DCW      0x0000
                  |L3.68|
                          DCD      msg_recv

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  customer_file
                          %        552

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00000800
                          DCD      0x00000028
                          DCD      0x00000968
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000800
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=0

                  is_customer_file_fail
000000  01                DCB      0x01

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\kiwi_ft\\asu_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_asu_flash_c_26860424____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_asu_flash_c_26860424____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_asu_flash_c_26860424____REVSH|
#line 144
|__asm___11_asu_flash_c_26860424____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
