; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\asu_cmu.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\asu_cmu.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\BERRY_TWI -I..\..\User\berry_ft -I..\..\User\ft_support -I..\..\User\berry_test -I..\..\User\factory_test -I..\..\User\emenu -I..\..\User\kiwi_ft -I..\..\User\kiwi_ft\spv40 -I..\..\User\kiwi_ft\spv40\peripheral -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\kiwi_ft -I..\..\User\MultiButton-1.1.0 -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.16.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\asu_cmu.crf ..\..\User\kiwi_ft\asu_cmu.c]
                          THUMB

                          AREA ||i.asu_cmu_state||, CODE, READONLY, ALIGN=2

                  asu_cmu_state PROC
;;;41      
;;;42     fsm_rt_t asu_cmu_state(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;43     {
;;;44         
;;;45         static enum
;;;46         {
;;;47             START = 0,    
;;;48             SET_DBIO,        
;;;49             OSC_PMU_TRIM,
;;;50             OSC_CORE_TRIM,
;;;51            // OSC_AUDIO_TRIM,
;;;52     
;;;53         } s_tState = START;
;;;54         fsm_rt_t ret = fsm_rt_cpl;
000002  2400              MOVS     r4,#0
;;;55     
;;;56         switch(s_tState)
000004  4842              LDR      r0,|L1.272|
000006  7800              LDRB     r0,[r0,#0]  ; s_tState
000008  b130              CBZ      r0,|L1.24|
00000a  2801              CMP      r0,#1
00000c  d00a              BEQ      |L1.36|
00000e  2802              CMP      r0,#2
000010  d01f              BEQ      |L1.82|
000012  2803              CMP      r0,#3
000014  d179              BNE      |L1.266|
000016  e046              B        |L1.166|
                  |L1.24|
;;;57         {
;;;58         case START:
;;;59             s_tState++;
000018  483d              LDR      r0,|L1.272|
00001a  7800              LDRB     r0,[r0,#0]  ; s_tState
00001c  1c40              ADDS     r0,r0,#1
00001e  493c              LDR      r1,|L1.272|
000020  7008              STRB     r0,[r1,#0]
;;;60             //break;
;;;61         
;;;62         case SET_DBIO:
000022  bf00              NOP      
                  |L1.36|
;;;63             {
;;;64                 #define GPIO_BASE_ADDR                  0x20090000
;;;65                 #define GPIO_IN0_ADDR                   0x20090110
;;;66                 #define GPIO_PRSTN                      GPIO_BASE_ADDR+0x120
;;;67                 #define GPIO_PTEST                      GPIO_BASE_ADDR+0x124
;;;68                 #define CMU_DBGCTL                      0x200020F8
;;;69                 #define DBIO_CTL                        GPIO_BASE_ADDR+0x300
;;;70                 #define DBIO_OE0                        GPIO_BASE_ADDR+0x310
;;;71                 #define PMU_PWR_CTL                     0x200C0004
;;;72                 #define PMU_TRIM_CTL                    0x200C0014
;;;73                 #define OSC_AUDIO_CTL                   0x20004000
;;;74                 #define OSC_CORE_CTL                    0x20004004
;;;75                 #define DVDD_GLOBAL0                    0x20008000
;;;76                 
;;;77                
;;;78                 asu_write_word(GPIO_PRSTN,  0x0);
000024  2100              MOVS     r1,#0
000026  483b              LDR      r0,|L1.276|
000028  f7fffffe          BL       asu_write_word
;;;79                 asu_write_word(GPIO_PTEST,  0x0);
00002c  2100              MOVS     r1,#0
00002e  4839              LDR      r0,|L1.276|
000030  1d00              ADDS     r0,r0,#4
000032  f7fffffe          BL       asu_write_word
;;;80                 asu_write_word(DBIO_CTL,    (7<<8)|(1<<7)|(1<<0)); //设置DBIO CMU输出 
000036  f2407181          MOV      r1,#0x781
00003a  4837              LDR      r0,|L1.280|
00003c  f7fffffe          BL       asu_write_word
;;;81                 asu_write_word(DBIO_OE0,    (1<<7));
000040  2180              MOVS     r1,#0x80
000042  4835              LDR      r0,|L1.280|
000044  3010              ADDS     r0,r0,#0x10
000046  f7fffffe          BL       asu_write_word
;;;82                 s_tState = OSC_PMU_TRIM;
00004a  2002              MOVS     r0,#2
00004c  4930              LDR      r1,|L1.272|
00004e  7008              STRB     r0,[r1,#0]
;;;83             }
;;;84             break;
000050  e05b              B        |L1.266|
                  |L1.82|
;;;85         
;;;86         case OSC_PMU_TRIM:
;;;87             if( is_test_item(cmu_osc_pmu_item) )    
000052  2002              MOVS     r0,#2
000054  f7fffffe          BL       is_test_item
000058  b1e0              CBZ      r0,|L1.148|
;;;88             {
;;;89                 do
00005a  bf00              NOP      
                  |L1.92|
;;;90                 {
;;;91                     ret = osc_pmu_trim();
00005c  f7fffffe          BL       osc_pmu_trim
000060  4604              MOV      r4,r0
;;;92                 }while(ret == fsm_rt_on_going);
000062  2c01              CMP      r4,#1
000064  d0fa              BEQ      |L1.92|
;;;93                 
;;;94                 if(ret != fsm_rt_cpl)
000066  b124              CBZ      r4,|L1.114|
;;;95                 {
;;;96                     s_tState =START;
000068  2000              MOVS     r0,#0
00006a  4929              LDR      r1,|L1.272|
00006c  7008              STRB     r0,[r1,#0]
;;;97                     return ret;
00006e  4620              MOV      r0,r4
                  |L1.112|
;;;98                 }
;;;99                 logging("SUCCESS Opmu:%d,%d(%d,%d)\r\n", trim_result.osc_pmu_trim_val, 
;;;100                                                            trim_result.osc_pmu_trim_freq,
;;;101                                                            trim_result.osc_pmu_trim_default,
;;;102                                                            trim_result.osc_pmu_trim_freq_default);
;;;103            } 
;;;104            else 
;;;105            {
;;;106                logging("INFO skip Opmu!\r\n");
;;;107            }
;;;108            s_tState = OSC_CORE_TRIM;
;;;109            break;
;;;110            
;;;111        case OSC_CORE_TRIM:  //60M  70M  80M  90M  100M  110M  120M对应的trim值
;;;112            {
;;;113                if( is_test_item(cmu_osc_core_item) )    
;;;114                {
;;;115                    do
;;;116                    {
;;;117                        ret = osc_core_trim();
;;;118                    }while(ret == fsm_rt_on_going);
;;;119                    
;;;120                    if(ret != fsm_rt_cpl)
;;;121                    {
;;;122                        s_tState =START;
;;;123                        return ret;
;;;124                    }
;;;125                    for(uint8_t i=0; i<7; i++)
;;;126                    {
;;;127                        logging("SUCCESS Ocore:%d,%d(%d,%d)\r\n", trim_result.osc_core_trim_val[i], 
;;;128                                                                trim_result.osc_core_trim_freq[i],
;;;129                                                                trim_result.osc_core_trim_default,
;;;130                                                                trim_result.osc_core_trim_freq_default);
;;;131                    }
;;;132                    
;;;133                } 
;;;134                else 
;;;135                {
;;;136                    logging("INFO skip Ocore!\r\n");
;;;137                }
;;;138                s_tState = START;
;;;139               return fsm_rt_cpl;
;;;140            }
;;;141            //break;
;;;142        }
;;;143        return fsm_rt_on_going;
;;;144    }
000070  bd7c              POP      {r2-r6,pc}
                  |L1.114|
000072  482a              LDR      r0,|L1.284|
000074  6b40              LDR      r0,[r0,#0x34]         ;99  ; trim_result
000076  4929              LDR      r1,|L1.284|
000078  f891102e          LDRB     r1,[r1,#0x2e]         ;99  ; trim_result
00007c  e9cd1000          STRD     r1,r0,[sp,#0]         ;99
000080  4826              LDR      r0,|L1.284|
000082  6b03              LDR      r3,[r0,#0x30]         ;99  ; trim_result
000084  f890202c          LDRB     r2,[r0,#0x2c]         ;99  ; trim_result
000088  4825              LDR      r0,|L1.288|
00008a  6801              LDR      r1,[r0,#0]            ;99  ; g_iRunTime
00008c  a025              ADR      r0,|L1.292|
00008e  f7fffffe          BL       logger_buffer_write
000092  e004              B        |L1.158|
                  |L1.148|
000094  4822              LDR      r0,|L1.288|
000096  6801              LDR      r1,[r0,#0]            ;106  ; g_iRunTime
000098  a02b              ADR      r0,|L1.328|
00009a  f7fffffe          BL       logger_buffer_write
                  |L1.158|
00009e  2003              MOVS     r0,#3                 ;108
0000a0  491b              LDR      r1,|L1.272|
0000a2  7008              STRB     r0,[r1,#0]            ;108
0000a4  e031              B        |L1.266|
                  |L1.166|
0000a6  2003              MOVS     r0,#3                 ;113
0000a8  f7fffffe          BL       is_test_item
0000ac  b320              CBZ      r0,|L1.248|
0000ae  bf00              NOP                            ;115
                  |L1.176|
0000b0  f7fffffe          BL       osc_core_trim
0000b4  4604              MOV      r4,r0                 ;117
0000b6  2c01              CMP      r4,#1                 ;118
0000b8  d0fa              BEQ      |L1.176|
0000ba  b124              CBZ      r4,|L1.198|
0000bc  2000              MOVS     r0,#0                 ;122
0000be  4914              LDR      r1,|L1.272|
0000c0  7008              STRB     r0,[r1,#0]            ;122
0000c2  4620              MOV      r0,r4                 ;123
0000c4  e7d4              B        |L1.112|
                  |L1.198|
0000c6  2500              MOVS     r5,#0                 ;125
0000c8  e013              B        |L1.242|
                  |L1.202|
0000ca  4814              LDR      r0,|L1.284|
0000cc  6e00              LDR      r0,[r0,#0x60]         ;127  ; trim_result
0000ce  4913              LDR      r1,|L1.284|
0000d0  f891105c          LDRB     r1,[r1,#0x5c]         ;127  ; trim_result
0000d4  e9cd1000          STRD     r1,r0,[sp,#0]         ;127
0000d8  4810              LDR      r0,|L1.284|
0000da  3040              ADDS     r0,r0,#0x40           ;127
0000dc  f8503025          LDR      r3,[r0,r5,LSL #2]     ;127
0000e0  3808              SUBS     r0,r0,#8              ;127
0000e2  5d42              LDRB     r2,[r0,r5]            ;127
0000e4  480e              LDR      r0,|L1.288|
0000e6  6801              LDR      r1,[r0,#0]            ;127  ; g_iRunTime
0000e8  a01d              ADR      r0,|L1.352|
0000ea  f7fffffe          BL       logger_buffer_write
0000ee  1c68              ADDS     r0,r5,#1              ;125
0000f0  b2c5              UXTB     r5,r0                 ;125
                  |L1.242|
0000f2  2d07              CMP      r5,#7                 ;125
0000f4  dbe9              BLT      |L1.202|
0000f6  e004              B        |L1.258|
                  |L1.248|
0000f8  4809              LDR      r0,|L1.288|
0000fa  6801              LDR      r1,[r0,#0]            ;136  ; g_iRunTime
0000fc  a021              ADR      r0,|L1.388|
0000fe  f7fffffe          BL       logger_buffer_write
                  |L1.258|
000102  2000              MOVS     r0,#0                 ;138
000104  4902              LDR      r1,|L1.272|
000106  7008              STRB     r0,[r1,#0]            ;138
000108  e7b2              B        |L1.112|
                  |L1.266|
00010a  bf00              NOP                            ;84
00010c  2001              MOVS     r0,#1                 ;143
00010e  e7af              B        |L1.112|
;;;145    
                          ENDP

                  |L1.272|
                          DCD      s_tState
                  |L1.276|
                          DCD      0x20090120
                  |L1.280|
                          DCD      0x20090300
                  |L1.284|
                          DCD      trim_result
                  |L1.288|
                          DCD      g_iRunTime
                  |L1.292|
000124  5b253864          DCB      "[%8d]SUCCESS Opmu:%d,%d(%d,%d)\r\n",0
000128  5d535543
00012c  43455353
000130  204f706d
000134  753a2564
000138  2c256428
00013c  25642c25
000140  64290d0a
000144  00      
000145  00                DCB      0
000146  00                DCB      0
000147  00                DCB      0
                  |L1.328|
000148  5b253864          DCB      "[%8d]INFO skip Opmu!\r\n",0
00014c  5d494e46
000150  4f20736b
000154  6970204f
000158  706d7521
00015c  0d0a00  
00015f  00                DCB      0
                  |L1.352|
000160  5b253864          DCB      "[%8d]SUCCESS Ocore:%d,%d(%d,%d)\r\n",0
000164  5d535543
000168  43455353
00016c  204f636f
000170  72653a25
000174  642c2564
000178  2825642c
00017c  2564290d
000180  0a00    
000182  00                DCB      0
000183  00                DCB      0
                  |L1.388|
000184  5b253864          DCB      "[%8d]INFO skip Ocore!\r\n",0
000188  5d494e46
00018c  4f20736b
000190  6970204f
000194  636f7265
000198  210d0a00

                          AREA ||i.core_binary_search||, CODE, READONLY, ALIGN=2

                  core_binary_search PROC
;;;398    */
;;;399    static void core_binary_search(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;400    {
000004  b087              SUB      sp,sp,#0x1c
;;;401        uint32_t(*trim_set)(uint8_t )  = core_search.trim_val_set;
000006  483d              LDR      r0,|L2.252|
000008  f8d0a01c          LDR      r10,[r0,#0x1c]  ; core_search
;;;402        uint8_t dir                 = core_search.dir;
00000c  f890b053          LDRB     r11,[r0,#0x53]  ; core_search
;;;403        uint32_t min_diff[7]        = {UINT32_MAX,UINT32_MAX,UINT32_MAX,UINT32_MAX,UINT32_MAX,UINT32_MAX,UINT32_MAX};
000010  221c              MOVS     r2,#0x1c
000012  493b              LDR      r1,|L2.256|
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __aeabi_memcpy4
;;;404        
;;;405        uint8_t mid;
;;;406        uint32_t mid_freq;
;;;407        
;;;408        for(int8_t i=6; i>=0; i--)
00001a  2606              MOVS     r6,#6
00001c  e068              B        |L2.240|
                  |L2.30|
;;;409        {
;;;410            uint32_t tar    = core_search.tar[i];
00001e  4837              LDR      r0,|L2.252|
000020  f8509026          LDR      r9,[r0,r6,LSL #2]
;;;411            uint8_t high    = core_search.trim_val_hi[i];
000024  3027              ADDS     r0,r0,#0x27
000026  5d87              LDRB     r7,[r0,r6]
;;;412            uint8_t low     = core_search.trim_val_low[i];
000028  1fc0              SUBS     r0,r0,#7
00002a  f8108006          LDRB     r8,[r0,r6]
;;;413           // debug("INFO core_freq_calcu[%d]\r\n",i*10+60);
;;;414            while (low <= high) 
00002e  e05a              B        |L2.230|
                  |L2.48|
;;;415            {
;;;416                mid = (low + high) / 2;
000030  eb080007          ADD      r0,r8,r7
000034  eb0071d0          ADD      r1,r0,r0,LSR #31
000038  f3c10447          UBFX     r4,r1,#1,#8
;;;417                mid_freq = trim_set(mid);
00003c  4620              MOV      r0,r4
00003e  47d0              BLX      r10
000040  4605              MOV      r5,r0
;;;418               // logging("mid=%3d, low=%3d, high=%3d, mid_freq=%8d\r\n",mid,low,high,mid_freq);
;;;419                
;;;420                for(int8_t k=i; k>=0; k--)
000042  4630              MOV      r0,r6
000044  e031              B        |L2.170|
                  |L2.70|
;;;421                {
;;;422                    uint32_t diff = (mid_freq > core_search.tar[k])?(mid_freq-core_search.tar[k]):(core_search.tar[k]-mid_freq);         //当前频率与目标频率的差值
000046  4a2d              LDR      r2,|L2.252|
000048  f8522020          LDR      r2,[r2,r0,LSL #2]
00004c  42aa              CMP      r2,r5
00004e  d204              BCS      |L2.90|
000050  4a2a              LDR      r2,|L2.252|
000052  f8522020          LDR      r2,[r2,r0,LSL #2]
000056  1aaa              SUBS     r2,r5,r2
000058  e003              B        |L2.98|
                  |L2.90|
00005a  4a28              LDR      r2,|L2.252|
00005c  f8522020          LDR      r2,[r2,r0,LSL #2]
000060  1b52              SUBS     r2,r2,r5
                  |L2.98|
000062  4611              MOV      r1,r2
;;;423                    if (diff < min_diff[k]) 
000064  f85d2020          LDR      r2,[sp,r0,LSL #2]
000068  428a              CMP      r2,r1
00006a  d91c              BLS      |L2.166|
;;;424                    {
;;;425                        min_diff[k] = diff;
00006c  f84d1020          STR      r1,[sp,r0,LSL #2]
;;;426                        core_search.trim_val_low[k] = low;
000070  4a22              LDR      r2,|L2.252|
000072  3220              ADDS     r2,r2,#0x20
000074  f8028000          STRB     r8,[r2,r0]
;;;427                        core_search.trim_val_hi[k] = high;
000078  1dd2              ADDS     r2,r2,#7
00007a  5417              STRB     r7,[r2,r0]
;;;428                        
;;;429                        core_search.best_trim_val[k]  = mid;
00007c  3225              ADDS     r2,r2,#0x25
00007e  5414              STRB     r4,[r2,r0]
;;;430                        core_search.best_trim_freq[k] = mid_freq;
000080  3a1c              SUBS     r2,r2,#0x1c
000082  f8425020          STR      r5,[r2,r0,LSL #2]
;;;431                        
;;;432                        if (mid_freq < core_search.tar[k]) 
000086  3a30              SUBS     r2,r2,#0x30
000088  f8522020          LDR      r2,[r2,r0,LSL #2]
00008c  42aa              CMP      r2,r5
00008e  d905              BLS      |L2.156|
;;;433                        {
;;;434                            core_search.trim_val_low[k] = mid + 1;
000090  1c62              ADDS     r2,r4,#1
000092  b2d3              UXTB     r3,r2
000094  4a19              LDR      r2,|L2.252|
000096  3220              ADDS     r2,r2,#0x20
000098  5413              STRB     r3,[r2,r0]
00009a  e004              B        |L2.166|
                  |L2.156|
;;;435                        } 
;;;436                        else 
;;;437                        {
;;;438                            core_search.trim_val_hi[k] = mid - 1;
00009c  1e62              SUBS     r2,r4,#1
00009e  b2d3              UXTB     r3,r2
0000a0  4a16              LDR      r2,|L2.252|
0000a2  3227              ADDS     r2,r2,#0x27
0000a4  5413              STRB     r3,[r2,r0]
                  |L2.166|
0000a6  1e41              SUBS     r1,r0,#1              ;420
0000a8  b248              SXTB     r0,r1                 ;420
                  |L2.170|
0000aa  2800              CMP      r0,#0                 ;420
0000ac  dacb              BGE      |L2.70|
;;;439                        }
;;;440       
;;;441                    }
;;;442                }
;;;443                
;;;444                if (mid_freq == tar ) 
0000ae  454d              CMP      r5,r9
0000b0  d100              BNE      |L2.180|
;;;445                {
;;;446                    break;//return mid;
0000b2  e01a              B        |L2.234|
                  |L2.180|
;;;447                } 
;;;448                else if((mid == low) && (mid== high)) /* low mid high三个数为同一值，穷举完毕 */
0000b4  4544              CMP      r4,r8
0000b6  d102              BNE      |L2.190|
0000b8  42bc              CMP      r4,r7
0000ba  d100              BNE      |L2.190|
;;;449                {
;;;450                    break;
0000bc  e015              B        |L2.234|
                  |L2.190|
;;;451                }
;;;452                else 
;;;453                {
;;;454                    if(dir)
0000be  f1bb0f00          CMP      r11,#0
0000c2  d008              BEQ      |L2.214|
;;;455                    {
;;;456                        if (mid_freq < tar) 
0000c4  454d              CMP      r5,r9
0000c6  d203              BCS      |L2.208|
;;;457                        {
;;;458                            low = mid + 1;
0000c8  1c60              ADDS     r0,r4,#1
0000ca  f00008ff          AND      r8,r0,#0xff
0000ce  e00a              B        |L2.230|
                  |L2.208|
;;;459                        } 
;;;460                        else 
;;;461                        {
;;;462                            high = mid - 1;
0000d0  1e60              SUBS     r0,r4,#1
0000d2  b2c7              UXTB     r7,r0
0000d4  e007              B        |L2.230|
                  |L2.214|
;;;463                        }
;;;464                    }
;;;465                    else
;;;466                    {
;;;467                        if (mid_freq < tar) 
0000d6  454d              CMP      r5,r9
0000d8  d202              BCS      |L2.224|
;;;468                        {
;;;469                           
;;;470                            high = mid - 1;
0000da  1e60              SUBS     r0,r4,#1
0000dc  b2c7              UXTB     r7,r0
0000de  e002              B        |L2.230|
                  |L2.224|
;;;471                        } 
;;;472                        else 
;;;473                        {
;;;474                            low = mid + 1;
0000e0  1c60              ADDS     r0,r4,#1
0000e2  f00008ff          AND      r8,r0,#0xff
                  |L2.230|
0000e6  45b8              CMP      r8,r7                 ;414
0000e8  dda2              BLE      |L2.48|
                  |L2.234|
0000ea  bf00              NOP                            ;446
0000ec  1e70              SUBS     r0,r6,#1              ;408
0000ee  b246              SXTB     r6,r0                 ;408
                  |L2.240|
0000f0  2e00              CMP      r6,#0                 ;408
0000f2  da94              BGE      |L2.30|
;;;475                        }
;;;476                    }
;;;477                }
;;;478            }
;;;479        }
;;;480    }
0000f4  b007              ADD      sp,sp,#0x1c
0000f6  e8bd8ff0          POP      {r4-r11,pc}
;;;481    
                          ENDP

0000fa  0000              DCW      0x0000
                  |L2.252|
                          DCD      core_search
                  |L2.256|
                          DCD      ||.constdata||+0x38

                          AREA ||i.freq_binary_search||, CODE, READONLY, ALIGN=1

                  freq_binary_search PROC
;;;328    //dir 考虑 trim增大与频率增大是否通向
;;;329    static void freq_binary_search(freq_search_t*  freq_search_struct)
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;330    {
000004  4606              MOV      r6,r0
;;;331        uint32_t tar                = (*freq_search_struct).tar;
000006  6837              LDR      r7,[r6,#0]
;;;332        uint32_t(*trim_set)(uint8_t )  = (*freq_search_struct).trim_val_set;
000008  f8d6b004          LDR      r11,[r6,#4]
;;;333        uint8_t high                = (*freq_search_struct).trim_val_hi;
00000c  f8968009          LDRB     r8,[r6,#9]
;;;334        uint8_t low                 = (*freq_search_struct).trim_val_low;
000010  f8969008          LDRB     r9,[r6,#8]
;;;335        uint8_t dir                 = (*freq_search_struct).dir;
000014  7c70              LDRB     r0,[r6,#0x11]
000016  9001              STR      r0,[sp,#4]
;;;336        uint8_t mid;
;;;337        uint32_t mid_freq;
;;;338        uint32_t min_diff           = tar;
000018  9700              STR      r7,[sp,#0]
;;;339      
;;;340        
;;;341        while (low <= high) 
00001a  e033              B        |L3.132|
                  |L3.28|
;;;342        {
;;;343            mid = (low + high) / 2;
00001c  eb090008          ADD      r0,r9,r8
000020  eb0071d0          ADD      r1,r0,r0,LSR #31
000024  f3c10447          UBFX     r4,r1,#1,#8
;;;344            mid_freq = trim_set(mid);
000028  4620              MOV      r0,r4
00002a  47d8              BLX      r11
00002c  4605              MOV      r5,r0
;;;345            //logging("mid=%3d, low=%3d, high=%3d, mid_freq=%8d\r\n",mid,low,high,mid_freq);
;;;346            
;;;347            uint32_t diff = (mid_freq > tar)?(mid_freq-tar):(tar-mid_freq);         //当前频率与目标频率的差值
00002e  42bd              CMP      r5,r7
000030  d901              BLS      |L3.54|
000032  1be8              SUBS     r0,r5,r7
000034  e000              B        |L3.56|
                  |L3.54|
000036  1b78              SUBS     r0,r7,r5
                  |L3.56|
000038  4682              MOV      r10,r0
;;;348            if (diff < min_diff) 
00003a  9800              LDR      r0,[sp,#0]
00003c  4582              CMP      r10,r0
00003e  d203              BCS      |L3.72|
;;;349            {
;;;350                min_diff = diff;
000040  f8cda000          STR      r10,[sp,#0]
;;;351                (*freq_search_struct).best_trim_val  = mid;
000044  7434              STRB     r4,[r6,#0x10]
;;;352                (*freq_search_struct).best_trim_freq = mid_freq;
000046  60f5              STR      r5,[r6,#0xc]
                  |L3.72|
;;;353            }
;;;354            
;;;355            
;;;356            if (mid_freq == tar ) 
000048  42bd              CMP      r5,r7
00004a  d100              BNE      |L3.78|
;;;357            {
;;;358                break;//return mid;
00004c  e01c              B        |L3.136|
                  |L3.78|
;;;359            } 
;;;360            else if((mid == low) && (mid== high)) /* low mid high三个数为同一值，穷举完毕 */
00004e  454c              CMP      r4,r9
000050  d102              BNE      |L3.88|
000052  4544              CMP      r4,r8
000054  d100              BNE      |L3.88|
;;;361            {
;;;362                break;
000056  e017              B        |L3.136|
                  |L3.88|
;;;363            }
;;;364            else 
;;;365            {
;;;366                if(dir)
000058  9801              LDR      r0,[sp,#4]
00005a  b148              CBZ      r0,|L3.112|
;;;367                {
;;;368                    if (mid_freq < tar) 
00005c  42bd              CMP      r5,r7
00005e  d203              BCS      |L3.104|
;;;369                    {
;;;370                        low = mid + 1;
000060  1c60              ADDS     r0,r4,#1
000062  f00009ff          AND      r9,r0,#0xff
000066  e00c              B        |L3.130|
                  |L3.104|
;;;371                    } 
;;;372                    else 
;;;373                    {
;;;374                        high = mid - 1;
000068  1e60              SUBS     r0,r4,#1
00006a  f00008ff          AND      r8,r0,#0xff
00006e  e008              B        |L3.130|
                  |L3.112|
;;;375                    }
;;;376                }
;;;377                else
;;;378                {
;;;379                    if (mid_freq < tar) 
000070  42bd              CMP      r5,r7
000072  d203              BCS      |L3.124|
;;;380                    {
;;;381                       
;;;382                        high = mid - 1;
000074  1e60              SUBS     r0,r4,#1
000076  f00008ff          AND      r8,r0,#0xff
00007a  e002              B        |L3.130|
                  |L3.124|
;;;383                    } 
;;;384                    else 
;;;385                    {
;;;386                        low = mid + 1;
00007c  1c60              ADDS     r0,r4,#1
00007e  f00009ff          AND      r9,r0,#0xff
                  |L3.130|
;;;387                    }
;;;388                }
;;;389            }
;;;390        }
000082  bf00              NOP      
                  |L3.132|
000084  45c1              CMP      r9,r8                 ;341
000086  ddc9              BLE      |L3.28|
                  |L3.136|
000088  bf00              NOP                            ;358
;;;391    }
00008a  e8bd9ffc          POP      {r2-r12,pc}
;;;392    
                          ENDP


                          AREA ||i.osc_audio_trim||, CODE, READONLY, ALIGN=2

                  osc_audio_trim PROC
;;;147    //返回频率， 0 表示没有合适的trim值 
;;;148    fsm_rt_t osc_audio_trim(void)
000000  b510              PUSH     {r4,lr}
;;;149    {
000002  b086              SUB      sp,sp,#0x18
;;;150        fsm_rt_t ret;
;;;151        
;;;152    //    uint32_t volt_freq_min[4]; //不同电压对应的频率最小值（ trim = 0时）
;;;153    //    uint32_t volt_freq_max[4]; //不同电压对应的频率最大值（ trim = 127时）
;;;154    //    uint32_t volt_freq_mid[4]; //不同电压对应的频率中间值 
;;;155        freq_search_t freq_search;
;;;156    
;;;157       // asu_write_word(CMU_DBGCTL,  (7<<8) | (2<<0));  //设置128分频 和 选择输出的CMU类型：OSC_AUDIO
;;;158        trim_result.osc_audio_trim_default = OSC_AUDIO_TRIM_DEFAULT;
000004  2020              MOVS     r0,#0x20
000006  4923              LDR      r1,|L4.148|
000008  f8810022          STRB     r0,[r1,#0x22]
;;;159        ret = osc_audio_trim_spl_set(trim_result.osc_audio_trim_default);
00000c  f8910022          LDRB     r0,[r1,#0x22]  ; trim_result
000010  f7fffffe          BL       osc_audio_trim_spl_set
000014  4604              MOV      r4,r0
;;;160        if(ret != fsm_rt_cpl) return ret;
000016  b114              CBZ      r4,|L4.30|
000018  4620              MOV      r0,r4
                  |L4.26|
;;;161        trim_result.osc_audio_trim_freq_default = osc_freq_get()*128;//获取默认trim值和频率
;;;162     
;;;163        /* trim值高的线性段区域二分法查找 ：osc_dev 存在trim值=64的时候，非线性折回的问题 */
;;;164        freq_search.tar      = OSC_AUDIO_FREQ_TARGET;
;;;165        freq_search.trim_val_set = osc_audio_trim_set;
;;;166        freq_search.dir = 1;  //trim值越大 频率越小
;;;167        freq_search.trim_val_low = 0;
;;;168        freq_search.trim_val_hi  = OSC_AUDIO_TRIM_MAX;
;;;169        freq_binary_search(&freq_search);
;;;170        
;;;171        
;;;172        if((freq_search.best_trim_freq <= OSC_AUDIO_FREQ_MAX) &&  (freq_search.best_trim_freq >= OSC_AUDIO_FREQ_MIN))
;;;173        {
;;;174            //已找到符合要求的值，无需再对trim低的线性区查找
;;;175            trim_result.pass_osc_audio_trim = 1; 
;;;176            trim_result.osc_audio_trim_val  = freq_search.best_trim_val;
;;;177            trim_result.osc_audio_trim_freq = freq_search.best_trim_freq;
;;;178            osc_audio_trim_spl_set(trim_result.osc_audio_trim_val); 
;;;179           // return asu_write_word(OSC_AUDIO_CTL, (1<<8)|(trim_result.osc_audio_trim_val<<0));//OSC_AUDIO_CTL值设置
;;;180            //asu_write((uint32_t)&AON_OSC->TRIM, &osc_ft_temp.TRIM, 1); //写入已得到的最佳值
;;;181            return fsm_rt_cpl;
;;;182        }
;;;183        else
;;;184        {
;;;185            trim_result.fail_osc_audio_trim = 1;                               //osc_dev 没有符合要求的trim值
;;;186            return fsm_rt_err_osc_audio;
;;;187         
;;;188        } 
;;;189        //}
;;;190     
;;;191    }
00001a  b006              ADD      sp,sp,#0x18
00001c  bd10              POP      {r4,pc}
                  |L4.30|
00001e  f7fffffe          BL       osc_freq_get
000022  01c0              LSLS     r0,r0,#7              ;161
000024  491b              LDR      r1,|L4.148|
000026  6288              STR      r0,[r1,#0x28]         ;161  ; trim_result
000028  481b              LDR      r0,|L4.152|
00002a  9001              STR      r0,[sp,#4]            ;164
00002c  481b              LDR      r0,|L4.156|
00002e  9002              STR      r0,[sp,#8]            ;165
000030  2001              MOVS     r0,#1                 ;166
000032  f88d0015          STRB     r0,[sp,#0x15]         ;166
000036  2000              MOVS     r0,#0                 ;167
000038  f88d000c          STRB     r0,[sp,#0xc]          ;167
00003c  203f              MOVS     r0,#0x3f              ;168
00003e  f88d000d          STRB     r0,[sp,#0xd]          ;168
000042  a801              ADD      r0,sp,#4              ;169
000044  f7fffffe          BL       freq_binary_search
000048  4915              LDR      r1,|L4.160|
00004a  9804              LDR      r0,[sp,#0x10]         ;172
00004c  4288              CMP      r0,r1                 ;172
00004e  d816              BHI      |L4.126|
000050  4914              LDR      r1,|L4.164|
000052  9804              LDR      r0,[sp,#0x10]         ;172
000054  4288              CMP      r0,r1                 ;172
000056  d312              BCC      |L4.126|
000058  480e              LDR      r0,|L4.148|
00005a  6800              LDR      r0,[r0,#0]            ;175  ; trim_result
00005c  f0200008          BIC      r0,r0,#8              ;175
000060  3008              ADDS     r0,r0,#8              ;175
000062  490c              LDR      r1,|L4.148|
000064  6008              STR      r0,[r1,#0]            ;175  ; trim_result
000066  f89d0014          LDRB     r0,[sp,#0x14]         ;176
00006a  f8810020          STRB     r0,[r1,#0x20]         ;176
00006e  9804              LDR      r0,[sp,#0x10]         ;177
000070  6248              STR      r0,[r1,#0x24]         ;177  ; trim_result
000072  f8910020          LDRB     r0,[r1,#0x20]         ;178  ; trim_result
000076  f7fffffe          BL       osc_audio_trim_spl_set
00007a  2000              MOVS     r0,#0                 ;181
00007c  e7cd              B        |L4.26|
                  |L4.126|
00007e  4805              LDR      r0,|L4.148|
000080  6840              LDR      r0,[r0,#4]            ;185  ; trim_result
000082  f0200008          BIC      r0,r0,#8              ;185
000086  3008              ADDS     r0,r0,#8              ;185
000088  4902              LDR      r1,|L4.148|
00008a  6048              STR      r0,[r1,#4]            ;185  ; trim_result
00008c  f06f000e          MVN      r0,#0xe               ;186
000090  e7c3              B        |L4.26|
;;;192    
                          ENDP

000092  0000              DCW      0x0000
                  |L4.148|
                          DCD      trim_result
                  |L4.152|
                          DCD      0x02ee0000
                  |L4.156|
                          DCD      osc_audio_trim_set
                  |L4.160|
                          DCD      0x03137da8
                  |L4.164|
                          DCD      0x02c87e70

                          AREA ||i.osc_audio_trim_set||, CODE, READONLY, ALIGN=1

                  osc_audio_trim_set PROC
;;;306    //设置trim值，返回频率
;;;307    static uint32_t osc_audio_trim_set(uint8_t val)
000000  b510              PUSH     {r4,lr}
;;;308    {
000002  4604              MOV      r4,r0
;;;309        osc_audio_trim_spl_set(val);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       osc_audio_trim_spl_set
;;;310        return osc_freq_get()*128; 
00000a  f7fffffe          BL       osc_freq_get
00000e  01c0              LSLS     r0,r0,#7
;;;311    }
000010  bd10              POP      {r4,pc}
;;;312    
                          ENDP


                          AREA ||i.osc_core_trim||, CODE, READONLY, ALIGN=2

                  osc_core_trim PROC
;;;253    //返回频率， 0 表示没有合适的trim值 
;;;254    static fsm_rt_t osc_core_trim(void)
000000  b510              PUSH     {r4,lr}
;;;255    {
;;;256       
;;;257        trim_result.osc_core_trim_default = OSC_CORE_TRIM_DEFAULT;
000002  2040              MOVS     r0,#0x40
000004  4938              LDR      r1,|L6.232|
000006  f881005c          STRB     r0,[r1,#0x5c]
;;;258        asu_write_word(OSC_CORE_CTL,  (1<<8)|(OSC_CORE_TRIM_DEFAULT<<0));//OSC_CORE_CTL值设置
00000a  f44f71a0          MOV      r1,#0x140
00000e  4837              LDR      r0,|L6.236|
000010  f7fffffe          BL       asu_write_word
;;;259        asu_write_word(CMU_DBGCTL,  (7<<8)|(3<<0));  //设置分频 和 选择输出的CMU类型：OSC_CORE
000014  f2407103          MOV      r1,#0x703
000018  4835              LDR      r0,|L6.240|
00001a  f7fffffe          BL       asu_write_word
;;;260     
;;;261        trim_result.osc_core_trim_freq_default = osc_freq_get()*128;
00001e  f7fffffe          BL       osc_freq_get
000022  01c0              LSLS     r0,r0,#7
000024  4930              LDR      r1,|L6.232|
000026  6608              STR      r0,[r1,#0x60]  ; trim_result
;;;262        
;;;263        
;;;264        core_search.trim_val_set = osc_core_trim_set;
000028  4832              LDR      r0,|L6.244|
00002a  4933              LDR      r1,|L6.248|
00002c  61c8              STR      r0,[r1,#0x1c]  ; core_search
;;;265        core_search.dir          = 1;//trim值越大，频率越大
00002e  2001              MOVS     r0,#1
000030  f8810053          STRB     r0,[r1,#0x53]
;;;266        for(uint8_t i=0; i<7; i++)
000034  2000              MOVS     r0,#0
000036  e010              B        |L6.90|
                  |L6.56|
;;;267        {
;;;268            core_search.tar[i]           = OSC_CORE_FREQ_TARGET_START + i*10000000;
000038  4930              LDR      r1,|L6.252|
00003a  4341              MULS     r1,r0,r1
00003c  4a30              LDR      r2,|L6.256|
00003e  eb0211c1          ADD      r1,r2,r1,LSL #7
000042  4a2d              LDR      r2,|L6.248|
000044  f8421020          STR      r1,[r2,r0,LSL #2]
;;;269            core_search.trim_val_low[i] = 0;
000048  2200              MOVS     r2,#0
00004a  492b              LDR      r1,|L6.248|
00004c  3120              ADDS     r1,r1,#0x20
00004e  540a              STRB     r2,[r1,r0]
;;;270            core_search.trim_val_hi[i]  = OSC_CORE_TRIM_MAX;
000050  227f              MOVS     r2,#0x7f
000052  1dc9              ADDS     r1,r1,#7
000054  540a              STRB     r2,[r1,r0]
000056  1c41              ADDS     r1,r0,#1              ;266
000058  b2c8              UXTB     r0,r1                 ;266
                  |L6.90|
00005a  2807              CMP      r0,#7                 ;266
00005c  dbec              BLT      |L6.56|
;;;271        }
;;;272    
;;;273       core_binary_search(); //二分法查找
00005e  f7fffffe          BL       core_binary_search
;;;274    //    for(uint32_t i=0; i<=OSC_CORE_TRIM_MAX; i++)
;;;275    //    {
;;;276    //        uint32_t freq=osc_core_trim_set(i);
;;;277    //        debug("core[%d] = %7d Hz\r\n",i,freq);
;;;278    //    }
;;;279        
;;;280        for(uint8_t i=0; i<7; i++)
000062  2400              MOVS     r4,#0
000064  e033              B        |L6.206|
                  |L6.102|
;;;281        {
;;;282            if((core_search.best_trim_freq[i] <= core_freq_tar_max[i])  && (core_search.best_trim_freq[i] >= core_freq_tar_min[i]))
000066  4824              LDR      r0,|L6.248|
000068  3030              ADDS     r0,r0,#0x30
00006a  f8500024          LDR      r0,[r0,r4,LSL #2]
00006e  4925              LDR      r1,|L6.260|
000070  f8511024          LDR      r1,[r1,r4,LSL #2]
000074  4288              CMP      r0,r1
000076  d828              BHI      |L6.202|
000078  481f              LDR      r0,|L6.248|
00007a  3030              ADDS     r0,r0,#0x30
00007c  f8500024          LDR      r0,[r0,r4,LSL #2]
000080  4921              LDR      r1,|L6.264|
000082  f8511024          LDR      r1,[r1,r4,LSL #2]
000086  4288              CMP      r0,r1
000088  d31f              BCC      |L6.202|
;;;283            {
;;;284                trim_result.osc_core_trim_val[i]  = core_search.best_trim_val[i];
00008a  481b              LDR      r0,|L6.248|
00008c  304c              ADDS     r0,r0,#0x4c
00008e  5d01              LDRB     r1,[r0,r4]
000090  4815              LDR      r0,|L6.232|
000092  3038              ADDS     r0,r0,#0x38
000094  5501              STRB     r1,[r0,r4]
;;;285                trim_result.osc_core_trim_freq[i] = core_search.best_trim_freq[i];
000096  4818              LDR      r0,|L6.248|
000098  3030              ADDS     r0,r0,#0x30
00009a  f8501024          LDR      r1,[r0,r4,LSL #2]
00009e  4812              LDR      r0,|L6.232|
0000a0  3040              ADDS     r0,r0,#0x40
0000a2  f8401024          STR      r1,[r0,r4,LSL #2]
;;;286                if(i==6)
0000a6  2c06              CMP      r4,#6
0000a8  d10f              BNE      |L6.202|
;;;287                {
;;;288                    trim_result.pass_osc_core_trim = 1;
0000aa  3840              SUBS     r0,r0,#0x40
0000ac  6800              LDR      r0,[r0,#0]  ; trim_result
0000ae  f0200020          BIC      r0,r0,#0x20
0000b2  3020              ADDS     r0,r0,#0x20
0000b4  490c              LDR      r1,|L6.232|
0000b6  6008              STR      r0,[r1,#0]  ; trim_result
;;;289                    return asu_write_word(OSC_CORE_CTL,  (1<<8) | trim_result.osc_core_trim_val[0]); 
0000b8  4608              MOV      r0,r1
0000ba  f8900038          LDRB     r0,[r0,#0x38]  ; trim_result
0000be  f4407180          ORR      r1,r0,#0x100
0000c2  480a              LDR      r0,|L6.236|
0000c4  f7fffffe          BL       asu_write_word
                  |L6.200|
;;;290                }                
;;;291            }
;;;292        }
;;;293    
;;;294        trim_result.fail_osc_core_trim = 1;
;;;295        return fsm_rt_err_osc_core;
;;;296    }
0000c8  bd10              POP      {r4,pc}
                  |L6.202|
0000ca  1c60              ADDS     r0,r4,#1              ;280
0000cc  b2c4              UXTB     r4,r0                 ;280
                  |L6.206|
0000ce  2c07              CMP      r4,#7                 ;280
0000d0  dbc9              BLT      |L6.102|
0000d2  4805              LDR      r0,|L6.232|
0000d4  6840              LDR      r0,[r0,#4]            ;294  ; trim_result
0000d6  f0200020          BIC      r0,r0,#0x20           ;294
0000da  3020              ADDS     r0,r0,#0x20           ;294
0000dc  4902              LDR      r1,|L6.232|
0000de  6048              STR      r0,[r1,#4]            ;294  ; trim_result
0000e0  f06f0010          MVN      r0,#0x10              ;295
0000e4  e7f0              B        |L6.200|
;;;297    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L6.232|
                          DCD      trim_result
                  |L6.236|
                          DCD      0x20004004
                  |L6.240|
                          DCD      0x200020f8
                  |L6.244|
                          DCD      osc_core_trim_set
                  |L6.248|
                          DCD      core_search
                  |L6.252|
                          DCD      0x0001312d
                  |L6.256|
                          DCD      0x03938700
                  |L6.260|
                          DCD      core_freq_tar_max
                  |L6.264|
                          DCD      core_freq_tar_min

                          AREA ||i.osc_core_trim_set||, CODE, READONLY, ALIGN=2

                  osc_core_trim_set PROC
;;;315    //设置trim值，返回频率
;;;316    static uint32_t osc_core_trim_set(uint8_t val)
000000  b510              PUSH     {r4,lr}
;;;317    {
000002  4604              MOV      r4,r0
;;;318        asu_write_word(OSC_CORE_CTL,  (1<<8)|(val<<0));//OSC_CORE_CTL值设置
000004  f4447180          ORR      r1,r4,#0x100
000008  4803              LDR      r0,|L7.24|
00000a  f7fffffe          BL       asu_write_word
;;;319        return osc_freq_get()*128; 
00000e  f7fffffe          BL       osc_freq_get
000012  01c0              LSLS     r0,r0,#7
;;;320    }
000014  bd10              POP      {r4,pc}
;;;321    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      0x20004004

                          AREA ||i.osc_freq_get||, CODE, READONLY, ALIGN=1

                  osc_freq_get PROC
;;;482    
;;;483    static uint32_t osc_freq_get(void)
000000  b510              PUSH     {r4,lr}
;;;484    {
;;;485        uint32_t osc_dev_freq;                                                      //频率
;;;486        
;;;487    //    pwm_measure_reset();                                                        //复位脉冲计数
;;;488        pwm_measure_start();                                                        // 启动定时器捕获
000002  f7fffffe          BL       pwm_measure_start
;;;489        set_tick(20000);                                                            //定时50ms
000006  f6446020          MOV      r0,#0x4e20
00000a  f7fffffe          BL       set_tick
;;;490        wait_tick();                                                                //等待50ms结束
00000e  f7fffffe          BL       wait_tick
;;;491        osc_dev_freq  = pwm_measure_stop();                                         // 读取计数脉冲值
000012  f7fffffe          BL       pwm_measure_stop
000016  4604              MOV      r4,r0
;;;492        reset_tick();                                                               //复位定时
000018  f7fffffe          BL       reset_tick
;;;493        osc_dev_freq *= 50;                                                         //计算脉冲频率（128分频后）
00001c  2032              MOVS     r0,#0x32
00001e  4344              MULS     r4,r0,r4
;;;494        osc_dev_freq *= 1;                                                        //实际振荡频率
000020  bf00              NOP      
;;;495       
;;;496        return osc_dev_freq;
000022  4620              MOV      r0,r4
;;;497    }
000024  bd10              POP      {r4,pc}
;;;498    
                          ENDP


                          AREA ||i.osc_pmu_trim||, CODE, READONLY, ALIGN=2

                  osc_pmu_trim PROC
;;;194    //返回频率， 0 表示没有合适的trim值 
;;;195    static fsm_rt_t osc_pmu_trim(void)
000000  b500              PUSH     {lr}
;;;196    {
000002  b085              SUB      sp,sp,#0x14
;;;197        freq_search_t freq_search;
;;;198        
;;;199        asu_write_word(CMU_DBGCTL,  (1<<0));  //设置不分频 和 选择输出的CMU类型：OSC_PMU
000004  2101              MOVS     r1,#1
000006  482b              LDR      r0,|L9.180|
000008  f7fffffe          BL       asu_write_word
;;;200        
;;;201        asu_read_word(PMU_TRIM_CTL, &pmu_trim_ctl);
00000c  492a              LDR      r1,|L9.184|
00000e  482b              LDR      r0,|L9.188|
000010  f7fffffe          BL       asu_read_word
;;;202        trim_result.osc_pmu_trim_power_on = (pmu_trim_ctl>>8)&0x3f; //读出上电后的 osc_pmu_trim值
000014  4828              LDR      r0,|L9.184|
000016  8800              LDRH     r0,[r0,#0]  ; pmu_trim_ctl
000018  f3c02005          UBFX     r0,r0,#8,#6
00001c  4928              LDR      r1,|L9.192|
00001e  f881002d          STRB     r0,[r1,#0x2d]
;;;203        trim_result.osc_pmu_trim_default  = OSC_PMU_TRIM_DEFAULT;
000022  2030              MOVS     r0,#0x30
000024  f881002e          STRB     r0,[r1,#0x2e]
;;;204        trim_result.osc_pmu_trim_freq_default = osc_pmu_trim_set(trim_result.osc_pmu_trim_default);
000028  f891002e          LDRB     r0,[r1,#0x2e]  ; trim_result
00002c  f7fffffe          BL       osc_pmu_trim_set
000030  4923              LDR      r1,|L9.192|
000032  6348              STR      r0,[r1,#0x34]  ; trim_result
;;;205        
;;;206        freq_search.tar          = OSC_PMU_FREQ_TARGET;
000034  f44f40fa          MOV      r0,#0x7d00
000038  9000              STR      r0,[sp,#0]
;;;207        freq_search.trim_val_set = osc_pmu_trim_set;
00003a  4822              LDR      r0,|L9.196|
00003c  9001              STR      r0,[sp,#4]
;;;208        freq_search.dir          = 0;//trim值越大，频率越小
00003e  2000              MOVS     r0,#0
000040  f88d0011          STRB     r0,[sp,#0x11]
;;;209        freq_search.trim_val_low = 0;
000044  f88d0008          STRB     r0,[sp,#8]
;;;210        freq_search.trim_val_hi  = OSC_PMU_TRIM_MAX;
000048  203f              MOVS     r0,#0x3f
00004a  f88d0009          STRB     r0,[sp,#9]
;;;211        
;;;212        freq_binary_search(&freq_search); //换一个trim值区间 继续二分法查找
00004e  4668              MOV      r0,sp
000050  f7fffffe          BL       freq_binary_search
;;;213        
;;;214        if((freq_search.best_trim_freq <= OSC_PMU_FREQ_MAX)  && (freq_search.best_trim_freq >= OSC_PMU_FREQ_MIN))
000054  f2483140          MOV      r1,#0x8340
000058  9803              LDR      r0,[sp,#0xc]
00005a  4288              CMP      r0,r1
00005c  d81f              BHI      |L9.158|
00005e  f24761c0          MOV      r1,#0x76c0
000062  9803              LDR      r0,[sp,#0xc]
000064  4288              CMP      r0,r1
000066  d31a              BCC      |L9.158|
;;;215        {
;;;216            trim_result.osc_pmu_trim_val  = freq_search.best_trim_val;
000068  f89d0010          LDRB     r0,[sp,#0x10]
00006c  4914              LDR      r1,|L9.192|
00006e  f881002c          STRB     r0,[r1,#0x2c]
;;;217            trim_result.osc_pmu_trim_freq = freq_search.best_trim_freq;
000072  9803              LDR      r0,[sp,#0xc]
000074  6308              STR      r0,[r1,#0x30]  ; trim_result
;;;218            trim_result.pass_osc_pmu_trim = 1;
000076  4608              MOV      r0,r1
000078  6800              LDR      r0,[r0,#0]  ; trim_result
00007a  f0200010          BIC      r0,r0,#0x10
00007e  3010              ADDS     r0,r0,#0x10
000080  6008              STR      r0,[r1,#0]  ; trim_result
;;;219            
;;;220            //asu_write((uint32_t)&AON_OSC->TRIM, &osc_ft_temp.TRIM,1);
;;;221            //return asu_write_word(OSC_PMU_CTL,  trim_result.osc_pmu_trim_val);
;;;222            return asu_write_word(PMU_TRIM_CTL, (pmu_trim_ctl&(~(0x2f<<8))) | (trim_result.osc_pmu_trim_val<<8) );//OSC_ADC_TRIM值设置
000082  480d              LDR      r0,|L9.184|
000084  6800              LDR      r0,[r0,#0]  ; pmu_trim_ctl
000086  f420503c          BIC      r0,r0,#0x2f00
00008a  460a              MOV      r2,r1
00008c  f892202c          LDRB     r2,[r2,#0x2c]  ; trim_result
000090  ea402102          ORR      r1,r0,r2,LSL #8
000094  4809              LDR      r0,|L9.188|
000096  f7fffffe          BL       asu_write_word
                  |L9.154|
;;;223        }
;;;224        else
;;;225        {
;;;226            trim_result.fail_osc_pmu_trim = 1;
;;;227            return fsm_rt_err_osc_pmu;
;;;228        }
;;;229    }
00009a  b005              ADD      sp,sp,#0x14
00009c  bd00              POP      {pc}
                  |L9.158|
00009e  4808              LDR      r0,|L9.192|
0000a0  6840              LDR      r0,[r0,#4]            ;226  ; trim_result
0000a2  f0200010          BIC      r0,r0,#0x10           ;226
0000a6  3010              ADDS     r0,r0,#0x10           ;226
0000a8  4905              LDR      r1,|L9.192|
0000aa  6048              STR      r0,[r1,#4]            ;226  ; trim_result
0000ac  f06f000f          MVN      r0,#0xf               ;227
0000b0  e7f3              B        |L9.154|
;;;230    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L9.180|
                          DCD      0x200020f8
                  |L9.184|
                          DCD      pmu_trim_ctl
                  |L9.188|
                          DCD      0x200c0014
                  |L9.192|
                          DCD      trim_result
                  |L9.196|
                          DCD      osc_pmu_trim_set

                          AREA ||i.osc_pmu_trim_set||, CODE, READONLY, ALIGN=2

                  osc_pmu_trim_set PROC
;;;299    //设置trim值，返回频率
;;;300    static uint32_t osc_pmu_trim_set(uint8_t val)
000000  b510              PUSH     {r4,lr}
;;;301    {
000002  4604              MOV      r4,r0
;;;302        asu_write_word(PMU_TRIM_CTL, (pmu_trim_ctl & ~(0x3f<<8)) | (val<<8));//OSC_ADC_TRIM值设置
000004  4805              LDR      r0,|L10.28|
000006  6800              LDR      r0,[r0,#0]  ; pmu_trim_ctl
000008  f420507c          BIC      r0,r0,#0x3f00
00000c  ea402104          ORR      r1,r0,r4,LSL #8
000010  4803              LDR      r0,|L10.32|
000012  f7fffffe          BL       asu_write_word
;;;303        return osc_freq_get(); 
000016  f7fffffe          BL       osc_freq_get
;;;304    }
00001a  bd10              POP      {r4,pc}
;;;305    
                          ENDP

                  |L10.28|
                          DCD      pmu_trim_ctl
                  |L10.32|
                          DCD      0x200c0014

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  core_search
                          %        84

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  core_freq_tar_max
                          DCD      0x03c14dc0
                          DCD      0x0459e440
                          DCD      0x04f27ac0
                          DCD      0x058b1140
                          DCD      0x0623a7c0
                          DCD      0x06bc3e40
                          DCD      0x0754d4c0
                  core_freq_tar_min
                          DCD      0x0365c040
                          DCD      0x03fe56c0
                          DCD      0x0496ed40
                          DCD      0x052f83c0
                          DCD      0x05c81a40
                          DCD      0x0660b0c0
                          DCD      0x06f94740
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      0xffffffff

                          AREA ||.data||, DATA, ALIGN=2

                  pmu_trim_ctl
                          DCD      0x00000000
                  s_tState
000004  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\kiwi_ft\\asu_cmu.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_asu_cmu_c_40965d6a____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_asu_cmu_c_40965d6a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_asu_cmu_c_40965d6a____REVSH|
#line 144
|__asm___9_asu_cmu_c_40965d6a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
