; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\bsp_timer_capture.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_timer_capture.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\bsp_timer_capture.crf ..\..\User\bsp_stm32f4xx\src\bsp_timer_capture.c]
                          THUMB

                          AREA ||i.TIM3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM3_IRQHandler PROC
;;;200    
;;;201    void TIM3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;202    {
;;;203        //static uint8_t rev;
;;;204    
;;;205        if (TIM_GetITStatus(TIM3, TIM_IT_Update))
000002  2101              MOVS     r1,#1
000004  4806              LDR      r0,|L1.32|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b140              CBZ      r0,|L1.30|
;;;206        {
;;;207            sem_tim3_tick++;
00000c  4805              LDR      r0,|L1.36|
00000e  6800              LDR      r0,[r0,#0]  ; sem_tim3_tick
000010  1c40              ADDS     r0,r0,#1
000012  4904              LDR      r1,|L1.36|
000014  6008              STR      r0,[r1,#0]  ; sem_tim3_tick
;;;208            TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
000016  2101              MOVS     r1,#1
000018  4801              LDR      r0,|L1.32|
00001a  f7fffffe          BL       TIM_ClearITPendingBit
                  |L1.30|
;;;209        }
;;;210    }
00001e  bd10              POP      {r4,pc}
;;;211    
                          ENDP

                  |L1.32|
                          DCD      0x40000400
                  |L1.36|
                          DCD      sem_tim3_tick

                          AREA ||i.pwm_measure_start||, CODE, READONLY, ALIGN=2

                  pwm_measure_start PROC
;;;57     #else
;;;58     void pwm_measure_start(void)
000000  b500              PUSH     {lr}
;;;59     {
000002  b085              SUB      sp,sp,#0x14
;;;60         // ?????? GPIO ???
;;;61         GPIO_InitTypeDef GPIO_InitStructure;
;;;62         RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
000004  2101              MOVS     r1,#1
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;63      
;;;64      
;;;65         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
00000c  2001              MOVS     r0,#1
00000e  9003              STR      r0,[sp,#0xc]
;;;66         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;		/* 设为输出口 */
000010  2002              MOVS     r0,#2
000012  f88d0010          STRB     r0,[sp,#0x10]
;;;67     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		/* 设为推挽模式 */
000016  2000              MOVS     r0,#0
000018  f88d0012          STRB     r0,[sp,#0x12]
;;;68     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 上下拉电阻不使能 */
00001c  f88d0013          STRB     r0,[sp,#0x13]
;;;69     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	/* IO口最大速度 */
000020  2003              MOVS     r0,#3
000022  f88d0011          STRB     r0,[sp,#0x11]
;;;70         
;;;71         GPIO_Init(GPIOA, &GPIO_InitStructure);
000026  a903              ADD      r1,sp,#0xc
000028  4813              LDR      r0,|L2.120|
00002a  f7fffffe          BL       GPIO_Init
;;;72         GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_TIM8);
00002e  2203              MOVS     r2,#3
000030  2100              MOVS     r1,#0
000032  4811              LDR      r0,|L2.120|
000034  f7fffffe          BL       GPIO_PinAFConfig
;;;73         
;;;74       
;;;75         TIM_TimeBaseInitTypeDef tim_base_init={0};
000038  2000              MOVS     r0,#0
00003a  9000              STR      r0,[sp,#0]
00003c  9001              STR      r0,[sp,#4]
00003e  9002              STR      r0,[sp,#8]
;;;76         tim_base_init.TIM_CounterMode = TIM_CounterMode_Up;
000040  f8ad0002          STRH     r0,[sp,#2]
;;;77     	tim_base_init.TIM_Prescaler = 0;
000044  f8ad0000          STRH     r0,[sp,#0]
;;;78     	tim_base_init.TIM_Period = UINT16_MAX;
000048  f64f70ff          MOV      r0,#0xffff
00004c  9001              STR      r0,[sp,#4]
;;;79         tim_base_init.TIM_ClockDivision = 0;
00004e  2000              MOVS     r0,#0
000050  f8ad0008          STRH     r0,[sp,#8]
;;;80         TIM_TimeBaseInit(TIM8,&tim_base_init);
000054  4669              MOV      r1,sp
000056  4809              LDR      r0,|L2.124|
000058  f7fffffe          BL       TIM_TimeBaseInit
;;;81     
;;;82         //                            不分频                 
;;;83         TIM_ETRClockMode1Config(TIM8, TIM_ExtTRGPSC_DIV2, TIM_ExtTRGPolarity_NonInverted, 12); //12
00005c  230c              MOVS     r3,#0xc
00005e  2200              MOVS     r2,#0
000060  f44f5180          MOV      r1,#0x1000
000064  4805              LDR      r0,|L2.124|
000066  f7fffffe          BL       TIM_ETRClockMode1Config
;;;84     //    TIM_TIxExternalClockConfig(TIM8, uint16_t TIM_TIxExternalCLKSource,
;;;85     //                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
;;;86     //    
;;;87     //    TIM_ETRClockMode1Config(TIM8, TIM_ExtTRGPSC_OFF, TIM_ExtTRGPolarity_NonInverted, 0);
;;;88         
;;;89         
;;;90         TIM_Cmd(TIM8, ENABLE);
00006a  2101              MOVS     r1,#1
00006c  4803              LDR      r0,|L2.124|
00006e  f7fffffe          BL       TIM_Cmd
;;;91         
;;;92          
;;;93     }
000072  b005              ADD      sp,sp,#0x14
000074  bd00              POP      {pc}
;;;94     #endif
                          ENDP

000076  0000              DCW      0x0000
                  |L2.120|
                          DCD      0x40020000
                  |L2.124|
                          DCD      0x40010400

                          AREA ||i.pwm_measure_stop||, CODE, READONLY, ALIGN=2

                  pwm_measure_stop PROC
;;;144    */
;;;145    u32 pwm_measure_stop(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;146    {
;;;147        TIM_Cmd(TIM8,DISABLE);
000002  2100              MOVS     r1,#0
000004  480c              LDR      r0,|L3.56|
000006  f7fffffe          BL       TIM_Cmd
;;;148        
;;;149        GPIO_InitTypeDef GPIO_InitStructure;
;;;150        
;;;151        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
00000a  2001              MOVS     r0,#1
00000c  9000              STR      r0,[sp,#0]
;;;152        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;		/* 设为输出口 */
00000e  2000              MOVS     r0,#0
000010  f88d0004          STRB     r0,[sp,#4]
;;;153    	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;		/* 设为推挽模式 */
000014  2001              MOVS     r0,#1
000016  f88d0006          STRB     r0,[sp,#6]
;;;154    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 上下拉电阻不使能 */
00001a  2000              MOVS     r0,#0
00001c  f88d0007          STRB     r0,[sp,#7]
;;;155    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	/* IO口最大速度 */
000020  2003              MOVS     r0,#3
000022  f88d0005          STRB     r0,[sp,#5]
;;;156        
;;;157        GPIO_Init(GPIOA, &GPIO_InitStructure);
000026  4669              MOV      r1,sp
000028  4804              LDR      r0,|L3.60|
00002a  f7fffffe          BL       GPIO_Init
;;;158        
;;;159    	return TIM_GetCounter(TIM8)*2;
00002e  4802              LDR      r0,|L3.56|
000030  f7fffffe          BL       TIM_GetCounter
000034  0040              LSLS     r0,r0,#1
;;;160    }
000036  bd1c              POP      {r2-r4,pc}
;;;161    
                          ENDP

                  |L3.56|
                          DCD      0x40010400
                  |L3.60|
                          DCD      0x40020000

                          AREA ||i.reset_tick||, CODE, READONLY, ALIGN=2

                  reset_tick PROC
;;;243      */
;;;244    void reset_tick(void)
000000  b510              PUSH     {r4,lr}
;;;245    {
;;;246        TIM_Cmd(TIM3, DISABLE);
000002  2100              MOVS     r1,#0
000004  4801              LDR      r0,|L4.12|
000006  f7fffffe          BL       TIM_Cmd
;;;247    }
00000a  bd10              POP      {r4,pc}
;;;248    
                          ENDP

                  |L4.12|
                          DCD      0x40000400

                          AREA ||i.set_tick||, CODE, READONLY, ALIGN=2

                  set_tick PROC
;;;216      */
;;;217    void set_tick(u32 us)
000000  b510              PUSH     {r4,lr}
;;;218    {
000002  4604              MOV      r4,r0
;;;219        TIM_SetCounter(TIM3, 0);
000004  2100              MOVS     r1,#0
000006  4807              LDR      r0,|L5.36|
000008  f7fffffe          BL       TIM_SetCounter
;;;220        TIM_SetAutoreload(TIM3, us - 1);
00000c  1e61              SUBS     r1,r4,#1
00000e  4805              LDR      r0,|L5.36|
000010  f7fffffe          BL       TIM_SetAutoreload
;;;221        TIM_Cmd(TIM3, ENABLE);
000014  2101              MOVS     r1,#1
000016  4803              LDR      r0,|L5.36|
000018  f7fffffe          BL       TIM_Cmd
;;;222    
;;;223        sem_tim3_tick = 0;
00001c  2000              MOVS     r0,#0
00001e  4902              LDR      r1,|L5.40|
000020  6008              STR      r0,[r1,#0]  ; sem_tim3_tick
;;;224    }
000022  bd10              POP      {r4,pc}
;;;225    
                          ENDP

                  |L5.36|
                          DCD      0x40000400
                  |L5.40|
                          DCD      sem_tim3_tick

                          AREA ||i.tick_init||, CODE, READONLY, ALIGN=2

                  tick_init PROC
;;;164    
;;;165    void tick_init(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;166    {
;;;167        TIM_TimeBaseInitTypeDef tim_base_init;
;;;168        NVIC_InitTypeDef nvic_init;
;;;169    
;;;170        //TIM_TimeBaseStructInit(&tim_base_init);
;;;171        // TIM3????????
;;;172        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
000002  2101              MOVS     r1,#1
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;173    
;;;174        tim_base_init.TIM_CounterMode   = TIM_CounterMode_Up;
00000a  2000              MOVS     r0,#0
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;175        tim_base_init.TIM_Prescaler     = 84 - 1;
000010  2053              MOVS     r0,#0x53
000012  f8ad0004          STRH     r0,[sp,#4]
;;;176        tim_base_init.TIM_Period        = 50 - 1;
000016  2031              MOVS     r0,#0x31
000018  9002              STR      r0,[sp,#8]
;;;177        TIM_TimeBaseInit(TIM3, &tim_base_init);
00001a  a901              ADD      r1,sp,#4
00001c  480b              LDR      r0,|L6.76|
00001e  f7fffffe          BL       TIM_TimeBaseInit
;;;178        TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
000022  2201              MOVS     r2,#1
000024  4611              MOV      r1,r2
000026  4809              LDR      r0,|L6.76|
000028  f7fffffe          BL       TIM_ITConfig
;;;179    
;;;180        nvic_init.NVIC_IRQChannel       = TIM3_IRQn;
00002c  201d              MOVS     r0,#0x1d
00002e  f88d0000          STRB     r0,[sp,#0]
;;;181        nvic_init.NVIC_IRQChannelCmd    = ENABLE;
000032  2001              MOVS     r0,#1
000034  f88d0003          STRB     r0,[sp,#3]
;;;182        nvic_init.NVIC_IRQChannelPreemptionPriority = 1;
000038  f88d0001          STRB     r0,[sp,#1]
;;;183        nvic_init.NVIC_IRQChannelSubPriority = 0;
00003c  2000              MOVS     r0,#0
00003e  f88d0002          STRB     r0,[sp,#2]
;;;184        NVIC_Init(&nvic_init);
000042  4668              MOV      r0,sp
000044  f7fffffe          BL       NVIC_Init
;;;185    
;;;186    //	 GPIO_InitTypeDef  GPIO_InitStructure;
;;;187    
;;;188    //   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);//??GPIOF??
;;;189    
;;;190    //  //GPIOD0,D1?????
;;;191    //   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
;;;192    //   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;//??????
;;;193    //   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//????
;;;194    //   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
;;;195    //   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;//??
;;;196    //   GPIO_Init(GPIOB, &GPIO_InitStructure);//???
;;;197    
;;;198    }
000048  bd1f              POP      {r0-r4,pc}
;;;199    
                          ENDP

00004a  0000              DCW      0x0000
                  |L6.76|
                          DCD      0x40000400

                          AREA ||i.tos_knl_sched_lock||, CODE, READONLY, ALIGN=1

                  tos_knl_sched_lock PROC
;;;253      */
;;;254    void tos_knl_sched_lock()
000000  2001              MOVS     r0,#1
000002  f3808810          MSR      PRIMASK,r0
000006  bf00              NOP      
;;;255    {
;;;256        DISABLE_INT();
;;;257        //TIM_ITConfig(TIM3, TIM_IT_Update, DISABLE);
;;;258        //__disable_irq() ; //?????
;;;259    }
000008  4770              BX       lr
;;;260    
                          ENDP


                          AREA ||i.tos_knl_sched_unlock||, CODE, READONLY, ALIGN=1

                  tos_knl_sched_unlock PROC
;;;265      */
;;;266    void tos_knl_sched_unlock()
000000  2000              MOVS     r0,#0
000002  f3808810          MSR      PRIMASK,r0
000006  bf00              NOP      
;;;267    {
;;;268        ENABLE_INT();
;;;269        // TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
;;;270        //__enable_irq() ; //?????
;;;271    }
000008  4770              BX       lr
                          ENDP


                          AREA ||i.wait_tick||, CODE, READONLY, ALIGN=2

                  wait_tick PROC
;;;230      */
;;;231    void wait_tick(void)
000000  4903              LDR      r1,|L9.16|
;;;232    {
;;;233        // tos_sem_pend(&sem_tim3_tick,TOS_TIME_FOREVER);
;;;234        uint32_t tick_now = sem_tim3_tick;
000002  6808              LDR      r0,[r1,#0]  ; sem_tim3_tick
;;;235    
;;;236        while (sem_tim3_tick == tick_now);
000004  bf00              NOP      
                  |L9.6|
000006  4902              LDR      r1,|L9.16|
000008  6809              LDR      r1,[r1,#0]  ; sem_tim3_tick
00000a  4281              CMP      r1,r0
00000c  d0fb              BEQ      |L9.6|
;;;237    }
00000e  4770              BX       lr
;;;238    
                          ENDP

                  |L9.16|
                          DCD      sem_tim3_tick

                          AREA ||.data||, DATA, ALIGN=2

                  sem_tim3_tick
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_timer_capture.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_bsp_timer_capture_c_1c2d81f8____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___19_bsp_timer_capture_c_1c2d81f8____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_bsp_timer_capture_c_1c2d81f8____REVSH|
#line 144
|__asm___19_bsp_timer_capture_c_1c2d81f8____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
