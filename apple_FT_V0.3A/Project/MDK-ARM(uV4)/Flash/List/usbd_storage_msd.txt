; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\usbd_storage_msd.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\usbd_storage_msd.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\usbd_storage_msd.crf ..\..\User\usbd_mass_storage\usbd_storage_msd.c]
                          THUMB

                          AREA ||i.STORAGE_GetCapacity||, CODE, READONLY, ALIGN=2

                  STORAGE_GetCapacity PROC
;;;191      */
;;;192    int8_t STORAGE_GetCapacity (uint8_t lun, uint32_t *block_num, uint32_t *block_size)
000000  b510              PUSH     {r4,lr}
;;;193    {
000002  4603              MOV      r3,r0
;;;194        switch (lun)
000004  b94b              CBNZ     r3,|L1.26|
;;;195    	{
;;;196    		 
;;;197    		
;;;198    		case LUN_SPI_FLASH:
;;;199    			mass_printf("> SPI FLASH STORAGE_GetCapacity\r\n");
;;;200    			#if 1
;;;201    				*block_size =  4096;
000006  f44f5080          MOV      r0,#0x1000
00000a  6010              STR      r0,[r2,#0]
;;;202    				*block_num =  g_tSF.TotalSize/(*block_size);//512*2;
00000c  4804              LDR      r0,|L1.32|
00000e  6940              LDR      r0,[r0,#0x14]  ; g_tSF
000010  6814              LDR      r4,[r2,#0]
000012  fbb0f0f4          UDIV     r0,r0,r4
000016  6008              STR      r0,[r1,#0]
;;;203    			#else
;;;204    				*block_size =  NAND_PAGE_SIZE;
;;;205    				*block_num =  NAND_BLOCK_SIZE * NAND_ZONE_SIZE * NAND_MAX_ZONE;
;;;206    			#endif
;;;207    			break;
000018  bf00              NOP      
                  |L1.26|
00001a  bf00              NOP      
;;;208    	}
;;;209    
;;;210    	return (0);
00001c  2000              MOVS     r0,#0
;;;211    }
00001e  bd10              POP      {r4,pc}
;;;212    
                          ENDP

                  |L1.32|
                          DCD      g_tSF

                          AREA ||i.STORAGE_GetMaxLun||, CODE, READONLY, ALIGN=1

                  STORAGE_GetMaxLun PROC
;;;312    
;;;313    int8_t STORAGE_GetMaxLun (void)
000000  2000              MOVS     r0,#0
;;;314    {
;;;315    	return (STORAGE_LUN_NBR - 1);
;;;316    }
000002  4770              BX       lr
;;;317    /**
                          ENDP


                          AREA ||i.STORAGE_Init||, CODE, READONLY, ALIGN=1

                  STORAGE_Init PROC
;;;166    
;;;167    int8_t STORAGE_Init (uint8_t lun)
000000  b510              PUSH     {r4,lr}
;;;168    {	
000002  4604              MOV      r4,r0
;;;169    	switch (lun)
000004  b914              CBNZ     r4,|L3.12|
;;;170    	{
;;;171    		 
;;;172    		case LUN_SPI_FLASH:
;;;173    //			if (NAND_Init() != NAND_OK)
;;;174    //			{
;;;175    //				return (-1);
;;;176    //			}
;;;177                bsp_InitSFlash();
000006  f7fffffe          BL       bsp_InitSFlash
;;;178    			mass_printf("> SPI STORAGE_Init Ok\r\n");
;;;179    			break;
00000a  bf00              NOP      
                  |L3.12|
00000c  bf00              NOP      
;;;180    	}
;;;181    
;;;182    	return (0);
00000e  2000              MOVS     r0,#0
;;;183    }
000010  bd10              POP      {r4,pc}
;;;184    
                          ENDP


                          AREA ||i.STORAGE_IsReady||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  STORAGE_IsReady PROC
;;;217      */
;;;218    int8_t  STORAGE_IsReady (uint8_t lun)
000000  b570              PUSH     {r4-r6,lr}
;;;219    {
000002  4605              MOV      r5,r0
;;;220    	//mass_printf("> STORAGE_IsReady\r\n");
;;;221        uint32_t id = sf_ReadID();
000004  f7fffffe          BL       sf_ReadID
000008  4604              MOV      r4,r0
;;;222    	switch (lun)
00000a  b9b5              CBNZ     r5,|L4.58|
;;;223    	{
;;;224        
;;;225    
;;;226        case LUN_SPI_FLASH:
;;;227            if (id == P25Q32H_ID) return 0;
00000c  480c              LDR      r0,|L4.64|
00000e  4284              CMP      r4,r0
000010  d101              BNE      |L4.22|
000012  2000              MOVS     r0,#0
                  |L4.20|
;;;228            else if(id == BY25Q128_ID)  return 0;
;;;229            else                       
;;;230            {
;;;231                printf("flash No support:0x%x \r\n",id);
;;;232                display_show_string("flash No support:0x%x \n",BLACK , RED);
;;;233                return -1;
;;;234            }
;;;235         
;;;236    	}
;;;237    
;;;238    	return (0);
;;;239    }
000014  bd70              POP      {r4-r6,pc}
                  |L4.22|
000016  480b              LDR      r0,|L4.68|
000018  4284              CMP      r4,r0                 ;228
00001a  d101              BNE      |L4.32|
00001c  2000              MOVS     r0,#0                 ;228
00001e  e7f9              B        |L4.20|
                  |L4.32|
000020  4621              MOV      r1,r4                 ;231
000022  a009              ADR      r0,|L4.72|
000024  f7fffffe          BL       __2printf
000028  f44f4278          MOV      r2,#0xf800            ;232
00002c  2100              MOVS     r1,#0                 ;232
00002e  a00d              ADR      r0,|L4.100|
000030  f7fffffe          BL       display_show_string
000034  f04f30ff          MOV      r0,#0xffffffff        ;233
000038  e7ec              B        |L4.20|
                  |L4.58|
00003a  2000              MOVS     r0,#0                 ;238
00003c  e7ea              B        |L4.20|
;;;240    
                          ENDP

00003e  0000              DCW      0x0000
                  |L4.64|
                          DCD      0x00856016
                  |L4.68|
                          DCD      0x00684018
                  |L4.72|
000048  666c6173          DCB      "flash No support:0x%x \r\n",0
00004c  68204e6f
000050  20737570
000054  706f7274
000058  3a307825
00005c  78200d0a
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
                  |L4.100|
000064  666c6173          DCB      "flash No support:0x%x \n",0
000068  68204e6f
00006c  20737570
000070  706f7274
000074  3a307825
000078  78200a00

                          AREA ||i.STORAGE_IsWriteProtected||, CODE, READONLY, ALIGN=1

                  STORAGE_IsWriteProtected PROC
;;;245      */
;;;246    int8_t  STORAGE_IsWriteProtected (uint8_t lun)
000000  4601              MOV      r1,r0
;;;247    {
;;;248    	mass_printf("> STORAGE_IsWriteProtected\r\n");
;;;249    	return  0;
000002  2000              MOVS     r0,#0
;;;250    }
000004  4770              BX       lr
;;;251    
                          ENDP


                          AREA ||i.STORAGE_Read||, CODE, READONLY, ALIGN=1

                  STORAGE_Read PROC
;;;259      */
;;;260    int8_t STORAGE_Read (uint8_t lun,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;261                     uint8_t *buf,
;;;262                     uint32_t blk_addr,
;;;263                     uint16_t blk_len)
;;;264    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;265    	switch (lun)
00000c  b92c              CBNZ     r4,|L6.26|
;;;266    	{
;;;267        
;;;268        case LUN_SPI_FLASH:
;;;269    
;;;270            sf_ReadBuffer((uint8_t *)buf, blk_addr<<12, blk_len<<12);
00000e  033a              LSLS     r2,r7,#12
000010  0331              LSLS     r1,r6,#12
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       sf_ReadBuffer
;;;271            mass_printf("read : BlockNo=%d, BlockCount=%d\r\n", blk_addr,blk_len);
;;;272            break;
000018  bf00              NOP      
                  |L6.26|
00001a  bf00              NOP      
;;;273    	}
;;;274    	return 0;
00001c  2000              MOVS     r0,#0
;;;275    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;276    /**
                          ENDP


                          AREA ||i.STORAGE_Write||, CODE, READONLY, ALIGN=1

                  STORAGE_Write PROC
;;;283      */
;;;284    int8_t STORAGE_Write (uint8_t lun,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;285                      uint8_t *buf,
;;;286                      uint32_t blk_addr,
;;;287                      uint16_t blk_len)
;;;288    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
;;;289    	switch (lun)
00000c  b96d              CBNZ     r5,|L7.42|
;;;290    	{
;;;291    		 
;;;292    
;;;293    		case LUN_SPI_FLASH:		
;;;294    //			if (NAND_OK != NAND_WriteMultiSectors(buf, blk_addr, 512, blk_len))
;;;295    //			{
;;;296    //				return -1;
;;;297    //			}
;;;298                IWDG_Feed();                /* 喂狗 */
00000e  f7fffffe          BL       IWDG_Feed
;;;299                sf_EraseSector(blk_addr<<12);
000012  0320              LSLS     r0,r4,#12
000014  f7fffffe          BL       sf_EraseSector
;;;300                sf_WriteBuffer((uint8_t *)buf,blk_addr<< 12,blk_len<<12);	
000018  f64f70ff          MOV      r0,#0xffff
00001c  ea003207          AND      r2,r0,r7,LSL #12
000020  0321              LSLS     r1,r4,#12
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       sf_WriteBuffer
;;;301    			mass_printf("write : BlockNo=%d, BlockCount=%d\r\n", blk_addr,blk_len);
;;;302    			break;
000028  bf00              NOP      
                  |L7.42|
00002a  bf00              NOP      
;;;303    	}		
;;;304    	return 0;
00002c  2000              MOVS     r0,#0
;;;305    }
00002e  e8bd81f0          POP      {r4-r8,pc}
;;;306    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  STORAGE_Inquirydata
000000  00800202          DCB      0x00,0x80,0x02,0x02
000004  1f000000          DCB      0x1f,0x00,0x00,0x00
000008  504c5843          DCB      0x50,0x4c,0x58,0x43
00000c  205a4751          DCB      0x20,0x5a,0x47,0x51
000010  53504920          DCB      0x53,0x50,0x49,0x20
000014  20466c61          DCB      0x20,0x46,0x6c,0x61
000018  73682020          DCB      0x73,0x68,0x20,0x20
00001c  20202020          DCB      0x20,0x20,0x20,0x20
000020  312e3030          DCB      0x31,0x2e,0x30,0x30

                          AREA ||.data||, DATA, ALIGN=2

                  USBD_user_fops
                          DCD      STORAGE_Init
                          DCD      STORAGE_GetCapacity
                          DCD      STORAGE_IsReady
                          DCD      STORAGE_IsWriteProtected
                          DCD      STORAGE_Read
                          DCD      STORAGE_Write
                          DCD      STORAGE_GetMaxLun
                          DCD      STORAGE_Inquirydata
                  USBD_STORAGE_fops
                          DCD      USBD_user_fops
                  count
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\usbd_mass_storage\\usbd_storage_msd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_usbd_storage_msd_c_9464922b____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_usbd_storage_msd_c_9464922b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_usbd_storage_msd_c_9464922b____REVSH|
#line 144
|__asm___18_usbd_storage_msd_c_9464922b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
