; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\usbd_core.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\usbd_core.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\User\FatFS\src -I..\..\Libraries\STM32_USB_Device_Library\Class\msc\inc -I..\..\Libraries\STM32_USB_Device_Library\Core\inc -I..\..\Libraries\STM32_USB_OTG_Driver\inc -I..\..\User\usbd_mass_storage -I..\..\User\ft_support -I..\..\User\test -I..\..\User\emenu -I..\..\User\chip_ft -I..\..\User\lwrb -I..\..\User\easylogger\inc -I..\..\User\easylogger\plugins\file -I..\..\User\LOG -I..\..\User\MultiButton-1.1.0 -I..\..\User\cm_backtrace -I..\..\User\MultiTimer -I.\RTE\_Flash -IC:\Users\qizha\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\qizha\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY --signed_chars --omf_browse=.\flash\obj\usbd_core.crf ..\..\Libraries\STM32_USB_Device_Library\Core\src\usbd_core.c]
                          THUMB

                          AREA ||i.USBD_ClrCfg||, CODE, READONLY, ALIGN=1

                  USBD_ClrCfg PROC
;;;432    */
;;;433    USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
000000  b570              PUSH     {r4-r6,lr}
;;;434    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;435      pdev->dev.class_cb->DeInit(pdev, cfgidx);   
000006  f8d405e4          LDR      r0,[r4,#0x5e4]
00000a  4629              MOV      r1,r5
00000c  6842              LDR      r2,[r0,#4]
00000e  4620              MOV      r0,r4
000010  4790              BLX      r2
;;;436      return USBD_OK;
000012  2000              MOVS     r0,#0
;;;437    }
000014  bd70              POP      {r4-r6,pc}
;;;438    
                          ENDP


                          AREA ||i.USBD_DataInStage||, CODE, READONLY, ALIGN=1

                  USBD_DataInStage PROC
;;;260    */
;;;261    static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
000000  b570              PUSH     {r4-r6,lr}
;;;262    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;263      USB_OTG_EP *ep;
;;;264      
;;;265      if(epnum == 0) 
000006  2e00              CMP      r6,#0
000008  d151              BNE      |L2.174|
;;;266      {
;;;267        ep = &pdev->dev.in_ep[0];
00000a  f505748e          ADD      r4,r5,#0x11c
;;;268        if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
00000e  f2401011          MOV      r0,#0x111
000012  5d40              LDRB     r0,[r0,r5]
000014  2802              CMP      r0,#2
000016  d13d              BNE      |L2.148|
;;;269        {
;;;270          if(ep->rem_data_len > ep->maxpacket)
000018  68a1              LDR      r1,[r4,#8]
00001a  69e0              LDR      r0,[r4,#0x1c]
00001c  4288              CMP      r0,r1
00001e  d911              BLS      |L2.68|
;;;271          {
;;;272            ep->rem_data_len -=  ep->maxpacket;
000020  68a1              LDR      r1,[r4,#8]
000022  69e0              LDR      r0,[r4,#0x1c]
000024  1a40              SUBS     r0,r0,r1
000026  61e0              STR      r0,[r4,#0x1c]
;;;273            if(pdev->cfg.dma_enable == 1)
000028  78e8              LDRB     r0,[r5,#3]
00002a  2801              CMP      r0,#1
00002c  d103              BNE      |L2.54|
;;;274            {
;;;275              /* in slave mode this, is handled by the TxFifoEmpty ISR */
;;;276              ep->xfer_buff += ep->maxpacket;
00002e  e9d41002          LDRD     r1,r0,[r4,#8]
000032  4408              ADD      r0,r0,r1
000034  60e0              STR      r0,[r4,#0xc]
                  |L2.54|
;;;277            }
;;;278            USBD_CtlContinueSendData (pdev, 
000036  8ba0              LDRH     r0,[r4,#0x1c]
000038  b282              UXTH     r2,r0
00003a  4628              MOV      r0,r5
00003c  68e1              LDR      r1,[r4,#0xc]
00003e  f7fffffe          BL       USBD_CtlContinueSendData
000042  e027              B        |L2.148|
                  |L2.68|
;;;279                                      ep->xfer_buff, 
;;;280                                      ep->rem_data_len);
;;;281          }
;;;282          else
;;;283          { /* last packet is MPS multiple, so send ZLP packet */
;;;284            if((ep->total_data_len % ep->maxpacket == 0) &&
000044  68a1              LDR      r1,[r4,#8]
000046  6a20              LDR      r0,[r4,#0x20]
000048  fbb0f2f1          UDIV     r2,r0,r1
00004c  fb010012          MLS      r0,r1,r2,r0
000050  b978              CBNZ     r0,|L2.114|
;;;285               (ep->total_data_len >= ep->maxpacket) &&
000052  68a1              LDR      r1,[r4,#8]
000054  6a20              LDR      r0,[r4,#0x20]
000056  4288              CMP      r0,r1
000058  d30b              BCC      |L2.114|
;;;286                 (ep->total_data_len < ep->ctl_data_len ))
00005a  e9d40108          LDRD     r0,r1,[r4,#0x20]
00005e  4288              CMP      r0,r1
000060  d207              BCS      |L2.114|
;;;287            {
;;;288              
;;;289              USBD_CtlContinueSendData(pdev , NULL, 0);
000062  2200              MOVS     r2,#0
000064  4611              MOV      r1,r2
000066  4628              MOV      r0,r5
000068  f7fffffe          BL       USBD_CtlContinueSendData
;;;290              ep->ctl_data_len = 0;
00006c  2000              MOVS     r0,#0
00006e  6260              STR      r0,[r4,#0x24]
000070  e010              B        |L2.148|
                  |L2.114|
;;;291            }
;;;292            else
;;;293            {
;;;294              if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
000072  f8d505e4          LDR      r0,[r5,#0x5e4]
000076  68c0              LDR      r0,[r0,#0xc]
000078  b148              CBZ      r0,|L2.142|
;;;295                 (pdev->dev.device_status == USB_OTG_CONFIGURED))
00007a  f44f7089          MOV      r0,#0x112
00007e  5d40              LDRB     r0,[r0,r5]
000080  2803              CMP      r0,#3
000082  d104              BNE      |L2.142|
;;;296              {
;;;297                pdev->dev.class_cb->EP0_TxSent(pdev); 
000084  f8d505e4          LDR      r0,[r5,#0x5e4]
000088  68c1              LDR      r1,[r0,#0xc]
00008a  4628              MOV      r0,r5
00008c  4788              BLX      r1
                  |L2.142|
;;;298              }          
;;;299              USBD_CtlReceiveStatus(pdev);
00008e  4628              MOV      r0,r5
000090  f7fffffe          BL       USBD_CtlReceiveStatus
                  |L2.148|
;;;300            }
;;;301          }
;;;302        }
;;;303        if (pdev->dev.test_mode == 1)
000094  f44f708b          MOV      r0,#0x116
000098  5d40              LDRB     r0,[r0,r5]
00009a  2801              CMP      r0,#1
00009c  d116              BNE      |L2.204|
;;;304        {
;;;305          USBD_RunTestMode(pdev); 
00009e  4628              MOV      r0,r5
0000a0  f7fffffe          BL       USBD_RunTestMode
;;;306          pdev->dev.test_mode = 0;
0000a4  2100              MOVS     r1,#0
0000a6  f44f708b          MOV      r0,#0x116
0000aa  5541              STRB     r1,[r0,r5]
0000ac  e00e              B        |L2.204|
                  |L2.174|
;;;307        }
;;;308      }
;;;309      else if((pdev->dev.class_cb->DataIn != NULL)&& 
0000ae  f8d505e4          LDR      r0,[r5,#0x5e4]
0000b2  6940              LDR      r0,[r0,#0x14]
0000b4  b150              CBZ      r0,|L2.204|
;;;310              (pdev->dev.device_status == USB_OTG_CONFIGURED))
0000b6  f44f7089          MOV      r0,#0x112
0000ba  5d40              LDRB     r0,[r0,r5]
0000bc  2803              CMP      r0,#3
0000be  d105              BNE      |L2.204|
;;;311      {
;;;312        pdev->dev.class_cb->DataIn(pdev, epnum); 
0000c0  f8d505e4          LDR      r0,[r5,#0x5e4]
0000c4  4631              MOV      r1,r6
0000c6  6942              LDR      r2,[r0,#0x14]
0000c8  4628              MOV      r0,r5
0000ca  4790              BLX      r2
                  |L2.204|
;;;313      }  
;;;314      return USBD_OK;
0000cc  2000              MOVS     r0,#0
;;;315    }
0000ce  bd70              POP      {r4-r6,pc}
;;;316    
                          ENDP


                          AREA ||i.USBD_DataOutStage||, CODE, READONLY, ALIGN=1

                  USBD_DataOutStage PROC
;;;212    */
;;;213    static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
000000  b570              PUSH     {r4-r6,lr}
;;;214    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;215      USB_OTG_EP *ep;
;;;216      
;;;217      if(epnum == 0) 
000006  bba6              CBNZ     r6,|L3.114|
;;;218      {
;;;219        ep = &pdev->dev.out_ep[0];
000008  f505745d          ADD      r4,r5,#0x374
;;;220        if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
00000c  f2401011          MOV      r0,#0x111
000010  5d40              LDRB     r0,[r0,r5]
000012  2803              CMP      r0,#3
000014  d13d              BNE      |L3.146|
;;;221        {
;;;222          if(ep->rem_data_len > ep->maxpacket)
000016  68a1              LDR      r1,[r4,#8]
000018  69e0              LDR      r0,[r4,#0x1c]
00001a  4288              CMP      r0,r1
00001c  d917              BLS      |L3.78|
;;;223          {
;;;224            ep->rem_data_len -=  ep->maxpacket;
00001e  68a1              LDR      r1,[r4,#8]
000020  69e0              LDR      r0,[r4,#0x1c]
000022  1a40              SUBS     r0,r0,r1
000024  61e0              STR      r0,[r4,#0x1c]
;;;225            
;;;226            if(pdev->cfg.dma_enable == 1)
000026  78e8              LDRB     r0,[r5,#3]
000028  2801              CMP      r0,#1
00002a  d103              BNE      |L3.52|
;;;227            {
;;;228              /* in slave mode this, is handled by the RxSTSQLvl ISR */
;;;229              ep->xfer_buff += ep->maxpacket; 
00002c  e9d41002          LDRD     r1,r0,[r4,#8]
000030  4408              ADD      r0,r0,r1
000032  60e0              STR      r0,[r4,#0xc]
                  |L3.52|
;;;230            }        
;;;231            USBD_CtlContinueRx (pdev, 
000034  68a3              LDR      r3,[r4,#8]
000036  69e0              LDR      r0,[r4,#0x1c]
000038  4298              CMP      r0,r3
00003a  d201              BCS      |L3.64|
;;;232                                ep->xfer_buff,
;;;233                                MIN(ep->rem_data_len ,ep->maxpacket));
00003c  69e0              LDR      r0,[r4,#0x1c]
00003e  e000              B        |L3.66|
                  |L3.64|
000040  68a0              LDR      r0,[r4,#8]
                  |L3.66|
000042  b282              UXTH     r2,r0
000044  4628              MOV      r0,r5
000046  68e1              LDR      r1,[r4,#0xc]
000048  f7fffffe          BL       USBD_CtlContinueRx
00004c  e021              B        |L3.146|
                  |L3.78|
;;;234          }
;;;235          else
;;;236          {
;;;237            if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
00004e  f8d505e4          LDR      r0,[r5,#0x5e4]
000052  6900              LDR      r0,[r0,#0x10]
000054  b148              CBZ      r0,|L3.106|
;;;238               (pdev->dev.device_status == USB_OTG_CONFIGURED))
000056  f44f7089          MOV      r0,#0x112
00005a  5d40              LDRB     r0,[r0,r5]
00005c  2803              CMP      r0,#3
00005e  d104              BNE      |L3.106|
;;;239            {
;;;240              pdev->dev.class_cb->EP0_RxReady(pdev); 
000060  f8d505e4          LDR      r0,[r5,#0x5e4]
000064  6901              LDR      r1,[r0,#0x10]
000066  4628              MOV      r0,r5
000068  4788              BLX      r1
                  |L3.106|
;;;241            }
;;;242            USBD_CtlSendStatus(pdev);
00006a  4628              MOV      r0,r5
00006c  f7fffffe          BL       USBD_CtlSendStatus
000070  e00f              B        |L3.146|
                  |L3.114|
000072  e7ff              B        |L3.116|
                  |L3.116|
;;;243          }
;;;244        }
;;;245      }
;;;246      else if((pdev->dev.class_cb->DataOut != NULL)&&
000074  f8d505e4          LDR      r0,[r5,#0x5e4]
000078  6980              LDR      r0,[r0,#0x18]
00007a  b150              CBZ      r0,|L3.146|
;;;247              (pdev->dev.device_status == USB_OTG_CONFIGURED))
00007c  f44f7089          MOV      r0,#0x112
000080  5d40              LDRB     r0,[r0,r5]
000082  2803              CMP      r0,#3
000084  d105              BNE      |L3.146|
;;;248      {
;;;249        pdev->dev.class_cb->DataOut(pdev, epnum); 
000086  f8d505e4          LDR      r0,[r5,#0x5e4]
00008a  4631              MOV      r1,r6
00008c  6982              LDR      r2,[r0,#0x18]
00008e  4628              MOV      r0,r5
000090  4790              BLX      r2
                  |L3.146|
;;;250      }  
;;;251      return USBD_OK;
000092  2000              MOVS     r0,#0
;;;252    }
000094  bd70              POP      {r4-r6,pc}
;;;253    
                          ENDP


                          AREA ||i.USBD_DeInit||, CODE, READONLY, ALIGN=1

                  USBD_DeInit PROC
;;;165    */
;;;166    USBD_Status USBD_DeInit(USB_OTG_CORE_HANDLE *pdev)
000000  4601              MOV      r1,r0
;;;167    {
;;;168      /* Software Init */
;;;169      
;;;170      return USBD_OK;
000002  2000              MOVS     r0,#0
;;;171    }
000004  4770              BX       lr
;;;172    
                          ENDP


                          AREA ||i.USBD_Init||, CODE, READONLY, ALIGN=1

                  USBD_Init PROC
;;;133    */
;;;134    void USBD_Init(USB_OTG_CORE_HANDLE *pdev,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;135                   USB_OTG_CORE_ID_TypeDef coreID,
;;;136                   USBD_DEVICE *pDevice,                  
;;;137                   USBD_Class_cb_TypeDef *class_cb, 
;;;138                   USBD_Usr_cb_TypeDef *usr_cb)
;;;139    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
00000c  f8dd8018          LDR      r8,[sp,#0x18]
;;;140      /* Hardware Init */
;;;141      USB_OTG_BSP_Init(pdev);  
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       USB_OTG_BSP_Init
;;;142      
;;;143      USBD_DeInit(pdev);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USBD_DeInit
;;;144      
;;;145      /*Register class and user callbacks */
;;;146      pdev->dev.class_cb = class_cb;
00001c  f8c465e4          STR      r6,[r4,#0x5e4]
;;;147      pdev->dev.usr_cb = usr_cb;  
000020  f8c485e8          STR      r8,[r4,#0x5e8]
;;;148      pdev->dev.usr_device = pDevice;    
000024  f8c455ec          STR      r5,[r4,#0x5ec]
;;;149      
;;;150      /* set USB OTG core params */
;;;151      DCD_Init(pdev , coreID);
000028  4639              MOV      r1,r7
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       DCD_Init
;;;152      
;;;153      /* Upon Init call usr callback */
;;;154      pdev->dev.usr_cb->Init();
000030  f8d415e8          LDR      r1,[r4,#0x5e8]
000034  6808              LDR      r0,[r1,#0]
000036  4780              BLX      r0
;;;155      
;;;156      /* Enable Interrupts */
;;;157      USB_OTG_BSP_EnableInterrupt(pdev);
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       USB_OTG_BSP_EnableInterrupt
;;;158    }
00003e  e8bd81f0          POP      {r4-r8,pc}
;;;159    
                          ENDP


                          AREA ||i.USBD_IsoINIncomplete||, CODE, READONLY, ALIGN=1

                  USBD_IsoINIncomplete PROC
;;;444    */
;;;445    static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
000000  b510              PUSH     {r4,lr}
;;;446    {
000002  4604              MOV      r4,r0
;;;447      pdev->dev.class_cb->IsoINIncomplete(pdev);   
000004  f8d405e4          LDR      r0,[r4,#0x5e4]
000008  6a01              LDR      r1,[r0,#0x20]
00000a  4620              MOV      r0,r4
00000c  4788              BLX      r1
;;;448      return USBD_OK;
00000e  2000              MOVS     r0,#0
;;;449    }
000010  bd10              POP      {r4,pc}
;;;450    
                          ENDP


                          AREA ||i.USBD_IsoOUTIncomplete||, CODE, READONLY, ALIGN=1

                  USBD_IsoOUTIncomplete PROC
;;;456    */
;;;457    static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
000000  b510              PUSH     {r4,lr}
;;;458    {
000002  4604              MOV      r4,r0
;;;459      pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
000004  f8d405e4          LDR      r0,[r4,#0x5e4]
000008  6a41              LDR      r1,[r0,#0x24]
00000a  4620              MOV      r0,r4
00000c  4788              BLX      r1
;;;460      return USBD_OK;
00000e  2000              MOVS     r0,#0
;;;461    }
000010  bd10              POP      {r4,pc}
;;;462    
                          ENDP


                          AREA ||i.USBD_Reset||, CODE, READONLY, ALIGN=1

                  USBD_Reset PROC
;;;338    
;;;339    static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
000000  b510              PUSH     {r4,lr}
;;;340    {
000002  4604              MOV      r4,r0
;;;341      /* Open EP0 OUT */
;;;342      DCD_EP_Open(pdev,
000004  2300              MOVS     r3,#0
000006  2240              MOVS     r2,#0x40
000008  4619              MOV      r1,r3
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       DCD_EP_Open
;;;343                  0x00,
;;;344                  USB_OTG_MAX_EP0_SIZE,
;;;345                  EP_TYPE_CTRL);
;;;346      
;;;347      /* Open EP0 IN */
;;;348      DCD_EP_Open(pdev,
000010  2300              MOVS     r3,#0
000012  2240              MOVS     r2,#0x40
000014  2180              MOVS     r1,#0x80
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       DCD_EP_Open
;;;349                  0x80,
;;;350                  USB_OTG_MAX_EP0_SIZE,
;;;351                  EP_TYPE_CTRL);
;;;352      
;;;353      /* Upon Reset call usr call back */
;;;354      pdev->dev.device_status = USB_OTG_DEFAULT;
00001c  2101              MOVS     r1,#1
00001e  f44f7089          MOV      r0,#0x112
000022  5501              STRB     r1,[r0,r4]
;;;355      pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
000024  78a0              LDRB     r0,[r4,#2]
000026  f8d425e8          LDR      r2,[r4,#0x5e8]
00002a  6851              LDR      r1,[r2,#4]
00002c  4788              BLX      r1
;;;356      
;;;357      return USBD_OK;
00002e  2000              MOVS     r0,#0
;;;358    }
000030  bd10              POP      {r4,pc}
;;;359    
                          ENDP


                          AREA ||i.USBD_Resume||, CODE, READONLY, ALIGN=1

                  USBD_Resume PROC
;;;366    
;;;367    static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
000000  b510              PUSH     {r4,lr}
;;;368    {
000002  4604              MOV      r4,r0
;;;369      /* Upon Resume call usr call back */
;;;370      pdev->dev.usr_cb->DeviceResumed(); 
000004  f8d415e8          LDR      r1,[r4,#0x5e8]
000008  6908              LDR      r0,[r1,#0x10]
00000a  4780              BLX      r0
;;;371      pdev->dev.device_status = pdev->dev.device_old_status;  
00000c  f2401013          MOV      r0,#0x113
000010  5d01              LDRB     r1,[r0,r4]
000012  1e40              SUBS     r0,r0,#1
000014  5501              STRB     r1,[r0,r4]
;;;372      pdev->dev.device_status = USB_OTG_CONFIGURED;  
000016  2103              MOVS     r1,#3
000018  5501              STRB     r1,[r0,r4]
;;;373      return USBD_OK;
00001a  2000              MOVS     r0,#0
;;;374    }
00001c  bd10              POP      {r4,pc}
;;;375    
                          ENDP


                          AREA ||i.USBD_RunTestMode||, CODE, READONLY, ALIGN=2

                  USBD_RunTestMode PROC
;;;325    */
;;;326    static uint8_t  USBD_RunTestMode (USB_OTG_CORE_HANDLE  *pdev) 
000000  4601              MOV      r1,r0
;;;327    {
;;;328      USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, SET_TEST_MODE.d32);
000002  4803              LDR      r0,|L10.16|
000004  6802              LDR      r2,[r0,#0]  ; SET_TEST_MODE
000006  6908              LDR      r0,[r1,#0x10]
000008  6042              STR      r2,[r0,#4]
;;;329      return USBD_OK;  
00000a  2000              MOVS     r0,#0
;;;330    }
00000c  4770              BX       lr
;;;331    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      SET_TEST_MODE

                          AREA ||i.USBD_SOF||, CODE, READONLY, ALIGN=1

                  USBD_SOF PROC
;;;400    
;;;401    static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
000000  b510              PUSH     {r4,lr}
;;;402    {
000002  4604              MOV      r4,r0
;;;403      if(pdev->dev.class_cb->SOF)
000004  f8d405e4          LDR      r0,[r4,#0x5e4]
000008  69c0              LDR      r0,[r0,#0x1c]
00000a  b120              CBZ      r0,|L11.22|
;;;404      {
;;;405        pdev->dev.class_cb->SOF(pdev); 
00000c  f8d405e4          LDR      r0,[r4,#0x5e4]
000010  69c1              LDR      r1,[r0,#0x1c]
000012  4620              MOV      r0,r4
000014  4788              BLX      r1
                  |L11.22|
;;;406      }
;;;407      return USBD_OK;
000016  2000              MOVS     r0,#0
;;;408    }
000018  bd10              POP      {r4,pc}
;;;409    /**
                          ENDP


                          AREA ||i.USBD_SetCfg||, CODE, READONLY, ALIGN=1

                  USBD_SetCfg PROC
;;;416    
;;;417    USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
000000  b570              PUSH     {r4-r6,lr}
;;;418    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;419      pdev->dev.class_cb->Init(pdev, cfgidx); 
000006  f8d405e4          LDR      r0,[r4,#0x5e4]
00000a  4629              MOV      r1,r5
00000c  6802              LDR      r2,[r0,#0]
00000e  4620              MOV      r0,r4
000010  4790              BLX      r2
;;;420      
;;;421      /* Upon set config call usr call back */
;;;422      pdev->dev.usr_cb->DeviceConfigured();
000012  f8d415e8          LDR      r1,[r4,#0x5e8]
000016  6888              LDR      r0,[r1,#8]
000018  4780              BLX      r0
;;;423      return USBD_OK; 
00001a  2000              MOVS     r0,#0
;;;424    }
00001c  bd70              POP      {r4-r6,pc}
;;;425    
                          ENDP


                          AREA ||i.USBD_SetupStage||, CODE, READONLY, ALIGN=1

                  USBD_SetupStage PROC
;;;178    */
;;;179    static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
000000  b51c              PUSH     {r2-r4,lr}
;;;180    {
000002  4604              MOV      r4,r0
;;;181      USB_SETUP_REQ req;
;;;182      
;;;183      USBD_ParseSetupRequest(pdev , &req);
000004  4669              MOV      r1,sp
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       USBD_ParseSetupRequest
;;;184      
;;;185      switch (req.bmRequest & 0x1F) 
00000c  f89d0000          LDRB     r0,[sp,#0]
000010  f000001f          AND      r0,r0,#0x1f
000014  b120              CBZ      r0,|L13.32|
000016  2801              CMP      r0,#1
000018  d007              BEQ      |L13.42|
00001a  2802              CMP      r0,#2
00001c  d10f              BNE      |L13.62|
00001e  e009              B        |L13.52|
                  |L13.32|
;;;186      {
;;;187      case USB_REQ_RECIPIENT_DEVICE:   
;;;188        USBD_StdDevReq (pdev, &req);
000020  4669              MOV      r1,sp
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       USBD_StdDevReq
;;;189        break;
000028  e011              B        |L13.78|
                  |L13.42|
;;;190        
;;;191      case USB_REQ_RECIPIENT_INTERFACE:     
;;;192        USBD_StdItfReq(pdev, &req);
00002a  4669              MOV      r1,sp
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       USBD_StdItfReq
;;;193        break;
000032  e00c              B        |L13.78|
                  |L13.52|
;;;194        
;;;195      case USB_REQ_RECIPIENT_ENDPOINT:        
;;;196        USBD_StdEPReq(pdev, &req);   
000034  4669              MOV      r1,sp
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       USBD_StdEPReq
;;;197        break;
00003c  e007              B        |L13.78|
                  |L13.62|
;;;198        
;;;199      default:           
;;;200        DCD_EP_Stall(pdev , req.bmRequest & 0x80);
00003e  f89d0000          LDRB     r0,[sp,#0]
000042  f0000180          AND      r1,r0,#0x80
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       DCD_EP_Stall
;;;201        break;
00004c  bf00              NOP      
                  |L13.78|
00004e  bf00              NOP                            ;189
;;;202      }  
;;;203      return USBD_OK;
000050  2000              MOVS     r0,#0
;;;204    }
000052  bd1c              POP      {r2-r4,pc}
;;;205    
                          ENDP


                          AREA ||i.USBD_Suspend||, CODE, READONLY, ALIGN=1

                  USBD_Suspend PROC
;;;383    
;;;384    static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
000000  b510              PUSH     {r4,lr}
;;;385    {
000002  4604              MOV      r4,r0
;;;386      pdev->dev.device_old_status = pdev->dev.device_status;
000004  f44f7089          MOV      r0,#0x112
000008  5d01              LDRB     r1,[r0,r4]
00000a  1c40              ADDS     r0,r0,#1
00000c  5501              STRB     r1,[r0,r4]
;;;387      pdev->dev.device_status  = USB_OTG_SUSPENDED;
00000e  2104              MOVS     r1,#4
000010  1e40              SUBS     r0,r0,#1
000012  5501              STRB     r1,[r0,r4]
;;;388      /* Upon Resume call usr call back */
;;;389      pdev->dev.usr_cb->DeviceSuspended(); 
000014  f8d415e8          LDR      r1,[r4,#0x5e8]
000018  68c8              LDR      r0,[r1,#0xc]
00001a  4780              BLX      r0
;;;390      return USBD_OK;
00001c  2000              MOVS     r0,#0
;;;391    }
00001e  bd10              POP      {r4,pc}
;;;392    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  SET_TEST_MODE
                          DCD      0x00000000
                  USBD_DCD_INT_cb
                          DCD      USBD_DataOutStage
                          DCD      USBD_DataInStage
                          DCD      USBD_SetupStage
                          DCD      USBD_SOF
                          DCD      USBD_Reset
                          DCD      USBD_Suspend
                          DCD      USBD_Resume
                          DCD      USBD_IsoINIncomplete
                          DCD      USBD_IsoOUTIncomplete
                          DCD      0x00000000
                          DCD      0x00000000
                  USBD_DCD_INT_fops
                          DCD      USBD_DCD_INT_cb

;*** Start embedded assembler ***

#line 1 "..\\..\\Libraries\\STM32_USB_Device_Library\\Core\\src\\usbd_core.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_usbd_core_c_3d268f20____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_usbd_core_c_3d268f20____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_usbd_core_c_3d268f20____REVSH|
#line 144
|__asm___11_usbd_core_c_3d268f20____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
